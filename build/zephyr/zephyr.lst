
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00008000 <_vector_table>:
    8000:	68 cf 00 20 8d d3 00 00 a7 b7 01 00 61 d3 00 00     h.. ........a...
    8010:	61 d3 00 00 61 d3 00 00 61 d3 00 00 61 d3 00 00     a...a...a...a...
	...
    802c:	9d cb 00 00 61 d3 00 00 00 00 00 00 3d cb 00 00     ....a.......=...
    803c:	61 d3 00 00                                         a...

00008040 <_irq_vector_table>:
    8040:	25 cc 00 00 25 cc 00 00 25 cc 00 00 25 cc 00 00     %...%...%...%...
    8050:	25 cc 00 00 25 cc 00 00 25 cc 00 00 25 cc 00 00     %...%...%...%...
    8060:	25 cc 00 00 25 cc 00 00 25 cc 00 00 25 cc 00 00     %...%...%...%...
    8070:	25 cc 00 00 25 cc 00 00 25 cc 00 00 25 cc 00 00     %...%...%...%...
    8080:	25 cc 00 00 25 cc 00 00 25 cc 00 00 25 cc 00 00     %...%...%...%...
    8090:	25 cc 00 00 25 cc 00 00 25 cc 00 00 25 cc 00 00     %...%...%...%...
    80a0:	25 cc 00 00 25 cc 00 00 25 cc 00 00 25 cc 00 00     %...%...%...%...
    80b0:	25 cc 00 00 25 cc 00 00 25 cc 00 00 25 cc 00 00     %...%...%...%...
    80c0:	25 cc 00 00 25 cc 00 00 25 cc 00 00 25 cc 00 00     %...%...%...%...
    80d0:	25 cc 00 00 25 cc 00 00 25 cc 00 00 25 cc 00 00     %...%...%...%...
    80e0:	25 cc 00 00 25 cc 00 00 25 cc 00 00 25 cc 00 00     %...%...%...%...
    80f0:	25 cc 00 00 25 cc 00 00 25 cc 00 00 25 cc 00 00     %...%...%...%...
    8100:	25 cc 00 00 25 cc 00 00 25 cc 00 00 25 cc 00 00     %...%...%...%...
    8110:	25 cc 00 00 25 cc 00 00 25 cc 00 00 25 cc 00 00     %...%...%...%...
    8120:	25 cc 00 00 25 cc 00 00 25 cc 00 00 25 cc 00 00     %...%...%...%...
    8130:	25 cc 00 00 25 cc 00 00 25 cc 00 00 25 cc 00 00     %...%...%...%...
    8140:	25 cc 00 00 25 cc 00 00 25 cc 00 00 25 cc 00 00     %...%...%...%...
    8150:	25 cc 00 00                                         %...

Disassembly of section text:

00008158 <__aeabi_drsub>:
    8158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    815c:	e002      	b.n	8164 <__adddf3>
    815e:	bf00      	nop

00008160 <__aeabi_dsub>:
    8160:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00008164 <__adddf3>:
    8164:	b530      	push	{r4, r5, lr}
    8166:	ea4f 0441 	mov.w	r4, r1, lsl #1
    816a:	ea4f 0543 	mov.w	r5, r3, lsl #1
    816e:	ea94 0f05 	teq	r4, r5
    8172:	bf08      	it	eq
    8174:	ea90 0f02 	teqeq	r0, r2
    8178:	bf1f      	itttt	ne
    817a:	ea54 0c00 	orrsne.w	ip, r4, r0
    817e:	ea55 0c02 	orrsne.w	ip, r5, r2
    8182:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    8186:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    818a:	f000 80e2 	beq.w	8352 <__adddf3+0x1ee>
    818e:	ea4f 5454 	mov.w	r4, r4, lsr #21
    8192:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    8196:	bfb8      	it	lt
    8198:	426d      	neglt	r5, r5
    819a:	dd0c      	ble.n	81b6 <__adddf3+0x52>
    819c:	442c      	add	r4, r5
    819e:	ea80 0202 	eor.w	r2, r0, r2
    81a2:	ea81 0303 	eor.w	r3, r1, r3
    81a6:	ea82 0000 	eor.w	r0, r2, r0
    81aa:	ea83 0101 	eor.w	r1, r3, r1
    81ae:	ea80 0202 	eor.w	r2, r0, r2
    81b2:	ea81 0303 	eor.w	r3, r1, r3
    81b6:	2d36      	cmp	r5, #54	; 0x36
    81b8:	bf88      	it	hi
    81ba:	bd30      	pophi	{r4, r5, pc}
    81bc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    81c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
    81c4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    81c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    81cc:	d002      	beq.n	81d4 <__adddf3+0x70>
    81ce:	4240      	negs	r0, r0
    81d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    81d4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    81d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
    81dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    81e0:	d002      	beq.n	81e8 <__adddf3+0x84>
    81e2:	4252      	negs	r2, r2
    81e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    81e8:	ea94 0f05 	teq	r4, r5
    81ec:	f000 80a7 	beq.w	833e <__adddf3+0x1da>
    81f0:	f1a4 0401 	sub.w	r4, r4, #1
    81f4:	f1d5 0e20 	rsbs	lr, r5, #32
    81f8:	db0d      	blt.n	8216 <__adddf3+0xb2>
    81fa:	fa02 fc0e 	lsl.w	ip, r2, lr
    81fe:	fa22 f205 	lsr.w	r2, r2, r5
    8202:	1880      	adds	r0, r0, r2
    8204:	f141 0100 	adc.w	r1, r1, #0
    8208:	fa03 f20e 	lsl.w	r2, r3, lr
    820c:	1880      	adds	r0, r0, r2
    820e:	fa43 f305 	asr.w	r3, r3, r5
    8212:	4159      	adcs	r1, r3
    8214:	e00e      	b.n	8234 <__adddf3+0xd0>
    8216:	f1a5 0520 	sub.w	r5, r5, #32
    821a:	f10e 0e20 	add.w	lr, lr, #32
    821e:	2a01      	cmp	r2, #1
    8220:	fa03 fc0e 	lsl.w	ip, r3, lr
    8224:	bf28      	it	cs
    8226:	f04c 0c02 	orrcs.w	ip, ip, #2
    822a:	fa43 f305 	asr.w	r3, r3, r5
    822e:	18c0      	adds	r0, r0, r3
    8230:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    8234:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    8238:	d507      	bpl.n	824a <__adddf3+0xe6>
    823a:	f04f 0e00 	mov.w	lr, #0
    823e:	f1dc 0c00 	rsbs	ip, ip, #0
    8242:	eb7e 0000 	sbcs.w	r0, lr, r0
    8246:	eb6e 0101 	sbc.w	r1, lr, r1
    824a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    824e:	d31b      	bcc.n	8288 <__adddf3+0x124>
    8250:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    8254:	d30c      	bcc.n	8270 <__adddf3+0x10c>
    8256:	0849      	lsrs	r1, r1, #1
    8258:	ea5f 0030 	movs.w	r0, r0, rrx
    825c:	ea4f 0c3c 	mov.w	ip, ip, rrx
    8260:	f104 0401 	add.w	r4, r4, #1
    8264:	ea4f 5244 	mov.w	r2, r4, lsl #21
    8268:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    826c:	f080 809a 	bcs.w	83a4 <__adddf3+0x240>
    8270:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    8274:	bf08      	it	eq
    8276:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    827a:	f150 0000 	adcs.w	r0, r0, #0
    827e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    8282:	ea41 0105 	orr.w	r1, r1, r5
    8286:	bd30      	pop	{r4, r5, pc}
    8288:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    828c:	4140      	adcs	r0, r0
    828e:	eb41 0101 	adc.w	r1, r1, r1
    8292:	3c01      	subs	r4, #1
    8294:	bf28      	it	cs
    8296:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    829a:	d2e9      	bcs.n	8270 <__adddf3+0x10c>
    829c:	f091 0f00 	teq	r1, #0
    82a0:	bf04      	itt	eq
    82a2:	4601      	moveq	r1, r0
    82a4:	2000      	moveq	r0, #0
    82a6:	fab1 f381 	clz	r3, r1
    82aa:	bf08      	it	eq
    82ac:	3320      	addeq	r3, #32
    82ae:	f1a3 030b 	sub.w	r3, r3, #11
    82b2:	f1b3 0220 	subs.w	r2, r3, #32
    82b6:	da0c      	bge.n	82d2 <__adddf3+0x16e>
    82b8:	320c      	adds	r2, #12
    82ba:	dd08      	ble.n	82ce <__adddf3+0x16a>
    82bc:	f102 0c14 	add.w	ip, r2, #20
    82c0:	f1c2 020c 	rsb	r2, r2, #12
    82c4:	fa01 f00c 	lsl.w	r0, r1, ip
    82c8:	fa21 f102 	lsr.w	r1, r1, r2
    82cc:	e00c      	b.n	82e8 <__adddf3+0x184>
    82ce:	f102 0214 	add.w	r2, r2, #20
    82d2:	bfd8      	it	le
    82d4:	f1c2 0c20 	rsble	ip, r2, #32
    82d8:	fa01 f102 	lsl.w	r1, r1, r2
    82dc:	fa20 fc0c 	lsr.w	ip, r0, ip
    82e0:	bfdc      	itt	le
    82e2:	ea41 010c 	orrle.w	r1, r1, ip
    82e6:	4090      	lslle	r0, r2
    82e8:	1ae4      	subs	r4, r4, r3
    82ea:	bfa2      	ittt	ge
    82ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    82f0:	4329      	orrge	r1, r5
    82f2:	bd30      	popge	{r4, r5, pc}
    82f4:	ea6f 0404 	mvn.w	r4, r4
    82f8:	3c1f      	subs	r4, #31
    82fa:	da1c      	bge.n	8336 <__adddf3+0x1d2>
    82fc:	340c      	adds	r4, #12
    82fe:	dc0e      	bgt.n	831e <__adddf3+0x1ba>
    8300:	f104 0414 	add.w	r4, r4, #20
    8304:	f1c4 0220 	rsb	r2, r4, #32
    8308:	fa20 f004 	lsr.w	r0, r0, r4
    830c:	fa01 f302 	lsl.w	r3, r1, r2
    8310:	ea40 0003 	orr.w	r0, r0, r3
    8314:	fa21 f304 	lsr.w	r3, r1, r4
    8318:	ea45 0103 	orr.w	r1, r5, r3
    831c:	bd30      	pop	{r4, r5, pc}
    831e:	f1c4 040c 	rsb	r4, r4, #12
    8322:	f1c4 0220 	rsb	r2, r4, #32
    8326:	fa20 f002 	lsr.w	r0, r0, r2
    832a:	fa01 f304 	lsl.w	r3, r1, r4
    832e:	ea40 0003 	orr.w	r0, r0, r3
    8332:	4629      	mov	r1, r5
    8334:	bd30      	pop	{r4, r5, pc}
    8336:	fa21 f004 	lsr.w	r0, r1, r4
    833a:	4629      	mov	r1, r5
    833c:	bd30      	pop	{r4, r5, pc}
    833e:	f094 0f00 	teq	r4, #0
    8342:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    8346:	bf06      	itte	eq
    8348:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    834c:	3401      	addeq	r4, #1
    834e:	3d01      	subne	r5, #1
    8350:	e74e      	b.n	81f0 <__adddf3+0x8c>
    8352:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    8356:	bf18      	it	ne
    8358:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    835c:	d029      	beq.n	83b2 <__adddf3+0x24e>
    835e:	ea94 0f05 	teq	r4, r5
    8362:	bf08      	it	eq
    8364:	ea90 0f02 	teqeq	r0, r2
    8368:	d005      	beq.n	8376 <__adddf3+0x212>
    836a:	ea54 0c00 	orrs.w	ip, r4, r0
    836e:	bf04      	itt	eq
    8370:	4619      	moveq	r1, r3
    8372:	4610      	moveq	r0, r2
    8374:	bd30      	pop	{r4, r5, pc}
    8376:	ea91 0f03 	teq	r1, r3
    837a:	bf1e      	ittt	ne
    837c:	2100      	movne	r1, #0
    837e:	2000      	movne	r0, #0
    8380:	bd30      	popne	{r4, r5, pc}
    8382:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    8386:	d105      	bne.n	8394 <__adddf3+0x230>
    8388:	0040      	lsls	r0, r0, #1
    838a:	4149      	adcs	r1, r1
    838c:	bf28      	it	cs
    838e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    8392:	bd30      	pop	{r4, r5, pc}
    8394:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    8398:	bf3c      	itt	cc
    839a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    839e:	bd30      	popcc	{r4, r5, pc}
    83a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    83a4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    83a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    83ac:	f04f 0000 	mov.w	r0, #0
    83b0:	bd30      	pop	{r4, r5, pc}
    83b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    83b6:	bf1a      	itte	ne
    83b8:	4619      	movne	r1, r3
    83ba:	4610      	movne	r0, r2
    83bc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    83c0:	bf1c      	itt	ne
    83c2:	460b      	movne	r3, r1
    83c4:	4602      	movne	r2, r0
    83c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    83ca:	bf06      	itte	eq
    83cc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    83d0:	ea91 0f03 	teqeq	r1, r3
    83d4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    83d8:	bd30      	pop	{r4, r5, pc}
    83da:	bf00      	nop

000083dc <__aeabi_ui2d>:
    83dc:	f090 0f00 	teq	r0, #0
    83e0:	bf04      	itt	eq
    83e2:	2100      	moveq	r1, #0
    83e4:	4770      	bxeq	lr
    83e6:	b530      	push	{r4, r5, lr}
    83e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
    83ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
    83f0:	f04f 0500 	mov.w	r5, #0
    83f4:	f04f 0100 	mov.w	r1, #0
    83f8:	e750      	b.n	829c <__adddf3+0x138>
    83fa:	bf00      	nop

000083fc <__aeabi_i2d>:
    83fc:	f090 0f00 	teq	r0, #0
    8400:	bf04      	itt	eq
    8402:	2100      	moveq	r1, #0
    8404:	4770      	bxeq	lr
    8406:	b530      	push	{r4, r5, lr}
    8408:	f44f 6480 	mov.w	r4, #1024	; 0x400
    840c:	f104 0432 	add.w	r4, r4, #50	; 0x32
    8410:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    8414:	bf48      	it	mi
    8416:	4240      	negmi	r0, r0
    8418:	f04f 0100 	mov.w	r1, #0
    841c:	e73e      	b.n	829c <__adddf3+0x138>
    841e:	bf00      	nop

00008420 <__aeabi_f2d>:
    8420:	0042      	lsls	r2, r0, #1
    8422:	ea4f 01e2 	mov.w	r1, r2, asr #3
    8426:	ea4f 0131 	mov.w	r1, r1, rrx
    842a:	ea4f 7002 	mov.w	r0, r2, lsl #28
    842e:	bf1f      	itttt	ne
    8430:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    8434:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    8438:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    843c:	4770      	bxne	lr
    843e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    8442:	bf08      	it	eq
    8444:	4770      	bxeq	lr
    8446:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    844a:	bf04      	itt	eq
    844c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    8450:	4770      	bxeq	lr
    8452:	b530      	push	{r4, r5, lr}
    8454:	f44f 7460 	mov.w	r4, #896	; 0x380
    8458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    845c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    8460:	e71c      	b.n	829c <__adddf3+0x138>
    8462:	bf00      	nop

00008464 <__aeabi_ul2d>:
    8464:	ea50 0201 	orrs.w	r2, r0, r1
    8468:	bf08      	it	eq
    846a:	4770      	bxeq	lr
    846c:	b530      	push	{r4, r5, lr}
    846e:	f04f 0500 	mov.w	r5, #0
    8472:	e00a      	b.n	848a <__aeabi_l2d+0x16>

00008474 <__aeabi_l2d>:
    8474:	ea50 0201 	orrs.w	r2, r0, r1
    8478:	bf08      	it	eq
    847a:	4770      	bxeq	lr
    847c:	b530      	push	{r4, r5, lr}
    847e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    8482:	d502      	bpl.n	848a <__aeabi_l2d+0x16>
    8484:	4240      	negs	r0, r0
    8486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    848a:	f44f 6480 	mov.w	r4, #1024	; 0x400
    848e:	f104 0432 	add.w	r4, r4, #50	; 0x32
    8492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    8496:	f43f aed8 	beq.w	824a <__adddf3+0xe6>
    849a:	f04f 0203 	mov.w	r2, #3
    849e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    84a2:	bf18      	it	ne
    84a4:	3203      	addne	r2, #3
    84a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    84aa:	bf18      	it	ne
    84ac:	3203      	addne	r2, #3
    84ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    84b2:	f1c2 0320 	rsb	r3, r2, #32
    84b6:	fa00 fc03 	lsl.w	ip, r0, r3
    84ba:	fa20 f002 	lsr.w	r0, r0, r2
    84be:	fa01 fe03 	lsl.w	lr, r1, r3
    84c2:	ea40 000e 	orr.w	r0, r0, lr
    84c6:	fa21 f102 	lsr.w	r1, r1, r2
    84ca:	4414      	add	r4, r2
    84cc:	e6bd      	b.n	824a <__adddf3+0xe6>
    84ce:	bf00      	nop

000084d0 <__aeabi_frsub>:
    84d0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    84d4:	e002      	b.n	84dc <__addsf3>
    84d6:	bf00      	nop

000084d8 <__aeabi_fsub>:
    84d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000084dc <__addsf3>:
    84dc:	0042      	lsls	r2, r0, #1
    84de:	bf1f      	itttt	ne
    84e0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    84e4:	ea92 0f03 	teqne	r2, r3
    84e8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    84ec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    84f0:	d06a      	beq.n	85c8 <__addsf3+0xec>
    84f2:	ea4f 6212 	mov.w	r2, r2, lsr #24
    84f6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    84fa:	bfc1      	itttt	gt
    84fc:	18d2      	addgt	r2, r2, r3
    84fe:	4041      	eorgt	r1, r0
    8500:	4048      	eorgt	r0, r1
    8502:	4041      	eorgt	r1, r0
    8504:	bfb8      	it	lt
    8506:	425b      	neglt	r3, r3
    8508:	2b19      	cmp	r3, #25
    850a:	bf88      	it	hi
    850c:	4770      	bxhi	lr
    850e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    8512:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8516:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    851a:	bf18      	it	ne
    851c:	4240      	negne	r0, r0
    851e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    8522:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    8526:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    852a:	bf18      	it	ne
    852c:	4249      	negne	r1, r1
    852e:	ea92 0f03 	teq	r2, r3
    8532:	d03f      	beq.n	85b4 <__addsf3+0xd8>
    8534:	f1a2 0201 	sub.w	r2, r2, #1
    8538:	fa41 fc03 	asr.w	ip, r1, r3
    853c:	eb10 000c 	adds.w	r0, r0, ip
    8540:	f1c3 0320 	rsb	r3, r3, #32
    8544:	fa01 f103 	lsl.w	r1, r1, r3
    8548:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    854c:	d502      	bpl.n	8554 <__addsf3+0x78>
    854e:	4249      	negs	r1, r1
    8550:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    8554:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    8558:	d313      	bcc.n	8582 <__addsf3+0xa6>
    855a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    855e:	d306      	bcc.n	856e <__addsf3+0x92>
    8560:	0840      	lsrs	r0, r0, #1
    8562:	ea4f 0131 	mov.w	r1, r1, rrx
    8566:	f102 0201 	add.w	r2, r2, #1
    856a:	2afe      	cmp	r2, #254	; 0xfe
    856c:	d251      	bcs.n	8612 <__addsf3+0x136>
    856e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    8572:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    8576:	bf08      	it	eq
    8578:	f020 0001 	biceq.w	r0, r0, #1
    857c:	ea40 0003 	orr.w	r0, r0, r3
    8580:	4770      	bx	lr
    8582:	0049      	lsls	r1, r1, #1
    8584:	eb40 0000 	adc.w	r0, r0, r0
    8588:	3a01      	subs	r2, #1
    858a:	bf28      	it	cs
    858c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
    8590:	d2ed      	bcs.n	856e <__addsf3+0x92>
    8592:	fab0 fc80 	clz	ip, r0
    8596:	f1ac 0c08 	sub.w	ip, ip, #8
    859a:	ebb2 020c 	subs.w	r2, r2, ip
    859e:	fa00 f00c 	lsl.w	r0, r0, ip
    85a2:	bfaa      	itet	ge
    85a4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    85a8:	4252      	neglt	r2, r2
    85aa:	4318      	orrge	r0, r3
    85ac:	bfbc      	itt	lt
    85ae:	40d0      	lsrlt	r0, r2
    85b0:	4318      	orrlt	r0, r3
    85b2:	4770      	bx	lr
    85b4:	f092 0f00 	teq	r2, #0
    85b8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    85bc:	bf06      	itte	eq
    85be:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    85c2:	3201      	addeq	r2, #1
    85c4:	3b01      	subne	r3, #1
    85c6:	e7b5      	b.n	8534 <__addsf3+0x58>
    85c8:	ea4f 0341 	mov.w	r3, r1, lsl #1
    85cc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    85d0:	bf18      	it	ne
    85d2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    85d6:	d021      	beq.n	861c <__addsf3+0x140>
    85d8:	ea92 0f03 	teq	r2, r3
    85dc:	d004      	beq.n	85e8 <__addsf3+0x10c>
    85de:	f092 0f00 	teq	r2, #0
    85e2:	bf08      	it	eq
    85e4:	4608      	moveq	r0, r1
    85e6:	4770      	bx	lr
    85e8:	ea90 0f01 	teq	r0, r1
    85ec:	bf1c      	itt	ne
    85ee:	2000      	movne	r0, #0
    85f0:	4770      	bxne	lr
    85f2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    85f6:	d104      	bne.n	8602 <__addsf3+0x126>
    85f8:	0040      	lsls	r0, r0, #1
    85fa:	bf28      	it	cs
    85fc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    8600:	4770      	bx	lr
    8602:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    8606:	bf3c      	itt	cc
    8608:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    860c:	4770      	bxcc	lr
    860e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    8612:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    8616:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    861a:	4770      	bx	lr
    861c:	ea7f 6222 	mvns.w	r2, r2, asr #24
    8620:	bf16      	itet	ne
    8622:	4608      	movne	r0, r1
    8624:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    8628:	4601      	movne	r1, r0
    862a:	0242      	lsls	r2, r0, #9
    862c:	bf06      	itte	eq
    862e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    8632:	ea90 0f01 	teqeq	r0, r1
    8636:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    863a:	4770      	bx	lr

0000863c <__aeabi_ui2f>:
    863c:	f04f 0300 	mov.w	r3, #0
    8640:	e004      	b.n	864c <__aeabi_i2f+0x8>
    8642:	bf00      	nop

00008644 <__aeabi_i2f>:
    8644:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    8648:	bf48      	it	mi
    864a:	4240      	negmi	r0, r0
    864c:	ea5f 0c00 	movs.w	ip, r0
    8650:	bf08      	it	eq
    8652:	4770      	bxeq	lr
    8654:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    8658:	4601      	mov	r1, r0
    865a:	f04f 0000 	mov.w	r0, #0
    865e:	e01c      	b.n	869a <__aeabi_l2f+0x2a>

00008660 <__aeabi_ul2f>:
    8660:	ea50 0201 	orrs.w	r2, r0, r1
    8664:	bf08      	it	eq
    8666:	4770      	bxeq	lr
    8668:	f04f 0300 	mov.w	r3, #0
    866c:	e00a      	b.n	8684 <__aeabi_l2f+0x14>
    866e:	bf00      	nop

00008670 <__aeabi_l2f>:
    8670:	ea50 0201 	orrs.w	r2, r0, r1
    8674:	bf08      	it	eq
    8676:	4770      	bxeq	lr
    8678:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    867c:	d502      	bpl.n	8684 <__aeabi_l2f+0x14>
    867e:	4240      	negs	r0, r0
    8680:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8684:	ea5f 0c01 	movs.w	ip, r1
    8688:	bf02      	ittt	eq
    868a:	4684      	moveq	ip, r0
    868c:	4601      	moveq	r1, r0
    868e:	2000      	moveq	r0, #0
    8690:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    8694:	bf08      	it	eq
    8696:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    869a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    869e:	fabc f28c 	clz	r2, ip
    86a2:	3a08      	subs	r2, #8
    86a4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    86a8:	db10      	blt.n	86cc <__aeabi_l2f+0x5c>
    86aa:	fa01 fc02 	lsl.w	ip, r1, r2
    86ae:	4463      	add	r3, ip
    86b0:	fa00 fc02 	lsl.w	ip, r0, r2
    86b4:	f1c2 0220 	rsb	r2, r2, #32
    86b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    86bc:	fa20 f202 	lsr.w	r2, r0, r2
    86c0:	eb43 0002 	adc.w	r0, r3, r2
    86c4:	bf08      	it	eq
    86c6:	f020 0001 	biceq.w	r0, r0, #1
    86ca:	4770      	bx	lr
    86cc:	f102 0220 	add.w	r2, r2, #32
    86d0:	fa01 fc02 	lsl.w	ip, r1, r2
    86d4:	f1c2 0220 	rsb	r2, r2, #32
    86d8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    86dc:	fa21 f202 	lsr.w	r2, r1, r2
    86e0:	eb43 0002 	adc.w	r0, r3, r2
    86e4:	bf08      	it	eq
    86e6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    86ea:	4770      	bx	lr

000086ec <__aeabi_fmul>:
    86ec:	f04f 0cff 	mov.w	ip, #255	; 0xff
    86f0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    86f4:	bf1e      	ittt	ne
    86f6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    86fa:	ea92 0f0c 	teqne	r2, ip
    86fe:	ea93 0f0c 	teqne	r3, ip
    8702:	d06f      	beq.n	87e4 <__aeabi_fmul+0xf8>
    8704:	441a      	add	r2, r3
    8706:	ea80 0c01 	eor.w	ip, r0, r1
    870a:	0240      	lsls	r0, r0, #9
    870c:	bf18      	it	ne
    870e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    8712:	d01e      	beq.n	8752 <__aeabi_fmul+0x66>
    8714:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    8718:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    871c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    8720:	fba0 3101 	umull	r3, r1, r0, r1
    8724:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    8728:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    872c:	bf3e      	ittt	cc
    872e:	0049      	lslcc	r1, r1, #1
    8730:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    8734:	005b      	lslcc	r3, r3, #1
    8736:	ea40 0001 	orr.w	r0, r0, r1
    873a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    873e:	2afd      	cmp	r2, #253	; 0xfd
    8740:	d81d      	bhi.n	877e <__aeabi_fmul+0x92>
    8742:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    8746:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    874a:	bf08      	it	eq
    874c:	f020 0001 	biceq.w	r0, r0, #1
    8750:	4770      	bx	lr
    8752:	f090 0f00 	teq	r0, #0
    8756:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    875a:	bf08      	it	eq
    875c:	0249      	lsleq	r1, r1, #9
    875e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    8762:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    8766:	3a7f      	subs	r2, #127	; 0x7f
    8768:	bfc2      	ittt	gt
    876a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    876e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    8772:	4770      	bxgt	lr
    8774:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8778:	f04f 0300 	mov.w	r3, #0
    877c:	3a01      	subs	r2, #1
    877e:	dc5d      	bgt.n	883c <__aeabi_fmul+0x150>
    8780:	f112 0f19 	cmn.w	r2, #25
    8784:	bfdc      	itt	le
    8786:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    878a:	4770      	bxle	lr
    878c:	f1c2 0200 	rsb	r2, r2, #0
    8790:	0041      	lsls	r1, r0, #1
    8792:	fa21 f102 	lsr.w	r1, r1, r2
    8796:	f1c2 0220 	rsb	r2, r2, #32
    879a:	fa00 fc02 	lsl.w	ip, r0, r2
    879e:	ea5f 0031 	movs.w	r0, r1, rrx
    87a2:	f140 0000 	adc.w	r0, r0, #0
    87a6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    87aa:	bf08      	it	eq
    87ac:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    87b0:	4770      	bx	lr
    87b2:	f092 0f00 	teq	r2, #0
    87b6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    87ba:	bf02      	ittt	eq
    87bc:	0040      	lsleq	r0, r0, #1
    87be:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    87c2:	3a01      	subeq	r2, #1
    87c4:	d0f9      	beq.n	87ba <__aeabi_fmul+0xce>
    87c6:	ea40 000c 	orr.w	r0, r0, ip
    87ca:	f093 0f00 	teq	r3, #0
    87ce:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    87d2:	bf02      	ittt	eq
    87d4:	0049      	lsleq	r1, r1, #1
    87d6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    87da:	3b01      	subeq	r3, #1
    87dc:	d0f9      	beq.n	87d2 <__aeabi_fmul+0xe6>
    87de:	ea41 010c 	orr.w	r1, r1, ip
    87e2:	e78f      	b.n	8704 <__aeabi_fmul+0x18>
    87e4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    87e8:	ea92 0f0c 	teq	r2, ip
    87ec:	bf18      	it	ne
    87ee:	ea93 0f0c 	teqne	r3, ip
    87f2:	d00a      	beq.n	880a <__aeabi_fmul+0x11e>
    87f4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    87f8:	bf18      	it	ne
    87fa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    87fe:	d1d8      	bne.n	87b2 <__aeabi_fmul+0xc6>
    8800:	ea80 0001 	eor.w	r0, r0, r1
    8804:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    8808:	4770      	bx	lr
    880a:	f090 0f00 	teq	r0, #0
    880e:	bf17      	itett	ne
    8810:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    8814:	4608      	moveq	r0, r1
    8816:	f091 0f00 	teqne	r1, #0
    881a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    881e:	d014      	beq.n	884a <__aeabi_fmul+0x15e>
    8820:	ea92 0f0c 	teq	r2, ip
    8824:	d101      	bne.n	882a <__aeabi_fmul+0x13e>
    8826:	0242      	lsls	r2, r0, #9
    8828:	d10f      	bne.n	884a <__aeabi_fmul+0x15e>
    882a:	ea93 0f0c 	teq	r3, ip
    882e:	d103      	bne.n	8838 <__aeabi_fmul+0x14c>
    8830:	024b      	lsls	r3, r1, #9
    8832:	bf18      	it	ne
    8834:	4608      	movne	r0, r1
    8836:	d108      	bne.n	884a <__aeabi_fmul+0x15e>
    8838:	ea80 0001 	eor.w	r0, r0, r1
    883c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    8840:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    8844:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8848:	4770      	bx	lr
    884a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    884e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    8852:	4770      	bx	lr

00008854 <__aeabi_fdiv>:
    8854:	f04f 0cff 	mov.w	ip, #255	; 0xff
    8858:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    885c:	bf1e      	ittt	ne
    885e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    8862:	ea92 0f0c 	teqne	r2, ip
    8866:	ea93 0f0c 	teqne	r3, ip
    886a:	d069      	beq.n	8940 <__aeabi_fdiv+0xec>
    886c:	eba2 0203 	sub.w	r2, r2, r3
    8870:	ea80 0c01 	eor.w	ip, r0, r1
    8874:	0249      	lsls	r1, r1, #9
    8876:	ea4f 2040 	mov.w	r0, r0, lsl #9
    887a:	d037      	beq.n	88ec <__aeabi_fdiv+0x98>
    887c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    8880:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
    8884:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
    8888:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    888c:	428b      	cmp	r3, r1
    888e:	bf38      	it	cc
    8890:	005b      	lslcc	r3, r3, #1
    8892:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
    8896:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    889a:	428b      	cmp	r3, r1
    889c:	bf24      	itt	cs
    889e:	1a5b      	subcs	r3, r3, r1
    88a0:	ea40 000c 	orrcs.w	r0, r0, ip
    88a4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
    88a8:	bf24      	itt	cs
    88aa:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
    88ae:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    88b2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
    88b6:	bf24      	itt	cs
    88b8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
    88bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    88c0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    88c4:	bf24      	itt	cs
    88c6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
    88ca:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    88ce:	011b      	lsls	r3, r3, #4
    88d0:	bf18      	it	ne
    88d2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
    88d6:	d1e0      	bne.n	889a <__aeabi_fdiv+0x46>
    88d8:	2afd      	cmp	r2, #253	; 0xfd
    88da:	f63f af50 	bhi.w	877e <__aeabi_fmul+0x92>
    88de:	428b      	cmp	r3, r1
    88e0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    88e4:	bf08      	it	eq
    88e6:	f020 0001 	biceq.w	r0, r0, #1
    88ea:	4770      	bx	lr
    88ec:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    88f0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    88f4:	327f      	adds	r2, #127	; 0x7f
    88f6:	bfc2      	ittt	gt
    88f8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    88fc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    8900:	4770      	bxgt	lr
    8902:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8906:	f04f 0300 	mov.w	r3, #0
    890a:	3a01      	subs	r2, #1
    890c:	e737      	b.n	877e <__aeabi_fmul+0x92>
    890e:	f092 0f00 	teq	r2, #0
    8912:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    8916:	bf02      	ittt	eq
    8918:	0040      	lsleq	r0, r0, #1
    891a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    891e:	3a01      	subeq	r2, #1
    8920:	d0f9      	beq.n	8916 <__aeabi_fdiv+0xc2>
    8922:	ea40 000c 	orr.w	r0, r0, ip
    8926:	f093 0f00 	teq	r3, #0
    892a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    892e:	bf02      	ittt	eq
    8930:	0049      	lsleq	r1, r1, #1
    8932:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    8936:	3b01      	subeq	r3, #1
    8938:	d0f9      	beq.n	892e <__aeabi_fdiv+0xda>
    893a:	ea41 010c 	orr.w	r1, r1, ip
    893e:	e795      	b.n	886c <__aeabi_fdiv+0x18>
    8940:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    8944:	ea92 0f0c 	teq	r2, ip
    8948:	d108      	bne.n	895c <__aeabi_fdiv+0x108>
    894a:	0242      	lsls	r2, r0, #9
    894c:	f47f af7d 	bne.w	884a <__aeabi_fmul+0x15e>
    8950:	ea93 0f0c 	teq	r3, ip
    8954:	f47f af70 	bne.w	8838 <__aeabi_fmul+0x14c>
    8958:	4608      	mov	r0, r1
    895a:	e776      	b.n	884a <__aeabi_fmul+0x15e>
    895c:	ea93 0f0c 	teq	r3, ip
    8960:	d104      	bne.n	896c <__aeabi_fdiv+0x118>
    8962:	024b      	lsls	r3, r1, #9
    8964:	f43f af4c 	beq.w	8800 <__aeabi_fmul+0x114>
    8968:	4608      	mov	r0, r1
    896a:	e76e      	b.n	884a <__aeabi_fmul+0x15e>
    896c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    8970:	bf18      	it	ne
    8972:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    8976:	d1ca      	bne.n	890e <__aeabi_fdiv+0xba>
    8978:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
    897c:	f47f af5c 	bne.w	8838 <__aeabi_fmul+0x14c>
    8980:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    8984:	f47f af3c 	bne.w	8800 <__aeabi_fmul+0x114>
    8988:	e75f      	b.n	884a <__aeabi_fmul+0x15e>
    898a:	bf00      	nop

0000898c <__gesf2>:
    898c:	f04f 3cff 	mov.w	ip, #4294967295
    8990:	e006      	b.n	89a0 <__cmpsf2+0x4>
    8992:	bf00      	nop

00008994 <__lesf2>:
    8994:	f04f 0c01 	mov.w	ip, #1
    8998:	e002      	b.n	89a0 <__cmpsf2+0x4>
    899a:	bf00      	nop

0000899c <__cmpsf2>:
    899c:	f04f 0c01 	mov.w	ip, #1
    89a0:	f84d cd04 	str.w	ip, [sp, #-4]!
    89a4:	ea4f 0240 	mov.w	r2, r0, lsl #1
    89a8:	ea4f 0341 	mov.w	r3, r1, lsl #1
    89ac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    89b0:	bf18      	it	ne
    89b2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    89b6:	d011      	beq.n	89dc <__cmpsf2+0x40>
    89b8:	b001      	add	sp, #4
    89ba:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
    89be:	bf18      	it	ne
    89c0:	ea90 0f01 	teqne	r0, r1
    89c4:	bf58      	it	pl
    89c6:	ebb2 0003 	subspl.w	r0, r2, r3
    89ca:	bf88      	it	hi
    89cc:	17c8      	asrhi	r0, r1, #31
    89ce:	bf38      	it	cc
    89d0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
    89d4:	bf18      	it	ne
    89d6:	f040 0001 	orrne.w	r0, r0, #1
    89da:	4770      	bx	lr
    89dc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    89e0:	d102      	bne.n	89e8 <__cmpsf2+0x4c>
    89e2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
    89e6:	d105      	bne.n	89f4 <__cmpsf2+0x58>
    89e8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
    89ec:	d1e4      	bne.n	89b8 <__cmpsf2+0x1c>
    89ee:	ea5f 2c41 	movs.w	ip, r1, lsl #9
    89f2:	d0e1      	beq.n	89b8 <__cmpsf2+0x1c>
    89f4:	f85d 0b04 	ldr.w	r0, [sp], #4
    89f8:	4770      	bx	lr
    89fa:	bf00      	nop

000089fc <__aeabi_cfrcmple>:
    89fc:	4684      	mov	ip, r0
    89fe:	4608      	mov	r0, r1
    8a00:	4661      	mov	r1, ip
    8a02:	e7ff      	b.n	8a04 <__aeabi_cfcmpeq>

00008a04 <__aeabi_cfcmpeq>:
    8a04:	b50f      	push	{r0, r1, r2, r3, lr}
    8a06:	f7ff ffc9 	bl	899c <__cmpsf2>
    8a0a:	2800      	cmp	r0, #0
    8a0c:	bf48      	it	mi
    8a0e:	f110 0f00 	cmnmi.w	r0, #0
    8a12:	bd0f      	pop	{r0, r1, r2, r3, pc}

00008a14 <__aeabi_fcmpeq>:
    8a14:	f84d ed08 	str.w	lr, [sp, #-8]!
    8a18:	f7ff fff4 	bl	8a04 <__aeabi_cfcmpeq>
    8a1c:	bf0c      	ite	eq
    8a1e:	2001      	moveq	r0, #1
    8a20:	2000      	movne	r0, #0
    8a22:	f85d fb08 	ldr.w	pc, [sp], #8
    8a26:	bf00      	nop

00008a28 <__aeabi_fcmplt>:
    8a28:	f84d ed08 	str.w	lr, [sp, #-8]!
    8a2c:	f7ff ffea 	bl	8a04 <__aeabi_cfcmpeq>
    8a30:	bf34      	ite	cc
    8a32:	2001      	movcc	r0, #1
    8a34:	2000      	movcs	r0, #0
    8a36:	f85d fb08 	ldr.w	pc, [sp], #8
    8a3a:	bf00      	nop

00008a3c <__aeabi_fcmple>:
    8a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
    8a40:	f7ff ffe0 	bl	8a04 <__aeabi_cfcmpeq>
    8a44:	bf94      	ite	ls
    8a46:	2001      	movls	r0, #1
    8a48:	2000      	movhi	r0, #0
    8a4a:	f85d fb08 	ldr.w	pc, [sp], #8
    8a4e:	bf00      	nop

00008a50 <__aeabi_fcmpge>:
    8a50:	f84d ed08 	str.w	lr, [sp, #-8]!
    8a54:	f7ff ffd2 	bl	89fc <__aeabi_cfrcmple>
    8a58:	bf94      	ite	ls
    8a5a:	2001      	movls	r0, #1
    8a5c:	2000      	movhi	r0, #0
    8a5e:	f85d fb08 	ldr.w	pc, [sp], #8
    8a62:	bf00      	nop

00008a64 <__aeabi_fcmpgt>:
    8a64:	f84d ed08 	str.w	lr, [sp, #-8]!
    8a68:	f7ff ffc8 	bl	89fc <__aeabi_cfrcmple>
    8a6c:	bf34      	ite	cc
    8a6e:	2001      	movcc	r0, #1
    8a70:	2000      	movcs	r0, #0
    8a72:	f85d fb08 	ldr.w	pc, [sp], #8
    8a76:	bf00      	nop

00008a78 <__aeabi_f2uiz>:
    8a78:	0042      	lsls	r2, r0, #1
    8a7a:	d20e      	bcs.n	8a9a <__aeabi_f2uiz+0x22>
    8a7c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    8a80:	d30b      	bcc.n	8a9a <__aeabi_f2uiz+0x22>
    8a82:	f04f 039e 	mov.w	r3, #158	; 0x9e
    8a86:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    8a8a:	d409      	bmi.n	8aa0 <__aeabi_f2uiz+0x28>
    8a8c:	ea4f 2300 	mov.w	r3, r0, lsl #8
    8a90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    8a94:	fa23 f002 	lsr.w	r0, r3, r2
    8a98:	4770      	bx	lr
    8a9a:	f04f 0000 	mov.w	r0, #0
    8a9e:	4770      	bx	lr
    8aa0:	f112 0f61 	cmn.w	r2, #97	; 0x61
    8aa4:	d101      	bne.n	8aaa <__aeabi_f2uiz+0x32>
    8aa6:	0242      	lsls	r2, r0, #9
    8aa8:	d102      	bne.n	8ab0 <__aeabi_f2uiz+0x38>
    8aaa:	f04f 30ff 	mov.w	r0, #4294967295
    8aae:	4770      	bx	lr
    8ab0:	f04f 0000 	mov.w	r0, #0
    8ab4:	4770      	bx	lr
    8ab6:	bf00      	nop

00008ab8 <__aeabi_uldivmod>:
    8ab8:	b953      	cbnz	r3, 8ad0 <__aeabi_uldivmod+0x18>
    8aba:	b94a      	cbnz	r2, 8ad0 <__aeabi_uldivmod+0x18>
    8abc:	2900      	cmp	r1, #0
    8abe:	bf08      	it	eq
    8ac0:	2800      	cmpeq	r0, #0
    8ac2:	bf1c      	itt	ne
    8ac4:	f04f 31ff 	movne.w	r1, #4294967295
    8ac8:	f04f 30ff 	movne.w	r0, #4294967295
    8acc:	f000 b80c 	b.w	8ae8 <__aeabi_idiv0>
    8ad0:	f1ad 0c08 	sub.w	ip, sp, #8
    8ad4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8ad8:	f000 f808 	bl	8aec <__udivmoddi4>
    8adc:	f8dd e004 	ldr.w	lr, [sp, #4]
    8ae0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8ae4:	b004      	add	sp, #16
    8ae6:	4770      	bx	lr

00008ae8 <__aeabi_idiv0>:
    8ae8:	4770      	bx	lr
    8aea:	bf00      	nop

00008aec <__udivmoddi4>:
    8aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8af0:	4686      	mov	lr, r0
    8af2:	468c      	mov	ip, r1
    8af4:	4608      	mov	r0, r1
    8af6:	9e08      	ldr	r6, [sp, #32]
    8af8:	4615      	mov	r5, r2
    8afa:	4674      	mov	r4, lr
    8afc:	4619      	mov	r1, r3
    8afe:	2b00      	cmp	r3, #0
    8b00:	f040 80c1 	bne.w	8c86 <__udivmoddi4+0x19a>
    8b04:	4285      	cmp	r5, r0
    8b06:	fab2 f282 	clz	r2, r2
    8b0a:	d945      	bls.n	8b98 <__udivmoddi4+0xac>
    8b0c:	b14a      	cbz	r2, 8b22 <__udivmoddi4+0x36>
    8b0e:	f1c2 0320 	rsb	r3, r2, #32
    8b12:	fa00 fc02 	lsl.w	ip, r0, r2
    8b16:	4095      	lsls	r5, r2
    8b18:	4094      	lsls	r4, r2
    8b1a:	fa2e f303 	lsr.w	r3, lr, r3
    8b1e:	ea43 0c0c 	orr.w	ip, r3, ip
    8b22:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    8b26:	b2a8      	uxth	r0, r5
    8b28:	0c23      	lsrs	r3, r4, #16
    8b2a:	fbbc f8fe 	udiv	r8, ip, lr
    8b2e:	fb0e cc18 	mls	ip, lr, r8, ip
    8b32:	fb08 f900 	mul.w	r9, r8, r0
    8b36:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    8b3a:	4599      	cmp	r9, r3
    8b3c:	d928      	bls.n	8b90 <__udivmoddi4+0xa4>
    8b3e:	18eb      	adds	r3, r5, r3
    8b40:	f108 37ff 	add.w	r7, r8, #4294967295
    8b44:	d204      	bcs.n	8b50 <__udivmoddi4+0x64>
    8b46:	4599      	cmp	r9, r3
    8b48:	d902      	bls.n	8b50 <__udivmoddi4+0x64>
    8b4a:	f1a8 0702 	sub.w	r7, r8, #2
    8b4e:	442b      	add	r3, r5
    8b50:	eba3 0309 	sub.w	r3, r3, r9
    8b54:	b2a4      	uxth	r4, r4
    8b56:	fbb3 fcfe 	udiv	ip, r3, lr
    8b5a:	fb0e 331c 	mls	r3, lr, ip, r3
    8b5e:	fb0c f000 	mul.w	r0, ip, r0
    8b62:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    8b66:	42a0      	cmp	r0, r4
    8b68:	d914      	bls.n	8b94 <__udivmoddi4+0xa8>
    8b6a:	192c      	adds	r4, r5, r4
    8b6c:	f10c 33ff 	add.w	r3, ip, #4294967295
    8b70:	d204      	bcs.n	8b7c <__udivmoddi4+0x90>
    8b72:	42a0      	cmp	r0, r4
    8b74:	d902      	bls.n	8b7c <__udivmoddi4+0x90>
    8b76:	f1ac 0302 	sub.w	r3, ip, #2
    8b7a:	442c      	add	r4, r5
    8b7c:	1a24      	subs	r4, r4, r0
    8b7e:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    8b82:	b11e      	cbz	r6, 8b8c <__udivmoddi4+0xa0>
    8b84:	40d4      	lsrs	r4, r2
    8b86:	2300      	movs	r3, #0
    8b88:	6034      	str	r4, [r6, #0]
    8b8a:	6073      	str	r3, [r6, #4]
    8b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8b90:	4647      	mov	r7, r8
    8b92:	e7dd      	b.n	8b50 <__udivmoddi4+0x64>
    8b94:	4663      	mov	r3, ip
    8b96:	e7f1      	b.n	8b7c <__udivmoddi4+0x90>
    8b98:	bb92      	cbnz	r2, 8c00 <__udivmoddi4+0x114>
    8b9a:	1b43      	subs	r3, r0, r5
    8b9c:	2101      	movs	r1, #1
    8b9e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    8ba2:	b2af      	uxth	r7, r5
    8ba4:	0c20      	lsrs	r0, r4, #16
    8ba6:	fbb3 fcfe 	udiv	ip, r3, lr
    8baa:	fb0e 331c 	mls	r3, lr, ip, r3
    8bae:	fb0c f807 	mul.w	r8, ip, r7
    8bb2:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    8bb6:	4598      	cmp	r8, r3
    8bb8:	d961      	bls.n	8c7e <__udivmoddi4+0x192>
    8bba:	18eb      	adds	r3, r5, r3
    8bbc:	f10c 30ff 	add.w	r0, ip, #4294967295
    8bc0:	d204      	bcs.n	8bcc <__udivmoddi4+0xe0>
    8bc2:	4598      	cmp	r8, r3
    8bc4:	d902      	bls.n	8bcc <__udivmoddi4+0xe0>
    8bc6:	f1ac 0002 	sub.w	r0, ip, #2
    8bca:	442b      	add	r3, r5
    8bcc:	eba3 0308 	sub.w	r3, r3, r8
    8bd0:	b2a4      	uxth	r4, r4
    8bd2:	fbb3 fcfe 	udiv	ip, r3, lr
    8bd6:	fb0e 331c 	mls	r3, lr, ip, r3
    8bda:	fb0c f707 	mul.w	r7, ip, r7
    8bde:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    8be2:	42a7      	cmp	r7, r4
    8be4:	d94d      	bls.n	8c82 <__udivmoddi4+0x196>
    8be6:	192c      	adds	r4, r5, r4
    8be8:	f10c 33ff 	add.w	r3, ip, #4294967295
    8bec:	d204      	bcs.n	8bf8 <__udivmoddi4+0x10c>
    8bee:	42a7      	cmp	r7, r4
    8bf0:	d902      	bls.n	8bf8 <__udivmoddi4+0x10c>
    8bf2:	f1ac 0302 	sub.w	r3, ip, #2
    8bf6:	442c      	add	r4, r5
    8bf8:	1be4      	subs	r4, r4, r7
    8bfa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    8bfe:	e7c0      	b.n	8b82 <__udivmoddi4+0x96>
    8c00:	f1c2 0320 	rsb	r3, r2, #32
    8c04:	4095      	lsls	r5, r2
    8c06:	4094      	lsls	r4, r2
    8c08:	fa20 f103 	lsr.w	r1, r0, r3
    8c0c:	fa2e f303 	lsr.w	r3, lr, r3
    8c10:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    8c14:	4090      	lsls	r0, r2
    8c16:	b2af      	uxth	r7, r5
    8c18:	4303      	orrs	r3, r0
    8c1a:	fbb1 fcfe 	udiv	ip, r1, lr
    8c1e:	fb0e 101c 	mls	r0, lr, ip, r1
    8c22:	0c19      	lsrs	r1, r3, #16
    8c24:	fb0c f807 	mul.w	r8, ip, r7
    8c28:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    8c2c:	4588      	cmp	r8, r1
    8c2e:	d922      	bls.n	8c76 <__udivmoddi4+0x18a>
    8c30:	1869      	adds	r1, r5, r1
    8c32:	f10c 30ff 	add.w	r0, ip, #4294967295
    8c36:	d204      	bcs.n	8c42 <__udivmoddi4+0x156>
    8c38:	4588      	cmp	r8, r1
    8c3a:	d902      	bls.n	8c42 <__udivmoddi4+0x156>
    8c3c:	f1ac 0002 	sub.w	r0, ip, #2
    8c40:	4429      	add	r1, r5
    8c42:	eba1 0108 	sub.w	r1, r1, r8
    8c46:	b29b      	uxth	r3, r3
    8c48:	fbb1 fcfe 	udiv	ip, r1, lr
    8c4c:	fb0e 111c 	mls	r1, lr, ip, r1
    8c50:	fb0c f707 	mul.w	r7, ip, r7
    8c54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    8c58:	429f      	cmp	r7, r3
    8c5a:	d90e      	bls.n	8c7a <__udivmoddi4+0x18e>
    8c5c:	18eb      	adds	r3, r5, r3
    8c5e:	f10c 31ff 	add.w	r1, ip, #4294967295
    8c62:	d204      	bcs.n	8c6e <__udivmoddi4+0x182>
    8c64:	429f      	cmp	r7, r3
    8c66:	d902      	bls.n	8c6e <__udivmoddi4+0x182>
    8c68:	f1ac 0102 	sub.w	r1, ip, #2
    8c6c:	442b      	add	r3, r5
    8c6e:	1bdb      	subs	r3, r3, r7
    8c70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    8c74:	e793      	b.n	8b9e <__udivmoddi4+0xb2>
    8c76:	4660      	mov	r0, ip
    8c78:	e7e3      	b.n	8c42 <__udivmoddi4+0x156>
    8c7a:	4661      	mov	r1, ip
    8c7c:	e7f7      	b.n	8c6e <__udivmoddi4+0x182>
    8c7e:	4660      	mov	r0, ip
    8c80:	e7a4      	b.n	8bcc <__udivmoddi4+0xe0>
    8c82:	4663      	mov	r3, ip
    8c84:	e7b8      	b.n	8bf8 <__udivmoddi4+0x10c>
    8c86:	4283      	cmp	r3, r0
    8c88:	d906      	bls.n	8c98 <__udivmoddi4+0x1ac>
    8c8a:	b916      	cbnz	r6, 8c92 <__udivmoddi4+0x1a6>
    8c8c:	2100      	movs	r1, #0
    8c8e:	4608      	mov	r0, r1
    8c90:	e77c      	b.n	8b8c <__udivmoddi4+0xa0>
    8c92:	e9c6 e000 	strd	lr, r0, [r6]
    8c96:	e7f9      	b.n	8c8c <__udivmoddi4+0x1a0>
    8c98:	fab3 f783 	clz	r7, r3
    8c9c:	b98f      	cbnz	r7, 8cc2 <__udivmoddi4+0x1d6>
    8c9e:	4283      	cmp	r3, r0
    8ca0:	d301      	bcc.n	8ca6 <__udivmoddi4+0x1ba>
    8ca2:	4572      	cmp	r2, lr
    8ca4:	d808      	bhi.n	8cb8 <__udivmoddi4+0x1cc>
    8ca6:	ebbe 0402 	subs.w	r4, lr, r2
    8caa:	eb60 0303 	sbc.w	r3, r0, r3
    8cae:	2001      	movs	r0, #1
    8cb0:	469c      	mov	ip, r3
    8cb2:	b91e      	cbnz	r6, 8cbc <__udivmoddi4+0x1d0>
    8cb4:	2100      	movs	r1, #0
    8cb6:	e769      	b.n	8b8c <__udivmoddi4+0xa0>
    8cb8:	4638      	mov	r0, r7
    8cba:	e7fa      	b.n	8cb2 <__udivmoddi4+0x1c6>
    8cbc:	e9c6 4c00 	strd	r4, ip, [r6]
    8cc0:	e7f8      	b.n	8cb4 <__udivmoddi4+0x1c8>
    8cc2:	f1c7 0c20 	rsb	ip, r7, #32
    8cc6:	40bb      	lsls	r3, r7
    8cc8:	fa0e f507 	lsl.w	r5, lr, r7
    8ccc:	fa22 f40c 	lsr.w	r4, r2, ip
    8cd0:	fa2e f10c 	lsr.w	r1, lr, ip
    8cd4:	40ba      	lsls	r2, r7
    8cd6:	431c      	orrs	r4, r3
    8cd8:	fa20 f30c 	lsr.w	r3, r0, ip
    8cdc:	40b8      	lsls	r0, r7
    8cde:	ea4f 4914 	mov.w	r9, r4, lsr #16
    8ce2:	4301      	orrs	r1, r0
    8ce4:	fa1f fe84 	uxth.w	lr, r4
    8ce8:	fbb3 f8f9 	udiv	r8, r3, r9
    8cec:	fb09 3018 	mls	r0, r9, r8, r3
    8cf0:	0c0b      	lsrs	r3, r1, #16
    8cf2:	fb08 fa0e 	mul.w	sl, r8, lr
    8cf6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    8cfa:	459a      	cmp	sl, r3
    8cfc:	d940      	bls.n	8d80 <__udivmoddi4+0x294>
    8cfe:	18e3      	adds	r3, r4, r3
    8d00:	f108 30ff 	add.w	r0, r8, #4294967295
    8d04:	d204      	bcs.n	8d10 <__udivmoddi4+0x224>
    8d06:	459a      	cmp	sl, r3
    8d08:	d902      	bls.n	8d10 <__udivmoddi4+0x224>
    8d0a:	f1a8 0002 	sub.w	r0, r8, #2
    8d0e:	4423      	add	r3, r4
    8d10:	eba3 030a 	sub.w	r3, r3, sl
    8d14:	b289      	uxth	r1, r1
    8d16:	fbb3 f8f9 	udiv	r8, r3, r9
    8d1a:	fb09 3318 	mls	r3, r9, r8, r3
    8d1e:	fb08 fe0e 	mul.w	lr, r8, lr
    8d22:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    8d26:	458e      	cmp	lr, r1
    8d28:	d92c      	bls.n	8d84 <__udivmoddi4+0x298>
    8d2a:	1861      	adds	r1, r4, r1
    8d2c:	f108 33ff 	add.w	r3, r8, #4294967295
    8d30:	d204      	bcs.n	8d3c <__udivmoddi4+0x250>
    8d32:	458e      	cmp	lr, r1
    8d34:	d902      	bls.n	8d3c <__udivmoddi4+0x250>
    8d36:	f1a8 0302 	sub.w	r3, r8, #2
    8d3a:	4421      	add	r1, r4
    8d3c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    8d40:	eba1 010e 	sub.w	r1, r1, lr
    8d44:	fba0 9802 	umull	r9, r8, r0, r2
    8d48:	4541      	cmp	r1, r8
    8d4a:	46ce      	mov	lr, r9
    8d4c:	4643      	mov	r3, r8
    8d4e:	d302      	bcc.n	8d56 <__udivmoddi4+0x26a>
    8d50:	d106      	bne.n	8d60 <__udivmoddi4+0x274>
    8d52:	454d      	cmp	r5, r9
    8d54:	d204      	bcs.n	8d60 <__udivmoddi4+0x274>
    8d56:	3801      	subs	r0, #1
    8d58:	ebb9 0e02 	subs.w	lr, r9, r2
    8d5c:	eb68 0304 	sbc.w	r3, r8, r4
    8d60:	2e00      	cmp	r6, #0
    8d62:	d0a7      	beq.n	8cb4 <__udivmoddi4+0x1c8>
    8d64:	ebb5 020e 	subs.w	r2, r5, lr
    8d68:	eb61 0103 	sbc.w	r1, r1, r3
    8d6c:	fa01 fc0c 	lsl.w	ip, r1, ip
    8d70:	fa22 f307 	lsr.w	r3, r2, r7
    8d74:	40f9      	lsrs	r1, r7
    8d76:	ea4c 0303 	orr.w	r3, ip, r3
    8d7a:	e9c6 3100 	strd	r3, r1, [r6]
    8d7e:	e799      	b.n	8cb4 <__udivmoddi4+0x1c8>
    8d80:	4640      	mov	r0, r8
    8d82:	e7c5      	b.n	8d10 <__udivmoddi4+0x224>
    8d84:	4643      	mov	r3, r8
    8d86:	e7d9      	b.n	8d3c <__udivmoddi4+0x250>

00008d88 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
    8d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8d8c:	b082      	sub	sp, #8
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    8d8e:	4d6a      	ldr	r5, [pc, #424]	; (8f38 <bt_init+0x1b0>)
{
    8d90:	af00      	add	r7, sp, #0
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    8d92:	f8d5 315c 	ldr.w	r3, [r5, #348]	; 0x15c
    8d96:	6899      	ldr	r1, [r3, #8]
    8d98:	f011 0101 	ands.w	r1, r1, #1
    8d9c:	d11a      	bne.n	8dd4 <bt_init+0x4c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    8d9e:	f640 4003 	movw	r0, #3075	; 0xc03
    8da2:	1d3a      	adds	r2, r7, #4
    8da4:	f005 fb44 	bl	e430 <bt_hci_cmd_send_sync>
		if (err) {
    8da8:	4604      	mov	r4, r0
    8daa:	2800      	cmp	r0, #0
    8dac:	f040 80be 	bne.w	8f2c <bt_init+0x1a4>
		hci_reset_complete(rsp);
    8db0:	6878      	ldr	r0, [r7, #4]
	uint8_t status = buf->data[0];
    8db2:	6883      	ldr	r3, [r0, #8]
	if (status) {
    8db4:	781b      	ldrb	r3, [r3, #0]
    8db6:	b95b      	cbnz	r3, 8dd0 <bt_init+0x48>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8db8:	f105 03cc 	add.w	r3, r5, #204	; 0xcc
    8dbc:	e8d3 2faf 	lda	r2, [r3]
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    8dc0:	f002 0209 	and.w	r2, r2, #9
    8dc4:	e8d3 1fef 	ldaex	r1, [r3]
    8dc8:	e8c3 2fe4 	stlex	r4, r2, [r3]
    8dcc:	2c00      	cmp	r4, #0
    8dce:	d1f9      	bne.n	8dc4 <bt_init+0x3c>
		net_buf_unref(rsp);
    8dd0:	f00c fbac 	bl	1552c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    8dd4:	2100      	movs	r1, #0
    8dd6:	f241 0003 	movw	r0, #4099	; 0x1003
    8dda:	1d3a      	adds	r2, r7, #4
    8ddc:	f005 fb28 	bl	e430 <bt_hci_cmd_send_sync>
	if (err) {
    8de0:	4604      	mov	r4, r0
    8de2:	2800      	cmp	r0, #0
    8de4:	f040 80a2 	bne.w	8f2c <bt_init+0x1a4>
	read_local_features_complete(rsp);
    8de8:	687e      	ldr	r6, [r7, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    8dea:	2208      	movs	r2, #8
    8dec:	68b1      	ldr	r1, [r6, #8]
    8dee:	4853      	ldr	r0, [pc, #332]	; (8f3c <bt_init+0x1b4>)
    8df0:	3101      	adds	r1, #1
    8df2:	f012 fd6e 	bl	1b8d2 <memcpy>
	net_buf_unref(rsp);
    8df6:	4630      	mov	r0, r6
    8df8:	f00c fb98 	bl	1552c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    8dfc:	4621      	mov	r1, r4
    8dfe:	f241 0001 	movw	r0, #4097	; 0x1001
    8e02:	1d3a      	adds	r2, r7, #4
    8e04:	f005 fb14 	bl	e430 <bt_hci_cmd_send_sync>
	if (err) {
    8e08:	4604      	mov	r4, r0
    8e0a:	2800      	cmp	r0, #0
    8e0c:	f040 808e 	bne.w	8f2c <bt_init+0x1a4>
	read_local_ver_complete(rsp);
    8e10:	6878      	ldr	r0, [r7, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    8e12:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    8e14:	785a      	ldrb	r2, [r3, #1]
    8e16:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    8e1a:	885a      	ldrh	r2, [r3, #2]
    8e1c:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
    8e20:	791a      	ldrb	r2, [r3, #4]
    8e22:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    8e26:	f8b3 2007 	ldrh.w	r2, [r3, #7]
    8e2a:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    8e2e:	f8b3 3005 	ldrh.w	r3, [r3, #5]
    8e32:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
    8e36:	f00c fb79 	bl	1552c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    8e3a:	4621      	mov	r1, r4
    8e3c:	f241 0002 	movw	r0, #4098	; 0x1002
    8e40:	1d3a      	adds	r2, r7, #4
    8e42:	f005 faf5 	bl	e430 <bt_hci_cmd_send_sync>
	if (err) {
    8e46:	4604      	mov	r4, r0
    8e48:	2800      	cmp	r0, #0
    8e4a:	d16f      	bne.n	8f2c <bt_init+0x1a4>
	read_supported_commands_complete(rsp);
    8e4c:	687c      	ldr	r4, [r7, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
    8e4e:	2240      	movs	r2, #64	; 0x40
    8e50:	68a1      	ldr	r1, [r4, #8]
    8e52:	483b      	ldr	r0, [pc, #236]	; (8f40 <bt_init+0x1b8>)
    8e54:	3101      	adds	r1, #1
    8e56:	f012 fd3c 	bl	1b8d2 <memcpy>
	net_buf_unref(rsp);
    8e5a:	4620      	mov	r0, r4
    8e5c:	f00c fb66 	bl	1552c <net_buf_unref>
		err = prng_init();
    8e60:	f007 fa4a 	bl	102f8 <prng_init>
		if (err) {
    8e64:	4604      	mov	r4, r0
    8e66:	2800      	cmp	r0, #0
    8e68:	d160      	bne.n	8f2c <bt_init+0x1a4>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    8e6a:	f895 3082 	ldrb.w	r3, [r5, #130]	; 0x82
    8e6e:	0699      	lsls	r1, r3, #26
    8e70:	d426      	bmi.n	8ec0 <bt_init+0x138>
		BT_WARN("Controller to host flow control not supported");
    8e72:	466c      	mov	r4, sp
    8e74:	b088      	sub	sp, #32
    8e76:	466a      	mov	r2, sp
    8e78:	4b32      	ldr	r3, [pc, #200]	; (8f44 <bt_init+0x1bc>)
    8e7a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    8e7e:	6153      	str	r3, [r2, #20]
    8e80:	4b31      	ldr	r3, [pc, #196]	; (8f48 <bt_init+0x1c0>)
    8e82:	4832      	ldr	r0, [pc, #200]	; (8f4c <bt_init+0x1c4>)
    8e84:	6193      	str	r3, [r2, #24]
    8e86:	2303      	movs	r3, #3
    8e88:	f842 3f10 	str.w	r3, [r2, #16]!
    8e8c:	f012 fdf0 	bl	1ba70 <z_log_msg_static_create.constprop.0>
    8e90:	46a5      	mov	sp, r4
	if (!BT_FEAT_LE(bt_dev.features)) {
    8e92:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    8e96:	065a      	lsls	r2, r3, #25
    8e98:	d45e      	bmi.n	8f58 <bt_init+0x1d0>
		BT_ERR("Non-LE capable controller detected!");
    8e9a:	466c      	mov	r4, sp
    8e9c:	b088      	sub	sp, #32
    8e9e:	466a      	mov	r2, sp
    8ea0:	4b2b      	ldr	r3, [pc, #172]	; (8f50 <bt_init+0x1c8>)
    8ea2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    8ea6:	6153      	str	r3, [r2, #20]
    8ea8:	4b2a      	ldr	r3, [pc, #168]	; (8f54 <bt_init+0x1cc>)
    8eaa:	4828      	ldr	r0, [pc, #160]	; (8f4c <bt_init+0x1c4>)
    8eac:	6193      	str	r3, [r2, #24]
    8eae:	2303      	movs	r3, #3
    8eb0:	f842 3f10 	str.w	r3, [r2, #16]!
    8eb4:	f012 fddc 	bl	1ba70 <z_log_msg_static_create.constprop.0>
    8eb8:	46a5      	mov	sp, r4
		return -ENODEV;
    8eba:	f06f 0412 	mvn.w	r4, #18
    8ebe:	e035      	b.n	8f2c <bt_init+0x1a4>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_BUFFER_SIZE,
    8ec0:	2107      	movs	r1, #7
    8ec2:	f640 4033 	movw	r0, #3123	; 0xc33
    8ec6:	f005 fa79 	bl	e3bc <bt_hci_cmd_create>
	if (!buf) {
    8eca:	4680      	mov	r8, r0
    8ecc:	2800      	cmp	r0, #0
    8ece:	f000 8147 	beq.w	9160 <bt_init+0x3d8>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
    8ed2:	2107      	movs	r1, #7
    8ed4:	3008      	adds	r0, #8
    8ed6:	f014 fe31 	bl	1db3c <net_buf_simple_add>
	(void)memset(hbs, 0, sizeof(*hbs));
    8eda:	4621      	mov	r1, r4
    8edc:	2207      	movs	r2, #7
    8ede:	4606      	mov	r6, r0
    8ee0:	f012 fd02 	bl	1b8e8 <memset>
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_SIZE);
    8ee4:	2345      	movs	r3, #69	; 0x45
    8ee6:	7033      	strb	r3, [r6, #0]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    8ee8:	2306      	movs	r3, #6
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    8eea:	4622      	mov	r2, r4
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_SIZE);
    8eec:	7074      	strb	r4, [r6, #1]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    8eee:	7134      	strb	r4, [r6, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    8ef0:	4641      	mov	r1, r8
    8ef2:	f640 4033 	movw	r0, #3123	; 0xc33
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    8ef6:	70f3      	strb	r3, [r6, #3]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    8ef8:	f005 fa9a 	bl	e430 <bt_hci_cmd_send_sync>
	if (err) {
    8efc:	4604      	mov	r4, r0
    8efe:	b9a8      	cbnz	r0, 8f2c <bt_init+0x1a4>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, 1);
    8f00:	2101      	movs	r1, #1
    8f02:	f640 4031 	movw	r0, #3121	; 0xc31
    8f06:	f005 fa59 	bl	e3bc <bt_hci_cmd_create>
	if (!buf) {
    8f0a:	4606      	mov	r6, r0
    8f0c:	2800      	cmp	r0, #0
    8f0e:	f000 8127 	beq.w	9160 <bt_init+0x3d8>
 *
 * @return Pointer to the value added
 */
static inline uint8_t *net_buf_add_u8(struct net_buf *buf, uint8_t val)
{
	return net_buf_simple_add_u8(&buf->b, val);
    8f12:	2101      	movs	r1, #1
    8f14:	3008      	adds	r0, #8
    8f16:	f014 fe20 	bl	1db5a <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, buf, NULL);
    8f1a:	4622      	mov	r2, r4
    8f1c:	4631      	mov	r1, r6
    8f1e:	f640 4031 	movw	r0, #3121	; 0xc31
    8f22:	f005 fa85 	bl	e430 <bt_hci_cmd_send_sync>
	if (err) {
    8f26:	4604      	mov	r4, r0
    8f28:	2800      	cmp	r0, #0
    8f2a:	d0b2      	beq.n	8e92 <bt_init+0x10a>
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
    8f2c:	4620      	mov	r0, r4
    8f2e:	3708      	adds	r7, #8
    8f30:	46bd      	mov	sp, r7
    8f32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8f36:	bf00      	nop
    8f38:	20008000 	.word	0x20008000
    8f3c:	20008070 	.word	0x20008070
    8f40:	20008078 	.word	0x20008078
    8f44:	00021c36 	.word	0x00021c36
    8f48:	000221a8 	.word	0x000221a8
    8f4c:	0001fc74 	.word	0x0001fc74
    8f50:	00021c68 	.word	0x00021c68
    8f54:	000221a0 	.word	0x000221a0
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    8f58:	2100      	movs	r1, #0
    8f5a:	f242 0003 	movw	r0, #8195	; 0x2003
    8f5e:	1d3a      	adds	r2, r7, #4
    8f60:	f005 fa66 	bl	e430 <bt_hci_cmd_send_sync>
	if (err) {
    8f64:	4604      	mov	r4, r0
    8f66:	2800      	cmp	r0, #0
    8f68:	d1e0      	bne.n	8f2c <bt_init+0x1a4>
	read_le_features_complete(rsp);
    8f6a:	687e      	ldr	r6, [r7, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    8f6c:	2208      	movs	r2, #8
    8f6e:	68b1      	ldr	r1, [r6, #8]
    8f70:	48ab      	ldr	r0, [pc, #684]	; (9220 <bt_init+0x498>)
    8f72:	3101      	adds	r1, #1
    8f74:	f012 fcad 	bl	1b8d2 <memcpy>
	net_buf_unref(rsp);
    8f78:	4630      	mov	r0, r6
    8f7a:	f00c fad7 	bl	1552c <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    8f7e:	4621      	mov	r1, r4
    8f80:	f242 0002 	movw	r0, #8194	; 0x2002
    8f84:	1d3a      	adds	r2, r7, #4
    8f86:	f005 fa53 	bl	e430 <bt_hci_cmd_send_sync>
		if (err) {
    8f8a:	4604      	mov	r4, r0
    8f8c:	2800      	cmp	r0, #0
    8f8e:	d1cd      	bne.n	8f2c <bt_init+0x1a4>
		le_read_buffer_size_complete(rsp);
    8f90:	687c      	ldr	r4, [r7, #4]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
    8f92:	68a3      	ldr	r3, [r4, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    8f94:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    8f98:	b291      	uxth	r1, r2
    8f9a:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	if (!bt_dev.le.acl_mtu) {
    8f9e:	b121      	cbz	r1, 8faa <bt_init+0x222>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    8fa0:	78da      	ldrb	r2, [r3, #3]
		union { uintptr_t x; unsigned int val; } parm2 = { .val = limit };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
    8fa2:	48a0      	ldr	r0, [pc, #640]	; (9224 <bt_init+0x49c>)
    8fa4:	4611      	mov	r1, r2
    8fa6:	f015 ff84 	bl	1eeb2 <z_impl_k_sem_init>
		net_buf_unref(rsp);
    8faa:	4620      	mov	r0, r4
    8fac:	f00c fabe 	bl	1552c <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    8fb0:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
    8fb4:	f016 0620 	ands.w	r6, r6, #32
    8fb8:	d118      	bne.n	8fec <bt_init+0x264>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    8fba:	2102      	movs	r1, #2
    8fbc:	f640 406d 	movw	r0, #3181	; 0xc6d
    8fc0:	f005 f9fc 	bl	e3bc <bt_hci_cmd_create>
		if (!buf) {
    8fc4:	4604      	mov	r4, r0
    8fc6:	2800      	cmp	r0, #0
    8fc8:	f000 80ca 	beq.w	9160 <bt_init+0x3d8>
	return net_buf_simple_add(&buf->b, len);
    8fcc:	2102      	movs	r1, #2
    8fce:	3008      	adds	r0, #8
    8fd0:	f014 fdb4 	bl	1db3c <net_buf_simple_add>
		cp_le->le = 0x01;
    8fd4:	2301      	movs	r3, #1
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    8fd6:	4621      	mov	r1, r4
		cp_le->le = 0x01;
    8fd8:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    8fda:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    8fdc:	4632      	mov	r2, r6
    8fde:	f640 406d 	movw	r0, #3181	; 0xc6d
    8fe2:	f005 fa25 	bl	e430 <bt_hci_cmd_send_sync>
		if (err) {
    8fe6:	4604      	mov	r4, r0
    8fe8:	2800      	cmp	r0, #0
    8fea:	d19f      	bne.n	8f2c <bt_init+0x1a4>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    8fec:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
    8ff0:	071b      	lsls	r3, r3, #28
    8ff2:	d512      	bpl.n	901a <bt_init+0x292>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    8ff4:	2100      	movs	r1, #0
    8ff6:	f242 001c 	movw	r0, #8220	; 0x201c
    8ffa:	1d3a      	adds	r2, r7, #4
    8ffc:	f005 fa18 	bl	e430 <bt_hci_cmd_send_sync>
		if (err) {
    9000:	4604      	mov	r4, r0
    9002:	2800      	cmp	r0, #0
    9004:	d192      	bne.n	8f2c <bt_init+0x1a4>
		le_read_supp_states_complete(rsp);
    9006:	6878      	ldr	r0, [r7, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    9008:	6883      	ldr	r3, [r0, #8]
    900a:	f8d3 2001 	ldr.w	r2, [r3, #1]
    900e:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    9012:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
    9016:	f00c fa89 	bl	1552c <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    901a:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    901e:	069e      	lsls	r6, r3, #26
    9020:	d522      	bpl.n	9068 <bt_init+0x2e0>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    9022:	4638      	mov	r0, r7
    9024:	1cb9      	adds	r1, r7, #2
    9026:	f005 fa83 	bl	e530 <hci_le_read_max_data_len>
		if (err) {
    902a:	4604      	mov	r4, r0
    902c:	2800      	cmp	r0, #0
    902e:	f47f af7d 	bne.w	8f2c <bt_init+0x1a4>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    9032:	2104      	movs	r1, #4
    9034:	f242 0024 	movw	r0, #8228	; 0x2024
    9038:	f005 f9c0 	bl	e3bc <bt_hci_cmd_create>
		if (!buf) {
    903c:	4606      	mov	r6, r0
    903e:	2800      	cmp	r0, #0
    9040:	f000 808e 	beq.w	9160 <bt_init+0x3d8>
    9044:	2104      	movs	r1, #4
    9046:	3008      	adds	r0, #8
    9048:	f014 fd78 	bl	1db3c <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    904c:	883b      	ldrh	r3, [r7, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    904e:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    9050:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    9052:	887b      	ldrh	r3, [r7, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    9054:	4631      	mov	r1, r6
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    9056:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    9058:	f242 0024 	movw	r0, #8228	; 0x2024
    905c:	f005 f9e8 	bl	e430 <bt_hci_cmd_send_sync>
		if (err) {
    9060:	4604      	mov	r4, r0
    9062:	2800      	cmp	r0, #0
    9064:	f47f af62 	bne.w	8f2c <bt_init+0x1a4>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
    9068:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    906c:	065c      	lsls	r4, r3, #25
    906e:	d510      	bpl.n	9092 <bt_init+0x30a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
    9070:	2100      	movs	r1, #0
    9072:	f242 002a 	movw	r0, #8234	; 0x202a
    9076:	1d3a      	adds	r2, r7, #4
    9078:	f005 f9da 	bl	e430 <bt_hci_cmd_send_sync>
		if (err) {
    907c:	4604      	mov	r4, r0
    907e:	2800      	cmp	r0, #0
    9080:	f47f af54 	bne.w	8f2c <bt_init+0x1a4>
		le_read_resolving_list_size_complete(rsp);
    9084:	6878      	ldr	r0, [r7, #4]
	bt_dev.le.rl_size = rp->rl_size;
    9086:	6883      	ldr	r3, [r0, #8]
    9088:	785b      	ldrb	r3, [r3, #1]
    908a:	f885 3118 	strb.w	r3, [r5, #280]	; 0x118
		net_buf_unref(rsp);
    908e:	f00c fa4d 	bl	1552c <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    9092:	2108      	movs	r1, #8
    9094:	f242 0001 	movw	r0, #8193	; 0x2001
    9098:	f005 f990 	bl	e3bc <bt_hci_cmd_create>
	if (!buf) {
    909c:	4604      	mov	r4, r0
    909e:	2800      	cmp	r0, #0
    90a0:	d05e      	beq.n	9160 <bt_init+0x3d8>
    90a2:	2108      	movs	r1, #8
    90a4:	4408      	add	r0, r1
    90a6:	f014 fd49 	bl	1db3c <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
    90aa:	f895 10d0 	ldrb.w	r1, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
    90ae:	f240 2302 	movw	r3, #514	; 0x202
    90b2:	f011 0f40 	tst.w	r1, #64	; 0x40
    90b6:	bf08      	it	eq
    90b8:	2303      	moveq	r3, #3
    90ba:	4602      	mov	r2, r0
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    90bc:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    90be:	bf4c      	ite	mi
    90c0:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    90c4:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    90c8:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    90ca:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    90ce:	bf48      	it	mi
    90d0:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    90d4:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    90d8:	f895 309a 	ldrb.w	r3, [r5, #154]	; 0x9a
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    90dc:	bf18      	it	ne
    90de:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    90e2:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    90e6:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
    90e8:	bf48      	it	mi
    90ea:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    90ee:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    90f0:	bf08      	it	eq
    90f2:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
    90f6:	2100      	movs	r1, #0
    90f8:	f012 fcc5 	bl	1ba86 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    90fc:	4621      	mov	r1, r4
    90fe:	2200      	movs	r2, #0
    9100:	f242 0001 	movw	r0, #8193	; 0x2001
    9104:	f005 f994 	bl	e430 <bt_hci_cmd_send_sync>
	if (err) {
    9108:	4604      	mov	r4, r0
    910a:	2800      	cmp	r0, #0
    910c:	f47f af0e 	bne.w	8f2c <bt_init+0x1a4>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    9110:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
    9114:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
    9118:	0698      	lsls	r0, r3, #26
    911a:	d424      	bmi.n	9166 <bt_init+0x3de>
	if (bt_dev.le.acl_mtu) {
    911c:	b9c9      	cbnz	r1, 9152 <bt_init+0x3ca>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    911e:	f241 0005 	movw	r0, #4101	; 0x1005
    9122:	1d3a      	adds	r2, r7, #4
    9124:	f005 f984 	bl	e430 <bt_hci_cmd_send_sync>
	if (err) {
    9128:	4604      	mov	r4, r0
    912a:	2800      	cmp	r0, #0
    912c:	f47f aefe 	bne.w	8f2c <bt_init+0x1a4>
	if (bt_dev.le.acl_mtu) {
    9130:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
	read_buffer_size_complete(rsp);
    9134:	687c      	ldr	r4, [r7, #4]
	if (bt_dev.le.acl_mtu) {
    9136:	b94b      	cbnz	r3, 914c <bt_init+0x3c4>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
    9138:	68a3      	ldr	r3, [r4, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    913a:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    913e:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    9142:	889a      	ldrh	r2, [r3, #4]
    9144:	4837      	ldr	r0, [pc, #220]	; (9224 <bt_init+0x49c>)
    9146:	4611      	mov	r1, r2
    9148:	f015 feb3 	bl	1eeb2 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    914c:	4620      	mov	r0, r4
    914e:	f00c f9ed 	bl	1552c <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    9152:	2108      	movs	r1, #8
    9154:	f640 4001 	movw	r0, #3073	; 0xc01
    9158:	f005 f930 	bl	e3bc <bt_hci_cmd_create>
	if (!buf) {
    915c:	4604      	mov	r4, r0
    915e:	b9b8      	cbnz	r0, 9190 <bt_init+0x408>
		return -ENOBUFS;
    9160:	f06f 0468 	mvn.w	r4, #104	; 0x68
    9164:	e6e2      	b.n	8f2c <bt_init+0x1a4>
	else if (!bt_dev.le.acl_mtu) {
    9166:	2900      	cmp	r1, #0
    9168:	d1f3      	bne.n	9152 <bt_init+0x3ca>
		BT_ERR("ACL BR/EDR buffers not initialized");
    916a:	466c      	mov	r4, sp
    916c:	b088      	sub	sp, #32
    916e:	466a      	mov	r2, sp
    9170:	4b2d      	ldr	r3, [pc, #180]	; (9228 <bt_init+0x4a0>)
    9172:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    9176:	6153      	str	r3, [r2, #20]
    9178:	4b2c      	ldr	r3, [pc, #176]	; (922c <bt_init+0x4a4>)
    917a:	482d      	ldr	r0, [pc, #180]	; (9230 <bt_init+0x4a8>)
    917c:	6193      	str	r3, [r2, #24]
    917e:	2303      	movs	r3, #3
    9180:	f842 3f10 	str.w	r3, [r2, #16]!
    9184:	f012 fc74 	bl	1ba70 <z_log_msg_static_create.constprop.0>
    9188:	46a5      	mov	sp, r4
		return -EIO;
    918a:	f06f 0404 	mvn.w	r4, #4
    918e:	e6cd      	b.n	8f2c <bt_init+0x1a4>
    9190:	2108      	movs	r1, #8
    9192:	4408      	add	r0, r1
    9194:	f014 fcd2 	bl	1db3c <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    9198:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    919c:	4602      	mov	r2, r0
    919e:	07d9      	lsls	r1, r3, #31
    91a0:	d434      	bmi.n	920c <bt_init+0x484>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    91a2:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    91a6:	4823      	ldr	r0, [pc, #140]	; (9234 <bt_init+0x4ac>)
	sys_put_le64(mask, ev->events);
    91a8:	f012 fc6d 	bl	1ba86 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    91ac:	4621      	mov	r1, r4
    91ae:	2200      	movs	r2, #0
    91b0:	f640 4001 	movw	r0, #3073	; 0xc01
    91b4:	f005 f93c 	bl	e430 <bt_hci_cmd_send_sync>
	if (err) {
    91b8:	4604      	mov	r4, r0
    91ba:	2800      	cmp	r0, #0
    91bc:	f47f aeb6 	bne.w	8f2c <bt_init+0x1a4>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    91c0:	4601      	mov	r1, r0
    91c2:	1d3a      	adds	r2, r7, #4
    91c4:	f64f 4001 	movw	r0, #64513	; 0xfc01
    91c8:	f005 f932 	bl	e430 <bt_hci_cmd_send_sync>
	if (err) {
    91cc:	4c1a      	ldr	r4, [pc, #104]	; (9238 <bt_init+0x4b0>)
    91ce:	b3b8      	cbz	r0, 9240 <bt_init+0x4b8>
		BT_WARN("Vendor HCI extensions not available");
    91d0:	466d      	mov	r5, sp
    91d2:	b088      	sub	sp, #32
    91d4:	466a      	mov	r2, sp
    91d6:	4b19      	ldr	r3, [pc, #100]	; (923c <bt_init+0x4b4>)
			BT_WARN("Failed to read supported vendor features");
    91d8:	e9c2 3405 	strd	r3, r4, [r2, #20]
    91dc:	2303      	movs	r3, #3
    91de:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    91e2:	4813      	ldr	r0, [pc, #76]	; (9230 <bt_init+0x4a8>)
    91e4:	f842 3f10 	str.w	r3, [r2, #16]!
    91e8:	f012 fc42 	bl	1ba70 <z_log_msg_static_create.constprop.0>
    91ec:	46ad      	mov	sp, r5
	err = bt_id_init();
    91ee:	f006 fcf1 	bl	fbd4 <bt_id_init>
	if (err) {
    91f2:	4604      	mov	r4, r0
    91f4:	2800      	cmp	r0, #0
    91f6:	f47f ae99 	bne.w	8f2c <bt_init+0x1a4>
		err = bt_conn_init();
    91fa:	f008 f8a5 	bl	11348 <bt_conn_init>
		if (err) {
    91fe:	4604      	mov	r4, r0
    9200:	2800      	cmp	r0, #0
    9202:	f47f ae93 	bne.w	8f2c <bt_init+0x1a4>
	bt_finalize_init();
    9206:	f005 ff91 	bl	f12c <bt_finalize_init>
	return 0;
    920a:	e68f      	b.n	8f2c <bt_init+0x1a4>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    920c:	a102      	add	r1, pc, #8	; (adr r1, 9218 <bt_init+0x490>)
    920e:	e9d1 0100 	ldrd	r0, r1, [r1]
    9212:	e7c9      	b.n	91a8 <bt_init+0x420>
    9214:	f3af 8000 	nop.w
    9218:	02008890 	.word	0x02008890
    921c:	20008000 	.word	0x20008000
    9220:	200080d0 	.word	0x200080d0
    9224:	20008100 	.word	0x20008100
    9228:	00021c90 	.word	0x00021c90
    922c:	000221b9 	.word	0x000221b9
    9230:	0001fc74 	.word	0x0001fc74
    9234:	02008810 	.word	0x02008810
    9238:	0002217b 	.word	0x0002217b
    923c:	00021cb7 	.word	0x00021cb7
	rp.info = (void *)rsp->data;
    9240:	687b      	ldr	r3, [r7, #4]
	BT_INFO("HW Platform: %s (0x%04x)",
    9242:	466e      	mov	r6, sp
	rp.info = (void *)rsp->data;
    9244:	689d      	ldr	r5, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    9246:	b08a      	sub	sp, #40	; 0x28
    9248:	f8b5 3001 	ldrh.w	r3, [r5, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
    924c:	2b03      	cmp	r3, #3
		return plat_str[platform];
    924e:	bf96      	itet	ls
    9250:	4a4a      	ldrls	r2, [pc, #296]	; (937c <bt_init+0x5f4>)
	return "unknown";
    9252:	494b      	ldrhi	r1, [pc, #300]	; (9380 <bt_init+0x5f8>)
		return plat_str[platform];
    9254:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
    9258:	466a      	mov	r2, sp
    925a:	e9c2 1307 	strd	r1, r3, [r2, #28]
    925e:	f240 3301 	movw	r3, #769	; 0x301
    9262:	4848      	ldr	r0, [pc, #288]	; (9384 <bt_init+0x5fc>)
    9264:	8493      	strh	r3, [r2, #36]	; 0x24
    9266:	4b48      	ldr	r3, [pc, #288]	; (9388 <bt_init+0x600>)
    9268:	e9c2 0405 	strd	r0, r4, [r2, #20]
    926c:	f44f 5133 	mov.w	r1, #11456	; 0x2cc0
    9270:	f842 3f10 	str.w	r3, [r2, #16]!
    9274:	4845      	ldr	r0, [pc, #276]	; (938c <bt_init+0x604>)
    9276:	f012 fbfb 	bl	1ba70 <z_log_msg_static_create.constprop.0>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    927a:	f8b5 2001 	ldrh.w	r2, [r5, #1]
    927e:	46b5      	mov	sp, r6
    9280:	2a02      	cmp	r2, #2
	BT_INFO("HW Variant: %s (0x%04x)",
    9282:	f8b5 3003 	ldrh.w	r3, [r5, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    9286:	d14d      	bne.n	9324 <bt_init+0x59c>
	if (variant < ARRAY_SIZE(nordic_str)) {
    9288:	2b03      	cmp	r3, #3
    928a:	d84b      	bhi.n	9324 <bt_init+0x59c>
		return nordic_str[variant];
    928c:	4a40      	ldr	r2, [pc, #256]	; (9390 <bt_init+0x608>)
    928e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
    9292:	466e      	mov	r6, sp
    9294:	b08a      	sub	sp, #40	; 0x28
    9296:	466a      	mov	r2, sp
    9298:	e9c2 1307 	strd	r1, r3, [r2, #28]
    929c:	f240 3301 	movw	r3, #769	; 0x301
    92a0:	483c      	ldr	r0, [pc, #240]	; (9394 <bt_init+0x60c>)
    92a2:	8493      	strh	r3, [r2, #36]	; 0x24
    92a4:	4b38      	ldr	r3, [pc, #224]	; (9388 <bt_init+0x600>)
    92a6:	e9c2 0405 	strd	r0, r4, [r2, #20]
    92aa:	f44f 5133 	mov.w	r1, #11456	; 0x2cc0
    92ae:	f842 3f10 	str.w	r3, [r2, #16]!
    92b2:	4836      	ldr	r0, [pc, #216]	; (938c <bt_init+0x604>)
    92b4:	f012 fbdc 	bl	1ba70 <z_log_msg_static_create.constprop.0>
    92b8:	46b5      	mov	sp, r6
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    92ba:	796b      	ldrb	r3, [r5, #5]
    92bc:	f895 c006 	ldrb.w	ip, [r5, #6]
	if (variant < ARRAY_SIZE(var_str)) {
    92c0:	2b03      	cmp	r3, #3
		return var_str[variant];
    92c2:	bf98      	it	ls
    92c4:	4a34      	ldrls	r2, [pc, #208]	; (9398 <bt_init+0x610>)
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    92c6:	f8b5 6007 	ldrh.w	r6, [r5, #7]
    92ca:	f8d5 0009 	ldr.w	r0, [r5, #9]
    92ce:	466d      	mov	r5, sp
    92d0:	b08e      	sub	sp, #56	; 0x38
		return var_str[variant];
    92d2:	bf94      	ite	ls
    92d4:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
	return "unknown";
    92d8:	4929      	ldrhi	r1, [pc, #164]	; (9380 <bt_init+0x5f8>)
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    92da:	466a      	mov	r2, sp
    92dc:	e9c2 1307 	strd	r1, r3, [r2, #28]
    92e0:	f240 3301 	movw	r3, #769	; 0x301
    92e4:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 939c <bt_init+0x614>
    92e8:	8613      	strh	r3, [r2, #48]	; 0x30
    92ea:	4b2d      	ldr	r3, [pc, #180]	; (93a0 <bt_init+0x618>)
    92ec:	e9c2 c609 	strd	ip, r6, [r2, #36]	; 0x24
    92f0:	e9c2 e405 	strd	lr, r4, [r2, #20]
    92f4:	62d0      	str	r0, [r2, #44]	; 0x2c
    92f6:	f244 41c0 	movw	r1, #17600	; 0x44c0
    92fa:	f842 3f10 	str.w	r3, [r2, #16]!
    92fe:	4823      	ldr	r0, [pc, #140]	; (938c <bt_init+0x604>)
    9300:	f012 fbb6 	bl	1ba70 <z_log_msg_static_create.constprop.0>
    9304:	46ad      	mov	sp, r5
	net_buf_unref(rsp);
    9306:	6878      	ldr	r0, [r7, #4]
    9308:	f00c f910 	bl	1552c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    930c:	2100      	movs	r1, #0
    930e:	f64f 4002 	movw	r0, #64514	; 0xfc02
    9312:	1d3a      	adds	r2, r7, #4
    9314:	f005 f88c 	bl	e430 <bt_hci_cmd_send_sync>
	if (err) {
    9318:	4606      	mov	r6, r0
    931a:	b128      	cbz	r0, 9328 <bt_init+0x5a0>
		BT_WARN("Failed to read supported vendor commands");
    931c:	b088      	sub	sp, #32
    931e:	466a      	mov	r2, sp
    9320:	4b20      	ldr	r3, [pc, #128]	; (93a4 <bt_init+0x61c>)
    9322:	e759      	b.n	91d8 <bt_init+0x450>
		return "unknown";
    9324:	4916      	ldr	r1, [pc, #88]	; (9380 <bt_init+0x5f8>)
    9326:	e7b4      	b.n	9292 <bt_init+0x50a>
	rp.cmds = (void *)rsp->data;
    9328:	f8d7 8004 	ldr.w	r8, [r7, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    932c:	2202      	movs	r2, #2
    932e:	f8d8 1008 	ldr.w	r1, [r8, #8]
    9332:	481d      	ldr	r0, [pc, #116]	; (93a8 <bt_init+0x620>)
    9334:	3101      	adds	r1, #1
    9336:	f012 facc 	bl	1b8d2 <memcpy>
	net_buf_unref(rsp);
    933a:	4640      	mov	r0, r8
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    933c:	f8df 806c 	ldr.w	r8, [pc, #108]	; 93ac <bt_init+0x624>
	net_buf_unref(rsp);
    9340:	f00c f8f4 	bl	1552c <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    9344:	f898 30b9 	ldrb.w	r3, [r8, #185]	; 0xb9
    9348:	075b      	lsls	r3, r3, #29
    934a:	f57f af50 	bpl.w	91ee <bt_init+0x466>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    934e:	4631      	mov	r1, r6
    9350:	f64f 4003 	movw	r0, #64515	; 0xfc03
    9354:	1d3a      	adds	r2, r7, #4
    9356:	f005 f86b 	bl	e430 <bt_hci_cmd_send_sync>
		if (err) {
    935a:	b118      	cbz	r0, 9364 <bt_init+0x5dc>
			BT_WARN("Failed to read supported vendor features");
    935c:	b088      	sub	sp, #32
    935e:	466a      	mov	r2, sp
    9360:	4b13      	ldr	r3, [pc, #76]	; (93b0 <bt_init+0x628>)
    9362:	e739      	b.n	91d8 <bt_init+0x450>
		memcpy(bt_dev.vs_features, rp.feat->features,
    9364:	2201      	movs	r2, #1
		rp.feat = (void *)rsp->data;
    9366:	687c      	ldr	r4, [r7, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
    9368:	f108 00b8 	add.w	r0, r8, #184	; 0xb8
    936c:	68a1      	ldr	r1, [r4, #8]
    936e:	4411      	add	r1, r2
    9370:	f012 faaf 	bl	1b8d2 <memcpy>
		net_buf_unref(rsp);
    9374:	4620      	mov	r0, r4
    9376:	f00c f8d9 	bl	1552c <net_buf_unref>
    937a:	e738      	b.n	91ee <bt_init+0x466>
    937c:	00020210 	.word	0x00020210
    9380:	0002162a 	.word	0x0002162a
    9384:	00021cdf 	.word	0x00021cdf
    9388:	01000005 	.word	0x01000005
    938c:	0001fc74 	.word	0x0001fc74
    9390:	00020200 	.word	0x00020200
    9394:	00021cfc 	.word	0x00021cfc
    9398:	000201f0 	.word	0x000201f0
    939c:	00021d18 	.word	0x00021d18
    93a0:	01000008 	.word	0x01000008
    93a4:	00021d49 	.word	0x00021d49
    93a8:	200080b9 	.word	0x200080b9
    93ac:	20008000 	.word	0x20008000
    93b0:	00021d76 	.word	0x00021d76

000093b4 <interrupt_callback>:

void gpio_enable(Gpio_t* gt, uint8_t channel, bool enable){
	gt[channel].active = enable;
}

void interrupt_callback(const struct device *dev, struct gpio_callback *cb, uint32_t pins){
    93b4:	b538      	push	{r3, r4, r5, lr}
	for (int i = 0; i < NUM_GPIO_PERIP; i++) {
		if (pins & BIT(gpio_a[i].pin)) {
    93b6:	4c11      	ldr	r4, [pc, #68]	; (93fc <interrupt_callback+0x48>)
void interrupt_callback(const struct device *dev, struct gpio_callback *cb, uint32_t pins){
    93b8:	4615      	mov	r5, r2
		if (pins & BIT(gpio_a[i].pin)) {
    93ba:	7a23      	ldrb	r3, [r4, #8]
    93bc:	fa22 f303 	lsr.w	r3, r2, r3
    93c0:	07da      	lsls	r2, r3, #31
    93c2:	d509      	bpl.n	93d8 <interrupt_callback+0x24>
			gpio_a[i].g_int.status = true;
    93c4:	2301      	movs	r3, #1
    93c6:	f884 3020 	strb.w	r3, [r4, #32]
			LOG("GPIO interrupt triggered for %s\n", gpio_a[i].label);
    93ca:	f010 fcd5 	bl	19d78 <k_uptime_get_32>
    93ce:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    93d0:	4601      	mov	r1, r0
    93d2:	480b      	ldr	r0, [pc, #44]	; (9400 <interrupt_callback+0x4c>)
    93d4:	f004 fa44 	bl	d860 <printf>
		if (pins & BIT(gpio_a[i].pin)) {
    93d8:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    93dc:	40dd      	lsrs	r5, r3
    93de:	07eb      	lsls	r3, r5, #31
    93e0:	d50b      	bpl.n	93fa <interrupt_callback+0x46>
			gpio_a[i].g_int.status = true;
    93e2:	2301      	movs	r3, #1
    93e4:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
			LOG("GPIO interrupt triggered for %s\n", gpio_a[i].label);
    93e8:	f010 fcc6 	bl	19d78 <k_uptime_get_32>
    93ec:	6d62      	ldr	r2, [r4, #84]	; 0x54
    93ee:	4601      	mov	r1, r0
    	}
	}
}
    93f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			LOG("GPIO interrupt triggered for %s\n", gpio_a[i].label);
    93f4:	4802      	ldr	r0, [pc, #8]	; (9400 <interrupt_callback+0x4c>)
    93f6:	f004 ba33 	b.w	d860 <printf>
}
    93fa:	bd38      	pop	{r3, r4, r5, pc}
    93fc:	20008208 	.word	0x20008208
    9400:	00020750 	.word	0x00020750

00009404 <gpio_init>:
	}
	return pin_list;
}

void gpio_init(Gpio_t* gt, uint8_t channel, uint8_t size){
	if (channel < size) {
    9404:	4291      	cmp	r1, r2
void gpio_init(Gpio_t* gt, uint8_t channel, uint8_t size){
    9406:	b510      	push	{r4, lr}
	if (channel < size) {
    9408:	d223      	bcs.n	9452 <gpio_init+0x4e>
		if (gt[channel].active){
    940a:	232c      	movs	r3, #44	; 0x2c
    940c:	fb11 f103 	smulbb	r1, r1, r3
    9410:	5c43      	ldrb	r3, [r0, r1]
    9412:	1844      	adds	r4, r0, r1
    9414:	b1bb      	cbz	r3, 9446 <gpio_init+0x42>
			if (!device_is_ready(gt[channel].dev)){
    9416:	6860      	ldr	r0, [r4, #4]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    9418:	f015 fb96 	bl	1eb48 <z_device_is_ready>
    941c:	b940      	cbnz	r0, 9430 <gpio_init+0x2c>
				LOG("Error: GPIO device %s is not ready\n", gt[channel].label);
    941e:	f010 fcab 	bl	19d78 <k_uptime_get_32>
    9422:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    9424:	4601      	mov	r1, r0
    9426:	480f      	ldr	r0, [pc, #60]	; (9464 <gpio_init+0x60>)
			}else			{
				LOG("GPIO device %s is ready\n", gt[channel].label);
				gt[channel].error = 0;
			}
		}else{
			LOG("GPIO device %s is not active\n", gt[channel].label);
    9428:	f004 fa1a 	bl	d860 <printf>
			gt[channel].error = ERROR_GPIO_INIT;
    942c:	2380      	movs	r3, #128	; 0x80
    942e:	e007      	b.n	9440 <gpio_init+0x3c>
				LOG("GPIO device %s is ready\n", gt[channel].label);
    9430:	f010 fca2 	bl	19d78 <k_uptime_get_32>
    9434:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    9436:	4601      	mov	r1, r0
    9438:	480b      	ldr	r0, [pc, #44]	; (9468 <gpio_init+0x64>)
    943a:	f004 fa11 	bl	d860 <printf>
				gt[channel].error = 0;
    943e:	2300      	movs	r3, #0
			gt[channel].error = ERROR_GPIO_INIT;
    9440:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
		}
	}else{
		LOG("Error: Channel index out of bounds\n");
		return;	
	}	
}
    9444:	bd10      	pop	{r4, pc}
			LOG("GPIO device %s is not active\n", gt[channel].label);
    9446:	f010 fc97 	bl	19d78 <k_uptime_get_32>
    944a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    944c:	4601      	mov	r1, r0
    944e:	4807      	ldr	r0, [pc, #28]	; (946c <gpio_init+0x68>)
    9450:	e7ea      	b.n	9428 <gpio_init+0x24>
		LOG("Error: Channel index out of bounds\n");
    9452:	f010 fc91 	bl	19d78 <k_uptime_get_32>
}
    9456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG("Error: Channel index out of bounds\n");
    945a:	4601      	mov	r1, r0
    945c:	4804      	ldr	r0, [pc, #16]	; (9470 <gpio_init+0x6c>)
    945e:	f004 b9ff 	b.w	d860 <printf>
    9462:	bf00      	nop
    9464:	0002077a 	.word	0x0002077a
    9468:	000207a7 	.word	0x000207a7
    946c:	000207c9 	.word	0x000207c9
    9470:	000207f0 	.word	0x000207f0

00009474 <gpio_configure>:

void gpio_configure(Gpio_t* gt, uint8_t channel,  uint8_t size){
	int ret;
	if (channel < size) {
    9474:	4291      	cmp	r1, r2
void gpio_configure(Gpio_t* gt, uint8_t channel,  uint8_t size){
    9476:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (channel < size) {
    9478:	d22f      	bcs.n	94da <gpio_configure+0x66>
		if (gt[channel].active){
    947a:	232c      	movs	r3, #44	; 0x2c
    947c:	fb11 f103 	smulbb	r1, r1, r3
    9480:	5c43      	ldrb	r3, [r0, r1]
    9482:	1844      	adds	r4, r0, r1
    9484:	b34b      	cbz	r3, 94da <gpio_configure+0x66>
			ret = gpio_pin_configure(gt[channel].dev, gt[channel].pin, gt[channel].flags | gt[channel].direction);
    9486:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
    948a:	6860      	ldr	r0, [r4, #4]
    948c:	7a21      	ldrb	r1, [r4, #8]
    948e:	4313      	orrs	r3, r2

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
		 != (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH),
		 "Output cannot be initialized low and high");

	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    9490:	02dd      	lsls	r5, r3, #11
	const struct gpio_driver_api *api =
    9492:	f8d0 c008 	ldr.w	ip, [r0, #8]
	struct gpio_driver_data *data =
    9496:	6907      	ldr	r7, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    9498:	d506      	bpl.n	94a8 <gpio_configure+0x34>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
    949a:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
    949e:	d003      	beq.n	94a8 <gpio_configure+0x34>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    94a0:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    94a2:	bf48      	it	mi
    94a4:	f483 2340 	eormi.w	r3, r3, #786432	; 0xc0000

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
    94a8:	2601      	movs	r6, #1
    94aa:	683d      	ldr	r5, [r7, #0]
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    94ac:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
    94b0:	408e      	lsls	r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    94b2:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    94b4:	bf4c      	ite	mi
    94b6:	4335      	orrmi	r5, r6
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    94b8:	43b5      	bicpl	r5, r6
    94ba:	603d      	str	r5, [r7, #0]
	}

	return api->pin_configure(port, pin, flags);
    94bc:	f8dc 3000 	ldr.w	r3, [ip]
    94c0:	4798      	blx	r3
			if (ret < 0){
    94c2:	2800      	cmp	r0, #0
    94c4:	da0a      	bge.n	94dc <gpio_configure+0x68>
				LOG("Error: GPIO device %s cannot be configured\n", gt[channel].label);
    94c6:	f010 fc57 	bl	19d78 <k_uptime_get_32>
    94ca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    94cc:	4601      	mov	r1, r0
    94ce:	4808      	ldr	r0, [pc, #32]	; (94f0 <gpio_configure+0x7c>)
    94d0:	f004 f9c6 	bl	d860 <printf>
				gt[channel].error = ERROR_GPIO_INIT;
    94d4:	2380      	movs	r3, #128	; 0x80
			}else{
				LOG("GPIO device %s configured successfully\n", gt[channel].label);
				gt[channel].error = 0;
    94d6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
			}
		}
	}
}
    94da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				LOG("GPIO device %s configured successfully\n", gt[channel].label);
    94dc:	f010 fc4c 	bl	19d78 <k_uptime_get_32>
    94e0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    94e2:	4601      	mov	r1, r0
    94e4:	4803      	ldr	r0, [pc, #12]	; (94f4 <gpio_configure+0x80>)
    94e6:	f004 f9bb 	bl	d860 <printf>
				gt[channel].error = 0;
    94ea:	2300      	movs	r3, #0
    94ec:	e7f3      	b.n	94d6 <gpio_configure+0x62>
    94ee:	bf00      	nop
    94f0:	0002081d 	.word	0x0002081d
    94f4:	00020852 	.word	0x00020852

000094f8 <gpio_configure_interrupt>:

void gpio_configure_interrupt(Gpio_t* gt, uint8_t channel, uint8_t size){
	if (channel < size) {
    94f8:	4291      	cmp	r1, r2
void gpio_configure_interrupt(Gpio_t* gt, uint8_t channel, uint8_t size){
    94fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    94fe:	4605      	mov	r5, r0
    9500:	4617      	mov	r7, r2
	if (channel < size) {
    9502:	d240      	bcs.n	9586 <gpio_configure_interrupt+0x8e>
		if (gt[channel].active){
    9504:	232c      	movs	r3, #44	; 0x2c
    9506:	fb11 f103 	smulbb	r1, r1, r3
    950a:	5c43      	ldrb	r3, [r0, r1]
    950c:	1844      	adds	r4, r0, r1
    950e:	2b00      	cmp	r3, #0
    9510:	d041      	beq.n	9596 <gpio_configure_interrupt+0x9e>
			if(!gt[channel].g_int.active){
    9512:	7e23      	ldrb	r3, [r4, #24]
    9514:	b943      	cbnz	r3, 9528 <gpio_configure_interrupt+0x30>
				LOG("Error: GPIO interrupt for %s is not active\n", gt[channel].label);
    9516:	f010 fc2f 	bl	19d78 <k_uptime_get_32>
    951a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    951c:	4601      	mov	r1, r0
		}
	}else {
		LOG("Error: Channel index out of bounds\n");
		return;	
	}
}
    951e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				LOG("Error: GPIO interrupt for %s is not active\n", gt[channel].label);
    9522:	481e      	ldr	r0, [pc, #120]	; (959c <gpio_configure_interrupt+0xa4>)
    9524:	f004 b99c 	b.w	d860 <printf>
				LOG("GPIO interrupt for %s is active\n", gt[channel].label);
    9528:	f010 fc26 	bl	19d78 <k_uptime_get_32>
    952c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    952e:	4601      	mov	r1, r0
    9530:	481b      	ldr	r0, [pc, #108]	; (95a0 <gpio_configure_interrupt+0xa8>)
    9532:	f004 f995 	bl	d860 <printf>
				gpio_pin_interrupt_configure(gt[channel].dev, gt[channel].pin,  gt[channel].g_int.port_config);
    9536:	6860      	ldr	r0, [r4, #4]
    9538:	7a21      	ldrb	r1, [r4, #8]
    953a:	69e6      	ldr	r6, [r4, #28]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    953c:	0233      	lsls	r3, r6, #8
	const struct gpio_driver_api *api =
    953e:	6882      	ldr	r2, [r0, #8]
	const struct gpio_driver_data *const data =
    9540:	f8d0 c010 	ldr.w	ip, [r0, #16]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    9544:	d508      	bpl.n	9558 <gpio_configure_interrupt+0x60>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    9546:	2301      	movs	r3, #1
    9548:	f8dc c000 	ldr.w	ip, [ip]
    954c:	408b      	lsls	r3, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    954e:	ea13 0f0c 	tst.w	r3, ip
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
    9552:	bf18      	it	ne
    9554:	f086 66c0 	eorne.w	r6, r6, #100663296	; 0x6000000
	return api->pin_interrupt_configure(port, pin, mode, trig);
    9558:	f006 63c0 	and.w	r3, r6, #100663296	; 0x6000000
    955c:	f8d2 8018 	ldr.w	r8, [r2, #24]
    9560:	f006 72b0 	and.w	r2, r6, #23068672	; 0x1600000
    9564:	47c0      	blx	r8
				gpio_init_callback(&cb, interrupt_callback, get_gpio_pin_interrupt_config(gt, size));
    9566:	4639      	mov	r1, r7
    9568:	4628      	mov	r0, r5
    956a:	f010 fc1b 	bl	19da4 <get_gpio_pin_interrupt_config>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    956e:	4b0d      	ldr	r3, [pc, #52]	; (95a4 <gpio_configure_interrupt+0xac>)
    9570:	490d      	ldr	r1, [pc, #52]	; (95a8 <gpio_configure_interrupt+0xb0>)
	callback->pin_mask = pin_mask;
    9572:	e9c1 3001 	strd	r3, r0, [r1, #4]
				gpio_add_callback(gt[channel].dev, &cb);
    9576:	6860      	ldr	r0, [r4, #4]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
    9578:	6883      	ldr	r3, [r0, #8]
    957a:	69db      	ldr	r3, [r3, #28]
    957c:	b15b      	cbz	r3, 9596 <gpio_configure_interrupt+0x9e>
}
    957e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    9582:	2201      	movs	r2, #1
    9584:	4718      	bx	r3
		LOG("Error: Channel index out of bounds\n");
    9586:	f010 fbf7 	bl	19d78 <k_uptime_get_32>
}
    958a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		LOG("Error: Channel index out of bounds\n");
    958e:	4601      	mov	r1, r0
    9590:	4806      	ldr	r0, [pc, #24]	; (95ac <gpio_configure_interrupt+0xb4>)
    9592:	f004 b965 	b.w	d860 <printf>
}
    9596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    959a:	bf00      	nop
    959c:	00020883 	.word	0x00020883
    95a0:	000208b8 	.word	0x000208b8
    95a4:	000093b5 	.word	0x000093b5
    95a8:	20009aa8 	.word	0x20009aa8
    95ac:	000207f0 	.word	0x000207f0

000095b0 <peripheral_init>:


/***********************************************************
 Function Definitions
***********************************************************/
void peripheral_init() {
    95b0:	b510      	push	{r4, lr}
  int err;

  //Button 1 to start reading measurements
  gpio_enable(gpio_a, BTN1_ch, true);
    95b2:	2201      	movs	r2, #1
    95b4:	2100      	movs	r1, #0
    95b6:	4826      	ldr	r0, [pc, #152]	; (9650 <peripheral_init+0xa0>)
    95b8:	f010 fbf0 	bl	19d9c <gpio_enable>
  gpio_enable_interrupt(gpio_a, BTN1_ch, true);
    95bc:	2201      	movs	r2, #1
    95be:	2100      	movs	r1, #0
    95c0:	4823      	ldr	r0, [pc, #140]	; (9650 <peripheral_init+0xa0>)
    95c2:	f010 fbe6 	bl	19d92 <gpio_enable_interrupt>
  gpio_init(gpio_a, BTN1_ch, NUM_GPIO_PERIP);
    95c6:	2202      	movs	r2, #2
    95c8:	2100      	movs	r1, #0
    95ca:	4821      	ldr	r0, [pc, #132]	; (9650 <peripheral_init+0xa0>)
    95cc:	f7ff ff1a 	bl	9404 <gpio_init>
  gpio_configure(gpio_a, BTN1_ch, NUM_GPIO_PERIP);
    95d0:	2202      	movs	r2, #2
    95d2:	2100      	movs	r1, #0
    95d4:	481e      	ldr	r0, [pc, #120]	; (9650 <peripheral_init+0xa0>)
    95d6:	f7ff ff4d 	bl	9474 <gpio_configure>
  gpio_configure_interrupt(gpio_a, BTN1_ch, NUM_GPIO_PERIP); 
    95da:	2202      	movs	r2, #2
    95dc:	2100      	movs	r1, #0
    95de:	481c      	ldr	r0, [pc, #112]	; (9650 <peripheral_init+0xa0>)
    95e0:	f7ff ff8a 	bl	94f8 <gpio_configure_interrupt>

  //Button 2 to stop reading measurements
  gpio_enable(gpio_a, BTN2_ch, true);
    95e4:	2201      	movs	r2, #1
    95e6:	481a      	ldr	r0, [pc, #104]	; (9650 <peripheral_init+0xa0>)
    95e8:	4611      	mov	r1, r2
    95ea:	f010 fbd7 	bl	19d9c <gpio_enable>
  gpio_enable_interrupt(gpio_a, BTN2_ch, true);
    95ee:	2201      	movs	r2, #1
    95f0:	4817      	ldr	r0, [pc, #92]	; (9650 <peripheral_init+0xa0>)
    95f2:	4611      	mov	r1, r2
    95f4:	f010 fbcd 	bl	19d92 <gpio_enable_interrupt>
  gpio_init(gpio_a, BTN2_ch, NUM_GPIO_PERIP);
    95f8:	2202      	movs	r2, #2
    95fa:	2101      	movs	r1, #1
    95fc:	4814      	ldr	r0, [pc, #80]	; (9650 <peripheral_init+0xa0>)
    95fe:	f7ff ff01 	bl	9404 <gpio_init>
  gpio_configure(gpio_a, BTN2_ch, NUM_GPIO_PERIP);
    9602:	2202      	movs	r2, #2
    9604:	2101      	movs	r1, #1
    9606:	4812      	ldr	r0, [pc, #72]	; (9650 <peripheral_init+0xa0>)
    9608:	f7ff ff34 	bl	9474 <gpio_configure>
  gpio_configure_interrupt(gpio_a, BTN2_ch, NUM_GPIO_PERIP); 
    960c:	2202      	movs	r2, #2
    960e:	2101      	movs	r1, #1
    9610:	480f      	ldr	r0, [pc, #60]	; (9650 <peripheral_init+0xa0>)
    9612:	f7ff ff71 	bl	94f8 <gpio_configure_interrupt>

  adc_init();  
    9616:	f000 f977 	bl	9908 <adc_init>

	err = bt_enable(NULL);
    961a:	2000      	movs	r0, #0
    961c:	f005 fe44 	bl	f2a8 <bt_enable>
	if (err) {
    9620:	4604      	mov	r4, r0
    9622:	b140      	cbz	r0, 9636 <peripheral_init+0x86>
		LOG("Bluetooth init failed (err %d)\n", err);
    9624:	f010 fbe6 	bl	19df4 <k_uptime_get_32>
    9628:	4622      	mov	r2, r4

	bt_ready();
	bt_conn_auth_cb_reg();

  LOG("Peripherals initialized successfully.\n");
}
    962a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG("Bluetooth init failed (err %d)\n", err);
    962e:	4601      	mov	r1, r0
    9630:	4808      	ldr	r0, [pc, #32]	; (9654 <peripheral_init+0xa4>)
    9632:	f004 b915 	b.w	d860 <printf>
	bt_ready();
    9636:	f000 f917 	bl	9868 <bt_ready>
	bt_conn_auth_cb_reg();
    963a:	f000 f947 	bl	98cc <bt_conn_auth_cb_reg>
  LOG("Peripherals initialized successfully.\n");
    963e:	f010 fbd9 	bl	19df4 <k_uptime_get_32>
}
    9642:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LOG("Peripherals initialized successfully.\n");
    9646:	4601      	mov	r1, r0
    9648:	4803      	ldr	r0, [pc, #12]	; (9658 <peripheral_init+0xa8>)
    964a:	f004 b909 	b.w	d860 <printf>
    964e:	bf00      	nop
    9650:	20008208 	.word	0x20008208
    9654:	000208fe 	.word	0x000208fe
    9658:	00020927 	.word	0x00020927

0000965c <is_button1_pressed>:


bool is_button1_pressed(){
    965c:	b510      	push	{r4, lr}
  bool status = get_gpio_interrupt_status(gpio_a, BTN1_ch);
    965e:	2100      	movs	r1, #0
    9660:	4805      	ldr	r0, [pc, #20]	; (9678 <is_button1_pressed+0x1c>)
    9662:	f010 fbbd 	bl	19de0 <get_gpio_interrupt_status>
  if (status){
    9666:	4604      	mov	r4, r0
    9668:	b118      	cbz	r0, 9672 <is_button1_pressed+0x16>
    reset_gpio_interrupt(gpio_a, BTN1_ch);
    966a:	2100      	movs	r1, #0
    966c:	4802      	ldr	r0, [pc, #8]	; (9678 <is_button1_pressed+0x1c>)
    966e:	f010 fbac 	bl	19dca <reset_gpio_interrupt>
  }
	return status; 
}
    9672:	4620      	mov	r0, r4
    9674:	bd10      	pop	{r4, pc}
    9676:	bf00      	nop
    9678:	20008208 	.word	0x20008208

0000967c <is_button2_pressed>:

bool is_button2_pressed(){
    967c:	b510      	push	{r4, lr}
  bool status = get_gpio_interrupt_status(gpio_a, BTN2_ch);
    967e:	2101      	movs	r1, #1
    9680:	4805      	ldr	r0, [pc, #20]	; (9698 <is_button2_pressed+0x1c>)
    9682:	f010 fbad 	bl	19de0 <get_gpio_interrupt_status>
  if (status){
    9686:	4604      	mov	r4, r0
    9688:	b118      	cbz	r0, 9692 <is_button2_pressed+0x16>
    reset_gpio_interrupt(gpio_a, BTN2_ch);
    968a:	2101      	movs	r1, #1
    968c:	4802      	ldr	r0, [pc, #8]	; (9698 <is_button2_pressed+0x1c>)
    968e:	f010 fb9c 	bl	19dca <reset_gpio_interrupt>
  }
	return status; 
}
    9692:	4620      	mov	r0, r4
    9694:	bd10      	pop	{r4, pc}
    9696:	bf00      	nop
    9698:	20008208 	.word	0x20008208

0000969c <bt_bas_set>:

void bt_bas_set(void){
    969c:	b538      	push	{r3, r4, r5, lr}
  LOG("Battery adc voltage: %.1f mV.", perip.adc_batt_mV);
    969e:	f010 fba9 	bl	19df4 <k_uptime_get_32>
    96a2:	4c0b      	ldr	r4, [pc, #44]	; (96d0 <bt_bas_set+0x34>)
    96a4:	4605      	mov	r5, r0
    96a6:	6820      	ldr	r0, [r4, #0]
    96a8:	f7fe feba 	bl	8420 <__aeabi_f2d>
    96ac:	4602      	mov	r2, r0
    96ae:	460b      	mov	r3, r1
    96b0:	4808      	ldr	r0, [pc, #32]	; (96d4 <bt_bas_set+0x38>)
    96b2:	4629      	mov	r1, r5
    96b4:	f004 f8d4 	bl	d860 <printf>
	bt_bas_set_battery_level(perip.bt_batt_lvl);
    96b8:	7920      	ldrb	r0, [r4, #4]
    96ba:	f002 fa05 	bl	bac8 <bt_bas_set_battery_level>
  LOG("Battery level: %d %%.", perip.bt_batt_lvl);
    96be:	f010 fb99 	bl	19df4 <k_uptime_get_32>
    96c2:	7922      	ldrb	r2, [r4, #4]
    96c4:	4601      	mov	r1, r0
}
    96c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  LOG("Battery level: %d %%.", perip.bt_batt_lvl);
    96ca:	4803      	ldr	r0, [pc, #12]	; (96d8 <bt_bas_set+0x3c>)
    96cc:	f004 b8c8 	b.w	d860 <printf>
    96d0:	20009ab4 	.word	0x20009ab4
    96d4:	00020957 	.word	0x00020957
    96d8:	0002097e 	.word	0x0002097e

000096dc <bt_hrs_set>:

void bt_hrs_set(void){
    96dc:	b538      	push	{r3, r4, r5, lr}
    LOG("Heartrate adc voltage: %.1f mV.",perip.adc_heart_rate_mV);
    96de:	f010 fb89 	bl	19df4 <k_uptime_get_32>
    96e2:	4c0b      	ldr	r4, [pc, #44]	; (9710 <bt_hrs_set+0x34>)
    96e4:	4605      	mov	r5, r0
    96e6:	68a0      	ldr	r0, [r4, #8]
    96e8:	f7fe fe9a 	bl	8420 <__aeabi_f2d>
    96ec:	4602      	mov	r2, r0
    96ee:	460b      	mov	r3, r1
    96f0:	4808      	ldr	r0, [pc, #32]	; (9714 <bt_hrs_set+0x38>)
    96f2:	4629      	mov	r1, r5
    96f4:	f004 f8b4 	bl	d860 <printf>
  	bt_hrs_notify(perip.bt_heart_rate);
    96f8:	7b20      	ldrb	r0, [r4, #12]
    96fa:	f002 fa4b 	bl	bb94 <bt_hrs_notify>
    LOG("Heartrate: %d bpm.",perip.bt_heart_rate);
    96fe:	f010 fb79 	bl	19df4 <k_uptime_get_32>
    9702:	7b22      	ldrb	r2, [r4, #12]
    9704:	4601      	mov	r1, r0
}
    9706:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    LOG("Heartrate: %d bpm.",perip.bt_heart_rate);
    970a:	4803      	ldr	r0, [pc, #12]	; (9718 <bt_hrs_set+0x3c>)
    970c:	f004 b8a8 	b.w	d860 <printf>
    9710:	20009ab4 	.word	0x20009ab4
    9714:	0002099d 	.word	0x0002099d
    9718:	000209c6 	.word	0x000209c6

0000971c <set_heart_rate_value>:


void set_heart_rate_value(void){
    971c:	b510      	push	{r4, lr}
  uint16_t hr_voltage_mv = adc_read_ch_data(HR_CH, ADC_NUM_CHANNELS);
    971e:	2102      	movs	r1, #2
    9720:	2000      	movs	r0, #0
    9722:	f000 f9b3 	bl	9a8c <adc_read_ch_data>
  perip.adc_heart_rate_mV = (float)hr_voltage_mv;
    9726:	f7fe ff89 	bl	863c <__aeabi_ui2f>
    972a:	4c07      	ldr	r4, [pc, #28]	; (9748 <set_heart_rate_value+0x2c>)
  perip.bt_heart_rate = (uint8_t)(perip.adc_heart_rate_mV * (HR_MAX_VALUE - HR_MIN_VALUE) / VDD  + HR_MIN_VALUE);
    972c:	4907      	ldr	r1, [pc, #28]	; (974c <set_heart_rate_value+0x30>)
  perip.adc_heart_rate_mV = (float)hr_voltage_mv;
    972e:	60a0      	str	r0, [r4, #8]
  perip.bt_heart_rate = (uint8_t)(perip.adc_heart_rate_mV * (HR_MAX_VALUE - HR_MIN_VALUE) / VDD  + HR_MIN_VALUE);
    9730:	f7fe ffdc 	bl	86ec <__aeabi_fmul>
    9734:	4906      	ldr	r1, [pc, #24]	; (9750 <set_heart_rate_value+0x34>)
    9736:	f7ff f88d 	bl	8854 <__aeabi_fdiv>
    973a:	4906      	ldr	r1, [pc, #24]	; (9754 <set_heart_rate_value+0x38>)
    973c:	f7fe fece 	bl	84dc <__addsf3>
    9740:	f7ff f99a 	bl	8a78 <__aeabi_f2uiz>
    9744:	7320      	strb	r0, [r4, #12]
  
}
    9746:	bd10      	pop	{r4, pc}
    9748:	20009ab4 	.word	0x20009ab4
    974c:	42c80000 	.word	0x42c80000
    9750:	454e4000 	.word	0x454e4000
    9754:	42700000 	.word	0x42700000

00009758 <set_battery_perc>:

void set_battery_perc(void){
    9758:	b510      	push	{r4, lr}
  uint16_t batt_voltage_mv = adc_read_ch_data(BATT_CH, ADC_NUM_CHANNELS);
    975a:	2102      	movs	r1, #2
    975c:	2001      	movs	r0, #1
    975e:	f000 f995 	bl	9a8c <adc_read_ch_data>
  perip.adc_batt_mV = (float)batt_voltage_mv;
    9762:	f7fe ff6b 	bl	863c <__aeabi_ui2f>
    9766:	4c07      	ldr	r4, [pc, #28]	; (9784 <set_battery_perc+0x2c>)
  perip.bt_batt_lvl = (uint8_t)(perip.adc_batt_mV * (BATT_MAX_PERC_VALUE - BATT_MIN_PERC_VALUE) / VDD  + BATT_MIN_PERC_VALUE);
    9768:	4907      	ldr	r1, [pc, #28]	; (9788 <set_battery_perc+0x30>)
  perip.adc_batt_mV = (float)batt_voltage_mv;
    976a:	6020      	str	r0, [r4, #0]
  perip.bt_batt_lvl = (uint8_t)(perip.adc_batt_mV * (BATT_MAX_PERC_VALUE - BATT_MIN_PERC_VALUE) / VDD  + BATT_MIN_PERC_VALUE);
    976c:	f7fe ffbe 	bl	86ec <__aeabi_fmul>
    9770:	4906      	ldr	r1, [pc, #24]	; (978c <set_battery_perc+0x34>)
    9772:	f7ff f86f 	bl	8854 <__aeabi_fdiv>
    9776:	2100      	movs	r1, #0
    9778:	f7fe feb0 	bl	84dc <__addsf3>
    977c:	f7ff f97c 	bl	8a78 <__aeabi_f2uiz>
    9780:	7120      	strb	r0, [r4, #4]
}
    9782:	bd10      	pop	{r4, pc}
    9784:	20009ab4 	.word	0x20009ab4
    9788:	42c80000 	.word	0x42c80000
    978c:	454e4000 	.word	0x454e4000

00009790 <disconnected>:
	} else {
		LOG("Device Connected\n");
	}
}

static void disconnected(struct bt_conn *conn, uint8_t reason){
    9790:	b510      	push	{r4, lr}
    9792:	460c      	mov	r4, r1
	LOG("Device Disconnected (reason 0x%02x)\n", reason);
    9794:	f010 fb3b 	bl	19e0e <k_uptime_get_32>
    9798:	4622      	mov	r2, r4
}
    979a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	LOG("Device Disconnected (reason 0x%02x)\n", reason);
    979e:	4601      	mov	r1, r0
    97a0:	4801      	ldr	r0, [pc, #4]	; (97a8 <disconnected+0x18>)
    97a2:	f004 b85d 	b.w	d860 <printf>
    97a6:	bf00      	nop
    97a8:	000209e2 	.word	0x000209e2

000097ac <connected>:
static void connected(struct bt_conn *conn, uint8_t err){
    97ac:	b510      	push	{r4, lr}
	if (err) {
    97ae:	460c      	mov	r4, r1
    97b0:	b141      	cbz	r1, 97c4 <connected+0x18>
		LOG("Connection failed (err 0x%02x)\n", err);
    97b2:	f010 fb2c 	bl	19e0e <k_uptime_get_32>
    97b6:	4622      	mov	r2, r4
}
    97b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG("Connection failed (err 0x%02x)\n", err);
    97bc:	4601      	mov	r1, r0
    97be:	4805      	ldr	r0, [pc, #20]	; (97d4 <connected+0x28>)
    97c0:	f004 b84e 	b.w	d860 <printf>
		LOG("Device Connected\n");
    97c4:	f010 fb23 	bl	19e0e <k_uptime_get_32>
}
    97c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG("Device Connected\n");
    97cc:	4601      	mov	r1, r0
    97ce:	4802      	ldr	r0, [pc, #8]	; (97d8 <connected+0x2c>)
    97d0:	f004 b846 	b.w	d860 <printf>
    97d4:	00020a10 	.word	0x00020a10
    97d8:	00020a39 	.word	0x00020a39

000097dc <auth_cancel>:

static void auth_cancel(struct bt_conn *conn){
    97dc:	b530      	push	{r4, r5, lr}
    97de:	b093      	sub	sp, #76	; 0x4c
	char addr[BT_ADDR_LE_STR_LEN];
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    97e0:	f012 fd2a 	bl	1c238 <bt_conn_get_dst>
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    97e4:	7803      	ldrb	r3, [r0, #0]
    97e6:	4604      	mov	r4, r0
    97e8:	ad07      	add	r5, sp, #28
    97ea:	2b03      	cmp	r3, #3
    97ec:	d827      	bhi.n	983e <auth_cancel+0x62>
    97ee:	e8df f003 	tbb	[pc, r3]
    97f2:	2002      	.short	0x2002
    97f4:	2422      	.short	0x2422
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    97f6:	4915      	ldr	r1, [pc, #84]	; (984c <auth_cancel+0x70>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    97f8:	4628      	mov	r0, r5
    97fa:	f012 f80d 	bl	1b818 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    97fe:	79a3      	ldrb	r3, [r4, #6]
    9800:	9505      	str	r5, [sp, #20]
    9802:	7862      	ldrb	r2, [r4, #1]
    9804:	211e      	movs	r1, #30
    9806:	9204      	str	r2, [sp, #16]
    9808:	78a2      	ldrb	r2, [r4, #2]
    980a:	a80a      	add	r0, sp, #40	; 0x28
    980c:	9203      	str	r2, [sp, #12]
    980e:	78e2      	ldrb	r2, [r4, #3]
    9810:	9202      	str	r2, [sp, #8]
    9812:	7922      	ldrb	r2, [r4, #4]
    9814:	9201      	str	r2, [sp, #4]
    9816:	7962      	ldrb	r2, [r4, #5]
    9818:	9200      	str	r2, [sp, #0]
    981a:	4a0d      	ldr	r2, [pc, #52]	; (9850 <auth_cancel+0x74>)
    981c:	f010 fb7c 	bl	19f18 <snprintk>
	LOG("Pairing cancelled: %s\n", addr);
    9820:	f010 faf5 	bl	19e0e <k_uptime_get_32>
    9824:	aa0a      	add	r2, sp, #40	; 0x28
    9826:	4601      	mov	r1, r0
    9828:	480a      	ldr	r0, [pc, #40]	; (9854 <auth_cancel+0x78>)
    982a:	f004 f819 	bl	d860 <printf>
}
    982e:	b013      	add	sp, #76	; 0x4c
    9830:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    9832:	4909      	ldr	r1, [pc, #36]	; (9858 <auth_cancel+0x7c>)
    9834:	e7e0      	b.n	97f8 <auth_cancel+0x1c>
		strcpy(type, "public-id");
    9836:	4909      	ldr	r1, [pc, #36]	; (985c <auth_cancel+0x80>)
    9838:	e7de      	b.n	97f8 <auth_cancel+0x1c>
		strcpy(type, "random-id");
    983a:	4909      	ldr	r1, [pc, #36]	; (9860 <auth_cancel+0x84>)
    983c:	e7dc      	b.n	97f8 <auth_cancel+0x1c>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    983e:	210a      	movs	r1, #10
    9840:	4628      	mov	r0, r5
    9842:	4a08      	ldr	r2, [pc, #32]	; (9864 <auth_cancel+0x88>)
    9844:	f010 fb68 	bl	19f18 <snprintk>
		break;
    9848:	e7d9      	b.n	97fe <auth_cancel+0x22>
    984a:	bf00      	nop
    984c:	00020a54 	.word	0x00020a54
    9850:	00020a76 	.word	0x00020a76
    9854:	00020a99 	.word	0x00020a99
    9858:	00020a5b 	.word	0x00020a5b
    985c:	00020a62 	.word	0x00020a62
    9860:	00020a6c 	.word	0x00020a6c
    9864:	000232e1 	.word	0x000232e1

00009868 <bt_ready>:
};

/***********************************************************
 Function Definitions
***********************************************************/
void bt_ready(void){
    9868:	b530      	push	{r4, r5, lr}
    986a:	b089      	sub	sp, #36	; 0x24
	int err;
	LOG("Bluetooth initialized");
    986c:	f010 facf 	bl	19e0e <k_uptime_get_32>
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
    9870:	4d11      	ldr	r5, [pc, #68]	; (98b8 <bt_ready+0x50>)
	LOG("Bluetooth initialized");
    9872:	4601      	mov	r1, r0
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
    9874:	ac03      	add	r4, sp, #12
	LOG("Bluetooth initialized");
    9876:	4811      	ldr	r0, [pc, #68]	; (98bc <bt_ready+0x54>)
    9878:	f003 fff2 	bl	d860 <printf>
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
    987c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    987e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    9880:	682b      	ldr	r3, [r5, #0]
    9882:	2202      	movs	r2, #2
    9884:	6023      	str	r3, [r4, #0]
    9886:	2300      	movs	r3, #0
    9888:	490d      	ldr	r1, [pc, #52]	; (98c0 <bt_ready+0x58>)
    988a:	9300      	str	r3, [sp, #0]
    988c:	a803      	add	r0, sp, #12
    988e:	f006 fc21 	bl	100d4 <bt_le_adv_start>
	if (err) {
    9892:	4604      	mov	r4, r0
    9894:	b140      	cbz	r0, 98a8 <bt_ready+0x40>
		LOG("Advertising failed to start (err %d)\n", err);
    9896:	f010 faba 	bl	19e0e <k_uptime_get_32>
    989a:	4622      	mov	r2, r4
    989c:	4601      	mov	r1, r0
    989e:	4809      	ldr	r0, [pc, #36]	; (98c4 <bt_ready+0x5c>)
    98a0:	f003 ffde 	bl	d860 <printf>
		return;
	}
	LOG("Advertising successfully started\n");
}
    98a4:	b009      	add	sp, #36	; 0x24
    98a6:	bd30      	pop	{r4, r5, pc}
	LOG("Advertising successfully started\n");
    98a8:	f010 fab1 	bl	19e0e <k_uptime_get_32>
    98ac:	4601      	mov	r1, r0
    98ae:	4806      	ldr	r0, [pc, #24]	; (98c8 <bt_ready+0x60>)
    98b0:	f003 ffd6 	bl	d860 <printf>
    98b4:	e7f6      	b.n	98a4 <bt_ready+0x3c>
    98b6:	bf00      	nop
    98b8:	0001fd50 	.word	0x0001fd50
    98bc:	00020ab9 	.word	0x00020ab9
    98c0:	0001fe28 	.word	0x0001fe28
    98c4:	00020ad8 	.word	0x00020ad8
    98c8:	00020b07 	.word	0x00020b07

000098cc <bt_conn_auth_cb_reg>:

void bt_conn_auth_cb_reg(){
    98cc:	b510      	push	{r4, lr}
	int err;
	err = bt_conn_auth_cb_register(&auth_cb_display);
    98ce:	480b      	ldr	r0, [pc, #44]	; (98fc <bt_conn_auth_cb_reg+0x30>)
    98d0:	f007 fd18 	bl	11304 <bt_conn_auth_cb_register>
	if (err) {
    98d4:	4604      	mov	r4, r0
    98d6:	b140      	cbz	r0, 98ea <bt_conn_auth_cb_reg+0x1e>
		LOG("Failed to register auth callbacks (err %d)\n", err);
    98d8:	f010 fa99 	bl	19e0e <k_uptime_get_32>
    98dc:	4622      	mov	r2, r4
	} else {
		LOG("Auth callbacks registered\n");
	}
}
    98de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG("Failed to register auth callbacks (err %d)\n", err);
    98e2:	4601      	mov	r1, r0
    98e4:	4806      	ldr	r0, [pc, #24]	; (9900 <bt_conn_auth_cb_reg+0x34>)
    98e6:	f003 bfbb 	b.w	d860 <printf>
		LOG("Auth callbacks registered\n");
    98ea:	f010 fa90 	bl	19e0e <k_uptime_get_32>
}
    98ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG("Auth callbacks registered\n");
    98f2:	4601      	mov	r1, r0
    98f4:	4803      	ldr	r0, [pc, #12]	; (9904 <bt_conn_auth_cb_reg+0x38>)
    98f6:	f003 bfb3 	b.w	d860 <printf>
    98fa:	bf00      	nop
    98fc:	20008260 	.word	0x20008260
    9900:	00020b32 	.word	0x00020b32
    9904:	00020b67 	.word	0x00020b67

00009908 <adc_init>:


/***********************************************************
 Function Definitions
***********************************************************/
void adc_init(){
    9908:	b570      	push	{r4, r5, r6, lr}
    990a:	4c0b      	ldr	r4, [pc, #44]	; (9938 <adc_init+0x30>)
    990c:	4620      	mov	r0, r4
    990e:	f015 f91b 	bl	1eb48 <z_device_is_ready>
  int err;
  /* Configure channels individually prior to sampling. */
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
		if (!device_is_ready(adc_channels[i].dev)) {
    9912:	b180      	cbz	r0, 9936 <adc_init+0x2e>
					   const struct adc_channel_cfg *channel_cfg)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->channel_setup(dev, channel_cfg);
    9914:	68a5      	ldr	r5, [r4, #8]
    9916:	4620      	mov	r0, r4
    9918:	682b      	ldr	r3, [r5, #0]
    991a:	4908      	ldr	r1, [pc, #32]	; (993c <adc_init+0x34>)
    991c:	4798      	blx	r3
			LOG_ADC("ADC controller device not ready\n");
			return;
		}

		err = adc_channel_setup_dt(&adc_channels[i]);
		if (err < 0) {
    991e:	2800      	cmp	r0, #0
    9920:	db09      	blt.n	9936 <adc_init+0x2e>
    9922:	4620      	mov	r0, r4
    9924:	f015 f910 	bl	1eb48 <z_device_is_ready>
		if (!device_is_ready(adc_channels[i].dev)) {
    9928:	b128      	cbz	r0, 9936 <adc_init+0x2e>
    992a:	4905      	ldr	r1, [pc, #20]	; (9940 <adc_init+0x38>)
    992c:	4620      	mov	r0, r4
    992e:	682b      	ldr	r3, [r5, #0]
			LOG_ADC("Could not setup channel #%d (%d)\n", i, err);
			return;
		}
	}
}
    9930:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9934:	4718      	bx	r3
    9936:	bd70      	pop	{r4, r5, r6, pc}
    9938:	0001f898 	.word	0x0001f898
    993c:	0001fe3e 	.word	0x0001fe3e
    9940:	0001fe52 	.word	0x0001fe52

00009944 <Ff_buffer_add>:


void Ff_buffer_add(uint8_t channel, int32_t data_read, uint8_t size){
  if(channel < size){
    9944:	4290      	cmp	r0, r2
void Ff_buffer_add(uint8_t channel, int32_t data_read, uint8_t size){
    9946:	b570      	push	{r4, r5, r6, lr}
  if(channel < size){
    9948:	d21e      	bcs.n	9988 <Ff_buffer_add+0x44>
    if(adc_a[channel].status){
    994a:	2328      	movs	r3, #40	; 0x28
    994c:	4c11      	ldr	r4, [pc, #68]	; (9994 <Ff_buffer_add+0x50>)
    994e:	fb03 4600 	mla	r6, r3, r0, r4
    9952:	7872      	ldrb	r2, [r6, #1]
    9954:	b1c2      	cbz	r2, 9988 <Ff_buffer_add+0x44>
      if(adc_a[channel].fbuf.count < adc_a[channel].fbuf.length){
    9956:	8c35      	ldrh	r5, [r6, #32]
    9958:	7932      	ldrb	r2, [r6, #4]
    995a:	4295      	cmp	r5, r2
    995c:	d30c      	bcc.n	9978 <Ff_buffer_add+0x34>
    995e:	4633      	mov	r3, r6
    9960:	2500      	movs	r5, #0
    9962:	3308      	adds	r3, #8
        adc_a[channel].fbuf.data_set[adc_a[channel].fbuf.count] = data_read; // Fill the buffer with the new data
        adc_a[channel].fbuf.count++;
      }else{
        // Shift the buffer to make space for the new data
        for(uint8_t i = 0; i < adc_a[channel].fbuf.length - 1; i++){
    9964:	3a01      	subs	r2, #1
    9966:	42aa      	cmp	r2, r5
    9968:	dc0f      	bgt.n	998a <Ff_buffer_add+0x46>
          adc_a[channel].fbuf.data_set[i] = adc_a[channel].fbuf.data_set[i + 1];
        }
        adc_a[channel].fbuf.data_set[adc_a[channel].fbuf.length - 1] = data_read; // Add the new data at the end
    996a:	230a      	movs	r3, #10
    996c:	fb03 2200 	mla	r2, r3, r0, r2
    9970:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    9974:	60a1      	str	r1, [r4, #8]
      }
    }
  }
}
    9976:	e007      	b.n	9988 <Ff_buffer_add+0x44>
        adc_a[channel].fbuf.data_set[adc_a[channel].fbuf.count] = data_read; // Fill the buffer with the new data
    9978:	230a      	movs	r3, #10
    997a:	fb03 5300 	mla	r3, r3, r0, r5
        adc_a[channel].fbuf.count++;
    997e:	3501      	adds	r5, #1
        adc_a[channel].fbuf.data_set[adc_a[channel].fbuf.count] = data_read; // Fill the buffer with the new data
    9980:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    9984:	6099      	str	r1, [r3, #8]
        adc_a[channel].fbuf.count++;
    9986:	8435      	strh	r5, [r6, #32]
}
    9988:	bd70      	pop	{r4, r5, r6, pc}
          adc_a[channel].fbuf.data_set[i] = adc_a[channel].fbuf.data_set[i + 1];
    998a:	685e      	ldr	r6, [r3, #4]
    998c:	3501      	adds	r5, #1
    998e:	f843 6b04 	str.w	r6, [r3], #4
        for(uint8_t i = 0; i < adc_a[channel].fbuf.length - 1; i++){
    9992:	e7e8      	b.n	9966 <Ff_buffer_add+0x22>
    9994:	2000828c 	.word	0x2000828c

00009998 <data_is_valid>:


bool data_is_valid(uint8_t channel, uint16_t data_read, uint8_t size){
    9998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    999a:	4605      	mov	r5, r0
   if(channel < size){
    999c:	4295      	cmp	r5, r2
bool data_is_valid(uint8_t channel, uint16_t data_read, uint8_t size){
    999e:	4608      	mov	r0, r1
   if(channel < size){
    99a0:	d230      	bcs.n	9a04 <data_is_valid+0x6c>
    if(adc_a[channel].status){
    99a2:	2228      	movs	r2, #40	; 0x28
    99a4:	4f18      	ldr	r7, [pc, #96]	; (9a08 <data_is_valid+0x70>)
    99a6:	fb02 7205 	mla	r2, r2, r5, r7
    99aa:	7853      	ldrb	r3, [r2, #1]
    99ac:	b343      	cbz	r3, 9a00 <data_is_valid+0x68>
      if(adc_a[channel].fbuf.count == adc_a[channel].fbuf.length){
    99ae:	8c11      	ldrh	r1, [r2, #32]
    99b0:	7914      	ldrb	r4, [r2, #4]
    99b2:	428c      	cmp	r4, r1
    99b4:	d124      	bne.n	9a00 <data_is_valid+0x68>
        uint16_t last_value = adc_a[channel].fbuf.data_set[adc_a[channel].fbuf.count - 1]; // Get the last value in the buffer
        return ((data_read <= (last_value + RANGE)) & (data_read >= (last_value - RANGE)));
    99b6:	f7fe fe45 	bl	8644 <__aeabi_i2f>
        uint16_t last_value = adc_a[channel].fbuf.data_set[adc_a[channel].fbuf.count - 1]; // Get the last value in the buffer
    99ba:	230a      	movs	r3, #10
    99bc:	3c01      	subs	r4, #1
    99be:	fb03 4405 	mla	r4, r3, r5, r4
    99c2:	eb07 0784 	add.w	r7, r7, r4, lsl #2
        return ((data_read <= (last_value + RANGE)) & (data_read >= (last_value - RANGE)));
    99c6:	4606      	mov	r6, r0
    99c8:	8938      	ldrh	r0, [r7, #8]
    99ca:	f7fe fe3b 	bl	8644 <__aeabi_i2f>
    99ce:	490f      	ldr	r1, [pc, #60]	; (9a0c <data_is_valid+0x74>)
    99d0:	4605      	mov	r5, r0
    99d2:	f7fe fd83 	bl	84dc <__addsf3>
    99d6:	4601      	mov	r1, r0
    99d8:	4630      	mov	r0, r6
    99da:	f7ff f82f 	bl	8a3c <__aeabi_fcmple>
    99de:	1e03      	subs	r3, r0, #0
    99e0:	bf18      	it	ne
    99e2:	2301      	movne	r3, #1
    99e4:	4909      	ldr	r1, [pc, #36]	; (9a0c <data_is_valid+0x74>)
    99e6:	4628      	mov	r0, r5
    99e8:	461c      	mov	r4, r3
    99ea:	f7fe fd75 	bl	84d8 <__aeabi_fsub>
    99ee:	4601      	mov	r1, r0
    99f0:	4630      	mov	r0, r6
    99f2:	f7ff f82d 	bl	8a50 <__aeabi_fcmpge>
    99f6:	2800      	cmp	r0, #0
    99f8:	bf0c      	ite	eq
    99fa:	2300      	moveq	r3, #0
    99fc:	f004 0301 	andne.w	r3, r4, #1
    }
    
  }else{
    return false; // If the channel is out of bounds, return false
  }
}
    9a00:	4618      	mov	r0, r3
    9a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return false; // If the channel is not valid, return false
    9a04:	2300      	movs	r3, #0
    9a06:	e7fb      	b.n	9a00 <data_is_valid+0x68>
    9a08:	2000828c 	.word	0x2000828c
    9a0c:	43ba2e8c 	.word	0x43ba2e8c

00009a10 <spike_counter>:


uint8_t spike_counter( uint8_t channel,  uint16_t data_read, uint8_t size){
  if(channel < size){
    9a10:	4290      	cmp	r0, r2
uint8_t spike_counter( uint8_t channel,  uint16_t data_read, uint8_t size){
    9a12:	b570      	push	{r4, r5, r6, lr}
    9a14:	4605      	mov	r5, r0
    9a16:	4e0b      	ldr	r6, [pc, #44]	; (9a44 <spike_counter+0x34>)
  if(channel < size){
    9a18:	d20c      	bcs.n	9a34 <spike_counter+0x24>
    if(adc_a[channel].status){
    9a1a:	2428      	movs	r4, #40	; 0x28
    9a1c:	fb04 6400 	mla	r4, r4, r0, r6
    9a20:	7863      	ldrb	r3, [r4, #1]
    9a22:	b13b      	cbz	r3, 9a34 <spike_counter+0x24>
      if(!data_is_valid(channel, data_read, size)){
    9a24:	f7ff ffb8 	bl	9998 <data_is_valid>
    9a28:	b950      	cbnz	r0, 9a40 <spike_counter+0x30>
          adc_a[channel].counter_spike ++; // First spike detected
    9a2a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    9a2e:	3301      	adds	r3, #1
      }else{
          adc_a[channel].counter_spike = NO_ADC_SPIKE; // Reset counter if data is valid
    9a30:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      }
    }
  }
  return adc_a[channel].counter_spike;
    9a34:	2328      	movs	r3, #40	; 0x28
    9a36:	fb03 6605 	mla	r6, r3, r5, r6
}
    9a3a:	f896 0024 	ldrb.w	r0, [r6, #36]	; 0x24
    9a3e:	bd70      	pop	{r4, r5, r6, pc}
          adc_a[channel].counter_spike = NO_ADC_SPIKE; // Reset counter if data is valid
    9a40:	2300      	movs	r3, #0
    9a42:	e7f5      	b.n	9a30 <spike_counter+0x20>
    9a44:	2000828c 	.word	0x2000828c

00009a48 <adc_get_media>:
}

uint16_t adc_get_media (uint8_t channel, uint8_t size){
  uint16_t media = 0;
  uint16_t sat_value = 0;
  if(channel < size){
    9a48:	4288      	cmp	r0, r1
uint16_t adc_get_media (uint8_t channel, uint8_t size){
    9a4a:	4603      	mov	r3, r0
    9a4c:	b530      	push	{r4, r5, lr}
  if(channel < size){
    9a4e:	d218      	bcs.n	9a82 <adc_get_media+0x3a>
    if(adc_a[channel].status){
    9a50:	2228      	movs	r2, #40	; 0x28
    9a52:	4d0d      	ldr	r5, [pc, #52]	; (9a88 <adc_get_media+0x40>)
    9a54:	fb02 5200 	mla	r2, r2, r0, r5
    9a58:	7850      	ldrb	r0, [r2, #1]
    9a5a:	b188      	cbz	r0, 9a80 <adc_get_media+0x38>
      if(adc_a[channel].fbuf.count > 0){
    9a5c:	8c10      	ldrh	r0, [r2, #32]
    9a5e:	b178      	cbz	r0, 9a80 <adc_get_media+0x38>
        uint16_t sum = 0;
    9a60:	2200      	movs	r2, #0
        for(uint8_t i = 0; i < adc_a[channel].fbuf.count; i++){
          sat_value = (uint16_t)adc_a[channel].fbuf.data_set[i];
    9a62:	240a      	movs	r4, #10
        for(uint8_t i = 0; i < adc_a[channel].fbuf.count; i++){
    9a64:	4611      	mov	r1, r2
          sat_value = (uint16_t)adc_a[channel].fbuf.data_set[i];
    9a66:	4363      	muls	r3, r4
    9a68:	185c      	adds	r4, r3, r1
    9a6a:	eb05 0484 	add.w	r4, r5, r4, lsl #2
    9a6e:	68a4      	ldr	r4, [r4, #8]
        for(uint8_t i = 0; i < adc_a[channel].fbuf.count; i++){
    9a70:	3101      	adds	r1, #1
    9a72:	b2c9      	uxtb	r1, r1
          sum += sat_value; // Sum all values in the buffer
    9a74:	4422      	add	r2, r4
        for(uint8_t i = 0; i < adc_a[channel].fbuf.count; i++){
    9a76:	4288      	cmp	r0, r1
          sum += sat_value; // Sum all values in the buffer
    9a78:	b292      	uxth	r2, r2
        for(uint8_t i = 0; i < adc_a[channel].fbuf.count; i++){
    9a7a:	d8f5      	bhi.n	9a68 <adc_get_media+0x20>
        }
        media = sum / adc_a[channel].fbuf.count; // Calculate the average
    9a7c:	fbb2 f0f0 	udiv	r0, r2, r0
        media = 0; // If no data, return zero
      }
    }
  }
  return media;
}
    9a80:	bd30      	pop	{r4, r5, pc}
  uint16_t media = 0;
    9a82:	2000      	movs	r0, #0
    9a84:	e7fc      	b.n	9a80 <adc_get_media+0x38>
    9a86:	bf00      	nop
    9a88:	2000828c 	.word	0x2000828c

00009a8c <adc_read_ch_data>:
    if (channel >= ARRAY_SIZE(adc_channels)) {
    9a8c:	2801      	cmp	r0, #1
uint16_t adc_read_ch_data (uint8_t channel, uint8_t size){
    9a8e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    9a92:	4604      	mov	r4, r0
    9a94:	460e      	mov	r6, r1
    if (channel >= ARRAY_SIZE(adc_channels)) {
    9a96:	d870      	bhi.n	9b7a <adc_read_ch_data+0xee>
 * @retval -ENOTSUP If @p spec does not have valid channel configuration
 */
static inline int adc_sequence_init_dt(const struct adc_dt_spec *spec,
				       struct adc_sequence *seq)
{
	if (!spec->channel_cfg_dt_node_exists) {
    9a98:	2314      	movs	r3, #20
    9a9a:	4d3a      	ldr	r5, [pc, #232]	; (9b84 <adc_read_ch_data+0xf8>)
    9a9c:	fb03 5300 	mla	r3, r3, r0, r5
    9aa0:	795a      	ldrb	r2, [r3, #5]
    9aa2:	b132      	cbz	r2, 9ab2 <adc_read_ch_data+0x26>
		return -ENOTSUP;
	}

	seq->channels = BIT(spec->channel_id);
    9aa4:	2201      	movs	r2, #1
    9aa6:	7918      	ldrb	r0, [r3, #4]
    9aa8:	4937      	ldr	r1, [pc, #220]	; (9b88 <adc_read_ch_data+0xfc>)
	seq->resolution = spec->resolution;
    9aaa:	8a1b      	ldrh	r3, [r3, #16]
	seq->channels = BIT(spec->channel_id);
    9aac:	4082      	lsls	r2, r0
    9aae:	604a      	str	r2, [r1, #4]
	seq->resolution = spec->resolution;
    9ab0:	820b      	strh	r3, [r1, #16]
      err = adc_read(adc_channels[channel].dev, &sequence);
    9ab2:	2314      	movs	r3, #20
    9ab4:	4363      	muls	r3, r4
    9ab6:	f855 a003 	ldr.w	sl, [r5, r3]
    9aba:	eb05 0903 	add.w	r9, r5, r3
	return api->read(dev, sequence);
    9abe:	f8da 3008 	ldr.w	r3, [sl, #8]
    9ac2:	4650      	mov	r0, sl
    9ac4:	685b      	ldr	r3, [r3, #4]
    9ac6:	4930      	ldr	r1, [pc, #192]	; (9b88 <adc_read_ch_data+0xfc>)
    9ac8:	4798      	blx	r3
      if (adc_a[channel].status){
    9aca:	2328      	movs	r3, #40	; 0x28
    9acc:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 9b8c <adc_read_ch_data+0x100>
    9ad0:	fb03 8304 	mla	r3, r3, r4, r8
    9ad4:	785b      	ldrb	r3, [r3, #1]
    9ad6:	2b00      	cmp	r3, #0
    9ad8:	d03f      	beq.n	9b5a <adc_read_ch_data+0xce>
        if (err >= 0) {
    9ada:	2800      	cmp	r0, #0
    9adc:	db4f      	blt.n	9b7e <adc_read_ch_data+0xf2>
          val_mv = buf;
    9ade:	4b2c      	ldr	r3, [pc, #176]	; (9b90 <adc_read_ch_data+0x104>)
    9ae0:	f9b3 7000 	ldrsh.w	r7, [r3]
	if (!spec->channel_cfg_dt_node_exists) {
    9ae4:	f899 3005 	ldrb.w	r3, [r9, #5]
    9ae8:	b30b      	cbz	r3, 9b2e <adc_read_ch_data+0xa2>
	resolution = spec->resolution;
    9aea:	2214      	movs	r2, #20
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
    9aec:	f899 3007 	ldrb.w	r3, [r9, #7]
	resolution = spec->resolution;
    9af0:	fb02 5104 	mla	r1, r2, r4, r5
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
    9af4:	2b04      	cmp	r3, #4
	return api->ref_internal;
    9af6:	bf0a      	itet	eq
    9af8:	f8da 3008 	ldreq.w	r3, [sl, #8]
		vref_mv = spec->vref_mv;
    9afc:	f8b9 300e 	ldrhne.w	r3, [r9, #14]
		vref_mv = (int32_t)adc_ref_internal(spec->dev);
    9b00:	891b      	ldrheq	r3, [r3, #8]
	return adc_raw_to_millivolts(vref_mv, spec->channel_cfg.gain,
    9b02:	fb02 5504 	mla	r5, r2, r4, r5
	resolution = spec->resolution;
    9b06:	f891 9010 	ldrb.w	r9, [r1, #16]
	int32_t adc_mv = *valp * ref_mv;
    9b0a:	437b      	muls	r3, r7
	if (spec->channel_cfg.differential) {
    9b0c:	7a89      	ldrb	r1, [r1, #10]
	int ret = adc_gain_invert(gain, &adc_mv);
    9b0e:	79a8      	ldrb	r0, [r5, #6]
	if (spec->channel_cfg.differential) {
    9b10:	0689      	lsls	r1, r1, #26
		resolution -= 1U;
    9b12:	bf48      	it	mi
    9b14:	f109 39ff 	addmi.w	r9, r9, #4294967295
	int ret = adc_gain_invert(gain, &adc_mv);
    9b18:	a901      	add	r1, sp, #4
		resolution -= 1U;
    9b1a:	bf48      	it	mi
    9b1c:	fa5f f989 	uxtbmi.w	r9, r9
	int32_t adc_mv = *valp * ref_mv;
    9b20:	9301      	str	r3, [sp, #4]
	int ret = adc_gain_invert(gain, &adc_mv);
    9b22:	f00b fd41 	bl	155a8 <adc_gain_invert>
	if (ret == 0) {
    9b26:	b910      	cbnz	r0, 9b2e <adc_read_ch_data+0xa2>
		*valp = (adc_mv >> resolution);
    9b28:	9f01      	ldr	r7, [sp, #4]
    9b2a:	fa47 f709 	asr.w	r7, r7, r9
          if (spike_counter(channel, val_mv, size) == NO_ADC_SPIKE || spike_counter(channel, val_mv, size) >= LIMIT_ADC_SPIKE){
    9b2e:	b2bd      	uxth	r5, r7
    9b30:	4632      	mov	r2, r6
    9b32:	4629      	mov	r1, r5
    9b34:	4620      	mov	r0, r4
    9b36:	f7ff ff6b 	bl	9a10 <spike_counter>
    9b3a:	b9b0      	cbnz	r0, 9b6a <adc_read_ch_data+0xde>
            adc_a[channel].counter_spike = NO_ADC_SPIKE; // Reset spike counter if data is valid
    9b3c:	2528      	movs	r5, #40	; 0x28
            Ff_buffer_add(channel, val_mv, size); // Add new data to the FIFO buffer
    9b3e:	4632      	mov	r2, r6
    9b40:	4639      	mov	r1, r7
    9b42:	4620      	mov	r0, r4
    9b44:	f7ff fefe 	bl	9944 <Ff_buffer_add>
            adc_a[channel].counter_spike = NO_ADC_SPIKE; // Reset spike counter if data is valid
    9b48:	2300      	movs	r3, #0
    9b4a:	fb05 8504 	mla	r5, r5, r4, r8
            adc_a[channel].fbuf.data_media = adc_get_media(channel, size); // Calculate media from the buffer
    9b4e:	4631      	mov	r1, r6
            adc_a[channel].counter_spike = NO_ADC_SPIKE; // Reset spike counter if data is valid
    9b50:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
            adc_a[channel].fbuf.data_media = adc_get_media(channel, size); // Calculate media from the buffer
    9b54:	f7ff ff78 	bl	9a48 <adc_get_media>
    9b58:	61e8      	str	r0, [r5, #28]
  return adc_a[channel].fbuf.data_media;
    9b5a:	2328      	movs	r3, #40	; 0x28
    9b5c:	fb03 8804 	mla	r8, r3, r4, r8
    9b60:	f8b8 001c 	ldrh.w	r0, [r8, #28]
}
    9b64:	b002      	add	sp, #8
    9b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if (spike_counter(channel, val_mv, size) == NO_ADC_SPIKE || spike_counter(channel, val_mv, size) >= LIMIT_ADC_SPIKE){
    9b6a:	4632      	mov	r2, r6
    9b6c:	4629      	mov	r1, r5
    9b6e:	4620      	mov	r0, r4
    9b70:	f7ff ff4e 	bl	9a10 <spike_counter>
    9b74:	2802      	cmp	r0, #2
    9b76:	d8e1      	bhi.n	9b3c <adc_read_ch_data+0xb0>
    9b78:	e7ef      	b.n	9b5a <adc_read_ch_data+0xce>
        return 0; // Return 0 or handle error as needed
    9b7a:	2000      	movs	r0, #0
    9b7c:	e7f2      	b.n	9b64 <adc_read_ch_data+0xd8>
          return -1;
    9b7e:	f64f 70ff 	movw	r0, #65535	; 0xffff
    9b82:	e7ef      	b.n	9b64 <adc_read_ch_data+0xd8>
    9b84:	0001fe38 	.word	0x0001fe38
    9b88:	20008278 	.word	0x20008278
    9b8c:	2000828c 	.word	0x2000828c
    9b90:	20009f6c 	.word	0x20009f6c

00009b94 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
    9b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9b98:	b095      	sub	sp, #84	; 0x54
    9b9a:	af00      	add	r7, sp, #0
    9b9c:	f8d7 b078 	ldr.w	fp, [r7, #120]	; 0x78
    9ba0:	61bb      	str	r3, [r7, #24]
    9ba2:	f3cb 03c0 	ubfx	r3, fp, #3, #1
    9ba6:	4604      	mov	r4, r0
    9ba8:	627a      	str	r2, [r7, #36]	; 0x24
    9baa:	613b      	str	r3, [r7, #16]
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
    9bac:	6239      	str	r1, [r7, #32]
    9bae:	b951      	cbnz	r1, 9bc6 <cbprintf_package_convert+0x32>
	for (int i = 0; i < s_nbr; i++) {
    9bb0:	460d      	mov	r5, r1
	buf += ros_nbr;
    9bb2:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
    9bb4:	7846      	ldrb	r6, [r0, #1]
	buf += ros_nbr;
    9bb6:	7880      	ldrb	r0, [r0, #2]
    9bb8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    9bbc:	4420      	add	r0, r4
	for (int i = 0; i < s_nbr; i++) {
    9bbe:	42ae      	cmp	r6, r5
    9bc0:	d81a      	bhi.n	9bf8 <cbprintf_package_convert+0x64>
	return (size_t)(uintptr_t)(buf - start);
    9bc2:	1b03      	subs	r3, r0, r4
    9bc4:	623b      	str	r3, [r7, #32]

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
    9bc6:	f894 9002 	ldrb.w	r9, [r4, #2]
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
    9bca:	78e3      	ldrb	r3, [r4, #3]
	ros_nbr = in_desc->ro_str_cnt;
    9bcc:	464e      	mov	r6, r9
	rws_nbr = in_desc->rw_str_cnt;
    9bce:	617b      	str	r3, [r7, #20]
	ro_cpy = ros_nbr &&
    9bd0:	f1b9 0f00 	cmp.w	r9, #0
    9bd4:	d002      	beq.n	9bdc <cbprintf_package_convert+0x48>
    9bd6:	f01b 0f01 	tst.w	fp, #1
    9bda:	d116      	bne.n	9c0a <cbprintf_package_convert+0x76>
	rw_cpy = rws_nbr > 0 &&
    9bdc:	697b      	ldr	r3, [r7, #20]
    9bde:	bb53      	cbnz	r3, 9c36 <cbprintf_package_convert+0xa2>
	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
		if (cb) {
    9be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9be2:	b11b      	cbz	r3, 9bec <cbprintf_package_convert+0x58>
			cb(in_packaged, in_len, ctx);
    9be4:	4620      	mov	r0, r4
    9be6:	69ba      	ldr	r2, [r7, #24]
    9be8:	6a39      	ldr	r1, [r7, #32]
    9bea:	4798      	blx	r3
		}

		return in_len;
    9bec:	6a3d      	ldr	r5, [r7, #32]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
    9bee:	4628      	mov	r0, r5
    9bf0:	3754      	adds	r7, #84	; 0x54
    9bf2:	46bd      	mov	sp, r7
    9bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
    9bf8:	f100 0801 	add.w	r8, r0, #1
		buf += strlen((const char *)buf) + 1;
    9bfc:	4640      	mov	r0, r8
    9bfe:	f011 fe29 	bl	1b854 <strlen>
    9c02:	3001      	adds	r0, #1
    9c04:	4440      	add	r0, r8
	for (int i = 0; i < s_nbr; i++) {
    9c06:	3501      	adds	r5, #1
    9c08:	e7d9      	b.n	9bbe <cbprintf_package_convert+0x2a>
	rw_cpy = rws_nbr > 0 &&
    9c0a:	6863      	ldr	r3, [r4, #4]
    9c0c:	f894 a000 	ldrb.w	sl, [r4]
	const char *fmt = *(const char **)(buf + sizeof(void *));
    9c10:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
    9c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	args_size = in_desc->len * sizeof(int);
    9c14:	ea4f 028a 	mov.w	r2, sl, lsl #2
    9c18:	60fa      	str	r2, [r7, #12]
	uint8_t *str_pos = &buf[args_size];
    9c1a:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
	if (cb == NULL) {
    9c1e:	2b00      	cmp	r3, #0
    9c20:	f040 8104 	bne.w	9e2c <cbprintf_package_convert+0x298>
		out_len = (int)in_len;
    9c24:	46d0      	mov	r8, sl
	size_t strl_cnt = 0;
    9c26:	2600      	movs	r6, #0
		out_len = (int)in_len;
    9c28:	6a3d      	ldr	r5, [r7, #32]
		if (ro_cpy) {
    9c2a:	eb09 030a 	add.w	r3, r9, sl
			for (int i = 0; i < ros_nbr; i++) {
    9c2e:	4543      	cmp	r3, r8
    9c30:	d150      	bne.n	9cd4 <cbprintf_package_convert+0x140>
    9c32:	44ca      	add	sl, r9
    9c34:	e013      	b.n	9c5e <cbprintf_package_convert+0xca>
	rw_cpy = rws_nbr > 0 &&
    9c36:	f01b 0f02 	tst.w	fp, #2
    9c3a:	d0d1      	beq.n	9be0 <cbprintf_package_convert+0x4c>
	args_size = in_desc->len * sizeof(int);
    9c3c:	f894 a000 	ldrb.w	sl, [r4]
    9c40:	ea4f 038a 	mov.w	r3, sl, lsl #2
    9c44:	60fb      	str	r3, [r7, #12]
	const char *fmt = *(const char **)(buf + sizeof(void *));
    9c46:	6863      	ldr	r3, [r4, #4]
	uint8_t *str_pos = &buf[args_size];
    9c48:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
	const char *fmt = *(const char **)(buf + sizeof(void *));
    9c4c:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
    9c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9c50:	2b00      	cmp	r3, #0
    9c52:	d17a      	bne.n	9d4a <cbprintf_package_convert+0x1b6>
		out_len = (int)in_len;
    9c54:	6a3d      	ldr	r5, [r7, #32]
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    9c56:	f1b9 0f00 	cmp.w	r9, #0
    9c5a:	d150      	bne.n	9cfe <cbprintf_package_convert+0x16a>
	size_t strl_cnt = 0;
    9c5c:	464e      	mov	r6, r9
		for (int i = 0; i < rws_nbr; i++) {
    9c5e:	f01b 0f05 	tst.w	fp, #5
    9c62:	bf0c      	ite	eq
    9c64:	2302      	moveq	r3, #2
    9c66:	2301      	movne	r3, #1
    9c68:	627b      	str	r3, [r7, #36]	; 0x24
    9c6a:	697b      	ldr	r3, [r7, #20]
    9c6c:	eb0a 0943 	add.w	r9, sl, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    9c70:	f00b 0302 	and.w	r3, fp, #2
    9c74:	623b      	str	r3, [r7, #32]
		for (int i = 0; i < rws_nbr; i++) {
    9c76:	45ca      	cmp	sl, r9
    9c78:	d0b9      	beq.n	9bee <cbprintf_package_convert+0x5a>
			uint8_t arg_idx = *str_pos++;
    9c7a:	f81a 1b02 	ldrb.w	r1, [sl], #2
			const char *str = *(const char **)&buf32[arg_pos];
    9c7e:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
    9c82:	f854 8023 	ldr.w	r8, [r4, r3, lsl #2]
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    9c86:	4bae      	ldr	r3, [pc, #696]	; (9f40 <cbprintf_package_convert+0x3ac>)
    9c88:	4598      	cmp	r8, r3
    9c8a:	d302      	bcc.n	9c92 <cbprintf_package_convert+0xfe>
    9c8c:	4bad      	ldr	r3, [pc, #692]	; (9f44 <cbprintf_package_convert+0x3b0>)
    9c8e:	4598      	cmp	r8, r3
    9c90:	d33b      	bcc.n	9d0a <cbprintf_package_convert+0x176>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    9c92:	693b      	ldr	r3, [r7, #16]
    9c94:	2b00      	cmp	r3, #0
    9c96:	d045      	beq.n	9d24 <cbprintf_package_convert+0x190>
    9c98:	69f8      	ldr	r0, [r7, #28]
    9c9a:	f010 f8f6 	bl	19e8a <is_ptr>
    9c9e:	2800      	cmp	r0, #0
    9ca0:	d040      	beq.n	9d24 <cbprintf_package_convert+0x190>
				LOG_WRN("(unsigned) char * used for %%p argument. "
    9ca2:	46e8      	mov	r8, sp
    9ca4:	b08a      	sub	sp, #40	; 0x28
    9ca6:	466a      	mov	r2, sp
    9ca8:	4ba7      	ldr	r3, [pc, #668]	; (9f48 <cbprintf_package_convert+0x3b4>)
    9caa:	6153      	str	r3, [r2, #20]
    9cac:	4ba7      	ldr	r3, [pc, #668]	; (9f4c <cbprintf_package_convert+0x3b8>)
    9cae:	6193      	str	r3, [r2, #24]
    9cb0:	69fb      	ldr	r3, [r7, #28]
    9cb2:	e9c2 3107 	strd	r3, r1, [r2, #28]
    9cb6:	f240 3301 	movw	r3, #769	; 0x301
    9cba:	8493      	strh	r3, [r2, #36]	; 0x24
    9cbc:	4ba4      	ldr	r3, [pc, #656]	; (9f50 <cbprintf_package_convert+0x3bc>)
    9cbe:	f842 3f10 	str.w	r3, [r2, #16]!
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
    9cc2:	2300      	movs	r3, #0
    9cc4:	f44f 5132 	mov.w	r1, #11392	; 0x2c80
    9cc8:	48a2      	ldr	r0, [pc, #648]	; (9f54 <cbprintf_package_convert+0x3c0>)
    9cca:	f001 fc49 	bl	b560 <z_impl_z_log_msg_static_create>
				out_len -= 2;
    9cce:	3d02      	subs	r5, #2
    9cd0:	46c5      	mov	sp, r8
				continue;
    9cd2:	e7d0      	b.n	9c76 <cbprintf_package_convert+0xe2>
				const char *str = *(const char **)&buf32[*str_pos];
    9cd4:	f818 2b01 	ldrb.w	r2, [r8], #1
    9cd8:	627b      	str	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
    9cda:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
    9cde:	f011 fdb9 	bl	1b854 <strlen>
				if (strl && strl_cnt < strl_len) {
    9ce2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    9ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
    9ce6:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
    9ce8:	b13a      	cbz	r2, 9cfa <cbprintf_package_convert+0x166>
    9cea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    9cee:	4296      	cmp	r6, r2
					strl[strl_cnt++] = (uint16_t)len;
    9cf0:	bf3e      	ittt	cc
    9cf2:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
    9cf4:	f822 0016 	strhcc.w	r0, [r2, r6, lsl #1]
    9cf8:	3601      	addcc	r6, #1
				out_len += len;
    9cfa:	4405      	add	r5, r0
			for (int i = 0; i < ros_nbr; i++) {
    9cfc:	e797      	b.n	9c2e <cbprintf_package_convert+0x9a>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    9cfe:	f01b 0604 	ands.w	r6, fp, #4
	size_t strl_cnt = 0;
    9d02:	bf1c      	itt	ne
    9d04:	6a7e      	ldrne	r6, [r7, #36]	; 0x24
				str_pos += ros_nbr;
    9d06:	44ca      	addne	sl, r9
    9d08:	e7a9      	b.n	9c5e <cbprintf_package_convert+0xca>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    9d0a:	693b      	ldr	r3, [r7, #16]
    9d0c:	b123      	cbz	r3, 9d18 <cbprintf_package_convert+0x184>
    9d0e:	69f8      	ldr	r0, [r7, #28]
    9d10:	f010 f8bb 	bl	19e8a <is_ptr>
    9d14:	2800      	cmp	r0, #0
    9d16:	d1c4      	bne.n	9ca2 <cbprintf_package_convert+0x10e>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    9d18:	f01b 0f01 	tst.w	fp, #1
    9d1c:	d105      	bne.n	9d2a <cbprintf_package_convert+0x196>
					out_len -= drop_ro_str_pos ? 2 : 1;
    9d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9d20:	1aed      	subs	r5, r5, r3
    9d22:	e7a8      	b.n	9c76 <cbprintf_package_convert+0xe2>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    9d24:	6a3b      	ldr	r3, [r7, #32]
    9d26:	2b00      	cmp	r3, #0
    9d28:	d0a5      	beq.n	9c76 <cbprintf_package_convert+0xe2>
		return 1 + strlen(str);
    9d2a:	4640      	mov	r0, r8
    9d2c:	f011 fd92 	bl	1b854 <strlen>
				if (strl && strl_cnt < strl_len) {
    9d30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    9d32:	b143      	cbz	r3, 9d46 <cbprintf_package_convert+0x1b2>
    9d34:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    9d38:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
    9d3a:	bf3f      	itttt	cc
    9d3c:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
		return 1 + strlen(str);
    9d3e:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
    9d40:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
    9d44:	3601      	addcc	r6, #1
				out_len += (len - 1);
    9d46:	4405      	add	r5, r0
		for (int i = 0; i < rws_nbr; i++) {
    9d48:	e795      	b.n	9c76 <cbprintf_package_convert+0xe2>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    9d4a:	f1b9 0f00 	cmp.w	r9, #0
    9d4e:	d072      	beq.n	9e36 <cbprintf_package_convert+0x2a2>
    9d50:	f01b 0604 	ands.w	r6, fp, #4
    9d54:	d072      	beq.n	9e3c <cbprintf_package_convert+0x2a8>
		keep_cnt = ros_nbr;
    9d56:	46c8      	mov	r8, r9
		scpy_cnt = 0;
    9d58:	2600      	movs	r6, #0
		dst = keep_str_pos;
    9d5a:	f107 0040 	add.w	r0, r7, #64	; 0x40
		memcpy(dst, str_pos, ros_nbr);
    9d5e:	464a      	mov	r2, r9
    9d60:	4651      	mov	r1, sl
    9d62:	f011 fdb6 	bl	1b8d2 <memcpy>
	str_pos += ros_nbr;
    9d66:	697b      	ldr	r3, [r7, #20]
    9d68:	44ca      	add	sl, r9
	for (int i = 0; i < rws_nbr; i++) {
    9d6a:	005b      	lsls	r3, r3, #1
    9d6c:	60bb      	str	r3, [r7, #8]
    9d6e:	697b      	ldr	r3, [r7, #20]
    9d70:	eb0a 0343 	add.w	r3, sl, r3, lsl #1
    9d74:	617b      	str	r3, [r7, #20]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    9d76:	f00b 0302 	and.w	r3, fp, #2
    9d7a:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < rws_nbr; i++) {
    9d7c:	697b      	ldr	r3, [r7, #20]
    9d7e:	459a      	cmp	sl, r3
    9d80:	d15e      	bne.n	9e40 <cbprintf_package_convert+0x2ac>
	out_desc.len = in_desc->len;
    9d82:	7823      	ldrb	r3, [r4, #0]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    9d84:	f01b 0f02 	tst.w	fp, #2
	out_desc.len = in_desc->len;
    9d88:	61fb      	str	r3, [r7, #28]
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    9d8a:	7863      	ldrb	r3, [r4, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    9d8c:	bf18      	it	ne
    9d8e:	2100      	movne	r1, #0
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    9d90:	eb06 0203 	add.w	r2, r6, r3
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    9d94:	bf08      	it	eq
    9d96:	ea4f 0158 	moveq.w	r1, r8, lsr #1
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    9d9a:	f01b 0f01 	tst.w	fp, #1
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    9d9e:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    9da0:	f040 809d 	bne.w	9ede <cbprintf_package_convert+0x34a>
    9da4:	f01b 0f04 	tst.w	fp, #4
    9da8:	bf14      	ite	ne
    9daa:	4640      	movne	r0, r8
    9dac:	2000      	moveq	r0, #0
	struct cbprintf_package_desc in_desc_backup = *in_desc;
    9dae:	f894 b002 	ldrb.w	fp, [r4, #2]
    9db2:	f894 a003 	ldrb.w	sl, [r4, #3]
    9db6:	613b      	str	r3, [r7, #16]
	*in_desc = out_desc;
    9db8:	7062      	strb	r2, [r4, #1]
    9dba:	70a0      	strb	r0, [r4, #2]
    9dbc:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
    9dbe:	4620      	mov	r0, r4
    9dc0:	69ba      	ldr	r2, [r7, #24]
    9dc2:	68f9      	ldr	r1, [r7, #12]
    9dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9dc6:	4798      	blx	r3
	if (rv < 0) {
    9dc8:	1e05      	subs	r5, r0, #0
    9dca:	f6ff af10 	blt.w	9bee <cbprintf_package_convert+0x5a>
	*in_desc = in_desc_backup;
    9dce:	69fb      	ldr	r3, [r7, #28]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    9dd0:	4641      	mov	r1, r8
	*in_desc = in_desc_backup;
    9dd2:	7023      	strb	r3, [r4, #0]
    9dd4:	693b      	ldr	r3, [r7, #16]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    9dd6:	69ba      	ldr	r2, [r7, #24]
	*in_desc = in_desc_backup;
    9dd8:	7063      	strb	r3, [r4, #1]
    9dda:	f884 b002 	strb.w	fp, [r4, #2]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    9dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	*in_desc = in_desc_backup;
    9de0:	f884 a003 	strb.w	sl, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    9de4:	f107 0040 	add.w	r0, r7, #64	; 0x40
    9de8:	4798      	blx	r3
	if (rv < 0) {
    9dea:	f1b0 0800 	subs.w	r8, r0, #0
    9dee:	f2c0 80a3 	blt.w	9f38 <cbprintf_package_convert+0x3a4>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    9df2:	6a3b      	ldr	r3, [r7, #32]
	rv = cb(str_pos, strs_len, ctx);
    9df4:	69ba      	ldr	r2, [r7, #24]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    9df6:	eba3 0109 	sub.w	r1, r3, r9
    9dfa:	68fb      	ldr	r3, [r7, #12]
	rv = cb(str_pos, strs_len, ctx);
    9dfc:	6978      	ldr	r0, [r7, #20]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    9dfe:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
    9e00:	68bb      	ldr	r3, [r7, #8]
    9e02:	1ac9      	subs	r1, r1, r3
    9e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9e06:	4798      	blx	r3
	if (rv < 0) {
    9e08:	2800      	cmp	r0, #0
    9e0a:	f2c0 8097 	blt.w	9f3c <cbprintf_package_convert+0x3a8>
	for (int i = 0; i < scpy_cnt; i++) {
    9e0e:	f04f 0b00 	mov.w	fp, #0
	out_len += rv;
    9e12:	44a8      	add	r8, r5
	out_len += rv;
    9e14:	eb08 0500 	add.w	r5, r8, r0
		uint8_t loc = cpy_str_pos[i];
    9e18:	f107 0a30 	add.w	sl, r7, #48	; 0x30
	for (int i = 0; i < scpy_cnt; i++) {
    9e1c:	45b3      	cmp	fp, r6
    9e1e:	db60      	blt.n	9ee2 <cbprintf_package_convert+0x34e>
	(void)cb(NULL, 0, ctx);
    9e20:	2100      	movs	r1, #0
    9e22:	69ba      	ldr	r2, [r7, #24]
    9e24:	4608      	mov	r0, r1
    9e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9e28:	4798      	blx	r3
	return out_len;
    9e2a:	e6e0      	b.n	9bee <cbprintf_package_convert+0x5a>
	if (cb == NULL) {
    9e2c:	f04f 0800 	mov.w	r8, #0
    9e30:	f107 0030 	add.w	r0, r7, #48	; 0x30
    9e34:	e793      	b.n	9d5e <cbprintf_package_convert+0x1ca>
		scpy_cnt = 0;
    9e36:	464e      	mov	r6, r9
		keep_cnt = 0;
    9e38:	46c8      	mov	r8, r9
    9e3a:	e794      	b.n	9d66 <cbprintf_package_convert+0x1d2>
    9e3c:	46b0      	mov	r8, r6
    9e3e:	e792      	b.n	9d66 <cbprintf_package_convert+0x1d2>
		uint8_t arg_idx = *str_pos++;
    9e40:	f81a 1b02 	ldrb.w	r1, [sl], #2
    9e44:	4a3e      	ldr	r2, [pc, #248]	; (9f40 <cbprintf_package_convert+0x3ac>)
		uint8_t arg_pos = *str_pos++;
    9e46:	f81a 5c01 	ldrb.w	r5, [sl, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
    9e4a:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
    9e4e:	4293      	cmp	r3, r2
    9e50:	d302      	bcc.n	9e58 <cbprintf_package_convert+0x2c4>
    9e52:	4a3c      	ldr	r2, [pc, #240]	; (9f44 <cbprintf_package_convert+0x3b0>)
    9e54:	4293      	cmp	r3, r2
    9e56:	d31c      	bcc.n	9e92 <cbprintf_package_convert+0x2fe>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    9e58:	693b      	ldr	r3, [r7, #16]
    9e5a:	b123      	cbz	r3, 9e66 <cbprintf_package_convert+0x2d2>
    9e5c:	69f8      	ldr	r0, [r7, #28]
    9e5e:	f010 f814 	bl	19e8a <is_ptr>
    9e62:	2800      	cmp	r0, #0
    9e64:	d18a      	bne.n	9d7c <cbprintf_package_convert+0x1e8>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    9e66:	687b      	ldr	r3, [r7, #4]
    9e68:	b9f3      	cbnz	r3, 9ea8 <cbprintf_package_convert+0x314>
				keep_str_pos[keep_cnt++] = arg_idx;
    9e6a:	f108 0228 	add.w	r2, r8, #40	; 0x28
    9e6e:	f107 0028 	add.w	r0, r7, #40	; 0x28
    9e72:	4402      	add	r2, r0
    9e74:	f108 0301 	add.w	r3, r8, #1
    9e78:	f802 1c10 	strb.w	r1, [r2, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
    9e7c:	f107 0250 	add.w	r2, r7, #80	; 0x50
    9e80:	f108 0802 	add.w	r8, r8, #2
    9e84:	fa52 f383 	uxtab	r3, r2, r3
    9e88:	fa5f f888 	uxtb.w	r8, r8
    9e8c:	f803 5c10 	strb.w	r5, [r3, #-16]
	for (int i = 0; i < rws_nbr; i++) {
    9e90:	e774      	b.n	9d7c <cbprintf_package_convert+0x1e8>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    9e92:	693b      	ldr	r3, [r7, #16]
    9e94:	b12b      	cbz	r3, 9ea2 <cbprintf_package_convert+0x30e>
    9e96:	69f8      	ldr	r0, [r7, #28]
    9e98:	f00f fff7 	bl	19e8a <is_ptr>
    9e9c:	2800      	cmp	r0, #0
    9e9e:	f47f af6d 	bne.w	9d7c <cbprintf_package_convert+0x1e8>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    9ea2:	f01b 0f01 	tst.w	fp, #1
    9ea6:	d009      	beq.n	9ebc <cbprintf_package_convert+0x328>
				cpy_str_pos[scpy_cnt++] = arg_pos;
    9ea8:	f106 0228 	add.w	r2, r6, #40	; 0x28
    9eac:	f107 0128 	add.w	r1, r7, #40	; 0x28
    9eb0:	1c73      	adds	r3, r6, #1
    9eb2:	1856      	adds	r6, r2, r1
    9eb4:	f806 5c20 	strb.w	r5, [r6, #-32]
    9eb8:	b2de      	uxtb	r6, r3
    9eba:	e75f      	b.n	9d7c <cbprintf_package_convert+0x1e8>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    9ebc:	f01b 0f04 	tst.w	fp, #4
    9ec0:	f43f af5c 	beq.w	9d7c <cbprintf_package_convert+0x1e8>
				keep_str_pos[keep_cnt++] = arg_pos;
    9ec4:	f108 0228 	add.w	r2, r8, #40	; 0x28
    9ec8:	f107 0128 	add.w	r1, r7, #40	; 0x28
    9ecc:	f108 0301 	add.w	r3, r8, #1
    9ed0:	eb02 0801 	add.w	r8, r2, r1
    9ed4:	f808 5c10 	strb.w	r5, [r8, #-16]
    9ed8:	fa5f f883 	uxtb.w	r8, r3
    9edc:	e74e      	b.n	9d7c <cbprintf_package_convert+0x1e8>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    9ede:	2000      	movs	r0, #0
    9ee0:	e765      	b.n	9dae <cbprintf_package_convert+0x21a>
		uint8_t loc = cpy_str_pos[i];
    9ee2:	f81b 300a 	ldrb.w	r3, [fp, sl]
		const char *str = *(const char **)&buf32[loc];
    9ee6:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint8_t loc = cpy_str_pos[i];
    9eea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		uint16_t str_len = strl ? strl[i] : 0;
    9eee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    9ef0:	b1fb      	cbz	r3, 9f32 <cbprintf_package_convert+0x39e>
    9ef2:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
    9ef6:	2101      	movs	r1, #1
    9ef8:	69ba      	ldr	r2, [r7, #24]
    9efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9efc:	f107 002f 	add.w	r0, r7, #47	; 0x2f
    9f00:	4798      	blx	r3
		if (rv < 0) {
    9f02:	2800      	cmp	r0, #0
    9f04:	db1a      	blt.n	9f3c <cbprintf_package_convert+0x3a8>
		out_len += rv;
    9f06:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
    9f08:	f1b8 0f00 	cmp.w	r8, #0
    9f0c:	d106      	bne.n	9f1c <cbprintf_package_convert+0x388>
    9f0e:	4648      	mov	r0, r9
    9f10:	f011 fca0 	bl	1b854 <strlen>
    9f14:	f100 0801 	add.w	r8, r0, #1
    9f18:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
    9f1c:	4641      	mov	r1, r8
    9f1e:	4648      	mov	r0, r9
    9f20:	69ba      	ldr	r2, [r7, #24]
    9f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9f24:	4798      	blx	r3
		if (rv < 0) {
    9f26:	2800      	cmp	r0, #0
    9f28:	db08      	blt.n	9f3c <cbprintf_package_convert+0x3a8>
		out_len += rv;
    9f2a:	4405      	add	r5, r0
	for (int i = 0; i < scpy_cnt; i++) {
    9f2c:	f10b 0b01 	add.w	fp, fp, #1
    9f30:	e774      	b.n	9e1c <cbprintf_package_convert+0x288>
		uint16_t str_len = strl ? strl[i] : 0;
    9f32:	f8d7 807c 	ldr.w	r8, [r7, #124]	; 0x7c
    9f36:	e7de      	b.n	9ef6 <cbprintf_package_convert+0x362>
    9f38:	4645      	mov	r5, r8
    9f3a:	e658      	b.n	9bee <cbprintf_package_convert+0x5a>
    9f3c:	4605      	mov	r5, r0
    9f3e:	e656      	b.n	9bee <cbprintf_package_convert+0x5a>
    9f40:	0001f728 	.word	0x0001f728
    9f44:	00023fbc 	.word	0x00023fbc
    9f48:	00020b8b 	.word	0x00020b8b
    9f4c:	00020c32 	.word	0x00020c32
    9f50:	01000005 	.word	0x01000005
    9f54:	0001fcac 	.word	0x0001fcac

00009f58 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
    9f58:	4b01      	ldr	r3, [pc, #4]	; (9f60 <char_out+0x8>)
    9f5a:	681b      	ldr	r3, [r3, #0]
    9f5c:	4718      	bx	r3
    9f5e:	bf00      	nop
    9f60:	200082dc 	.word	0x200082dc

00009f64 <__printk_hook_install>:
	_char_out = fn;
    9f64:	4b01      	ldr	r3, [pc, #4]	; (9f6c <__printk_hook_install+0x8>)
    9f66:	6018      	str	r0, [r3, #0]
}
    9f68:	4770      	bx	lr
    9f6a:	bf00      	nop
    9f6c:	200082dc 	.word	0x200082dc

00009f70 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    9f70:	b507      	push	{r0, r1, r2, lr}
    9f72:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    9f74:	2100      	movs	r1, #0
    9f76:	4602      	mov	r2, r0
    9f78:	9100      	str	r1, [sp, #0]
    9f7a:	4803      	ldr	r0, [pc, #12]	; (9f88 <vprintk+0x18>)
    9f7c:	f000 f92a 	bl	a1d4 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    9f80:	b003      	add	sp, #12
    9f82:	f85d fb04 	ldr.w	pc, [sp], #4
    9f86:	bf00      	nop
    9f88:	00009f59 	.word	0x00009f59

00009f8c <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    9f8c:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    9f8e:	2500      	movs	r5, #0
{
    9f90:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
    9f92:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
    9f96:	4604      	mov	r4, r0
    9f98:	9500      	str	r5, [sp, #0]
    9f9a:	a903      	add	r1, sp, #12
    9f9c:	4805      	ldr	r0, [pc, #20]	; (9fb4 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
    9f9e:	9505      	str	r5, [sp, #20]
    9fa0:	f000 f918 	bl	a1d4 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
    9fa4:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
    9fa8:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    9faa:	bfb8      	it	lt
    9fac:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    9fae:	b007      	add	sp, #28
    9fb0:	bd30      	pop	{r4, r5, pc}
    9fb2:	bf00      	nop
    9fb4:	00019ed9 	.word	0x00019ed9

00009fb8 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    9fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9fbc:	8b05      	ldrh	r5, [r0, #24]
{
    9fbe:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    9fc0:	0728      	lsls	r0, r5, #28
{
    9fc2:	4690      	mov	r8, r2
	if (processing) {
    9fc4:	d411      	bmi.n	9fea <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    9fc6:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9fc8:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    9fcc:	f040 80cd 	bne.w	a16a <process_event+0x1b2>
			evt = process_recheck(mgr);
    9fd0:	4620      	mov	r0, r4
    9fd2:	f010 f97d 	bl	1a2d0 <process_recheck>
		}

		if (evt == EVT_NOP) {
    9fd6:	b178      	cbz	r0, 9ff8 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    9fd8:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9fda:	8b21      	ldrh	r1, [r4, #24]
    9fdc:	2804      	cmp	r0, #4
    9fde:	d811      	bhi.n	a004 <process_event+0x4c>
    9fe0:	e8df f000 	tbb	[pc, r0]
    9fe4:	856d10c3 	.word	0x856d10c3
    9fe8:	95          	.byte	0x95
    9fe9:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
    9fea:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    9fec:	bf0c      	ite	eq
    9fee:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    9ff2:	f045 0520 	orrne.w	r5, r5, #32
    9ff6:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    9ff8:	f388 8811 	msr	BASEPRI, r8
    9ffc:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    a000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    a004:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    a008:	45aa      	cmp	sl, r5
    a00a:	f000 80a6 	beq.w	a15a <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
    a00e:	2700      	movs	r7, #0
    a010:	46b9      	mov	r9, r7
    a012:	463e      	mov	r6, r7
    a014:	68a3      	ldr	r3, [r4, #8]
    a016:	2b00      	cmp	r3, #0
    a018:	f000 80bd 	beq.w	a196 <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    a01c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    a020:	8321      	strh	r1, [r4, #24]
    a022:	f388 8811 	msr	BASEPRI, r8
    a026:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    a02a:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    a02c:	2900      	cmp	r1, #0
    a02e:	f000 80bb 	beq.w	a1a8 <process_event+0x1f0>
	return node->next;
    a032:	680d      	ldr	r5, [r1, #0]
    a034:	2900      	cmp	r1, #0
    a036:	f000 80b7 	beq.w	a1a8 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
    a03a:	4633      	mov	r3, r6
    a03c:	4652      	mov	r2, sl
    a03e:	4620      	mov	r0, r4
    a040:	f8d1 8004 	ldr.w	r8, [r1, #4]
    a044:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    a046:	2d00      	cmp	r5, #0
    a048:	d076      	beq.n	a138 <process_event+0x180>
    a04a:	682b      	ldr	r3, [r5, #0]
    a04c:	4629      	mov	r1, r5
    a04e:	461d      	mov	r5, r3
    a050:	e7f0      	b.n	a034 <process_event+0x7c>
    a052:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    a056:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    a058:	2a01      	cmp	r2, #1
    a05a:	d81b      	bhi.n	a094 <process_event+0xdc>
	list->head = NULL;
    a05c:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a05e:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    a062:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    a064:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a066:	b289      	uxth	r1, r1
	list->tail = NULL;
    a068:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    a06c:	d109      	bne.n	a082 <process_event+0xca>
    a06e:	463b      	mov	r3, r7
    a070:	e003      	b.n	a07a <process_event+0xc2>
				mgr->refs += 1U;
    a072:	8b62      	ldrh	r2, [r4, #26]
    a074:	3201      	adds	r2, #1
    a076:	8362      	strh	r2, [r4, #26]
	return node->next;
    a078:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    a07a:	2b00      	cmp	r3, #0
    a07c:	d1f9      	bne.n	a072 <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a07e:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
    a082:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    a084:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    a086:	f010 f923 	bl	1a2d0 <process_recheck>
    a08a:	2800      	cmp	r0, #0
    a08c:	d07b      	beq.n	a186 <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    a08e:	f041 0120 	orr.w	r1, r1, #32
    a092:	e077      	b.n	a184 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
    a094:	2b04      	cmp	r3, #4
    a096:	d10a      	bne.n	a0ae <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a098:	f021 0107 	bic.w	r1, r1, #7
    a09c:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
    a09e:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    a0a0:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    a0a2:	f010 f915 	bl	1a2d0 <process_recheck>
    a0a6:	b110      	cbz	r0, a0ae <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    a0a8:	f041 0120 	orr.w	r1, r1, #32
    a0ac:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    a0ae:	8b21      	ldrh	r1, [r4, #24]
    a0b0:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    a0b4:	45aa      	cmp	sl, r5
    a0b6:	d050      	beq.n	a15a <process_event+0x1a2>
    a0b8:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
    a0ba:	46b9      	mov	r9, r7
    a0bc:	e7aa      	b.n	a014 <process_event+0x5c>
			transit = mgr->transitions->start;
    a0be:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a0c0:	f021 0107 	bic.w	r1, r1, #7
    a0c4:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    a0c8:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
    a0ca:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
    a0ce:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    a0d0:	d12d      	bne.n	a12e <process_event+0x176>
		    || (transit != NULL)) {
    a0d2:	f1b9 0f00 	cmp.w	r9, #0
    a0d6:	d040      	beq.n	a15a <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    a0d8:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    a0dc:	8321      	strh	r1, [r4, #24]
    a0de:	f388 8811 	msr	BASEPRI, r8
    a0e2:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
    a0e6:	4620      	mov	r0, r4
    a0e8:	4939      	ldr	r1, [pc, #228]	; (a1d0 <process_event+0x218>)
    a0ea:	47c8      	blx	r9
    a0ec:	e029      	b.n	a142 <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a0ee:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
    a0f2:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a0f4:	f041 0104 	orr.w	r1, r1, #4
    a0f8:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    a0fa:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
    a0fc:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
    a100:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    a102:	d0e6      	beq.n	a0d2 <process_event+0x11a>
    a104:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    a106:	f04f 0a04 	mov.w	sl, #4
		res = 0;
    a10a:	463e      	mov	r6, r7
    a10c:	e782      	b.n	a014 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a10e:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
    a112:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a114:	f041 0105 	orr.w	r1, r1, #5
    a118:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    a11a:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
    a11c:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
    a120:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    a122:	d0d6      	beq.n	a0d2 <process_event+0x11a>
    a124:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    a126:	f04f 0a05 	mov.w	sl, #5
		res = 0;
    a12a:	463e      	mov	r6, r7
    a12c:	e772      	b.n	a014 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
    a12e:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    a130:	f04f 0a06 	mov.w	sl, #6
		res = 0;
    a134:	463e      	mov	r6, r7
    a136:	e76d      	b.n	a014 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    a138:	462b      	mov	r3, r5
    a13a:	e787      	b.n	a04c <process_event+0x94>
			if (transit != NULL) {
    a13c:	f1b9 0f00 	cmp.w	r9, #0
    a140:	d1d1      	bne.n	a0e6 <process_event+0x12e>
	__asm__ volatile(
    a142:	f04f 0320 	mov.w	r3, #32
    a146:	f3ef 8811 	mrs	r8, BASEPRI
    a14a:	f383 8812 	msr	BASEPRI_MAX, r3
    a14e:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    a152:	8b23      	ldrh	r3, [r4, #24]
    a154:	f023 0308 	bic.w	r3, r3, #8
    a158:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    a15a:	8b25      	ldrh	r5, [r4, #24]
    a15c:	06ea      	lsls	r2, r5, #27
    a15e:	d52e      	bpl.n	a1be <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    a160:	f025 0310 	bic.w	r3, r5, #16
    a164:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    a166:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
    a16a:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a16c:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    a16e:	2e00      	cmp	r6, #0
    a170:	f6bf af6f 	bge.w	a052 <process_event+0x9a>
	list->head = NULL;
    a174:	2300      	movs	r3, #0
		*clients = mgr->clients;
    a176:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    a178:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a17c:	f021 0107 	bic.w	r1, r1, #7
    a180:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
    a184:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    a186:	8b21      	ldrh	r1, [r4, #24]
    a188:	f04f 0900 	mov.w	r9, #0
    a18c:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    a190:	45aa      	cmp	sl, r5
    a192:	f47f af3f 	bne.w	a014 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
    a196:	2f00      	cmp	r7, #0
    a198:	d09b      	beq.n	a0d2 <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    a19a:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    a19e:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
    a1a0:	f388 8811 	msr	BASEPRI, r8
    a1a4:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
    a1a8:	2f00      	cmp	r7, #0
    a1aa:	d0c7      	beq.n	a13c <process_event+0x184>
	return node->next;
    a1ac:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
    a1ae:	4639      	mov	r1, r7
    a1b0:	4633      	mov	r3, r6
    a1b2:	4652      	mov	r2, sl
    a1b4:	4620      	mov	r0, r4
    a1b6:	f010 f8b7 	bl	1a328 <notify_one>
	list->head = node;
    a1ba:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
    a1bc:	e7f4      	b.n	a1a8 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    a1be:	06ab      	lsls	r3, r5, #26
    a1c0:	f57f af1a 	bpl.w	9ff8 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    a1c4:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    a1c8:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    a1ca:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    a1ce:	e6ff      	b.n	9fd0 <process_event+0x18>
    a1d0:	0001a355 	.word	0x0001a355

0000a1d4 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    a1d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a1d8:	4682      	mov	sl, r0
    a1da:	4616      	mov	r6, r2
    a1dc:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    a1de:	2500      	movs	r5, #0
{
    a1e0:	b09f      	sub	sp, #124	; 0x7c
    a1e2:	9103      	str	r1, [sp, #12]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    a1e4:	7830      	ldrb	r0, [r6, #0]
    a1e6:	b910      	cbnz	r0, a1ee <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    a1e8:	4628      	mov	r0, r5
    a1ea:	f000 bd89 	b.w	ad00 <z_cbvprintf_impl+0xb2c>
			OUTC(*fp++);
    a1ee:	1c73      	adds	r3, r6, #1
		if (*fp != '%') {
    a1f0:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    a1f2:	9306      	str	r3, [sp, #24]
		if (*fp != '%') {
    a1f4:	d006      	beq.n	a204 <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
    a1f6:	9903      	ldr	r1, [sp, #12]
			OUTC('%');
    a1f8:	47d0      	blx	sl
    a1fa:	2800      	cmp	r0, #0
    a1fc:	f2c0 8580 	blt.w	ad00 <z_cbvprintf_impl+0xb2c>
    a200:	3501      	adds	r5, #1
		if (bps == NULL) {
    a202:	e22b      	b.n	a65c <z_cbvprintf_impl+0x488>
		} state = {
    a204:	2218      	movs	r2, #24
    a206:	2100      	movs	r1, #0
    a208:	a810      	add	r0, sp, #64	; 0x40
    a20a:	f011 fb6d 	bl	1b8e8 <memset>
	if (*sp == '%') {
    a20e:	7873      	ldrb	r3, [r6, #1]
    a210:	2b25      	cmp	r3, #37	; 0x25
    a212:	d07d      	beq.n	a310 <z_cbvprintf_impl+0x13c>
    a214:	2300      	movs	r3, #0
    a216:	4698      	mov	r8, r3
    a218:	469e      	mov	lr, r3
    a21a:	469c      	mov	ip, r3
    a21c:	461f      	mov	r7, r3
    a21e:	1c70      	adds	r0, r6, #1
    a220:	4601      	mov	r1, r0
		switch (*sp) {
    a222:	f810 2b01 	ldrb.w	r2, [r0], #1
    a226:	2a2b      	cmp	r2, #43	; 0x2b
    a228:	f000 80a1 	beq.w	a36e <z_cbvprintf_impl+0x19a>
    a22c:	f200 8098 	bhi.w	a360 <z_cbvprintf_impl+0x18c>
    a230:	2a20      	cmp	r2, #32
    a232:	f000 809f 	beq.w	a374 <z_cbvprintf_impl+0x1a0>
    a236:	2a23      	cmp	r2, #35	; 0x23
    a238:	f000 809f 	beq.w	a37a <z_cbvprintf_impl+0x1a6>
    a23c:	b12b      	cbz	r3, a24a <z_cbvprintf_impl+0x76>
    a23e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    a242:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a246:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    a24a:	f1b8 0f00 	cmp.w	r8, #0
    a24e:	d005      	beq.n	a25c <z_cbvprintf_impl+0x88>
    a250:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    a254:	f043 0320 	orr.w	r3, r3, #32
    a258:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    a25c:	f1be 0f00 	cmp.w	lr, #0
    a260:	d005      	beq.n	a26e <z_cbvprintf_impl+0x9a>
    a262:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    a266:	f043 0310 	orr.w	r3, r3, #16
    a26a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    a26e:	f1bc 0f00 	cmp.w	ip, #0
    a272:	d005      	beq.n	a280 <z_cbvprintf_impl+0xac>
    a274:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    a278:	f043 0308 	orr.w	r3, r3, #8
    a27c:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    a280:	b12f      	cbz	r7, a28e <z_cbvprintf_impl+0xba>
    a282:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    a286:	f043 0304 	orr.w	r3, r3, #4
    a28a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
    a28e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    a292:	f003 0044 	and.w	r0, r3, #68	; 0x44
    a296:	2844      	cmp	r0, #68	; 0x44
    a298:	d103      	bne.n	a2a2 <z_cbvprintf_impl+0xce>
		conv->flag_zero = false;
    a29a:	f36f 1386 	bfc	r3, #6, #1
    a29e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
    a2a2:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    a2a6:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    a2a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    a2ac:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    a2b0:	d17f      	bne.n	a3b2 <z_cbvprintf_impl+0x1de>
		conv->width_star = true;
    a2b2:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
		return ++sp;
    a2b6:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    a2b8:	f042 0201 	orr.w	r2, r2, #1
    a2bc:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	conv->prec_present = (*sp == '.');
    a2c0:	781a      	ldrb	r2, [r3, #0]
    a2c2:	2a2e      	cmp	r2, #46	; 0x2e
    a2c4:	bf0c      	ite	eq
    a2c6:	2101      	moveq	r1, #1
    a2c8:	2100      	movne	r1, #0
    a2ca:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    a2ce:	f361 0241 	bfi	r2, r1, #1, #1
    a2d2:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
    a2d6:	d178      	bne.n	a3ca <z_cbvprintf_impl+0x1f6>
	if (*sp == '*') {
    a2d8:	785a      	ldrb	r2, [r3, #1]
    a2da:	2a2a      	cmp	r2, #42	; 0x2a
    a2dc:	d06e      	beq.n	a3bc <z_cbvprintf_impl+0x1e8>
	size_t val = 0;
    a2de:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    a2e0:	f04f 0c0a 	mov.w	ip, #10
	++sp;
    a2e4:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    a2e6:	4619      	mov	r1, r3
    a2e8:	f811 0b01 	ldrb.w	r0, [r1], #1
    a2ec:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    a2f0:	2f09      	cmp	r7, #9
    a2f2:	f240 80af 	bls.w	a454 <z_cbvprintf_impl+0x280>
	conv->unsupported |= ((conv->prec_value < 0)
    a2f6:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
	conv->prec_value = prec;
    a2fa:	9214      	str	r2, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
    a2fc:	f3c1 0040 	ubfx	r0, r1, #1, #1
    a300:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
    a304:	460a      	mov	r2, r1
    a306:	f360 0241 	bfi	r2, r0, #1, #1
    a30a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
    a30e:	e05c      	b.n	a3ca <z_cbvprintf_impl+0x1f6>
		conv->specifier = *sp++;
    a310:	1cb2      	adds	r2, r6, #2
    a312:	9206      	str	r2, [sp, #24]
    a314:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
    a318:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    a31c:	07df      	lsls	r7, r3, #31
    a31e:	f140 8154 	bpl.w	a5ca <z_cbvprintf_impl+0x3f6>
			width = va_arg(ap, int);
    a322:	f854 2b04 	ldr.w	r2, [r4], #4
			if (width < 0) {
    a326:	2a00      	cmp	r2, #0
			width = va_arg(ap, int);
    a328:	9204      	str	r2, [sp, #16]
			if (width < 0) {
    a32a:	da08      	bge.n	a33e <z_cbvprintf_impl+0x16a>
				conv->flag_dash = true;
    a32c:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    a330:	f042 0204 	orr.w	r2, r2, #4
    a334:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				width = -width;
    a338:	9a04      	ldr	r2, [sp, #16]
    a33a:	4252      	negs	r2, r2
		int width = -1;
    a33c:	9204      	str	r2, [sp, #16]
		if (conv->prec_star) {
    a33e:	0758      	lsls	r0, r3, #29
    a340:	f140 814b 	bpl.w	a5da <z_cbvprintf_impl+0x406>
			int arg = va_arg(ap, int);
    a344:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
    a348:	2f00      	cmp	r7, #0
    a34a:	f280 814a 	bge.w	a5e2 <z_cbvprintf_impl+0x40e>
				conv->prec_present = false;
    a34e:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    a352:	f36f 0341 	bfc	r3, #1, #1
    a356:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
    a35a:	f04f 37ff 	mov.w	r7, #4294967295
    a35e:	e140      	b.n	a5e2 <z_cbvprintf_impl+0x40e>
		switch (*sp) {
    a360:	2a2d      	cmp	r2, #45	; 0x2d
    a362:	d00d      	beq.n	a380 <z_cbvprintf_impl+0x1ac>
    a364:	2a30      	cmp	r2, #48	; 0x30
    a366:	f47f af69 	bne.w	a23c <z_cbvprintf_impl+0x68>
    a36a:	2301      	movs	r3, #1
	} while (loop);
    a36c:	e758      	b.n	a220 <z_cbvprintf_impl+0x4c>
		switch (*sp) {
    a36e:	f04f 0c01 	mov.w	ip, #1
    a372:	e755      	b.n	a220 <z_cbvprintf_impl+0x4c>
    a374:	f04f 0e01 	mov.w	lr, #1
    a378:	e752      	b.n	a220 <z_cbvprintf_impl+0x4c>
    a37a:	f04f 0801 	mov.w	r8, #1
    a37e:	e74f      	b.n	a220 <z_cbvprintf_impl+0x4c>
    a380:	2701      	movs	r7, #1
    a382:	e74d      	b.n	a220 <z_cbvprintf_impl+0x4c>
		val = 10U * val + *sp++ - '0';
    a384:	4603      	mov	r3, r0
    a386:	fb0e 7202 	mla	r2, lr, r2, r7
    a38a:	3a30      	subs	r2, #48	; 0x30
    a38c:	4618      	mov	r0, r3
    a38e:	f810 7b01 	ldrb.w	r7, [r0], #1
    a392:	f1a7 0c30 	sub.w	ip, r7, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    a396:	f1bc 0f09 	cmp.w	ip, #9
    a39a:	d9f3      	bls.n	a384 <z_cbvprintf_impl+0x1b0>
	if (sp != wp) {
    a39c:	4299      	cmp	r1, r3
    a39e:	d08f      	beq.n	a2c0 <z_cbvprintf_impl+0xec>
		conv->unsupported |= ((conv->width_value < 0)
    a3a0:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
		conv->width_value = width;
    a3a4:	9213      	str	r2, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
    a3a6:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    a3a8:	f362 0141 	bfi	r1, r2, #1, #1
    a3ac:	f88d 1048 	strb.w	r1, [sp, #72]	; 0x48
    a3b0:	e786      	b.n	a2c0 <z_cbvprintf_impl+0xec>
    a3b2:	460b      	mov	r3, r1
	size_t val = 0;
    a3b4:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    a3b6:	f04f 0e0a 	mov.w	lr, #10
    a3ba:	e7e7      	b.n	a38c <z_cbvprintf_impl+0x1b8>
		conv->prec_star = true;
    a3bc:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
		return ++sp;
    a3c0:	3302      	adds	r3, #2
		conv->prec_star = true;
    a3c2:	f042 0204 	orr.w	r2, r2, #4
    a3c6:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	switch (*sp) {
    a3ca:	781a      	ldrb	r2, [r3, #0]
    a3cc:	2a6c      	cmp	r2, #108	; 0x6c
    a3ce:	d061      	beq.n	a494 <z_cbvprintf_impl+0x2c0>
    a3d0:	d845      	bhi.n	a45e <z_cbvprintf_impl+0x28a>
    a3d2:	2a68      	cmp	r2, #104	; 0x68
    a3d4:	d04b      	beq.n	a46e <z_cbvprintf_impl+0x29a>
    a3d6:	2a6a      	cmp	r2, #106	; 0x6a
    a3d8:	d065      	beq.n	a4a6 <z_cbvprintf_impl+0x2d2>
    a3da:	2a4c      	cmp	r2, #76	; 0x4c
    a3dc:	d06b      	beq.n	a4b6 <z_cbvprintf_impl+0x2e2>
	conv->specifier = *sp++;
    a3de:	f813 2b01 	ldrb.w	r2, [r3], #1
	switch (conv->specifier) {
    a3e2:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    a3e4:	9306      	str	r3, [sp, #24]
    a3e6:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
	switch (conv->specifier) {
    a3ea:	f200 80ad 	bhi.w	a548 <z_cbvprintf_impl+0x374>
    a3ee:	2a6d      	cmp	r2, #109	; 0x6d
    a3f0:	d86e      	bhi.n	a4d0 <z_cbvprintf_impl+0x2fc>
    a3f2:	2a69      	cmp	r2, #105	; 0x69
    a3f4:	f200 80a8 	bhi.w	a548 <z_cbvprintf_impl+0x374>
    a3f8:	2a57      	cmp	r2, #87	; 0x57
    a3fa:	f200 8088 	bhi.w	a50e <z_cbvprintf_impl+0x33a>
    a3fe:	2a41      	cmp	r2, #65	; 0x41
    a400:	d004      	beq.n	a40c <z_cbvprintf_impl+0x238>
    a402:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    a406:	2b02      	cmp	r3, #2
    a408:	f200 809e 	bhi.w	a548 <z_cbvprintf_impl+0x374>
		conv->specifier_cat = SPECIFIER_FP;
    a40c:	2104      	movs	r1, #4
    a40e:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			|| (conv->specifier == 'A');
    a412:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    a416:	f1a2 0841 	sub.w	r8, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
    a41a:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
    a41e:	f1d8 0200 	rsbs	r2, r8, #0
		conv->specifier_a = (conv->specifier == 'a')
    a422:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
			|| (conv->specifier == 'A');
    a426:	eb42 0208 	adc.w	r2, r2, r8
		conv->specifier_a = (conv->specifier == 'a')
    a42a:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
    a42e:	060a      	lsls	r2, r1, #24
		conv->specifier_cat = SPECIFIER_FP;
    a430:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		conv->specifier_a = (conv->specifier == 'a')
    a434:	f88d 1049 	strb.w	r1, [sp, #73]	; 0x49
		if (conv->specifier_a
    a438:	b2cb      	uxtb	r3, r1
    a43a:	f100 80c4 	bmi.w	a5c6 <z_cbvprintf_impl+0x3f2>
		if (conv->length_mod == LENGTH_L) {
    a43e:	f003 0278 	and.w	r2, r3, #120	; 0x78
    a442:	2a18      	cmp	r2, #24
    a444:	f040 80ae 	bne.w	a5a4 <z_cbvprintf_impl+0x3d0>
			conv->length_mod = LENGTH_NONE;
    a448:	f36f 03c6 	bfc	r3, #3, #4
    a44c:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
	bool unsupported = false;
    a450:	2300      	movs	r3, #0
    a452:	e09d      	b.n	a590 <z_cbvprintf_impl+0x3bc>
		val = 10U * val + *sp++ - '0';
    a454:	fb0c 0202 	mla	r2, ip, r2, r0
    a458:	460b      	mov	r3, r1
    a45a:	3a30      	subs	r2, #48	; 0x30
    a45c:	e743      	b.n	a2e6 <z_cbvprintf_impl+0x112>
	switch (*sp) {
    a45e:	2a74      	cmp	r2, #116	; 0x74
    a460:	d025      	beq.n	a4ae <z_cbvprintf_impl+0x2da>
    a462:	2a7a      	cmp	r2, #122	; 0x7a
    a464:	d1bb      	bne.n	a3de <z_cbvprintf_impl+0x20a>
		conv->length_mod = LENGTH_Z;
    a466:	2106      	movs	r1, #6
    a468:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    a46c:	e00c      	b.n	a488 <z_cbvprintf_impl+0x2b4>
		if (*++sp == 'h') {
    a46e:	785a      	ldrb	r2, [r3, #1]
    a470:	2a68      	cmp	r2, #104	; 0x68
    a472:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    a476:	d106      	bne.n	a486 <z_cbvprintf_impl+0x2b2>
			conv->length_mod = LENGTH_HH;
    a478:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    a47a:	f361 02c6 	bfi	r2, r1, #3, #4
    a47e:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
    a482:	3302      	adds	r3, #2
    a484:	e7ab      	b.n	a3de <z_cbvprintf_impl+0x20a>
			conv->length_mod = LENGTH_H;
    a486:	2102      	movs	r1, #2
    a488:	f361 02c6 	bfi	r2, r1, #3, #4
    a48c:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
    a490:	3301      	adds	r3, #1
    a492:	e7a4      	b.n	a3de <z_cbvprintf_impl+0x20a>
		if (*++sp == 'l') {
    a494:	785a      	ldrb	r2, [r3, #1]
    a496:	2a6c      	cmp	r2, #108	; 0x6c
    a498:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    a49c:	d101      	bne.n	a4a2 <z_cbvprintf_impl+0x2ce>
			conv->length_mod = LENGTH_LL;
    a49e:	2104      	movs	r1, #4
    a4a0:	e7eb      	b.n	a47a <z_cbvprintf_impl+0x2a6>
			conv->length_mod = LENGTH_L;
    a4a2:	2103      	movs	r1, #3
    a4a4:	e7f0      	b.n	a488 <z_cbvprintf_impl+0x2b4>
		conv->length_mod = LENGTH_J;
    a4a6:	2105      	movs	r1, #5
    a4a8:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    a4ac:	e7ec      	b.n	a488 <z_cbvprintf_impl+0x2b4>
		conv->length_mod = LENGTH_T;
    a4ae:	2107      	movs	r1, #7
    a4b0:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    a4b4:	e7e8      	b.n	a488 <z_cbvprintf_impl+0x2b4>
		conv->unsupported = true;
    a4b6:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
    a4ba:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    a4be:	f022 0202 	bic.w	r2, r2, #2
    a4c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    a4c6:	f042 0202 	orr.w	r2, r2, #2
    a4ca:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
    a4ce:	e7df      	b.n	a490 <z_cbvprintf_impl+0x2bc>
	switch (conv->specifier) {
    a4d0:	3a6e      	subs	r2, #110	; 0x6e
    a4d2:	b2d3      	uxtb	r3, r2
    a4d4:	2201      	movs	r2, #1
    a4d6:	409a      	lsls	r2, r3
    a4d8:	f240 4382 	movw	r3, #1154	; 0x482
    a4dc:	421a      	tst	r2, r3
    a4de:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    a4e2:	d138      	bne.n	a556 <z_cbvprintf_impl+0x382>
    a4e4:	f012 0f24 	tst.w	r2, #36	; 0x24
    a4e8:	d160      	bne.n	a5ac <z_cbvprintf_impl+0x3d8>
    a4ea:	07d1      	lsls	r1, r2, #31
    a4ec:	d52c      	bpl.n	a548 <z_cbvprintf_impl+0x374>
		conv->specifier_cat = SPECIFIER_PTR;
    a4ee:	2103      	movs	r1, #3
    a4f0:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    a4f4:	f003 0378 	and.w	r3, r3, #120	; 0x78
    a4f8:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    a4fc:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    a500:	f1dc 0300 	rsbs	r3, ip, #0
		conv->specifier_cat = SPECIFIER_PTR;
    a504:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    a508:	eb43 030c 	adc.w	r3, r3, ip
    a50c:	e040      	b.n	a590 <z_cbvprintf_impl+0x3bc>
    a50e:	2001      	movs	r0, #1
	switch (conv->specifier) {
    a510:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    a514:	b2c9      	uxtb	r1, r1
    a516:	fa00 f101 	lsl.w	r1, r0, r1
    a51a:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    a51e:	f47f af75 	bne.w	a40c <z_cbvprintf_impl+0x238>
    a522:	f640 0301 	movw	r3, #2049	; 0x801
    a526:	4219      	tst	r1, r3
    a528:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    a52c:	d119      	bne.n	a562 <z_cbvprintf_impl+0x38e>
    a52e:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    a532:	d009      	beq.n	a548 <z_cbvprintf_impl+0x374>
		conv->specifier_cat = SPECIFIER_SINT;
    a534:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
    a538:	f360 0202 	bfi	r2, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    a53c:	f003 0378 	and.w	r3, r3, #120	; 0x78
    a540:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    a542:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    a546:	d183      	bne.n	a450 <z_cbvprintf_impl+0x27c>
		conv->invalid = true;
    a548:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    a54c:	f043 0301 	orr.w	r3, r3, #1
    a550:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
    a554:	e77c      	b.n	a450 <z_cbvprintf_impl+0x27c>
		conv->specifier_cat = SPECIFIER_UINT;
    a556:	2102      	movs	r1, #2
    a558:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
    a55c:	f361 0202 	bfi	r2, r1, #0, #3
    a560:	e7ec      	b.n	a53c <z_cbvprintf_impl+0x368>
    a562:	2002      	movs	r0, #2
    a564:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    a568:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    a56c:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    a570:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    a572:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
    a576:	bf02      	ittt	eq
    a578:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
    a57c:	f041 0101 	orreq.w	r1, r1, #1
    a580:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
    a584:	2a63      	cmp	r2, #99	; 0x63
    a586:	f47f af63 	bne.w	a450 <z_cbvprintf_impl+0x27c>
			unsupported = (conv->length_mod != LENGTH_NONE);
    a58a:	3b00      	subs	r3, #0
    a58c:	bf18      	it	ne
    a58e:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    a590:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    a594:	f3c2 0140 	ubfx	r1, r2, #1, #1
    a598:	430b      	orrs	r3, r1
    a59a:	f363 0241 	bfi	r2, r3, #1, #1
    a59e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
    a5a2:	e6b9      	b.n	a318 <z_cbvprintf_impl+0x144>
		} else if ((conv->length_mod != LENGTH_NONE)
    a5a4:	f013 0f38 	tst.w	r3, #56	; 0x38
    a5a8:	d1ce      	bne.n	a548 <z_cbvprintf_impl+0x374>
    a5aa:	e751      	b.n	a450 <z_cbvprintf_impl+0x27c>
		conv->specifier_cat = SPECIFIER_PTR;
    a5ac:	2103      	movs	r1, #3
    a5ae:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    a5b2:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    a5b6:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
    a5ba:	bf14      	ite	ne
    a5bc:	2301      	movne	r3, #1
    a5be:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
    a5c0:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    a5c4:	e7e4      	b.n	a590 <z_cbvprintf_impl+0x3bc>
			unsupported = true;
    a5c6:	2301      	movs	r3, #1
    a5c8:	e7e2      	b.n	a590 <z_cbvprintf_impl+0x3bc>
		} else if (conv->width_present) {
    a5ca:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
    a5ce:	2a00      	cmp	r2, #0
		int width = -1;
    a5d0:	bfac      	ite	ge
    a5d2:	f04f 32ff 	movge.w	r2, #4294967295
			width = conv->width_value;
    a5d6:	9a13      	ldrlt	r2, [sp, #76]	; 0x4c
    a5d8:	e6b0      	b.n	a33c <z_cbvprintf_impl+0x168>
		} else if (conv->prec_present) {
    a5da:	0799      	lsls	r1, r3, #30
    a5dc:	f57f aebd 	bpl.w	a35a <z_cbvprintf_impl+0x186>
			precision = conv->prec_value;
    a5e0:	9f14      	ldr	r7, [sp, #80]	; 0x50
		conv->pad0_value = 0;
    a5e2:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    a5e4:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
		    && (conv->specifier_cat == SPECIFIER_FP)
    a5e8:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    a5ec:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
    a5f0:	f003 0207 	and.w	r2, r3, #7
    a5f4:	2a04      	cmp	r2, #4
    a5f6:	d107      	bne.n	a608 <z_cbvprintf_impl+0x434>
		    && !conv->prec_present) {
    a5f8:	078a      	lsls	r2, r1, #30
    a5fa:	d405      	bmi.n	a608 <z_cbvprintf_impl+0x434>
			if (conv->specifier_a) {
    a5fc:	f99d 2049 	ldrsb.w	r2, [sp, #73]	; 0x49
				precision = FRACTION_HEX;
    a600:	2a00      	cmp	r2, #0
    a602:	bfac      	ite	ge
    a604:	2706      	movge	r7, #6
    a606:	270d      	movlt	r7, #13
		enum specifier_cat_enum specifier_cat
    a608:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    a60c:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    a60e:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    a612:	d133      	bne.n	a67c <z_cbvprintf_impl+0x4a8>
			switch (length_mod) {
    a614:	1ecb      	subs	r3, r1, #3
    a616:	2b04      	cmp	r3, #4
    a618:	d804      	bhi.n	a624 <z_cbvprintf_impl+0x450>
    a61a:	e8df f003 	tbb	[pc, r3]
    a61e:	4621      	.short	0x4621
    a620:	2146      	.short	0x2146
    a622:	21          	.byte	0x21
    a623:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    a624:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    a626:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    a628:	ea4f 72e3 	mov.w	r2, r3, asr #31
    a62c:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    a630:	d11c      	bne.n	a66c <z_cbvprintf_impl+0x498>
				value->sint = (signed char)value->sint;
    a632:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
    a636:	17da      	asrs	r2, r3, #31
    a638:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
    a63c:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    a63e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    a642:	9307      	str	r3, [sp, #28]
    a644:	079b      	lsls	r3, r3, #30
    a646:	d050      	beq.n	a6ea <z_cbvprintf_impl+0x516>
			OUTS(sp, fp);
    a648:	4632      	mov	r2, r6
    a64a:	4650      	mov	r0, sl
    a64c:	9b06      	ldr	r3, [sp, #24]
    a64e:	9903      	ldr	r1, [sp, #12]
    a650:	f00f ff9b 	bl	1a58a <outs>
    a654:	2800      	cmp	r0, #0
    a656:	f2c0 8353 	blt.w	ad00 <z_cbvprintf_impl+0xb2c>
    a65a:	4405      	add	r5, r0
			continue;
    a65c:	9e06      	ldr	r6, [sp, #24]
    a65e:	e5c1      	b.n	a1e4 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    a660:	f854 3b04 	ldr.w	r3, [r4], #4
    a664:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    a666:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
    a66a:	e7e8      	b.n	a63e <z_cbvprintf_impl+0x46a>
			} else if (length_mod == LENGTH_H) {
    a66c:	2902      	cmp	r1, #2
    a66e:	d1e5      	bne.n	a63c <z_cbvprintf_impl+0x468>
				value->sint = (short)value->sint;
    a670:	b21a      	sxth	r2, r3
    a672:	f343 33c0 	sbfx	r3, r3, #15, #1
    a676:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    a67a:	e7df      	b.n	a63c <z_cbvprintf_impl+0x468>
		} else if (specifier_cat == SPECIFIER_UINT) {
    a67c:	2b02      	cmp	r3, #2
    a67e:	d124      	bne.n	a6ca <z_cbvprintf_impl+0x4f6>
			switch (length_mod) {
    a680:	1ecb      	subs	r3, r1, #3
    a682:	2b04      	cmp	r3, #4
    a684:	d804      	bhi.n	a690 <z_cbvprintf_impl+0x4bc>
    a686:	e8df f003 	tbb	[pc, r3]
    a68a:	1018      	.short	0x1018
    a68c:	1810      	.short	0x1810
    a68e:	18          	.byte	0x18
    a68f:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    a690:	2901      	cmp	r1, #1
    a692:	f04f 0200 	mov.w	r2, #0
				value->uint = va_arg(ap, unsigned int);
    a696:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    a69a:	d014      	beq.n	a6c6 <z_cbvprintf_impl+0x4f2>
			} else if (length_mod == LENGTH_H) {
    a69c:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    a69e:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
    a6a2:	d1cc      	bne.n	a63e <z_cbvprintf_impl+0x46a>
				value->uint = (unsigned short)value->uint;
    a6a4:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    a6a6:	9310      	str	r3, [sp, #64]	; 0x40
    a6a8:	e7c9      	b.n	a63e <z_cbvprintf_impl+0x46a>
					(uint_value_type)va_arg(ap,
    a6aa:	3407      	adds	r4, #7
    a6ac:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    a6b0:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    a6b4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    a6b8:	e7c1      	b.n	a63e <z_cbvprintf_impl+0x46a>
					(uint_value_type)va_arg(ap, size_t);
    a6ba:	f854 3b04 	ldr.w	r3, [r4], #4
    a6be:	9310      	str	r3, [sp, #64]	; 0x40
    a6c0:	2300      	movs	r3, #0
    a6c2:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
    a6c4:	e7bb      	b.n	a63e <z_cbvprintf_impl+0x46a>
				value->uint = (unsigned char)value->uint;
    a6c6:	b2db      	uxtb	r3, r3
    a6c8:	e7cd      	b.n	a666 <z_cbvprintf_impl+0x492>
		} else if (specifier_cat == SPECIFIER_FP) {
    a6ca:	2b04      	cmp	r3, #4
    a6cc:	d108      	bne.n	a6e0 <z_cbvprintf_impl+0x50c>
					(sint_value_type)va_arg(ap, long long);
    a6ce:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    a6d0:	f024 0407 	bic.w	r4, r4, #7
    a6d4:	e9d4 2300 	ldrd	r2, r3, [r4]
    a6d8:	3408      	adds	r4, #8
    a6da:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    a6de:	e7ae      	b.n	a63e <z_cbvprintf_impl+0x46a>
		} else if (specifier_cat == SPECIFIER_PTR) {
    a6e0:	2b03      	cmp	r3, #3
    a6e2:	d1ac      	bne.n	a63e <z_cbvprintf_impl+0x46a>
			value->ptr = va_arg(ap, void *);
    a6e4:	f854 3b04 	ldr.w	r3, [r4], #4
    a6e8:	e7dd      	b.n	a6a6 <z_cbvprintf_impl+0x4d2>
		switch (conv->specifier) {
    a6ea:	f89d b04b 	ldrb.w	fp, [sp, #75]	; 0x4b
    a6ee:	f1bb 0f78 	cmp.w	fp, #120	; 0x78
    a6f2:	d8b3      	bhi.n	a65c <z_cbvprintf_impl+0x488>
    a6f4:	f1bb 0f57 	cmp.w	fp, #87	; 0x57
    a6f8:	d849      	bhi.n	a78e <z_cbvprintf_impl+0x5ba>
    a6fa:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
    a6fe:	f000 8091 	beq.w	a824 <z_cbvprintf_impl+0x650>
    a702:	f1bb 0f24 	cmp.w	fp, #36	; 0x24
    a706:	d9a9      	bls.n	a65c <z_cbvprintf_impl+0x488>
    a708:	f1bb 0f41 	cmp.w	fp, #65	; 0x41
    a70c:	d003      	beq.n	a716 <z_cbvprintf_impl+0x542>
    a70e:	f1ab 0245 	sub.w	r2, fp, #69	; 0x45
    a712:	2a02      	cmp	r2, #2
    a714:	d8a2      	bhi.n	a65c <z_cbvprintf_impl+0x488>
	} u = {
    a716:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
	if ((u.u64 & SIGN_MASK) != 0U) {
    a71a:	2a00      	cmp	r2, #0
    a71c:	f2c0 8136 	blt.w	a98c <z_cbvprintf_impl+0x7b8>
	} else if (conv->flag_plus) {
    a720:	9b07      	ldr	r3, [sp, #28]
    a722:	0718      	lsls	r0, r3, #28
    a724:	f100 8135 	bmi.w	a992 <z_cbvprintf_impl+0x7be>
	} else if (conv->flag_space) {
    a728:	f3c3 1900 	ubfx	r9, r3, #4, #1
    a72c:	ea4f 1949 	mov.w	r9, r9, lsl #5
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    a730:	f3c2 500a 	ubfx	r0, r2, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
    a734:	f3c2 0213 	ubfx	r2, r2, #0, #20
	bool is_subnormal = (expo == 0) && (fract != 0);
    a738:	2800      	cmp	r0, #0
    a73a:	f040 812d 	bne.w	a998 <z_cbvprintf_impl+0x7c4>
    a73e:	ea51 0602 	orrs.w	r6, r1, r2
    a742:	bf14      	ite	ne
    a744:	2601      	movne	r6, #1
    a746:	2600      	moveq	r6, #0
	fract <<= EXPONENT_BITS;
    a748:	02d2      	lsls	r2, r2, #11
    a74a:	ea42 5251 	orr.w	r2, r2, r1, lsr #21
    a74e:	02c9      	lsls	r1, r1, #11
		c = 'f';
    a750:	f1bb 0f46 	cmp.w	fp, #70	; 0x46
	if ((expo | fract) != 0) {
    a754:	ea40 0e01 	orr.w	lr, r0, r1
    a758:	ea42 7ce0 	orr.w	ip, r2, r0, asr #31
		c = 'f';
    a75c:	bf08      	it	eq
    a75e:	f04f 0b66 	moveq.w	fp, #102	; 0x66
	if ((expo | fract) != 0) {
    a762:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
    a766:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	if ((expo | fract) != 0) {
    a76a:	f000 8198 	beq.w	aa9e <z_cbvprintf_impl+0x8ca>
		if (is_subnormal) {
    a76e:	2e00      	cmp	r6, #0
    a770:	f040 8144 	bne.w	a9fc <z_cbvprintf_impl+0x828>
		fract |= BIT_63;
    a774:	9a0d      	ldr	r2, [sp, #52]	; 0x34
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
    a776:	f2a0 38fe 	subw	r8, r0, #1022	; 0x3fe
		fract |= BIT_63;
    a77a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    a77e:	920d      	str	r2, [sp, #52]	; 0x34
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    a780:	2000      	movs	r0, #0
    a782:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
    a786:	4606      	mov	r6, r0
		fract *= 5U;
    a788:	f04f 0c05 	mov.w	ip, #5
    a78c:	e150      	b.n	aa30 <z_cbvprintf_impl+0x85c>
		switch (conv->specifier) {
    a78e:	f1ab 0258 	sub.w	r2, fp, #88	; 0x58
    a792:	2a20      	cmp	r2, #32
    a794:	f63f af62 	bhi.w	a65c <z_cbvprintf_impl+0x488>
    a798:	a001      	add	r0, pc, #4	; (adr r0, a7a0 <z_cbvprintf_impl+0x5cc>)
    a79a:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
    a79e:	bf00      	nop
    a7a0:	0000a92b 	.word	0x0000a92b
    a7a4:	0000a65d 	.word	0x0000a65d
    a7a8:	0000a65d 	.word	0x0000a65d
    a7ac:	0000a65d 	.word	0x0000a65d
    a7b0:	0000a65d 	.word	0x0000a65d
    a7b4:	0000a65d 	.word	0x0000a65d
    a7b8:	0000a65d 	.word	0x0000a65d
    a7bc:	0000a65d 	.word	0x0000a65d
    a7c0:	0000a65d 	.word	0x0000a65d
    a7c4:	0000a717 	.word	0x0000a717
    a7c8:	0000a65d 	.word	0x0000a65d
    a7cc:	0000a8af 	.word	0x0000a8af
    a7d0:	0000a8c3 	.word	0x0000a8c3
    a7d4:	0000a717 	.word	0x0000a717
    a7d8:	0000a717 	.word	0x0000a717
    a7dc:	0000a717 	.word	0x0000a717
    a7e0:	0000a65d 	.word	0x0000a65d
    a7e4:	0000a8c3 	.word	0x0000a8c3
    a7e8:	0000a65d 	.word	0x0000a65d
    a7ec:	0000a65d 	.word	0x0000a65d
    a7f0:	0000a65d 	.word	0x0000a65d
    a7f4:	0000a65d 	.word	0x0000a65d
    a7f8:	0000a965 	.word	0x0000a965
    a7fc:	0000a92b 	.word	0x0000a92b
    a800:	0000a931 	.word	0x0000a931
    a804:	0000a65d 	.word	0x0000a65d
    a808:	0000a65d 	.word	0x0000a65d
    a80c:	0000a82b 	.word	0x0000a82b
    a810:	0000a65d 	.word	0x0000a65d
    a814:	0000a92b 	.word	0x0000a92b
    a818:	0000a65d 	.word	0x0000a65d
    a81c:	0000a65d 	.word	0x0000a65d
    a820:	0000a92b 	.word	0x0000a92b
			OUTC('%');
    a824:	4658      	mov	r0, fp
    a826:	9903      	ldr	r1, [sp, #12]
    a828:	e4e6      	b.n	a1f8 <z_cbvprintf_impl+0x24>
			if (precision >= 0) {
    a82a:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
    a82c:	9e10      	ldr	r6, [sp, #64]	; 0x40
			if (precision >= 0) {
    a82e:	db3a      	blt.n	a8a6 <z_cbvprintf_impl+0x6d2>
				len = strnlen(bps, precision);
    a830:	4639      	mov	r1, r7
    a832:	4630      	mov	r0, r6
    a834:	f011 f815 	bl	1b862 <strnlen>
			bpe = bps + len;
    a838:	1837      	adds	r7, r6, r0
		if (bps == NULL) {
    a83a:	2e00      	cmp	r6, #0
    a83c:	f43f af0e 	beq.w	a65c <z_cbvprintf_impl+0x488>
		char sign = 0;
    a840:	f04f 0900 	mov.w	r9, #0
		if (conv->altform_0c) {
    a844:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    a848:	f013 0210 	ands.w	r2, r3, #16
    a84c:	9205      	str	r2, [sp, #20]
    a84e:	f000 824c 	beq.w	acea <z_cbvprintf_impl+0xb16>
			nj_len += 2U;
    a852:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    a854:	f013 0340 	ands.w	r3, r3, #64	; 0x40
		nj_len += conv->pad0_value;
    a858:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
		if (conv->pad_fp) {
    a85c:	9308      	str	r3, [sp, #32]
			nj_len += conv->pad0_pre_exp;
    a85e:	bf18      	it	ne
    a860:	9b14      	ldrne	r3, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
    a862:	4440      	add	r0, r8
			nj_len += conv->pad0_pre_exp;
    a864:	bf18      	it	ne
    a866:	18c0      	addne	r0, r0, r3
		if (width > 0) {
    a868:	9b04      	ldr	r3, [sp, #16]
		nj_len += conv->pad0_value;
    a86a:	f8cd 801c 	str.w	r8, [sp, #28]
		if (width > 0) {
    a86e:	2b00      	cmp	r3, #0
    a870:	f340 8256 	ble.w	ad20 <z_cbvprintf_impl+0xb4c>
			if (!conv->flag_dash) {
    a874:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			width -= (int)nj_len;
    a878:	1a1b      	subs	r3, r3, r0
    a87a:	9304      	str	r3, [sp, #16]
			if (!conv->flag_dash) {
    a87c:	0753      	lsls	r3, r2, #29
    a87e:	f3c2 0b80 	ubfx	fp, r2, #2, #1
    a882:	f100 824d 	bmi.w	ad20 <z_cbvprintf_impl+0xb4c>
				if (conv->flag_zero) {
    a886:	0650      	lsls	r0, r2, #25
    a888:	f140 823d 	bpl.w	ad06 <z_cbvprintf_impl+0xb32>
					if (sign != 0) {
    a88c:	f1b9 0f00 	cmp.w	r9, #0
    a890:	d007      	beq.n	a8a2 <z_cbvprintf_impl+0x6ce>
						OUTC(sign);
    a892:	4648      	mov	r0, r9
    a894:	9903      	ldr	r1, [sp, #12]
    a896:	47d0      	blx	sl
    a898:	2800      	cmp	r0, #0
    a89a:	f2c0 8231 	blt.w	ad00 <z_cbvprintf_impl+0xb2c>
						sign = 0;
    a89e:	46d9      	mov	r9, fp
						OUTC(sign);
    a8a0:	3501      	adds	r5, #1
					pad = '0';
    a8a2:	2230      	movs	r2, #48	; 0x30
    a8a4:	e230      	b.n	ad08 <z_cbvprintf_impl+0xb34>
				len = strlen(bps);
    a8a6:	4630      	mov	r0, r6
    a8a8:	f010 ffd4 	bl	1b854 <strlen>
    a8ac:	e7c4      	b.n	a838 <z_cbvprintf_impl+0x664>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    a8ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
		char sign = 0;
    a8b0:	f04f 0900 	mov.w	r9, #0
		size_t nj_len = (bpe - bps);
    a8b4:	2001      	movs	r0, #1
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    a8b6:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
			bpe = buf + 1;
    a8ba:	f10d 075d 	add.w	r7, sp, #93	; 0x5d
			bps = buf;
    a8be:	ae17      	add	r6, sp, #92	; 0x5c
    a8c0:	e7c0      	b.n	a844 <z_cbvprintf_impl+0x670>
			if (conv->flag_plus) {
    a8c2:	9b07      	ldr	r3, [sp, #28]
    a8c4:	071e      	lsls	r6, r3, #28
			} else if (conv->flag_space) {
    a8c6:	bf54      	ite	pl
    a8c8:	f3c3 1900 	ubfxpl	r9, r3, #4, #1
				sign = '+';
    a8cc:	f04f 092b 	movmi.w	r9, #43	; 0x2b
			sint = value->sint;
    a8d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			} else if (conv->flag_space) {
    a8d4:	bf58      	it	pl
    a8d6:	ea4f 1949 	movpl.w	r9, r9, lsl #5
			if (sint < 0) {
    a8da:	2b00      	cmp	r3, #0
    a8dc:	da06      	bge.n	a8ec <z_cbvprintf_impl+0x718>
				sign = '-';
    a8de:	f04f 092d 	mov.w	r9, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
    a8e2:	4252      	negs	r2, r2
    a8e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    a8e8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			bps = encode_uint(value->uint, conv, buf, bpe);
    a8ec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    a8f0:	f10d 0375 	add.w	r3, sp, #117	; 0x75
    a8f4:	9300      	str	r3, [sp, #0]
    a8f6:	aa12      	add	r2, sp, #72	; 0x48
    a8f8:	ab17      	add	r3, sp, #92	; 0x5c
    a8fa:	f00f fe00 	bl	1a4fe <encode_uint>
    a8fe:	4606      	mov	r6, r0
			if (precision >= 0) {
    a900:	2f00      	cmp	r7, #0
    a902:	db0c      	blt.n	a91e <z_cbvprintf_impl+0x74a>
				conv->flag_zero = false;
    a904:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
    a908:	f10d 0375 	add.w	r3, sp, #117	; 0x75
    a90c:	1b9b      	subs	r3, r3, r6
				conv->flag_zero = false;
    a90e:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    a912:	429f      	cmp	r7, r3
				conv->flag_zero = false;
    a914:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
    a918:	d901      	bls.n	a91e <z_cbvprintf_impl+0x74a>
					conv->pad0_value = precision - (int)len;
    a91a:	1afb      	subs	r3, r7, r3
    a91c:	9313      	str	r3, [sp, #76]	; 0x4c
		if (bps == NULL) {
    a91e:	2e00      	cmp	r6, #0
    a920:	f43f ae9c 	beq.w	a65c <z_cbvprintf_impl+0x488>
    a924:	f10d 0775 	add.w	r7, sp, #117	; 0x75
    a928:	e056      	b.n	a9d8 <z_cbvprintf_impl+0x804>
		switch (conv->specifier) {
    a92a:	f04f 0900 	mov.w	r9, #0
    a92e:	e7dd      	b.n	a8ec <z_cbvprintf_impl+0x718>
			if (value->ptr != NULL) {
    a930:	9810      	ldr	r0, [sp, #64]	; 0x40
    a932:	2800      	cmp	r0, #0
    a934:	f000 81d4 	beq.w	ace0 <z_cbvprintf_impl+0xb0c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    a938:	f10d 0375 	add.w	r3, sp, #117	; 0x75
    a93c:	9300      	str	r3, [sp, #0]
    a93e:	2100      	movs	r1, #0
    a940:	ab17      	add	r3, sp, #92	; 0x5c
    a942:	aa12      	add	r2, sp, #72	; 0x48
    a944:	f00f fddb 	bl	1a4fe <encode_uint>
				conv->altform_0c = true;
    a948:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
				bps = encode_uint((uintptr_t)value->ptr, conv,
    a94c:	4606      	mov	r6, r0
				conv->altform_0c = true;
    a94e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    a952:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    a956:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
    a95a:	f04f 0900 	mov.w	r9, #0
				conv->altform_0c = true;
    a95e:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
				goto prec_int_pad0;
    a962:	e7cd      	b.n	a900 <z_cbvprintf_impl+0x72c>
				store_count(conv, value->ptr, count);
    a964:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
    a966:	2907      	cmp	r1, #7
    a968:	f63f ae78 	bhi.w	a65c <z_cbvprintf_impl+0x488>
    a96c:	e8df f001 	tbb	[pc, r1]
    a970:	0c06040c 	.word	0x0c06040c
    a974:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    a978:	701d      	strb	r5, [r3, #0]
		break;
    a97a:	e66f      	b.n	a65c <z_cbvprintf_impl+0x488>
		*(short *)dp = (short)count;
    a97c:	801d      	strh	r5, [r3, #0]
		break;
    a97e:	e66d      	b.n	a65c <z_cbvprintf_impl+0x488>
		*(intmax_t *)dp = (intmax_t)count;
    a980:	17ea      	asrs	r2, r5, #31
    a982:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    a986:	e669      	b.n	a65c <z_cbvprintf_impl+0x488>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    a988:	601d      	str	r5, [r3, #0]
		break;
    a98a:	e667      	b.n	a65c <z_cbvprintf_impl+0x488>
		*sign = '-';
    a98c:	f04f 092d 	mov.w	r9, #45	; 0x2d
    a990:	e6ce      	b.n	a730 <z_cbvprintf_impl+0x55c>
		*sign = '+';
    a992:	f04f 092b 	mov.w	r9, #43	; 0x2b
    a996:	e6cb      	b.n	a730 <z_cbvprintf_impl+0x55c>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
    a998:	f240 76ff 	movw	r6, #2047	; 0x7ff
    a99c:	42b0      	cmp	r0, r6
    a99e:	d12a      	bne.n	a9f6 <z_cbvprintf_impl+0x822>
		if (fract == 0) {
    a9a0:	430a      	orrs	r2, r1
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    a9a2:	f1ab 0341 	sub.w	r3, fp, #65	; 0x41
    a9a6:	d11e      	bne.n	a9e6 <z_cbvprintf_impl+0x812>
			if (isupper((unsigned char)c)) {
    a9a8:	2b1a      	cmp	r3, #26
    a9aa:	bf35      	itete	cc
    a9ac:	2349      	movcc	r3, #73	; 0x49
    a9ae:	2369      	movcs	r3, #105	; 0x69
    a9b0:	214e      	movcc	r1, #78	; 0x4e
    a9b2:	216e      	movcs	r1, #110	; 0x6e
    a9b4:	bf34      	ite	cc
    a9b6:	2246      	movcc	r2, #70	; 0x46
    a9b8:	2266      	movcs	r2, #102	; 0x66
				*buf++ = 'I';
    a9ba:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		conv->flag_zero = false;
    a9be:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
				*buf++ = 'N';
    a9c2:	f88d 105d 	strb.w	r1, [sp, #93]	; 0x5d
		conv->flag_zero = false;
    a9c6:	f36f 1386 	bfc	r3, #6, #1
				*buf++ = 'F';
    a9ca:	f88d 205e 	strb.w	r2, [sp, #94]	; 0x5e
		conv->flag_zero = false;
    a9ce:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		*bpe = buf;
    a9d2:	f10d 075f 	add.w	r7, sp, #95	; 0x5f
				bps = encode_float(value->dbl, conv, precision,
    a9d6:	ae17      	add	r6, sp, #92	; 0x5c
		size_t nj_len = (bpe - bps);
    a9d8:	1bb8      	subs	r0, r7, r6
		if (sign != 0) {
    a9da:	f1b9 0f00 	cmp.w	r9, #0
    a9de:	f43f af31 	beq.w	a844 <z_cbvprintf_impl+0x670>
			nj_len += 1U;
    a9e2:	3001      	adds	r0, #1
    a9e4:	e72e      	b.n	a844 <z_cbvprintf_impl+0x670>
			if (isupper((unsigned char)c)) {
    a9e6:	2b19      	cmp	r3, #25
    a9e8:	bf8b      	itete	hi
    a9ea:	236e      	movhi	r3, #110	; 0x6e
    a9ec:	234e      	movls	r3, #78	; 0x4e
    a9ee:	2161      	movhi	r1, #97	; 0x61
    a9f0:	2141      	movls	r1, #65	; 0x41
    a9f2:	461a      	mov	r2, r3
    a9f4:	e7e1      	b.n	a9ba <z_cbvprintf_impl+0x7e6>
	bool is_subnormal = (expo == 0) && (fract != 0);
    a9f6:	2600      	movs	r6, #0
    a9f8:	e6a6      	b.n	a748 <z_cbvprintf_impl+0x574>
				expo--;
    a9fa:	3801      	subs	r0, #1
			while (((fract <<= 1) & BIT_63) == 0) {
    a9fc:	1849      	adds	r1, r1, r1
    a9fe:	4152      	adcs	r2, r2
    aa00:	2a00      	cmp	r2, #0
    aa02:	dafa      	bge.n	a9fa <z_cbvprintf_impl+0x826>
    aa04:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
    aa08:	e6b4      	b.n	a774 <z_cbvprintf_impl+0x5a0>
			fract >>= 1;
    aa0a:	0849      	lsrs	r1, r1, #1
    aa0c:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
    aa10:	0852      	lsrs	r2, r2, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    aa12:	f1b2 3f33 	cmp.w	r2, #858993459	; 0x33333333
    aa16:	4640      	mov	r0, r8
			expo++;
    aa18:	f108 0801 	add.w	r8, r8, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    aa1c:	d2f5      	bcs.n	aa0a <z_cbvprintf_impl+0x836>
		expo++;
    aa1e:	f100 0802 	add.w	r8, r0, #2
		decexp--;
    aa22:	2001      	movs	r0, #1
		fract *= 5U;
    aa24:	fb0c fe02 	mul.w	lr, ip, r2
    aa28:	fba1 120c 	umull	r1, r2, r1, ip
		decexp--;
    aa2c:	3e01      	subs	r6, #1
		fract *= 5U;
    aa2e:	4472      	add	r2, lr
	while (expo < -2) {
    aa30:	f118 0f02 	cmn.w	r8, #2
    aa34:	dbe9      	blt.n	aa0a <z_cbvprintf_impl+0x836>
    aa36:	b108      	cbz	r0, aa3c <z_cbvprintf_impl+0x868>
    aa38:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
		fract += 2;
    aa3c:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
	while (expo > 0) {
    aa40:	f1b8 0f00 	cmp.w	r8, #0
    aa44:	dc2e      	bgt.n	aaa4 <z_cbvprintf_impl+0x8d0>
	fract >>= (4 - expo);
    aa46:	f1c8 0004 	rsb	r0, r8, #4
    aa4a:	f108 081c 	add.w	r8, r8, #28
    aa4e:	f1a0 0c20 	sub.w	ip, r0, #32
    aa52:	40c2      	lsrs	r2, r0
    aa54:	fa21 f300 	lsr.w	r3, r1, r0
    aa58:	fa01 f808 	lsl.w	r8, r1, r8
	if ((c == 'g') || (c == 'G')) {
    aa5c:	f00b 00df 	and.w	r0, fp, #223	; 0xdf
	fract >>= (4 - expo);
    aa60:	ea42 0208 	orr.w	r2, r2, r8
    aa64:	fa21 fc0c 	lsr.w	ip, r1, ip
	if ((c == 'g') || (c == 'G')) {
    aa68:	2847      	cmp	r0, #71	; 0x47
	fract >>= (4 - expo);
    aa6a:	ea42 020c 	orr.w	r2, r2, ip
    aa6e:	9308      	str	r3, [sp, #32]
	if ((c == 'g') || (c == 'G')) {
    aa70:	d138      	bne.n	aae4 <z_cbvprintf_impl+0x910>
		if (decexp < (-4 + 1) || decexp > precision) {
    aa72:	1cf3      	adds	r3, r6, #3
    aa74:	db01      	blt.n	aa7a <z_cbvprintf_impl+0x8a6>
    aa76:	42b7      	cmp	r7, r6
    aa78:	da2a      	bge.n	aad0 <z_cbvprintf_impl+0x8fc>
			c += 'e' - 'g';  /* e or E */
    aa7a:	f1ab 0302 	sub.w	r3, fp, #2
			if (precision > 0) {
    aa7e:	2f00      	cmp	r7, #0
			c += 'e' - 'g';  /* e or E */
    aa80:	fa5f fb83 	uxtb.w	fp, r3
			if (precision > 0) {
    aa84:	dd7d      	ble.n	ab82 <z_cbvprintf_impl+0x9ae>
		if (!conv->flag_hash && (precision > 0)) {
    aa86:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
				precision--;
    aa8a:	3f01      	subs	r7, #1
		if (!conv->flag_hash && (precision > 0)) {
    aa8c:	0680      	lsls	r0, r0, #26
    aa8e:	d478      	bmi.n	ab82 <z_cbvprintf_impl+0x9ae>
    aa90:	1e3b      	subs	r3, r7, #0
    aa92:	bf18      	it	ne
    aa94:	2301      	movne	r3, #1
	bool prune_zero = false;
    aa96:	9305      	str	r3, [sp, #20]
		decimals = precision + 1;
    aa98:	f107 0801 	add.w	r8, r7, #1
    aa9c:	e02c      	b.n	aaf8 <z_cbvprintf_impl+0x924>
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    aa9e:	f04f 0800 	mov.w	r8, #0
    aaa2:	e66d      	b.n	a780 <z_cbvprintf_impl+0x5ac>
		fract += 2;
    aaa4:	3202      	adds	r2, #2
    aaa6:	f141 0100 	adc.w	r1, r1, #0
		_ldiv5(&fract);
    aaaa:	a80c      	add	r0, sp, #48	; 0x30
		expo--;
    aaac:	f108 38ff 	add.w	r8, r8, #4294967295
		decexp++;
    aab0:	3601      	adds	r6, #1
		fract += 2;
    aab2:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		_ldiv5(&fract);
    aab6:	f00f fcf3 	bl	1a4a0 <_ldiv5>
		decexp++;
    aaba:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
			fract <<= 1;
    aabe:	1892      	adds	r2, r2, r2
    aac0:	4149      	adcs	r1, r1
		} while (!(fract & BIT_63));
    aac2:	2900      	cmp	r1, #0
			expo--;
    aac4:	f108 38ff 	add.w	r8, r8, #4294967295
		} while (!(fract & BIT_63));
    aac8:	daf9      	bge.n	aabe <z_cbvprintf_impl+0x8ea>
    aaca:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
    aace:	e7b5      	b.n	aa3c <z_cbvprintf_impl+0x868>
		if (!conv->flag_hash && (precision > 0)) {
    aad0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
			precision -= decexp;
    aad4:	1bbf      	subs	r7, r7, r6
		if (!conv->flag_hash && (precision > 0)) {
    aad6:	0699      	lsls	r1, r3, #26
    aad8:	d451      	bmi.n	ab7e <z_cbvprintf_impl+0x9aa>
    aada:	1e3b      	subs	r3, r7, #0
    aadc:	bf18      	it	ne
    aade:	2301      	movne	r3, #1
	bool prune_zero = false;
    aae0:	9305      	str	r3, [sp, #20]
    aae2:	e004      	b.n	aaee <z_cbvprintf_impl+0x91a>
    aae4:	2300      	movs	r3, #0
	if (c == 'f') {
    aae6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
	bool prune_zero = false;
    aaea:	9305      	str	r3, [sp, #20]
	if (c == 'f') {
    aaec:	d1d4      	bne.n	aa98 <z_cbvprintf_impl+0x8c4>
		if (decimals < 0) {
    aaee:	eb17 0806 	adds.w	r8, r7, r6
    aaf2:	f04f 0b66 	mov.w	fp, #102	; 0x66
    aaf6:	d446      	bmi.n	ab86 <z_cbvprintf_impl+0x9b2>
	if (decimals > 16) {
    aaf8:	f1b8 0f10 	cmp.w	r8, #16
    aafc:	bfa8      	it	ge
    aafe:	f04f 0810 	movge.w	r8, #16
    ab02:	2010      	movs	r0, #16
	uint64_t round = BIT64(59); /* 0.5 */
    ab04:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    ab08:	900b      	str	r0, [sp, #44]	; 0x2c
    ab0a:	2000      	movs	r0, #0
    ab0c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
	*v >>= 1;
    ab10:	e9dd 030e 	ldrd	r0, r3, [sp, #56]	; 0x38
	while (decimals--) {
    ab14:	f1b8 0f00 	cmp.w	r8, #0
    ab18:	d138      	bne.n	ab8c <z_cbvprintf_impl+0x9b8>
	fract += round;
    ab1a:	9908      	ldr	r1, [sp, #32]
    ab1c:	1812      	adds	r2, r2, r0
    ab1e:	eb41 0103 	adc.w	r1, r1, r3
	if (fract >= BIT64(60)) {
    ab22:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    ab26:	d23f      	bcs.n	aba8 <z_cbvprintf_impl+0x9d4>
	fract += round;
    ab28:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		if (conv->flag_hash || (precision > 0)) {
    ab2c:	9b07      	ldr	r3, [sp, #28]
	if (c == 'f') {
    ab2e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
		if (conv->flag_hash || (precision > 0)) {
    ab32:	f003 0220 	and.w	r2, r3, #32
	if (c == 'f') {
    ab36:	f040 80b2 	bne.w	ac9e <z_cbvprintf_impl+0xaca>
		if (decexp > 0) {
    ab3a:	2e00      	cmp	r6, #0
    ab3c:	dc3f      	bgt.n	abbe <z_cbvprintf_impl+0x9ea>
			*buf++ = '0';
    ab3e:	2130      	movs	r1, #48	; 0x30
    ab40:	f88d 105c 	strb.w	r1, [sp, #92]	; 0x5c
		if (conv->flag_hash || (precision > 0)) {
    ab44:	2a00      	cmp	r2, #0
    ab46:	d163      	bne.n	ac10 <z_cbvprintf_impl+0xa3c>
    ab48:	2f00      	cmp	r7, #0
    ab4a:	f340 81a8 	ble.w	ae9e <z_cbvprintf_impl+0xcca>
			*buf++ = '.';
    ab4e:	222e      	movs	r2, #46	; 0x2e
    ab50:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
    ab54:	b186      	cbz	r6, ab78 <z_cbvprintf_impl+0x9a4>
			conv->pad0_value = -decexp;
    ab56:	4272      	negs	r2, r6
    ab58:	42ba      	cmp	r2, r7
    ab5a:	bfa8      	it	ge
    ab5c:	463a      	movge	r2, r7
			conv->pad_postdp = (conv->pad0_value > 0);
    ab5e:	2a00      	cmp	r2, #0
    ab60:	9213      	str	r2, [sp, #76]	; 0x4c
			precision -= conv->pad0_value;
    ab62:	eba7 0702 	sub.w	r7, r7, r2
			conv->pad_postdp = (conv->pad0_value > 0);
    ab66:	bfd4      	ite	le
    ab68:	2200      	movle	r2, #0
    ab6a:	2201      	movgt	r2, #1
    ab6c:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
    ab70:	f362 1145 	bfi	r1, r2, #5, #1
    ab74:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			*buf++ = '.';
    ab78:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
    ab7c:	e037      	b.n	abee <z_cbvprintf_impl+0xa1a>
	bool prune_zero = false;
    ab7e:	2300      	movs	r3, #0
    ab80:	e7ae      	b.n	aae0 <z_cbvprintf_impl+0x90c>
    ab82:	2300      	movs	r3, #0
    ab84:	e787      	b.n	aa96 <z_cbvprintf_impl+0x8c2>
			decimals = 0;
    ab86:	f04f 0800 	mov.w	r8, #0
    ab8a:	e7ba      	b.n	ab02 <z_cbvprintf_impl+0x92e>
	*v >>= 1;
    ab8c:	0840      	lsrs	r0, r0, #1
    ab8e:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
    ab92:	085b      	lsrs	r3, r3, #1
    ab94:	e9cd 030e 	strd	r0, r3, [sp, #56]	; 0x38
	_ldiv5(v);
    ab98:	a80e      	add	r0, sp, #56	; 0x38
    ab9a:	9209      	str	r2, [sp, #36]	; 0x24
    ab9c:	f108 38ff 	add.w	r8, r8, #4294967295
    aba0:	f00f fc7e 	bl	1a4a0 <_ldiv5>
    aba4:	9a09      	ldr	r2, [sp, #36]	; 0x24
}
    aba6:	e7b3      	b.n	ab10 <z_cbvprintf_impl+0x93c>
	*v >>= 1;
    aba8:	0852      	lsrs	r2, r2, #1
    abaa:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
	_ldiv5(v);
    abae:	a80c      	add	r0, sp, #48	; 0x30
	*v >>= 1;
    abb0:	0849      	lsrs	r1, r1, #1
    abb2:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		decexp++;
    abb6:	3601      	adds	r6, #1
	_ldiv5(v);
    abb8:	f00f fc72 	bl	1a4a0 <_ldiv5>
		decexp++;
    abbc:	e7b6      	b.n	ab2c <z_cbvprintf_impl+0x958>
	char *buf = bps;
    abbe:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
			while (decexp > 0 && digit_count > 0) {
    abc2:	990b      	ldr	r1, [sp, #44]	; 0x2c
    abc4:	2900      	cmp	r1, #0
    abc6:	dd09      	ble.n	abdc <z_cbvprintf_impl+0xa08>
				*buf++ = _get_digit(&fract, &digit_count);
    abc8:	a90b      	add	r1, sp, #44	; 0x2c
    abca:	a80c      	add	r0, sp, #48	; 0x30
    abcc:	9207      	str	r2, [sp, #28]
    abce:	f00f fc7f 	bl	1a4d0 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    abd2:	3e01      	subs	r6, #1
    abd4:	9a07      	ldr	r2, [sp, #28]
				*buf++ = _get_digit(&fract, &digit_count);
    abd6:	f808 0b01 	strb.w	r0, [r8], #1
			while (decexp > 0 && digit_count > 0) {
    abda:	d1f2      	bne.n	abc2 <z_cbvprintf_impl+0x9ee>
			conv->pad0_value = decexp;
    abdc:	9613      	str	r6, [sp, #76]	; 0x4c
		if (conv->flag_hash || (precision > 0)) {
    abde:	b99a      	cbnz	r2, ac08 <z_cbvprintf_impl+0xa34>
    abe0:	2f00      	cmp	r7, #0
    abe2:	f340 815a 	ble.w	ae9a <z_cbvprintf_impl+0xcc6>
			*buf++ = '.';
    abe6:	212e      	movs	r1, #46	; 0x2e
    abe8:	f808 1b01 	strb.w	r1, [r8], #1
    abec:	2600      	movs	r6, #0
	while (precision > 0 && digit_count > 0) {
    abee:	2f00      	cmp	r7, #0
    abf0:	dd17      	ble.n	ac22 <z_cbvprintf_impl+0xa4e>
    abf2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    abf4:	2a00      	cmp	r2, #0
    abf6:	dd14      	ble.n	ac22 <z_cbvprintf_impl+0xa4e>
		*buf++ = _get_digit(&fract, &digit_count);
    abf8:	a90b      	add	r1, sp, #44	; 0x2c
    abfa:	a80c      	add	r0, sp, #48	; 0x30
    abfc:	f00f fc68 	bl	1a4d0 <_get_digit>
		precision--;
    ac00:	3f01      	subs	r7, #1
		*buf++ = _get_digit(&fract, &digit_count);
    ac02:	f808 0b01 	strb.w	r0, [r8], #1
		precision--;
    ac06:	e7f2      	b.n	abee <z_cbvprintf_impl+0xa1a>
			*buf++ = '.';
    ac08:	222e      	movs	r2, #46	; 0x2e
    ac0a:	f808 2b01 	strb.w	r2, [r8], #1
    ac0e:	e7ed      	b.n	abec <z_cbvprintf_impl+0xa18>
    ac10:	222e      	movs	r2, #46	; 0x2e
    ac12:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
    ac16:	2e00      	cmp	r6, #0
    ac18:	d0ae      	beq.n	ab78 <z_cbvprintf_impl+0x9a4>
    ac1a:	2f00      	cmp	r7, #0
    ac1c:	dc9b      	bgt.n	ab56 <z_cbvprintf_impl+0x982>
			*buf++ = '.';
    ac1e:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
	if (prune_zero) {
    ac22:	9b05      	ldr	r3, [sp, #20]
    ac24:	2b00      	cmp	r3, #0
    ac26:	d14e      	bne.n	acc6 <z_cbvprintf_impl+0xaf2>
	conv->pad0_pre_exp = precision;
    ac28:	9714      	str	r7, [sp, #80]	; 0x50
    ac2a:	4647      	mov	r7, r8
	if ((c == 'e') || (c == 'E')) {
    ac2c:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
    ac30:	2a45      	cmp	r2, #69	; 0x45
    ac32:	d123      	bne.n	ac7c <z_cbvprintf_impl+0xaa8>
		if (decexp < 0) {
    ac34:	2e00      	cmp	r6, #0
			decexp = -decexp;
    ac36:	bfba      	itte	lt
    ac38:	4276      	neglt	r6, r6
			*buf++ = '-';
    ac3a:	232d      	movlt	r3, #45	; 0x2d
			*buf++ = '+';
    ac3c:	232b      	movge	r3, #43	; 0x2b
		if (decexp >= 100) {
    ac3e:	2e63      	cmp	r6, #99	; 0x63
			*buf++ = (decexp / 100) + '0';
    ac40:	bfc8      	it	gt
    ac42:	2164      	movgt	r1, #100	; 0x64
    ac44:	707b      	strb	r3, [r7, #1]
    ac46:	bfc4      	itt	gt
    ac48:	fbb6 f3f1 	udivgt	r3, r6, r1
			decexp %= 100;
    ac4c:	fb01 6613 	mlsgt	r6, r1, r3, r6
		*buf++ = (decexp / 10) + '0';
    ac50:	f04f 010a 	mov.w	r1, #10
			*buf++ = (decexp / 100) + '0';
    ac54:	bfc8      	it	gt
    ac56:	f103 0030 	addgt.w	r0, r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    ac5a:	fbb6 f3f1 	udiv	r3, r6, r1
			*buf++ = '-';
    ac5e:	bfd2      	itee	le
    ac60:	1cba      	addle	r2, r7, #2
			*buf++ = (decexp / 100) + '0';
    ac62:	1cfa      	addgt	r2, r7, #3
    ac64:	70b8      	strbgt	r0, [r7, #2]
		*buf++ = c;
    ac66:	f887 b000 	strb.w	fp, [r7]
		*buf++ = (decexp / 10) + '0';
    ac6a:	4617      	mov	r7, r2
    ac6c:	f103 0030 	add.w	r0, r3, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
    ac70:	fb01 6313 	mls	r3, r1, r3, r6
    ac74:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    ac76:	f807 0b02 	strb.w	r0, [r7], #2
		*buf++ = (decexp % 10) + '0';
    ac7a:	7053      	strb	r3, [r2, #1]
		|| (conv->pad0_pre_exp > 0);
    ac7c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    ac7e:	2b00      	cmp	r3, #0
    ac80:	dc2c      	bgt.n	acdc <z_cbvprintf_impl+0xb08>
    ac82:	9b14      	ldr	r3, [sp, #80]	; 0x50
    ac84:	2b00      	cmp	r3, #0
    ac86:	bfd4      	ite	le
    ac88:	2300      	movle	r3, #0
    ac8a:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
    ac8c:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
    ac90:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
    ac94:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
    ac96:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
	*buf = 0;
    ac9a:	703b      	strb	r3, [r7, #0]
	return bps;
    ac9c:	e69b      	b.n	a9d6 <z_cbvprintf_impl+0x802>
		*buf = _get_digit(&fract, &digit_count);
    ac9e:	a90b      	add	r1, sp, #44	; 0x2c
    aca0:	a80c      	add	r0, sp, #48	; 0x30
    aca2:	9207      	str	r2, [sp, #28]
    aca4:	f00f fc14 	bl	1a4d0 <_get_digit>
		if (*buf++ != '0') {
    aca8:	9a07      	ldr	r2, [sp, #28]
    acaa:	2830      	cmp	r0, #48	; 0x30
		*buf = _get_digit(&fract, &digit_count);
    acac:	f88d 005c 	strb.w	r0, [sp, #92]	; 0x5c
			decexp--;
    acb0:	bf18      	it	ne
    acb2:	f106 36ff 	addne.w	r6, r6, #4294967295
		if (conv->flag_hash || (precision > 0)) {
    acb6:	b912      	cbnz	r2, acbe <z_cbvprintf_impl+0xaea>
    acb8:	2f00      	cmp	r7, #0
    acba:	f340 80f0 	ble.w	ae9e <z_cbvprintf_impl+0xcca>
			*buf++ = '.';
    acbe:	222e      	movs	r2, #46	; 0x2e
    acc0:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
    acc4:	e758      	b.n	ab78 <z_cbvprintf_impl+0x9a4>
		while (*--buf == '0') {
    acc6:	4647      	mov	r7, r8
    acc8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
    accc:	f108 38ff 	add.w	r8, r8, #4294967295
    acd0:	2a30      	cmp	r2, #48	; 0x30
    acd2:	d0f8      	beq.n	acc6 <z_cbvprintf_impl+0xaf2>
    acd4:	2a2e      	cmp	r2, #46	; 0x2e
    acd6:	bf08      	it	eq
    acd8:	4647      	moveq	r7, r8
    acda:	e7a7      	b.n	ac2c <z_cbvprintf_impl+0xa58>
		|| (conv->pad0_pre_exp > 0);
    acdc:	2301      	movs	r3, #1
    acde:	e7d5      	b.n	ac8c <z_cbvprintf_impl+0xab8>
			bpe = bps + 5;
    ace0:	4f70      	ldr	r7, [pc, #448]	; (aea4 <z_cbvprintf_impl+0xcd0>)
		char sign = 0;
    ace2:	4681      	mov	r9, r0
			bps = "(nil)";
    ace4:	1f7e      	subs	r6, r7, #5
		size_t nj_len = (bpe - bps);
    ace6:	2005      	movs	r0, #5
    ace8:	e5ac      	b.n	a844 <z_cbvprintf_impl+0x670>
		} else if (conv->altform_0) {
    acea:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    acec:	bf48      	it	mi
    acee:	3001      	addmi	r0, #1
    acf0:	e5b0      	b.n	a854 <z_cbvprintf_impl+0x680>
					OUTC(pad);
    acf2:	4610      	mov	r0, r2
    acf4:	9209      	str	r2, [sp, #36]	; 0x24
    acf6:	9903      	ldr	r1, [sp, #12]
    acf8:	47d0      	blx	sl
    acfa:	2800      	cmp	r0, #0
    acfc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    acfe:	da05      	bge.n	ad0c <z_cbvprintf_impl+0xb38>
#undef OUTS
#undef OUTC
}
    ad00:	b01f      	add	sp, #124	; 0x7c
    ad02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    ad06:	2220      	movs	r2, #32
					pad = '0';
    ad08:	f8dd b010 	ldr.w	fp, [sp, #16]
				while (width-- > 0) {
    ad0c:	4659      	mov	r1, fp
    ad0e:	2900      	cmp	r1, #0
    ad10:	f10b 3bff 	add.w	fp, fp, #4294967295
    ad14:	dced      	bgt.n	acf2 <z_cbvprintf_impl+0xb1e>
    ad16:	9b04      	ldr	r3, [sp, #16]
    ad18:	f8cd b010 	str.w	fp, [sp, #16]
    ad1c:	442b      	add	r3, r5
    ad1e:	1a5d      	subs	r5, r3, r1
		if (sign != 0) {
    ad20:	f1b9 0f00 	cmp.w	r9, #0
    ad24:	d005      	beq.n	ad32 <z_cbvprintf_impl+0xb5e>
			OUTC(sign);
    ad26:	4648      	mov	r0, r9
    ad28:	9903      	ldr	r1, [sp, #12]
    ad2a:	47d0      	blx	sl
    ad2c:	2800      	cmp	r0, #0
    ad2e:	dbe7      	blt.n	ad00 <z_cbvprintf_impl+0xb2c>
    ad30:	3501      	adds	r5, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
    ad32:	9b08      	ldr	r3, [sp, #32]
    ad34:	2b00      	cmp	r3, #0
    ad36:	d075      	beq.n	ae24 <z_cbvprintf_impl+0xc50>
			if (conv->specifier_a) {
    ad38:	f99d 3049 	ldrsb.w	r3, [sp, #73]	; 0x49
    ad3c:	2b00      	cmp	r3, #0
    ad3e:	db28      	blt.n	ad92 <z_cbvprintf_impl+0xbbe>
    ad40:	46b3      	mov	fp, r6
				while (isdigit((unsigned char)*cp)) {
    ad42:	f89b 0000 	ldrb.w	r0, [fp]
    ad46:	46d9      	mov	r9, fp
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    ad48:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    ad4c:	2b09      	cmp	r3, #9
    ad4e:	f10b 0b01 	add.w	fp, fp, #1
    ad52:	d93f      	bls.n	add4 <z_cbvprintf_impl+0xc00>
				if (!conv->pad_postdp) {
    ad54:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    ad58:	1bae      	subs	r6, r5, r6
    ad5a:	0699      	lsls	r1, r3, #26
    ad5c:	444e      	add	r6, r9
    ad5e:	d407      	bmi.n	ad70 <z_cbvprintf_impl+0xb9c>
					while (pad_len-- > 0) {
    ad60:	4642      	mov	r2, r8
    ad62:	2a00      	cmp	r2, #0
    ad64:	f108 38ff 	add.w	r8, r8, #4294967295
    ad68:	dc39      	bgt.n	adde <z_cbvprintf_impl+0xc0a>
    ad6a:	9b07      	ldr	r3, [sp, #28]
    ad6c:	4433      	add	r3, r6
    ad6e:	1a9e      	subs	r6, r3, r2
				if (*cp == '.') {
    ad70:	f899 0000 	ldrb.w	r0, [r9]
    ad74:	282e      	cmp	r0, #46	; 0x2e
    ad76:	d10a      	bne.n	ad8e <z_cbvprintf_impl+0xbba>
					OUTC(*cp++);
    ad78:	9903      	ldr	r1, [sp, #12]
    ad7a:	47d0      	blx	sl
						OUTC('0');
    ad7c:	2800      	cmp	r0, #0
    ad7e:	dbbf      	blt.n	ad00 <z_cbvprintf_impl+0xb2c>
					while (pad_len-- > 0) {
    ad80:	f1b8 0f00 	cmp.w	r8, #0
						OUTC('0');
    ad84:	f106 0601 	add.w	r6, r6, #1
					while (pad_len-- > 0) {
    ad88:	dc2f      	bgt.n	adea <z_cbvprintf_impl+0xc16>
					OUTC(*cp++);
    ad8a:	f109 0901 	add.w	r9, r9, #1
			if (conv->specifier_a) {
    ad8e:	464d      	mov	r5, r9
    ad90:	e035      	b.n	adfe <z_cbvprintf_impl+0xc2a>
    ad92:	46b1      	mov	r9, r6
				while (*cp != 'p') {
    ad94:	f899 0000 	ldrb.w	r0, [r9]
    ad98:	46c8      	mov	r8, r9
    ad9a:	2870      	cmp	r0, #112	; 0x70
    ad9c:	f109 0901 	add.w	r9, r9, #1
    ada0:	d113      	bne.n	adca <z_cbvprintf_impl+0xbf6>
    ada2:	1bae      	subs	r6, r5, r6
    ada4:	9d14      	ldr	r5, [sp, #80]	; 0x50
    ada6:	4446      	add	r6, r8
			while (pad_len-- > 0) {
    ada8:	4435      	add	r5, r6
    adaa:	1bab      	subs	r3, r5, r6
    adac:	2b00      	cmp	r3, #0
    adae:	dc31      	bgt.n	ae14 <z_cbvprintf_impl+0xc40>
			OUTS(cp, bpe);
    adb0:	463b      	mov	r3, r7
    adb2:	4642      	mov	r2, r8
    adb4:	4650      	mov	r0, sl
    adb6:	9903      	ldr	r1, [sp, #12]
    adb8:	f00f fbe7 	bl	1a58a <outs>
    adbc:	2800      	cmp	r0, #0
    adbe:	db9f      	blt.n	ad00 <z_cbvprintf_impl+0xb2c>
    adc0:	4430      	add	r0, r6
    adc2:	9e04      	ldr	r6, [sp, #16]
			while (pad_len-- > 0) {
    adc4:	4605      	mov	r5, r0
    adc6:	4406      	add	r6, r0
    adc8:	e062      	b.n	ae90 <z_cbvprintf_impl+0xcbc>
					OUTC(*cp++);
    adca:	9903      	ldr	r1, [sp, #12]
    adcc:	47d0      	blx	sl
    adce:	2800      	cmp	r0, #0
    add0:	dae0      	bge.n	ad94 <z_cbvprintf_impl+0xbc0>
    add2:	e795      	b.n	ad00 <z_cbvprintf_impl+0xb2c>
					OUTC(*cp++);
    add4:	9903      	ldr	r1, [sp, #12]
    add6:	47d0      	blx	sl
    add8:	2800      	cmp	r0, #0
    adda:	dab2      	bge.n	ad42 <z_cbvprintf_impl+0xb6e>
    addc:	e790      	b.n	ad00 <z_cbvprintf_impl+0xb2c>
						OUTC('0');
    adde:	2030      	movs	r0, #48	; 0x30
    ade0:	9903      	ldr	r1, [sp, #12]
    ade2:	47d0      	blx	sl
    ade4:	2800      	cmp	r0, #0
    ade6:	dabb      	bge.n	ad60 <z_cbvprintf_impl+0xb8c>
    ade8:	e78a      	b.n	ad00 <z_cbvprintf_impl+0xb2c>
						OUTC('0');
    adea:	2030      	movs	r0, #48	; 0x30
    adec:	9903      	ldr	r1, [sp, #12]
    adee:	47d0      	blx	sl
    adf0:	f108 38ff 	add.w	r8, r8, #4294967295
    adf4:	e7c2      	b.n	ad7c <z_cbvprintf_impl+0xba8>
					OUTC(*cp++);
    adf6:	9903      	ldr	r1, [sp, #12]
    adf8:	47d0      	blx	sl
    adfa:	2800      	cmp	r0, #0
    adfc:	db80      	blt.n	ad00 <z_cbvprintf_impl+0xb2c>
				while (isdigit((unsigned char)*cp)) {
    adfe:	7828      	ldrb	r0, [r5, #0]
    ae00:	46a8      	mov	r8, r5
    ae02:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    ae06:	2b09      	cmp	r3, #9
    ae08:	f105 0501 	add.w	r5, r5, #1
    ae0c:	d9f3      	bls.n	adf6 <z_cbvprintf_impl+0xc22>
    ae0e:	eba6 0609 	sub.w	r6, r6, r9
    ae12:	e7c7      	b.n	ada4 <z_cbvprintf_impl+0xbd0>
				OUTC('0');
    ae14:	2030      	movs	r0, #48	; 0x30
    ae16:	9903      	ldr	r1, [sp, #12]
    ae18:	47d0      	blx	sl
    ae1a:	2800      	cmp	r0, #0
    ae1c:	f6ff af70 	blt.w	ad00 <z_cbvprintf_impl+0xb2c>
    ae20:	3601      	adds	r6, #1
    ae22:	e7c2      	b.n	adaa <z_cbvprintf_impl+0xbd6>
			if (conv->altform_0c | conv->altform_0) {
    ae24:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    ae28:	06da      	lsls	r2, r3, #27
    ae2a:	d401      	bmi.n	ae30 <z_cbvprintf_impl+0xc5c>
    ae2c:	071b      	lsls	r3, r3, #28
    ae2e:	d506      	bpl.n	ae3e <z_cbvprintf_impl+0xc6a>
				OUTC('0');
    ae30:	2030      	movs	r0, #48	; 0x30
    ae32:	9903      	ldr	r1, [sp, #12]
    ae34:	47d0      	blx	sl
    ae36:	2800      	cmp	r0, #0
    ae38:	f6ff af62 	blt.w	ad00 <z_cbvprintf_impl+0xb2c>
    ae3c:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    ae3e:	9b05      	ldr	r3, [sp, #20]
    ae40:	b13b      	cbz	r3, ae52 <z_cbvprintf_impl+0xc7e>
				OUTC(conv->specifier);
    ae42:	9903      	ldr	r1, [sp, #12]
    ae44:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    ae48:	47d0      	blx	sl
    ae4a:	2800      	cmp	r0, #0
    ae4c:	f6ff af58 	blt.w	ad00 <z_cbvprintf_impl+0xb2c>
    ae50:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    ae52:	44a8      	add	r8, r5
    ae54:	e006      	b.n	ae64 <z_cbvprintf_impl+0xc90>
				OUTC('0');
    ae56:	2030      	movs	r0, #48	; 0x30
    ae58:	9903      	ldr	r1, [sp, #12]
    ae5a:	47d0      	blx	sl
    ae5c:	2800      	cmp	r0, #0
    ae5e:	f6ff af4f 	blt.w	ad00 <z_cbvprintf_impl+0xb2c>
    ae62:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    ae64:	eba8 0305 	sub.w	r3, r8, r5
    ae68:	2b00      	cmp	r3, #0
    ae6a:	dcf4      	bgt.n	ae56 <z_cbvprintf_impl+0xc82>
			OUTS(bps, bpe);
    ae6c:	463b      	mov	r3, r7
    ae6e:	4632      	mov	r2, r6
    ae70:	4650      	mov	r0, sl
    ae72:	9903      	ldr	r1, [sp, #12]
    ae74:	f00f fb89 	bl	1a58a <outs>
    ae78:	2800      	cmp	r0, #0
    ae7a:	f6ff af41 	blt.w	ad00 <z_cbvprintf_impl+0xb2c>
    ae7e:	4428      	add	r0, r5
    ae80:	e79f      	b.n	adc2 <z_cbvprintf_impl+0xbee>
			OUTC(' ');
    ae82:	2020      	movs	r0, #32
    ae84:	9903      	ldr	r1, [sp, #12]
    ae86:	47d0      	blx	sl
    ae88:	2800      	cmp	r0, #0
    ae8a:	f6ff af39 	blt.w	ad00 <z_cbvprintf_impl+0xb2c>
    ae8e:	3501      	adds	r5, #1
		while (width > 0) {
    ae90:	1b73      	subs	r3, r6, r5
    ae92:	2b00      	cmp	r3, #0
    ae94:	dcf5      	bgt.n	ae82 <z_cbvprintf_impl+0xcae>
    ae96:	f7ff bbe1 	b.w	a65c <z_cbvprintf_impl+0x488>
			decexp = 0;
    ae9a:	4616      	mov	r6, r2
    ae9c:	e6c1      	b.n	ac22 <z_cbvprintf_impl+0xa4e>
		if (*buf++ != '0') {
    ae9e:	f10d 085d 	add.w	r8, sp, #93	; 0x5d
	while (precision > 0 && digit_count > 0) {
    aea2:	e6be      	b.n	ac22 <z_cbvprintf_impl+0xa4e>
    aea4:	00020c61 	.word	0x00020c61

0000aea8 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    aea8:	b148      	cbz	r0, aebe <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    aeaa:	4b05      	ldr	r3, [pc, #20]	; (aec0 <arch_busy_wait+0x18>)
    aeac:	4a05      	ldr	r2, [pc, #20]	; (aec4 <arch_busy_wait+0x1c>)
    aeae:	681b      	ldr	r3, [r3, #0]
    aeb0:	fbb3 f3f2 	udiv	r3, r3, r2
    delay_cycles(cycles);
    aeb4:	4358      	muls	r0, r3
    aeb6:	4b04      	ldr	r3, [pc, #16]	; (aec8 <arch_busy_wait+0x20>)
    aeb8:	f043 0301 	orr.w	r3, r3, #1
    aebc:	4718      	bx	r3
}

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    aebe:	4770      	bx	lr
    aec0:	200084ac 	.word	0x200084ac
    aec4:	000f4240 	.word	0x000f4240
    aec8:	0001fe20 	.word	0x0001fe20

0000aecc <sync_rtc_setup>:
	return mbox_set_enabled(&channel, true);
}

/* Setup RTC synchronization. */
static int sync_rtc_setup(const struct device *unused)
{
    aecc:	b5f0      	push	{r4, r5, r6, r7, lr}
    aece:	b083      	sub	sp, #12
    aed0:	af00      	add	r7, sp, #0
	nrfx_err_t err;
	union rtc_sync_channels channels;
	int32_t sync_rtc_ch;
	int rv;

	err = nrfx_dppi_channel_alloc(&channels.ch.ppi);
    aed2:	1d38      	adds	r0, r7, #4
    aed4:	f00c fb7c 	bl	175d0 <nrfx_dppi_channel_alloc>
	if (err != NRFX_SUCCESS) {
    aed8:	4b28      	ldr	r3, [pc, #160]	; (af7c <sync_rtc_setup+0xb0>)
    aeda:	4298      	cmp	r0, r3
    aedc:	d14b      	bne.n	af76 <sync_rtc_setup+0xaa>
		rv = -ENODEV;
		goto bail;
	}

	sync_rtc_ch = z_nrf_rtc_timer_chan_alloc();
    aede:	f00b fe8b 	bl	16bf8 <z_nrf_rtc_timer_chan_alloc>
	if (sync_rtc_ch < 0) {
    aee2:	1e04      	subs	r4, r0, #0
    aee4:	da15      	bge.n	af12 <sync_rtc_setup+0x46>
		nrfx_dppi_channel_free(channels.ch.ppi);
    aee6:	7938      	ldrb	r0, [r7, #4]
    aee8:	f00c fb78 	bl	175dc <nrfx_dppi_channel_free>
		irq_unlock(key);
	}

bail:
	if (rv != 0) {
		LOG_ERR("Failed synchronized RTC setup (err: %d)", rv);
    aeec:	466d      	mov	r5, sp
    aeee:	b088      	sub	sp, #32
    aef0:	466a      	mov	r2, sp
    aef2:	4b23      	ldr	r3, [pc, #140]	; (af80 <sync_rtc_setup+0xb4>)
    aef4:	6153      	str	r3, [r2, #20]
    aef6:	4b23      	ldr	r3, [pc, #140]	; (af84 <sync_rtc_setup+0xb8>)
    aef8:	e9c2 3406 	strd	r3, r4, [r2, #24]
    aefc:	2304      	movs	r3, #4
    aefe:	f842 3f10 	str.w	r3, [r2, #16]!
    af02:	2300      	movs	r3, #0
    af04:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    af08:	481f      	ldr	r0, [pc, #124]	; (af88 <sync_rtc_setup+0xbc>)
    af0a:	f000 fb29 	bl	b560 <z_impl_z_log_msg_static_create>
    af0e:	46ad      	mov	sp, r5
	}

	return rv;
    af10:	e02d      	b.n	af6e <sync_rtc_setup+0xa2>
	channels.ch.ipc_out = CONFIG_NRF53_SYNC_RTC_IPM_OUT;
    af12:	f640 0307 	movw	r3, #2055	; 0x807
 */
static inline int mbox_register_callback(const struct mbox_channel *channel,
					 mbox_callback_t cb,
					 void *user_data)
{
	const struct mbox_driver_api *api =
    af16:	4d1d      	ldr	r5, [pc, #116]	; (af8c <sync_rtc_setup+0xc0>)
	channels.ch.rtc = (uint8_t)sync_rtc_ch;
    af18:	717c      	strb	r4, [r7, #5]
		(const struct mbox_driver_api *)channel->dev->api;

	if (api->register_callback == NULL) {
    af1a:	68ae      	ldr	r6, [r5, #8]
	channels.ch.ipc_out = CONFIG_NRF53_SYNC_RTC_IPM_OUT;
    af1c:	80fb      	strh	r3, [r7, #6]
    af1e:	6874      	ldr	r4, [r6, #4]
	rv = mbox_rx_init((void *)channels.raw);
    af20:	687b      	ldr	r3, [r7, #4]
    af22:	b914      	cbnz	r4, af2a <sync_rtc_setup+0x5e>
		return -ENOSYS;
    af24:	f06f 0457 	mvn.w	r4, #87	; 0x57
    af28:	e7e0      	b.n	aeec <sync_rtc_setup+0x20>
	}

	return api->register_callback(channel->dev, channel->id, cb, user_data);
    af2a:	2108      	movs	r1, #8
    af2c:	4628      	mov	r0, r5
    af2e:	4a18      	ldr	r2, [pc, #96]	; (af90 <sync_rtc_setup+0xc4>)
    af30:	47a0      	blx	r4
	if (err < 0) {
    af32:	1e04      	subs	r4, r0, #0
    af34:	dbda      	blt.n	aeec <sync_rtc_setup+0x20>
static inline int z_impl_mbox_set_enabled(const struct mbox_channel *channel, bool enable)
{
	const struct mbox_driver_api *api =
		(const struct mbox_driver_api *)channel->dev->api;

	if (api->set_enabled == NULL) {
    af36:	6933      	ldr	r3, [r6, #16]
    af38:	2b00      	cmp	r3, #0
    af3a:	d0f3      	beq.n	af24 <sync_rtc_setup+0x58>
		return -ENOSYS;
	}

	return api->set_enabled(channel->dev, channel->id, enable);
    af3c:	2201      	movs	r2, #1
    af3e:	2108      	movs	r1, #8
    af40:	4628      	mov	r0, r5
    af42:	4798      	blx	r3
	if (rv < 0) {
    af44:	1e04      	subs	r4, r0, #0
    af46:	dbd1      	blt.n	aeec <sync_rtc_setup+0x20>
	nrfx_gppi_channels_enable(BIT(channels.ch.ppi));
    af48:	2301      	movs	r3, #1
    af4a:	793d      	ldrb	r5, [r7, #4]
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    af4c:	4a11      	ldr	r2, [pc, #68]	; (af94 <sync_rtc_setup+0xc8>)
    af4e:	40ab      	lsls	r3, r5
    af50:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	uint32_t task_addr = z_nrf_rtc_timer_capture_task_address_get(channels.ch.rtc);
    af54:	7978      	ldrb	r0, [r7, #5]
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    af56:	79fe      	ldrb	r6, [r7, #7]
    af58:	f012 ffd5 	bl	1df06 <z_nrf_rtc_timer_capture_task_address_get>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
    af5c:	4b0e      	ldr	r3, [pc, #56]	; (af98 <sync_rtc_setup+0xcc>)
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    af5e:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    af62:	00b6      	lsls	r6, r6, #2
    af64:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
    af68:	519d      	str	r5, [r3, r6]
	if (rv != 0) {
    af6a:	2c00      	cmp	r4, #0
    af6c:	d1be      	bne.n	aeec <sync_rtc_setup+0x20>
}
    af6e:	4620      	mov	r0, r4
    af70:	370c      	adds	r7, #12
    af72:	46bd      	mov	sp, r7
    af74:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rv = -ENODEV;
    af76:	f06f 0412 	mvn.w	r4, #18
    af7a:	e7b7      	b.n	aeec <sync_rtc_setup+0x20>
    af7c:	0bad0000 	.word	0x0bad0000
    af80:	00020c66 	.word	0x00020c66
    af84:	00020c92 	.word	0x00020c92
    af88:	0001fd1c 	.word	0x0001fd1c
    af8c:	0001f8b0 	.word	0x0001f8b0
    af90:	0000afe1 	.word	0x0000afe1
    af94:	40017000 	.word	0x40017000
    af98:	4002a180 	.word	0x4002a180

0000af9c <rtc_cb>:
{
    af9c:	b538      	push	{r3, r4, r5, lr}
    af9e:	9c04      	ldr	r4, [sp, #16]
	uint32_t evt_addr = z_nrf_rtc_timer_compare_evt_address_get(channels.ch.rtc);
    afa0:	f3c4 2507 	ubfx	r5, r4, #8, #8
    afa4:	4628      	mov	r0, r5
    afa6:	f00b fc8f 	bl	168c8 <z_nrf_rtc_timer_compare_evt_address_get>

__STATIC_INLINE void nrfx_gppi_event_endpoint_clear(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    (void)channel;
    *((volatile uint32_t *)(eep + 0x80uL)) = 0;
    afaa:	2100      	movs	r1, #0
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) = 0;
    afac:	4b0a      	ldr	r3, [pc, #40]	; (afd8 <rtc_cb+0x3c>)
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    afae:	0ba2      	lsrs	r2, r4, #14
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) = 0;
    afb0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    afb4:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
    afb8:	5099      	str	r1, [r3, r2]
	nrfx_gppi_channels_disable(BIT(channels.ch.ppi));
    afba:	2301      	movs	r3, #1
    afbc:	b2e4      	uxtb	r4, r4
}

NRF_STATIC_INLINE void nrf_dppi_channels_disable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
    afbe:	4a07      	ldr	r2, [pc, #28]	; (afdc <rtc_cb+0x40>)
    afc0:	40a3      	lsls	r3, r4
	z_nrf_rtc_timer_chan_free(channels.ch.rtc);
    afc2:	4628      	mov	r0, r5
    afc4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    afc8:	f00b fe34 	bl	16c34 <z_nrf_rtc_timer_chan_free>
	err = nrfx_dppi_channel_free(channels.ch.ppi);
    afcc:	4620      	mov	r0, r4
}
    afce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	err = nrfx_dppi_channel_free(channels.ch.ppi);
    afd2:	f00c bb03 	b.w	175dc <nrfx_dppi_channel_free>
    afd6:	bf00      	nop
    afd8:	4002a080 	.word	0x4002a080
    afdc:	40017000 	.word	0x40017000

0000afe0 <mbox_callback>:
{
    afe0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    afe2:	4614      	mov	r4, r2
	if (api->set_enabled == NULL) {
    afe4:	6883      	ldr	r3, [r0, #8]
    afe6:	691b      	ldr	r3, [r3, #16]
    afe8:	b10b      	cbz	r3, afee <mbox_callback+0xe>
	return api->set_enabled(channel->dev, channel->id, enable);
    afea:	2200      	movs	r2, #0
    afec:	4798      	blx	r3
	cc = z_nrf_rtc_timer_compare_read(channels.ch.rtc);
    afee:	f3c4 2607 	ubfx	r6, r4, #8, #8
    aff2:	4630      	mov	r0, r6
    aff4:	f00b fc70 	bl	168d8 <z_nrf_rtc_timer_compare_read>
    aff8:	4605      	mov	r5, r0
	uint32_t task_addr = z_nrf_rtc_timer_capture_task_address_get(channels.ch.rtc);
    affa:	4630      	mov	r0, r6
    affc:	f012 ff83 	bl	1df06 <z_nrf_rtc_timer_capture_task_address_get>

__STATIC_INLINE void nrfx_gppi_task_endpoint_clear(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    (void)channel;
    *((volatile uint32_t *)(tep + 0x80uL)) = 0;
    b000:	2700      	movs	r7, #0
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) = 0;
    b002:	4b10      	ldr	r3, [pc, #64]	; (b044 <mbox_callback+0x64>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    b004:	0e22      	lsrs	r2, r4, #24
    b006:	0092      	lsls	r2, r2, #2
    b008:	f8c0 7080 	str.w	r7, [r0, #128]	; 0x80
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) = 0;
    b00c:	509f      	str	r7, [r3, r2]
	uint32_t evt_addr = z_nrf_rtc_timer_compare_evt_address_get(channels.ch.rtc);
    b00e:	4630      	mov	r0, r6
    b010:	f00b fc5a 	bl	168c8 <z_nrf_rtc_timer_compare_evt_address_get>
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    b014:	0ba2      	lsrs	r2, r4, #14
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    b016:	4b0c      	ldr	r3, [pc, #48]	; (b048 <mbox_callback+0x68>)
    b018:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    b01c:	4413      	add	r3, r2
            ((uint32_t)channel | IPC_SUBSCRIBE_SEND_EN_Msk);
    b01e:	b2e2      	uxtb	r2, r4
    b020:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    b024:	601a      	str	r2, [r3, #0]
		z_nrf_rtc_timer_set(channels.ch.rtc, cc + cc + RTC_SYNC_ARBITRARY_DELAY,
    b026:	4b09      	ldr	r3, [pc, #36]	; (b04c <mbox_callback+0x6c>)
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    b028:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    b02c:	f105 0232 	add.w	r2, r5, #50	; 0x32
    b030:	9300      	str	r3, [sp, #0]
    b032:	4630      	mov	r0, r6
    b034:	463b      	mov	r3, r7
    b036:	9401      	str	r4, [sp, #4]
    b038:	0052      	lsls	r2, r2, #1
    b03a:	f012 ff6d 	bl	1df18 <z_nrf_rtc_timer_set>
}
    b03e:	b003      	add	sp, #12
    b040:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b042:	bf00      	nop
    b044:	4002a180 	.word	0x4002a180
    b048:	4002a080 	.word	0x4002a080
    b04c:	0000af9d 	.word	0x0000af9d

0000b050 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    b050:	f012 bfdb 	b.w	1e00a <SystemInit>

0000b054 <activate_foreach_backend>:
		z_log_runtime_filters_init();
	}
}

static uint32_t activate_foreach_backend(uint32_t mask)
{
    b054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b058:	4604      	mov	r4, r0
	uint32_t mask_cpy = mask;

	while (mask_cpy) {
    b05a:	4607      	mov	r7, r0
		uint32_t i = __builtin_ctz(mask_cpy);
		const struct log_backend *backend = log_backend_get(i);

		mask_cpy &= ~BIT(i);
    b05c:	f04f 0901 	mov.w	r9, #1
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    b060:	f8df 8050 	ldr.w	r8, [pc, #80]	; b0b4 <activate_foreach_backend+0x60>
	while (mask_cpy) {
    b064:	b914      	cbnz	r4, b06c <activate_foreach_backend+0x18>
					   CONFIG_LOG_MAX_LEVEL);
		}
	}

	return mask;
}
    b066:	4638      	mov	r0, r7
    b068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
    b06c:	fa94 f5a4 	rbit	r5, r4
    b070:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
    b074:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    b078:	012e      	lsls	r6, r5, #4
    b07a:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
    b07e:	ea6f 0a03 	mvn.w	sl, r3
    b082:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    b086:	7b2b      	ldrb	r3, [r5, #12]
    b088:	2b00      	cmp	r3, #0
    b08a:	d0eb      	beq.n	b064 <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
    b08c:	f858 3006 	ldr.w	r3, [r8, r6]
    b090:	691b      	ldr	r3, [r3, #16]
    b092:	b94b      	cbnz	r3, b0a8 <activate_foreach_backend+0x54>
					   backend->cb->ctx,
    b094:	4446      	add	r6, r8
			log_backend_enable(backend,
    b096:	6873      	ldr	r3, [r6, #4]
    b098:	2204      	movs	r2, #4
    b09a:	4628      	mov	r0, r5
    b09c:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
    b09e:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
    b0a2:	f000 fa49 	bl	b538 <log_backend_enable>
    b0a6:	e7dd      	b.n	b064 <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
    b0a8:	4628      	mov	r0, r5
    b0aa:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    b0ac:	2800      	cmp	r0, #0
    b0ae:	d1d9      	bne.n	b064 <activate_foreach_backend+0x10>
    b0b0:	e7f0      	b.n	b094 <activate_foreach_backend+0x40>
    b0b2:	bf00      	nop
    b0b4:	0001fd34 	.word	0x0001fd34

0000b0b8 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    b0b8:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    b0ba:	2200      	movs	r2, #0
{
    b0bc:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    b0be:	490f      	ldr	r1, [pc, #60]	; (b0fc <enable_logger+0x44>)
    b0c0:	480f      	ldr	r0, [pc, #60]	; (b100 <enable_logger+0x48>)
    b0c2:	f014 f992 	bl	1f3ea <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    b0c6:	2200      	movs	r2, #0
    b0c8:	2300      	movs	r3, #0
    b0ca:	2400      	movs	r4, #0
    b0cc:	e9cd 2306 	strd	r2, r3, [sp, #24]
    b0d0:	230e      	movs	r3, #14
    b0d2:	4d0c      	ldr	r5, [pc, #48]	; (b104 <enable_logger+0x4c>)
    b0d4:	e9cd 3403 	strd	r3, r4, [sp, #12]
    b0d8:	f44f 7240 	mov.w	r2, #768	; 0x300
    b0dc:	4628      	mov	r0, r5
    b0de:	e9cd 4401 	strd	r4, r4, [sp, #4]
    b0e2:	4b09      	ldr	r3, [pc, #36]	; (b108 <enable_logger+0x50>)
    b0e4:	4909      	ldr	r1, [pc, #36]	; (b10c <enable_logger+0x54>)
    b0e6:	9400      	str	r4, [sp, #0]
    b0e8:	f00d fc16 	bl	18918 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    b0ec:	4908      	ldr	r1, [pc, #32]	; (b110 <enable_logger+0x58>)
    b0ee:	4628      	mov	r0, r5
    b0f0:	f013 fdf0 	bl	1ecd4 <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
    b0f4:	4620      	mov	r0, r4
    b0f6:	b009      	add	sp, #36	; 0x24
    b0f8:	bd30      	pop	{r4, r5, pc}
    b0fa:	bf00      	nop
    b0fc:	0000b115 	.word	0x0000b115
    b100:	20008ee0 	.word	0x20008ee0
    b104:	20008a50 	.word	0x20008a50
    b108:	0000b3e5 	.word	0x0000b3e5
    b10c:	2000ac78 	.word	0x2000ac78
    b110:	00020caa 	.word	0x00020caa

0000b114 <log_process_thread_timer_expiry_fn>:
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    b114:	4801      	ldr	r0, [pc, #4]	; (b11c <log_process_thread_timer_expiry_fn+0x8>)
    b116:	f00d bd8d 	b.w	18c34 <z_impl_k_sem_give>
    b11a:	bf00      	nop
    b11c:	20008724 	.word	0x20008724

0000b120 <z_log_init>:
{
    b120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b124:	4680      	mov	r8, r0
	if (atomic_inc(&initialized) != 0) {
    b126:	481f      	ldr	r0, [pc, #124]	; (b1a4 <z_log_init+0x84>)
{
    b128:	460f      	mov	r7, r1
	if (atomic_inc(&initialized) != 0) {
    b12a:	f00f fca6 	bl	1aa7a <atomic_inc>
    b12e:	4606      	mov	r6, r0
    b130:	2800      	cmp	r0, #0
    b132:	d030      	beq.n	b196 <z_log_init+0x76>
	uint32_t mask = 0;
    b134:	2500      	movs	r5, #0
}
    b136:	4628      	mov	r0, r5
    b138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
    b13c:	7b23      	ldrb	r3, [r4, #12]
    b13e:	b173      	cbz	r3, b15e <z_log_init+0x3e>
	if (backend->api->init) {
    b140:	6823      	ldr	r3, [r4, #0]
    b142:	68db      	ldr	r3, [r3, #12]
    b144:	b10b      	cbz	r3, b14a <z_log_init+0x2a>
		backend->api->init(backend);
    b146:	4620      	mov	r0, r4
    b148:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
    b14a:	6823      	ldr	r3, [r4, #0]
    b14c:	691b      	ldr	r3, [r3, #16]
    b14e:	b9d3      	cbnz	r3, b186 <z_log_init+0x66>
				log_backend_enable(backend,
    b150:	6863      	ldr	r3, [r4, #4]
    b152:	2204      	movs	r2, #4
    b154:	4620      	mov	r0, r4
    b156:	6819      	ldr	r1, [r3, #0]
    b158:	f000 f9ee 	bl	b538 <log_backend_enable>
			i++;
    b15c:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    b15e:	3410      	adds	r4, #16
    b160:	454c      	cmp	r4, r9
    b162:	d3eb      	bcc.n	b13c <z_log_init+0x1c>
	if (blocking) {
    b164:	f1b8 0f00 	cmp.w	r8, #0
    b168:	d0e5      	beq.n	b136 <z_log_init+0x16>
		while (mask) {
    b16a:	2d00      	cmp	r5, #0
    b16c:	d0e2      	beq.n	b134 <z_log_init+0x14>
			mask = activate_foreach_backend(mask);
    b16e:	4628      	mov	r0, r5
    b170:	f7ff ff70 	bl	b054 <activate_foreach_backend>
    b174:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    b176:	2f00      	cmp	r7, #0
    b178:	d0f7      	beq.n	b16a <z_log_init+0x4a>
	return z_impl_k_sleep(timeout);
    b17a:	2100      	movs	r1, #0
    b17c:	f44f 70a4 	mov.w	r0, #328	; 0x148
    b180:	f00e fa7c 	bl	1967c <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
    b184:	e7f1      	b.n	b16a <z_log_init+0x4a>
		return backend->api->is_ready(backend);
    b186:	4620      	mov	r0, r4
    b188:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    b18a:	2800      	cmp	r0, #0
    b18c:	d0e0      	beq.n	b150 <z_log_init+0x30>
				mask |= BIT(i);
    b18e:	fa0a f306 	lsl.w	r3, sl, r6
    b192:	431d      	orrs	r5, r3
    b194:	e7e2      	b.n	b15c <z_log_init+0x3c>
	uint32_t mask = 0;
    b196:	4605      	mov	r5, r0
				mask |= BIT(i);
    b198:	f04f 0a01 	mov.w	sl, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    b19c:	4c02      	ldr	r4, [pc, #8]	; (b1a8 <z_log_init+0x88>)
    b19e:	f8df 900c 	ldr.w	r9, [pc, #12]	; b1ac <z_log_init+0x8c>
    b1a2:	e7dd      	b.n	b160 <z_log_init+0x40>
    b1a4:	20009ad4 	.word	0x20009ad4
    b1a8:	0001fd34 	.word	0x0001fd34
    b1ac:	0001fd44 	.word	0x0001fd44

0000b1b0 <log_format_func_t_get>:
}
    b1b0:	4b01      	ldr	r3, [pc, #4]	; (b1b8 <log_format_func_t_get+0x8>)
    b1b2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    b1b6:	4770      	bx	lr
    b1b8:	0001fe74 	.word	0x0001fe74

0000b1bc <log_set_timestamp_func>:
{
    b1bc:	b508      	push	{r3, lr}
    b1be:	4603      	mov	r3, r0
    b1c0:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
    b1c2:	b12b      	cbz	r3, b1d0 <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
    b1c4:	4a04      	ldr	r2, [pc, #16]	; (b1d8 <log_set_timestamp_func+0x1c>)
    b1c6:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
    b1c8:	f000 fbf2 	bl	b9b0 <log_output_timestamp_freq_set>
	return 0;
    b1cc:	2000      	movs	r0, #0
}
    b1ce:	bd08      	pop	{r3, pc}
		return -EINVAL;
    b1d0:	f06f 0015 	mvn.w	r0, #21
    b1d4:	e7fb      	b.n	b1ce <log_set_timestamp_func+0x12>
    b1d6:	bf00      	nop
    b1d8:	200082e0 	.word	0x200082e0

0000b1dc <z_log_notify_backend_enabled>:
{
    b1dc:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    b1de:	4c04      	ldr	r4, [pc, #16]	; (b1f0 <z_log_notify_backend_enabled+0x14>)
    b1e0:	7823      	ldrb	r3, [r4, #0]
    b1e2:	b913      	cbnz	r3, b1ea <z_log_notify_backend_enabled+0xe>
	z_impl_k_sem_give(sem);
    b1e4:	4803      	ldr	r0, [pc, #12]	; (b1f4 <z_log_notify_backend_enabled+0x18>)
    b1e6:	f00d fd25 	bl	18c34 <z_impl_k_sem_give>
	backend_attached = true;
    b1ea:	2301      	movs	r3, #1
    b1ec:	7023      	strb	r3, [r4, #0]
}
    b1ee:	bd10      	pop	{r4, pc}
    b1f0:	20009f8a 	.word	0x20009f8a
    b1f4:	20008724 	.word	0x20008724

0000b1f8 <z_log_dropped>:
{
    b1f8:	b510      	push	{r4, lr}
    b1fa:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
    b1fc:	4806      	ldr	r0, [pc, #24]	; (b218 <z_log_dropped+0x20>)
    b1fe:	f00f fc3c 	bl	1aa7a <atomic_inc>
	if (buffered) {
    b202:	b13c      	cbz	r4, b214 <z_log_dropped+0x1c>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    b204:	4b05      	ldr	r3, [pc, #20]	; (b21c <z_log_dropped+0x24>)
    b206:	e8d3 1fef 	ldaex	r1, [r3]
    b20a:	3901      	subs	r1, #1
    b20c:	e8c3 1fe2 	stlex	r2, r1, [r3]
    b210:	2a00      	cmp	r2, #0
    b212:	d1f8      	bne.n	b206 <z_log_dropped+0xe>
}
    b214:	bd10      	pop	{r4, pc}
    b216:	bf00      	nop
    b218:	20009acc 	.word	0x20009acc
    b21c:	20009ad0 	.word	0x20009ad0

0000b220 <z_log_dropped_read_and_clear>:
}
    b220:	2000      	movs	r0, #0
    b222:	4601      	mov	r1, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    b224:	4b03      	ldr	r3, [pc, #12]	; (b234 <z_log_dropped_read_and_clear+0x14>)
    b226:	e8d3 0fef 	ldaex	r0, [r3]
    b22a:	e8c3 1fe2 	stlex	r2, r1, [r3]
    b22e:	2a00      	cmp	r2, #0
    b230:	d1f9      	bne.n	b226 <z_log_dropped_read_and_clear+0x6>
    b232:	4770      	bx	lr
    b234:	20009acc 	.word	0x20009acc

0000b238 <dropped_notify>:
{
    b238:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    b23a:	f7ff fff1 	bl	b220 <z_log_dropped_read_and_clear>
    b23e:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    b240:	4c07      	ldr	r4, [pc, #28]	; (b260 <dropped_notify+0x28>)
    b242:	4e08      	ldr	r6, [pc, #32]	; (b264 <dropped_notify+0x2c>)
    b244:	42b4      	cmp	r4, r6
    b246:	d300      	bcc.n	b24a <dropped_notify+0x12>
}
    b248:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    b24a:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    b24c:	795b      	ldrb	r3, [r3, #5]
    b24e:	b12b      	cbz	r3, b25c <dropped_notify+0x24>
	if (backend->api->dropped != NULL) {
    b250:	6823      	ldr	r3, [r4, #0]
    b252:	685b      	ldr	r3, [r3, #4]
    b254:	b113      	cbz	r3, b25c <dropped_notify+0x24>
		backend->api->dropped(backend, cnt);
    b256:	4629      	mov	r1, r5
    b258:	4620      	mov	r0, r4
    b25a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    b25c:	3410      	adds	r4, #16
    b25e:	e7f1      	b.n	b244 <dropped_notify+0xc>
    b260:	0001fd34 	.word	0x0001fd34
    b264:	0001fd44 	.word	0x0001fd44

0000b268 <z_log_msg_init>:
{
    b268:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    b26a:	4c04      	ldr	r4, [pc, #16]	; (b27c <z_log_msg_init+0x14>)
    b26c:	4904      	ldr	r1, [pc, #16]	; (b280 <z_log_msg_init+0x18>)
    b26e:	4620      	mov	r0, r4
    b270:	f00f fa5c 	bl	1a72c <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
    b274:	4b03      	ldr	r3, [pc, #12]	; (b284 <z_log_msg_init+0x1c>)
    b276:	601c      	str	r4, [r3, #0]
}
    b278:	bd10      	pop	{r4, pc}
    b27a:	bf00      	nop
    b27c:	2000864c 	.word	0x2000864c
    b280:	0001fe60 	.word	0x0001fe60
    b284:	20009ac4 	.word	0x20009ac4

0000b288 <log_core_init>:
{
    b288:	b508      	push	{r3, lr}
	panic_mode = false;
    b28a:	2300      	movs	r3, #0
    b28c:	4a06      	ldr	r2, [pc, #24]	; (b2a8 <log_core_init+0x20>)
		log_set_timestamp_func(default_get_timestamp,
    b28e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	panic_mode = false;
    b292:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    b294:	4a05      	ldr	r2, [pc, #20]	; (b2ac <log_core_init+0x24>)
		log_set_timestamp_func(default_get_timestamp,
    b296:	4806      	ldr	r0, [pc, #24]	; (b2b0 <log_core_init+0x28>)
	dropped_cnt = 0;
    b298:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
    b29a:	f7ff ff8f 	bl	b1bc <log_set_timestamp_func>
}
    b29e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
    b2a2:	f7ff bfe1 	b.w	b268 <z_log_msg_init>
    b2a6:	bf00      	nop
    b2a8:	20009f8b 	.word	0x20009f8b
    b2ac:	20009acc 	.word	0x20009acc
    b2b0:	0001aa77 	.word	0x0001aa77

0000b2b4 <z_log_msg_alloc>:
{
    b2b4:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
    b2b6:	2200      	movs	r2, #0
    b2b8:	2300      	movs	r3, #0
    b2ba:	4801      	ldr	r0, [pc, #4]	; (b2c0 <z_log_msg_alloc+0xc>)
    b2bc:	f00f ba57 	b.w	1a76e <mpsc_pbuf_alloc>
    b2c0:	2000864c 	.word	0x2000864c

0000b2c4 <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
    b2c4:	4801      	ldr	r0, [pc, #4]	; (b2cc <z_log_msg_local_claim+0x8>)
    b2c6:	f00f baf0 	b.w	1a8aa <mpsc_pbuf_claim>
    b2ca:	bf00      	nop
    b2cc:	2000864c 	.word	0x2000864c

0000b2d0 <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
    b2d0:	4b02      	ldr	r3, [pc, #8]	; (b2dc <z_log_msg_free+0xc>)
{
    b2d2:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
    b2d4:	6818      	ldr	r0, [r3, #0]
    b2d6:	f00f bb38 	b.w	1a94a <mpsc_pbuf_free>
    b2da:	bf00      	nop
    b2dc:	20009ac4 	.word	0x20009ac4

0000b2e0 <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
    b2e0:	4801      	ldr	r0, [pc, #4]	; (b2e8 <z_log_msg_pending+0x8>)
    b2e2:	f00f bb66 	b.w	1a9b2 <mpsc_pbuf_is_pending>
    b2e6:	bf00      	nop
    b2e8:	2000864c 	.word	0x2000864c

0000b2ec <z_impl_log_process>:
{
    b2ec:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
    b2ee:	4b26      	ldr	r3, [pc, #152]	; (b388 <z_impl_log_process+0x9c>)
    b2f0:	7818      	ldrb	r0, [r3, #0]
    b2f2:	2800      	cmp	r0, #0
    b2f4:	d047      	beq.n	b386 <z_impl_log_process+0x9a>
	return z_log_msg_local_claim();
    b2f6:	f7ff ffe5 	bl	b2c4 <z_log_msg_local_claim>
	if (msg) {
    b2fa:	4605      	mov	r5, r0
    b2fc:	b170      	cbz	r0, b31c <z_impl_log_process+0x30>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    b2fe:	4b23      	ldr	r3, [pc, #140]	; (b38c <z_impl_log_process+0xa0>)
    b300:	e8d3 1fef 	ldaex	r1, [r3]
    b304:	3901      	subs	r1, #1
    b306:	e8c3 1fe2 	stlex	r2, r1, [r3]
    b30a:	2a00      	cmp	r2, #0
    b30c:	d1f8      	bne.n	b300 <z_impl_log_process+0x14>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    b30e:	4c20      	ldr	r4, [pc, #128]	; (b390 <z_impl_log_process+0xa4>)
    b310:	4e20      	ldr	r6, [pc, #128]	; (b394 <z_impl_log_process+0xa8>)
    b312:	42b4      	cmp	r4, r6
    b314:	d32d      	bcc.n	b372 <z_impl_log_process+0x86>
		z_log_msg_free(msg);
    b316:	4628      	mov	r0, r5
    b318:	f7ff ffda 	bl	b2d0 <z_log_msg_free>
	return dropped_cnt > 0;
    b31c:	4b1e      	ldr	r3, [pc, #120]	; (b398 <z_impl_log_process+0xac>)
    b31e:	4c1f      	ldr	r4, [pc, #124]	; (b39c <z_impl_log_process+0xb0>)
		if ((dropped_pend || unordered_pend) &&
    b320:	681b      	ldr	r3, [r3, #0]
    b322:	2b00      	cmp	r3, #0
    b324:	dd19      	ble.n	b35a <z_impl_log_process+0x6e>
	return z_impl_k_uptime_ticks();
    b326:	f014 f838 	bl	1f39a <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    b32a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b32e:	fba0 0302 	umull	r0, r3, r0, r2
    b332:	fb02 3101 	mla	r1, r2, r1, r3
    b336:	0bc3      	lsrs	r3, r0, #15
    b338:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    b33c:	e9d4 2000 	ldrd	r2, r0, [r4]
    b340:	1a9b      	subs	r3, r3, r2
		if ((dropped_pend || unordered_pend) &&
    b342:	f240 32e9 	movw	r2, #1001	; 0x3e9
    b346:	ea4f 31d1 	mov.w	r1, r1, lsr #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    b34a:	eb61 0100 	sbc.w	r1, r1, r0
		if ((dropped_pend || unordered_pend) &&
    b34e:	4293      	cmp	r3, r2
    b350:	f171 0100 	sbcs.w	r1, r1, #0
    b354:	d301      	bcc.n	b35a <z_impl_log_process+0x6e>
				dropped_notify();
    b356:	f7ff ff6f 	bl	b238 <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
    b35a:	e9d4 3200 	ldrd	r3, r2, [r4]
    b35e:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
    b362:	f142 0200 	adc.w	r2, r2, #0
    b366:	e9c4 3200 	strd	r3, r2, [r4]
}
    b36a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_log_msg_pending();
    b36e:	f7ff bfb7 	b.w	b2e0 <z_log_msg_pending>
	return backend->cb->active;
    b372:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
    b374:	795b      	ldrb	r3, [r3, #5]
    b376:	b123      	cbz	r3, b382 <z_impl_log_process+0x96>
	backend->api->process(backend, msg);
    b378:	6823      	ldr	r3, [r4, #0]
    b37a:	4629      	mov	r1, r5
    b37c:	4620      	mov	r0, r4
    b37e:	681b      	ldr	r3, [r3, #0]
    b380:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    b382:	3410      	adds	r4, #16
    b384:	e7c5      	b.n	b312 <z_impl_log_process+0x26>
}
    b386:	bd70      	pop	{r4, r5, r6, pc}
    b388:	20009f8a 	.word	0x20009f8a
    b38c:	20009ad0 	.word	0x20009ad0
    b390:	0001fd34 	.word	0x0001fd34
    b394:	0001fd44 	.word	0x0001fd44
    b398:	20009acc 	.word	0x20009acc
    b39c:	20008ed8 	.word	0x20008ed8

0000b3a0 <z_impl_log_panic>:
{
    b3a0:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
    b3a2:	4d0d      	ldr	r5, [pc, #52]	; (b3d8 <z_impl_log_panic+0x38>)
    b3a4:	7829      	ldrb	r1, [r5, #0]
    b3a6:	b961      	cbnz	r1, b3c2 <z_impl_log_panic+0x22>
	(void)z_log_init(true, false);
    b3a8:	2001      	movs	r0, #1
    b3aa:	f7ff feb9 	bl	b120 <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    b3ae:	4c0b      	ldr	r4, [pc, #44]	; (b3dc <z_impl_log_panic+0x3c>)
    b3b0:	4e0b      	ldr	r6, [pc, #44]	; (b3e0 <z_impl_log_panic+0x40>)
    b3b2:	42b4      	cmp	r4, r6
    b3b4:	d306      	bcc.n	b3c4 <z_impl_log_panic+0x24>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
    b3b6:	f7ff ff99 	bl	b2ec <z_impl_log_process>
		while (log_process() == true) {
    b3ba:	2800      	cmp	r0, #0
    b3bc:	d1fb      	bne.n	b3b6 <z_impl_log_panic+0x16>
	panic_mode = true;
    b3be:	2301      	movs	r3, #1
    b3c0:	702b      	strb	r3, [r5, #0]
}
    b3c2:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
    b3c4:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    b3c6:	795b      	ldrb	r3, [r3, #5]
    b3c8:	b11b      	cbz	r3, b3d2 <z_impl_log_panic+0x32>
	backend->api->panic(backend);
    b3ca:	6823      	ldr	r3, [r4, #0]
    b3cc:	4620      	mov	r0, r4
    b3ce:	689b      	ldr	r3, [r3, #8]
    b3d0:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    b3d2:	3410      	adds	r4, #16
    b3d4:	e7ed      	b.n	b3b2 <z_impl_log_panic+0x12>
    b3d6:	bf00      	nop
    b3d8:	20009f8b 	.word	0x20009f8b
    b3dc:	0001fd34 	.word	0x0001fd34
    b3e0:	0001fd44 	.word	0x0001fd44

0000b3e4 <log_process_thread_func>:
	uint32_t activate_mask = z_log_init(false, false);
    b3e4:	2100      	movs	r1, #0
{
    b3e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t activate_mask = z_log_init(false, false);
    b3ea:	4608      	mov	r0, r1
    b3ec:	f7ff fe98 	bl	b120 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    b3f0:	4604      	mov	r4, r0
    b3f2:	b348      	cbz	r0, b448 <log_process_thread_func+0x64>
    b3f4:	f240 6867 	movw	r8, #1639	; 0x667
    b3f8:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
    b3fc:	f00e f958 	bl	196b0 <z_impl_z_current_get>
	proc_tid = process_tid;
    b400:	4b1a      	ldr	r3, [pc, #104]	; (b46c <log_process_thread_func+0x88>)
    b402:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    b404:	b130      	cbz	r0, b414 <log_process_thread_func+0x30>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    b406:	4b1a      	ldr	r3, [pc, #104]	; (b470 <log_process_thread_func+0x8c>)
	    process_tid &&
    b408:	681b      	ldr	r3, [r3, #0]
    b40a:	2b09      	cmp	r3, #9
    b40c:	dd02      	ble.n	b414 <log_process_thread_func+0x30>
	z_impl_k_sem_give(sem);
    b40e:	4819      	ldr	r0, [pc, #100]	; (b474 <log_process_thread_func+0x90>)
    b410:	f00d fc10 	bl	18c34 <z_impl_k_sem_give>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    b414:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    b416:	4f18      	ldr	r7, [pc, #96]	; (b478 <log_process_thread_func+0x94>)
	return z_impl_k_sem_take(sem, timeout);
    b418:	f8df a058 	ldr.w	sl, [pc, #88]	; b474 <log_process_thread_func+0x90>
		if (activate_mask) {
    b41c:	b144      	cbz	r4, b430 <log_process_thread_func+0x4c>
			activate_mask = activate_foreach_backend(activate_mask);
    b41e:	4620      	mov	r0, r4
    b420:	f7ff fe18 	bl	b054 <activate_foreach_backend>
			if (!activate_mask) {
    b424:	4604      	mov	r4, r0
    b426:	b918      	cbnz	r0, b430 <log_process_thread_func+0x4c>
				timeout = K_FOREVER;
    b428:	f04f 38ff 	mov.w	r8, #4294967295
    b42c:	f04f 39ff 	mov.w	r9, #4294967295
    b430:	f7ff ff5c 	bl	b2ec <z_impl_log_process>
		if (log_process() == false) {
    b434:	4606      	mov	r6, r0
    b436:	b928      	cbnz	r0, b444 <log_process_thread_func+0x60>
			if (processed_any) {
    b438:	b9b5      	cbnz	r5, b468 <log_process_thread_func+0x84>
    b43a:	4642      	mov	r2, r8
    b43c:	464b      	mov	r3, r9
    b43e:	4650      	mov	r0, sl
    b440:	f00d fc1e 	bl	18c80 <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    b444:	4635      	mov	r5, r6
    b446:	e7e9      	b.n	b41c <log_process_thread_func+0x38>
    b448:	f04f 38ff 	mov.w	r8, #4294967295
    b44c:	f04f 39ff 	mov.w	r9, #4294967295
    b450:	e7d4      	b.n	b3fc <log_process_thread_func+0x18>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
    b452:	682b      	ldr	r3, [r5, #0]
    b454:	699b      	ldr	r3, [r3, #24]
    b456:	b11b      	cbz	r3, b460 <log_process_thread_func+0x7c>
		backend->api->notify(backend, event, arg);
    b458:	2200      	movs	r2, #0
    b45a:	4628      	mov	r0, r5
    b45c:	4611      	mov	r1, r2
    b45e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    b460:	3510      	adds	r5, #16
    b462:	42bd      	cmp	r5, r7
    b464:	d3f5      	bcc.n	b452 <log_process_thread_func+0x6e>
    b466:	e7e8      	b.n	b43a <log_process_thread_func+0x56>
    b468:	4d04      	ldr	r5, [pc, #16]	; (b47c <log_process_thread_func+0x98>)
    b46a:	e7fa      	b.n	b462 <log_process_thread_func+0x7e>
    b46c:	20009ac8 	.word	0x20009ac8
    b470:	20009ad0 	.word	0x20009ad0
    b474:	20008724 	.word	0x20008724
    b478:	0001fd44 	.word	0x0001fd44
    b47c:	0001fd34 	.word	0x0001fd34

0000b480 <z_log_msg_post_finalize>:
{
    b480:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
    b482:	4818      	ldr	r0, [pc, #96]	; (b4e4 <z_log_msg_post_finalize+0x64>)
    b484:	f00f faf9 	bl	1aa7a <atomic_inc>
	if (panic_mode) {
    b488:	4b17      	ldr	r3, [pc, #92]	; (b4e8 <z_log_msg_post_finalize+0x68>)
    b48a:	781b      	ldrb	r3, [r3, #0]
    b48c:	b17b      	cbz	r3, b4ae <z_log_msg_post_finalize+0x2e>
	__asm__ volatile(
    b48e:	f04f 0320 	mov.w	r3, #32
    b492:	f3ef 8411 	mrs	r4, BASEPRI
    b496:	f383 8812 	msr	BASEPRI_MAX, r3
    b49a:	f3bf 8f6f 	isb	sy
    b49e:	f7ff ff25 	bl	b2ec <z_impl_log_process>
	__asm__ volatile(
    b4a2:	f384 8811 	msr	BASEPRI, r4
    b4a6:	f3bf 8f6f 	isb	sy
}
    b4aa:	b002      	add	sp, #8
    b4ac:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
    b4ae:	4b0f      	ldr	r3, [pc, #60]	; (b4ec <z_log_msg_post_finalize+0x6c>)
    b4b0:	681b      	ldr	r3, [r3, #0]
    b4b2:	2b00      	cmp	r3, #0
    b4b4:	d0f9      	beq.n	b4aa <z_log_msg_post_finalize+0x2a>
		if (cnt == 0) {
    b4b6:	b950      	cbnz	r0, b4ce <z_log_msg_post_finalize+0x4e>
	z_impl_k_timer_start(timer, duration, period);
    b4b8:	2200      	movs	r2, #0
    b4ba:	2300      	movs	r3, #0
    b4bc:	480c      	ldr	r0, [pc, #48]	; (b4f0 <z_log_msg_post_finalize+0x70>)
    b4be:	e9cd 2300 	strd	r2, r3, [sp]
    b4c2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    b4c6:	2300      	movs	r3, #0
    b4c8:	f00e fb30 	bl	19b2c <z_impl_k_timer_start>
    b4cc:	e7ed      	b.n	b4aa <z_log_msg_post_finalize+0x2a>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    b4ce:	280a      	cmp	r0, #10
    b4d0:	d1eb      	bne.n	b4aa <z_log_msg_post_finalize+0x2a>
	z_impl_k_timer_stop(timer);
    b4d2:	4807      	ldr	r0, [pc, #28]	; (b4f0 <z_log_msg_post_finalize+0x70>)
    b4d4:	f013 ff95 	bl	1f402 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    b4d8:	4806      	ldr	r0, [pc, #24]	; (b4f4 <z_log_msg_post_finalize+0x74>)
}
    b4da:	b002      	add	sp, #8
    b4dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b4e0:	f00d bba8 	b.w	18c34 <z_impl_k_sem_give>
    b4e4:	20009ad0 	.word	0x20009ad0
    b4e8:	20009f8b 	.word	0x20009f8b
    b4ec:	20009ac8 	.word	0x20009ac8
    b4f0:	20008ee0 	.word	0x20008ee0
    b4f4:	20008724 	.word	0x20008724

0000b4f8 <z_log_msg_commit>:
{
    b4f8:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    b4fa:	4b06      	ldr	r3, [pc, #24]	; (b514 <z_log_msg_commit+0x1c>)
{
    b4fc:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    b4fe:	681b      	ldr	r3, [r3, #0]
    b500:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
    b502:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
    b504:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
    b506:	4804      	ldr	r0, [pc, #16]	; (b518 <z_log_msg_commit+0x20>)
    b508:	f00f f9af 	bl	1a86a <mpsc_pbuf_commit>
}
    b50c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
    b510:	f7ff bfb6 	b.w	b480 <z_log_msg_post_finalize>
    b514:	200082e0 	.word	0x200082e0
    b518:	2000864c 	.word	0x2000864c

0000b51c <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    b51c:	4a04      	ldr	r2, [pc, #16]	; (b530 <log_source_name_get+0x14>)
    b51e:	4b05      	ldr	r3, [pc, #20]	; (b534 <log_source_name_get+0x18>)
    b520:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
    b522:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
    b526:	bf34      	ite	cc
    b528:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
    b52c:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
    b52e:	4770      	bx	lr
    b530:	0001fc24 	.word	0x0001fc24
    b534:	0001fd34 	.word	0x0001fd34

0000b538 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    b538:	4b08      	ldr	r3, [pc, #32]	; (b55c <log_backend_enable+0x24>)
{
    b53a:	b410      	push	{r4}
	id += backend - log_backend_get(0);
    b53c:	1ac3      	subs	r3, r0, r3
	backend->cb->id = id;
    b53e:	6844      	ldr	r4, [r0, #4]
    b540:	111b      	asrs	r3, r3, #4
    b542:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
    b544:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
    b546:	6843      	ldr	r3, [r0, #4]
    b548:	719a      	strb	r2, [r3, #6]
	backend->cb->active = true;
    b54a:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
    b54c:	6843      	ldr	r3, [r0, #4]
    b54e:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    b550:	6843      	ldr	r3, [r0, #4]
    b552:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    b554:	bc10      	pop	{r4}
	z_log_notify_backend_enabled();
    b556:	f7ff be41 	b.w	b1dc <z_log_notify_backend_enabled>
    b55a:	bf00      	nop
    b55c:	0001fd34 	.word	0x0001fd34

0000b560 <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
    b560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    b564:	f3c1 44cb 	ubfx	r4, r1, #19, #12
    b568:	b08f      	sub	sp, #60	; 0x3c
    b56a:	f3c1 2649 	ubfx	r6, r1, #9, #10
    b56e:	460d      	mov	r5, r1
    b570:	4690      	mov	r8, r2
    b572:	4699      	mov	r9, r3
    b574:	9005      	str	r0, [sp, #20]
    b576:	3417      	adds	r4, #23

	struct log_msg_desc out_desc = desc;
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
    b578:	2e00      	cmp	r6, #0
    b57a:	d03c      	beq.n	b5f6 <z_impl_z_log_msg_static_create+0x96>
	return cbprintf_package_convert(in_packaged, in_len,
    b57c:	f04f 0b04 	mov.w	fp, #4
    b580:	f04f 0a0a 	mov.w	sl, #10
	struct z_cbprintf_buf_desc buf_desc = {
    b584:	2200      	movs	r2, #0
	return cbprintf_package_convert(in_packaged, in_len,
    b586:	af09      	add	r7, sp, #36	; 0x24
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
    b588:	4631      	mov	r1, r6
    b58a:	ab0b      	add	r3, sp, #44	; 0x2c
    b58c:	4640      	mov	r0, r8
    b58e:	f8cd b008 	str.w	fp, [sp, #8]
    b592:	9701      	str	r7, [sp, #4]
    b594:	f8cd a000 	str.w	sl, [sp]
	struct z_cbprintf_buf_desc buf_desc = {
    b598:	e9cd 220b 	strd	r2, r2, [sp, #44]	; 0x2c
    b59c:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
    b59e:	9607      	str	r6, [sp, #28]
    b5a0:	f7fe faf8 	bl	9b94 <cbprintf_package_convert>
					    strl, ARRAY_SIZE(strl));

		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
    b5a4:	f3c0 0309 	ubfx	r3, r0, #0, #10
    b5a8:	1918      	adds	r0, r3, r4
    b5aa:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    b5ae:	0880      	lsrs	r0, r0, #2
		out_desc.package_len = len;
    b5b0:	461e      	mov	r6, r3
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    b5b2:	f363 2552 	bfi	r5, r3, #9, #10
    b5b6:	9306      	str	r3, [sp, #24]
    b5b8:	f7ff fe7c 	bl	b2b4 <z_log_msg_alloc>
		if (msg) {
    b5bc:	4604      	mov	r4, r0
    b5be:	b178      	cbz	r0, b5e0 <z_impl_z_log_msg_static_create+0x80>
	struct z_cbprintf_buf_desc buf_desc = {
    b5c0:	2200      	movs	r2, #0
    b5c2:	9b06      	ldr	r3, [sp, #24]
			len = cbprintf_package_copy(package, inlen,
						    msg->data, out_desc.package_len,
    b5c4:	3010      	adds	r0, #16
    b5c6:	900b      	str	r0, [sp, #44]	; 0x2c
    b5c8:	930c      	str	r3, [sp, #48]	; 0x30
    b5ca:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
    b5cc:	4640      	mov	r0, r8
    b5ce:	e9cd 7b01 	strd	r7, fp, [sp, #4]
    b5d2:	4a0c      	ldr	r2, [pc, #48]	; (b604 <z_impl_z_log_msg_static_create+0xa4>)
    b5d4:	9907      	ldr	r1, [sp, #28]
    b5d6:	f8cd a000 	str.w	sl, [sp]
    b5da:	ab0b      	add	r3, sp, #44	; 0x2c
    b5dc:	f7fe fada 	bl	9b94 <cbprintf_package_convert>
		}
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
    b5e0:	f366 2552 	bfi	r5, r6, #9, #10
    b5e4:	464b      	mov	r3, r9
    b5e6:	462a      	mov	r2, r5
    b5e8:	4620      	mov	r0, r4
    b5ea:	9905      	ldr	r1, [sp, #20]
}
    b5ec:	b00f      	add	sp, #60	; 0x3c
    b5ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_log_msg_finalize(msg, source, out_desc, data);
    b5f2:	f00f ba66 	b.w	1aac2 <z_log_msg_finalize>
    b5f6:	f024 0007 	bic.w	r0, r4, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    b5fa:	0880      	lsrs	r0, r0, #2
    b5fc:	f7ff fe5a 	bl	b2b4 <z_log_msg_alloc>
    b600:	4604      	mov	r4, r0
    b602:	e7ed      	b.n	b5e0 <z_impl_z_log_msg_static_create+0x80>
    b604:	0001aa97 	.word	0x0001aa97

0000b608 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    b608:	b40e      	push	{r1, r2, r3}
    b60a:	b503      	push	{r0, r1, lr}
    b60c:	ab03      	add	r3, sp, #12
    b60e:	f853 2b04 	ldr.w	r2, [r3], #4
    b612:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    b614:	4804      	ldr	r0, [pc, #16]	; (b628 <print_formatted+0x20>)
	va_start(args, fmt);
    b616:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    b618:	f00f fa7a 	bl	1ab10 <cbvprintf>
	va_end(args);

	return length;
}
    b61c:	b002      	add	sp, #8
    b61e:	f85d eb04 	ldr.w	lr, [sp], #4
    b622:	b003      	add	sp, #12
    b624:	4770      	bx	lr
    b626:	bf00      	nop
    b628:	0001ab39 	.word	0x0001ab39

0000b62c <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    b62c:	06ca      	lsls	r2, r1, #27
    b62e:	d405      	bmi.n	b63c <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    b630:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
    b632:	bf4c      	ite	mi
    b634:	4902      	ldrmi	r1, [pc, #8]	; (b640 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
    b636:	4903      	ldrpl	r1, [pc, #12]	; (b644 <newline_print+0x18>)
    b638:	f7ff bfe6 	b.w	b608 <print_formatted>
	}
}
    b63c:	4770      	bx	lr
    b63e:	bf00      	nop
    b640:	00020925 	.word	0x00020925
    b644:	00023e98 	.word	0x00023e98

0000b648 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    b648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b64c:	b089      	sub	sp, #36	; 0x24
    b64e:	469b      	mov	fp, r3
    b650:	e9dd 7615 	ldrd	r7, r6, [sp, #84]	; 0x54
    b654:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    b658:	4604      	mov	r4, r0
    b65a:	9304      	str	r3, [sp, #16]
    b65c:	e9dd 9313 	ldrd	r9, r3, [sp, #76]	; 0x4c
    b660:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
    b662:	9b04      	ldr	r3, [sp, #16]
{
    b664:	460d      	mov	r5, r1
    b666:	9206      	str	r2, [sp, #24]
	if (!raw_string) {
    b668:	2b00      	cmp	r3, #0
    b66a:	f000 8087 	beq.w	b77c <log_output_process+0x134>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    b66e:	f006 0308 	and.w	r3, r6, #8
    b672:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
    b674:	f00f fa0d 	bl	1aa92 <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    b678:	f006 0a02 	and.w	sl, r6, #2
	if (tag) {
    b67c:	4602      	mov	r2, r0
    b67e:	2800      	cmp	r0, #0
    b680:	d04b      	beq.n	b71a <log_output_process+0xd2>
		length += print_formatted(output, "%s ", tag);
    b682:	4620      	mov	r0, r4
    b684:	4985      	ldr	r1, [pc, #532]	; (b89c <log_output_process+0x254>)
    b686:	f7ff ffbf 	bl	b608 <print_formatted>
    b68a:	4680      	mov	r8, r0
	if (stamp) {
    b68c:	f1ba 0f00 	cmp.w	sl, #0
    b690:	d008      	beq.n	b6a4 <log_output_process+0x5c>
	if (!format) {
    b692:	f016 0f44 	tst.w	r6, #68	; 0x44
    b696:	d142      	bne.n	b71e <log_output_process+0xd6>
		length = print_formatted(output, "[%08lu] ", timestamp);
    b698:	462a      	mov	r2, r5
    b69a:	4620      	mov	r0, r4
    b69c:	4980      	ldr	r1, [pc, #512]	; (b8a0 <log_output_process+0x258>)
    b69e:	f7ff ffb3 	bl	b608 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    b6a2:	4480      	add	r8, r0
	if (color) {
    b6a4:	f006 0301 	and.w	r3, r6, #1
    b6a8:	b15b      	cbz	r3, b6c2 <log_output_process+0x7a>
		const char *log_color = start && (colors[level] != NULL) ?
    b6aa:	4b7e      	ldr	r3, [pc, #504]	; (b8a4 <log_output_process+0x25c>)
    b6ac:	9a04      	ldr	r2, [sp, #16]
		print_formatted(output, "%s", log_color);
    b6ae:	4620      	mov	r0, r4
		const char *log_color = start && (colors[level] != NULL) ?
    b6b0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		print_formatted(output, "%s", log_color);
    b6b4:	4b7c      	ldr	r3, [pc, #496]	; (b8a8 <log_output_process+0x260>)
    b6b6:	497d      	ldr	r1, [pc, #500]	; (b8ac <log_output_process+0x264>)
    b6b8:	2a00      	cmp	r2, #0
    b6ba:	bf08      	it	eq
    b6bc:	461a      	moveq	r2, r3
    b6be:	f7ff ffa3 	bl	b608 <print_formatted>
	if (level_on) {
    b6c2:	f006 0308 	and.w	r3, r6, #8
    b6c6:	2b00      	cmp	r3, #0
    b6c8:	d055      	beq.n	b776 <log_output_process+0x12e>
		total += print_formatted(output, "<%s> ", severity[level]);
    b6ca:	4b79      	ldr	r3, [pc, #484]	; (b8b0 <log_output_process+0x268>)
    b6cc:	9a04      	ldr	r2, [sp, #16]
    b6ce:	4620      	mov	r0, r4
    b6d0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    b6d4:	4977      	ldr	r1, [pc, #476]	; (b8b4 <log_output_process+0x26c>)
    b6d6:	f7ff ff97 	bl	b608 <print_formatted>
    b6da:	4605      	mov	r5, r0
	if (domain) {
    b6dc:	9b06      	ldr	r3, [sp, #24]
    b6de:	b12b      	cbz	r3, b6ec <log_output_process+0xa4>
		total += print_formatted(output, "%s/", domain);
    b6e0:	461a      	mov	r2, r3
    b6e2:	4620      	mov	r0, r4
    b6e4:	4974      	ldr	r1, [pc, #464]	; (b8b8 <log_output_process+0x270>)
    b6e6:	f7ff ff8f 	bl	b608 <print_formatted>
    b6ea:	4405      	add	r5, r0
	if (source) {
    b6ec:	f1bb 0f00 	cmp.w	fp, #0
    b6f0:	d005      	beq.n	b6fe <log_output_process+0xb6>
		total += print_formatted(output,
    b6f2:	465a      	mov	r2, fp
    b6f4:	4620      	mov	r0, r4
    b6f6:	4971      	ldr	r1, [pc, #452]	; (b8bc <log_output_process+0x274>)
    b6f8:	f7ff ff86 	bl	b608 <print_formatted>
    b6fc:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
    b6fe:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
    b700:	f1b9 0f00 	cmp.w	r9, #0
    b704:	d149      	bne.n	b79a <log_output_process+0x152>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    b706:	2f00      	cmp	r7, #0
    b708:	d14f      	bne.n	b7aa <log_output_process+0x162>
	if (color) {
    b70a:	07f3      	lsls	r3, r6, #31
    b70c:	f100 80c0 	bmi.w	b890 <log_output_process+0x248>
	newline_print(output, flags);
    b710:	4631      	mov	r1, r6
    b712:	4620      	mov	r0, r4
    b714:	f7ff ff8a 	bl	b62c <newline_print>
}
    b718:	e0b4      	b.n	b884 <log_output_process+0x23c>
	uint32_t length = 0U;
    b71a:	4680      	mov	r8, r0
    b71c:	e7b6      	b.n	b68c <log_output_process+0x44>
	} else if (freq != 0U) {
    b71e:	4b68      	ldr	r3, [pc, #416]	; (b8c0 <log_output_process+0x278>)
    b720:	6818      	ldr	r0, [r3, #0]
    b722:	2800      	cmp	r0, #0
    b724:	d0bd      	beq.n	b6a2 <log_output_process+0x5a>
		timestamp /= timestamp_div;
    b726:	4b67      	ldr	r3, [pc, #412]	; (b8c4 <log_output_process+0x27c>)
		ms = (remainder * 1000U) / freq;
    b728:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		timestamp /= timestamp_div;
    b72c:	681b      	ldr	r3, [r3, #0]
    b72e:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    b732:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
    b736:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
    b73a:	fb00 5513 	mls	r5, r0, r3, r5
		ms = (remainder * 1000U) / freq;
    b73e:	fb0e f505 	mul.w	r5, lr, r5
    b742:	fbb3 faf2 	udiv	sl, r3, r2
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    b746:	fbb5 fcf0 	udiv	ip, r5, r0
		mins = seconds / 60U;
    b74a:	213c      	movs	r1, #60	; 0x3c
    b74c:	fb02 321a 	mls	r2, r2, sl, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    b750:	fb00 551c 	mls	r5, r0, ip, r5
		mins = seconds / 60U;
    b754:	fbb2 f3f1 	udiv	r3, r2, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    b758:	fb0e f505 	mul.w	r5, lr, r5
    b75c:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
    b760:	fb01 2213 	mls	r2, r1, r3, r2
    b764:	4620      	mov	r0, r4
    b766:	9200      	str	r2, [sp, #0]
    b768:	e9cd c501 	strd	ip, r5, [sp, #4]
    b76c:	4652      	mov	r2, sl
    b76e:	4956      	ldr	r1, [pc, #344]	; (b8c8 <log_output_process+0x280>)
    b770:	f7ff ff4a 	bl	b608 <print_formatted>
    b774:	e795      	b.n	b6a2 <log_output_process+0x5a>
	int total = 0;
    b776:	f006 0508 	and.w	r5, r6, #8
    b77a:	e7af      	b.n	b6dc <log_output_process+0x94>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    b77c:	f1bb 0f01 	cmp.w	fp, #1
    b780:	d106      	bne.n	b790 <log_output_process+0x148>
	if (package) {
    b782:	f1b9 0f00 	cmp.w	r9, #0
    b786:	d164      	bne.n	b852 <log_output_process+0x20a>
	if (data_len) {
    b788:	2f00      	cmp	r7, #0
    b78a:	d07b      	beq.n	b884 <log_output_process+0x23c>
		prefix_offset = 0;
    b78c:	2500      	movs	r5, #0
    b78e:	e00c      	b.n	b7aa <log_output_process+0x162>
	if (package) {
    b790:	f1b9 0f00 	cmp.w	r9, #0
    b794:	d0f8      	beq.n	b788 <log_output_process+0x140>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    b796:	484d      	ldr	r0, [pc, #308]	; (b8cc <log_output_process+0x284>)
    b798:	e05c      	b.n	b854 <log_output_process+0x20c>
		cb = out_func;
    b79a:	484d      	ldr	r0, [pc, #308]	; (b8d0 <log_output_process+0x288>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    b79c:	464b      	mov	r3, r9
    b79e:	4622      	mov	r2, r4
    b7a0:	494c      	ldr	r1, [pc, #304]	; (b8d4 <log_output_process+0x28c>)
    b7a2:	f00e fb41 	bl	19e28 <cbpprintf_external>
	if (data_len) {
    b7a6:	2f00      	cmp	r7, #0
    b7a8:	d068      	beq.n	b87c <log_output_process+0x234>
		print_formatted(output, " ");
    b7aa:	f8df 912c 	ldr.w	r9, [pc, #300]	; b8d8 <log_output_process+0x290>
			print_formatted(output, "%02x ", data[i]);
    b7ae:	f8df a12c 	ldr.w	sl, [pc, #300]	; b8dc <log_output_process+0x294>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    b7b2:	2f10      	cmp	r7, #16
	newline_print(output, flags);
    b7b4:	4631      	mov	r1, r6
    b7b6:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    b7b8:	46b8      	mov	r8, r7
	for (int i = 0; i < prefix_offset; i++) {
    b7ba:	f04f 0b00 	mov.w	fp, #0
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    b7be:	bf28      	it	cs
    b7c0:	f04f 0810 	movcs.w	r8, #16
	newline_print(output, flags);
    b7c4:	f7ff ff32 	bl	b62c <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    b7c8:	455d      	cmp	r5, fp
    b7ca:	dc45      	bgt.n	b858 <log_output_process+0x210>
			print_formatted(output, "%02x ", data[i]);
    b7cc:	9b05      	ldr	r3, [sp, #20]
    b7ce:	4651      	mov	r1, sl
    b7d0:	4620      	mov	r0, r4
    b7d2:	781a      	ldrb	r2, [r3, #0]
    b7d4:	f7ff ff18 	bl	b608 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    b7d8:	f04f 0b01 	mov.w	fp, #1
		if (i > 0 && !(i % 8)) {
    b7dc:	f01b 0f07 	tst.w	fp, #7
    b7e0:	d103      	bne.n	b7ea <log_output_process+0x1a2>
			print_formatted(output, " ");
    b7e2:	4649      	mov	r1, r9
    b7e4:	4620      	mov	r0, r4
    b7e6:	f7ff ff0f 	bl	b608 <print_formatted>
		if (i < length) {
    b7ea:	45d8      	cmp	r8, fp
    b7ec:	d93b      	bls.n	b866 <log_output_process+0x21e>
			print_formatted(output, "%02x ", data[i]);
    b7ee:	9b05      	ldr	r3, [sp, #20]
    b7f0:	4651      	mov	r1, sl
    b7f2:	4620      	mov	r0, r4
    b7f4:	f813 200b 	ldrb.w	r2, [r3, fp]
    b7f8:	f7ff ff06 	bl	b608 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    b7fc:	f10b 0b01 	add.w	fp, fp, #1
    b800:	f1bb 0f10 	cmp.w	fp, #16
    b804:	d1ea      	bne.n	b7dc <log_output_process+0x194>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    b806:	f04f 0b00 	mov.w	fp, #0
	print_formatted(output, "|");
    b80a:	4620      	mov	r0, r4
    b80c:	4934      	ldr	r1, [pc, #208]	; (b8e0 <log_output_process+0x298>)
    b80e:	f7ff fefb 	bl	b608 <print_formatted>
		if (i < length) {
    b812:	465a      	mov	r2, fp
			unsigned char c = (unsigned char)data[i];
    b814:	9b05      	ldr	r3, [sp, #20]
			print_formatted(output, "%c",
    b816:	4620      	mov	r0, r4
			unsigned char c = (unsigned char)data[i];
    b818:	5c9a      	ldrb	r2, [r3, r2]
	return (int)((((unsigned)c) >= ' ') &&
    b81a:	f1a2 0120 	sub.w	r1, r2, #32
			print_formatted(output, "%c",
    b81e:	295f      	cmp	r1, #95	; 0x5f
    b820:	bf28      	it	cs
    b822:	222e      	movcs	r2, #46	; 0x2e
    b824:	492f      	ldr	r1, [pc, #188]	; (b8e4 <log_output_process+0x29c>)
    b826:	f7ff feef 	bl	b608 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    b82a:	f10b 0b01 	add.w	fp, fp, #1
    b82e:	f1bb 0f10 	cmp.w	fp, #16
    b832:	d01d      	beq.n	b870 <log_output_process+0x228>
		if (i > 0 && !(i % 8)) {
    b834:	f01b 0f07 	tst.w	fp, #7
    b838:	d103      	bne.n	b842 <log_output_process+0x1fa>
			print_formatted(output, " ");
    b83a:	4649      	mov	r1, r9
    b83c:	4620      	mov	r0, r4
    b83e:	f7ff fee3 	bl	b608 <print_formatted>
		if (i < length) {
    b842:	45d8      	cmp	r8, fp
    b844:	465a      	mov	r2, fp
    b846:	d8e5      	bhi.n	b814 <log_output_process+0x1cc>
			print_formatted(output, " ");
    b848:	4649      	mov	r1, r9
    b84a:	4620      	mov	r0, r4
    b84c:	f7ff fedc 	bl	b608 <print_formatted>
    b850:	e7eb      	b.n	b82a <log_output_process+0x1e2>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    b852:	481f      	ldr	r0, [pc, #124]	; (b8d0 <log_output_process+0x288>)
		prefix_offset = 0;
    b854:	9d04      	ldr	r5, [sp, #16]
    b856:	e7a1      	b.n	b79c <log_output_process+0x154>
		print_formatted(output, " ");
    b858:	4649      	mov	r1, r9
    b85a:	4620      	mov	r0, r4
    b85c:	f7ff fed4 	bl	b608 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    b860:	f10b 0b01 	add.w	fp, fp, #1
    b864:	e7b0      	b.n	b7c8 <log_output_process+0x180>
			print_formatted(output, "   ");
    b866:	4620      	mov	r0, r4
    b868:	491f      	ldr	r1, [pc, #124]	; (b8e8 <log_output_process+0x2a0>)
    b86a:	f7ff fecd 	bl	b608 <print_formatted>
    b86e:	e7c5      	b.n	b7fc <log_output_process+0x1b4>
		data += length;
    b870:	9b05      	ldr	r3, [sp, #20]
	} while (len);
    b872:	ebb7 0708 	subs.w	r7, r7, r8
		data += length;
    b876:	4443      	add	r3, r8
    b878:	9305      	str	r3, [sp, #20]
	} while (len);
    b87a:	d19a      	bne.n	b7b2 <log_output_process+0x16a>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    b87c:	9b04      	ldr	r3, [sp, #16]
    b87e:	2b00      	cmp	r3, #0
    b880:	f47f af43 	bne.w	b70a <log_output_process+0xc2>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    b884:	4620      	mov	r0, r4
}
    b886:	b009      	add	sp, #36	; 0x24
    b888:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
    b88c:	f00f b947 	b.w	1ab1e <log_output_flush>
		print_formatted(output, "%s", log_color);
    b890:	4620      	mov	r0, r4
    b892:	4a05      	ldr	r2, [pc, #20]	; (b8a8 <log_output_process+0x260>)
    b894:	4905      	ldr	r1, [pc, #20]	; (b8ac <log_output_process+0x264>)
    b896:	f7ff feb7 	bl	b608 <print_formatted>
}
    b89a:	e739      	b.n	b710 <log_output_process+0xc8>
    b89c:	00020cc4 	.word	0x00020cc4
    b8a0:	00020cc8 	.word	0x00020cc8
    b8a4:	0001fe84 	.word	0x0001fe84
    b8a8:	00020cbf 	.word	0x00020cbf
    b8ac:	00021bc6 	.word	0x00021bc6
    b8b0:	0001fe98 	.word	0x0001fe98
    b8b4:	00020ced 	.word	0x00020ced
    b8b8:	00020cf3 	.word	0x00020cf3
    b8bc:	00020cf7 	.word	0x00020cf7
    b8c0:	20009adc 	.word	0x20009adc
    b8c4:	20009ad8 	.word	0x20009ad8
    b8c8:	00020cd1 	.word	0x00020cd1
    b8cc:	0001ab67 	.word	0x0001ab67
    b8d0:	0001ab39 	.word	0x0001ab39
    b8d4:	0001ab11 	.word	0x0001ab11
    b8d8:	00023e64 	.word	0x00023e64
    b8dc:	00020cfc 	.word	0x00020cfc
    b8e0:	00020d02 	.word	0x00020d02
    b8e4:	00020d04 	.word	0x00020d04
    b8e8:	00023e62 	.word	0x00023e62

0000b8ec <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    b8ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
    b8f0:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
    b8f2:	684b      	ldr	r3, [r1, #4]
    b8f4:	4605      	mov	r5, r0
    b8f6:	460c      	mov	r4, r1
    b8f8:	4690      	mov	r8, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    b8fa:	688e      	ldr	r6, [r1, #8]
    b8fc:	b086      	sub	sp, #24
	return msg->hdr.desc.level;
    b8fe:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
    b902:	b15b      	cbz	r3, b91c <log_output_msg_process+0x30>
    b904:	4a13      	ldr	r2, [pc, #76]	; (b954 <log_output_msg_process+0x68>)
    b906:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
    b908:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    b90c:	2900      	cmp	r1, #0
    b90e:	db1f      	blt.n	b950 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
    b910:	7820      	ldrb	r0, [r4, #0]
    b912:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    b916:	f7ff fe01 	bl	b51c <log_source_name_get>
    b91a:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    b91c:	4621      	mov	r1, r4
    b91e:	f851 2b10 	ldr.w	r2, [r1], #16
	*len = msg->hdr.desc.data_len;
    b922:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
    b924:	f3c2 2249 	ubfx	r2, r2, #9, #10
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    b928:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
    b92a:	eb01 0402 	add.w	r4, r1, r2
    b92e:	bf08      	it	eq
    b930:	2100      	moveq	r1, #0
	*len = msg->hdr.desc.data_len;
    b932:	f3c0 00cb 	ubfx	r0, r0, #3, #12
    b936:	e9cd 0803 	strd	r0, r8, [sp, #12]
    b93a:	e9cd 1401 	strd	r1, r4, [sp, #4]
    b93e:	2200      	movs	r2, #0
    b940:	4631      	mov	r1, r6
    b942:	4628      	mov	r0, r5
    b944:	9700      	str	r7, [sp, #0]
    b946:	f7ff fe7f 	bl	b648 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    b94a:	b006      	add	sp, #24
    b94c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    b950:	2300      	movs	r3, #0
    b952:	e7e3      	b.n	b91c <log_output_msg_process+0x30>
    b954:	0001fc24 	.word	0x0001fc24

0000b958 <log_output_dropped_process>:
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    b958:	f242 730f 	movw	r3, #9999	; 0x270f
{
    b95c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    b95e:	428b      	cmp	r3, r1
    b960:	bf28      	it	cs
    b962:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    b964:	6805      	ldr	r5, [r0, #0]
{
    b966:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    b968:	2105      	movs	r1, #5
    b96a:	4668      	mov	r0, sp
    b96c:	4a0d      	ldr	r2, [pc, #52]	; (b9a4 <log_output_dropped_process+0x4c>)
    b96e:	f00e fad3 	bl	19f18 <snprintk>
    b972:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    b974:	6863      	ldr	r3, [r4, #4]
    b976:	4628      	mov	r0, r5
    b978:	220b      	movs	r2, #11
    b97a:	685b      	ldr	r3, [r3, #4]
    b97c:	490a      	ldr	r1, [pc, #40]	; (b9a8 <log_output_dropped_process+0x50>)
    b97e:	f00f f8ba 	bl	1aaf6 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    b982:	6863      	ldr	r3, [r4, #4]
    b984:	4632      	mov	r2, r6
    b986:	4669      	mov	r1, sp
    b988:	4628      	mov	r0, r5
    b98a:	685b      	ldr	r3, [r3, #4]
    b98c:	f00f f8b3 	bl	1aaf6 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    b990:	6863      	ldr	r3, [r4, #4]
    b992:	221b      	movs	r2, #27
    b994:	4628      	mov	r0, r5
    b996:	685b      	ldr	r3, [r3, #4]
    b998:	4904      	ldr	r1, [pc, #16]	; (b9ac <log_output_dropped_process+0x54>)
    b99a:	f00f f8ac 	bl	1aaf6 <buffer_write>
		     output->control_block->ctx);
}
    b99e:	b002      	add	sp, #8
    b9a0:	bd70      	pop	{r4, r5, r6, pc}
    b9a2:	bf00      	nop
    b9a4:	0002170e 	.word	0x0002170e
    b9a8:	00020d23 	.word	0x00020d23
    b9ac:	00020d07 	.word	0x00020d07

0000b9b0 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    b9b0:	2100      	movs	r1, #0
    b9b2:	2301      	movs	r3, #1
    b9b4:	4a06      	ldr	r2, [pc, #24]	; (b9d0 <log_output_timestamp_freq_set+0x20>)
    b9b6:	4290      	cmp	r0, r2
    b9b8:	d806      	bhi.n	b9c8 <log_output_timestamp_freq_set+0x18>
    b9ba:	4a06      	ldr	r2, [pc, #24]	; (b9d4 <log_output_timestamp_freq_set+0x24>)
    b9bc:	b901      	cbnz	r1, b9c0 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
    b9be:	2301      	movs	r3, #1
    b9c0:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    b9c2:	4b05      	ldr	r3, [pc, #20]	; (b9d8 <log_output_timestamp_freq_set+0x28>)
    b9c4:	6018      	str	r0, [r3, #0]
}
    b9c6:	4770      	bx	lr
		timestamp_div *= 2U;
    b9c8:	2101      	movs	r1, #1
		frequency /= 2U;
    b9ca:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    b9cc:	005b      	lsls	r3, r3, #1
    b9ce:	e7f2      	b.n	b9b6 <log_output_timestamp_freq_set+0x6>
    b9d0:	000f4240 	.word	0x000f4240
    b9d4:	20009ad8 	.word	0x20009ad8
    b9d8:	20009adc 	.word	0x20009adc

0000b9dc <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    b9dc:	4b01      	ldr	r3, [pc, #4]	; (b9e4 <format_set+0x8>)
	return 0;
}
    b9de:	2000      	movs	r0, #0
	log_format_current = log_type;
    b9e0:	6019      	str	r1, [r3, #0]
}
    b9e2:	4770      	bx	lr
    b9e4:	20009af4 	.word	0x20009af4

0000b9e8 <panic>:
	}
}

static void panic(struct log_backend const *const backend)
{
	in_panic = true;
    b9e8:	2201      	movs	r2, #1
    b9ea:	4b02      	ldr	r3, [pc, #8]	; (b9f4 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    b9ec:	4802      	ldr	r0, [pc, #8]	; (b9f8 <panic+0x10>)
    b9ee:	701a      	strb	r2, [r3, #0]
    b9f0:	f00f b895 	b.w	1ab1e <log_output_flush>
    b9f4:	20009f8d 	.word	0x20009f8d
    b9f8:	0001fec8 	.word	0x0001fec8

0000b9fc <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    b9fc:	4801      	ldr	r0, [pc, #4]	; (ba04 <dropped+0x8>)
    b9fe:	f7ff bfab 	b.w	b958 <log_output_dropped_process>
    ba02:	bf00      	nop
    ba04:	0001fec8 	.word	0x0001fec8

0000ba08 <process>:
{
    ba08:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    ba0a:	4b06      	ldr	r3, [pc, #24]	; (ba24 <process+0x1c>)
{
    ba0c:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    ba0e:	6818      	ldr	r0, [r3, #0]
    ba10:	f7ff fbce 	bl	b1b0 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
    ba14:	4621      	mov	r1, r4
}
    ba16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    ba1a:	4603      	mov	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
    ba1c:	220f      	movs	r2, #15
    ba1e:	4802      	ldr	r0, [pc, #8]	; (ba28 <process+0x20>)
    ba20:	4718      	bx	r3
    ba22:	bf00      	nop
    ba24:	20009af4 	.word	0x20009af4
    ba28:	0001fec8 	.word	0x0001fec8

0000ba2c <char_out>:
{
    ba2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ba2e:	460d      	mov	r5, r1
    ba30:	4604      	mov	r4, r0
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    ba32:	4f06      	ldr	r7, [pc, #24]	; (ba4c <char_out+0x20>)
    ba34:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
    ba36:	42b4      	cmp	r4, r6
    ba38:	d101      	bne.n	ba3e <char_out+0x12>
}
    ba3a:	4628      	mov	r0, r5
    ba3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
    ba3e:	f814 1b01 	ldrb.w	r1, [r4], #1
    ba42:	68bb      	ldr	r3, [r7, #8]
    ba44:	4801      	ldr	r0, [pc, #4]	; (ba4c <char_out+0x20>)
    ba46:	685b      	ldr	r3, [r3, #4]
    ba48:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    ba4a:	e7f4      	b.n	ba36 <char_out+0xa>
    ba4c:	0001f868 	.word	0x0001f868

0000ba50 <read_blvl>:
}

static ssize_t read_blvl(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, void *buf,
			       uint16_t len, uint16_t offset)
{
    ba50:	b510      	push	{r4, lr}
	uint8_t lvl8 = battery_level;
    ba52:	4c08      	ldr	r4, [pc, #32]	; (ba74 <read_blvl+0x24>)
{
    ba54:	b086      	sub	sp, #24
	uint8_t lvl8 = battery_level;
    ba56:	7824      	ldrb	r4, [r4, #0]
    ba58:	f88d 4017 	strb.w	r4, [sp, #23]

	return bt_gatt_attr_read(conn, attr, buf, len, offset, &lvl8,
    ba5c:	2401      	movs	r4, #1
    ba5e:	9402      	str	r4, [sp, #8]
    ba60:	f10d 0417 	add.w	r4, sp, #23
    ba64:	9401      	str	r4, [sp, #4]
    ba66:	f8bd 4020 	ldrh.w	r4, [sp, #32]
    ba6a:	9400      	str	r4, [sp, #0]
    ba6c:	f011 fac2 	bl	1cff4 <bt_gatt_attr_read>
				 sizeof(lvl8));
}
    ba70:	b006      	add	sp, #24
    ba72:	bd10      	pop	{r4, pc}
    ba74:	20008637 	.word	0x20008637

0000ba78 <blvl_ccc_cfg_changed>:
{
    ba78:	b580      	push	{r7, lr}
	LOG_INF("BAS Notifications %s", notif_enabled ? "enabled" : "disabled");
    ba7a:	4a0d      	ldr	r2, [pc, #52]	; (bab0 <blvl_ccc_cfg_changed+0x38>)
    ba7c:	4b0d      	ldr	r3, [pc, #52]	; (bab4 <blvl_ccc_cfg_changed+0x3c>)
{
    ba7e:	af00      	add	r7, sp, #0
	LOG_INF("BAS Notifications %s", notif_enabled ? "enabled" : "disabled");
    ba80:	b08a      	sub	sp, #40	; 0x28
    ba82:	2901      	cmp	r1, #1
    ba84:	bf08      	it	eq
    ba86:	4613      	moveq	r3, r2
    ba88:	466a      	mov	r2, sp
    ba8a:	490b      	ldr	r1, [pc, #44]	; (bab8 <blvl_ccc_cfg_changed+0x40>)
    ba8c:	6151      	str	r1, [r2, #20]
    ba8e:	490b      	ldr	r1, [pc, #44]	; (babc <blvl_ccc_cfg_changed+0x44>)
    ba90:	e9c2 1306 	strd	r1, r3, [r2, #24]
    ba94:	f240 3301 	movw	r3, #769	; 0x301
    ba98:	8413      	strh	r3, [r2, #32]
    ba9a:	4b09      	ldr	r3, [pc, #36]	; (bac0 <blvl_ccc_cfg_changed+0x48>)
    ba9c:	f842 3f10 	str.w	r3, [r2, #16]!
    baa0:	2300      	movs	r3, #0
    baa2:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    baa6:	4807      	ldr	r0, [pc, #28]	; (bac4 <blvl_ccc_cfg_changed+0x4c>)
    baa8:	f7ff fd5a 	bl	b560 <z_impl_z_log_msg_static_create>
}
    baac:	46bd      	mov	sp, r7
    baae:	bd80      	pop	{r7, pc}
    bab0:	00020d91 	.word	0x00020d91
    bab4:	00020d99 	.word	0x00020d99
    bab8:	00020da2 	.word	0x00020da2
    babc:	00020dbb 	.word	0x00020dbb
    bac0:	01000004 	.word	0x01000004
    bac4:	0001fc2c 	.word	0x0001fc2c

0000bac8 <bt_bas_set_battery_level>:
{
	return battery_level;
}

int bt_bas_set_battery_level(uint8_t level)
{
    bac8:	b500      	push	{lr}
	int rc;

	if (level > 100U) {
    baca:	2864      	cmp	r0, #100	; 0x64
{
    bacc:	b089      	sub	sp, #36	; 0x24
    bace:	f88d 0007 	strb.w	r0, [sp, #7]
	if (level > 100U) {
    bad2:	d819      	bhi.n	bb08 <bt_bas_set_battery_level+0x40>
		return -EINVAL;
	}

	battery_level = level;
    bad4:	4b0e      	ldr	r3, [pc, #56]	; (bb10 <bt_bas_set_battery_level+0x48>)
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
    bad6:	2218      	movs	r2, #24
    bad8:	7018      	strb	r0, [r3, #0]
    bada:	2100      	movs	r1, #0
    badc:	a802      	add	r0, sp, #8
    bade:	f00f ff03 	bl	1b8e8 <memset>

	params.attr = attr;
    bae2:	4b0c      	ldr	r3, [pc, #48]	; (bb14 <bt_bas_set_battery_level+0x4c>)
	params.len = len;
#if defined(CONFIG_BT_EATT)
	params.chan_opt = BT_ATT_CHAN_OPT_NONE;
#endif /* CONFIG_BT_EATT */

	return bt_gatt_notify_cb(conn, &params);
    bae4:	2000      	movs	r0, #0
	params.attr = attr;
    bae6:	9303      	str	r3, [sp, #12]
	params.data = data;
    bae8:	f10d 0307 	add.w	r3, sp, #7
    baec:	9304      	str	r3, [sp, #16]
	params.len = len;
    baee:	2301      	movs	r3, #1
	return bt_gatt_notify_cb(conn, &params);
    baf0:	a902      	add	r1, sp, #8
	params.len = len;
    baf2:	f8ad 3014 	strh.w	r3, [sp, #20]
	return bt_gatt_notify_cb(conn, &params);
    baf6:	f007 fc6b 	bl	133d0 <bt_gatt_notify_cb>

	rc = bt_gatt_notify(NULL, &bas.attrs[1], &level, sizeof(level));

	return rc == -ENOTCONN ? 0 : rc;
    bafa:	f110 0f80 	cmn.w	r0, #128	; 0x80
    bafe:	bf08      	it	eq
    bb00:	2000      	moveq	r0, #0
}
    bb02:	b009      	add	sp, #36	; 0x24
    bb04:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
    bb08:	f06f 0015 	mvn.w	r0, #21
    bb0c:	e7f9      	b.n	bb02 <bt_bas_set_battery_level+0x3a>
    bb0e:	bf00      	nop
    bb10:	20008637 	.word	0x20008637
    bb14:	0001ff50 	.word	0x0001ff50

0000bb18 <hrs_init>:

static int hrs_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	hrs_blsc = 0x01;
    bb18:	2201      	movs	r2, #1
    bb1a:	4b02      	ldr	r3, [pc, #8]	; (bb24 <hrs_init+0xc>)

	return 0;
}
    bb1c:	2000      	movs	r0, #0
	hrs_blsc = 0x01;
    bb1e:	701a      	strb	r2, [r3, #0]
}
    bb20:	4770      	bx	lr
    bb22:	bf00      	nop
    bb24:	20009f90 	.word	0x20009f90

0000bb28 <read_blsc>:
{
    bb28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &hrs_blsc,
    bb2a:	2401      	movs	r4, #1
    bb2c:	9402      	str	r4, [sp, #8]
    bb2e:	4c04      	ldr	r4, [pc, #16]	; (bb40 <read_blsc+0x18>)
    bb30:	9401      	str	r4, [sp, #4]
    bb32:	f8bd 4018 	ldrh.w	r4, [sp, #24]
    bb36:	9400      	str	r4, [sp, #0]
    bb38:	f011 fa5c 	bl	1cff4 <bt_gatt_attr_read>
}
    bb3c:	b004      	add	sp, #16
    bb3e:	bd10      	pop	{r4, pc}
    bb40:	20009f90 	.word	0x20009f90

0000bb44 <hrmc_ccc_cfg_changed>:
{
    bb44:	b580      	push	{r7, lr}
	LOG_INF("HRS notifications %s", notif_enabled ? "enabled" : "disabled");
    bb46:	4a0d      	ldr	r2, [pc, #52]	; (bb7c <hrmc_ccc_cfg_changed+0x38>)
    bb48:	4b0d      	ldr	r3, [pc, #52]	; (bb80 <hrmc_ccc_cfg_changed+0x3c>)
{
    bb4a:	af00      	add	r7, sp, #0
	LOG_INF("HRS notifications %s", notif_enabled ? "enabled" : "disabled");
    bb4c:	b08a      	sub	sp, #40	; 0x28
    bb4e:	2901      	cmp	r1, #1
    bb50:	bf08      	it	eq
    bb52:	4613      	moveq	r3, r2
    bb54:	466a      	mov	r2, sp
    bb56:	490b      	ldr	r1, [pc, #44]	; (bb84 <hrmc_ccc_cfg_changed+0x40>)
    bb58:	6151      	str	r1, [r2, #20]
    bb5a:	490b      	ldr	r1, [pc, #44]	; (bb88 <hrmc_ccc_cfg_changed+0x44>)
    bb5c:	e9c2 1306 	strd	r1, r3, [r2, #24]
    bb60:	f240 3301 	movw	r3, #769	; 0x301
    bb64:	8413      	strh	r3, [r2, #32]
    bb66:	4b09      	ldr	r3, [pc, #36]	; (bb8c <hrmc_ccc_cfg_changed+0x48>)
    bb68:	f842 3f10 	str.w	r3, [r2, #16]!
    bb6c:	2300      	movs	r3, #0
    bb6e:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    bb72:	4807      	ldr	r0, [pc, #28]	; (bb90 <hrmc_ccc_cfg_changed+0x4c>)
    bb74:	f7ff fcf4 	bl	b560 <z_impl_z_log_msg_static_create>
}
    bb78:	46bd      	mov	sp, r7
    bb7a:	bd80      	pop	{r7, pc}
    bb7c:	00020d91 	.word	0x00020d91
    bb80:	00020d99 	.word	0x00020d99
    bb84:	00020dd4 	.word	0x00020dd4
    bb88:	00020ded 	.word	0x00020ded
    bb8c:	01000004 	.word	0x01000004
    bb90:	0001fcc4 	.word	0x0001fcc4

0000bb94 <bt_hrs_notify>:
int bt_hrs_notify(uint16_t heartrate)
{
	int rc;
	static uint8_t hrm[2];

	hrm[0] = 0x06; /* uint8, sensor contact */
    bb94:	2306      	movs	r3, #6
{
    bb96:	b510      	push	{r4, lr}
	hrm[0] = 0x06; /* uint8, sensor contact */
    bb98:	4c0c      	ldr	r4, [pc, #48]	; (bbcc <bt_hrs_notify+0x38>)
{
    bb9a:	b086      	sub	sp, #24
	memset(&params, 0, sizeof(params));
    bb9c:	2218      	movs	r2, #24
	hrm[1] = heartrate;
    bb9e:	7060      	strb	r0, [r4, #1]
    bba0:	2100      	movs	r1, #0
    bba2:	4668      	mov	r0, sp
	hrm[0] = 0x06; /* uint8, sensor contact */
    bba4:	7023      	strb	r3, [r4, #0]
    bba6:	f00f fe9f 	bl	1b8e8 <memset>
	params.attr = attr;
    bbaa:	4b09      	ldr	r3, [pc, #36]	; (bbd0 <bt_hrs_notify+0x3c>)
	return bt_gatt_notify_cb(conn, &params);
    bbac:	4669      	mov	r1, sp
	params.data = data;
    bbae:	e9cd 3401 	strd	r3, r4, [sp, #4]
	params.len = len;
    bbb2:	2302      	movs	r3, #2
	return bt_gatt_notify_cb(conn, &params);
    bbb4:	2000      	movs	r0, #0
	params.len = len;
    bbb6:	f8ad 300c 	strh.w	r3, [sp, #12]
	return bt_gatt_notify_cb(conn, &params);
    bbba:	f007 fc09 	bl	133d0 <bt_gatt_notify_cb>

	rc = bt_gatt_notify(NULL, &hrs_svc.attrs[1], &hrm, sizeof(hrm));

	return rc == -ENOTCONN ? 0 : rc;
    bbbe:	f110 0f80 	cmn.w	r0, #128	; 0x80
}
    bbc2:	bf08      	it	eq
    bbc4:	2000      	moveq	r0, #0
    bbc6:	b006      	add	sp, #24
    bbc8:	bd10      	pop	{r4, pc}
    bbca:	bf00      	nop
    bbcc:	20009f8e 	.word	0x20009f8e
    bbd0:	0001ffa0 	.word	0x0001ffa0

0000bbd4 <ipc_service_open_instance>:
#include <zephyr/device.h>

LOG_MODULE_REGISTER(ipc_service, CONFIG_IPC_SERVICE_LOG_LEVEL);

int ipc_service_open_instance(const struct device *instance)
{
    bbd4:	b598      	push	{r3, r4, r7, lr}
    bbd6:	af00      	add	r7, sp, #0
	const struct ipc_service_backend *backend;

	if (!instance) {
    bbd8:	b998      	cbnz	r0, bc02 <ipc_service_open_instance+0x2e>
		LOG_ERR("Invalid instance");
    bbda:	466c      	mov	r4, sp
    bbdc:	b088      	sub	sp, #32
    bbde:	466a      	mov	r2, sp
    bbe0:	4b15      	ldr	r3, [pc, #84]	; (bc38 <ipc_service_open_instance+0x64>)
    bbe2:	4816      	ldr	r0, [pc, #88]	; (bc3c <ipc_service_open_instance+0x68>)
    bbe4:	6153      	str	r3, [r2, #20]
    bbe6:	4b16      	ldr	r3, [pc, #88]	; (bc40 <ipc_service_open_instance+0x6c>)
    bbe8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    bbec:	6193      	str	r3, [r2, #24]
    bbee:	2303      	movs	r3, #3
    bbf0:	f842 3f10 	str.w	r3, [r2, #16]!
    bbf4:	f00e ffe2 	bl	1abbc <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    bbf8:	f06f 0015 	mvn.w	r0, #21
    bbfc:	46a5      	mov	sp, r4
		/* maybe not needed on backend */
		return 0;
	}

	return backend->open_instance(instance);
}
    bbfe:	46bd      	mov	sp, r7
    bc00:	bd98      	pop	{r3, r4, r7, pc}
	backend = (const struct ipc_service_backend *) instance->api;
    bc02:	6883      	ldr	r3, [r0, #8]
	if (!backend) {
    bc04:	b993      	cbnz	r3, bc2c <ipc_service_open_instance+0x58>
		LOG_ERR("Invalid backend configuration");
    bc06:	466c      	mov	r4, sp
    bc08:	b088      	sub	sp, #32
    bc0a:	466a      	mov	r2, sp
    bc0c:	4b0d      	ldr	r3, [pc, #52]	; (bc44 <ipc_service_open_instance+0x70>)
    bc0e:	480b      	ldr	r0, [pc, #44]	; (bc3c <ipc_service_open_instance+0x68>)
    bc10:	6153      	str	r3, [r2, #20]
    bc12:	4b0b      	ldr	r3, [pc, #44]	; (bc40 <ipc_service_open_instance+0x6c>)
    bc14:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    bc18:	6193      	str	r3, [r2, #24]
    bc1a:	2303      	movs	r3, #3
    bc1c:	f842 3f10 	str.w	r3, [r2, #16]!
    bc20:	f00e ffcc 	bl	1abbc <z_log_msg_static_create.constprop.0>
		return -EIO;
    bc24:	f06f 0004 	mvn.w	r0, #4
    bc28:	46a5      	mov	sp, r4
    bc2a:	e7e8      	b.n	bbfe <ipc_service_open_instance+0x2a>
	if (!backend->open_instance) {
    bc2c:	681b      	ldr	r3, [r3, #0]
    bc2e:	b10b      	cbz	r3, bc34 <ipc_service_open_instance+0x60>
	return backend->open_instance(instance);
    bc30:	4798      	blx	r3
    bc32:	e7e4      	b.n	bbfe <ipc_service_open_instance+0x2a>
		return 0;
    bc34:	4618      	mov	r0, r3
    bc36:	e7e2      	b.n	bbfe <ipc_service_open_instance+0x2a>
    bc38:	00020e06 	.word	0x00020e06
    bc3c:	0001fccc 	.word	0x0001fccc
    bc40:	00020ece 	.word	0x00020ece
    bc44:	00020e1b 	.word	0x00020e1b

0000bc48 <ipc_service_register_endpoint>:
}

int ipc_service_register_endpoint(const struct device *instance,
				  struct ipc_ept *ept,
				  const struct ipc_ept_cfg *cfg)
{
    bc48:	b5b0      	push	{r4, r5, r7, lr}
    bc4a:	af00      	add	r7, sp, #0
	const struct ipc_service_backend *backend;

	if (!instance || !ept || !cfg) {
    bc4c:	b108      	cbz	r0, bc52 <ipc_service_register_endpoint+0xa>
    bc4e:	b101      	cbz	r1, bc52 <ipc_service_register_endpoint+0xa>
    bc50:	b99a      	cbnz	r2, bc7a <ipc_service_register_endpoint+0x32>
		LOG_ERR("Invalid instance, endpoint or configuration");
    bc52:	466c      	mov	r4, sp
    bc54:	b088      	sub	sp, #32
    bc56:	466a      	mov	r2, sp
    bc58:	4b16      	ldr	r3, [pc, #88]	; (bcb4 <ipc_service_register_endpoint+0x6c>)
    bc5a:	4817      	ldr	r0, [pc, #92]	; (bcb8 <ipc_service_register_endpoint+0x70>)
    bc5c:	6153      	str	r3, [r2, #20]
    bc5e:	4b17      	ldr	r3, [pc, #92]	; (bcbc <ipc_service_register_endpoint+0x74>)
    bc60:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    bc64:	6193      	str	r3, [r2, #24]
    bc66:	2303      	movs	r3, #3
    bc68:	f842 3f10 	str.w	r3, [r2, #16]!
    bc6c:	f00e ffa6 	bl	1abbc <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    bc70:	f06f 0015 	mvn.w	r0, #21
    bc74:	46a5      	mov	sp, r4
	LOG_DBG("Register endpoint %s", cfg->name ? cfg->name : "");

	ept->instance = instance;

	return backend->register_endpoint(instance, &ept->token, cfg);
}
    bc76:	46bd      	mov	sp, r7
    bc78:	bdb0      	pop	{r4, r5, r7, pc}
	backend = (const struct ipc_service_backend *) instance->api;
    bc7a:	6884      	ldr	r4, [r0, #8]
	if (!backend || !backend->register_endpoint) {
    bc7c:	b10c      	cbz	r4, bc82 <ipc_service_register_endpoint+0x3a>
    bc7e:	68e5      	ldr	r5, [r4, #12]
    bc80:	b995      	cbnz	r5, bca8 <ipc_service_register_endpoint+0x60>
		LOG_ERR("Invalid backend configuration");
    bc82:	466c      	mov	r4, sp
    bc84:	b088      	sub	sp, #32
    bc86:	466a      	mov	r2, sp
    bc88:	4b0d      	ldr	r3, [pc, #52]	; (bcc0 <ipc_service_register_endpoint+0x78>)
    bc8a:	480b      	ldr	r0, [pc, #44]	; (bcb8 <ipc_service_register_endpoint+0x70>)
    bc8c:	6153      	str	r3, [r2, #20]
    bc8e:	4b0b      	ldr	r3, [pc, #44]	; (bcbc <ipc_service_register_endpoint+0x74>)
    bc90:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    bc94:	6193      	str	r3, [r2, #24]
    bc96:	2303      	movs	r3, #3
    bc98:	f842 3f10 	str.w	r3, [r2, #16]!
    bc9c:	f00e ff8e 	bl	1abbc <z_log_msg_static_create.constprop.0>
		return -EIO;
    bca0:	f06f 0004 	mvn.w	r0, #4
    bca4:	46a5      	mov	sp, r4
    bca6:	e7e6      	b.n	bc76 <ipc_service_register_endpoint+0x2e>
	ept->instance = instance;
    bca8:	f841 0b04 	str.w	r0, [r1], #4
	return backend->register_endpoint(instance, &ept->token, cfg);
    bcac:	68e3      	ldr	r3, [r4, #12]
    bcae:	4798      	blx	r3
    bcb0:	e7e1      	b.n	bc76 <ipc_service_register_endpoint+0x2e>
    bcb2:	bf00      	nop
    bcb4:	00020e3d 	.word	0x00020e3d
    bcb8:	0001fccc 	.word	0x0001fccc
    bcbc:	00020eb0 	.word	0x00020eb0
    bcc0:	00020e1b 	.word	0x00020e1b

0000bcc4 <ipc_service_send>:
	return 0;
}


int ipc_service_send(struct ipc_ept *ept, const void *data, size_t len)
{
    bcc4:	b5b0      	push	{r4, r5, r7, lr}
    bcc6:	4613      	mov	r3, r2
	const struct ipc_service_backend *backend;

	if (!ept) {
    bcc8:	4604      	mov	r4, r0
{
    bcca:	af00      	add	r7, sp, #0
	if (!ept) {
    bccc:	b998      	cbnz	r0, bcf6 <ipc_service_send+0x32>
		LOG_ERR("Invalid endpoint");
    bcce:	466c      	mov	r4, sp
    bcd0:	b088      	sub	sp, #32
    bcd2:	466a      	mov	r2, sp
    bcd4:	4b20      	ldr	r3, [pc, #128]	; (bd58 <ipc_service_send+0x94>)
    bcd6:	4821      	ldr	r0, [pc, #132]	; (bd5c <ipc_service_send+0x98>)
    bcd8:	6153      	str	r3, [r2, #20]
    bcda:	4b21      	ldr	r3, [pc, #132]	; (bd60 <ipc_service_send+0x9c>)
    bcdc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    bce0:	6193      	str	r3, [r2, #24]
    bce2:	2303      	movs	r3, #3
    bce4:	f842 3f10 	str.w	r3, [r2, #16]!
    bce8:	f00e ff68 	bl	1abbc <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    bcec:	f06f 0015 	mvn.w	r0, #21
    bcf0:	46a5      	mov	sp, r4
		LOG_ERR("Invalid backend configuration");
		return -EIO;
	}

	return backend->send(ept->instance, ept->token, data, len);
}
    bcf2:	46bd      	mov	sp, r7
    bcf4:	bdb0      	pop	{r4, r5, r7, pc}
	if (!ept->instance) {
    bcf6:	6800      	ldr	r0, [r0, #0]
    bcf8:	b990      	cbnz	r0, bd20 <ipc_service_send+0x5c>
		LOG_ERR("Endpoint not registered\n");
    bcfa:	466c      	mov	r4, sp
    bcfc:	b088      	sub	sp, #32
    bcfe:	466a      	mov	r2, sp
    bd00:	4b18      	ldr	r3, [pc, #96]	; (bd64 <ipc_service_send+0xa0>)
    bd02:	4816      	ldr	r0, [pc, #88]	; (bd5c <ipc_service_send+0x98>)
    bd04:	6153      	str	r3, [r2, #20]
    bd06:	4b16      	ldr	r3, [pc, #88]	; (bd60 <ipc_service_send+0x9c>)
    bd08:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    bd0c:	6193      	str	r3, [r2, #24]
    bd0e:	2303      	movs	r3, #3
    bd10:	f842 3f10 	str.w	r3, [r2, #16]!
    bd14:	f00e ff52 	bl	1abbc <z_log_msg_static_create.constprop.0>
		return -ENOENT;
    bd18:	f06f 0001 	mvn.w	r0, #1
    bd1c:	46a5      	mov	sp, r4
    bd1e:	e7e8      	b.n	bcf2 <ipc_service_send+0x2e>
	backend = ept->instance->api;
    bd20:	6882      	ldr	r2, [r0, #8]
	if (!backend || !backend->send) {
    bd22:	b10a      	cbz	r2, bd28 <ipc_service_send+0x64>
    bd24:	6895      	ldr	r5, [r2, #8]
    bd26:	b995      	cbnz	r5, bd4e <ipc_service_send+0x8a>
		LOG_ERR("Invalid backend configuration");
    bd28:	466c      	mov	r4, sp
    bd2a:	b088      	sub	sp, #32
    bd2c:	466a      	mov	r2, sp
    bd2e:	4b0e      	ldr	r3, [pc, #56]	; (bd68 <ipc_service_send+0xa4>)
    bd30:	480a      	ldr	r0, [pc, #40]	; (bd5c <ipc_service_send+0x98>)
    bd32:	6153      	str	r3, [r2, #20]
    bd34:	4b0a      	ldr	r3, [pc, #40]	; (bd60 <ipc_service_send+0x9c>)
    bd36:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    bd3a:	6193      	str	r3, [r2, #24]
    bd3c:	2303      	movs	r3, #3
    bd3e:	f842 3f10 	str.w	r3, [r2, #16]!
    bd42:	f00e ff3b 	bl	1abbc <z_log_msg_static_create.constprop.0>
		return -EIO;
    bd46:	f06f 0004 	mvn.w	r0, #4
    bd4a:	46a5      	mov	sp, r4
    bd4c:	e7d1      	b.n	bcf2 <ipc_service_send+0x2e>
	return backend->send(ept->instance, ept->token, data, len);
    bd4e:	460a      	mov	r2, r1
    bd50:	6861      	ldr	r1, [r4, #4]
    bd52:	47a8      	blx	r5
    bd54:	e7cd      	b.n	bcf2 <ipc_service_send+0x2e>
    bd56:	bf00      	nop
    bd58:	00020e6d 	.word	0x00020e6d
    bd5c:	0001fccc 	.word	0x0001fccc
    bd60:	00020e9f 	.word	0x00020e9f
    bd64:	00020e82 	.word	0x00020e82
    bd68:	00020e1b 	.word	0x00020e1b

0000bd6c <shared_memory_prepare>:

#define BACKEND_CONFIG_DEFINE(i) BACKEND_CONFIG_POPULATE(i),

#if defined(CONFIG_IPC_SERVICE_BACKEND_RPMSG_SHMEM_RESET)
static int shared_memory_prepare(const struct device *arg)
{
    bd6c:	b508      	push	{r3, lr}

	for (backend_config = backend_configs;
	     backend_config < backend_configs + ARRAY_SIZE(backend_configs);
	     backend_config++) {
		if (backend_config->role == ROLE_HOST) {
			memset((void *) backend_config->shm_addr, 0, VDEV_STATUS_SIZE);
    bd6e:	2204      	movs	r2, #4
    bd70:	2100      	movs	r1, #0
    bd72:	4802      	ldr	r0, [pc, #8]	; (bd7c <shared_memory_prepare+0x10>)
    bd74:	f00f fdb8 	bl	1b8e8 <memset>
		}
	}

	return 0;
}
    bd78:	2000      	movs	r0, #0
    bd7a:	bd08      	pop	{r3, pc}
    bd7c:	20070000 	.word	0x20070000

0000bd80 <bound_cb>:
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
    bd80:	2300      	movs	r3, #0
    bd82:	2201      	movs	r2, #1
{
    bd84:	b513      	push	{r0, r1, r4, lr}
    bd86:	4604      	mov	r4, r0
    bd88:	e9cd 3200 	strd	r3, r2, [sp]
    bd8c:	4b07      	ldr	r3, [pc, #28]	; (bdac <bound_cb+0x2c>)
    bd8e:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
    bd92:	f00c f993 	bl	180bc <rpmsg_send_offchannel_raw>
	if (ept->cb->bound) {
    bd96:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    bd98:	681b      	ldr	r3, [r3, #0]
    bd9a:	b123      	cbz	r3, bda6 <bound_cb+0x26>
		ept->cb->bound(ept->priv);
    bd9c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
}
    bd9e:	b002      	add	sp, #8
    bda0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ept->cb->bound(ept->priv);
    bda4:	4718      	bx	r3
}
    bda6:	b002      	add	sp, #8
    bda8:	bd10      	pop	{r4, pc}
    bdaa:	bf00      	nop
    bdac:	00020926 	.word	0x00020926

0000bdb0 <advertise_ept>:
{
    bdb0:	b530      	push	{r4, r5, lr}
    bdb2:	460c      	mov	r4, r1
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
    bdb4:	490e      	ldr	r1, [pc, #56]	; (bdf0 <advertise_ept+0x40>)
{
    bdb6:	b085      	sub	sp, #20
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
    bdb8:	9102      	str	r1, [sp, #8]
    bdba:	f8d0 1198 	ldr.w	r1, [r0, #408]	; 0x198
{
    bdbe:	4605      	mov	r5, r0
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
    bdc0:	e9cd 3100 	strd	r3, r1, [sp]
    bdc4:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
    bdc8:	f04f 33ff 	mov.w	r3, #4294967295
    bdcc:	4620      	mov	r0, r4
    bdce:	f00c f9bb 	bl	18148 <rpmsg_create_ept>
	if (err != 0) {
    bdd2:	b950      	cbnz	r0, bdea <advertise_ept+0x3a>
	rpmsg_ept->bound = true;
    bdd4:	2301      	movs	r3, #1
    bdd6:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	if (rpmsg_inst->bound_cb) {
    bdda:	f8d5 3194 	ldr.w	r3, [r5, #404]	; 0x194
    bdde:	b123      	cbz	r3, bdea <advertise_ept+0x3a>
		rpmsg_inst->bound_cb(rpmsg_ept);
    bde0:	4620      	mov	r0, r4
}
    bde2:	b005      	add	sp, #20
    bde4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		rpmsg_inst->bound_cb(rpmsg_ept);
    bde8:	4718      	bx	r3
}
    bdea:	b005      	add	sp, #20
    bdec:	bd30      	pop	{r4, r5, pc}
    bdee:	bf00      	nop
    bdf0:	0001acb3 	.word	0x0001acb3

0000bdf4 <get_ept>:
{
    bdf4:	b538      	push	{r3, r4, r5, lr}
    bdf6:	460c      	mov	r4, r1
	ept = get_ept_slot_with_name(rpmsg_inst, name);
    bdf8:	4611      	mov	r1, r2
{
    bdfa:	4605      	mov	r5, r0
	ept = get_ept_slot_with_name(rpmsg_inst, name);
    bdfc:	f00e ff5b 	bl	1acb6 <get_ept_slot_with_name>
	if (ept != NULL) {
    be00:	4603      	mov	r3, r0
    be02:	b938      	cbnz	r0, be14 <get_ept+0x20>
	return get_ept_slot_with_name(rpmsg_inst, "");
    be04:	4628      	mov	r0, r5
    be06:	4904      	ldr	r1, [pc, #16]	; (be18 <get_ept+0x24>)
    be08:	f00e ff55 	bl	1acb6 <get_ept_slot_with_name>
    be0c:	4603      	mov	r3, r0
	if (ept != NULL) {
    be0e:	2000      	movs	r0, #0
		(*rpmsg_ept) = ept;
    be10:	6023      	str	r3, [r4, #0]
}
    be12:	bd38      	pop	{r3, r4, r5, pc}
		return true;
    be14:	2001      	movs	r0, #1
    be16:	e7fb      	b.n	be10 <get_ept+0x1c>
    be18:	00020926 	.word	0x00020926

0000be1c <open>:
{
    be1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    be20:	2301      	movs	r3, #1
    be22:	4681      	mov	r9, r0
	struct backend_data_t *data = instance->data;
    be24:	6905      	ldr	r5, [r0, #16]
	const struct backend_config_t *conf = instance->config;
    be26:	6846      	ldr	r6, [r0, #4]
{
    be28:	b085      	sub	sp, #20
	if (!atomic_cas(&data->state, STATE_READY, STATE_BUSY)) {
    be2a:	f505 7755 	add.w	r7, r5, #852	; 0x354
    be2e:	e8d7 2fef 	ldaex	r2, [r7]
    be32:	2a00      	cmp	r2, #0
    be34:	d103      	bne.n	be3e <open+0x22>
    be36:	e8c7 3fe1 	stlex	r1, r3, [r7]
    be3a:	2900      	cmp	r1, #0
    be3c:	d1f7      	bne.n	be2e <open+0x12>
    be3e:	f040 80b8 	bne.w	bfb2 <open+0x196>
static inline unsigned int optimal_num_desc(size_t shm_size, unsigned int buf_size)
{
	size_t available, single_alloc;
	unsigned int num_desc;

	available = shm_size - VDEV_STATUS_SIZE;
    be42:	68b3      	ldr	r3, [r6, #8]
	single_alloc = VRING_COUNT * (vq_ring_size(1, buf_size) + vring_size(1, VRING_ALIGNMENT));
    be44:	6ab2      	ldr	r2, [r6, #40]	; 0x28
	available = shm_size - VDEV_STATUS_SIZE;
    be46:	3b04      	subs	r3, #4
	single_alloc = VRING_COUNT * (vq_ring_size(1, buf_size) + vring_size(1, VRING_ALIGNMENT));
    be48:	3226      	adds	r2, #38	; 0x26
 * @return most significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_msb_set(uint32_t op)
{
	if (op == 0) {
    be4a:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
    be4e:	ea4f 0142 	mov.w	r1, r2, lsl #1

	num_desc = (unsigned int) (available / single_alloc);
    be52:	bf26      	itte	cs
    be54:	fbb3 f3f1 	udivcs	r3, r3, r1
		return 0;
	}

	return 32 - __builtin_clz(op);
    be58:	fab3 f383 	clzcs	r3, r3
		return 0;
    be5c:	2300      	movcc	r3, #0

	return (1 << (find_msb_set(num_desc) - 1));
    be5e:	f04f 0401 	mov.w	r4, #1
	return 32 - __builtin_clz(op);
    be62:	bf28      	it	cs
    be64:	f1c3 0320 	rsbcs	r3, r3, #32
    be68:	3b01      	subs	r3, #1
	if (num_desc == 0) {
    be6a:	409c      	lsls	r4, r3
	err = vr_shm_configure(&data->vr, conf);
    be6c:	f505 78d8 	add.w	r8, r5, #432	; 0x1b0
	if (num_desc == 0) {
    be70:	f000 8099 	beq.w	bfa6 <open+0x18a>

static inline int vring_size(unsigned int num, unsigned long align)
{
	int size;

	size = num * sizeof(struct vring_desc);
    be74:	2210      	movs	r2, #16
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
	size += sizeof(struct vring_used) +
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
    be76:	2108      	movs	r1, #8
	vr->shm_addr = conf->shm_addr + VDEV_STATUS_SIZE;
    be78:	6870      	ldr	r0, [r6, #4]
	size = num * sizeof(struct vring_desc);
    be7a:	409a      	lsls	r2, r3
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
    be7c:	eb02 0244 	add.w	r2, r2, r4, lsl #1
    be80:	3004      	adds	r0, #4
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
    be82:	4099      	lsls	r1, r3
	size = (size + align - 1) & ~(align - 1);
    be84:	3209      	adds	r2, #9
    be86:	f8c5 0248 	str.w	r0, [r5, #584]	; 0x248
	size += sizeof(struct vring_used) +
    be8a:	3106      	adds	r1, #6
	size = (size + align - 1) & ~(align - 1);
    be8c:	f022 0203 	bic.w	r2, r2, #3
	size += sizeof(struct vring_used) +
    be90:	440a      	add	r2, r1
	return (buf_size * num);
    be92:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    be94:	fa01 fc03 	lsl.w	ip, r1, r3
	       (VRING_COUNT * vring_size(num, VRING_ALIGNMENT)));
    be98:	0051      	lsls	r1, r2, #1
	vr->shm_size = shm_size(num_desc, conf->buffer_size) - VDEV_STATUS_SIZE;
    be9a:	eb01 014c 	add.w	r1, r1, ip, lsl #1
    be9e:	f8c5 124c 	str.w	r1, [r5, #588]	; 0x24c
	return (buf_size * num);
    bea2:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    bea4:	4099      	lsls	r1, r3
	vr->rx_addr = vr->shm_addr + VRING_COUNT * vq_ring_size(num_desc, conf->buffer_size);
    bea6:	eb00 0341 	add.w	r3, r0, r1, lsl #1
    beaa:	f8c5 3240 	str.w	r3, [r5, #576]	; 0x240
	vr->tx_addr = ROUND_UP(vr->rx_addr + vring_size(num_desc, VRING_ALIGNMENT),
    beae:	3303      	adds	r3, #3
    beb0:	4413      	add	r3, r2
    beb2:	f023 0303 	bic.w	r3, r3, #3
    beb6:	f8c5 323c 	str.w	r3, [r5, #572]	; 0x23c
	vr->status_reg_addr = conf->shm_addr;
    beba:	6873      	ldr	r3, [r6, #4]
	vr->vring_size = num_desc;
    bebc:	f8c5 4244 	str.w	r4, [r5, #580]	; 0x244
	vr->status_reg_addr = conf->shm_addr;
    bec0:	f8c5 3238 	str.w	r3, [r5, #568]	; 0x238
	data->vr.notify_cb = virtio_notify_cb;
    bec4:	4b3c      	ldr	r3, [pc, #240]	; (bfb8 <open+0x19c>)
	err = ipc_static_vrings_init(&data->vr, conf->role);
    bec6:	4640      	mov	r0, r8
	data->vr.priv = (void *) conf;
    bec8:	e9c5 63a3 	strd	r6, r3, [r5, #652]	; 0x28c
	err = ipc_static_vrings_init(&data->vr, conf->role);
    becc:	6831      	ldr	r1, [r6, #0]
    bece:	f000 fa03 	bl	c2d8 <ipc_static_vrings_init>
	if (err != 0) {
    bed2:	4604      	mov	r4, r0
    bed4:	bb30      	cbnz	r0, bf24 <open+0x108>
	const struct backend_config_t *conf = instance->config;
    bed6:	f8d9 a004 	ldr.w	sl, [r9, #4]
	struct backend_data_t *data = instance->data;
    beda:	f8d9 9010 	ldr.w	r9, [r9, #16]
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
    bede:	e9da 3407 	ldrd	r3, r4, [sl, #28]
	k_work_queue_init(&data->mbox_wq);
    bee2:	f509 7b2a 	add.w	fp, r9, #680	; 0x2a8
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
    bee6:	2b01      	cmp	r3, #1
	k_work_queue_init(&data->mbox_wq);
    bee8:	4658      	mov	r0, fp
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
    beea:	bf08      	it	eq
    beec:	3c10      	subeq	r4, #16
	k_work_queue_init(&data->mbox_wq);
    beee:	f013 f8a0 	bl	1f032 <k_work_queue_init>
	k_work_queue_start(&data->mbox_wq, mbox_stack[conf->id], WQ_STACK_SIZE, prio, NULL);
    bef2:	2300      	movs	r3, #0
    bef4:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
    bef8:	4930      	ldr	r1, [pc, #192]	; (bfbc <open+0x1a0>)
    befa:	f44f 6280 	mov.w	r2, #1024	; 0x400
    befe:	eb01 2180 	add.w	r1, r1, r0, lsl #10
    bf02:	9300      	str	r3, [sp, #0]
    bf04:	4658      	mov	r0, fp
    bf06:	4623      	mov	r3, r4
    bf08:	f00d f816 	bl	18f38 <k_work_queue_start>
	k_work_init(&data->mbox_work, mbox_callback_process);
    bf0c:	f509 7026 	add.w	r0, r9, #664	; 0x298
    bf10:	492b      	ldr	r1, [pc, #172]	; (bfc0 <open+0x1a4>)
    bf12:	f013 f850 	bl	1efb6 <k_work_init>
		(const struct mbox_driver_api *)channel->dev->api;
    bf16:	f8da 0014 	ldr.w	r0, [sl, #20]
	if (api->register_callback == NULL) {
    bf1a:	6883      	ldr	r3, [r0, #8]
    bf1c:	685c      	ldr	r4, [r3, #4]
    bf1e:	b91c      	cbnz	r4, bf28 <open+0x10c>
		return -ENOSYS;
    bf20:	f06f 0457 	mvn.w	r4, #87	; 0x57
	atomic_set(&data->state, STATE_READY);
    bf24:	2100      	movs	r1, #0
    bf26:	e037      	b.n	bf98 <open+0x17c>
	return api->register_callback(channel->dev, channel->id, cb, user_data);
    bf28:	464b      	mov	r3, r9
    bf2a:	4a26      	ldr	r2, [pc, #152]	; (bfc4 <open+0x1a8>)
    bf2c:	f8da 1018 	ldr.w	r1, [sl, #24]
    bf30:	47a0      	blx	r4
	if (err != 0) {
    bf32:	4604      	mov	r4, r0
    bf34:	2800      	cmp	r0, #0
    bf36:	d1f5      	bne.n	bf24 <open+0x108>
		(const struct mbox_driver_api *)channel->dev->api;
    bf38:	f8da 0014 	ldr.w	r0, [sl, #20]
	if (api->set_enabled == NULL) {
    bf3c:	6883      	ldr	r3, [r0, #8]
    bf3e:	691b      	ldr	r3, [r3, #16]
    bf40:	2b00      	cmp	r3, #0
    bf42:	d0ed      	beq.n	bf20 <open+0x104>
	return api->set_enabled(channel->dev, channel->id, enable);
    bf44:	2201      	movs	r2, #1
    bf46:	f8da 1018 	ldr.w	r1, [sl, #24]
    bf4a:	4798      	blx	r3
	if (err != 0) {
    bf4c:	4604      	mov	r4, r0
    bf4e:	2800      	cmp	r0, #0
    bf50:	d1e8      	bne.n	bf24 <open+0x108>
	rpmsg_inst->bound_cb = bound_cb;
    bf52:	4b1d      	ldr	r3, [pc, #116]	; (bfc8 <open+0x1ac>)
	err = ipc_rpmsg_init(rpmsg_inst, data->role, conf->buffer_size,
    bf54:	4628      	mov	r0, r5
	rpmsg_inst->bound_cb = bound_cb;
    bf56:	f8c5 3194 	str.w	r3, [r5, #404]	; 0x194
	rpmsg_inst->cb = ept_cb;
    bf5a:	4b1c      	ldr	r3, [pc, #112]	; (bfcc <open+0x1b0>)
    bf5c:	f8c5 3198 	str.w	r3, [r5, #408]	; 0x198
	err = ipc_rpmsg_init(rpmsg_inst, data->role, conf->buffer_size,
    bf60:	4b1b      	ldr	r3, [pc, #108]	; (bfd0 <open+0x1b4>)
    bf62:	9303      	str	r3, [sp, #12]
    bf64:	f8d5 31f8 	ldr.w	r3, [r5, #504]	; 0x1f8
    bf68:	9302      	str	r3, [sp, #8]
    bf6a:	f8d5 31f0 	ldr.w	r3, [r5, #496]	; 0x1f0
    bf6e:	e9cd 8300 	strd	r8, r3, [sp]
    bf72:	f8d5 3250 	ldr.w	r3, [r5, #592]	; 0x250
    bf76:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    bf78:	f8d5 1350 	ldr.w	r1, [r5, #848]	; 0x350
    bf7c:	f000 f976 	bl	c26c <ipc_rpmsg_init>
	if (err != 0) {
    bf80:	4604      	mov	r4, r0
    bf82:	2800      	cmp	r0, #0
    bf84:	d1ce      	bne.n	bf24 <open+0x108>
	data->tx_buffer_size = rpmsg_virtio_get_buffer_size(rdev);
    bf86:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
    bf8a:	f00c f985 	bl	18298 <rpmsg_virtio_get_buffer_size>
	if (data->tx_buffer_size < 0) {
    bf8e:	2800      	cmp	r0, #0
	data->tx_buffer_size = rpmsg_virtio_get_buffer_size(rdev);
    bf90:	f8c5 0358 	str.w	r0, [r5, #856]	; 0x358
	if (data->tx_buffer_size < 0) {
    bf94:	db0a      	blt.n	bfac <open+0x190>
	atomic_set(&data->state, STATE_INITED);
    bf96:	2102      	movs	r1, #2
	atomic_set(&data->state, STATE_READY);
    bf98:	4638      	mov	r0, r7
    bf9a:	f00e fed8 	bl	1ad4e <atomic_set.isra.0>
}
    bf9e:	4620      	mov	r0, r4
    bfa0:	b005      	add	sp, #20
    bfa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOMEM;
    bfa6:	f06f 040b 	mvn.w	r4, #11
    bfaa:	e7bb      	b.n	bf24 <open+0x108>
		err = -EINVAL;
    bfac:	f06f 0415 	mvn.w	r4, #21
    bfb0:	e7b8      	b.n	bf24 <open+0x108>
		return -EALREADY;
    bfb2:	f06f 0477 	mvn.w	r4, #119	; 0x77
    bfb6:	e7f2      	b.n	bf9e <open+0x182>
    bfb8:	0001ad37 	.word	0x0001ad37
    bfbc:	2000af78 	.word	0x2000af78
    bfc0:	0001acef 	.word	0x0001acef
    bfc4:	0001ace3 	.word	0x0001ace3
    bfc8:	0000bd81 	.word	0x0000bd81
    bfcc:	0001ad09 	.word	0x0001ad09
    bfd0:	0001ad7f 	.word	0x0001ad7f

0000bfd4 <close>:
{
    bfd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    bfd8:	4606      	mov	r6, r0
    bfda:	f04f 0901 	mov.w	r9, #1
	struct backend_data_t *data = instance->data;
    bfde:	6905      	ldr	r5, [r0, #16]
	const struct backend_config_t *conf = instance->config;
    bfe0:	f8d0 8004 	ldr.w	r8, [r0, #4]
	if (!atomic_cas(&data->state, STATE_INITED, STATE_BUSY)) {
    bfe4:	f505 7755 	add.w	r7, r5, #852	; 0x354
    bfe8:	e8d7 3fef 	ldaex	r3, [r7]
    bfec:	2b02      	cmp	r3, #2
    bfee:	d103      	bne.n	bff8 <close+0x24>
    bff0:	e8c7 9fe2 	stlex	r2, r9, [r7]
    bff4:	2a00      	cmp	r2, #0
    bff6:	d1f7      	bne.n	bfe8 <close+0x14>
    bff8:	d149      	bne.n	c08e <close+0xba>
		if (strcmp("", rpmsg_ept->name) != 0) {
    bffa:	4826      	ldr	r0, [pc, #152]	; (c094 <close+0xc0>)
    bffc:	f105 0140 	add.w	r1, r5, #64	; 0x40
    c000:	f00f fc38 	bl	1b874 <strcmp>
    c004:	b120      	cbz	r0, c010 <close+0x3c>
		return -EBUSY;
    c006:	f06f 040f 	mvn.w	r4, #15
}
    c00a:	4620      	mov	r0, r4
    c00c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (strcmp("", rpmsg_ept->name) != 0) {
    c010:	4820      	ldr	r0, [pc, #128]	; (c094 <close+0xc0>)
    c012:	f105 01b0 	add.w	r1, r5, #176	; 0xb0
    c016:	f00f fc2d 	bl	1b874 <strcmp>
    c01a:	2800      	cmp	r0, #0
    c01c:	d1f3      	bne.n	c006 <close+0x32>
	err = ipc_rpmsg_deinit(rpmsg_inst, data->role);
    c01e:	4628      	mov	r0, r5
    c020:	f8d5 1350 	ldr.w	r1, [r5, #848]	; 0x350
    c024:	f00e feff 	bl	1ae26 <ipc_rpmsg_deinit>
	if (err != 0) {
    c028:	4604      	mov	r4, r0
    c02a:	bb70      	cbnz	r0, c08a <close+0xb6>
	const struct backend_config_t *conf = instance->config;
    c02c:	6871      	ldr	r1, [r6, #4]
	struct backend_data_t *data = instance->data;
    c02e:	6936      	ldr	r6, [r6, #16]
		(const struct mbox_driver_api *)channel->dev->api;
    c030:	6948      	ldr	r0, [r1, #20]
	if (api->set_enabled == NULL) {
    c032:	6883      	ldr	r3, [r0, #8]
    c034:	691b      	ldr	r3, [r3, #16]
    c036:	b333      	cbz	r3, c086 <close+0xb2>
	return api->set_enabled(channel->dev, channel->id, enable);
    c038:	4622      	mov	r2, r4
    c03a:	6989      	ldr	r1, [r1, #24]
    c03c:	4798      	blx	r3
	if (err != 0) {
    c03e:	4604      	mov	r4, r0
    c040:	bb18      	cbnz	r0, c08a <close+0xb6>
	k_work_queue_drain(&data->mbox_wq, 1);
    c042:	f506 762a 	add.w	r6, r6, #680	; 0x2a8
    c046:	4649      	mov	r1, r9
    c048:	4630      	mov	r0, r6
    c04a:	f00c ffad 	bl	18fa8 <k_work_queue_drain>
	z_impl_k_thread_abort(thread);
    c04e:	4630      	mov	r0, r6
	err = ipc_static_vrings_deinit(&data->vr, conf->role);
    c050:	f505 76d8 	add.w	r6, r5, #432	; 0x1b0
    c054:	f001 fa14 	bl	d480 <z_impl_k_thread_abort>
    c058:	4630      	mov	r0, r6
    c05a:	f8d8 1000 	ldr.w	r1, [r8]
    c05e:	f00e ff1f 	bl	1aea0 <ipc_static_vrings_deinit>
	if (err != 0) {
    c062:	4604      	mov	r4, r0
    c064:	b988      	cbnz	r0, c08a <close+0xb6>
	memset(&data->vr, 0, sizeof(struct ipc_static_vrings));
    c066:	4601      	mov	r1, r0
    c068:	22e8      	movs	r2, #232	; 0xe8
    c06a:	4630      	mov	r0, r6
    c06c:	f00f fc3c 	bl	1b8e8 <memset>
	memset(rpmsg_inst, 0, sizeof(struct ipc_rpmsg_instance));
    c070:	4621      	mov	r1, r4
    c072:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
    c076:	4628      	mov	r0, r5
    c078:	f00f fc36 	bl	1b8e8 <memset>
	atomic_set(&data->state, STATE_READY);
    c07c:	4621      	mov	r1, r4
	atomic_set(&data->state, STATE_INITED);
    c07e:	4638      	mov	r0, r7
    c080:	f00e fe65 	bl	1ad4e <atomic_set.isra.0>
	return err;
    c084:	e7c1      	b.n	c00a <close+0x36>
		return -ENOSYS;
    c086:	f06f 0457 	mvn.w	r4, #87	; 0x57
	atomic_set(&data->state, STATE_INITED);
    c08a:	2102      	movs	r1, #2
    c08c:	e7f7      	b.n	c07e <close+0xaa>
		return -EALREADY;
    c08e:	f06f 0477 	mvn.w	r4, #119	; 0x77
    c092:	e7ba      	b.n	c00a <close+0x36>
    c094:	00020926 	.word	0x00020926

0000c098 <send>:
{
    c098:	b513      	push	{r0, r1, r4, lr}
    c09a:	4604      	mov	r4, r0
    c09c:	4608      	mov	r0, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c09e:	6921      	ldr	r1, [r4, #16]
    c0a0:	f501 7155 	add.w	r1, r1, #852	; 0x354
    c0a4:	e8d1 1faf 	lda	r1, [r1]
	if (atomic_get(&data->state) != STATE_INITED) {
    c0a8:	2902      	cmp	r1, #2
    c0aa:	d110      	bne.n	c0ce <send+0x36>
	if (len == 0) {
    c0ac:	b193      	cbz	r3, c0d4 <send+0x3c>
	if (!rpmsg_ept) {
    c0ae:	b1a0      	cbz	r0, c0da <send+0x42>
    c0b0:	2101      	movs	r1, #1
    c0b2:	e9cd 3100 	strd	r3, r1, [sp]
    c0b6:	4613      	mov	r3, r2
    c0b8:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
    c0bc:	f00b fffe 	bl	180bc <rpmsg_send_offchannel_raw>
	if (ret == RPMSG_ERR_NO_BUFF) {
    c0c0:	4b07      	ldr	r3, [pc, #28]	; (c0e0 <send+0x48>)
		return -ENOMEM;
    c0c2:	4298      	cmp	r0, r3
    c0c4:	bf08      	it	eq
    c0c6:	f06f 000b 	mvneq.w	r0, #11
}
    c0ca:	b002      	add	sp, #8
    c0cc:	bd10      	pop	{r4, pc}
		return -EBUSY;
    c0ce:	f06f 000f 	mvn.w	r0, #15
    c0d2:	e7fa      	b.n	c0ca <send+0x32>
		return -EBADMSG;
    c0d4:	f06f 004c 	mvn.w	r0, #76	; 0x4c
    c0d8:	e7f7      	b.n	c0ca <send+0x32>
		return -ENOENT;
    c0da:	f06f 0001 	mvn.w	r0, #1
    c0de:	e7f4      	b.n	c0ca <send+0x32>
    c0e0:	fffff82e 	.word	0xfffff82e

0000c0e4 <register_ept>:
{
    c0e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    c0e8:	4688      	mov	r8, r1
    c0ea:	4615      	mov	r5, r2
	struct backend_data_t *data = instance->data;
    c0ec:	6906      	ldr	r6, [r0, #16]
    c0ee:	f506 7355 	add.w	r3, r6, #852	; 0x354
    c0f2:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&data->state) != STATE_INITED) {
    c0f6:	2b02      	cmp	r3, #2
    c0f8:	d15f      	bne.n	c1ba <register_ept+0xd6>
	if (cfg->name == NULL || cfg->name[0] == '\0') {
    c0fa:	6813      	ldr	r3, [r2, #0]
    c0fc:	b923      	cbnz	r3, c108 <register_ept+0x24>
		return -EINVAL;
    c0fe:	f06f 0015 	mvn.w	r0, #21
}
    c102:	b003      	add	sp, #12
    c104:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cfg->name == NULL || cfg->name[0] == '\0') {
    c108:	781b      	ldrb	r3, [r3, #0]
    c10a:	2b00      	cmp	r3, #0
    c10c:	d0f7      	beq.n	c0fe <register_ept+0x1a>
			register_ept_on_host(rpmsg_inst, cfg) :
    c10e:	f8d6 9350 	ldr.w	r9, [r6, #848]	; 0x350
    c112:	f1b9 0f00 	cmp.w	r9, #0
    c116:	d133      	bne.n	c180 <register_ept+0x9c>
	k_mutex_lock(&rpmsg_inst->mtx, K_FOREVER);
    c118:	f506 77ce 	add.w	r7, r6, #412	; 0x19c
	return z_impl_k_mutex_lock(mutex, timeout);
    c11c:	f04f 32ff 	mov.w	r2, #4294967295
    c120:	f04f 33ff 	mov.w	r3, #4294967295
    c124:	4638      	mov	r0, r7
    c126:	f00c fc9b 	bl	18a60 <z_impl_k_mutex_lock>
	ept_cached = get_ept(rpmsg_inst, &rpmsg_ept, cfg->name);
    c12a:	4630      	mov	r0, r6
    c12c:	682a      	ldr	r2, [r5, #0]
    c12e:	a901      	add	r1, sp, #4
    c130:	f7ff fe60 	bl	bdf4 <get_ept>
	if (rpmsg_ept == NULL) {
    c134:	9c01      	ldr	r4, [sp, #4]
    c136:	b91c      	cbnz	r4, c140 <register_ept+0x5c>
		k_mutex_unlock(&rpmsg_inst->mtx);
    c138:	4638      	mov	r0, r7
    c13a:	f00e fe06 	bl	1ad4a <k_mutex_unlock.isra.0>
	if (rpmsg_ept == NULL) {
    c13e:	e7de      	b.n	c0fe <register_ept+0x1a>
	rpmsg_ept->cb = &cfg->cb;
    c140:	f105 0308 	add.w	r3, r5, #8
    c144:	66a3      	str	r3, [r4, #104]	; 0x68
	rpmsg_ept->priv = cfg->priv;
    c146:	696b      	ldr	r3, [r5, #20]
	rpmsg_ept->bound = false;
    c148:	f884 9064 	strb.w	r9, [r4, #100]	; 0x64
	rpmsg_ept->priv = cfg->priv;
    c14c:	66e3      	str	r3, [r4, #108]	; 0x6c
	rpmsg_ept->ep.priv = rpmsg_ept;
    c14e:	63e4      	str	r4, [r4, #60]	; 0x3c
	if (ept_cached) {
    c150:	b160      	cbz	r0, c16c <register_ept+0x88>
		k_mutex_unlock(&rpmsg_inst->mtx);
    c152:	4638      	mov	r0, r7
    c154:	f00e fdf9 	bl	1ad4a <k_mutex_unlock.isra.0>
		advertise_ept(rpmsg_inst, rpmsg_ept, cfg->name, rpmsg_ept->dest);
    c158:	4621      	mov	r1, r4
    c15a:	4630      	mov	r0, r6
    c15c:	6e23      	ldr	r3, [r4, #96]	; 0x60
    c15e:	682a      	ldr	r2, [r5, #0]
    c160:	f7ff fe26 	bl	bdb0 <advertise_ept>
	return 0;
    c164:	2000      	movs	r0, #0
	(*token) = rpmsg_ept;
    c166:	f8c8 4000 	str.w	r4, [r8]
	return 0;
    c16a:	e7ca      	b.n	c102 <register_ept+0x1e>
		strncpy(rpmsg_ept->name, cfg->name, sizeof(rpmsg_ept->name));
    c16c:	2220      	movs	r2, #32
    c16e:	6829      	ldr	r1, [r5, #0]
    c170:	f104 0040 	add.w	r0, r4, #64	; 0x40
    c174:	f00f fb5a 	bl	1b82c <strncpy>
		k_mutex_unlock(&rpmsg_inst->mtx);
    c178:	4638      	mov	r0, r7
    c17a:	f00e fde6 	bl	1ad4a <k_mutex_unlock.isra.0>
	if (rpmsg_ept == NULL) {
    c17e:	e7f1      	b.n	c164 <register_ept+0x80>
	return get_ept_slot_with_name(rpmsg_inst, "");
    c180:	4630      	mov	r0, r6
    c182:	490f      	ldr	r1, [pc, #60]	; (c1c0 <register_ept+0xdc>)
    c184:	f00e fd97 	bl	1acb6 <get_ept_slot_with_name>
	if (rpmsg_ept == NULL) {
    c188:	4604      	mov	r4, r0
    c18a:	2800      	cmp	r0, #0
    c18c:	d0b7      	beq.n	c0fe <register_ept+0x1a>
	rpmsg_ept->cb = &cfg->cb;
    c18e:	f105 0308 	add.w	r3, r5, #8
    c192:	6683      	str	r3, [r0, #104]	; 0x68
	rpmsg_ept->priv = cfg->priv;
    c194:	696b      	ldr	r3, [r5, #20]
	rpmsg_ept->ep.priv = rpmsg_ept;
    c196:	63c0      	str	r0, [r0, #60]	; 0x3c
	rpmsg_ept->priv = cfg->priv;
    c198:	66c3      	str	r3, [r0, #108]	; 0x6c
	rpmsg_ept->bound = false;
    c19a:	2300      	movs	r3, #0
    c19c:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
	strncpy(rpmsg_ept->name, cfg->name, sizeof(rpmsg_ept->name));
    c1a0:	2220      	movs	r2, #32
    c1a2:	6829      	ldr	r1, [r5, #0]
    c1a4:	3040      	adds	r0, #64	; 0x40
    c1a6:	f00f fb41 	bl	1b82c <strncpy>
	err = ipc_rpmsg_register_ept(rpmsg_inst, RPMSG_REMOTE, rpmsg_ept);
    c1aa:	4622      	mov	r2, r4
    c1ac:	2101      	movs	r1, #1
    c1ae:	4630      	mov	r0, r6
    c1b0:	f000 f83e 	bl	c230 <ipc_rpmsg_register_ept>
	if (err != 0) {
    c1b4:	2800      	cmp	r0, #0
    c1b6:	d0d5      	beq.n	c164 <register_ept+0x80>
    c1b8:	e7a1      	b.n	c0fe <register_ept+0x1a>
		return -EBUSY;
    c1ba:	f06f 000f 	mvn.w	r0, #15
    c1be:	e7a0      	b.n	c102 <register_ept+0x1e>
    c1c0:	00020926 	.word	0x00020926

0000c1c4 <ns_bind_cb>:
{
	rpmsg_destroy_ept(ep);
}

static void ns_bind_cb(struct rpmsg_device *rdev, const char *name, uint32_t dest)
{
    c1c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c1c8:	4605      	mov	r5, r0
    c1ca:	460e      	mov	r6, r1
    c1cc:	4690      	mov	r8, r2
	int err;

	p_rvdev = CONTAINER_OF(rdev, struct rpmsg_virtio_device, rdev);
	instance = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);

	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
    c1ce:	2700      	movs	r7, #0
	instance = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);
    c1d0:	f8d0 a0a4 	ldr.w	sl, [r0, #164]	; 0xa4
{
    c1d4:	b085      	sub	sp, #20
    c1d6:	f5aa 74a4 	sub.w	r4, sl, #328	; 0x148
		ept = &instance->endpoint[i];

		if (strcmp(name, ept->name) == 0) {
    c1da:	4621      	mov	r1, r4
    c1dc:	4630      	mov	r0, r6
    c1de:	f00f fb49 	bl	1b874 <strcmp>
    c1e2:	b9e0      	cbnz	r0, c21e <ns_bind_cb+0x5a>
			 * The destination address is 'dest' so ns_bind_cb() is
			 * *NOT* called on the REMOTE side. The bound_cb()
			 * function will eventually take care of notifying the
			 * REMOTE side if needed.
			 */
			err = rpmsg_create_ept(&ept->ep, rdev, name, RPMSG_ADDR_ANY,
    c1e4:	4b11      	ldr	r3, [pc, #68]	; (c22c <ns_bind_cb+0x68>)
		ept = &instance->endpoint[i];
    c1e6:	f1a4 0b40 	sub.w	fp, r4, #64	; 0x40
			err = rpmsg_create_ept(&ept->ep, rdev, name, RPMSG_ADDR_ANY,
    c1ea:	9302      	str	r3, [sp, #8]
    c1ec:	f8da 3010 	ldr.w	r3, [sl, #16]
    c1f0:	4632      	mov	r2, r6
    c1f2:	e9cd 8300 	strd	r8, r3, [sp]
    c1f6:	4629      	mov	r1, r5
    c1f8:	f04f 33ff 	mov.w	r3, #4294967295
    c1fc:	4658      	mov	r0, fp
    c1fe:	f5aa 79c4 	sub.w	r9, sl, #392	; 0x188
    c202:	f00b ffa1 	bl	18148 <rpmsg_create_ept>
					       dest, instance->cb, rpmsg_service_unbind);
			if (err != 0) {
    c206:	b960      	cbnz	r0, c222 <ns_bind_cb+0x5e>
				return;
			}

			ept->bound = true;
    c208:	2370      	movs	r3, #112	; 0x70
    c20a:	2201      	movs	r2, #1
    c20c:	fb03 9307 	mla	r3, r3, r7, r9
    c210:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			if (instance->bound_cb) {
    c214:	f8da 300c 	ldr.w	r3, [sl, #12]
    c218:	b10b      	cbz	r3, c21e <ns_bind_cb+0x5a>
				instance->bound_cb(ept);
    c21a:	4658      	mov	r0, fp
    c21c:	4798      	blx	r3
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
    c21e:	3470      	adds	r4, #112	; 0x70
    c220:	b117      	cbz	r7, c228 <ns_bind_cb+0x64>
			}
		}
	}
}
    c222:	b005      	add	sp, #20
    c224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
    c228:	2701      	movs	r7, #1
    c22a:	e7d6      	b.n	c1da <ns_bind_cb+0x16>
    c22c:	0001ae23 	.word	0x0001ae23

0000c230 <ipc_rpmsg_register_ept>:

int ipc_rpmsg_register_ept(struct ipc_rpmsg_instance *instance, unsigned int role,
			   struct ipc_rpmsg_ept *ept)
{
    c230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    c232:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!instance || !ept) {
    c234:	b190      	cbz	r0, c25c <ipc_rpmsg_register_ept+0x2c>
    c236:	b18a      	cbz	r2, c25c <ipc_rpmsg_register_ept+0x2c>
		return -EINVAL;
	}

	rdev = rpmsg_virtio_get_rpmsg_device(&instance->rvdev);

	if (role == RPMSG_REMOTE) {
    c238:	2901      	cmp	r1, #1
    c23a:	d112      	bne.n	c262 <ipc_rpmsg_register_ept+0x32>
		/*
		 * The destination address is RPMSG_ADDR_ANY, this will trigger
		 * the ns_bind_cb() callback function on the HOST side.
		 */
		return rpmsg_create_ept(&ept->ep, rdev, ept->name, RPMSG_ADDR_ANY,
    c23c:	4b0a      	ldr	r3, [pc, #40]	; (c268 <ipc_rpmsg_register_ept+0x38>)
    c23e:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
    c242:	9302      	str	r3, [sp, #8]
    c244:	f8d0 3198 	ldr.w	r3, [r0, #408]	; 0x198
    c248:	3240      	adds	r2, #64	; 0x40
    c24a:	9301      	str	r3, [sp, #4]
    c24c:	f04f 33ff 	mov.w	r3, #4294967295
    c250:	4620      	mov	r0, r4
    c252:	9300      	str	r3, [sp, #0]
    c254:	f00b ff78 	bl	18148 <rpmsg_create_ept>
					RPMSG_ADDR_ANY, instance->cb, rpmsg_service_unbind);
	}

	return RPMSG_SUCCESS;
}
    c258:	b004      	add	sp, #16
    c25a:	bd10      	pop	{r4, pc}
		return -EINVAL;
    c25c:	f06f 0015 	mvn.w	r0, #21
    c260:	e7fa      	b.n	c258 <ipc_rpmsg_register_ept+0x28>
	return RPMSG_SUCCESS;
    c262:	2000      	movs	r0, #0
    c264:	e7f8      	b.n	c258 <ipc_rpmsg_register_ept+0x28>
    c266:	bf00      	nop
    c268:	0001ae23 	.word	0x0001ae23

0000c26c <ipc_rpmsg_init>:
		   unsigned int buffer_size,
		   struct metal_io_region *shm_io,
		   struct virtio_device *vdev,
		   void *shb, size_t size,
		   rpmsg_ns_bind_cb p_bind_cb)
{
    c26c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c270:	b085      	sub	sp, #20
    c272:	460f      	mov	r7, r1
    c274:	e9dd 810c 	ldrd	r8, r1, [sp, #48]	; 0x30
    c278:	4614      	mov	r4, r2
    c27a:	e9dd 250e 	ldrd	r2, r5, [sp, #56]	; 0x38
    c27e:	461e      	mov	r6, r3
	rpmsg_ns_bind_cb bind_cb = p_bind_cb;

	if (!instance || !shb) {
    c280:	b328      	cbz	r0, c2ce <ipc_rpmsg_init+0x62>
    c282:	b321      	cbz	r1, c2ce <ipc_rpmsg_init+0x62>
		return -EINVAL;
	}

	if (p_bind_cb == NULL) {
		bind_cb = ns_bind_cb;
    c284:	f8df c04c 	ldr.w	ip, [pc, #76]	; c2d4 <ipc_rpmsg_init+0x68>
		config.h2r_buf_size = (uint32_t) buffer_size;
		config.r2h_buf_size = (uint32_t) buffer_size;

		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);

		return rpmsg_init_vdev_with_config(&instance->rvdev, vdev, bind_cb,
    c288:	f100 09e0 	add.w	r9, r0, #224	; 0xe0
		bind_cb = ns_bind_cb;
    c28c:	2d00      	cmp	r5, #0
    c28e:	bf08      	it	eq
    c290:	4665      	moveq	r5, ip
	if (role == RPMSG_HOST) {
    c292:	b997      	cbnz	r7, c2ba <ipc_rpmsg_init+0x4e>
		config.r2h_buf_size = (uint32_t) buffer_size;
    c294:	e9cd 4402 	strd	r4, r4, [sp, #8]
		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);
    c298:	f500 74c4 	add.w	r4, r0, #392	; 0x188
    c29c:	4620      	mov	r0, r4
    c29e:	f012 fc40 	bl	1eb22 <rpmsg_virtio_init_shm_pool>
		return rpmsg_init_vdev_with_config(&instance->rvdev, vdev, bind_cb,
    c2a2:	ab02      	add	r3, sp, #8
    c2a4:	e9cd 4300 	strd	r4, r3, [sp]
    c2a8:	462a      	mov	r2, r5
    c2aa:	4633      	mov	r3, r6
    c2ac:	4641      	mov	r1, r8
    c2ae:	4648      	mov	r0, r9
    c2b0:	f00c f818 	bl	182e4 <rpmsg_init_vdev_with_config>
						   shm_io, &instance->shm_pool,
						   &config);
	} else {
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
	}
}
    c2b4:	b005      	add	sp, #20
    c2b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
    c2ba:	2200      	movs	r2, #0
    c2bc:	4641      	mov	r1, r8
    c2be:	920c      	str	r2, [sp, #48]	; 0x30
    c2c0:	4648      	mov	r0, r9
    c2c2:	462a      	mov	r2, r5
}
    c2c4:	b005      	add	sp, #20
    c2c6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
    c2ca:	f00c b91b 	b.w	18504 <rpmsg_init_vdev>
		return -EINVAL;
    c2ce:	f06f 0015 	mvn.w	r0, #21
    c2d2:	e7ef      	b.n	c2b4 <ipc_rpmsg_init+0x48>
    c2d4:	0000c1c5 	.word	0x0000c1c5

0000c2d8 <ipc_static_vrings_init>:

	return 0;
}

int ipc_static_vrings_init(struct ipc_static_vrings *vr, unsigned int role)
{
    c2d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    c2da:	460e      	mov	r6, r1
	int err = 0;

	if (!vr) {
    c2dc:	4604      	mov	r4, r0
{
    c2de:	b089      	sub	sp, #36	; 0x24
	if (!vr) {
    c2e0:	2800      	cmp	r0, #0
    c2e2:	d06f      	beq.n	c3c4 <ipc_static_vrings_init+0xec>
		return -EINVAL;
	}

	vr->shm_device.name = SHM_DEVICE_NAME;
	vr->shm_device.num_regions = 1;
    c2e4:	2301      	movs	r3, #1
	vr->shm_physmap[0] = vr->shm_addr;
    c2e6:	4602      	mov	r2, r0
	vr->shm_device.num_regions = 1;
    c2e8:	63c3      	str	r3, [r0, #60]	; 0x3c

	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
    c2ea:	2300      	movs	r3, #0
	vr->shm_physmap[0] = vr->shm_addr;
    c2ec:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
	vr->shm_device.name = SHM_DEVICE_NAME;
    c2f0:	4f36      	ldr	r7, [pc, #216]	; (c3cc <ipc_static_vrings_init+0xf4>)
	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
    c2f2:	3040      	adds	r0, #64	; 0x40
	vr->shm_device.name = SHM_DEVICE_NAME;
    c2f4:	f840 7c0c 	str.w	r7, [r0, #-12]
	vr->shm_physmap[0] = vr->shm_addr;
    c2f8:	f842 1f30 	str.w	r1, [r2, #48]!
	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
    c2fc:	e9cd 3301 	strd	r3, r3, [sp, #4]
    c300:	f04f 33ff 	mov.w	r3, #4294967295
    c304:	9300      	str	r3, [sp, #0]
    c306:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    c308:	f011 ff0c 	bl	1e124 <metal_io_init>
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    c30c:	4a30      	ldr	r2, [pc, #192]	; (c3d0 <ipc_static_vrings_init+0xf8>)
    c30e:	ab06      	add	r3, sp, #24
    c310:	e892 0003 	ldmia.w	r2, {r0, r1}
    c314:	e883 0003 	stmia.w	r3, {r0, r1}
	err = metal_init(&metal_params);
    c318:	4618      	mov	r0, r3
    c31a:	f00b fdef 	bl	17efc <metal_init>
	if (err != 0) {
    c31e:	4605      	mov	r5, r0
    c320:	b9d8      	cbnz	r0, c35a <ipc_static_vrings_init+0x82>
	err = metal_register_generic_device(&vr->shm_device);
    c322:	f104 0034 	add.w	r0, r4, #52	; 0x34
    c326:	f00b fdc9 	bl	17ebc <metal_register_generic_device>
	if (err != 0) {
    c32a:	4605      	mov	r5, r0
    c32c:	b9a8      	cbnz	r0, c35a <ipc_static_vrings_init+0x82>
	err = metal_device_open("generic", SHM_DEVICE_NAME, &device);
    c32e:	4639      	mov	r1, r7
    c330:	4828      	ldr	r0, [pc, #160]	; (c3d4 <ipc_static_vrings_init+0xfc>)
    c332:	aa05      	add	r2, sp, #20
    c334:	f011 fec8 	bl	1e0c8 <metal_device_open>
	if (err != 0) {
    c338:	4605      	mov	r5, r0
    c33a:	b970      	cbnz	r0, c35a <ipc_static_vrings_init+0x82>
	vr->shm_io = metal_device_io_region(device, 0);
    c33c:	9b05      	ldr	r3, [sp, #20]
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
	return (index < device->num_regions
		? &device->regions[index]
		: NULL);
    c33e:	689a      	ldr	r2, [r3, #8]
    c340:	b172      	cbz	r2, c360 <ipc_static_vrings_init+0x88>
    c342:	330c      	adds	r3, #12
	vr->vq[RPMSG_VQ_0] = virtqueue_allocate(vr->vring_size);
    c344:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
	vr->shm_io = metal_device_io_region(device, 0);
    c348:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	vr->vq[RPMSG_VQ_0] = virtqueue_allocate(vr->vring_size);
    c34c:	f00e fd9a 	bl	1ae84 <virtqueue_allocate>
    c350:	f8c4 00d4 	str.w	r0, [r4, #212]	; 0xd4
	if (vr->vq[RPMSG_VQ_0] == NULL) {
    c354:	b930      	cbnz	r0, c364 <ipc_static_vrings_init+0x8c>
		return -ENOMEM;
    c356:	f06f 050b 	mvn.w	r5, #11
	if (err != 0) {
		return err;
	}

	return vq_setup(vr, role);
}
    c35a:	4628      	mov	r0, r5
    c35c:	b009      	add	sp, #36	; 0x24
    c35e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c360:	4603      	mov	r3, r0
    c362:	e7ef      	b.n	c344 <ipc_static_vrings_init+0x6c>
	vr->vq[RPMSG_VQ_1] = virtqueue_allocate(vr->vring_size);
    c364:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    c368:	f00e fd8c 	bl	1ae84 <virtqueue_allocate>
    c36c:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
	if (vr->vq[RPMSG_VQ_1] == NULL) {
    c370:	2800      	cmp	r0, #0
    c372:	d0f0      	beq.n	c356 <ipc_static_vrings_init+0x7e>
	vr->rvrings[RPMSG_VQ_0].info.vaddr = (void *) vr->tx_addr;
    c374:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
	vr->rvrings[RPMSG_VQ_0].io = vr->shm_io;
    c378:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
	vr->rvrings[RPMSG_VQ_0].info.vaddr = (void *) vr->tx_addr;
    c37c:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	vr->rvrings[RPMSG_VQ_0].info.align = VRING_ALIGNMENT;
    c380:	2304      	movs	r3, #4
    c382:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	vr->rvrings[RPMSG_VQ_1].info.align = VRING_ALIGNMENT;
    c386:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
	vr->vdev.vrings_num = VRING_COUNT;
    c38a:	2302      	movs	r3, #2
    c38c:	62a3      	str	r3, [r4, #40]	; 0x28
	vr->vdev.func = &dispatch;
    c38e:	4b12      	ldr	r3, [pc, #72]	; (c3d8 <ipc_static_vrings_init+0x100>)
	vr->rvrings[RPMSG_VQ_0].info.num_descs = vr->vring_size;
    c390:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
	vr->rvrings[RPMSG_VQ_0].vq = vr->vq[RPMSG_VQ_0];
    c394:	f8d4 70d4 	ldr.w	r7, [r4, #212]	; 0xd4
	vr->rvrings[RPMSG_VQ_0].io = vr->shm_io;
    c398:	f8c4 10b8 	str.w	r1, [r4, #184]	; 0xb8
	vr->rvrings[RPMSG_VQ_1].io = vr->shm_io;
    c39c:	f8c4 10d0 	str.w	r1, [r4, #208]	; 0xd0
	vr->rvrings[RPMSG_VQ_1].info.vaddr = (void *) vr->rx_addr;
    c3a0:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
	vr->vdev.func = &dispatch;
    c3a4:	6223      	str	r3, [r4, #32]
	vr->vdev.vrings_info = &vr->rvrings[0];
    c3a6:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
	vr->rvrings[RPMSG_VQ_0].info.num_descs = vr->vring_size;
    c3aa:	f8a4 20b0 	strh.w	r2, [r4, #176]	; 0xb0
	vr->rvrings[RPMSG_VQ_0].vq = vr->vq[RPMSG_VQ_0];
    c3ae:	f8c4 70a4 	str.w	r7, [r4, #164]	; 0xa4
	vr->rvrings[RPMSG_VQ_1].info.vaddr = (void *) vr->rx_addr;
    c3b2:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
	vr->rvrings[RPMSG_VQ_1].info.num_descs = vr->vring_size;
    c3b6:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	vr->rvrings[RPMSG_VQ_1].vq = vr->vq[RPMSG_VQ_1];
    c3ba:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	vr->vdev.role = role;
    c3be:	61a6      	str	r6, [r4, #24]
	vr->vdev.vrings_info = &vr->rvrings[0];
    c3c0:	62e3      	str	r3, [r4, #44]	; 0x2c
	return 0;
    c3c2:	e7ca      	b.n	c35a <ipc_static_vrings_init+0x82>
		return -EINVAL;
    c3c4:	f06f 0515 	mvn.w	r5, #21
    c3c8:	e7c7      	b.n	c35a <ipc_static_vrings_init+0x82>
    c3ca:	bf00      	nop
    c3cc:	00020ef9 	.word	0x00020ef9
    c3d0:	0001fd64 	.word	0x0001fd64
    c3d4:	00020f03 	.word	0x00020f03
    c3d8:	00020058 	.word	0x00020058

0000c3dc <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    c3dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c3e0:	4605      	mov	r5, r0
	__asm__ volatile(
    c3e2:	f04f 0320 	mov.w	r3, #32
    c3e6:	f3ef 8611 	mrs	r6, BASEPRI
    c3ea:	f383 8812 	msr	BASEPRI_MAX, r3
    c3ee:	f3bf 8f6f 	isb	sy
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    c3f2:	f04f 090c 	mov.w	r9, #12
	return list->head;
    c3f6:	4b0d      	ldr	r3, [pc, #52]	; (c42c <pm_state_notify+0x50>)
    c3f8:	4f0d      	ldr	r7, [pc, #52]	; (c430 <pm_state_notify+0x54>)
    c3fa:	681c      	ldr	r4, [r3, #0]
    c3fc:	f8df 8034 	ldr.w	r8, [pc, #52]	; c434 <pm_state_notify+0x58>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    c400:	b92c      	cbnz	r4, c40e <pm_state_notify+0x32>
	__asm__ volatile(
    c402:	f386 8811 	msr	BASEPRI, r6
    c406:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    c40a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    c40e:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    c412:	2d00      	cmp	r5, #0
    c414:	bf18      	it	ne
    c416:	4613      	movne	r3, r2
		if (callback) {
    c418:	b12b      	cbz	r3, c426 <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    c41a:	f898 2014 	ldrb.w	r2, [r8, #20]
    c41e:	fb09 f202 	mul.w	r2, r9, r2
    c422:	5cb8      	ldrb	r0, [r7, r2]
    c424:	4798      	blx	r3
	return node->next;
    c426:	6824      	ldr	r4, [r4, #0]
    c428:	e7ea      	b.n	c400 <pm_state_notify+0x24>
    c42a:	bf00      	nop
    c42c:	20009b10 	.word	0x20009b10
    c430:	20009b04 	.word	0x20009b04
    c434:	20009f2c 	.word	0x20009f2c

0000c438 <pm_system_resume>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    c438:	2201      	movs	r2, #1

void pm_system_resume(void)
{
    c43a:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    c43c:	4b16      	ldr	r3, [pc, #88]	; (c498 <pm_system_resume+0x60>)
    c43e:	7d1c      	ldrb	r4, [r3, #20]
    c440:	f004 031f 	and.w	r3, r4, #31
    c444:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    c446:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    c448:	4b14      	ldr	r3, [pc, #80]	; (c49c <pm_system_resume+0x64>)
    c44a:	0961      	lsrs	r1, r4, #5
    c44c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    c450:	e8d3 1fef 	ldaex	r1, [r3]
    c454:	ea01 0500 	and.w	r5, r1, r0
    c458:	e8c3 5fe6 	stlex	r6, r5, [r3]
    c45c:	2e00      	cmp	r6, #0
    c45e:	d1f7      	bne.n	c450 <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    c460:	420a      	tst	r2, r1
    c462:	d013      	beq.n	c48c <pm_system_resume+0x54>
	if (pm_state_exit_post_ops != NULL) {
    c464:	4b0e      	ldr	r3, [pc, #56]	; (c4a0 <pm_system_resume+0x68>)
    c466:	4d0f      	ldr	r5, [pc, #60]	; (c4a4 <pm_system_resume+0x6c>)
    c468:	b18b      	cbz	r3, c48e <pm_system_resume+0x56>
		pm_state_exit_post_ops(info->state, info->substate_id);
    c46a:	230c      	movs	r3, #12
    c46c:	4363      	muls	r3, r4
    c46e:	18ea      	adds	r2, r5, r3
    c470:	7851      	ldrb	r1, [r2, #1]
    c472:	5ce8      	ldrb	r0, [r5, r3]
    c474:	f00e fadf 	bl	1aa36 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    c478:	2000      	movs	r0, #0
    c47a:	f7ff ffaf 	bl	c3dc <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    c47e:	230c      	movs	r3, #12
    c480:	435c      	muls	r4, r3
    c482:	2300      	movs	r3, #0
    c484:	192a      	adds	r2, r5, r4
    c486:	512b      	str	r3, [r5, r4]
    c488:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    c48c:	bd70      	pop	{r4, r5, r6, pc}
    c48e:	f383 8811 	msr	BASEPRI, r3
    c492:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    c496:	e7ef      	b.n	c478 <pm_system_resume+0x40>
    c498:	20009f2c 	.word	0x20009f2c
    c49c:	20009b18 	.word	0x20009b18
    c4a0:	0001aa37 	.word	0x0001aa37
    c4a4:	20009b04 	.word	0x20009b04

0000c4a8 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    c4a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    c4ac:	4b32      	ldr	r3, [pc, #200]	; (c578 <pm_system_suspend+0xd0>)
{
    c4ae:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    c4b0:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
    c4b2:	f04f 0320 	mov.w	r3, #32
    c4b6:	f3ef 8811 	mrs	r8, BASEPRI
    c4ba:	f383 8812 	msr	BASEPRI_MAX, r3
    c4be:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    c4c2:	240c      	movs	r4, #12
    c4c4:	436c      	muls	r4, r5
    c4c6:	4b2d      	ldr	r3, [pc, #180]	; (c57c <pm_system_suspend+0xd4>)
    c4c8:	4e2d      	ldr	r6, [pc, #180]	; (c580 <pm_system_suspend+0xd8>)
    c4ca:	5d19      	ldrb	r1, [r3, r4]
    c4cc:	191a      	adds	r2, r3, r4
    c4ce:	2900      	cmp	r1, #0
    c4d0:	d047      	beq.n	c562 <pm_system_suspend+0xba>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    c4d2:	ca07      	ldmia	r2, {r0, r1, r2}
    c4d4:	eb06 0c04 	add.w	ip, r6, r4
    c4d8:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    c4dc:	2200      	movs	r2, #0
    c4de:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    c4e0:	f388 8811 	msr	BASEPRI, r8
    c4e4:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    c4e8:	230c      	movs	r3, #12
    c4ea:	436b      	muls	r3, r5
    c4ec:	5cf0      	ldrb	r0, [r6, r3]
    c4ee:	18f2      	adds	r2, r6, r3
    c4f0:	b3a8      	cbz	r0, c55e <pm_system_suspend+0xb6>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    c4f2:	1c7b      	adds	r3, r7, #1
    c4f4:	d010      	beq.n	c518 <pm_system_suspend+0x70>
			return (uint32_t)((t * to_hz + off) / from_hz);
    c4f6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    c4fa:	2100      	movs	r1, #0
    c4fc:	f8d2 c008 	ldr.w	ip, [r2, #8]
    c500:	4c20      	ldr	r4, [pc, #128]	; (c584 <pm_system_suspend+0xdc>)
    c502:	2300      	movs	r3, #0
    c504:	fbec 4100 	umlal	r4, r1, ip, r0
    c508:	4a1f      	ldr	r2, [pc, #124]	; (c588 <pm_system_suspend+0xe0>)
    c50a:	4620      	mov	r0, r4
    c50c:	f7fc fad4 	bl	8ab8 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    c510:	2101      	movs	r1, #1
    c512:	1a38      	subs	r0, r7, r0
    c514:	f012 ff21 	bl	1f35a <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    c518:	f00c fff2 	bl	19500 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    c51c:	2001      	movs	r0, #1
    c51e:	f7ff ff5d 	bl	c3dc <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c522:	4b1a      	ldr	r3, [pc, #104]	; (c58c <pm_system_suspend+0xe4>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    c524:	096a      	lsrs	r2, r5, #5
    c526:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    c52a:	2201      	movs	r2, #1
    c52c:	f005 011f 	and.w	r1, r5, #31
    c530:	408a      	lsls	r2, r1
    c532:	e8d3 0fef 	ldaex	r0, [r3]
    c536:	4310      	orrs	r0, r2
    c538:	e8c3 0fe1 	stlex	r1, r0, [r3]
    c53c:	2900      	cmp	r1, #0
    c53e:	d1f8      	bne.n	c532 <pm_system_suspend+0x8a>
	if (pm_state_set != NULL) {
    c540:	4b13      	ldr	r3, [pc, #76]	; (c590 <pm_system_suspend+0xe8>)
    c542:	b13b      	cbz	r3, c554 <pm_system_suspend+0xac>
		pm_state_set(info->state, info->substate_id);
    c544:	230c      	movs	r3, #12
    c546:	fb03 f005 	mul.w	r0, r3, r5
    c54a:	1833      	adds	r3, r6, r0
    c54c:	7859      	ldrb	r1, [r3, #1]
    c54e:	5c30      	ldrb	r0, [r6, r0]
    c550:	f00e fa65 	bl	1aa1e <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    c554:	f7ff ff70 	bl	c438 <pm_system_resume>
	k_sched_unlock();
    c558:	f00c ffe6 	bl	19528 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    c55c:	2001      	movs	r0, #1
}
    c55e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    c562:	4601      	mov	r1, r0
    c564:	4628      	mov	r0, r5
    c566:	f000 f815 	bl	c594 <pm_policy_next_state>
		if (info != NULL) {
    c56a:	2800      	cmp	r0, #0
    c56c:	d0b8      	beq.n	c4e0 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    c56e:	c807      	ldmia	r0, {r0, r1, r2}
    c570:	4434      	add	r4, r6
    c572:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    c576:	e7b3      	b.n	c4e0 <pm_system_suspend+0x38>
    c578:	20009f2c 	.word	0x20009f2c
    c57c:	20009af8 	.word	0x20009af8
    c580:	20009b04 	.word	0x20009b04
    c584:	000f423f 	.word	0x000f423f
    c588:	000f4240 	.word	0x000f4240
    c58c:	20009b18 	.word	0x20009b18
    c590:	0001aa1f 	.word	0x0001aa1f

0000c594 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    c594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c598:	b085      	sub	sp, #20
    c59a:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    c59c:	a903      	add	r1, sp, #12
    c59e:	f000 f843 	bl	c628 <pm_state_cpu_get_all>
    c5a2:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    c5a6:	4604      	mov	r4, r0
    c5a8:	f04f 0b00 	mov.w	fp, #0

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    c5ac:	4b1b      	ldr	r3, [pc, #108]	; (c61c <pm_policy_next_state+0x88>)
    c5ae:	9d03      	ldr	r5, [sp, #12]
    c5b0:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    c5b4:	1e43      	subs	r3, r0, #1
    c5b6:	b21b      	sxth	r3, r3
    c5b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    c5bc:	f8df 8060 	ldr.w	r8, [pc, #96]	; c620 <pm_policy_next_state+0x8c>
    c5c0:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    c5c4:	b924      	cbnz	r4, c5d0 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    c5c6:	46a1      	mov	r9, r4
}
    c5c8:	4648      	mov	r0, r9
    c5ca:	b005      	add	sp, #20
    c5cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c5d0:	46c4      	mov	ip, r8
    c5d2:	4659      	mov	r1, fp
    c5d4:	6868      	ldr	r0, [r5, #4]
    c5d6:	2300      	movs	r3, #0
    c5d8:	fbe0 c107 	umlal	ip, r1, r0, r7
    c5dc:	4a11      	ldr	r2, [pc, #68]	; (c624 <pm_policy_next_state+0x90>)
    c5de:	4660      	mov	r0, ip
    c5e0:	f7fc fa6a 	bl	8ab8 <__aeabi_uldivmod>
    c5e4:	46c4      	mov	ip, r8
    c5e6:	4659      	mov	r1, fp
    c5e8:	9001      	str	r0, [sp, #4]
    c5ea:	68a8      	ldr	r0, [r5, #8]
    c5ec:	2300      	movs	r3, #0
    c5ee:	fbe0 c107 	umlal	ip, r1, r0, r7
    c5f2:	4a0c      	ldr	r2, [pc, #48]	; (c624 <pm_policy_next_state+0x90>)
    c5f4:	4660      	mov	r0, ip
    c5f6:	f7fc fa5f 	bl	8ab8 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    c5fa:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
    c5fe:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    c600:	d001      	beq.n	c606 <pm_policy_next_state+0x72>
    c602:	4582      	cmp	sl, r0
    c604:	d905      	bls.n	c612 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    c606:	1c73      	adds	r3, r6, #1
    c608:	d0de      	beq.n	c5c8 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    c60a:	9b01      	ldr	r3, [sp, #4]
    c60c:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    c60e:	42b0      	cmp	r0, r6
    c610:	d9da      	bls.n	c5c8 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    c612:	3c01      	subs	r4, #1
    c614:	b2a4      	uxth	r4, r4
    c616:	3d0c      	subs	r5, #12
    c618:	e7d4      	b.n	c5c4 <pm_policy_next_state+0x30>
    c61a:	bf00      	nop
    c61c:	20008388 	.word	0x20008388
    c620:	000f423f 	.word	0x000f423f
    c624:	000f4240 	.word	0x000f4240

0000c628 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    c628:	b908      	cbnz	r0, c62e <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    c62a:	4b02      	ldr	r3, [pc, #8]	; (c634 <pm_state_cpu_get_all+0xc>)
    c62c:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    c62e:	2000      	movs	r0, #0
    c630:	4770      	bx	lr
    c632:	bf00      	nop
    c634:	0002007c 	.word	0x0002007c

0000c638 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
    c638:	4904      	ldr	r1, [pc, #16]	; (c64c <sub_bytes+0x14>)
    c63a:	1e43      	subs	r3, r0, #1
    c63c:	300f      	adds	r0, #15
    c63e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    c642:	5c8a      	ldrb	r2, [r1, r2]
	for (i = 0; i < (Nb * Nk); ++i) {
    c644:	4283      	cmp	r3, r0
		s[i] = sbox[s[i]];
    c646:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    c648:	d1f9      	bne.n	c63e <sub_bytes+0x6>
	}
}
    c64a:	4770      	bx	lr
    c64c:	00020f0e 	.word	0x00020f0e

0000c650 <tc_aes128_set_encrypt_key>:
{
    c650:	b5f0      	push	{r4, r5, r6, r7, lr}
    c652:	4607      	mov	r7, r0
	const unsigned int rconst[11] = {
    c654:	4e26      	ldr	r6, [pc, #152]	; (c6f0 <tc_aes128_set_encrypt_key+0xa0>)
{
    c656:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    c658:	ad01      	add	r5, sp, #4
{
    c65a:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    c65c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    c65e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    c660:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    c662:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    c664:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    c668:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    c66c:	4638      	mov	r0, r7
    c66e:	2f00      	cmp	r7, #0
    c670:	d039      	beq.n	c6e6 <tc_aes128_set_encrypt_key+0x96>
	} else if (k == (const uint8_t *) 0) {
    c672:	2c00      	cmp	r4, #0
    c674:	d039      	beq.n	c6ea <tc_aes128_set_encrypt_key+0x9a>
    c676:	1f38      	subs	r0, r7, #4
    c678:	4602      	mov	r2, r0
    c67a:	4621      	mov	r1, r4
    c67c:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    c67e:	784b      	ldrb	r3, [r1, #1]
    c680:	780d      	ldrb	r5, [r1, #0]
    c682:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    c684:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    c688:	78cd      	ldrb	r5, [r1, #3]
	for (i = 0; i < Nk; ++i) {
    c68a:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    c68c:	432b      	orrs	r3, r5
    c68e:	f811 5c02 	ldrb.w	r5, [r1, #-2]
	for (i = 0; i < Nk; ++i) {
    c692:	428c      	cmp	r4, r1
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    c694:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    c698:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    c69c:	d1ef      	bne.n	c67e <tc_aes128_set_encrypt_key+0x2e>
    c69e:	2104      	movs	r1, #4
			t = subword(rotword(t)) ^ rconst[i/Nk];
    c6a0:	4c14      	ldr	r4, [pc, #80]	; (c6f4 <tc_aes128_set_encrypt_key+0xa4>)
		if ((i % Nk) == 0) {
    c6a2:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    c6a4:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    c6a6:	d116      	bne.n	c6d6 <tc_aes128_set_encrypt_key+0x86>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    c6a8:	f3c3 4207 	ubfx	r2, r3, #16, #8
    c6ac:	5ca5      	ldrb	r5, [r4, r2]
    c6ae:	0e1a      	lsrs	r2, r3, #24
    c6b0:	5ca2      	ldrb	r2, [r4, r2]
    c6b2:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    c6b6:	f3c3 2507 	ubfx	r5, r3, #8, #8
    c6ba:	5d65      	ldrb	r5, [r4, r5]
    c6bc:	b2db      	uxtb	r3, r3
    c6be:	5ce3      	ldrb	r3, [r4, r3]
    c6c0:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    c6c4:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    c6c8:	f021 0303 	bic.w	r3, r1, #3
    c6cc:	3330      	adds	r3, #48	; 0x30
    c6ce:	446b      	add	r3, sp
    c6d0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    c6d4:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    c6d6:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    c6da:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    c6dc:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    c6de:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    c6e0:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    c6e2:	d1de      	bne.n	c6a2 <tc_aes128_set_encrypt_key+0x52>
	return TC_CRYPTO_SUCCESS;
    c6e4:	2001      	movs	r0, #1
}
    c6e6:	b00d      	add	sp, #52	; 0x34
    c6e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    c6ea:	4620      	mov	r0, r4
    c6ec:	e7fb      	b.n	c6e6 <tc_aes128_set_encrypt_key+0x96>
    c6ee:	bf00      	nop
    c6f0:	0001fd6c 	.word	0x0001fd6c
    c6f4:	00020f0e 	.word	0x00020f0e

0000c6f8 <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
    c6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    c6fc:	2700      	movs	r7, #0
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    c6fe:	6803      	ldr	r3, [r0, #0]
{
    c700:	b09d      	sub	sp, #116	; 0x74
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    c702:	9302      	str	r3, [sp, #8]
    c704:	6843      	ldr	r3, [r0, #4]
    c706:	f8df a1bc 	ldr.w	sl, [pc, #444]	; c8c4 <compress+0x1cc>
    c70a:	9303      	str	r3, [sp, #12]
    c70c:	6883      	ldr	r3, [r0, #8]
    c70e:	e9dd 4602 	ldrd	r4, r6, [sp, #8]
    c712:	9304      	str	r3, [sp, #16]
    c714:	68c3      	ldr	r3, [r0, #12]
    c716:	9305      	str	r3, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    c718:	6903      	ldr	r3, [r0, #16]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    c71a:	e9dd be04 	ldrd	fp, lr, [sp, #16]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    c71e:	9306      	str	r3, [sp, #24]
    c720:	6943      	ldr	r3, [r0, #20]
    c722:	9307      	str	r3, [sp, #28]
    c724:	6983      	ldr	r3, [r0, #24]
    c726:	e9dd 2c06 	ldrd	r2, ip, [sp, #24]
    c72a:	9308      	str	r3, [sp, #32]
    c72c:	69c3      	ldr	r3, [r0, #28]
    c72e:	4698      	mov	r8, r3
    c730:	9309      	str	r3, [sp, #36]	; 0x24
    c732:	9b08      	ldr	r3, [sp, #32]
    c734:	9300      	str	r3, [sp, #0]

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
    c736:	59cd      	ldr	r5, [r1, r7]
		t1 = work_space[i] = n;
    c738:	ab0c      	add	r3, sp, #48	; 0x30
    c73a:	ba2d      	rev	r5, r5
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    c73c:	f85a 9b04 	ldr.w	r9, [sl], #4
		t1 = work_space[i] = n;
    c740:	51dd      	str	r5, [r3, r7]
	return (((a) >> n) | ((a) << (32 - n)));
    c742:	ea4f 23f2 	mov.w	r3, r2, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    c746:	44a9      	add	r9, r5
    c748:	ea83 13b2 	eor.w	r3, r3, r2, ror #6
    c74c:	9d00      	ldr	r5, [sp, #0]
    c74e:	ea83 6372 	eor.w	r3, r3, r2, ror #25
    c752:	444b      	add	r3, r9
    c754:	ea25 0502 	bic.w	r5, r5, r2
    c758:	ea02 090c 	and.w	r9, r2, ip
    c75c:	ea85 0509 	eor.w	r5, r5, r9
    c760:	442b      	add	r3, r5
    c762:	4443      	add	r3, r8
		t2 = Sigma0(a) + Maj(a, b, c);
    c764:	ea86 050b 	eor.w	r5, r6, fp
	return (((a) >> n) | ((a) << (32 - n)));
    c768:	ea4f 3874 	mov.w	r8, r4, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
    c76c:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
    c770:	4025      	ands	r5, r4
    c772:	ea06 090b 	and.w	r9, r6, fp
    c776:	ea85 0509 	eor.w	r5, r5, r9
    c77a:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
	for (i = 0; i < 16; ++i) {
    c77e:	3704      	adds	r7, #4
		t2 = Sigma0(a) + Maj(a, b, c);
    c780:	44a8      	add	r8, r5
	for (i = 0; i < 16; ++i) {
    c782:	2f40      	cmp	r7, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
    c784:	eb03 050e 	add.w	r5, r3, lr
		d = c; c = b; b = a; a = t1 + t2;
    c788:	4443      	add	r3, r8
	for (i = 0; i < 16; ++i) {
    c78a:	46de      	mov	lr, fp
    c78c:	f8dd 8000 	ldr.w	r8, [sp]
    c790:	f040 8088 	bne.w	c8a4 <compress+0x1ac>
    c794:	f04f 0a10 	mov.w	sl, #16
    c798:	494b      	ldr	r1, [pc, #300]	; (c8c8 <compress+0x1d0>)
    c79a:	910a      	str	r1, [sp, #40]	; 0x28
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
    c79c:	4651      	mov	r1, sl
    c79e:	f10a 0a01 	add.w	sl, sl, #1
    c7a2:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
    c7a6:	f00a 070f 	and.w	r7, sl, #15
    c7aa:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    c7ae:	f857 7c40 	ldr.w	r7, [r7, #-64]
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    c7b2:	f001 090f 	and.w	r9, r1, #15
	return (((a) >> n) | ((a) << (32 - n)));
    c7b6:	ea4f 48b7 	mov.w	r8, r7, ror #18
		s0 = work_space[(i+1)&0x0f];
    c7ba:	9701      	str	r7, [sp, #4]
		s0 = sigma0(s0);
    c7bc:	ea88 18f7 	eor.w	r8, r8, r7, ror #7
		s1 = work_space[(i+14)&0x0f];
    c7c0:	f101 070e 	add.w	r7, r1, #14
    c7c4:	f007 070f 	and.w	r7, r7, #15
    c7c8:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    c7cc:	f857 7c40 	ldr.w	r7, [r7, #-64]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    c7d0:	3109      	adds	r1, #9
	return (((a) >> n) | ((a) << (32 - n)));
    c7d2:	ea4f 4ef7 	mov.w	lr, r7, ror #19
		s1 = sigma1(s1);
    c7d6:	ea8e 4e77 	eor.w	lr, lr, r7, ror #17
    c7da:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    c7de:	f001 010f 	and.w	r1, r1, #15
    c7e2:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
    c7e6:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
    c7ea:	eb0e 0989 	add.w	r9, lr, r9, lsl #2
    c7ee:	f859 ec40 	ldr.w	lr, [r9, #-64]
    c7f2:	f851 1c40 	ldr.w	r1, [r1, #-64]
	for ( ; i < 64; ++i) {
    c7f6:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    c7fa:	4471      	add	r1, lr
		s0 = sigma0(s0);
    c7fc:	f8dd e004 	ldr.w	lr, [sp, #4]
    c800:	ea88 08de 	eor.w	r8, r8, lr, lsr #3
		s1 = sigma1(s1);
    c804:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    c808:	4441      	add	r1, r8
		s1 = sigma1(s1);
    c80a:	ea8e 2e97 	eor.w	lr, lr, r7, lsr #10
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    c80e:	4471      	add	r1, lr
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    c810:	ea05 0802 	and.w	r8, r5, r2
	return (((a) >> n) | ((a) << (32 - n)));
    c814:	ea4f 2ef5 	mov.w	lr, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    c818:	ea2c 0705 	bic.w	r7, ip, r5
    c81c:	ea87 0708 	eor.w	r7, r7, r8
    c820:	ea8e 1eb5 	eor.w	lr, lr, r5, ror #6
    c824:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    c828:	ea8e 6e75 	eor.w	lr, lr, r5, ror #25
    c82c:	4477      	add	r7, lr
    c82e:	f858 ef04 	ldr.w	lr, [r8, #4]!
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    c832:	f849 1c40 	str.w	r1, [r9, #-64]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    c836:	4477      	add	r7, lr
    c838:	440f      	add	r7, r1
    c83a:	9900      	ldr	r1, [sp, #0]
	return (((a) >> n) | ((a) << (32 - n)));
    c83c:	ea4f 3e73 	mov.w	lr, r3, ror #13
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    c840:	4439      	add	r1, r7
		t2 = Sigma0(a) + Maj(a, b, c);
    c842:	ea84 0706 	eor.w	r7, r4, r6
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    c846:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
		t2 = Sigma0(a) + Maj(a, b, c);
    c84a:	ea8e 0eb3 	eor.w	lr, lr, r3, ror #2
    c84e:	ea07 0703 	and.w	r7, r7, r3
    c852:	ea04 0806 	and.w	r8, r4, r6
    c856:	ea8e 5eb3 	eor.w	lr, lr, r3, ror #22
    c85a:	ea87 0708 	eor.w	r7, r7, r8
    c85e:	4477      	add	r7, lr
		h = g; g = f; f = e; e = d + t1;
		d = c; c = b; b = a; a = t1 + t2;
    c860:	440f      	add	r7, r1
		h = g; g = f; f = e; e = d + t1;
    c862:	eb01 0e0b 	add.w	lr, r1, fp
	for ( ; i < 64; ++i) {
    c866:	f8cd c000 	str.w	ip, [sp]
    c86a:	46b3      	mov	fp, r6
    c86c:	d122      	bne.n	c8b4 <compress+0x1bc>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
    c86e:	9902      	ldr	r1, [sp, #8]
    c870:	4439      	add	r1, r7
    c872:	6001      	str	r1, [r0, #0]
    c874:	9903      	ldr	r1, [sp, #12]
    c876:	4419      	add	r1, r3
    c878:	9b04      	ldr	r3, [sp, #16]
    c87a:	6041      	str	r1, [r0, #4]
    c87c:	4423      	add	r3, r4
    c87e:	6083      	str	r3, [r0, #8]
    c880:	9b05      	ldr	r3, [sp, #20]
    c882:	4433      	add	r3, r6
    c884:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
    c886:	9b06      	ldr	r3, [sp, #24]
    c888:	4473      	add	r3, lr
    c88a:	6103      	str	r3, [r0, #16]
    c88c:	9b07      	ldr	r3, [sp, #28]
    c88e:	442b      	add	r3, r5
    c890:	6143      	str	r3, [r0, #20]
    c892:	9b08      	ldr	r3, [sp, #32]
    c894:	4413      	add	r3, r2
    c896:	6183      	str	r3, [r0, #24]
    c898:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c89a:	4463      	add	r3, ip
    c89c:	61c3      	str	r3, [r0, #28]
}
    c89e:	b01d      	add	sp, #116	; 0x74
    c8a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c8a4:	46b3      	mov	fp, r6
    c8a6:	f8cd c000 	str.w	ip, [sp]
    c8aa:	4626      	mov	r6, r4
    c8ac:	4694      	mov	ip, r2
		d = c; c = b; b = a; a = t1 + t2;
    c8ae:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
    c8b0:	462a      	mov	r2, r5
    c8b2:	e740      	b.n	c736 <compress+0x3e>
    c8b4:	4694      	mov	ip, r2
    c8b6:	4626      	mov	r6, r4
    c8b8:	462a      	mov	r2, r5
    c8ba:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
    c8bc:	4675      	mov	r5, lr
		d = c; c = b; b = a; a = t1 + t2;
    c8be:	463b      	mov	r3, r7
    c8c0:	e76c      	b.n	c79c <compress+0xa4>
    c8c2:	bf00      	nop
    c8c4:	0002007c 	.word	0x0002007c
    c8c8:	000200b8 	.word	0x000200b8

0000c8cc <tc_sha256_init>:
{
    c8cc:	b510      	push	{r4, lr}
	if (s == (TCSha256State_t) 0) {
    c8ce:	4604      	mov	r4, r0
    c8d0:	b1c8      	cbz	r0, c906 <tc_sha256_init+0x3a>
	_set((uint8_t *) s, 0x00, sizeof(*s));
    c8d2:	2270      	movs	r2, #112	; 0x70
    c8d4:	2100      	movs	r1, #0
    c8d6:	f00e fb20 	bl	1af1a <_set>
	s->iv[1] = 0xbb67ae85;
    c8da:	4b0b      	ldr	r3, [pc, #44]	; (c908 <tc_sha256_init+0x3c>)
    c8dc:	4a0b      	ldr	r2, [pc, #44]	; (c90c <tc_sha256_init+0x40>)
	s->iv[3] = 0xa54ff53a;
    c8de:	490c      	ldr	r1, [pc, #48]	; (c910 <tc_sha256_init+0x44>)
	s->iv[1] = 0xbb67ae85;
    c8e0:	e9c4 2300 	strd	r2, r3, [r4]
	s->iv[3] = 0xa54ff53a;
    c8e4:	4b0b      	ldr	r3, [pc, #44]	; (c914 <tc_sha256_init+0x48>)
	s->iv[5] = 0x9b05688c;
    c8e6:	480c      	ldr	r0, [pc, #48]	; (c918 <tc_sha256_init+0x4c>)
	s->iv[3] = 0xa54ff53a;
    c8e8:	e9c4 1302 	strd	r1, r3, [r4, #8]
	s->iv[5] = 0x9b05688c;
    c8ec:	4b0b      	ldr	r3, [pc, #44]	; (c91c <tc_sha256_init+0x50>)
    c8ee:	e9c4 0304 	strd	r0, r3, [r4, #16]
	return TC_CRYPTO_SUCCESS;
    c8f2:	2001      	movs	r0, #1
	s->iv[6] = 0x1f83d9ab;
    c8f4:	4b0a      	ldr	r3, [pc, #40]	; (c920 <tc_sha256_init+0x54>)
    c8f6:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
    c8f8:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
    c8fc:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
    c900:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
    c904:	61e3      	str	r3, [r4, #28]
}
    c906:	bd10      	pop	{r4, pc}
    c908:	bb67ae85 	.word	0xbb67ae85
    c90c:	6a09e667 	.word	0x6a09e667
    c910:	3c6ef372 	.word	0x3c6ef372
    c914:	a54ff53a 	.word	0xa54ff53a
    c918:	510e527f 	.word	0x510e527f
    c91c:	9b05688c 	.word	0x9b05688c
    c920:	1f83d9ab 	.word	0x1f83d9ab

0000c924 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    c924:	4901      	ldr	r1, [pc, #4]	; (c92c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    c926:	2210      	movs	r2, #16
	str	r2, [r1]
    c928:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    c92a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    c92c:	e000ed10 	.word	0xe000ed10

0000c930 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    c930:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    c932:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    c934:	f380 8811 	msr	BASEPRI, r0
	isb
    c938:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    c93c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    c940:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    c942:	b662      	cpsie	i
	isb
    c944:	f3bf 8f6f 	isb	sy

	bx	lr
    c948:	4770      	bx	lr
    c94a:	bf00      	nop

0000c94c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    c94c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    c94e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    c950:	f381 8811 	msr	BASEPRI, r1

	wfe
    c954:	bf20      	wfe

	msr	BASEPRI, r0
    c956:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    c95a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    c95c:	4770      	bx	lr
    c95e:	bf00      	nop

0000c960 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    c960:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c964:	4682      	mov	sl, r0

	if (esf != NULL) {
    c966:	460c      	mov	r4, r1
{
    c968:	af00      	add	r7, sp, #0
	if (esf != NULL) {
    c96a:	2900      	cmp	r1, #0
    c96c:	d052      	beq.n	ca14 <z_arm_fatal_error+0xb4>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    c96e:	e9d1 1200 	ldrd	r1, r2, [r1]
    c972:	466e      	mov	r6, sp
    c974:	b08a      	sub	sp, #40	; 0x28
    c976:	68a3      	ldr	r3, [r4, #8]
    c978:	466d      	mov	r5, sp
    c97a:	f04f 0b06 	mov.w	fp, #6
    c97e:	46a8      	mov	r8, r5
    c980:	4828      	ldr	r0, [pc, #160]	; (ca24 <z_arm_fatal_error+0xc4>)
    c982:	f8df 90a4 	ldr.w	r9, [pc, #164]	; ca28 <z_arm_fatal_error+0xc8>
    c986:	e9c5 2308 	strd	r2, r3, [r5, #32]
    c98a:	e9c5 9106 	strd	r9, r1, [r5, #24]
    c98e:	6168      	str	r0, [r5, #20]
    c990:	f848 bf10 	str.w	fp, [r8, #16]!
    c994:	2300      	movs	r3, #0
    c996:	4642      	mov	r2, r8
    c998:	f44f 5141 	mov.w	r1, #12352	; 0x3040
    c99c:	4823      	ldr	r0, [pc, #140]	; (ca2c <z_arm_fatal_error+0xcc>)
    c99e:	f7fe fddf 	bl	b560 <z_impl_z_log_msg_static_create>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    c9a2:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
    c9a6:	46b5      	mov	sp, r6
    c9a8:	6963      	ldr	r3, [r4, #20]
    c9aa:	46ad      	mov	sp, r5
    c9ac:	4820      	ldr	r0, [pc, #128]	; (ca30 <z_arm_fatal_error+0xd0>)
    c9ae:	e9c5 1207 	strd	r1, r2, [r5, #28]
    c9b2:	e9c5 0905 	strd	r0, r9, [r5, #20]
    c9b6:	626b      	str	r3, [r5, #36]	; 0x24
    c9b8:	f8c5 b010 	str.w	fp, [r5, #16]
    c9bc:	2300      	movs	r3, #0
    c9be:	4642      	mov	r2, r8
    c9c0:	f44f 5141 	mov.w	r1, #12352	; 0x3040
    c9c4:	4819      	ldr	r0, [pc, #100]	; (ca2c <z_arm_fatal_error+0xcc>)
    c9c6:	f7fe fdcb 	bl	b560 <z_impl_z_log_msg_static_create>
    c9ca:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    c9cc:	b088      	sub	sp, #32
    c9ce:	69e3      	ldr	r3, [r4, #28]
    c9d0:	466d      	mov	r5, sp
    c9d2:	f04f 0b04 	mov.w	fp, #4
    c9d6:	46a8      	mov	r8, r5
    c9d8:	4a16      	ldr	r2, [pc, #88]	; (ca34 <z_arm_fatal_error+0xd4>)
    c9da:	61eb      	str	r3, [r5, #28]
    c9dc:	e9c5 2905 	strd	r2, r9, [r5, #20]
    c9e0:	f848 bf10 	str.w	fp, [r8, #16]!
    c9e4:	2300      	movs	r3, #0
    c9e6:	4642      	mov	r2, r8
    c9e8:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    c9ec:	480f      	ldr	r0, [pc, #60]	; (ca2c <z_arm_fatal_error+0xcc>)
    c9ee:	f7fe fdb7 	bl	b560 <z_impl_z_log_msg_static_create>
    c9f2:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    c9f4:	69a3      	ldr	r3, [r4, #24]
    c9f6:	46ad      	mov	sp, r5
    c9f8:	4a0f      	ldr	r2, [pc, #60]	; (ca38 <z_arm_fatal_error+0xd8>)
    c9fa:	61eb      	str	r3, [r5, #28]
    c9fc:	e9c5 2905 	strd	r2, r9, [r5, #20]
    ca00:	f8c5 b010 	str.w	fp, [r5, #16]
    ca04:	2300      	movs	r3, #0
    ca06:	4642      	mov	r2, r8
    ca08:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    ca0c:	4807      	ldr	r0, [pc, #28]	; (ca2c <z_arm_fatal_error+0xcc>)
    ca0e:	f7fe fda7 	bl	b560 <z_impl_z_log_msg_static_create>
    ca12:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    ca14:	4621      	mov	r1, r4
    ca16:	4650      	mov	r0, sl
    ca18:	f00b fd88 	bl	1852c <z_fatal_error>
}
    ca1c:	46bd      	mov	sp, r7
    ca1e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ca22:	bf00      	nop
    ca24:	0002100e 	.word	0x0002100e
    ca28:	000210b9 	.word	0x000210b9
    ca2c:	0001fd04 	.word	0x0001fd04
    ca30:	00021041 	.word	0x00021041
    ca34:	00021074 	.word	0x00021074
    ca38:	00021087 	.word	0x00021087

0000ca3c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    ca3c:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    ca3e:	2800      	cmp	r0, #0
    ca40:	db07      	blt.n	ca52 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ca42:	2301      	movs	r3, #1
    ca44:	0941      	lsrs	r1, r0, #5
    ca46:	4a03      	ldr	r2, [pc, #12]	; (ca54 <arch_irq_enable+0x18>)
    ca48:	f000 001f 	and.w	r0, r0, #31
    ca4c:	4083      	lsls	r3, r0
    ca4e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    ca52:	4770      	bx	lr
    ca54:	e000e100 	.word	0xe000e100

0000ca58 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    ca58:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    ca5a:	2800      	cmp	r0, #0
    ca5c:	db0c      	blt.n	ca78 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ca5e:	2201      	movs	r2, #1
    ca60:	4906      	ldr	r1, [pc, #24]	; (ca7c <arch_irq_disable+0x24>)
    ca62:	0943      	lsrs	r3, r0, #5
    ca64:	f000 001f 	and.w	r0, r0, #31
    ca68:	4082      	lsls	r2, r0
    ca6a:	3320      	adds	r3, #32
    ca6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    ca70:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    ca74:	f3bf 8f6f 	isb	sy
}
    ca78:	4770      	bx	lr
    ca7a:	bf00      	nop
    ca7c:	e000e100 	.word	0xe000e100

0000ca80 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    ca80:	4b05      	ldr	r3, [pc, #20]	; (ca98 <arch_irq_is_enabled+0x18>)
    ca82:	0942      	lsrs	r2, r0, #5
    ca84:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    ca88:	2301      	movs	r3, #1
    ca8a:	f000 001f 	and.w	r0, r0, #31
    ca8e:	fa03 f000 	lsl.w	r0, r3, r0
}
    ca92:	4010      	ands	r0, r2
    ca94:	4770      	bx	lr
    ca96:	bf00      	nop
    ca98:	e000e100 	.word	0xe000e100

0000ca9c <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    ca9c:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    ca9e:	2800      	cmp	r0, #0
		prio += _IRQ_PRIO_OFFSET;
    caa0:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    caa4:	bfac      	ite	ge
    caa6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    caaa:	4b06      	ldrlt	r3, [pc, #24]	; (cac4 <z_arm_irq_priority_set+0x28>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    caac:	ea4f 1141 	mov.w	r1, r1, lsl #5
    cab0:	b2c9      	uxtb	r1, r1
    cab2:	bfab      	itete	ge
    cab4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    cab8:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    cabc:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    cac0:	5419      	strblt	r1, [r3, r0]
}
    cac2:	4770      	bx	lr
    cac4:	e000ed14 	.word	0xe000ed14

0000cac8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    cac8:	bf30      	wfi
    b z_SysNmiOnReset
    caca:	f7ff bffd 	b.w	cac8 <z_SysNmiOnReset>
    cace:	bf00      	nop

0000cad0 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    cad0:	4a0b      	ldr	r2, [pc, #44]	; (cb00 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    cad2:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    cad4:	4b0b      	ldr	r3, [pc, #44]	; (cb04 <z_arm_prep_c+0x34>)
    cad6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    cada:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    cadc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    cae0:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    cae4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    cae8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    caec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    caf0:	f00b fdde 	bl	186b0 <z_bss_zero>
	z_data_copy();
    caf4:	f00c fe54 	bl	197a0 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    caf8:	f000 fc3c 	bl	d374 <z_arm_interrupt_init>
	z_cstart();
    cafc:	f00b fe18 	bl	18730 <z_cstart>
    cb00:	00008000 	.word	0x00008000
    cb04:	e000ed00 	.word	0xe000ed00

0000cb08 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    cb08:	4a09      	ldr	r2, [pc, #36]	; (cb30 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    cb0a:	490a      	ldr	r1, [pc, #40]	; (cb34 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    cb0c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    cb0e:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    cb10:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
    cb12:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    cb14:	4908      	ldr	r1, [pc, #32]	; (cb38 <arch_swap+0x30>)
    cb16:	684b      	ldr	r3, [r1, #4]
    cb18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    cb1c:	604b      	str	r3, [r1, #4]
    cb1e:	2300      	movs	r3, #0
    cb20:	f383 8811 	msr	BASEPRI, r3
    cb24:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    cb28:	6893      	ldr	r3, [r2, #8]
}
    cb2a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    cb2c:	4770      	bx	lr
    cb2e:	bf00      	nop
    cb30:	20009f2c 	.word	0x20009f2c
    cb34:	000206f0 	.word	0x000206f0
    cb38:	e000ed00 	.word	0xe000ed00

0000cb3c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    cb3c:	4915      	ldr	r1, [pc, #84]	; (cb94 <z_arm_pendsv+0x58>)
    ldr r2, [r1, #_kernel_offset_to_current]
    cb3e:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
    cb40:	f882 e081 	strb.w	lr, [r2, #129]	; 0x81
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    cb44:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    cb48:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    cb4a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    cb4e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    cb52:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    cb54:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    cb58:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    cb5c:	4f0e      	ldr	r7, [pc, #56]	; (cb98 <z_arm_pendsv+0x5c>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    cb5e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    cb62:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    cb64:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    cb66:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
    cb68:	f992 e081 	ldrsb.w	lr, [r2, #129]	; 0x81

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    cb6c:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    cb6e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    cb70:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    cb72:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    cb76:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    cb7a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    cb7e:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    cb82:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    cb86:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    cb88:	f00e fe14 	bl	1b7b4 <configure_builtin_stack_guard>
    pop {r2, lr}
    cb8c:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    cb90:	4770      	bx	lr
    cb92:	0000      	.short	0x0000
    ldr r1, =_kernel
    cb94:	20009f2c 	.word	0x20009f2c
    ldr v4, =_SCS_ICSR
    cb98:	e000ed04 	.word	0xe000ed04

0000cb9c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    cb9c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    cba0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    cba2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    cba6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    cbaa:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    cbac:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    cbb0:	2902      	cmp	r1, #2
    beq _oops
    cbb2:	d0ff      	beq.n	cbb4 <_oops>

0000cbb4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    cbb4:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    cbb6:	f00e fdee 	bl	1b796 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    cbba:	bd01      	pop	{r0, pc}

0000cbbc <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    cbbc:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    cbc0:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    cbc2:	490d      	ldr	r1, [pc, #52]	; (cbf8 <arch_new_thread+0x3c>)
	iframe->a2 = (uint32_t)p1;
    cbc4:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    cbc8:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    cbca:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    cbce:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    cbd2:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    cbd4:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    cbd8:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    cbdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    cbe0:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    cbe4:	2300      	movs	r3, #0
    cbe6:	6783      	str	r3, [r0, #120]	; 0x78

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
    cbe8:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    cbec:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    cbee:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.mode = 0;
    cbf0:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    cbf4:	4770      	bx	lr
    cbf6:	bf00      	nop
    cbf8:	00019f33 	.word	0x00019f33

0000cbfc <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    cbfc:	4b08      	ldr	r3, [pc, #32]	; (cc20 <arch_switch_to_main_thread+0x24>)
    cbfe:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    cc00:	6e83      	ldr	r3, [r0, #104]	; 0x68
    cc02:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    cc06:	4610      	mov	r0, r2
    cc08:	f381 8809 	msr	PSP, r1
    cc0c:	2100      	movs	r1, #0
    cc0e:	b663      	cpsie	if
    cc10:	f381 8811 	msr	BASEPRI, r1
    cc14:	f3bf 8f6f 	isb	sy
    cc18:	2200      	movs	r2, #0
    cc1a:	2300      	movs	r3, #0
    cc1c:	f00d f989 	bl	19f32 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    cc20:	20009f2c 	.word	0x20009f2c

0000cc24 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    cc24:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    cc26:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    cc28:	4a0b      	ldr	r2, [pc, #44]	; (cc58 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    cc2a:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    cc2c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    cc2e:	bf1e      	ittt	ne
	movne	r1, #0
    cc30:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    cc32:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    cc34:	f012 f855 	blne	1ece2 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    cc38:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    cc3a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    cc3e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    cc42:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    cc46:	4905      	ldr	r1, [pc, #20]	; (cc5c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    cc48:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    cc4a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    cc4c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    cc4e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    cc52:	4903      	ldr	r1, [pc, #12]	; (cc60 <_isr_wrapper+0x3c>)
	bx r1
    cc54:	4708      	bx	r1
    cc56:	0000      	.short	0x0000
	ldr r2, =_kernel
    cc58:	20009f2c 	.word	0x20009f2c
	ldr r1, =_sw_isr_table
    cc5c:	0001f8c8 	.word	0x0001f8c8
	ldr r1, =z_arm_int_exit
    cc60:	0000cc65 	.word	0x0000cc65

0000cc64 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    cc64:	4b04      	ldr	r3, [pc, #16]	; (cc78 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    cc66:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    cc68:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    cc6a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    cc6c:	d003      	beq.n	cc76 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    cc6e:	4903      	ldr	r1, [pc, #12]	; (cc7c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    cc70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    cc74:	600a      	str	r2, [r1, #0]

0000cc76 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    cc76:	4770      	bx	lr
	ldr r3, =_kernel
    cc78:	20009f2c 	.word	0x20009f2c
	ldr r1, =_SCS_ICSR
    cc7c:	e000ed04 	.word	0xe000ed04

0000cc80 <mem_manage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    cc80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			      bool *recoverable)
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
    cc84:	46e8      	mov	r8, sp
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    cc86:	af00      	add	r7, sp, #0
	PR_FAULT_INFO("***** MPU FAULT *****");
    cc88:	b088      	sub	sp, #32
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    cc8a:	4606      	mov	r6, r0
    cc8c:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    cc8e:	466a      	mov	r2, sp
    cc90:	f04f 0903 	mov.w	r9, #3
    cc94:	4b4d      	ldr	r3, [pc, #308]	; (cdcc <mem_manage_fault.constprop.0+0x14c>)
    cc96:	4c4e      	ldr	r4, [pc, #312]	; (cdd0 <mem_manage_fault.constprop.0+0x150>)
    cc98:	6153      	str	r3, [r2, #20]
    cc9a:	6194      	str	r4, [r2, #24]
    cc9c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    cca0:	484c      	ldr	r0, [pc, #304]	; (cdd4 <mem_manage_fault.constprop.0+0x154>)
    cca2:	f842 9f10 	str.w	r9, [r2, #16]!
    cca6:	f00e fd89 	bl	1b7bc <z_log_msg_static_create.constprop.0>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    ccaa:	4b4b      	ldr	r3, [pc, #300]	; (cdd8 <mem_manage_fault.constprop.0+0x158>)
    ccac:	46c5      	mov	sp, r8
    ccae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ccb0:	06db      	lsls	r3, r3, #27
    ccb2:	d50c      	bpl.n	ccce <mem_manage_fault.constprop.0+0x4e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    ccb4:	b088      	sub	sp, #32
    ccb6:	466a      	mov	r2, sp
    ccb8:	4b48      	ldr	r3, [pc, #288]	; (cddc <mem_manage_fault.constprop.0+0x15c>)
    ccba:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    ccbe:	e9c2 3405 	strd	r3, r4, [r2, #20]
    ccc2:	4844      	ldr	r0, [pc, #272]	; (cdd4 <mem_manage_fault.constprop.0+0x154>)
    ccc4:	f842 9f10 	str.w	r9, [r2, #16]!
    ccc8:	f00e fd78 	bl	1b7bc <z_log_msg_static_create.constprop.0>
    cccc:	46c5      	mov	sp, r8
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    ccce:	4b42      	ldr	r3, [pc, #264]	; (cdd8 <mem_manage_fault.constprop.0+0x158>)
    ccd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ccd2:	0718      	lsls	r0, r3, #28
    ccd4:	d50e      	bpl.n	ccf4 <mem_manage_fault.constprop.0+0x74>
		PR_FAULT_INFO("  Unstacking error");
    ccd6:	46e8      	mov	r8, sp
    ccd8:	b088      	sub	sp, #32
    ccda:	466a      	mov	r2, sp
    ccdc:	4b40      	ldr	r3, [pc, #256]	; (cde0 <mem_manage_fault.constprop.0+0x160>)
    ccde:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    cce2:	e9c2 3405 	strd	r3, r4, [r2, #20]
    cce6:	2303      	movs	r3, #3
    cce8:	483a      	ldr	r0, [pc, #232]	; (cdd4 <mem_manage_fault.constprop.0+0x154>)
    ccea:	f842 3f10 	str.w	r3, [r2, #16]!
    ccee:	f00e fd65 	bl	1b7bc <z_log_msg_static_create.constprop.0>
    ccf2:	46c5      	mov	sp, r8
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    ccf4:	f8df 90e0 	ldr.w	r9, [pc, #224]	; cdd8 <mem_manage_fault.constprop.0+0x158>
    ccf8:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
    ccfc:	0799      	lsls	r1, r3, #30
    ccfe:	d52a      	bpl.n	cd56 <mem_manage_fault.constprop.0+0xd6>
		PR_FAULT_INFO("  Data Access Violation");
    cd00:	46e8      	mov	r8, sp
    cd02:	b088      	sub	sp, #32
    cd04:	466a      	mov	r2, sp
    cd06:	4b37      	ldr	r3, [pc, #220]	; (cde4 <mem_manage_fault.constprop.0+0x164>)
    cd08:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    cd0c:	e9c2 3405 	strd	r3, r4, [r2, #20]
    cd10:	2303      	movs	r3, #3
    cd12:	4830      	ldr	r0, [pc, #192]	; (cdd4 <mem_manage_fault.constprop.0+0x154>)
    cd14:	f842 3f10 	str.w	r3, [r2, #16]!
    cd18:	f00e fd50 	bl	1b7bc <z_log_msg_static_create.constprop.0>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    cd1c:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    cd20:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
    cd24:	46c5      	mov	sp, r8
    cd26:	0612      	lsls	r2, r2, #24
    cd28:	d515      	bpl.n	cd56 <mem_manage_fault.constprop.0+0xd6>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    cd2a:	b088      	sub	sp, #32
    cd2c:	466a      	mov	r2, sp
    cd2e:	61d3      	str	r3, [r2, #28]
    cd30:	2304      	movs	r3, #4
    cd32:	492d      	ldr	r1, [pc, #180]	; (cde8 <mem_manage_fault.constprop.0+0x168>)
    cd34:	4827      	ldr	r0, [pc, #156]	; (cdd4 <mem_manage_fault.constprop.0+0x154>)
    cd36:	e9c2 1405 	strd	r1, r4, [r2, #20]
    cd3a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    cd3e:	f842 3f10 	str.w	r3, [r2, #16]!
    cd42:	f00e fd3b 	bl	1b7bc <z_log_msg_static_create.constprop.0>
    cd46:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    cd48:	b12e      	cbz	r6, cd56 <mem_manage_fault.constprop.0+0xd6>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    cd4a:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
    cd4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    cd52:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    cd56:	4b20      	ldr	r3, [pc, #128]	; (cdd8 <mem_manage_fault.constprop.0+0x158>)
    cd58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    cd5a:	07de      	lsls	r6, r3, #31
    cd5c:	d50e      	bpl.n	cd7c <mem_manage_fault.constprop.0+0xfc>
		PR_FAULT_INFO("  Instruction Access Violation");
    cd5e:	466e      	mov	r6, sp
    cd60:	b088      	sub	sp, #32
    cd62:	466a      	mov	r2, sp
    cd64:	4b21      	ldr	r3, [pc, #132]	; (cdec <mem_manage_fault.constprop.0+0x16c>)
    cd66:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    cd6a:	e9c2 3405 	strd	r3, r4, [r2, #20]
    cd6e:	2303      	movs	r3, #3
    cd70:	4818      	ldr	r0, [pc, #96]	; (cdd4 <mem_manage_fault.constprop.0+0x154>)
    cd72:	f842 3f10 	str.w	r3, [r2, #16]!
    cd76:	f00e fd21 	bl	1b7bc <z_log_msg_static_create.constprop.0>
    cd7a:	46b5      	mov	sp, r6
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    cd7c:	4b16      	ldr	r3, [pc, #88]	; (cdd8 <mem_manage_fault.constprop.0+0x158>)
    cd7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    cd80:	0698      	lsls	r0, r3, #26
    cd82:	d50e      	bpl.n	cda2 <mem_manage_fault.constprop.0+0x122>
		PR_FAULT_INFO(
    cd84:	466e      	mov	r6, sp
    cd86:	b088      	sub	sp, #32
    cd88:	466a      	mov	r2, sp
    cd8a:	4b19      	ldr	r3, [pc, #100]	; (cdf0 <mem_manage_fault.constprop.0+0x170>)
    cd8c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    cd90:	e9c2 3405 	strd	r3, r4, [r2, #20]
    cd94:	2303      	movs	r3, #3
    cd96:	480f      	ldr	r0, [pc, #60]	; (cdd4 <mem_manage_fault.constprop.0+0x154>)
    cd98:	f842 3f10 	str.w	r3, [r2, #16]!
    cd9c:	f00e fd0e 	bl	1b7bc <z_log_msg_static_create.constprop.0>
    cda0:	46b5      	mov	sp, r6

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    cda2:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    cda4:	4b0c      	ldr	r3, [pc, #48]	; (cdd8 <mem_manage_fault.constprop.0+0x158>)
    cda6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    cda8:	06d1      	lsls	r1, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    cdaa:	bf58      	it	pl
    cdac:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    cdae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    cdb0:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    cdb2:	bf42      	ittt	mi
    cdb4:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    cdb6:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    cdba:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    cdbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    cdbe:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    cdc2:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    cdc4:	7028      	strb	r0, [r5, #0]

	return reason;
}
    cdc6:	46bd      	mov	sp, r7
    cdc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    cdcc:	000210c2 	.word	0x000210c2
    cdd0:	000214cd 	.word	0x000214cd
    cdd4:	0001fd04 	.word	0x0001fd04
    cdd8:	e000ed00 	.word	0xe000ed00
    cddc:	000210dc 	.word	0x000210dc
    cde0:	00021113 	.word	0x00021113
    cde4:	0002112a 	.word	0x0002112a
    cde8:	00021146 	.word	0x00021146
    cdec:	00021160 	.word	0x00021160
    cdf0:	00021183 	.word	0x00021183

0000cdf4 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    cdf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    cdf8:	46e8      	mov	r8, sp
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    cdfa:	af00      	add	r7, sp, #0
	PR_FAULT_INFO("***** BUS FAULT *****");
    cdfc:	b088      	sub	sp, #32
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    cdfe:	4606      	mov	r6, r0
    ce00:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    ce02:	466a      	mov	r2, sp
    ce04:	f04f 0903 	mov.w	r9, #3
    ce08:	4b4c      	ldr	r3, [pc, #304]	; (cf3c <bus_fault.constprop.0+0x148>)
    ce0a:	4c4d      	ldr	r4, [pc, #308]	; (cf40 <bus_fault.constprop.0+0x14c>)
    ce0c:	6153      	str	r3, [r2, #20]
    ce0e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    ce12:	6194      	str	r4, [r2, #24]
    ce14:	484b      	ldr	r0, [pc, #300]	; (cf44 <bus_fault.constprop.0+0x150>)
    ce16:	f842 9f10 	str.w	r9, [r2, #16]!
    ce1a:	f00e fccf 	bl	1b7bc <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    ce1e:	4b4a      	ldr	r3, [pc, #296]	; (cf48 <bus_fault.constprop.0+0x154>)
    ce20:	46c5      	mov	sp, r8
    ce22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ce24:	04d9      	lsls	r1, r3, #19
    ce26:	d50c      	bpl.n	ce42 <bus_fault.constprop.0+0x4e>
		PR_FAULT_INFO("  Stacking error");
    ce28:	b088      	sub	sp, #32
    ce2a:	466a      	mov	r2, sp
    ce2c:	4b47      	ldr	r3, [pc, #284]	; (cf4c <bus_fault.constprop.0+0x158>)
    ce2e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    ce32:	e9c2 3405 	strd	r3, r4, [r2, #20]
    ce36:	4843      	ldr	r0, [pc, #268]	; (cf44 <bus_fault.constprop.0+0x150>)
    ce38:	f842 9f10 	str.w	r9, [r2, #16]!
    ce3c:	f00e fcbe 	bl	1b7bc <z_log_msg_static_create.constprop.0>
    ce40:	46c5      	mov	sp, r8
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    ce42:	4b41      	ldr	r3, [pc, #260]	; (cf48 <bus_fault.constprop.0+0x154>)
    ce44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ce46:	051a      	lsls	r2, r3, #20
    ce48:	d50e      	bpl.n	ce68 <bus_fault.constprop.0+0x74>
		PR_FAULT_INFO("  Unstacking error");
    ce4a:	46e8      	mov	r8, sp
    ce4c:	b088      	sub	sp, #32
    ce4e:	466a      	mov	r2, sp
    ce50:	4b3f      	ldr	r3, [pc, #252]	; (cf50 <bus_fault.constprop.0+0x15c>)
    ce52:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    ce56:	e9c2 3405 	strd	r3, r4, [r2, #20]
    ce5a:	2303      	movs	r3, #3
    ce5c:	4839      	ldr	r0, [pc, #228]	; (cf44 <bus_fault.constprop.0+0x150>)
    ce5e:	f842 3f10 	str.w	r3, [r2, #16]!
    ce62:	f00e fcab 	bl	1b7bc <z_log_msg_static_create.constprop.0>
    ce66:	46c5      	mov	sp, r8
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    ce68:	f8df 90dc 	ldr.w	r9, [pc, #220]	; cf48 <bus_fault.constprop.0+0x154>
    ce6c:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
    ce70:	059b      	lsls	r3, r3, #22
    ce72:	d52a      	bpl.n	ceca <bus_fault.constprop.0+0xd6>
		PR_FAULT_INFO("  Precise data bus error");
    ce74:	46e8      	mov	r8, sp
    ce76:	b088      	sub	sp, #32
    ce78:	466a      	mov	r2, sp
    ce7a:	4b36      	ldr	r3, [pc, #216]	; (cf54 <bus_fault.constprop.0+0x160>)
    ce7c:	4831      	ldr	r0, [pc, #196]	; (cf44 <bus_fault.constprop.0+0x150>)
    ce7e:	e9c2 3405 	strd	r3, r4, [r2, #20]
    ce82:	2303      	movs	r3, #3
    ce84:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    ce88:	f842 3f10 	str.w	r3, [r2, #16]!
    ce8c:	f00e fc96 	bl	1b7bc <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    ce90:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    ce94:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
    ce98:	46c5      	mov	sp, r8
    ce9a:	0410      	lsls	r0, r2, #16
    ce9c:	d515      	bpl.n	ceca <bus_fault.constprop.0+0xd6>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    ce9e:	b088      	sub	sp, #32
    cea0:	466a      	mov	r2, sp
    cea2:	61d3      	str	r3, [r2, #28]
    cea4:	2304      	movs	r3, #4
    cea6:	492c      	ldr	r1, [pc, #176]	; (cf58 <bus_fault.constprop.0+0x164>)
    cea8:	4826      	ldr	r0, [pc, #152]	; (cf44 <bus_fault.constprop.0+0x150>)
    ceaa:	e9c2 1405 	strd	r1, r4, [r2, #20]
    ceae:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    ceb2:	f842 3f10 	str.w	r3, [r2, #16]!
    ceb6:	f00e fc81 	bl	1b7bc <z_log_msg_static_create.constprop.0>
    ceba:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    cebc:	b12e      	cbz	r6, ceca <bus_fault.constprop.0+0xd6>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    cebe:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
    cec2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    cec6:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    ceca:	4b1f      	ldr	r3, [pc, #124]	; (cf48 <bus_fault.constprop.0+0x154>)
    cecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    cece:	0559      	lsls	r1, r3, #21
    ced0:	d50e      	bpl.n	cef0 <bus_fault.constprop.0+0xfc>
		PR_FAULT_INFO("  Imprecise data bus error");
    ced2:	466e      	mov	r6, sp
    ced4:	b088      	sub	sp, #32
    ced6:	466a      	mov	r2, sp
    ced8:	4b20      	ldr	r3, [pc, #128]	; (cf5c <bus_fault.constprop.0+0x168>)
    ceda:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    cede:	e9c2 3405 	strd	r3, r4, [r2, #20]
    cee2:	2303      	movs	r3, #3
    cee4:	4817      	ldr	r0, [pc, #92]	; (cf44 <bus_fault.constprop.0+0x150>)
    cee6:	f842 3f10 	str.w	r3, [r2, #16]!
    ceea:	f00e fc67 	bl	1b7bc <z_log_msg_static_create.constprop.0>
    ceee:	46b5      	mov	sp, r6
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    cef0:	4b15      	ldr	r3, [pc, #84]	; (cf48 <bus_fault.constprop.0+0x154>)
    cef2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    cef4:	05d2      	lsls	r2, r2, #23
    cef6:	d518      	bpl.n	cf2a <bus_fault.constprop.0+0x136>
		PR_FAULT_INFO("  Instruction bus error");
    cef8:	466e      	mov	r6, sp
    cefa:	b088      	sub	sp, #32
    cefc:	466a      	mov	r2, sp
    cefe:	4b18      	ldr	r3, [pc, #96]	; (cf60 <bus_fault.constprop.0+0x16c>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    cf00:	e9c2 3405 	strd	r3, r4, [r2, #20]
    cf04:	2303      	movs	r3, #3
    cf06:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    cf0a:	480e      	ldr	r0, [pc, #56]	; (cf44 <bus_fault.constprop.0+0x150>)
    cf0c:	f842 3f10 	str.w	r3, [r2, #16]!
    cf10:	f00e fc54 	bl	1b7bc <z_log_msg_static_create.constprop.0>
    cf14:	46b5      	mov	sp, r6
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf, true);
    cf16:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    cf18:	4a0b      	ldr	r2, [pc, #44]	; (cf48 <bus_fault.constprop.0+0x154>)
    cf1a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    cf1c:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    cf20:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    cf22:	7028      	strb	r0, [r5, #0]

	return reason;
}
    cf24:	46bd      	mov	sp, r7
    cf26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    cf2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    cf2c:	049b      	lsls	r3, r3, #18
    cf2e:	d5f2      	bpl.n	cf16 <bus_fault.constprop.0+0x122>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    cf30:	466e      	mov	r6, sp
    cf32:	b088      	sub	sp, #32
    cf34:	466a      	mov	r2, sp
    cf36:	4b0b      	ldr	r3, [pc, #44]	; (cf64 <bus_fault.constprop.0+0x170>)
    cf38:	e7e2      	b.n	cf00 <bus_fault.constprop.0+0x10c>
    cf3a:	bf00      	nop
    cf3c:	000211b6 	.word	0x000211b6
    cf40:	000214c3 	.word	0x000214c3
    cf44:	0001fd04 	.word	0x0001fd04
    cf48:	e000ed00 	.word	0xe000ed00
    cf4c:	000211d0 	.word	0x000211d0
    cf50:	00021113 	.word	0x00021113
    cf54:	000211e5 	.word	0x000211e5
    cf58:	00021202 	.word	0x00021202
    cf5c:	0002121b 	.word	0x0002121b
    cf60:	0002123a 	.word	0x0002123a
    cf64:	00021183 	.word	0x00021183

0000cf68 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    cf68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    cf6a:	466d      	mov	r5, sp
static uint32_t usage_fault(const z_arch_esf_t *esf)
    cf6c:	af00      	add	r7, sp, #0
	PR_FAULT_INFO("***** USAGE FAULT *****");
    cf6e:	b088      	sub	sp, #32
    cf70:	466a      	mov	r2, sp
    cf72:	2603      	movs	r6, #3
    cf74:	4b4d      	ldr	r3, [pc, #308]	; (d0ac <usage_fault.constprop.0+0x144>)
    cf76:	4c4e      	ldr	r4, [pc, #312]	; (d0b0 <usage_fault.constprop.0+0x148>)
    cf78:	6153      	str	r3, [r2, #20]
    cf7a:	6194      	str	r4, [r2, #24]
    cf7c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    cf80:	484c      	ldr	r0, [pc, #304]	; (d0b4 <usage_fault.constprop.0+0x14c>)
    cf82:	f842 6f10 	str.w	r6, [r2, #16]!
    cf86:	f00e fc19 	bl	1b7bc <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    cf8a:	4b4b      	ldr	r3, [pc, #300]	; (d0b8 <usage_fault.constprop.0+0x150>)
    cf8c:	46ad      	mov	sp, r5
    cf8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    cf90:	019b      	lsls	r3, r3, #6
    cf92:	d50c      	bpl.n	cfae <usage_fault.constprop.0+0x46>
		PR_FAULT_INFO("  Division by zero");
    cf94:	b088      	sub	sp, #32
    cf96:	466a      	mov	r2, sp
    cf98:	4b48      	ldr	r3, [pc, #288]	; (d0bc <usage_fault.constprop.0+0x154>)
    cf9a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    cf9e:	e9c2 3405 	strd	r3, r4, [r2, #20]
    cfa2:	4844      	ldr	r0, [pc, #272]	; (d0b4 <usage_fault.constprop.0+0x14c>)
    cfa4:	f842 6f10 	str.w	r6, [r2, #16]!
    cfa8:	f00e fc08 	bl	1b7bc <z_log_msg_static_create.constprop.0>
    cfac:	46ad      	mov	sp, r5
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    cfae:	4b42      	ldr	r3, [pc, #264]	; (d0b8 <usage_fault.constprop.0+0x150>)
    cfb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    cfb2:	01dd      	lsls	r5, r3, #7
    cfb4:	d50e      	bpl.n	cfd4 <usage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Unaligned memory access");
    cfb6:	466d      	mov	r5, sp
    cfb8:	b088      	sub	sp, #32
    cfba:	466a      	mov	r2, sp
    cfbc:	4b40      	ldr	r3, [pc, #256]	; (d0c0 <usage_fault.constprop.0+0x158>)
    cfbe:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    cfc2:	e9c2 3405 	strd	r3, r4, [r2, #20]
    cfc6:	2303      	movs	r3, #3
    cfc8:	483a      	ldr	r0, [pc, #232]	; (d0b4 <usage_fault.constprop.0+0x14c>)
    cfca:	f842 3f10 	str.w	r3, [r2, #16]!
    cfce:	f00e fbf5 	bl	1b7bc <z_log_msg_static_create.constprop.0>
    cfd2:	46ad      	mov	sp, r5
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    cfd4:	4b38      	ldr	r3, [pc, #224]	; (d0b8 <usage_fault.constprop.0+0x150>)
    cfd6:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    cfd8:	f415 1580 	ands.w	r5, r5, #1048576	; 0x100000
    cfdc:	d00f      	beq.n	cffe <usage_fault.constprop.0+0x96>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    cfde:	466d      	mov	r5, sp
    cfe0:	b088      	sub	sp, #32
    cfe2:	466a      	mov	r2, sp
    cfe4:	4b37      	ldr	r3, [pc, #220]	; (d0c4 <usage_fault.constprop.0+0x15c>)
    cfe6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    cfea:	e9c2 3405 	strd	r3, r4, [r2, #20]
    cfee:	2303      	movs	r3, #3
    cff0:	4830      	ldr	r0, [pc, #192]	; (d0b4 <usage_fault.constprop.0+0x14c>)
    cff2:	f842 3f10 	str.w	r3, [r2, #16]!
    cff6:	f00e fbe1 	bl	1b7bc <z_log_msg_static_create.constprop.0>
    cffa:	46ad      	mov	sp, r5
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    cffc:	2502      	movs	r5, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    cffe:	4b2e      	ldr	r3, [pc, #184]	; (d0b8 <usage_fault.constprop.0+0x150>)
    d000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d002:	0318      	lsls	r0, r3, #12
    d004:	d50e      	bpl.n	d024 <usage_fault.constprop.0+0xbc>
		PR_FAULT_INFO("  No coprocessor instructions");
    d006:	466e      	mov	r6, sp
    d008:	b088      	sub	sp, #32
    d00a:	466a      	mov	r2, sp
    d00c:	4b2e      	ldr	r3, [pc, #184]	; (d0c8 <usage_fault.constprop.0+0x160>)
    d00e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d012:	e9c2 3405 	strd	r3, r4, [r2, #20]
    d016:	2303      	movs	r3, #3
    d018:	4826      	ldr	r0, [pc, #152]	; (d0b4 <usage_fault.constprop.0+0x14c>)
    d01a:	f842 3f10 	str.w	r3, [r2, #16]!
    d01e:	f00e fbcd 	bl	1b7bc <z_log_msg_static_create.constprop.0>
    d022:	46b5      	mov	sp, r6
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    d024:	4b24      	ldr	r3, [pc, #144]	; (d0b8 <usage_fault.constprop.0+0x150>)
    d026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d028:	0359      	lsls	r1, r3, #13
    d02a:	d50e      	bpl.n	d04a <usage_fault.constprop.0+0xe2>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    d02c:	466e      	mov	r6, sp
    d02e:	b088      	sub	sp, #32
    d030:	466a      	mov	r2, sp
    d032:	4b26      	ldr	r3, [pc, #152]	; (d0cc <usage_fault.constprop.0+0x164>)
    d034:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d038:	e9c2 3405 	strd	r3, r4, [r2, #20]
    d03c:	2303      	movs	r3, #3
    d03e:	481d      	ldr	r0, [pc, #116]	; (d0b4 <usage_fault.constprop.0+0x14c>)
    d040:	f842 3f10 	str.w	r3, [r2, #16]!
    d044:	f00e fbba 	bl	1b7bc <z_log_msg_static_create.constprop.0>
    d048:	46b5      	mov	sp, r6
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    d04a:	4b1b      	ldr	r3, [pc, #108]	; (d0b8 <usage_fault.constprop.0+0x150>)
    d04c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d04e:	039a      	lsls	r2, r3, #14
    d050:	d50e      	bpl.n	d070 <usage_fault.constprop.0+0x108>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    d052:	466e      	mov	r6, sp
    d054:	b088      	sub	sp, #32
    d056:	466a      	mov	r2, sp
    d058:	4b1d      	ldr	r3, [pc, #116]	; (d0d0 <usage_fault.constprop.0+0x168>)
    d05a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d05e:	e9c2 3405 	strd	r3, r4, [r2, #20]
    d062:	2303      	movs	r3, #3
    d064:	4813      	ldr	r0, [pc, #76]	; (d0b4 <usage_fault.constprop.0+0x14c>)
    d066:	f842 3f10 	str.w	r3, [r2, #16]!
    d06a:	f00e fba7 	bl	1b7bc <z_log_msg_static_create.constprop.0>
    d06e:	46b5      	mov	sp, r6
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    d070:	4b11      	ldr	r3, [pc, #68]	; (d0b8 <usage_fault.constprop.0+0x150>)
    d072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d074:	03db      	lsls	r3, r3, #15
    d076:	d50e      	bpl.n	d096 <usage_fault.constprop.0+0x12e>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    d078:	466e      	mov	r6, sp
    d07a:	b088      	sub	sp, #32
    d07c:	466a      	mov	r2, sp
    d07e:	4b15      	ldr	r3, [pc, #84]	; (d0d4 <usage_fault.constprop.0+0x16c>)
    d080:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d084:	e9c2 3405 	strd	r3, r4, [r2, #20]
    d088:	2303      	movs	r3, #3
    d08a:	480a      	ldr	r0, [pc, #40]	; (d0b4 <usage_fault.constprop.0+0x14c>)
    d08c:	f842 3f10 	str.w	r3, [r2, #16]!
    d090:	f00e fb94 	bl	1b7bc <z_log_msg_static_create.constprop.0>
    d094:	46b5      	mov	sp, r6
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    d096:	4a08      	ldr	r2, [pc, #32]	; (d0b8 <usage_fault.constprop.0+0x150>)

	return reason;
}
    d098:	4628      	mov	r0, r5
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    d09a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    d09c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    d0a0:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    d0a4:	6293      	str	r3, [r2, #40]	; 0x28
}
    d0a6:	46bd      	mov	sp, r7
    d0a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d0aa:	bf00      	nop
    d0ac:	00021256 	.word	0x00021256
    d0b0:	000214b7 	.word	0x000214b7
    d0b4:	0001fd04 	.word	0x0001fd04
    d0b8:	e000ed00 	.word	0xe000ed00
    d0bc:	00021272 	.word	0x00021272
    d0c0:	00021289 	.word	0x00021289
    d0c4:	000212a7 	.word	0x000212a7
    d0c8:	000212d5 	.word	0x000212d5
    d0cc:	000212f7 	.word	0x000212f7
    d0d0:	00021320 	.word	0x00021320
    d0d4:	0002133e 	.word	0x0002133e

0000d0d8 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    d0d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d0dc:	b08a      	sub	sp, #40	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    d0de:	4b89      	ldr	r3, [pc, #548]	; (d304 <z_arm_fault+0x22c>)
{
    d0e0:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    d0e2:	f8d3 9004 	ldr.w	r9, [r3, #4]
{
    d0e6:	468a      	mov	sl, r1
    d0e8:	4614      	mov	r4, r2
    d0ea:	2600      	movs	r6, #0
    d0ec:	af00      	add	r7, sp, #0
    d0ee:	f3c9 0808 	ubfx	r8, r9, #0, #9
    d0f2:	f386 8811 	msr	BASEPRI, r6
    d0f6:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    d0fa:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    d0fe:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    d102:	d12a      	bne.n	d15a <z_arm_fault+0x82>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
    d104:	07d3      	lsls	r3, r2, #31
    d106:	d428      	bmi.n	d15a <z_arm_fault+0x82>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    d108:	0650      	lsls	r0, r2, #25
    d10a:	d403      	bmi.n	d114 <z_arm_fault+0x3c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    d10c:	0711      	lsls	r1, r2, #28
    d10e:	d414      	bmi.n	d13a <z_arm_fault+0x62>
			*nested_exc = true;
    d110:	2601      	movs	r6, #1
    d112:	e014      	b.n	d13e <z_arm_fault+0x66>
		PR_FAULT_INFO("Exception occurred in Secure State");
    d114:	466e      	mov	r6, sp
    d116:	b088      	sub	sp, #32
    d118:	466a      	mov	r2, sp
    d11a:	4b7b      	ldr	r3, [pc, #492]	; (d308 <z_arm_fault+0x230>)
    d11c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d120:	6153      	str	r3, [r2, #20]
    d122:	4b7a      	ldr	r3, [pc, #488]	; (d30c <z_arm_fault+0x234>)
    d124:	487a      	ldr	r0, [pc, #488]	; (d310 <z_arm_fault+0x238>)
    d126:	6193      	str	r3, [r2, #24]
    d128:	2303      	movs	r3, #3
    d12a:	f842 3f10 	str.w	r3, [r2, #16]!
    d12e:	f00e fb45 	bl	1b7bc <z_log_msg_static_create.constprop.0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    d132:	f014 0404 	ands.w	r4, r4, #4
    d136:	46b5      	mov	sp, r6
    d138:	d000      	beq.n	d13c <z_arm_fault+0x64>
			ptr_esf = (z_arch_esf_t *)psp;
    d13a:	4655      	mov	r5, sl
	*nested_exc = false;
    d13c:	2600      	movs	r6, #0
	*recoverable = false;
    d13e:	2300      	movs	r3, #0
    d140:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
    d142:	f1a8 0303 	sub.w	r3, r8, #3
    d146:	2b09      	cmp	r3, #9
    d148:	f200 80bc 	bhi.w	d2c4 <z_arm_fault+0x1ec>
    d14c:	e8df f003 	tbb	[pc, r3]
    d150:	9fa6a307 	.word	0x9fa6a307
    d154:	babababa 	.word	0xbabababa
    d158:	a9ba      	.short	0xa9ba
		return NULL;
    d15a:	4635      	mov	r5, r6
    d15c:	e7ef      	b.n	d13e <z_arm_fault+0x66>
	PR_FAULT_INFO("***** HARD FAULT *****");
    d15e:	46e8      	mov	r8, sp
    d160:	b088      	sub	sp, #32
    d162:	466a      	mov	r2, sp
    d164:	f04f 0a03 	mov.w	sl, #3
    d168:	4b6a      	ldr	r3, [pc, #424]	; (d314 <z_arm_fault+0x23c>)
    d16a:	f8df 91ac 	ldr.w	r9, [pc, #428]	; d318 <z_arm_fault+0x240>
    d16e:	6153      	str	r3, [r2, #20]
    d170:	f8c2 9018 	str.w	r9, [r2, #24]
    d174:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d178:	f842 af10 	str.w	sl, [r2, #16]!
    d17c:	4864      	ldr	r0, [pc, #400]	; (d310 <z_arm_fault+0x238>)
    d17e:	f00e fb1d 	bl	1b7bc <z_log_msg_static_create.constprop.0>
	*recoverable = false;
    d182:	2300      	movs	r3, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    d184:	4c5f      	ldr	r4, [pc, #380]	; (d304 <z_arm_fault+0x22c>)
	*recoverable = false;
    d186:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    d188:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    d18a:	46c5      	mov	sp, r8
    d18c:	079a      	lsls	r2, r3, #30
    d18e:	d50e      	bpl.n	d1ae <z_arm_fault+0xd6>
		PR_EXC("  Bus fault on vector table read");
    d190:	b088      	sub	sp, #32
    d192:	466a      	mov	r2, sp
    d194:	4b61      	ldr	r3, [pc, #388]	; (d31c <z_arm_fault+0x244>)
		PR_EXC("  Debug event");
    d196:	e9c2 3905 	strd	r3, r9, [r2, #20]
    d19a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d19e:	485c      	ldr	r0, [pc, #368]	; (d310 <z_arm_fault+0x238>)
    d1a0:	f842 af10 	str.w	sl, [r2, #16]!
    d1a4:	f00e fb0a 	bl	1b7bc <z_log_msg_static_create.constprop.0>
    d1a8:	46c5      	mov	sp, r8
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    d1aa:	2400      	movs	r4, #0
    d1ac:	e03e      	b.n	d22c <z_arm_fault+0x154>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    d1ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    d1b0:	2b00      	cmp	r3, #0
    d1b2:	da03      	bge.n	d1bc <z_arm_fault+0xe4>
		PR_EXC("  Debug event");
    d1b4:	b088      	sub	sp, #32
    d1b6:	466a      	mov	r2, sp
    d1b8:	4b59      	ldr	r3, [pc, #356]	; (d320 <z_arm_fault+0x248>)
    d1ba:	e7ec      	b.n	d196 <z_arm_fault+0xbe>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    d1bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    d1be:	005b      	lsls	r3, r3, #1
    d1c0:	d5f3      	bpl.n	d1aa <z_arm_fault+0xd2>
		PR_EXC("  Fault escalation (see below)");
    d1c2:	b088      	sub	sp, #32
    d1c4:	466a      	mov	r2, sp
    d1c6:	4b57      	ldr	r3, [pc, #348]	; (d324 <z_arm_fault+0x24c>)
    d1c8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d1cc:	e9c2 3905 	strd	r3, r9, [r2, #20]
    d1d0:	484f      	ldr	r0, [pc, #316]	; (d310 <z_arm_fault+0x238>)
    d1d2:	f842 af10 	str.w	sl, [r2, #16]!
    d1d6:	f00e faf1 	bl	1b7bc <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    d1da:	6963      	ldr	r3, [r4, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    d1dc:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    d1de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    d1e2:	46c5      	mov	sp, r8
    d1e4:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    d1e6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    d1ea:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    d1ee:	6963      	ldr	r3, [r4, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    d1f0:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    d1f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    d1f8:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    d1fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    d1fe:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    d202:	f64d 7302 	movw	r3, #57090	; 0xdf02
    d206:	429a      	cmp	r2, r3
    d208:	d12c      	bne.n	d264 <z_arm_fault+0x18c>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    d20a:	b088      	sub	sp, #32
    d20c:	682b      	ldr	r3, [r5, #0]
    d20e:	466a      	mov	r2, sp
    d210:	61d3      	str	r3, [r2, #28]
    d212:	2304      	movs	r3, #4
    d214:	4944      	ldr	r1, [pc, #272]	; (d328 <z_arm_fault+0x250>)
    d216:	483e      	ldr	r0, [pc, #248]	; (d310 <z_arm_fault+0x238>)
    d218:	e9c2 1905 	strd	r1, r9, [r2, #20]
    d21c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    d220:	f842 3f10 	str.w	r3, [r2, #16]!
    d224:	f00e faca 	bl	1b7bc <z_log_msg_static_create.constprop.0>
    d228:	46c5      	mov	sp, r8
			reason = esf->basic.r0;
    d22a:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    d22c:	79fb      	ldrb	r3, [r7, #7]
    d22e:	b9ab      	cbnz	r3, d25c <z_arm_fault+0x184>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    d230:	2220      	movs	r2, #32
    d232:	4629      	mov	r1, r5
    d234:	f107 0008 	add.w	r0, r7, #8
    d238:	f00e fb4b 	bl	1b8d2 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    d23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d23e:	2e00      	cmp	r6, #0
    d240:	d05a      	beq.n	d2f8 <z_arm_fault+0x220>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    d242:	f3c3 0208 	ubfx	r2, r3, #0, #9
    d246:	b922      	cbnz	r2, d252 <z_arm_fault+0x17a>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    d248:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    d24c:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    d250:	627b      	str	r3, [r7, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    d252:	4620      	mov	r0, r4
    d254:	f107 0108 	add.w	r1, r7, #8
    d258:	f7ff fb82 	bl	c960 <z_arm_fatal_error>
}
    d25c:	3728      	adds	r7, #40	; 0x28
    d25e:	46bd      	mov	sp, r7
    d260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    d264:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d266:	b2db      	uxtb	r3, r3
    d268:	b123      	cbz	r3, d274 <z_arm_fault+0x19c>
			reason = mem_manage_fault(esf, 1, recoverable);
    d26a:	2001      	movs	r0, #1
    d26c:	1df9      	adds	r1, r7, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    d26e:	f7ff fd07 	bl	cc80 <mem_manage_fault.constprop.0>
    d272:	e00e      	b.n	d292 <z_arm_fault+0x1ba>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    d274:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d276:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
    d27a:	d004      	beq.n	d286 <z_arm_fault+0x1ae>
			reason = bus_fault(esf, 1, recoverable);
    d27c:	2001      	movs	r0, #1
    d27e:	1df9      	adds	r1, r7, #7
		reason = bus_fault(esf, 0, recoverable);
    d280:	f7ff fdb8 	bl	cdf4 <bus_fault.constprop.0>
    d284:	e005      	b.n	d292 <z_arm_fault+0x1ba>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    d286:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    d28c:	d38d      	bcc.n	d1aa <z_arm_fault+0xd2>
			reason = usage_fault(esf);
    d28e:	f7ff fe6b 	bl	cf68 <usage_fault.constprop.0>
    d292:	4604      	mov	r4, r0
    d294:	e7ca      	b.n	d22c <z_arm_fault+0x154>
		reason = mem_manage_fault(esf, 0, recoverable);
    d296:	2000      	movs	r0, #0
    d298:	1df9      	adds	r1, r7, #7
    d29a:	e7e8      	b.n	d26e <z_arm_fault+0x196>
		reason = bus_fault(esf, 0, recoverable);
    d29c:	2000      	movs	r0, #0
    d29e:	1df9      	adds	r1, r7, #7
    d2a0:	e7ee      	b.n	d280 <z_arm_fault+0x1a8>
	PR_FAULT_INFO(
    d2a2:	466c      	mov	r4, sp
    d2a4:	b088      	sub	sp, #32
    d2a6:	466a      	mov	r2, sp
    d2a8:	4b20      	ldr	r3, [pc, #128]	; (d32c <z_arm_fault+0x254>)
    d2aa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d2ae:	6153      	str	r3, [r2, #20]
    d2b0:	4b1f      	ldr	r3, [pc, #124]	; (d330 <z_arm_fault+0x258>)
    d2b2:	6193      	str	r3, [r2, #24]
    d2b4:	2303      	movs	r3, #3
    d2b6:	f842 3f10 	str.w	r3, [r2, #16]!
	PR_FAULT_INFO("***** %s %d) *****",
    d2ba:	4815      	ldr	r0, [pc, #84]	; (d310 <z_arm_fault+0x238>)
    d2bc:	f00e fa7e 	bl	1b7bc <z_log_msg_static_create.constprop.0>
    d2c0:	46a5      	mov	sp, r4
}
    d2c2:	e772      	b.n	d1aa <z_arm_fault+0xd2>
	PR_FAULT_INFO("***** %s %d) *****",
    d2c4:	4a1b      	ldr	r2, [pc, #108]	; (d334 <z_arm_fault+0x25c>)
    d2c6:	466c      	mov	r4, sp
    d2c8:	f419 7ff8 	tst.w	r9, #496	; 0x1f0
    d2cc:	b08a      	sub	sp, #40	; 0x28
    d2ce:	4b1a      	ldr	r3, [pc, #104]	; (d338 <z_arm_fault+0x260>)
    d2d0:	bf18      	it	ne
    d2d2:	4613      	movne	r3, r2
    d2d4:	466a      	mov	r2, sp
    d2d6:	4919      	ldr	r1, [pc, #100]	; (d33c <z_arm_fault+0x264>)
    d2d8:	6151      	str	r1, [r2, #20]
    d2da:	4919      	ldr	r1, [pc, #100]	; (d340 <z_arm_fault+0x268>)
    d2dc:	e9c2 1306 	strd	r1, r3, [r2, #24]
    d2e0:	f1a8 0310 	sub.w	r3, r8, #16
    d2e4:	6213      	str	r3, [r2, #32]
    d2e6:	f240 3301 	movw	r3, #769	; 0x301
    d2ea:	8493      	strh	r3, [r2, #36]	; 0x24
    d2ec:	4b15      	ldr	r3, [pc, #84]	; (d344 <z_arm_fault+0x26c>)
    d2ee:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
    d2f2:	f842 3f10 	str.w	r3, [r2, #16]!
    d2f6:	e7e0      	b.n	d2ba <z_arm_fault+0x1e2>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    d2f8:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    d2fc:	f023 0301 	bic.w	r3, r3, #1
    d300:	e7a6      	b.n	d250 <z_arm_fault+0x178>
    d302:	bf00      	nop
    d304:	e000ed00 	.word	0xe000ed00
    d308:	0002139b 	.word	0x0002139b
    d30c:	000214e9 	.word	0x000214e9
    d310:	0001fd04 	.word	0x0001fd04
    d314:	000213c2 	.word	0x000213c2
    d318:	000214de 	.word	0x000214de
    d31c:	000213dd 	.word	0x000213dd
    d320:	00021402 	.word	0x00021402
    d324:	00021414 	.word	0x00021414
    d328:	00021437 	.word	0x00021437
    d32c:	00021457 	.word	0x00021457
    d330:	000214a9 	.word	0x000214a9
    d334:	00021382 	.word	0x00021382
    d338:	0002136d 	.word	0x0002136d
    d33c:	0002147f 	.word	0x0002147f
    d340:	00021496 	.word	0x00021496
    d344:	01000005 	.word	0x01000005

0000d348 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    d348:	4b04      	ldr	r3, [pc, #16]	; (d35c <z_arm_fault_init+0x14>)
    d34a:	695a      	ldr	r2, [r3, #20]
    d34c:	f042 0210 	orr.w	r2, r2, #16
    d350:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    d352:	695a      	ldr	r2, [r3, #20]
    d354:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    d358:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    d35a:	4770      	bx	lr
    d35c:	e000ed00 	.word	0xe000ed00

0000d360 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    d360:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    d364:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    d368:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    d36a:	4672      	mov	r2, lr
	bl z_arm_fault
    d36c:	f7ff feb4 	bl	d0d8 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    d370:	bd01      	pop	{r0, pc}
    d372:	bf00      	nop

0000d374 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    d374:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d376:	2120      	movs	r1, #32
    d378:	4803      	ldr	r0, [pc, #12]	; (d388 <z_arm_interrupt_init+0x14>)
    d37a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    d37c:	3301      	adds	r3, #1
    d37e:	2b45      	cmp	r3, #69	; 0x45
    d380:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    d384:	d1f9      	bne.n	d37a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    d386:	4770      	bx	lr
    d388:	e000e100 	.word	0xe000e100

0000d38c <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    d38c:	2000      	movs	r0, #0
    msr CONTROL, r0
    d38e:	f380 8814 	msr	CONTROL, r0
    isb
    d392:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    d396:	2000      	movs	r0, #0
    msr MSPLIM, r0
    d398:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    d39c:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    d3a0:	f7fd fe56 	bl	b050 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    d3a4:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    d3a6:	490e      	ldr	r1, [pc, #56]	; (d3e0 <__start+0x54>)
    str r0, [r1]
    d3a8:	6008      	str	r0, [r1, #0]
    dsb
    d3aa:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    d3ae:	480d      	ldr	r0, [pc, #52]	; (d3e4 <__start+0x58>)
    msr msp, r0
    d3b0:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    d3b4:	f000 f83e 	bl	d434 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    d3b8:	2020      	movs	r0, #32
    msr BASEPRI, r0
    d3ba:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    d3be:	480a      	ldr	r0, [pc, #40]	; (d3e8 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    d3c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    d3c4:	1840      	adds	r0, r0, r1
    msr PSP, r0
    d3c6:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    d3ca:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    d3ce:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    d3d0:	4308      	orrs	r0, r1
    msr CONTROL, r0
    d3d2:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    d3d6:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    d3da:	f7ff fb79 	bl	cad0 <z_arm_prep_c>
    d3de:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    d3e0:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    d3e4:	2000cf68 	.word	0x2000cf68
    ldr r0, =z_interrupt_stacks
    d3e8:	2000c228 	.word	0x2000c228

0000d3ec <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    d3ec:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    d3f0:	4905      	ldr	r1, [pc, #20]	; (d408 <sys_arch_reboot+0x1c>)
    d3f2:	4b06      	ldr	r3, [pc, #24]	; (d40c <sys_arch_reboot+0x20>)
    d3f4:	68ca      	ldr	r2, [r1, #12]
    d3f6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    d3fa:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    d3fc:	60cb      	str	r3, [r1, #12]
    d3fe:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    d402:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    d404:	e7fd      	b.n	d402 <sys_arch_reboot+0x16>
    d406:	bf00      	nop
    d408:	e000ed00 	.word	0xe000ed00
    d40c:	05fa0004 	.word	0x05fa0004

0000d410 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    d410:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    d412:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    d414:	4906      	ldr	r1, [pc, #24]	; (d430 <z_arm_clear_arm_mpu_config+0x20>)
    d416:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
    d41a:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
    d41e:	4293      	cmp	r3, r2
    d420:	db00      	blt.n	d424 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    d422:	4770      	bx	lr
  mpu->RNR = rnr;
    d424:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
    d428:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    d42c:	3301      	adds	r3, #1
    d42e:	e7f6      	b.n	d41e <z_arm_clear_arm_mpu_config+0xe>
    d430:	e000ed00 	.word	0xe000ed00

0000d434 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    d434:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    d436:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    d438:	2400      	movs	r4, #0
    d43a:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    d43e:	f7ff ffe7 	bl	d410 <z_arm_clear_arm_mpu_config>
    d442:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    d444:	f04f 30ff 	mov.w	r0, #4294967295
    d448:	4a0c      	ldr	r2, [pc, #48]	; (d47c <z_arm_init_arch_hw_at_boot+0x48>)
    d44a:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    d44e:	3301      	adds	r3, #1
    d450:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    d452:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    d456:	d1f8      	bne.n	d44a <z_arm_init_arch_hw_at_boot+0x16>
    d458:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    d45a:	f04f 30ff 	mov.w	r0, #4294967295
    d45e:	4a07      	ldr	r2, [pc, #28]	; (d47c <z_arm_init_arch_hw_at_boot+0x48>)
    d460:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    d464:	3301      	adds	r3, #1
    d466:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    d468:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    d46c:	d1f8      	bne.n	d460 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    d46e:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    d470:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    d474:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    d478:	bd10      	pop	{r4, pc}
    d47a:	bf00      	nop
    d47c:	e000e100 	.word	0xe000e100

0000d480 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    d480:	4b08      	ldr	r3, [pc, #32]	; (d4a4 <z_impl_k_thread_abort+0x24>)
    d482:	689b      	ldr	r3, [r3, #8]
    d484:	4283      	cmp	r3, r0
    d486:	d10b      	bne.n	d4a0 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    d488:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    d48c:	b143      	cbz	r3, d4a0 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    d48e:	4b06      	ldr	r3, [pc, #24]	; (d4a8 <z_impl_k_thread_abort+0x28>)
    d490:	685a      	ldr	r2, [r3, #4]
    d492:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    d496:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    d498:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    d49a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    d49e:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    d4a0:	f00c b90c 	b.w	196bc <z_thread_abort>
    d4a4:	20009f2c 	.word	0x20009f2c
    d4a8:	e000ed00 	.word	0xe000ed00

0000d4ac <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    d4ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    d4ae:	4c09      	ldr	r4, [pc, #36]	; (d4d4 <z_arm_configure_static_mpu_regions+0x28>)
    d4b0:	4a09      	ldr	r2, [pc, #36]	; (d4d8 <z_arm_configure_static_mpu_regions+0x2c>)
    d4b2:	4623      	mov	r3, r4
    d4b4:	2101      	movs	r1, #1
    d4b6:	4809      	ldr	r0, [pc, #36]	; (d4dc <z_arm_configure_static_mpu_regions+0x30>)
    d4b8:	f000 f934 	bl	d724 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    d4bc:	2300      	movs	r3, #0
    d4be:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    d4c0:	4b07      	ldr	r3, [pc, #28]	; (d4e0 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    d4c2:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    d4c4:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    d4c6:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    d4c8:	9301      	str	r3, [sp, #4]
    d4ca:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    d4cc:	f000 f934 	bl	d738 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    d4d0:	b004      	add	sp, #16
    d4d2:	bd10      	pop	{r4, pc}
    d4d4:	20070000 	.word	0x20070000
    d4d8:	20008000 	.word	0x20008000
    d4dc:	0002017c 	.word	0x0002017c
    d4e0:	200088b8 	.word	0x200088b8

0000d4e4 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    d4e4:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
		| (region_conf->attr.rbar &
    d4e6:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    d4e8:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    d4ea:	f004 021f 	and.w	r2, r4, #31
		(region_conf->base & MPU_RBAR_BASE_Msk)
    d4ee:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
    d4f2:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    d4f4:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    d4f6:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    d4f8:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
    d4fc:	4905      	ldr	r1, [pc, #20]	; (d514 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    d4fe:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    d502:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
    d506:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
    d50a:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
    d50e:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    d512:	bd10      	pop	{r4, pc}
    d514:	e000ed00 	.word	0xe000ed00

0000d518 <region_allocate_and_init.part.0>:
#include "arm_mpu_v8_internal.h"
#else
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
    d518:	b580      	push	{r7, lr}
    d51a:	af00      	add	r7, sp, #0
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    d51c:	b088      	sub	sp, #32
    d51e:	466a      	mov	r2, sp
    d520:	4b08      	ldr	r3, [pc, #32]	; (d544 <region_allocate_and_init.part.0+0x2c>)
    d522:	6153      	str	r3, [r2, #20]
    d524:	4b08      	ldr	r3, [pc, #32]	; (d548 <region_allocate_and_init.part.0+0x30>)
    d526:	e9c2 3006 	strd	r3, r0, [r2, #24]
    d52a:	2304      	movs	r3, #4
    d52c:	f842 3f10 	str.w	r3, [r2, #16]!
    d530:	2300      	movs	r3, #0
    d532:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    d536:	4805      	ldr	r0, [pc, #20]	; (d54c <region_allocate_and_init.part.0+0x34>)
    d538:	f7fe f812 	bl	b560 <z_impl_z_log_msg_static_create>

	/* Program region */
	region_init(index, region_conf);

	return index;
}
    d53c:	f06f 0015 	mvn.w	r0, #21
    d540:	46bd      	mov	sp, r7
    d542:	bd80      	pop	{r7, pc}
    d544:	000214f5 	.word	0x000214f5
    d548:	0002156d 	.word	0x0002156d
    d54c:	0001fcf4 	.word	0x0001fcf4

0000d550 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    d550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d554:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    d556:	4606      	mov	r6, r0
    d558:	f04f 0900 	mov.w	r9, #0
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    d55c:	b087      	sub	sp, #28
	MPU->RNR = rnr;
    d55e:	4d61      	ldr	r5, [pc, #388]	; (d6e4 <mpu_configure_regions_and_partition.constprop.0+0x194>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    d560:	af00      	add	r7, sp, #0
    d562:	6079      	str	r1, [r7, #4]
	for (i = 0; i < regions_num; i++) {
    d564:	687b      	ldr	r3, [r7, #4]
    d566:	4599      	cmp	r9, r3
    d568:	da39      	bge.n	d5de <mpu_configure_regions_and_partition.constprop.0+0x8e>
		if (regions[i].size == 0U) {
    d56a:	f8d6 8004 	ldr.w	r8, [r6, #4]
    d56e:	f1b8 0f00 	cmp.w	r8, #0
    d572:	d058      	beq.n	d626 <mpu_configure_regions_and_partition.constprop.0+0xd6>
		&&
    d574:	f1b8 0f1f 	cmp.w	r8, #31
    d578:	d91d      	bls.n	d5b6 <mpu_configure_regions_and_partition.constprop.0+0x66>
		&&
    d57a:	f018 0f1f 	tst.w	r8, #31
    d57e:	d11a      	bne.n	d5b6 <mpu_configure_regions_and_partition.constprop.0+0x66>
		((part->start &
    d580:	f8d6 b000 	ldr.w	fp, [r6]
		&&
    d584:	f01b 0f1f 	tst.w	fp, #31
    d588:	d115      	bne.n	d5b6 <mpu_configure_regions_and_partition.constprop.0+0x66>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    d58a:	4658      	mov	r0, fp
    d58c:	f00e f91b 	bl	1b7c6 <arm_cmse_mpu_region_get>
    d590:	4682      	mov	sl, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    d592:	eb08 000b 	add.w	r0, r8, fp
    d596:	3801      	subs	r0, #1
    d598:	f00e f915 	bl	1b7c6 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    d59c:	4582      	cmp	sl, r0
    d59e:	d023      	beq.n	d5e8 <mpu_configure_regions_and_partition.constprop.0+0x98>

		/* Derive the index of the underlying MPU region,
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);
    d5a0:	f06f 0a15 	mvn.w	sl, #21

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    d5a4:	466c      	mov	r4, sp
    d5a6:	b088      	sub	sp, #32
    d5a8:	466a      	mov	r2, sp
    d5aa:	494f      	ldr	r1, [pc, #316]	; (d6e8 <mpu_configure_regions_and_partition.constprop.0+0x198>)
    d5ac:	6151      	str	r1, [r2, #20]
    d5ae:	494f      	ldr	r1, [pc, #316]	; (d6ec <mpu_configure_regions_and_partition.constprop.0+0x19c>)
    d5b0:	e9c2 1a06 	strd	r1, sl, [r2, #24]
    d5b4:	e007      	b.n	d5c6 <mpu_configure_regions_and_partition.constprop.0+0x76>
			LOG_ERR("Partition %u: sanity check failed.", i);
    d5b6:	466c      	mov	r4, sp
    d5b8:	b088      	sub	sp, #32
    d5ba:	466a      	mov	r2, sp
    d5bc:	4b4c      	ldr	r3, [pc, #304]	; (d6f0 <mpu_configure_regions_and_partition.constprop.0+0x1a0>)
    d5be:	6153      	str	r3, [r2, #20]
    d5c0:	4b4a      	ldr	r3, [pc, #296]	; (d6ec <mpu_configure_regions_and_partition.constprop.0+0x19c>)
    d5c2:	e9c2 3906 	strd	r3, r9, [r2, #24]
			LOG_ERR("Invalid underlying region index %u",
    d5c6:	2304      	movs	r3, #4
    d5c8:	f842 3f10 	str.w	r3, [r2, #16]!
    d5cc:	2300      	movs	r3, #0
    d5ce:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    d5d2:	4848      	ldr	r0, [pc, #288]	; (d6f4 <mpu_configure_regions_and_partition.constprop.0+0x1a4>)
    d5d4:	f7fd ffc4 	bl	b560 <z_impl_z_log_msg_static_create>
    d5d8:	46a5      	mov	sp, r4
			return -EINVAL;
    d5da:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    d5de:	4620      	mov	r0, r4
    d5e0:	371c      	adds	r7, #28
    d5e2:	46bd      	mov	sp, r7
    d5e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    d5e8:	f11a 0f16 	cmn.w	sl, #22
    d5ec:	d0da      	beq.n	d5a4 <mpu_configure_regions_and_partition.constprop.0+0x54>
    d5ee:	4554      	cmp	r4, sl
    d5f0:	ddd8      	ble.n	d5a4 <mpu_configure_regions_and_partition.constprop.0+0x54>
	MPU->RNR = rnr;
    d5f2:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
    d5f6:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
    d5fa:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RLAR;
    d5fe:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    d602:	f020 001f 	bic.w	r0, r0, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    d606:	f042 081f 	orr.w	r8, r2, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    d60a:	e9d6 2100 	ldrd	r2, r1, [r6]
    d60e:	4411      	add	r1, r2
		if ((regions[i].start == u_reg_base) &&
    d610:	4290      	cmp	r0, r2
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    d612:	f101 3bff 	add.w	fp, r1, #4294967295
		if ((regions[i].start == u_reg_base) &&
    d616:	d11e      	bne.n	d656 <mpu_configure_regions_and_partition.constprop.0+0x106>
    d618:	45d8      	cmp	r8, fp
    d61a:	d108      	bne.n	d62e <mpu_configure_regions_and_partition.constprop.0+0xde>
			mpu_configure_region(u_reg_index, &regions[i]);
    d61c:	4631      	mov	r1, r6
    d61e:	fa5f f08a 	uxtb.w	r0, sl
    d622:	f00e f8d9 	bl	1b7d8 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    d626:	f109 0901 	add.w	r9, r9, #1
    d62a:	360c      	adds	r6, #12
    d62c:	e79a      	b.n	d564 <mpu_configure_regions_and_partition.constprop.0+0x14>
	MPU->RNR = rnr;
    d62e:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
    d632:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
    d636:	f021 011f 	bic.w	r1, r1, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
    d63a:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
    d63e:	430b      	orrs	r3, r1
				mpu_configure_region(reg_index, &regions[i]);
    d640:	4631      	mov	r1, r6
	MPU->RBAR = rbar;
    d642:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    d646:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    d648:	f00e f8c6 	bl	1b7d8 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    d64c:	f110 0f16 	cmn.w	r0, #22
    d650:	d0c3      	beq.n	d5da <mpu_configure_regions_and_partition.constprop.0+0x8a>
			reg_index++;
    d652:	1c44      	adds	r4, r0, #1
    d654:	e7e7      	b.n	d626 <mpu_configure_regions_and_partition.constprop.0+0xd6>
				regions[i].start - 1);
    d656:	3a01      	subs	r2, #1
		} else if (reg_last == u_reg_last) {
    d658:	45d8      	cmp	r8, fp
				mpu_configure_region(reg_index, &regions[i]);
    d65a:	b2e0      	uxtb	r0, r4
		     | (limit & MPU_RLAR_LIMIT_Msk));
    d65c:	f022 021f 	bic.w	r2, r2, #31
	MPU->RNR = rnr;
    d660:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
		} else if (reg_last == u_reg_last) {
    d664:	d108      	bne.n	d678 <mpu_configure_regions_and_partition.constprop.0+0x128>
	return MPU->RLAR;
    d666:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    d66a:	4631      	mov	r1, r6
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    d66c:	f003 031f 	and.w	r3, r3, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    d670:	4313      	orrs	r3, r2
	MPU->RLAR = rlar;
    d672:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
			reg_index =
    d676:	e7e7      	b.n	d648 <mpu_configure_regions_and_partition.constprop.0+0xf8>
	return MPU->RLAR;
    d678:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    d67c:	f001 011f 	and.w	r1, r1, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    d680:	430a      	orrs	r2, r1
	MPU->RLAR = rlar;
    d682:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    d686:	4631      	mov	r1, r6
    d688:	f00e f8a6 	bl	1b7d8 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    d68c:	f110 0f16 	cmn.w	r0, #22
    d690:	d0a3      	beq.n	d5da <mpu_configure_regions_and_partition.constprop.0+0x8a>
	MPU->RNR = rnr;
    d692:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
    d696:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    d69a:	7c3b      	ldrb	r3, [r7, #16]
			REGION_LIMIT_ADDR((regions[i].start +
    d69c:	f108 38ff 	add.w	r8, r8, #4294967295
	attr->rbar = mpu_get_rbar() &
    d6a0:	f362 0304 	bfi	r3, r2, #0, #5
    d6a4:	743b      	strb	r3, [r7, #16]
	return MPU->RLAR;
    d6a6:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    d6aa:	7c3a      	ldrb	r2, [r7, #16]
    d6ac:	085b      	lsrs	r3, r3, #1
    d6ae:	f363 1247 	bfi	r2, r3, #5, #3
    d6b2:	743a      	strb	r2, [r7, #16]
			fill_region.base = regions[i].start +
    d6b4:	e9d6 3200 	ldrd	r3, r2, [r6]
    d6b8:	4413      	add	r3, r2
    d6ba:	60bb      	str	r3, [r7, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    d6bc:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    d6c0:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    d6c2:	4443      	add	r3, r8
    d6c4:	eba3 030b 	sub.w	r3, r3, fp
				region_allocate_and_init(reg_index,
    d6c8:	b2e0      	uxtb	r0, r4
			REGION_LIMIT_ADDR((regions[i].start +
    d6ca:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    d6ce:	2807      	cmp	r0, #7
			fill_region.attr.r_limit =
    d6d0:	617b      	str	r3, [r7, #20]
    d6d2:	d902      	bls.n	d6da <mpu_configure_regions_and_partition.constprop.0+0x18a>
    d6d4:	f7ff ff20 	bl	d518 <region_allocate_and_init.part.0>
			if (reg_index == -EINVAL) {
    d6d8:	e7b8      	b.n	d64c <mpu_configure_regions_and_partition.constprop.0+0xfc>
	region_init(index, region_conf);
    d6da:	f107 0108 	add.w	r1, r7, #8
    d6de:	f7ff ff01 	bl	d4e4 <region_init>
    d6e2:	e7b6      	b.n	d652 <mpu_configure_regions_and_partition.constprop.0+0x102>
    d6e4:	e000ed00 	.word	0xe000ed00
    d6e8:	00021546 	.word	0x00021546
    d6ec:	00021586 	.word	0x00021586
    d6f0:	0002151f 	.word	0x0002151f
    d6f4:	0001fcf4 	.word	0x0001fcf4

0000d6f8 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    d6f8:	2205      	movs	r2, #5
    d6fa:	4b04      	ldr	r3, [pc, #16]	; (d70c <arm_core_mpu_enable+0x14>)
    d6fc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    d700:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    d704:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    d708:	4770      	bx	lr
    d70a:	bf00      	nop
    d70c:	e000ed00 	.word	0xe000ed00

0000d710 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    d710:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    d714:	2200      	movs	r2, #0
    d716:	4b02      	ldr	r3, [pc, #8]	; (d720 <arm_core_mpu_disable+0x10>)
    d718:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    d71c:	4770      	bx	lr
    d71e:	bf00      	nop
    d720:	e000ed00 	.word	0xe000ed00

0000d724 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    d724:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    d726:	4c03      	ldr	r4, [pc, #12]	; (d734 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    d728:	7822      	ldrb	r2, [r4, #0]
    d72a:	f7ff ff11 	bl	d550 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    d72e:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    d730:	bd10      	pop	{r4, pc}
    d732:	bf00      	nop
    d734:	20009f91 	.word	0x20009f91

0000d738 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
    d738:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d73c:	4d29      	ldr	r5, [pc, #164]	; (d7e4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xac>)
    d73e:	468a      	mov	sl, r1

/* This internal function marks and stores the configuration of memory areas
 * where dynamic region programming is allowed. Return zero on success, or
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
    d740:	4606      	mov	r6, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    d742:	f04f 0800 	mov.w	r8, #0
    d746:	46ab      	mov	fp, r5
	MPU->RNR = rnr;
    d748:	4f27      	ldr	r7, [pc, #156]	; (d7e8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    d74a:	45d0      	cmp	r8, sl
    d74c:	da1b      	bge.n	d786 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    d74e:	f8d6 9004 	ldr.w	r9, [r6, #4]
    d752:	f1b9 0f00 	cmp.w	r9, #0
    d756:	d03f      	beq.n	d7d8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    d758:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    d75a:	4608      	mov	r0, r1
    d75c:	9101      	str	r1, [sp, #4]
    d75e:	f00e f832 	bl	1b7c6 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    d762:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    d764:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    d766:	eb09 0001 	add.w	r0, r9, r1
    d76a:	3801      	subs	r0, #1
    d76c:	f00e f82b 	bl	1b7c6 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    d770:	4284      	cmp	r4, r0
    d772:	f04f 0214 	mov.w	r2, #20
    d776:	4b1d      	ldr	r3, [pc, #116]	; (d7ec <arm_core_mpu_mark_areas_for_dynamic_regions+0xb4>)
    d778:	d008      	beq.n	d78c <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    d77a:	fb02 f308 	mul.w	r3, r2, r8
    d77e:	f06f 0215 	mvn.w	r2, #21
    d782:	f84b 2003 	str.w	r2, [fp, r3]
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
    d786:	b003      	add	sp, #12
    d788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    d78c:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    d790:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    d792:	d0f8      	beq.n	d786 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    d794:	7819      	ldrb	r1, [r3, #0]
    d796:	42a1      	cmp	r1, r4
    d798:	ddf5      	ble.n	d786 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = mpu_get_rbar() &
    d79a:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = rnr;
    d79e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
    d7a2:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	return MPU->RBAR;
    d7a6:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    d7aa:	f100 0108 	add.w	r1, r0, #8
    d7ae:	7b00      	ldrb	r0, [r0, #12]
    d7b0:	f364 0004 	bfi	r0, r4, #0, #5
    d7b4:	7108      	strb	r0, [r1, #4]
	return MPU->RLAR;
    d7b6:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    d7ba:	790c      	ldrb	r4, [r1, #4]
    d7bc:	0840      	lsrs	r0, r0, #1
    d7be:	f360 1447 	bfi	r4, r0, #5, #3
    d7c2:	710c      	strb	r4, [r1, #4]
	return MPU->RBAR;
    d7c4:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    d7c8:	f021 011f 	bic.w	r1, r1, #31
    d7cc:	6069      	str	r1, [r5, #4]
	return MPU->RLAR;
    d7ce:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
    d7d2:	f021 011f 	bic.w	r1, r1, #31
    d7d6:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    d7d8:	f108 0801 	add.w	r8, r8, #1
    d7dc:	3514      	adds	r5, #20
    d7de:	360c      	adds	r6, #12
    d7e0:	e7b3      	b.n	d74a <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    d7e2:	bf00      	nop
    d7e4:	20009b1c 	.word	0x20009b1c
    d7e8:	e000ed00 	.word	0xe000ed00
    d7ec:	20009f91 	.word	0x20009f91

0000d7f0 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    d7f0:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    d7f2:	4d0e      	ldr	r5, [pc, #56]	; (d82c <z_arm_mpu_init+0x3c>)
    d7f4:	682c      	ldr	r4, [r5, #0]
    d7f6:	2c08      	cmp	r4, #8
    d7f8:	d815      	bhi.n	d826 <z_arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    d7fa:	2000      	movs	r0, #0
	arm_core_mpu_disable();
    d7fc:	f7ff ff88 	bl	d710 <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
    d800:	4b0b      	ldr	r3, [pc, #44]	; (d830 <z_arm_mpu_init+0x40>)
    d802:	4a0c      	ldr	r2, [pc, #48]	; (d834 <z_arm_mpu_init+0x44>)
    d804:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    d808:	4284      	cmp	r4, r0
    d80a:	d105      	bne.n	d818 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    d80c:	4b0a      	ldr	r3, [pc, #40]	; (d838 <z_arm_mpu_init+0x48>)
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    d80e:	2000      	movs	r0, #0
	static_regions_num = mpu_config.num_regions;
    d810:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    d812:	f7ff ff71 	bl	d6f8 <arm_core_mpu_enable>
}
    d816:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    d818:	6869      	ldr	r1, [r5, #4]
    d81a:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    d81e:	f7ff fe61 	bl	d4e4 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    d822:	3001      	adds	r0, #1
    d824:	e7f0      	b.n	d808 <z_arm_mpu_init+0x18>
		return -1;
    d826:	f04f 30ff 	mov.w	r0, #4294967295
    d82a:	e7f4      	b.n	d816 <z_arm_mpu_init+0x26>
    d82c:	00020188 	.word	0x00020188
    d830:	e000ed00 	.word	0xe000ed00
    d834:	0044ffaa 	.word	0x0044ffaa
    d838:	20009f91 	.word	0x20009f91

0000d83c <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    d83c:	4b01      	ldr	r3, [pc, #4]	; (d844 <__stdout_hook_install+0x8>)
    d83e:	6018      	str	r0, [r3, #0]
}
    d840:	4770      	bx	lr
    d842:	bf00      	nop
    d844:	2000838c 	.word	0x2000838c

0000d848 <z_impl_zephyr_fputc>:

int z_impl_zephyr_fputc(int c, FILE *stream)
{
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
    d848:	3902      	subs	r1, #2
    d84a:	2901      	cmp	r1, #1
    d84c:	d802      	bhi.n	d854 <z_impl_zephyr_fputc+0xc>
    d84e:	4b03      	ldr	r3, [pc, #12]	; (d85c <z_impl_zephyr_fputc+0x14>)
    d850:	681b      	ldr	r3, [r3, #0]
    d852:	4718      	bx	r3
}
    d854:	f04f 30ff 	mov.w	r0, #4294967295
    d858:	4770      	bx	lr
    d85a:	bf00      	nop
    d85c:	2000838c 	.word	0x2000838c

0000d860 <printf>:

	return r;
}

int printf(const char *ZRESTRICT format, ...)
{
    d860:	b40f      	push	{r0, r1, r2, r3}
    d862:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    d864:	2100      	movs	r1, #0
    d866:	ab06      	add	r3, sp, #24
    d868:	f853 2b04 	ldr.w	r2, [r3], #4
    d86c:	4805      	ldr	r0, [pc, #20]	; (d884 <printf+0x24>)
    d86e:	9100      	str	r1, [sp, #0]
    d870:	2102      	movs	r1, #2
	va_list vargs;
	int     r;

	va_start(vargs, format);
    d872:	9303      	str	r3, [sp, #12]
    d874:	f7fc fcae 	bl	a1d4 <z_cbvprintf_impl>
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
	va_end(vargs);

	return r;
}
    d878:	b005      	add	sp, #20
    d87a:	f85d eb04 	ldr.w	lr, [sp], #4
    d87e:	b004      	add	sp, #16
    d880:	4770      	bx	lr
    d882:	bf00      	nop
    d884:	0001b901 	.word	0x0001b901

0000d888 <remoteproc_mgr_boot>:
	 * this case do the remainder of actions to properly configure and
	 * boot the Network MCU.
	 */

	/* Release the Network MCU, 'Release force off signal' */
	NRF_RESET->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Release;
    d888:	2000      	movs	r0, #0
    d88a:	4b02      	ldr	r3, [pc, #8]	; (d894 <remoteproc_mgr_boot+0xc>)
    d88c:	f8c3 0614 	str.w	r0, [r3, #1556]	; 0x614

	LOG_DBG("Network MCU released.");
#endif /* !CONFIG_TRUSTED_EXECUTION_SECURE */

	return 0;
}
    d890:	4770      	bx	lr
    d892:	bf00      	nop
    d894:	40005000 	.word	0x40005000

0000d898 <bt_hex>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    d898:	4b0e      	ldr	r3, [pc, #56]	; (d8d4 <bt_hex+0x3c>)
    d89a:	2940      	cmp	r1, #64	; 0x40
    d89c:	bf28      	it	cs
    d89e:	2140      	movcs	r1, #64	; 0x40
{
    d8a0:	b570      	push	{r4, r5, r6, lr}
    d8a2:	461d      	mov	r5, r3

	for (i = 0; i < len; i++) {
		str[i * 2] = hex[b[i] >> 4];
    d8a4:	4c0c      	ldr	r4, [pc, #48]	; (d8d8 <bt_hex+0x40>)
    d8a6:	1846      	adds	r6, r0, r1
	for (i = 0; i < len; i++) {
    d8a8:	42b0      	cmp	r0, r6
    d8aa:	f103 0302 	add.w	r3, r3, #2
    d8ae:	d104      	bne.n	d8ba <bt_hex+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    d8b0:	2300      	movs	r3, #0
    d8b2:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    d8b6:	4807      	ldr	r0, [pc, #28]	; (d8d4 <bt_hex+0x3c>)
    d8b8:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2] = hex[b[i] >> 4];
    d8ba:	7802      	ldrb	r2, [r0, #0]
    d8bc:	0912      	lsrs	r2, r2, #4
    d8be:	5ca2      	ldrb	r2, [r4, r2]
    d8c0:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    d8c4:	f810 2b01 	ldrb.w	r2, [r0], #1
    d8c8:	f002 020f 	and.w	r2, r2, #15
    d8cc:	5ca2      	ldrb	r2, [r4, r2]
    d8ce:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
    d8d2:	e7e9      	b.n	d8a8 <bt_hex+0x10>
    d8d4:	20009fb0 	.word	0x20009fb0
    d8d8:	000215f1 	.word	0x000215f1

0000d8dc <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
    d8dc:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
    d8de:	7803      	ldrb	r3, [r0, #0]
    d8e0:	b08b      	sub	sp, #44	; 0x2c
    d8e2:	4604      	mov	r4, r0
    d8e4:	ad07      	add	r5, sp, #28
    d8e6:	2b03      	cmp	r3, #3
    d8e8:	d821      	bhi.n	d92e <bt_addr_le_str+0x52>
    d8ea:	e8df f003 	tbb	[pc, r3]
    d8ee:	1a02      	.short	0x1a02
    d8f0:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
    d8f2:	4912      	ldr	r1, [pc, #72]	; (d93c <bt_addr_le_str+0x60>)
		strcpy(type, "random");
    d8f4:	4628      	mov	r0, r5
    d8f6:	f00d ff8f 	bl	1b818 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    d8fa:	9505      	str	r5, [sp, #20]
    d8fc:	7863      	ldrb	r3, [r4, #1]
    d8fe:	211e      	movs	r1, #30
    d900:	9304      	str	r3, [sp, #16]
    d902:	78a3      	ldrb	r3, [r4, #2]
    d904:	4a0e      	ldr	r2, [pc, #56]	; (d940 <bt_addr_le_str+0x64>)
    d906:	9303      	str	r3, [sp, #12]
    d908:	78e3      	ldrb	r3, [r4, #3]
    d90a:	480e      	ldr	r0, [pc, #56]	; (d944 <bt_addr_le_str+0x68>)
    d90c:	9302      	str	r3, [sp, #8]
    d90e:	7923      	ldrb	r3, [r4, #4]
    d910:	9301      	str	r3, [sp, #4]
    d912:	7963      	ldrb	r3, [r4, #5]
    d914:	9300      	str	r3, [sp, #0]
    d916:	79a3      	ldrb	r3, [r4, #6]
    d918:	f00c fafe 	bl	19f18 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    d91c:	4809      	ldr	r0, [pc, #36]	; (d944 <bt_addr_le_str+0x68>)
    d91e:	b00b      	add	sp, #44	; 0x2c
    d920:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    d922:	4909      	ldr	r1, [pc, #36]	; (d948 <bt_addr_le_str+0x6c>)
    d924:	e7e6      	b.n	d8f4 <bt_addr_le_str+0x18>
		strcpy(type, "public-id");
    d926:	4909      	ldr	r1, [pc, #36]	; (d94c <bt_addr_le_str+0x70>)
    d928:	e7e4      	b.n	d8f4 <bt_addr_le_str+0x18>
		strcpy(type, "random-id");
    d92a:	4909      	ldr	r1, [pc, #36]	; (d950 <bt_addr_le_str+0x74>)
    d92c:	e7e2      	b.n	d8f4 <bt_addr_le_str+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    d92e:	210a      	movs	r1, #10
    d930:	4628      	mov	r0, r5
    d932:	4a08      	ldr	r2, [pc, #32]	; (d954 <bt_addr_le_str+0x78>)
    d934:	f00c faf0 	bl	19f18 <snprintk>
		break;
    d938:	e7df      	b.n	d8fa <bt_addr_le_str+0x1e>
    d93a:	bf00      	nop
    d93c:	00020a54 	.word	0x00020a54
    d940:	00020a76 	.word	0x00020a76
    d944:	20009f92 	.word	0x20009f92
    d948:	00020a5b 	.word	0x00020a5b
    d94c:	00020a62 	.word	0x00020a62
    d950:	00020a6c 	.word	0x00020a6c
    d954:	000232e1 	.word	0x000232e1

0000d958 <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(const struct device *d)
{
    d958:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(d);

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
    d95a:	2400      	movs	r4, #0

	k_work_queue_init(&bt_long_wq);
    d95c:	4d09      	ldr	r5, [pc, #36]	; (d984 <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
    d95e:	4b0a      	ldr	r3, [pc, #40]	; (d988 <long_wq_init+0x30>)
{
    d960:	b085      	sub	sp, #20
	k_work_queue_init(&bt_long_wq);
    d962:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
    d964:	9302      	str	r3, [sp, #8]
    d966:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
    d968:	f011 fb63 	bl	1f032 <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
    d96c:	ab02      	add	r3, sp, #8
    d96e:	4628      	mov	r0, r5
    d970:	9300      	str	r3, [sp, #0]
    d972:	f44f 62a3 	mov.w	r2, #1304	; 0x518
    d976:	230a      	movs	r3, #10
    d978:	4904      	ldr	r1, [pc, #16]	; (d98c <long_wq_init+0x34>)
    d97a:	f00b fadd 	bl	18f38 <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
    d97e:	4620      	mov	r0, r4
    d980:	b005      	add	sp, #20
    d982:	bd30      	pop	{r4, r5, pc}
    d984:	20009278 	.word	0x20009278
    d988:	00021609 	.word	0x00021609
    d98c:	2000b378 	.word	0x2000b378

0000d990 <bt_long_wq_schedule>:
{
    d990:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
    d992:	4801      	ldr	r0, [pc, #4]	; (d998 <bt_long_wq_schedule+0x8>)
    d994:	f00b bb46 	b.w	19024 <k_work_schedule_for_queue>
    d998:	20009278 	.word	0x20009278

0000d99c <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    d99c:	4603      	mov	r3, r0
    d99e:	b430      	push	{r4, r5}
	switch (src->type) {
    d9a0:	781a      	ldrb	r2, [r3, #0]
{
    d9a2:	4608      	mov	r0, r1
	switch (src->type) {
    d9a4:	2a01      	cmp	r2, #1
    d9a6:	d013      	beq.n	d9d0 <uuid_to_uuid128+0x34>
    d9a8:	2a02      	cmp	r2, #2
    d9aa:	d026      	beq.n	d9fa <uuid_to_uuid128+0x5e>
    d9ac:	b972      	cbnz	r2, d9cc <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    d9ae:	4a15      	ldr	r2, [pc, #84]	; (da04 <uuid_to_uuid128+0x68>)
    d9b0:	f102 0410 	add.w	r4, r2, #16
    d9b4:	f852 5b04 	ldr.w	r5, [r2], #4
    d9b8:	42a2      	cmp	r2, r4
    d9ba:	f841 5b04 	str.w	r5, [r1], #4
    d9be:	d1f9      	bne.n	d9b4 <uuid_to_uuid128+0x18>
    d9c0:	7812      	ldrb	r2, [r2, #0]
    d9c2:	700a      	strb	r2, [r1, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    d9c4:	885b      	ldrh	r3, [r3, #2]
	dst[0] = val;
    d9c6:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
    d9c8:	0a1b      	lsrs	r3, r3, #8
    d9ca:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    d9cc:	bc30      	pop	{r4, r5}
    d9ce:	4770      	bx	lr
		*dst = uuid128_base;
    d9d0:	4a0c      	ldr	r2, [pc, #48]	; (da04 <uuid_to_uuid128+0x68>)
    d9d2:	f102 0410 	add.w	r4, r2, #16
    d9d6:	f852 5b04 	ldr.w	r5, [r2], #4
    d9da:	42a2      	cmp	r2, r4
    d9dc:	f841 5b04 	str.w	r5, [r1], #4
    d9e0:	d1f9      	bne.n	d9d6 <uuid_to_uuid128+0x3a>
    d9e2:	7812      	ldrb	r2, [r2, #0]
    d9e4:	700a      	strb	r2, [r1, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    d9e6:	685b      	ldr	r3, [r3, #4]
    d9e8:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
    d9ec:	7343      	strb	r3, [r0, #13]
	sys_put_le16(val >> 16, &dst[2]);
    d9ee:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    d9f0:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
    d9f2:	0a1b      	lsrs	r3, r3, #8
    d9f4:	7382      	strb	r2, [r0, #14]
    d9f6:	7403      	strb	r3, [r0, #16]
}
    d9f8:	e7e8      	b.n	d9cc <uuid_to_uuid128+0x30>
		memcpy(dst, src, sizeof(*dst));
    d9fa:	2211      	movs	r2, #17
}
    d9fc:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
    d9fe:	4619      	mov	r1, r3
    da00:	f00d bf67 	b.w	1b8d2 <memcpy>
    da04:	00021612 	.word	0x00021612

0000da08 <bt_buf_get_rx>:
	     type == BT_BUF_ISO_IN) {
		return bt_iso_get_rx(timeout);
	}

#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	if (type == BT_BUF_EVT) {
    da08:	2801      	cmp	r0, #1
{
    da0a:	b538      	push	{r3, r4, r5, lr}
    da0c:	4605      	mov	r5, r0
	return net_buf_alloc_fixed(pool, timeout);
    da0e:	bf0c      	ite	eq
    da10:	4806      	ldreq	r0, [pc, #24]	; (da2c <bt_buf_get_rx+0x24>)
    da12:	4807      	ldrne	r0, [pc, #28]	; (da30 <bt_buf_get_rx+0x28>)
    da14:	f00f fff2 	bl	1d9fc <net_buf_alloc_fixed>
    da18:	4604      	mov	r4, r0
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    da1a:	b120      	cbz	r0, da26 <bt_buf_get_rx+0x1e>
	net_buf_simple_reserve(&buf->b, reserve);
    da1c:	2101      	movs	r1, #1
    da1e:	3008      	adds	r0, #8
    da20:	f010 f80b 	bl	1da3a <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    da24:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    da26:	4620      	mov	r0, r4
    da28:	bd38      	pop	{r3, r4, r5, pc}
    da2a:	bf00      	nop
    da2c:	20008808 	.word	0x20008808
    da30:	20008784 	.word	0x20008784

0000da34 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    da34:	b510      	push	{r4, lr}
    da36:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
    da38:	490a      	ldr	r1, [pc, #40]	; (da64 <bt_buf_get_cmd_complete+0x30>)
{
    da3a:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
    da3c:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
    da40:	b920      	cbnz	r0, da4c <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    da42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    da46:	2001      	movs	r0, #1
    da48:	f7ff bfde 	b.w	da08 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
    da4c:	f010 f850 	bl	1daf0 <net_buf_ref>
    da50:	2101      	movs	r1, #1
		buf->len = 0U;
    da52:	2300      	movs	r3, #0
		buf = net_buf_ref(bt_dev.sent_cmd);
    da54:	4604      	mov	r4, r0
    da56:	7501      	strb	r1, [r0, #20]
		buf->len = 0U;
    da58:	8183      	strh	r3, [r0, #12]
    da5a:	3008      	adds	r0, #8
    da5c:	f00f ffed 	bl	1da3a <net_buf_simple_reserve>
}
    da60:	4620      	mov	r0, r4
    da62:	bd10      	pop	{r4, pc}
    da64:	20008000 	.word	0x20008000

0000da68 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    da68:	b570      	push	{r4, r5, r6, lr}
    da6a:	4604      	mov	r4, r0
	switch (evt) {
    da6c:	2c0f      	cmp	r4, #15
{
    da6e:	460d      	mov	r5, r1
    da70:	4610      	mov	r0, r2
    da72:	4619      	mov	r1, r3
	switch (evt) {
    da74:	d805      	bhi.n	da82 <bt_buf_get_evt+0x1a>
    da76:	2c0d      	cmp	r4, #13
    da78:	d90d      	bls.n	da96 <bt_buf_get_evt+0x2e>
			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    da7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    da7e:	f7ff bfd9 	b.w	da34 <bt_buf_get_cmd_complete>
	switch (evt) {
    da82:	2c13      	cmp	r4, #19
    da84:	d107      	bne.n	da96 <bt_buf_get_evt+0x2e>
	return net_buf_alloc_fixed(pool, timeout);
    da86:	480c      	ldr	r0, [pc, #48]	; (dab8 <bt_buf_get_evt+0x50>)
    da88:	f00f ffb8 	bl	1d9fc <net_buf_alloc_fixed>
			if (buf) {
    da8c:	4604      	mov	r4, r0
    da8e:	b938      	cbnz	r0, daa0 <bt_buf_get_evt+0x38>
{
    da90:	2400      	movs	r4, #0
}
    da92:	4620      	mov	r0, r4
    da94:	bd70      	pop	{r4, r5, r6, pc}
    da96:	4602      	mov	r2, r0
    da98:	460b      	mov	r3, r1
		if (discardable) {
    da9a:	b145      	cbz	r5, daae <bt_buf_get_evt+0x46>
    da9c:	4807      	ldr	r0, [pc, #28]	; (dabc <bt_buf_get_evt+0x54>)
    da9e:	e7f3      	b.n	da88 <bt_buf_get_evt+0x20>
	net_buf_simple_reserve(&buf->b, reserve);
    daa0:	2101      	movs	r1, #1
    daa2:	3008      	adds	r0, #8
    daa4:	f00f ffc9 	bl	1da3a <net_buf_simple_reserve>
    daa8:	2301      	movs	r3, #1
    daaa:	7523      	strb	r3, [r4, #20]
}
    daac:	e7f1      	b.n	da92 <bt_buf_get_evt+0x2a>
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    daae:	2001      	movs	r0, #1
}
    dab0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    dab4:	f7ff bfa8 	b.w	da08 <bt_buf_get_rx>
    dab8:	2000888c 	.word	0x2000888c
    dabc:	200087dc 	.word	0x200087dc

0000dac0 <ver_str>:
{
    dac0:	b570      	push	{r4, r5, r6, lr}
    dac2:	4606      	mov	r6, r0
    dac4:	b08e      	sub	sp, #56	; 0x38
	const char * const str[] = {
    dac6:	4d0a      	ldr	r5, [pc, #40]	; (daf0 <ver_str+0x30>)
    dac8:	ac01      	add	r4, sp, #4
    daca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    dacc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    dace:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    dad0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    dad2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    dad4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    dad6:	682b      	ldr	r3, [r5, #0]
	if (ver < ARRAY_SIZE(str)) {
    dad8:	2e0c      	cmp	r6, #12
	const char * const str[] = {
    dada:	6023      	str	r3, [r4, #0]
		return str[ver];
    dadc:	bf9d      	ittte	ls
    dade:	ab0e      	addls	r3, sp, #56	; 0x38
    dae0:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
    dae4:	f856 0c34 	ldrls.w	r0, [r6, #-52]
	return "unknown";
    dae8:	4802      	ldrhi	r0, [pc, #8]	; (daf4 <ver_str+0x34>)
}
    daea:	b00e      	add	sp, #56	; 0x38
    daec:	bd70      	pop	{r4, r5, r6, pc}
    daee:	bf00      	nop
    daf0:	0001fd98 	.word	0x0001fd98
    daf4:	0002162a 	.word	0x0002162a

0000daf8 <hci_disconn_complete_prio>:
{
    daf8:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    dafa:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    dafc:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
    db00:	781b      	ldrb	r3, [r3, #0]
    db02:	b963      	cbnz	r3, db1e <hci_disconn_complete_prio+0x26>
	conn = bt_conn_lookup_handle(handle);
    db04:	4620      	mov	r0, r4
    db06:	f003 f857 	bl	10bb8 <bt_conn_lookup_handle>
	if (!conn) {
    db0a:	4605      	mov	r5, r0
    db0c:	b940      	cbnz	r0, db20 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
    db0e:	4b08      	ldr	r3, [pc, #32]	; (db30 <hci_disconn_complete_prio+0x38>)
    db10:	881a      	ldrh	r2, [r3, #0]
    db12:	b922      	cbnz	r2, db1e <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
    db14:	ea6f 5004 	mvn.w	r0, r4, lsl #20
    db18:	ea6f 5010 	mvn.w	r0, r0, lsr #20
    db1c:	8018      	strh	r0, [r3, #0]
}
    db1e:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    db20:	2101      	movs	r1, #1
    db22:	f003 f851 	bl	10bc8 <bt_conn_set_state>
	bt_conn_unref(conn);
    db26:	4628      	mov	r0, r5
}
    db28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    db2c:	f00e bad7 	b.w	1c0de <bt_conn_unref>
    db30:	20009f6e 	.word	0x20009f6e

0000db34 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    db34:	b510      	push	{r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    db36:	4c08      	ldr	r4, [pc, #32]	; (db58 <find_pending_connect.part.0+0x24>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    db38:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    db3a:	2205      	movs	r2, #5
    db3c:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    db40:	f003 fa92 	bl	11068 <bt_conn_lookup_state_le>
		if (!conn) {
    db44:	b938      	cbnz	r0, db56 <find_pending_connect.part.0+0x22>
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    db46:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    db4a:	2204      	movs	r2, #4
}
    db4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    db50:	4902      	ldr	r1, [pc, #8]	; (db5c <find_pending_connect.part.0+0x28>)
    db52:	f003 ba89 	b.w	11068 <bt_conn_lookup_state_le>
}
    db56:	bd10      	pop	{r4, pc}
    db58:	20008000 	.word	0x20008000
    db5c:	000215d7 	.word	0x000215d7

0000db60 <hci_data_buf_overflow>:
{
    db60:	b580      	push	{r7, lr}
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    db62:	6883      	ldr	r3, [r0, #8]
{
    db64:	af00      	add	r7, sp, #0
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    db66:	b088      	sub	sp, #32
    db68:	466a      	mov	r2, sp
    db6a:	781b      	ldrb	r3, [r3, #0]
    db6c:	4907      	ldr	r1, [pc, #28]	; (db8c <hci_data_buf_overflow+0x2c>)
    db6e:	4808      	ldr	r0, [pc, #32]	; (db90 <hci_data_buf_overflow+0x30>)
    db70:	6151      	str	r1, [r2, #20]
    db72:	4908      	ldr	r1, [pc, #32]	; (db94 <hci_data_buf_overflow+0x34>)
    db74:	e9c2 1306 	strd	r1, r3, [r2, #24]
    db78:	2304      	movs	r3, #4
    db7a:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    db7e:	f842 3f10 	str.w	r3, [r2, #16]!
    db82:	f00d ff75 	bl	1ba70 <z_log_msg_static_create.constprop.0>
}
    db86:	46bd      	mov	sp, r7
    db88:	bd80      	pop	{r7, pc}
    db8a:	bf00      	nop
    db8c:	00021632 	.word	0x00021632
    db90:	0001fc74 	.word	0x0001fc74
    db94:	000220b8 	.word	0x000220b8

0000db98 <le_conn_param_neg_reply.part.0>:
static void le_conn_param_neg_reply(uint16_t handle, uint8_t reason)
    db98:	b580      	push	{r7, lr}
    db9a:	af00      	add	r7, sp, #0
		BT_ERR("Unable to allocate buffer");
    db9c:	b088      	sub	sp, #32
    db9e:	466a      	mov	r2, sp
    dba0:	4b06      	ldr	r3, [pc, #24]	; (dbbc <le_conn_param_neg_reply.part.0+0x24>)
    dba2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    dba6:	6153      	str	r3, [r2, #20]
    dba8:	4b05      	ldr	r3, [pc, #20]	; (dbc0 <le_conn_param_neg_reply.part.0+0x28>)
    dbaa:	4806      	ldr	r0, [pc, #24]	; (dbc4 <le_conn_param_neg_reply.part.0+0x2c>)
    dbac:	6193      	str	r3, [r2, #24]
    dbae:	2303      	movs	r3, #3
    dbb0:	f842 3f10 	str.w	r3, [r2, #16]!
    dbb4:	f00d ff5c 	bl	1ba70 <z_log_msg_static_create.constprop.0>
}
    dbb8:	46bd      	mov	sp, r7
    dbba:	bd80      	pop	{r7, pc}
    dbbc:	0002165e 	.word	0x0002165e
    dbc0:	00021f80 	.word	0x00021f80
    dbc4:	0001fc74 	.word	0x0001fc74

0000dbc8 <le_conn_update_complete>:
{
    dbc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    dbca:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    dbcc:	6885      	ldr	r5, [r0, #8]
{
    dbce:	af00      	add	r7, sp, #0
	handle = sys_le16_to_cpu(evt->handle);
    dbd0:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    dbd4:	4630      	mov	r0, r6
    dbd6:	f002 ffef 	bl	10bb8 <bt_conn_lookup_handle>
	if (!conn) {
    dbda:	4604      	mov	r4, r0
    dbdc:	b998      	cbnz	r0, dc06 <le_conn_update_complete+0x3e>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    dbde:	466c      	mov	r4, sp
    dbe0:	b088      	sub	sp, #32
    dbe2:	466a      	mov	r2, sp
    dbe4:	4b1d      	ldr	r3, [pc, #116]	; (dc5c <le_conn_update_complete+0x94>)
    dbe6:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    dbea:	6153      	str	r3, [r2, #20]
    dbec:	4b1c      	ldr	r3, [pc, #112]	; (dc60 <le_conn_update_complete+0x98>)
    dbee:	481d      	ldr	r0, [pc, #116]	; (dc64 <le_conn_update_complete+0x9c>)
    dbf0:	e9c2 3606 	strd	r3, r6, [r2, #24]
    dbf4:	2304      	movs	r3, #4
    dbf6:	f842 3f10 	str.w	r3, [r2, #16]!
    dbfa:	f00d ff39 	bl	1ba70 <z_log_msg_static_create.constprop.0>
    dbfe:	46a5      	mov	sp, r4
}
    dc00:	370c      	adds	r7, #12
    dc02:	46bd      	mov	sp, r7
    dc04:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!evt->status) {
    dc06:	782b      	ldrb	r3, [r5, #0]
    dc08:	b98b      	cbnz	r3, dc2e <le_conn_update_complete+0x66>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    dc0a:	f8b5 3003 	ldrh.w	r3, [r5, #3]
    dc0e:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    dc12:	f8b5 3005 	ldrh.w	r3, [r5, #5]
    dc16:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    dc1a:	f8b5 3007 	ldrh.w	r3, [r5, #7]
    dc1e:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
    dc22:	f003 f8e9 	bl	10df8 <notify_le_param_updated>
	bt_conn_unref(conn);
    dc26:	4620      	mov	r0, r4
    dc28:	f00e fa59 	bl	1c0de <bt_conn_unref>
    dc2c:	e7e8      	b.n	dc00 <le_conn_update_complete+0x38>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    dc2e:	2b1a      	cmp	r3, #26
    dc30:	d1f9      	bne.n	dc26 <le_conn_update_complete+0x5e>
    dc32:	78c3      	ldrb	r3, [r0, #3]
    dc34:	2b01      	cmp	r3, #1
    dc36:	d1f6      	bne.n	dc26 <le_conn_update_complete+0x5e>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    dc38:	f44f 7100 	mov.w	r1, #512	; 0x200
    dc3c:	3004      	adds	r0, #4
    dc3e:	f00d ff0c 	bl	1ba5a <atomic_or>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
    dc42:	0583      	lsls	r3, r0, #22
    dc44:	d4ef      	bmi.n	dc26 <le_conn_update_complete+0x5e>
		param.interval_min = conn->le.interval_min;
    dc46:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
		bt_l2cap_update_conn_param(conn, &param);
    dc4a:	4639      	mov	r1, r7
		param.interval_min = conn->le.interval_min;
    dc4c:	603b      	str	r3, [r7, #0]
		param.latency = conn->le.pending_latency;
    dc4e:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
		bt_l2cap_update_conn_param(conn, &param);
    dc52:	4620      	mov	r0, r4
		param.latency = conn->le.pending_latency;
    dc54:	607b      	str	r3, [r7, #4]
		bt_l2cap_update_conn_param(conn, &param);
    dc56:	f003 fced 	bl	11634 <bt_l2cap_update_conn_param>
    dc5a:	e7e4      	b.n	dc26 <le_conn_update_complete+0x5e>
    dc5c:	0002167c 	.word	0x0002167c
    dc60:	00021f50 	.word	0x00021f50
    dc64:	0001fc74 	.word	0x0001fc74

0000dc68 <rx_queue_put>:
{
    dc68:	b598      	push	{r3, r4, r7, lr}
    dc6a:	4601      	mov	r1, r0
    dc6c:	af00      	add	r7, sp, #0
	net_buf_slist_put(&bt_dev.rx_queue, buf);
    dc6e:	480e      	ldr	r0, [pc, #56]	; (dca8 <rx_queue_put+0x40>)
    dc70:	f00f fee7 	bl	1da42 <net_buf_slist_put>
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
    dc74:	490d      	ldr	r1, [pc, #52]	; (dcac <rx_queue_put+0x44>)
    dc76:	480e      	ldr	r0, [pc, #56]	; (dcb0 <rx_queue_put+0x48>)
    dc78:	f011 f9ca 	bl	1f010 <k_work_submit_to_queue>
	if (err < 0) {
    dc7c:	2800      	cmp	r0, #0
    dc7e:	da10      	bge.n	dca2 <rx_queue_put+0x3a>
		BT_ERR("Could not submit rx_work: %d", err);
    dc80:	466c      	mov	r4, sp
    dc82:	b088      	sub	sp, #32
    dc84:	466a      	mov	r2, sp
    dc86:	4b0b      	ldr	r3, [pc, #44]	; (dcb4 <rx_queue_put+0x4c>)
    dc88:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    dc8c:	6153      	str	r3, [r2, #20]
    dc8e:	4b0a      	ldr	r3, [pc, #40]	; (dcb8 <rx_queue_put+0x50>)
    dc90:	e9c2 3006 	strd	r3, r0, [r2, #24]
    dc94:	2304      	movs	r3, #4
    dc96:	4809      	ldr	r0, [pc, #36]	; (dcbc <rx_queue_put+0x54>)
    dc98:	f842 3f10 	str.w	r3, [r2, #16]!
    dc9c:	f00d fee8 	bl	1ba70 <z_log_msg_static_create.constprop.0>
    dca0:	46a5      	mov	sp, r4
}
    dca2:	46bd      	mov	sp, r7
    dca4:	bd98      	pop	{r3, r4, r7, pc}
    dca6:	bf00      	nop
    dca8:	2000813c 	.word	0x2000813c
    dcac:	200083cc 	.word	0x200083cc
    dcb0:	200093a8 	.word	0x200093a8
    dcb4:	000216a4 	.word	0x000216a4
    dcb8:	00022075 	.word	0x00022075
    dcbc:	0001fc74 	.word	0x0001fc74

0000dcc0 <handle_event.part.0>:
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
    dcc0:	460b      	mov	r3, r1
    dcc2:	b5b0      	push	{r4, r5, r7, lr}
		BT_WARN("Unhandled event 0x%02x len %u: %s", event, buf->len,
    dcc4:	898d      	ldrh	r5, [r1, #12]
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
    dcc6:	af00      	add	r7, sp, #0
    dcc8:	4604      	mov	r4, r0
		BT_WARN("Unhandled event 0x%02x len %u: %s", event, buf->len,
    dcca:	4629      	mov	r1, r5
    dccc:	6898      	ldr	r0, [r3, #8]
    dcce:	f7ff fde3 	bl	d898 <bt_hex>
    dcd2:	b08c      	sub	sp, #48	; 0x30
    dcd4:	466a      	mov	r2, sp
    dcd6:	4b0a      	ldr	r3, [pc, #40]	; (dd00 <handle_event.part.0+0x40>)
    dcd8:	e9c2 5008 	strd	r5, r0, [r2, #32]
    dcdc:	6153      	str	r3, [r2, #20]
    dcde:	4b09      	ldr	r3, [pc, #36]	; (dd04 <handle_event.part.0+0x44>)
    dce0:	f44f 5152 	mov.w	r1, #13440	; 0x3480
    dce4:	e9c2 3406 	strd	r3, r4, [r2, #24]
    dce8:	f240 5303 	movw	r3, #1283	; 0x503
    dcec:	8513      	strh	r3, [r2, #40]	; 0x28
    dcee:	4b06      	ldr	r3, [pc, #24]	; (dd08 <handle_event.part.0+0x48>)
    dcf0:	4806      	ldr	r0, [pc, #24]	; (dd0c <handle_event.part.0+0x4c>)
    dcf2:	f842 3f10 	str.w	r3, [r2, #16]!
    dcf6:	f00d febb 	bl	1ba70 <z_log_msg_static_create.constprop.0>
}
    dcfa:	46bd      	mov	sp, r7
    dcfc:	bdb0      	pop	{r4, r5, r7, pc}
    dcfe:	bf00      	nop
    dd00:	000216c5 	.word	0x000216c5
    dd04:	0002209e 	.word	0x0002209e
    dd08:	01000006 	.word	0x01000006
    dd0c:	0001fc74 	.word	0x0001fc74

0000dd10 <hci_hardware_error>:
{
    dd10:	b580      	push	{r7, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    dd12:	2101      	movs	r1, #1
    dd14:	af00      	add	r7, sp, #0
    dd16:	3008      	adds	r0, #8
    dd18:	f00f ff40 	bl	1db9c <net_buf_simple_pull_mem>
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    dd1c:	b088      	sub	sp, #32
    dd1e:	466a      	mov	r2, sp
    dd20:	7803      	ldrb	r3, [r0, #0]
    dd22:	4907      	ldr	r1, [pc, #28]	; (dd40 <hci_hardware_error+0x30>)
    dd24:	4807      	ldr	r0, [pc, #28]	; (dd44 <hci_hardware_error+0x34>)
    dd26:	6151      	str	r1, [r2, #20]
    dd28:	4907      	ldr	r1, [pc, #28]	; (dd48 <hci_hardware_error+0x38>)
    dd2a:	e9c2 1306 	strd	r1, r3, [r2, #24]
    dd2e:	2304      	movs	r3, #4
    dd30:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    dd34:	f842 3f10 	str.w	r3, [r2, #16]!
    dd38:	f00d fe9a 	bl	1ba70 <z_log_msg_static_create.constprop.0>
}
    dd3c:	46bd      	mov	sp, r7
    dd3e:	bd80      	pop	{r7, pc}
    dd40:	000216eb 	.word	0x000216eb
    dd44:	0001fc74 	.word	0x0001fc74
    dd48:	0002204a 	.word	0x0002204a

0000dd4c <le_data_len_change>:
{
    dd4c:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    dd4e:	6883      	ldr	r3, [r0, #8]
{
    dd50:	af00      	add	r7, sp, #0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    dd52:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    dd54:	4620      	mov	r0, r4
    dd56:	f002 ff2f 	bl	10bb8 <bt_conn_lookup_handle>
	if (!conn) {
    dd5a:	b990      	cbnz	r0, dd82 <le_data_len_change+0x36>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    dd5c:	466d      	mov	r5, sp
    dd5e:	b088      	sub	sp, #32
    dd60:	466a      	mov	r2, sp
    dd62:	4b09      	ldr	r3, [pc, #36]	; (dd88 <le_data_len_change+0x3c>)
    dd64:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    dd68:	6153      	str	r3, [r2, #20]
    dd6a:	4b08      	ldr	r3, [pc, #32]	; (dd8c <le_data_len_change+0x40>)
    dd6c:	4808      	ldr	r0, [pc, #32]	; (dd90 <le_data_len_change+0x44>)
    dd6e:	e9c2 3406 	strd	r3, r4, [r2, #24]
    dd72:	2304      	movs	r3, #4
    dd74:	f842 3f10 	str.w	r3, [r2, #16]!
    dd78:	f00d fe7a 	bl	1ba70 <z_log_msg_static_create.constprop.0>
    dd7c:	46ad      	mov	sp, r5
}
    dd7e:	46bd      	mov	sp, r7
    dd80:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
    dd82:	f00e f9ac 	bl	1c0de <bt_conn_unref>
    dd86:	e7fa      	b.n	dd7e <le_data_len_change+0x32>
    dd88:	0002167c 	.word	0x0002167c
    dd8c:	00021faa 	.word	0x00021faa
    dd90:	0001fc74 	.word	0x0001fc74

0000dd94 <le_phy_update_complete>:
{
    dd94:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    dd96:	6883      	ldr	r3, [r0, #8]
{
    dd98:	af00      	add	r7, sp, #0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    dd9a:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    dd9e:	4620      	mov	r0, r4
    dda0:	f002 ff0a 	bl	10bb8 <bt_conn_lookup_handle>
	if (!conn) {
    dda4:	b990      	cbnz	r0, ddcc <le_phy_update_complete+0x38>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    dda6:	466d      	mov	r5, sp
    dda8:	b088      	sub	sp, #32
    ddaa:	466a      	mov	r2, sp
    ddac:	4b09      	ldr	r3, [pc, #36]	; (ddd4 <le_phy_update_complete+0x40>)
    ddae:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    ddb2:	6153      	str	r3, [r2, #20]
    ddb4:	4b08      	ldr	r3, [pc, #32]	; (ddd8 <le_phy_update_complete+0x44>)
    ddb6:	4809      	ldr	r0, [pc, #36]	; (dddc <le_phy_update_complete+0x48>)
    ddb8:	e9c2 3406 	strd	r3, r4, [r2, #24]
    ddbc:	2304      	movs	r3, #4
    ddbe:	f842 3f10 	str.w	r3, [r2, #16]!
    ddc2:	f00d fe55 	bl	1ba70 <z_log_msg_static_create.constprop.0>
    ddc6:	46ad      	mov	sp, r5
}
    ddc8:	46bd      	mov	sp, r7
    ddca:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
    ddcc:	f00e f987 	bl	1c0de <bt_conn_unref>
    ddd0:	e7fa      	b.n	ddc8 <le_phy_update_complete+0x34>
    ddd2:	bf00      	nop
    ddd4:	0002167c 	.word	0x0002167c
    ddd8:	00021fbd 	.word	0x00021fbd
    dddc:	0001fc74 	.word	0x0001fc74

0000dde0 <hci_disconn_complete>:
{
    dde0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    dde4:	6885      	ldr	r5, [r0, #8]
{
    dde6:	af00      	add	r7, sp, #0
	if (evt->status) {
    dde8:	782e      	ldrb	r6, [r5, #0]
    ddea:	b9be      	cbnz	r6, de1c <hci_disconn_complete+0x3c>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    ddec:	f8b5 8001 	ldrh.w	r8, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    ddf0:	4640      	mov	r0, r8
    ddf2:	f002 fee1 	bl	10bb8 <bt_conn_lookup_handle>
	if (!conn) {
    ddf6:	4604      	mov	r4, r0
    ddf8:	b998      	cbnz	r0, de22 <hci_disconn_complete+0x42>
		BT_ERR("Unable to look up conn with handle %u", handle);
    ddfa:	466c      	mov	r4, sp
    ddfc:	b088      	sub	sp, #32
    ddfe:	466a      	mov	r2, sp
    de00:	4b0c      	ldr	r3, [pc, #48]	; (de34 <hci_disconn_complete+0x54>)
    de02:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    de06:	6153      	str	r3, [r2, #20]
    de08:	4b0b      	ldr	r3, [pc, #44]	; (de38 <hci_disconn_complete+0x58>)
    de0a:	480c      	ldr	r0, [pc, #48]	; (de3c <hci_disconn_complete+0x5c>)
    de0c:	e9c2 3806 	strd	r3, r8, [r2, #24]
    de10:	2304      	movs	r3, #4
    de12:	f842 3f10 	str.w	r3, [r2, #16]!
    de16:	f00d fe2b 	bl	1ba70 <z_log_msg_static_create.constprop.0>
    de1a:	46a5      	mov	sp, r4
}
    de1c:	46bd      	mov	sp, r7
    de1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn->err = evt->reason;
    de22:	78eb      	ldrb	r3, [r5, #3]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    de24:	4631      	mov	r1, r6
	conn->err = evt->reason;
    de26:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    de28:	f002 fece 	bl	10bc8 <bt_conn_set_state>
		bt_conn_unref(conn);
    de2c:	4620      	mov	r0, r4
	bt_conn_unref(conn);
    de2e:	f00e f956 	bl	1c0de <bt_conn_unref>
    de32:	e7f3      	b.n	de1c <hci_disconn_complete+0x3c>
    de34:	00021711 	.word	0x00021711
    de38:	00022001 	.word	0x00022001
    de3c:	0001fc74 	.word	0x0001fc74

0000de40 <handle_event>:
{
    de40:	b5b0      	push	{r4, r5, r7, lr}
    de42:	4604      	mov	r4, r0
    de44:	af00      	add	r7, sp, #0
    de46:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
	for (i = 0; i < num_handlers; i++) {
    de4a:	4293      	cmp	r3, r2
    de4c:	d103      	bne.n	de56 <handle_event+0x16>
	if (err == -EOPNOTSUPP) {
    de4e:	4620      	mov	r0, r4
    de50:	f7ff ff36 	bl	dcc0 <handle_event.part.0>
}
    de54:	e01a      	b.n	de8c <handle_event+0x4c>
		if (handler->event != event) {
    de56:	4610      	mov	r0, r2
    de58:	f810 5b08 	ldrb.w	r5, [r0], #8
    de5c:	42a5      	cmp	r5, r4
    de5e:	d11b      	bne.n	de98 <handle_event+0x58>
		if (buf->len < handler->min_len) {
    de60:	898b      	ldrh	r3, [r1, #12]
    de62:	7850      	ldrb	r0, [r2, #1]
    de64:	4298      	cmp	r0, r3
    de66:	d913      	bls.n	de90 <handle_event+0x50>
			BT_ERR("Too small (%u bytes) event 0x%02x",
    de68:	466d      	mov	r5, sp
    de6a:	b08a      	sub	sp, #40	; 0x28
    de6c:	466a      	mov	r2, sp
    de6e:	490b      	ldr	r1, [pc, #44]	; (de9c <handle_event+0x5c>)
    de70:	6214      	str	r4, [r2, #32]
    de72:	6151      	str	r1, [r2, #20]
    de74:	490a      	ldr	r1, [pc, #40]	; (dea0 <handle_event+0x60>)
    de76:	480b      	ldr	r0, [pc, #44]	; (dea4 <handle_event+0x64>)
    de78:	e9c2 1306 	strd	r1, r3, [r2, #24]
    de7c:	2305      	movs	r3, #5
    de7e:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    de82:	f842 3f10 	str.w	r3, [r2, #16]!
    de86:	f00d fdf3 	bl	1ba70 <z_log_msg_static_create.constprop.0>
    de8a:	46ad      	mov	sp, r5
}
    de8c:	46bd      	mov	sp, r7
    de8e:	bdb0      	pop	{r4, r5, r7, pc}
		handler->handler(buf);
    de90:	4608      	mov	r0, r1
    de92:	6853      	ldr	r3, [r2, #4]
    de94:	4798      	blx	r3
	if (err == -EOPNOTSUPP) {
    de96:	e7f9      	b.n	de8c <handle_event+0x4c>
    de98:	4602      	mov	r2, r0
    de9a:	e7d6      	b.n	de4a <handle_event+0xa>
    de9c:	0002173b 	.word	0x0002173b
    dea0:	0002208a 	.word	0x0002208a
    dea4:	0001fc74 	.word	0x0001fc74

0000dea8 <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
    dea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	struct net_buf *buf;

	BT_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
    deaa:	4859      	ldr	r0, [pc, #356]	; (e010 <rx_work_handler+0x168>)
{
    deac:	af00      	add	r7, sp, #0
	buf = net_buf_slist_get(&bt_dev.rx_queue);
    deae:	f00f fde6 	bl	1da7e <net_buf_slist_get>
	if (!buf) {
    deb2:	4604      	mov	r4, r0
    deb4:	2800      	cmp	r0, #0
    deb6:	d070      	beq.n	df9a <rx_work_handler+0xf2>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    deb8:	7d03      	ldrb	r3, [r0, #20]
	}

	BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf),
	       buf->len);

	switch (bt_buf_get_type(buf)) {
    deba:	2b01      	cmp	r3, #1
    debc:	d06f      	beq.n	df9e <rx_work_handler+0xf6>
    debe:	2b03      	cmp	r3, #3
    dec0:	f040 809f 	bne.w	e002 <rx_work_handler+0x15a>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    dec4:	8983      	ldrh	r3, [r0, #12]
    dec6:	2b03      	cmp	r3, #3
    dec8:	d80c      	bhi.n	dee4 <rx_work_handler+0x3c>
    deca:	f240 13ed 	movw	r3, #493	; 0x1ed
    dece:	4a51      	ldr	r2, [pc, #324]	; (e014 <rx_work_handler+0x16c>)
    ded0:	4951      	ldr	r1, [pc, #324]	; (e018 <rx_work_handler+0x170>)
    ded2:	4852      	ldr	r0, [pc, #328]	; (e01c <rx_work_handler+0x174>)
    ded4:	f00c fb70 	bl	1a5b8 <assert_print>
    ded8:	4040      	eors	r0, r0
    deda:	f380 8811 	msr	BASEPRI, r0
    dede:	f04f 0003 	mov.w	r0, #3
    dee2:	df02      	svc	2
    dee4:	2104      	movs	r1, #4
    dee6:	f104 0008 	add.w	r0, r4, #8
    deea:	f00f fe57 	bl	1db9c <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    deee:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
    def0:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    def2:	8806      	ldrh	r6, [r0, #0]
	if (buf->len != len) {
    def4:	89a1      	ldrh	r1, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
    def6:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    defa:	428b      	cmp	r3, r1
	acl(buf)->handle = bt_acl_handle(handle);
    defc:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    defe:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
    df00:	d012      	beq.n	df28 <rx_work_handler+0x80>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    df02:	466d      	mov	r5, sp
    df04:	b08a      	sub	sp, #40	; 0x28
    df06:	466a      	mov	r2, sp
    df08:	4845      	ldr	r0, [pc, #276]	; (e020 <rx_work_handler+0x178>)
    df0a:	6213      	str	r3, [r2, #32]
    df0c:	6150      	str	r0, [r2, #20]
    df0e:	4845      	ldr	r0, [pc, #276]	; (e024 <rx_work_handler+0x17c>)
    df10:	2305      	movs	r3, #5
    df12:	e9c2 0106 	strd	r0, r1, [r2, #24]
    df16:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    df1a:	f842 3f10 	str.w	r3, [r2, #16]!
#endif /* CONFIG_BT_ISO */
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    df1e:	4842      	ldr	r0, [pc, #264]	; (e028 <rx_work_handler+0x180>)
    df20:	f00d fda6 	bl	1ba70 <z_log_msg_static_create.constprop.0>
    df24:	46ad      	mov	sp, r5
    df26:	e068      	b.n	dffa <rx_work_handler+0x152>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    df28:	f002 fe46 	bl	10bb8 <bt_conn_lookup_handle>
	if (!conn) {
    df2c:	4605      	mov	r5, r0
    df2e:	b970      	cbnz	r0, df4e <rx_work_handler+0xa6>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    df30:	466d      	mov	r5, sp
    df32:	b088      	sub	sp, #32
    df34:	8ae3      	ldrh	r3, [r4, #22]
    df36:	466a      	mov	r2, sp
    df38:	493c      	ldr	r1, [pc, #240]	; (e02c <rx_work_handler+0x184>)
    df3a:	6151      	str	r1, [r2, #20]
    df3c:	4939      	ldr	r1, [pc, #228]	; (e024 <rx_work_handler+0x17c>)
	switch (bt_buf_get_type(buf)) {
    df3e:	e9c2 1306 	strd	r1, r3, [r2, #24]
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    df42:	2304      	movs	r3, #4
    df44:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    df48:	f842 3f10 	str.w	r3, [r2, #16]!
    df4c:	e7e7      	b.n	df1e <rx_work_handler+0x76>
	acl(buf)->index = bt_conn_index(conn);
    df4e:	f002 ff31 	bl	10db4 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    df52:	4621      	mov	r1, r4
	acl(buf)->index = bt_conn_index(conn);
    df54:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    df56:	0b32      	lsrs	r2, r6, #12
    df58:	4628      	mov	r0, r5
    df5a:	f002 fcc7 	bl	108ec <bt_conn_recv>
	bt_conn_unref(conn);
    df5e:	4628      	mov	r0, r5
    df60:	f00e f8bd 	bl	1c0de <bt_conn_unref>
	return list->head;
    df64:	4b32      	ldr	r3, [pc, #200]	; (e030 <rx_work_handler+0x188>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
    df66:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
    df6a:	b1b3      	cbz	r3, df9a <rx_work_handler+0xf2>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
    df6c:	4931      	ldr	r1, [pc, #196]	; (e034 <rx_work_handler+0x18c>)
    df6e:	4832      	ldr	r0, [pc, #200]	; (e038 <rx_work_handler+0x190>)
    df70:	f011 f84e 	bl	1f010 <k_work_submit_to_queue>
#endif
		if (err < 0) {
    df74:	2800      	cmp	r0, #0
    df76:	da10      	bge.n	df9a <rx_work_handler+0xf2>
			BT_ERR("Could not submit rx_work: %d", err);
    df78:	466c      	mov	r4, sp
    df7a:	b088      	sub	sp, #32
    df7c:	466a      	mov	r2, sp
    df7e:	4b2f      	ldr	r3, [pc, #188]	; (e03c <rx_work_handler+0x194>)
    df80:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    df84:	6153      	str	r3, [r2, #20]
    df86:	4b2e      	ldr	r3, [pc, #184]	; (e040 <rx_work_handler+0x198>)
    df88:	e9c2 3006 	strd	r3, r0, [r2, #24]
    df8c:	2304      	movs	r3, #4
    df8e:	4826      	ldr	r0, [pc, #152]	; (e028 <rx_work_handler+0x180>)
    df90:	f842 3f10 	str.w	r3, [r2, #16]!
    df94:	f00d fd6c 	bl	1ba70 <z_log_msg_static_create.constprop.0>
    df98:	46a5      	mov	sp, r4
		}
	}
}
    df9a:	46bd      	mov	sp, r7
    df9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    df9e:	8983      	ldrh	r3, [r0, #12]
    dfa0:	2b01      	cmp	r3, #1
    dfa2:	d80c      	bhi.n	dfbe <rx_work_handler+0x116>
    dfa4:	f44f 6316 	mov.w	r3, #2400	; 0x960
    dfa8:	4a1a      	ldr	r2, [pc, #104]	; (e014 <rx_work_handler+0x16c>)
    dfaa:	491b      	ldr	r1, [pc, #108]	; (e018 <rx_work_handler+0x170>)
    dfac:	481b      	ldr	r0, [pc, #108]	; (e01c <rx_work_handler+0x174>)
    dfae:	f00c fb03 	bl	1a5b8 <assert_print>
    dfb2:	4040      	eors	r0, r0
    dfb4:	f380 8811 	msr	BASEPRI, r0
    dfb8:	f04f 0003 	mov.w	r0, #3
    dfbc:	df02      	svc	2
    dfbe:	2102      	movs	r1, #2
    dfc0:	f104 0008 	add.w	r0, r4, #8
    dfc4:	f00f fdea 	bl	1db9c <net_buf_simple_pull_mem>
    dfc8:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    dfca:	7800      	ldrb	r0, [r0, #0]
    dfcc:	f00d fd17 	bl	1b9fe <bt_hci_evt_get_flags>
    dfd0:	0783      	lsls	r3, r0, #30
    dfd2:	d40c      	bmi.n	dfee <rx_work_handler+0x146>
    dfd4:	f640 1364 	movw	r3, #2404	; 0x964
    dfd8:	4a0e      	ldr	r2, [pc, #56]	; (e014 <rx_work_handler+0x16c>)
    dfda:	491a      	ldr	r1, [pc, #104]	; (e044 <rx_work_handler+0x19c>)
    dfdc:	480f      	ldr	r0, [pc, #60]	; (e01c <rx_work_handler+0x174>)
    dfde:	f00c faeb 	bl	1a5b8 <assert_print>
    dfe2:	4040      	eors	r0, r0
    dfe4:	f380 8811 	msr	BASEPRI, r0
    dfe8:	f04f 0003 	mov.w	r0, #3
    dfec:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    dfee:	2306      	movs	r3, #6
    dff0:	4621      	mov	r1, r4
    dff2:	4a15      	ldr	r2, [pc, #84]	; (e048 <rx_work_handler+0x1a0>)
    dff4:	7828      	ldrb	r0, [r5, #0]
    dff6:	f7ff ff23 	bl	de40 <handle_event>
		net_buf_unref(buf);
    dffa:	4620      	mov	r0, r4
    dffc:	f007 fa96 	bl	1552c <net_buf_unref>
		break;
    e000:	e7b0      	b.n	df64 <rx_work_handler+0xbc>
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    e002:	466d      	mov	r5, sp
    e004:	b088      	sub	sp, #32
    e006:	466a      	mov	r2, sp
    e008:	4910      	ldr	r1, [pc, #64]	; (e04c <rx_work_handler+0x1a4>)
    e00a:	6151      	str	r1, [r2, #20]
    e00c:	490c      	ldr	r1, [pc, #48]	; (e040 <rx_work_handler+0x198>)
    e00e:	e796      	b.n	df3e <rx_work_handler+0x96>
    e010:	2000813c 	.word	0x2000813c
    e014:	00021761 	.word	0x00021761
    e018:	00021795 	.word	0x00021795
    e01c:	000217ae 	.word	0x000217ae
    e020:	000217cb 	.word	0x000217cb
    e024:	0002205d 	.word	0x0002205d
    e028:	0001fc74 	.word	0x0001fc74
    e02c:	000217f3 	.word	0x000217f3
    e030:	20008000 	.word	0x20008000
    e034:	200083cc 	.word	0x200083cc
    e038:	200093a8 	.word	0x200093a8
    e03c:	000216a4 	.word	0x000216a4
    e040:	00022065 	.word	0x00022065
    e044:	00021819 	.word	0x00021819
    e048:	00020248 	.word	0x00020248
    e04c:	00021847 	.word	0x00021847

0000e050 <hci_le_meta_event>:
{
    e050:	b510      	push	{r4, lr}
    e052:	2101      	movs	r1, #1
    e054:	4604      	mov	r4, r0
    e056:	3008      	adds	r0, #8
    e058:	f00f fda0 	bl	1db9c <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    e05c:	4621      	mov	r1, r4
}
    e05e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    e062:	230a      	movs	r3, #10
    e064:	4a01      	ldr	r2, [pc, #4]	; (e06c <hci_le_meta_event+0x1c>)
    e066:	7800      	ldrb	r0, [r0, #0]
    e068:	f7ff beea 	b.w	de40 <handle_event>
    e06c:	00020278 	.word	0x00020278

0000e070 <le_remote_feat_complete>:
{
    e070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    e072:	6885      	ldr	r5, [r0, #8]
{
    e074:	af00      	add	r7, sp, #0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    e076:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    e07a:	4630      	mov	r0, r6
    e07c:	f002 fd9c 	bl	10bb8 <bt_conn_lookup_handle>
	if (!conn) {
    e080:	4604      	mov	r4, r0
    e082:	b990      	cbnz	r0, e0aa <le_remote_feat_complete+0x3a>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    e084:	466c      	mov	r4, sp
    e086:	b088      	sub	sp, #32
    e088:	466a      	mov	r2, sp
    e08a:	4b10      	ldr	r3, [pc, #64]	; (e0cc <le_remote_feat_complete+0x5c>)
    e08c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    e090:	6153      	str	r3, [r2, #20]
    e092:	4b0f      	ldr	r3, [pc, #60]	; (e0d0 <le_remote_feat_complete+0x60>)
    e094:	480f      	ldr	r0, [pc, #60]	; (e0d4 <le_remote_feat_complete+0x64>)
    e096:	e9c2 3606 	strd	r3, r6, [r2, #24]
    e09a:	2304      	movs	r3, #4
    e09c:	f842 3f10 	str.w	r3, [r2, #16]!
    e0a0:	f00d fce6 	bl	1ba70 <z_log_msg_static_create.constprop.0>
    e0a4:	46a5      	mov	sp, r4
}
    e0a6:	46bd      	mov	sp, r7
    e0a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!evt->status) {
    e0aa:	782b      	ldrb	r3, [r5, #0]
    e0ac:	b923      	cbnz	r3, e0b8 <le_remote_feat_complete+0x48>
		memcpy(conn->le.features, evt->features,
    e0ae:	2208      	movs	r2, #8
    e0b0:	1ce9      	adds	r1, r5, #3
    e0b2:	30ac      	adds	r0, #172	; 0xac
    e0b4:	f00d fc0d 	bl	1b8d2 <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    e0b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    e0bc:	1d20      	adds	r0, r4, #4
    e0be:	f00d fccc 	bl	1ba5a <atomic_or>
	bt_conn_unref(conn);
    e0c2:	4620      	mov	r0, r4
    e0c4:	f00e f80b 	bl	1c0de <bt_conn_unref>
    e0c8:	e7ed      	b.n	e0a6 <le_remote_feat_complete+0x36>
    e0ca:	bf00      	nop
    e0cc:	0002167c 	.word	0x0002167c
    e0d0:	00021f68 	.word	0x00021f68
    e0d4:	0001fc74 	.word	0x0001fc74

0000e0d8 <hci_cmd_done>:
{
    e0d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e0dc:	4606      	mov	r6, r0
    e0de:	af00      	add	r7, sp, #0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    e0e0:	7990      	ldrb	r0, [r2, #6]
{
    e0e2:	4688      	mov	r8, r1
    e0e4:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    e0e6:	f007 f95f 	bl	153a8 <net_buf_pool_get>
    e0ea:	4d43      	ldr	r5, [pc, #268]	; (e1f8 <hci_cmd_done+0x120>)
    e0ec:	4285      	cmp	r5, r0
    e0ee:	d01a      	beq.n	e126 <hci_cmd_done+0x4e>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    e0f0:	79a4      	ldrb	r4, [r4, #6]
    e0f2:	46e8      	mov	r8, sp
    e0f4:	4620      	mov	r0, r4
    e0f6:	f007 f957 	bl	153a8 <net_buf_pool_get>
    e0fa:	b08c      	sub	sp, #48	; 0x30
    e0fc:	466a      	mov	r2, sp
    e0fe:	4b3f      	ldr	r3, [pc, #252]	; (e1fc <hci_cmd_done+0x124>)
    e100:	e9c2 4008 	strd	r4, r0, [r2, #32]
    e104:	6153      	str	r3, [r2, #20]
    e106:	4b3e      	ldr	r3, [pc, #248]	; (e200 <hci_cmd_done+0x128>)
    e108:	6295      	str	r5, [r2, #40]	; 0x28
    e10a:	e9c2 3606 	strd	r3, r6, [r2, #24]
    e10e:	2307      	movs	r3, #7
    e110:	f44f 5162 	mov.w	r1, #14464	; 0x3880
    e114:	483b      	ldr	r0, [pc, #236]	; (e204 <hci_cmd_done+0x12c>)
    e116:	f842 3f10 	str.w	r3, [r2, #16]!
    e11a:	f00d fca9 	bl	1ba70 <z_log_msg_static_create.constprop.0>
    e11e:	46c5      	mov	sp, r8
}
    e120:	46bd      	mov	sp, r7
    e122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
    e126:	4620      	mov	r0, r4
    e128:	f007 f946 	bl	153b8 <net_buf_id>
    e12c:	f04f 090c 	mov.w	r9, #12
    e130:	4d35      	ldr	r5, [pc, #212]	; (e208 <hci_cmd_done+0x130>)
    e132:	fb09 5000 	mla	r0, r9, r0, r5
    e136:	8843      	ldrh	r3, [r0, #2]
    e138:	42b3      	cmp	r3, r6
    e13a:	d018      	beq.n	e16e <hci_cmd_done+0x96>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    e13c:	4620      	mov	r0, r4
    e13e:	f007 f93b 	bl	153b8 <net_buf_id>
    e142:	fb09 5000 	mla	r0, r9, r0, r5
    e146:	466c      	mov	r4, sp
    e148:	b08a      	sub	sp, #40	; 0x28
    e14a:	466a      	mov	r2, sp
    e14c:	8843      	ldrh	r3, [r0, #2]
    e14e:	6213      	str	r3, [r2, #32]
    e150:	2305      	movs	r3, #5
    e152:	492e      	ldr	r1, [pc, #184]	; (e20c <hci_cmd_done+0x134>)
    e154:	482b      	ldr	r0, [pc, #172]	; (e204 <hci_cmd_done+0x12c>)
    e156:	6151      	str	r1, [r2, #20]
    e158:	4929      	ldr	r1, [pc, #164]	; (e200 <hci_cmd_done+0x128>)
    e15a:	e9c2 1606 	strd	r1, r6, [r2, #24]
    e15e:	f44f 5122 	mov.w	r1, #10368	; 0x2880
    e162:	f842 3f10 	str.w	r3, [r2, #16]!
    e166:	f00d fc83 	bl	1ba70 <z_log_msg_static_create.constprop.0>
    e16a:	46a5      	mov	sp, r4
		return;
    e16c:	e7d8      	b.n	e120 <hci_cmd_done+0x48>
	if (bt_dev.sent_cmd) {
    e16e:	4e28      	ldr	r6, [pc, #160]	; (e210 <hci_cmd_done+0x138>)
    e170:	f8d6 0138 	ldr.w	r0, [r6, #312]	; 0x138
    e174:	b120      	cbz	r0, e180 <hci_cmd_done+0xa8>
		net_buf_unref(bt_dev.sent_cmd);
    e176:	f007 f9d9 	bl	1552c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    e17a:	2300      	movs	r3, #0
    e17c:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
	if (cmd(buf)->state && !status) {
    e180:	4620      	mov	r0, r4
    e182:	f007 f919 	bl	153b8 <net_buf_id>
    e186:	260c      	movs	r6, #12
    e188:	fb06 5000 	mla	r0, r6, r0, r5
    e18c:	6843      	ldr	r3, [r0, #4]
    e18e:	b1ab      	cbz	r3, e1bc <hci_cmd_done+0xe4>
    e190:	f1b8 0f00 	cmp.w	r8, #0
    e194:	d112      	bne.n	e1bc <hci_cmd_done+0xe4>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    e196:	4620      	mov	r0, r4
    e198:	f007 f90e 	bl	153b8 <net_buf_id>
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    e19c:	2101      	movs	r1, #1
    e19e:	fb06 5000 	mla	r0, r6, r0, r5
    e1a2:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    e1a4:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
    e1a8:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
    e1aa:	f003 061f 	and.w	r6, r3, #31
    e1ae:	40b1      	lsls	r1, r6
	if (val) {
    e1b0:	095b      	lsrs	r3, r3, #5
    e1b2:	b1da      	cbz	r2, e1ec <hci_cmd_done+0x114>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    e1b4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    e1b8:	f00d fc4f 	bl	1ba5a <atomic_or>
	if (cmd(buf)->sync) {
    e1bc:	4620      	mov	r0, r4
    e1be:	f007 f8fb 	bl	153b8 <net_buf_id>
    e1c2:	260c      	movs	r6, #12
    e1c4:	fb06 5000 	mla	r0, r6, r0, r5
    e1c8:	6883      	ldr	r3, [r0, #8]
    e1ca:	2b00      	cmp	r3, #0
    e1cc:	d0a8      	beq.n	e120 <hci_cmd_done+0x48>
		cmd(buf)->status = status;
    e1ce:	4620      	mov	r0, r4
    e1d0:	f007 f8f2 	bl	153b8 <net_buf_id>
    e1d4:	4370      	muls	r0, r6
    e1d6:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    e1da:	4620      	mov	r0, r4
    e1dc:	f007 f8ec 	bl	153b8 <net_buf_id>
    e1e0:	fb06 5500 	mla	r5, r6, r0, r5
    e1e4:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
    e1e6:	f00a fd25 	bl	18c34 <z_impl_k_sem_give>
}
    e1ea:	e799      	b.n	e120 <hci_cmd_done+0x48>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    e1ec:	43c9      	mvns	r1, r1
    e1ee:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    e1f2:	f00d fc40 	bl	1ba76 <atomic_and.isra.0>
    e1f6:	e7e1      	b.n	e1bc <hci_cmd_done+0xe4>
    e1f8:	20008860 	.word	0x20008860
    e1fc:	0002185f 	.word	0x0002185f
    e200:	000220ab 	.word	0x000220ab
    e204:	0001fc74 	.word	0x0001fc74
    e208:	20009b30 	.word	0x20009b30
    e20c:	00021898 	.word	0x00021898
    e210:	20008000 	.word	0x20008000

0000e214 <hci_cmd_status>:
{
    e214:	b538      	push	{r3, r4, r5, lr}
    e216:	2104      	movs	r1, #4
    e218:	4604      	mov	r4, r0
    e21a:	3008      	adds	r0, #8
    e21c:	f00f fcbe 	bl	1db9c <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    e220:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    e222:	7801      	ldrb	r1, [r0, #0]
    e224:	4622      	mov	r2, r4
    e226:	8840      	ldrh	r0, [r0, #2]
    e228:	f7ff ff56 	bl	e0d8 <hci_cmd_done>
	if (ncmd) {
    e22c:	b125      	cbz	r5, e238 <hci_cmd_status+0x24>
}
    e22e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_sem_give(sem);
    e232:	4802      	ldr	r0, [pc, #8]	; (e23c <hci_cmd_status+0x28>)
    e234:	f00a bcfe 	b.w	18c34 <z_impl_k_sem_give>
    e238:	bd38      	pop	{r3, r4, r5, pc}
    e23a:	bf00      	nop
    e23c:	20008120 	.word	0x20008120

0000e240 <hci_cmd_complete>:
{
    e240:	b538      	push	{r3, r4, r5, lr}
    e242:	2103      	movs	r1, #3
    e244:	4604      	mov	r4, r0
    e246:	3008      	adds	r0, #8
    e248:	f00f fca8 	bl	1db9c <net_buf_simple_pull_mem>
	status = buf->data[0];
    e24c:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    e24e:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    e250:	4622      	mov	r2, r4
    e252:	7819      	ldrb	r1, [r3, #0]
    e254:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    e258:	f7ff ff3e 	bl	e0d8 <hci_cmd_done>
	if (ncmd) {
    e25c:	b125      	cbz	r5, e268 <hci_cmd_complete+0x28>
}
    e25e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    e262:	4802      	ldr	r0, [pc, #8]	; (e26c <hci_cmd_complete+0x2c>)
    e264:	f00a bce6 	b.w	18c34 <z_impl_k_sem_give>
    e268:	bd38      	pop	{r3, r4, r5, pc}
    e26a:	bf00      	nop
    e26c:	20008120 	.word	0x20008120

0000e270 <hci_num_completed_packets>:
{
    e270:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (i = 0; i < evt->num_handles; i++) {
    e274:	2500      	movs	r5, #0
			tx->pending_no_cb = 0U;
    e276:	46a9      	mov	r9, r5
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    e278:	f8d0 8008 	ldr.w	r8, [r0, #8]
				BT_ERR("packets count mismatch");
    e27c:	f8df a108 	ldr.w	sl, [pc, #264]	; e388 <hci_num_completed_packets+0x118>
{
    e280:	af00      	add	r7, sp, #0
	for (i = 0; i < evt->num_handles; i++) {
    e282:	f898 3000 	ldrb.w	r3, [r8]
    e286:	429d      	cmp	r5, r3
    e288:	db02      	blt.n	e290 <hci_num_completed_packets+0x20>
}
    e28a:	46bd      	mov	sp, r7
    e28c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    e290:	eb08 0385 	add.w	r3, r8, r5, lsl #2
    e294:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    e298:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
    e29c:	4658      	mov	r0, fp
    e29e:	f002 fc8b 	bl	10bb8 <bt_conn_lookup_handle>
		if (!conn) {
    e2a2:	4604      	mov	r4, r0
    e2a4:	b1d8      	cbz	r0, e2de <hci_num_completed_packets+0x6e>
			k_work_submit(&conn->tx_complete_work);
    e2a6:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
    e2aa:	2e00      	cmp	r6, #0
    e2ac:	d040      	beq.n	e330 <hci_num_completed_packets+0xc0>
	__asm__ volatile(
    e2ae:	f04f 0320 	mov.w	r3, #32
    e2b2:	f3ef 8211 	mrs	r2, BASEPRI
    e2b6:	f383 8812 	msr	BASEPRI_MAX, r3
    e2ba:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    e2be:	69e3      	ldr	r3, [r4, #28]
    e2c0:	b303      	cbz	r3, e304 <hci_num_completed_packets+0x94>
				conn->pending_no_cb--;
    e2c2:	3b01      	subs	r3, #1
    e2c4:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    e2c6:	f382 8811 	msr	BASEPRI, r2
    e2ca:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    e2ce:	4620      	mov	r0, r4
    e2d0:	f002 fada 	bl	10888 <bt_conn_get_pkts>
    e2d4:	3e01      	subs	r6, #1
    e2d6:	f00a fcad 	bl	18c34 <z_impl_k_sem_give>
    e2da:	b2b6      	uxth	r6, r6
    e2dc:	e7e5      	b.n	e2aa <hci_num_completed_packets+0x3a>
			BT_ERR("No connection for handle %u", handle);
    e2de:	466c      	mov	r4, sp
    e2e0:	b088      	sub	sp, #32
    e2e2:	466a      	mov	r2, sp
    e2e4:	4b29      	ldr	r3, [pc, #164]	; (e38c <hci_num_completed_packets+0x11c>)
    e2e6:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    e2ea:	6153      	str	r3, [r2, #20]
    e2ec:	4b28      	ldr	r3, [pc, #160]	; (e390 <hci_num_completed_packets+0x120>)
    e2ee:	4829      	ldr	r0, [pc, #164]	; (e394 <hci_num_completed_packets+0x124>)
    e2f0:	e9c2 3b06 	strd	r3, fp, [r2, #24]
    e2f4:	2304      	movs	r3, #4
    e2f6:	f842 3f10 	str.w	r3, [r2, #16]!
    e2fa:	f00d fbb9 	bl	1ba70 <z_log_msg_static_create.constprop.0>
    e2fe:	46a5      	mov	sp, r4
	for (i = 0; i < evt->num_handles; i++) {
    e300:	3501      	adds	r5, #1
    e302:	e7be      	b.n	e282 <hci_num_completed_packets+0x12>
    e304:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    e306:	b9bb      	cbnz	r3, e338 <hci_num_completed_packets+0xc8>
    e308:	f382 8811 	msr	BASEPRI, r2
    e30c:	f3bf 8f6f 	isb	sy
				BT_ERR("packets count mismatch");
    e310:	466e      	mov	r6, sp
    e312:	b088      	sub	sp, #32
    e314:	466a      	mov	r2, sp
    e316:	4b1e      	ldr	r3, [pc, #120]	; (e390 <hci_num_completed_packets+0x120>)
    e318:	f8c2 a014 	str.w	sl, [r2, #20]
    e31c:	6193      	str	r3, [r2, #24]
    e31e:	2303      	movs	r3, #3
    e320:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    e324:	481b      	ldr	r0, [pc, #108]	; (e394 <hci_num_completed_packets+0x124>)
    e326:	f842 3f10 	str.w	r3, [r2, #16]!
    e32a:	f00d fba1 	bl	1ba70 <z_log_msg_static_create.constprop.0>
    e32e:	46b5      	mov	sp, r6
		bt_conn_unref(conn);
    e330:	4620      	mov	r0, r4
    e332:	f00d fed4 	bl	1c0de <bt_conn_unref>
    e336:	e7e3      	b.n	e300 <hci_num_completed_packets+0x90>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    e338:	69a1      	ldr	r1, [r4, #24]
	return node->next;
    e33a:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    e33c:	428b      	cmp	r3, r1
	list->head = node;
    e33e:	6160      	str	r0, [r4, #20]
	list->tail = node;
    e340:	bf08      	it	eq
    e342:	61a0      	streq	r0, [r4, #24]
    e344:	f382 8811 	msr	BASEPRI, r2
    e348:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    e34c:	f04f 0220 	mov.w	r2, #32
    e350:	f3ef 8111 	mrs	r1, BASEPRI
    e354:	f382 8812 	msr	BASEPRI_MAX, r2
    e358:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    e35c:	68da      	ldr	r2, [r3, #12]
    e35e:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
    e360:	f8c3 900c 	str.w	r9, [r3, #12]
	parent->next = child;
    e364:	f8c3 9000 	str.w	r9, [r3]
	return list->tail;
    e368:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
    e36a:	b94a      	cbnz	r2, e380 <hci_num_completed_packets+0x110>
	list->head = node;
    e36c:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    e370:	f381 8811 	msr	BASEPRI, r1
    e374:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
    e378:	4658      	mov	r0, fp
    e37a:	f00a fdd7 	bl	18f2c <k_work_submit>
    e37e:	e7a6      	b.n	e2ce <hci_num_completed_packets+0x5e>
	parent->next = child;
    e380:	6013      	str	r3, [r2, #0]
	list->tail = node;
    e382:	6263      	str	r3, [r4, #36]	; 0x24
}
    e384:	e7f4      	b.n	e370 <hci_num_completed_packets+0x100>
    e386:	bf00      	nop
    e388:	000218ef 	.word	0x000218ef
    e38c:	000218cf 	.word	0x000218cf
    e390:	000220ce 	.word	0x000220ce
    e394:	0001fc74 	.word	0x0001fc74

0000e398 <bt_hci_cmd_state_set_init>:
{
    e398:	b510      	push	{r4, lr}
	state->bit = bit;
    e39a:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
    e39e:	f89d 3008 	ldrb.w	r3, [sp, #8]
{
    e3a2:	460c      	mov	r4, r1
	state->val = val;
    e3a4:	720b      	strb	r3, [r1, #8]
	cmd(buf)->state = state;
    e3a6:	f007 f807 	bl	153b8 <net_buf_id>
    e3aa:	220c      	movs	r2, #12
    e3ac:	4b02      	ldr	r3, [pc, #8]	; (e3b8 <bt_hci_cmd_state_set_init+0x20>)
    e3ae:	fb02 3300 	mla	r3, r2, r0, r3
    e3b2:	605c      	str	r4, [r3, #4]
}
    e3b4:	bd10      	pop	{r4, pc}
    e3b6:	bf00      	nop
    e3b8:	20009b30 	.word	0x20009b30

0000e3bc <bt_hci_cmd_create>:
{
    e3bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
    e3c0:	f04f 32ff 	mov.w	r2, #4294967295
    e3c4:	f04f 33ff 	mov.w	r3, #4294967295
    e3c8:	4606      	mov	r6, r0
    e3ca:	4817      	ldr	r0, [pc, #92]	; (e428 <bt_hci_cmd_create+0x6c>)
    e3cc:	460f      	mov	r7, r1
    e3ce:	f00f fb15 	bl	1d9fc <net_buf_alloc_fixed>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    e3d2:	f04f 0800 	mov.w	r8, #0
    e3d6:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
    e3d8:	f100 0a08 	add.w	sl, r0, #8
    e3dc:	2101      	movs	r1, #1
    e3de:	4650      	mov	r0, sl
    e3e0:	f00f fb2b 	bl	1da3a <net_buf_simple_reserve>
	cmd(buf)->opcode = opcode;
    e3e4:	4620      	mov	r0, r4
    e3e6:	f884 8014 	strb.w	r8, [r4, #20]
    e3ea:	f006 ffe5 	bl	153b8 <net_buf_id>
    e3ee:	f04f 090c 	mov.w	r9, #12
    e3f2:	4d0e      	ldr	r5, [pc, #56]	; (e42c <bt_hci_cmd_create+0x70>)
    e3f4:	fb09 5000 	mla	r0, r9, r0, r5
    e3f8:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    e3fa:	4620      	mov	r0, r4
    e3fc:	f006 ffdc 	bl	153b8 <net_buf_id>
    e400:	fb09 5000 	mla	r0, r9, r0, r5
    e404:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
    e408:	4620      	mov	r0, r4
    e40a:	f006 ffd5 	bl	153b8 <net_buf_id>
    e40e:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
    e412:	2103      	movs	r1, #3
    e414:	4650      	mov	r0, sl
    e416:	f8c5 8004 	str.w	r8, [r5, #4]
    e41a:	f00f fb8f 	bl	1db3c <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
    e41e:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
    e420:	7087      	strb	r7, [r0, #2]
}
    e422:	4620      	mov	r0, r4
    e424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e428:	20008860 	.word	0x20008860
    e42c:	20009b30 	.word	0x20009b30

0000e430 <bt_hci_cmd_send_sync>:
{
    e430:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e434:	b087      	sub	sp, #28
    e436:	4680      	mov	r8, r0
    e438:	4615      	mov	r5, r2
	if (!buf) {
    e43a:	460c      	mov	r4, r1
{
    e43c:	af00      	add	r7, sp, #0
	if (!buf) {
    e43e:	b921      	cbnz	r1, e44a <bt_hci_cmd_send_sync+0x1a>
		buf = bt_hci_cmd_create(opcode, 0);
    e440:	f7ff ffbc 	bl	e3bc <bt_hci_cmd_create>
		if (!buf) {
    e444:	4604      	mov	r4, r0
    e446:	2800      	cmp	r0, #0
    e448:	d05c      	beq.n	e504 <bt_hci_cmd_send_sync+0xd4>
	return z_impl_k_sem_init(sem, initial_count, limit);
    e44a:	2201      	movs	r2, #1
    e44c:	2100      	movs	r1, #0
    e44e:	4638      	mov	r0, r7
    e450:	f010 fd2f 	bl	1eeb2 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    e454:	4620      	mov	r0, r4
    e456:	f006 ffaf 	bl	153b8 <net_buf_id>
    e45a:	230c      	movs	r3, #12
    e45c:	f8df 90ac 	ldr.w	r9, [pc, #172]	; e50c <bt_hci_cmd_send_sync+0xdc>
    e460:	fb03 9000 	mla	r0, r3, r0, r9
    e464:	6087      	str	r7, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
    e466:	4620      	mov	r0, r4
    e468:	f00f fb42 	bl	1daf0 <net_buf_ref>
    e46c:	4601      	mov	r1, r0
    e46e:	4828      	ldr	r0, [pc, #160]	; (e510 <bt_hci_cmd_send_sync+0xe0>)
    e470:	f00f fb31 	bl	1dad6 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    e474:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    e478:	2300      	movs	r3, #0
    e47a:	4638      	mov	r0, r7
    e47c:	f00a fc00 	bl	18c80 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    e480:	4606      	mov	r6, r0
    e482:	b180      	cbz	r0, e4a6 <bt_hci_cmd_send_sync+0x76>
    e484:	f240 1349 	movw	r3, #329	; 0x149
    e488:	4a22      	ldr	r2, [pc, #136]	; (e514 <bt_hci_cmd_send_sync+0xe4>)
    e48a:	4923      	ldr	r1, [pc, #140]	; (e518 <bt_hci_cmd_send_sync+0xe8>)
    e48c:	4823      	ldr	r0, [pc, #140]	; (e51c <bt_hci_cmd_send_sync+0xec>)
    e48e:	f00c f893 	bl	1a5b8 <assert_print>
    e492:	4631      	mov	r1, r6
    e494:	4822      	ldr	r0, [pc, #136]	; (e520 <bt_hci_cmd_send_sync+0xf0>)
    e496:	f00c f88f 	bl	1a5b8 <assert_print>
    e49a:	4040      	eors	r0, r0
    e49c:	f380 8811 	msr	BASEPRI, r0
    e4a0:	f04f 0003 	mov.w	r0, #3
    e4a4:	df02      	svc	2
	status = cmd(buf)->status;
    e4a6:	4620      	mov	r0, r4
    e4a8:	f006 ff86 	bl	153b8 <net_buf_id>
    e4ac:	230c      	movs	r3, #12
    e4ae:	4358      	muls	r0, r3
    e4b0:	f819 6000 	ldrb.w	r6, [r9, r0]
	if (status) {
    e4b4:	b1f6      	cbz	r6, e4f4 <bt_hci_cmd_send_sync+0xc4>
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
    e4b6:	466d      	mov	r5, sp
    e4b8:	b08a      	sub	sp, #40	; 0x28
    e4ba:	466a      	mov	r2, sp
    e4bc:	4b19      	ldr	r3, [pc, #100]	; (e524 <bt_hci_cmd_send_sync+0xf4>)
    e4be:	6216      	str	r6, [r2, #32]
    e4c0:	6153      	str	r3, [r2, #20]
    e4c2:	4b19      	ldr	r3, [pc, #100]	; (e528 <bt_hci_cmd_send_sync+0xf8>)
    e4c4:	f44f 5122 	mov.w	r1, #10368	; 0x2880
    e4c8:	e9c2 3806 	strd	r3, r8, [r2, #24]
    e4cc:	2305      	movs	r3, #5
    e4ce:	4817      	ldr	r0, [pc, #92]	; (e52c <bt_hci_cmd_send_sync+0xfc>)
    e4d0:	f842 3f10 	str.w	r3, [r2, #16]!
    e4d4:	f00d facc 	bl	1ba70 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
    e4d8:	4620      	mov	r0, r4
    e4da:	46ad      	mov	sp, r5
    e4dc:	f007 f826 	bl	1552c <net_buf_unref>
			return -ECONNREFUSED;
    e4e0:	2e09      	cmp	r6, #9
    e4e2:	bf14      	ite	ne
    e4e4:	f06f 0004 	mvnne.w	r0, #4
    e4e8:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
    e4ec:	371c      	adds	r7, #28
    e4ee:	46bd      	mov	sp, r7
    e4f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (rsp) {
    e4f4:	b115      	cbz	r5, e4fc <bt_hci_cmd_send_sync+0xcc>
		*rsp = buf;
    e4f6:	602c      	str	r4, [r5, #0]
	return 0;
    e4f8:	2000      	movs	r0, #0
    e4fa:	e7f7      	b.n	e4ec <bt_hci_cmd_send_sync+0xbc>
		net_buf_unref(buf);
    e4fc:	4620      	mov	r0, r4
    e4fe:	f007 f815 	bl	1552c <net_buf_unref>
    e502:	e7f9      	b.n	e4f8 <bt_hci_cmd_send_sync+0xc8>
			return -ENOBUFS;
    e504:	f06f 0068 	mvn.w	r0, #104	; 0x68
    e508:	e7f0      	b.n	e4ec <bt_hci_cmd_send_sync+0xbc>
    e50a:	bf00      	nop
    e50c:	20009b30 	.word	0x20009b30
    e510:	20008144 	.word	0x20008144
    e514:	00021761 	.word	0x00021761
    e518:	0002190a 	.word	0x0002190a
    e51c:	000217ae 	.word	0x000217ae
    e520:	00021913 	.word	0x00021913
    e524:	00021933 	.word	0x00021933
    e528:	00022134 	.word	0x00022134
    e52c:	0001fc74 	.word	0x0001fc74

0000e530 <hci_le_read_max_data_len>:
{
    e530:	b5f0      	push	{r4, r5, r6, r7, lr}
    e532:	b083      	sub	sp, #12
    e534:	af00      	add	r7, sp, #0
    e536:	4606      	mov	r6, r0
    e538:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    e53a:	f242 002f 	movw	r0, #8239	; 0x202f
    e53e:	2100      	movs	r1, #0
    e540:	1d3a      	adds	r2, r7, #4
    e542:	f7ff ff75 	bl	e430 <bt_hci_cmd_send_sync>
	if (err) {
    e546:	4604      	mov	r4, r0
    e548:	b198      	cbz	r0, e572 <hci_le_read_max_data_len+0x42>
		BT_ERR("Failed to read DLE max data len");
    e54a:	466d      	mov	r5, sp
    e54c:	b088      	sub	sp, #32
    e54e:	466a      	mov	r2, sp
    e550:	4b0d      	ldr	r3, [pc, #52]	; (e588 <hci_le_read_max_data_len+0x58>)
    e552:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    e556:	6153      	str	r3, [r2, #20]
    e558:	4b0c      	ldr	r3, [pc, #48]	; (e58c <hci_le_read_max_data_len+0x5c>)
    e55a:	480d      	ldr	r0, [pc, #52]	; (e590 <hci_le_read_max_data_len+0x60>)
    e55c:	6193      	str	r3, [r2, #24]
    e55e:	2303      	movs	r3, #3
    e560:	f842 3f10 	str.w	r3, [r2, #16]!
    e564:	f00d fa84 	bl	1ba70 <z_log_msg_static_create.constprop.0>
    e568:	46ad      	mov	sp, r5
}
    e56a:	4620      	mov	r0, r4
    e56c:	370c      	adds	r7, #12
    e56e:	46bd      	mov	sp, r7
    e570:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = (void *)rsp->data;
    e572:	6878      	ldr	r0, [r7, #4]
    e574:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    e576:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    e57a:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
    e57c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
    e580:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
    e582:	f006 ffd3 	bl	1552c <net_buf_unref>
	return 0;
    e586:	e7f0      	b.n	e56a <hci_le_read_max_data_len+0x3a>
    e588:	00021953 	.word	0x00021953
    e58c:	00022187 	.word	0x00022187
    e590:	0001fc74 	.word	0x0001fc74

0000e594 <bt_hci_le_rand>:
{
    e594:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
    e596:	4b14      	ldr	r3, [pc, #80]	; (e5e8 <bt_hci_le_rand+0x54>)
{
    e598:	4605      	mov	r5, r0
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
    e59a:	f993 3093 	ldrsb.w	r3, [r3, #147]	; 0x93
{
    e59e:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
    e5a0:	2b00      	cmp	r3, #0
    e5a2:	da1d      	bge.n	e5e0 <bt_hci_le_rand+0x4c>
	while (len > 0) {
    e5a4:	b914      	cbnz	r4, e5ac <bt_hci_le_rand+0x18>
	return 0;
    e5a6:	4620      	mov	r0, r4
}
    e5a8:	b003      	add	sp, #12
    e5aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
    e5ac:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
    e5ae:	f04f 0100 	mov.w	r1, #0
    e5b2:	f242 0018 	movw	r0, #8216	; 0x2018
    e5b6:	aa01      	add	r2, sp, #4
		count = MIN(len, sizeof(rp->rand));
    e5b8:	4626      	mov	r6, r4
    e5ba:	bf28      	it	cs
    e5bc:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
    e5be:	f7ff ff37 	bl	e430 <bt_hci_cmd_send_sync>
		if (err) {
    e5c2:	2800      	cmp	r0, #0
    e5c4:	d1f0      	bne.n	e5a8 <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
    e5c6:	9f01      	ldr	r7, [sp, #4]
		memcpy(buffer, rp->rand, count);
    e5c8:	4632      	mov	r2, r6
    e5ca:	68b9      	ldr	r1, [r7, #8]
    e5cc:	4628      	mov	r0, r5
    e5ce:	3101      	adds	r1, #1
    e5d0:	f00d f97f 	bl	1b8d2 <memcpy>
		net_buf_unref(rsp);
    e5d4:	4638      	mov	r0, r7
    e5d6:	f006 ffa9 	bl	1552c <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
    e5da:	4435      	add	r5, r6
		len -= count;
    e5dc:	1ba4      	subs	r4, r4, r6
    e5de:	e7e1      	b.n	e5a4 <bt_hci_le_rand+0x10>
		return -ENOTSUP;
    e5e0:	f06f 0085 	mvn.w	r0, #133	; 0x85
    e5e4:	e7e0      	b.n	e5a8 <bt_hci_le_rand+0x14>
    e5e6:	bf00      	nop
    e5e8:	20008000 	.word	0x20008000

0000e5ec <bt_hci_le_enh_conn_complete>:
{
    e5ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e5f0:	b089      	sub	sp, #36	; 0x24
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    e5f2:	f8b0 9001 	ldrh.w	r9, [r0, #1]
{
    e5f6:	4605      	mov	r5, r0
	handle |= ~BT_ACL_HANDLE_MASK;
    e5f8:	ea6f 5309 	mvn.w	r3, r9, lsl #20
    e5fc:	ea6f 5313 	mvn.w	r3, r3, lsr #20
    e600:	2600      	movs	r6, #0
		if (disconnected_handles[i] == handle) {
    e602:	4ab2      	ldr	r2, [pc, #712]	; (e8cc <bt_hci_le_enh_conn_complete+0x2e0>)
    e604:	b29b      	uxth	r3, r3
    e606:	8811      	ldrh	r1, [r2, #0]
{
    e608:	af02      	add	r7, sp, #8
		if (disconnected_handles[i] == handle) {
    e60a:	4299      	cmp	r1, r3
			disconnected_handles[i] = 0;
    e60c:	bf04      	itt	eq
    e60e:	8016      	strheq	r6, [r2, #0]
			return true;
    e610:	2601      	moveq	r6, #1
	bt_id_pending_keys_update();
    e612:	f001 f8d9 	bl	f7c8 <bt_id_pending_keys_update>
	if (evt->status) {
    e616:	782c      	ldrb	r4, [r5, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    e618:	fa1f f889 	uxth.w	r8, r9
	if (evt->status) {
    e61c:	2c00      	cmp	r4, #0
    e61e:	d03b      	beq.n	e698 <bt_hci_le_enh_conn_complete+0xac>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    e620:	2c3c      	cmp	r4, #60	; 0x3c
    e622:	d127      	bne.n	e674 <bt_hci_le_enh_conn_complete+0x88>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    e624:	f001 fc0e 	bl	fe44 <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    e628:	f06f 0180 	mvn.w	r1, #128	; 0x80
    e62c:	3010      	adds	r0, #16
    e62e:	f00d fa22 	bl	1ba76 <atomic_and.isra.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
    e632:	2000      	movs	r0, #0
    e634:	f7ff fa7e 	bl	db34 <find_pending_connect.part.0>
		if (!conn) {
    e638:	4605      	mov	r5, r0
    e63a:	b998      	cbnz	r0, e664 <bt_hci_le_enh_conn_complete+0x78>
			BT_ERR("No pending peripheral connection");
    e63c:	466c      	mov	r4, sp
    e63e:	b088      	sub	sp, #32
    e640:	aa02      	add	r2, sp, #8
    e642:	4ba3      	ldr	r3, [pc, #652]	; (e8d0 <bt_hci_le_enh_conn_complete+0x2e4>)
    e644:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    e648:	6153      	str	r3, [r2, #20]
    e64a:	4ba2      	ldr	r3, [pc, #648]	; (e8d4 <bt_hci_le_enh_conn_complete+0x2e8>)
    e64c:	48a2      	ldr	r0, [pc, #648]	; (e8d8 <bt_hci_le_enh_conn_complete+0x2ec>)
    e64e:	6193      	str	r3, [r2, #24]
    e650:	2303      	movs	r3, #3
    e652:	f842 3f10 	str.w	r3, [r2, #16]!
    e656:	f00d fa0b 	bl	1ba70 <z_log_msg_static_create.constprop.0>
    e65a:	46a5      	mov	sp, r4
}
    e65c:	371c      	adds	r7, #28
    e65e:	46bd      	mov	sp, r7
    e660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
    e664:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    e666:	2100      	movs	r1, #0
    e668:	f002 faae 	bl	10bc8 <bt_conn_set_state>
		bt_conn_unref(conn);
    e66c:	4628      	mov	r0, r5
	bt_conn_unref(conn);
    e66e:	f00d fd36 	bl	1c0de <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    e672:	e7f3      	b.n	e65c <bt_hci_le_enh_conn_complete+0x70>
		BT_WARN("Unexpected status 0x%02x", evt->status);
    e674:	466d      	mov	r5, sp
    e676:	b088      	sub	sp, #32
    e678:	aa02      	add	r2, sp, #8
    e67a:	4b98      	ldr	r3, [pc, #608]	; (e8dc <bt_hci_le_enh_conn_complete+0x2f0>)
    e67c:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    e680:	6153      	str	r3, [r2, #20]
    e682:	4b97      	ldr	r3, [pc, #604]	; (e8e0 <bt_hci_le_enh_conn_complete+0x2f4>)
    e684:	4894      	ldr	r0, [pc, #592]	; (e8d8 <bt_hci_le_enh_conn_complete+0x2ec>)
    e686:	e9c2 3406 	strd	r3, r4, [r2, #24]
    e68a:	2304      	movs	r3, #4
    e68c:	f842 3f10 	str.w	r3, [r2, #16]!
    e690:	f00d f9ee 	bl	1ba70 <z_log_msg_static_create.constprop.0>
    e694:	46ad      	mov	sp, r5
		return;
    e696:	e7e1      	b.n	e65c <bt_hci_le_enh_conn_complete+0x70>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    e698:	792b      	ldrb	r3, [r5, #4]
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    e69a:	f105 0a04 	add.w	sl, r5, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    e69e:	3b02      	subs	r3, #2
    e6a0:	2b01      	cmp	r3, #1
    e6a2:	d82f      	bhi.n	e704 <bt_hci_le_enh_conn_complete+0x118>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    e6a4:	4651      	mov	r1, sl
    e6a6:	f107 0010 	add.w	r0, r7, #16
    e6aa:	f00d f9d3 	bl	1ba54 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    e6ae:	7c3b      	ldrb	r3, [r7, #16]
	memcpy(dst, src, sizeof(*dst));
    e6b0:	2206      	movs	r2, #6
    e6b2:	3b02      	subs	r3, #2
    e6b4:	f105 0111 	add.w	r1, r5, #17
    e6b8:	f107 0009 	add.w	r0, r7, #9
    e6bc:	743b      	strb	r3, [r7, #16]
    e6be:	f00d f908 	bl	1b8d2 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    e6c2:	2301      	movs	r3, #1
    e6c4:	723b      	strb	r3, [r7, #8]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
    e6c6:	78eb      	ldrb	r3, [r5, #3]
    e6c8:	2b01      	cmp	r3, #1
    e6ca:	d030      	beq.n	e72e <bt_hci_le_enh_conn_complete+0x142>
		BT_ERR("No pending conn for peer %s",
    e6cc:	4650      	mov	r0, sl
    e6ce:	f7ff f905 	bl	d8dc <bt_addr_le_str>
    e6d2:	466c      	mov	r4, sp
    e6d4:	b08a      	sub	sp, #40	; 0x28
    e6d6:	aa02      	add	r2, sp, #8
    e6d8:	4b82      	ldr	r3, [pc, #520]	; (e8e4 <bt_hci_le_enh_conn_complete+0x2f8>)
    e6da:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    e6de:	6153      	str	r3, [r2, #20]
    e6e0:	4b7f      	ldr	r3, [pc, #508]	; (e8e0 <bt_hci_le_enh_conn_complete+0x2f4>)
    e6e2:	e9c2 3006 	strd	r3, r0, [r2, #24]
    e6e6:	f240 3301 	movw	r3, #769	; 0x301
    e6ea:	8413      	strh	r3, [r2, #32]
    e6ec:	4b7e      	ldr	r3, [pc, #504]	; (e8e8 <bt_hci_le_enh_conn_complete+0x2fc>)
    e6ee:	487a      	ldr	r0, [pc, #488]	; (e8d8 <bt_hci_le_enh_conn_complete+0x2ec>)
    e6f0:	f842 3f10 	str.w	r3, [r2, #16]!
    e6f4:	f00d f9bc 	bl	1ba70 <z_log_msg_static_create.constprop.0>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
    e6f8:	211f      	movs	r1, #31
    e6fa:	46a5      	mov	sp, r4
    e6fc:	4640      	mov	r0, r8
    e6fe:	f00d f9d2 	bl	1baa6 <bt_hci_disconnect>
		return;
    e702:	e7ab      	b.n	e65c <bt_hci_le_enh_conn_complete+0x70>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
    e704:	78eb      	ldrb	r3, [r5, #3]
		bt_addr_le_copy(&id_addr,
    e706:	4651      	mov	r1, sl
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
    e708:	2b01      	cmp	r3, #1
    e70a:	bf04      	itt	eq
    e70c:	4b77      	ldreq	r3, [pc, #476]	; (e8ec <bt_hci_le_enh_conn_complete+0x300>)
    e70e:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
    e712:	4620      	mov	r0, r4
    e714:	f00d fb25 	bl	1bd62 <bt_lookup_id_addr>
    e718:	4601      	mov	r1, r0
    e71a:	f107 0010 	add.w	r0, r7, #16
    e71e:	f00d f999 	bl	1ba54 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    e722:	4651      	mov	r1, sl
    e724:	f107 0008 	add.w	r0, r7, #8
    e728:	f00d f994 	bl	1ba54 <bt_addr_le_copy>
    e72c:	e7cb      	b.n	e6c6 <bt_hci_le_enh_conn_complete+0xda>
    e72e:	f107 0010 	add.w	r0, r7, #16
    e732:	f7ff f9ff 	bl	db34 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    e736:	78eb      	ldrb	r3, [r5, #3]
    e738:	4604      	mov	r4, r0
    e73a:	2b01      	cmp	r3, #1
    e73c:	d10a      	bne.n	e754 <bt_hci_le_enh_conn_complete+0x168>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    e73e:	f001 fb81 	bl	fe44 <bt_le_adv_lookup_legacy>
    e742:	4683      	mov	fp, r0
    e744:	f06f 0180 	mvn.w	r1, #128	; 0x80
    e748:	3010      	adds	r0, #16
    e74a:	f00d f994 	bl	1ba76 <atomic_and.isra.0>
		(void)bt_le_lim_adv_cancel_timeout(adv);
    e74e:	4658      	mov	r0, fp
    e750:	f00d fc1f 	bl	1bf92 <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
    e754:	2c00      	cmp	r4, #0
    e756:	d0b9      	beq.n	e6cc <bt_hci_le_enh_conn_complete+0xe0>
	conn->handle = handle;
    e758:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    e75a:	f107 0110 	add.w	r1, r7, #16
	conn->handle = handle;
    e75e:	f820 9b88 	strh.w	r9, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    e762:	f00d f977 	bl	1ba54 <bt_addr_le_copy>
	conn->err = 0U;
    e766:	2200      	movs	r2, #0
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    e768:	f8b5 3017 	ldrh.w	r3, [r5, #23]
    e76c:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    e770:	f8b5 3019 	ldrh.w	r3, [r5, #25]
    e774:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    e778:	f8b5 301b 	ldrh.w	r3, [r5, #27]
    e77c:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
    e780:	78eb      	ldrb	r3, [r5, #3]
	conn->err = 0U;
    e782:	7322      	strb	r2, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    e784:	2b01      	cmp	r3, #1
	conn->role = evt->role;
    e786:	70e3      	strb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    e788:	d116      	bne.n	e7b8 <bt_hci_le_enh_conn_complete+0x1cc>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    e78a:	f107 0108 	add.w	r1, r7, #8
    e78e:	f104 008f 	add.w	r0, r4, #143	; 0x8f
    e792:	f00d f95f 	bl	1ba54 <bt_addr_le_copy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    e796:	f001 fb55 	bl	fe44 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
    e79a:	7a21      	ldrb	r1, [r4, #8]
    e79c:	4d53      	ldr	r5, [pc, #332]	; (e8ec <bt_hci_le_enh_conn_complete+0x300>)
    e79e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
    e7a2:	4429      	add	r1, r5
    e7a4:	f104 0096 	add.w	r0, r4, #150	; 0x96
    e7a8:	f00d f954 	bl	1ba54 <bt_addr_le_copy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
    e7ac:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
    e7b0:	065d      	lsls	r5, r3, #25
    e7b2:	d501      	bpl.n	e7b8 <bt_hci_le_enh_conn_complete+0x1cc>
			bt_le_adv_resume();
    e7b4:	f001 fd1e 	bl	101f4 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    e7b8:	2107      	movs	r1, #7
    e7ba:	4620      	mov	r0, r4
    e7bc:	f002 fa04 	bl	10bc8 <bt_conn_set_state>
	if (is_disconnected) {
    e7c0:	b11e      	cbz	r6, e7ca <bt_hci_le_enh_conn_complete+0x1de>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    e7c2:	2101      	movs	r1, #1
    e7c4:	4620      	mov	r0, r4
    e7c6:	f002 f9ff 	bl	10bc8 <bt_conn_set_state>
	bt_conn_connected(conn);
    e7ca:	4620      	mov	r0, r4
    e7cc:	f00d fcbd 	bl	1c14a <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
    e7d0:	7b63      	ldrb	r3, [r4, #13]
    e7d2:	2b07      	cmp	r3, #7
    e7d4:	d174      	bne.n	e8c0 <bt_hci_le_enh_conn_complete+0x2d4>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e7d6:	1d23      	adds	r3, r4, #4
    e7d8:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    e7dc:	f413 6f00 	tst.w	r3, #2048	; 0x800
    e7e0:	4d42      	ldr	r5, [pc, #264]	; (e8ec <bt_hci_le_enh_conn_complete+0x300>)
    e7e2:	d12b      	bne.n	e83c <bt_hci_le_enh_conn_complete+0x250>
    e7e4:	78e3      	ldrb	r3, [r4, #3]
    e7e6:	b11b      	cbz	r3, e7f0 <bt_hci_le_enh_conn_complete+0x204>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
    e7e8:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    e7ec:	0718      	lsls	r0, r3, #28
    e7ee:	d525      	bpl.n	e83c <bt_hci_le_enh_conn_complete+0x250>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    e7f0:	2102      	movs	r1, #2
    e7f2:	f242 0016 	movw	r0, #8214	; 0x2016
    e7f6:	f7ff fde1 	bl	e3bc <bt_hci_cmd_create>
	if (!buf) {
    e7fa:	4606      	mov	r6, r0
    e7fc:	2800      	cmp	r0, #0
    e7fe:	d061      	beq.n	e8c4 <bt_hci_le_enh_conn_complete+0x2d8>
    e800:	2102      	movs	r1, #2
    e802:	3008      	adds	r0, #8
    e804:	f00f f99a 	bl	1db3c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    e808:	8823      	ldrh	r3, [r4, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
    e80a:	2200      	movs	r2, #0
	cp->handle = sys_cpu_to_le16(conn->handle);
    e80c:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
    e80e:	4631      	mov	r1, r6
    e810:	f242 0016 	movw	r0, #8214	; 0x2016
    e814:	f7ff fe0c 	bl	e430 <bt_hci_cmd_send_sync>
		if (err) {
    e818:	b180      	cbz	r0, e83c <bt_hci_le_enh_conn_complete+0x250>
			BT_ERR("Failed read remote features (%d)", err);
    e81a:	466e      	mov	r6, sp
    e81c:	b088      	sub	sp, #32
    e81e:	aa02      	add	r2, sp, #8
    e820:	4b33      	ldr	r3, [pc, #204]	; (e8f0 <bt_hci_le_enh_conn_complete+0x304>)
    e822:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    e826:	6153      	str	r3, [r2, #20]
    e828:	4b32      	ldr	r3, [pc, #200]	; (e8f4 <bt_hci_le_enh_conn_complete+0x308>)
    e82a:	e9c2 3006 	strd	r3, r0, [r2, #24]
    e82e:	2304      	movs	r3, #4
    e830:	4829      	ldr	r0, [pc, #164]	; (e8d8 <bt_hci_le_enh_conn_complete+0x2ec>)
    e832:	f842 3f10 	str.w	r3, [r2, #16]!
    e836:	f00d f91b 	bl	1ba70 <z_log_msg_static_create.constprop.0>
    e83a:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    e83c:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
    e840:	07d9      	lsls	r1, r3, #31
    e842:	d518      	bpl.n	e876 <bt_hci_le_enh_conn_complete+0x28a>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
    e844:	2100      	movs	r1, #0
    e846:	2302      	movs	r3, #2
    e848:	4620      	mov	r0, r4
    e84a:	461a      	mov	r2, r3
    e84c:	9100      	str	r1, [sp, #0]
    e84e:	f00d f963 	bl	1bb18 <bt_le_set_phy>
		if (err) {
    e852:	b180      	cbz	r0, e876 <bt_hci_le_enh_conn_complete+0x28a>
			BT_ERR("Failed LE Set PHY (%d)", err);
    e854:	466e      	mov	r6, sp
    e856:	b088      	sub	sp, #32
    e858:	aa02      	add	r2, sp, #8
    e85a:	4b27      	ldr	r3, [pc, #156]	; (e8f8 <bt_hci_le_enh_conn_complete+0x30c>)
    e85c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    e860:	6153      	str	r3, [r2, #20]
    e862:	4b24      	ldr	r3, [pc, #144]	; (e8f4 <bt_hci_le_enh_conn_complete+0x308>)
    e864:	e9c2 3006 	strd	r3, r0, [r2, #24]
    e868:	2304      	movs	r3, #4
    e86a:	481b      	ldr	r0, [pc, #108]	; (e8d8 <bt_hci_le_enh_conn_complete+0x2ec>)
    e86c:	f842 3f10 	str.w	r3, [r2, #16]!
    e870:	f00d f8fe 	bl	1ba70 <z_log_msg_static_create.constprop.0>
    e874:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    e876:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    e87a:	069a      	lsls	r2, r3, #26
    e87c:	d520      	bpl.n	e8c0 <bt_hci_le_enh_conn_complete+0x2d4>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
    e87e:	f8d5 315c 	ldr.w	r3, [r5, #348]	; 0x15c
    e882:	689b      	ldr	r3, [r3, #8]
    e884:	079b      	lsls	r3, r3, #30
    e886:	d51b      	bpl.n	e8c0 <bt_hci_le_enh_conn_complete+0x2d4>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    e888:	1db9      	adds	r1, r7, #6
    e88a:	1d38      	adds	r0, r7, #4
    e88c:	f7ff fe50 	bl	e530 <hci_le_read_max_data_len>
			if (!err) {
    e890:	b9b0      	cbnz	r0, e8c0 <bt_hci_le_enh_conn_complete+0x2d4>
				err = bt_le_set_data_len(conn,
    e892:	4620      	mov	r0, r4
    e894:	88fa      	ldrh	r2, [r7, #6]
    e896:	88b9      	ldrh	r1, [r7, #4]
    e898:	f00d f920 	bl	1badc <bt_le_set_data_len>
				if (err) {
    e89c:	b180      	cbz	r0, e8c0 <bt_hci_le_enh_conn_complete+0x2d4>
					BT_ERR("Failed to set data len (%d)", err);
    e89e:	466d      	mov	r5, sp
    e8a0:	b088      	sub	sp, #32
    e8a2:	aa02      	add	r2, sp, #8
    e8a4:	4b15      	ldr	r3, [pc, #84]	; (e8fc <bt_hci_le_enh_conn_complete+0x310>)
    e8a6:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    e8aa:	6153      	str	r3, [r2, #20]
    e8ac:	4b11      	ldr	r3, [pc, #68]	; (e8f4 <bt_hci_le_enh_conn_complete+0x308>)
    e8ae:	e9c2 3006 	strd	r3, r0, [r2, #24]
    e8b2:	2304      	movs	r3, #4
    e8b4:	4808      	ldr	r0, [pc, #32]	; (e8d8 <bt_hci_le_enh_conn_complete+0x2ec>)
    e8b6:	f842 3f10 	str.w	r3, [r2, #16]!
    e8ba:	f00d f8d9 	bl	1ba70 <z_log_msg_static_create.constprop.0>
    e8be:	46ad      	mov	sp, r5
	bt_conn_unref(conn);
    e8c0:	4620      	mov	r0, r4
    e8c2:	e6d4      	b.n	e66e <bt_hci_le_enh_conn_complete+0x82>
		return -ENOBUFS;
    e8c4:	f06f 0068 	mvn.w	r0, #104	; 0x68
    e8c8:	e7a7      	b.n	e81a <bt_hci_le_enh_conn_complete+0x22e>
    e8ca:	bf00      	nop
    e8cc:	20009f6e 	.word	0x20009f6e
    e8d0:	00021977 	.word	0x00021977
    e8d4:	000220fb 	.word	0x000220fb
    e8d8:	0001fc74 	.word	0x0001fc74
    e8dc:	0002199c 	.word	0x0002199c
    e8e0:	00022118 	.word	0x00022118
    e8e4:	000219b9 	.word	0x000219b9
    e8e8:	01000004 	.word	0x01000004
    e8ec:	20008000 	.word	0x20008000
    e8f0:	000219d9 	.word	0x000219d9
    e8f4:	000220e8 	.word	0x000220e8
    e8f8:	000219fe 	.word	0x000219fe
    e8fc:	00021a19 	.word	0x00021a19

0000e900 <le_legacy_conn_complete>:
{
    e900:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
    e902:	6881      	ldr	r1, [r0, #8]
{
    e904:	b088      	sub	sp, #32
	enh.status         = evt->status;
    e906:	780b      	ldrb	r3, [r1, #0]
    e908:	4c16      	ldr	r4, [pc, #88]	; (e964 <le_legacy_conn_complete+0x64>)
    e90a:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
    e90e:	f8b1 3001 	ldrh.w	r3, [r1, #1]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    e912:	a801      	add	r0, sp, #4
	enh.handle         = evt->handle;
    e914:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
    e918:	78cb      	ldrb	r3, [r1, #3]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    e91a:	3104      	adds	r1, #4
	enh.role           = evt->role;
    e91c:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
    e920:	f8b1 3007 	ldrh.w	r3, [r1, #7]
    e924:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
    e928:	f8b1 3009 	ldrh.w	r3, [r1, #9]
    e92c:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
    e930:	f8b1 300b 	ldrh.w	r3, [r1, #11]
    e934:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
    e938:	7b4b      	ldrb	r3, [r1, #13]
    e93a:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    e93e:	f00d f889 	bl	1ba54 <bt_addr_le_copy>
    e942:	4621      	mov	r1, r4
    e944:	2206      	movs	r2, #6
    e946:	f10d 000b 	add.w	r0, sp, #11
    e94a:	f00c ffc2 	bl	1b8d2 <memcpy>
    e94e:	2206      	movs	r2, #6
    e950:	4621      	mov	r1, r4
    e952:	f10d 0011 	add.w	r0, sp, #17
    e956:	f00c ffbc 	bl	1b8d2 <memcpy>
	bt_hci_le_enh_conn_complete(evt);
    e95a:	4668      	mov	r0, sp
    e95c:	f7ff fe46 	bl	e5ec <bt_hci_le_enh_conn_complete>
}
    e960:	b008      	add	sp, #32
    e962:	bd10      	pop	{r4, pc}
    e964:	000215eb 	.word	0x000215eb

0000e968 <bt_security_err_get>:
	switch (hci_err) {
    e968:	2829      	cmp	r0, #41	; 0x29
    e96a:	bf9a      	itte	ls
    e96c:	4b01      	ldrls	r3, [pc, #4]	; (e974 <bt_security_err_get+0xc>)
    e96e:	5c18      	ldrbls	r0, [r3, r0]
{
    e970:	2009      	movhi	r0, #9
}
    e972:	4770      	bx	lr
    e974:	00021e04 	.word	0x00021e04

0000e978 <hci_encrypt_key_refresh_complete>:
{
    e978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
    e97a:	6883      	ldr	r3, [r0, #8]
{
    e97c:	af00      	add	r7, sp, #0
	handle = sys_le16_to_cpu(evt->handle);
    e97e:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	uint8_t status = evt->status;
    e982:	781d      	ldrb	r5, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    e984:	4630      	mov	r0, r6
    e986:	f002 f917 	bl	10bb8 <bt_conn_lookup_handle>
	if (!conn) {
    e98a:	4604      	mov	r4, r0
    e98c:	b990      	cbnz	r0, e9b4 <hci_encrypt_key_refresh_complete+0x3c>
		BT_ERR("Unable to look up conn with handle %u", handle);
    e98e:	466c      	mov	r4, sp
    e990:	b088      	sub	sp, #32
    e992:	466a      	mov	r2, sp
    e994:	4b21      	ldr	r3, [pc, #132]	; (ea1c <hci_encrypt_key_refresh_complete+0xa4>)
    e996:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    e99a:	6153      	str	r3, [r2, #20]
    e99c:	4b20      	ldr	r3, [pc, #128]	; (ea20 <hci_encrypt_key_refresh_complete+0xa8>)
    e99e:	4821      	ldr	r0, [pc, #132]	; (ea24 <hci_encrypt_key_refresh_complete+0xac>)
    e9a0:	e9c2 3606 	strd	r3, r6, [r2, #24]
    e9a4:	2304      	movs	r3, #4
    e9a6:	f842 3f10 	str.w	r3, [r2, #16]!
    e9aa:	f00d f861 	bl	1ba70 <z_log_msg_static_create.constprop.0>
    e9ae:	46a5      	mov	sp, r4
}
    e9b0:	46bd      	mov	sp, r7
    e9b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (status) {
    e9b4:	b15d      	cbz	r5, e9ce <hci_encrypt_key_refresh_complete+0x56>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
    e9b6:	4628      	mov	r0, r5
    e9b8:	f7ff ffd6 	bl	e968 <bt_security_err_get>
    e9bc:	4629      	mov	r1, r5
    e9be:	4602      	mov	r2, r0
    e9c0:	4620      	mov	r0, r4
    e9c2:	f002 fac1 	bl	10f48 <bt_conn_security_changed>
	bt_conn_unref(conn);
    e9c6:	4620      	mov	r0, r4
    e9c8:	f00d fb89 	bl	1c0de <bt_conn_unref>
    e9cc:	e7f0      	b.n	e9b0 <hci_encrypt_key_refresh_complete+0x38>
	if (conn->type == BT_CONN_TYPE_LE) {
    e9ce:	7883      	ldrb	r3, [r0, #2]
    e9d0:	2b01      	cmp	r3, #1
    e9d2:	d1f0      	bne.n	e9b6 <hci_encrypt_key_refresh_complete+0x3e>
		bt_smp_update_keys(conn);
    e9d4:	f006 fb82 	bl	150dc <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
    e9d8:	4620      	mov	r0, r4
    e9da:	f00d f822 	bl	1ba22 <update_sec_level>
    e9de:	2800      	cmp	r0, #0
    e9e0:	d1e9      	bne.n	e9b6 <hci_encrypt_key_refresh_complete+0x3e>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
    e9e2:	2005      	movs	r0, #5
    e9e4:	f7ff ffc0 	bl	e968 <bt_security_err_get>
    e9e8:	2105      	movs	r1, #5
    e9ea:	4602      	mov	r2, r0
    e9ec:	4620      	mov	r0, r4
    e9ee:	f002 faab 	bl	10f48 <bt_conn_security_changed>
		BT_ERR("Failed to set required security level");
    e9f2:	466d      	mov	r5, sp
    e9f4:	b088      	sub	sp, #32
    e9f6:	466a      	mov	r2, sp
    e9f8:	4b0b      	ldr	r3, [pc, #44]	; (ea28 <hci_encrypt_key_refresh_complete+0xb0>)
    e9fa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    e9fe:	6153      	str	r3, [r2, #20]
    ea00:	4b07      	ldr	r3, [pc, #28]	; (ea20 <hci_encrypt_key_refresh_complete+0xa8>)
    ea02:	4808      	ldr	r0, [pc, #32]	; (ea24 <hci_encrypt_key_refresh_complete+0xac>)
    ea04:	6193      	str	r3, [r2, #24]
    ea06:	2303      	movs	r3, #3
    ea08:	f842 3f10 	str.w	r3, [r2, #16]!
    ea0c:	f00d f830 	bl	1ba70 <z_log_msg_static_create.constprop.0>
		bt_conn_disconnect(conn, status);
    ea10:	2105      	movs	r1, #5
    ea12:	46ad      	mov	sp, r5
    ea14:	4620      	mov	r0, r4
    ea16:	f00d fba1 	bl	1c15c <bt_conn_disconnect>
    ea1a:	e7d4      	b.n	e9c6 <hci_encrypt_key_refresh_complete+0x4e>
    ea1c:	00021711 	.word	0x00021711
    ea20:	00022029 	.word	0x00022029
    ea24:	0001fc74 	.word	0x0001fc74
    ea28:	00021a39 	.word	0x00021a39

0000ea2c <hci_encrypt_change>:
{
    ea2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
    ea30:	6886      	ldr	r6, [r0, #8]
{
    ea32:	af00      	add	r7, sp, #0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    ea34:	f8b6 8001 	ldrh.w	r8, [r6, #1]
	uint8_t status = evt->status;
    ea38:	7835      	ldrb	r5, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
    ea3a:	4640      	mov	r0, r8
    ea3c:	f002 f8bc 	bl	10bb8 <bt_conn_lookup_handle>
	if (!conn) {
    ea40:	4604      	mov	r4, r0
    ea42:	b998      	cbnz	r0, ea6c <hci_encrypt_change+0x40>
		BT_ERR("Unable to look up conn with handle %u", handle);
    ea44:	466c      	mov	r4, sp
    ea46:	b088      	sub	sp, #32
    ea48:	466a      	mov	r2, sp
    ea4a:	4b27      	ldr	r3, [pc, #156]	; (eae8 <hci_encrypt_change+0xbc>)
    ea4c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    ea50:	6153      	str	r3, [r2, #20]
    ea52:	4b26      	ldr	r3, [pc, #152]	; (eaec <hci_encrypt_change+0xc0>)
    ea54:	4826      	ldr	r0, [pc, #152]	; (eaf0 <hci_encrypt_change+0xc4>)
    ea56:	e9c2 3806 	strd	r3, r8, [r2, #24]
    ea5a:	2304      	movs	r3, #4
    ea5c:	f842 3f10 	str.w	r3, [r2, #16]!
    ea60:	f00d f806 	bl	1ba70 <z_log_msg_static_create.constprop.0>
    ea64:	46a5      	mov	sp, r4
}
    ea66:	46bd      	mov	sp, r7
    ea68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (status) {
    ea6c:	b15d      	cbz	r5, ea86 <hci_encrypt_change+0x5a>
		bt_conn_security_changed(conn, status,
    ea6e:	4628      	mov	r0, r5
    ea70:	f7ff ff7a 	bl	e968 <bt_security_err_get>
    ea74:	4629      	mov	r1, r5
    ea76:	4602      	mov	r2, r0
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
    ea78:	4620      	mov	r0, r4
    ea7a:	f002 fa65 	bl	10f48 <bt_conn_security_changed>
	bt_conn_unref(conn);
    ea7e:	4620      	mov	r0, r4
    ea80:	f00d fb2d 	bl	1c0de <bt_conn_unref>
    ea84:	e7ef      	b.n	ea66 <hci_encrypt_change+0x3a>
	if (conn->type == BT_CONN_TYPE_LE) {
    ea86:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
    ea88:	78f3      	ldrb	r3, [r6, #3]
	if (conn->type == BT_CONN_TYPE_LE) {
    ea8a:	2a01      	cmp	r2, #1
	conn->encrypt = evt->encrypt;
    ea8c:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
    ea8e:	d005      	beq.n	ea9c <hci_encrypt_change+0x70>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
    ea90:	2000      	movs	r0, #0
    ea92:	f7ff ff69 	bl	e968 <bt_security_err_get>
    ea96:	2100      	movs	r1, #0
    ea98:	4602      	mov	r2, r0
    ea9a:	e7ed      	b.n	ea78 <hci_encrypt_change+0x4c>
		if (conn->encrypt) {
    ea9c:	b10b      	cbz	r3, eaa2 <hci_encrypt_change+0x76>
			bt_smp_update_keys(conn);
    ea9e:	f006 fb1d 	bl	150dc <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
    eaa2:	4620      	mov	r0, r4
    eaa4:	f00c ffbd 	bl	1ba22 <update_sec_level>
    eaa8:	2800      	cmp	r0, #0
    eaaa:	d1f1      	bne.n	ea90 <hci_encrypt_change+0x64>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
    eaac:	2005      	movs	r0, #5
    eaae:	f7ff ff5b 	bl	e968 <bt_security_err_get>
    eab2:	2105      	movs	r1, #5
    eab4:	4602      	mov	r2, r0
    eab6:	4620      	mov	r0, r4
    eab8:	f002 fa46 	bl	10f48 <bt_conn_security_changed>
		BT_ERR("Failed to set required security level");
    eabc:	466d      	mov	r5, sp
    eabe:	b088      	sub	sp, #32
    eac0:	466a      	mov	r2, sp
    eac2:	4b0c      	ldr	r3, [pc, #48]	; (eaf4 <hci_encrypt_change+0xc8>)
    eac4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    eac8:	6153      	str	r3, [r2, #20]
    eaca:	4b08      	ldr	r3, [pc, #32]	; (eaec <hci_encrypt_change+0xc0>)
    eacc:	4808      	ldr	r0, [pc, #32]	; (eaf0 <hci_encrypt_change+0xc4>)
    eace:	6193      	str	r3, [r2, #24]
    ead0:	2303      	movs	r3, #3
    ead2:	f842 3f10 	str.w	r3, [r2, #16]!
    ead6:	f00c ffcb 	bl	1ba70 <z_log_msg_static_create.constprop.0>
		bt_conn_disconnect(conn, status);
    eada:	2105      	movs	r1, #5
    eadc:	46ad      	mov	sp, r5
    eade:	4620      	mov	r0, r4
    eae0:	f00d fb3c 	bl	1c15c <bt_conn_disconnect>
    eae4:	e7cb      	b.n	ea7e <hci_encrypt_change+0x52>
    eae6:	bf00      	nop
    eae8:	00021711 	.word	0x00021711
    eaec:	00022016 	.word	0x00022016
    eaf0:	0001fc74 	.word	0x0001fc74
    eaf4:	00021a39 	.word	0x00021a39

0000eaf8 <bt_send>:
	return bt_dev.drv->send(buf);
    eaf8:	4b02      	ldr	r3, [pc, #8]	; (eb04 <bt_send+0xc>)
    eafa:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
    eafe:	695b      	ldr	r3, [r3, #20]
    eb00:	4718      	bx	r3
    eb02:	bf00      	nop
    eb04:	20008000 	.word	0x20008000

0000eb08 <bt_hci_cmd_send>:
{
    eb08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    eb0a:	4605      	mov	r5, r0
	if (!buf) {
    eb0c:	460c      	mov	r4, r1
{
    eb0e:	af00      	add	r7, sp, #0
	if (!buf) {
    eb10:	b919      	cbnz	r1, eb1a <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    eb12:	f7ff fc53 	bl	e3bc <bt_hci_cmd_create>
		if (!buf) {
    eb16:	4604      	mov	r4, r0
    eb18:	b328      	cbz	r0, eb66 <bt_hci_cmd_send+0x5e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    eb1a:	f640 4335 	movw	r3, #3125	; 0xc35
    eb1e:	429d      	cmp	r5, r3
    eb20:	d11b      	bne.n	eb5a <bt_hci_cmd_send+0x52>
		err = bt_send(buf);
    eb22:	4620      	mov	r0, r4
    eb24:	f7ff ffe8 	bl	eaf8 <bt_send>
		if (err) {
    eb28:	4605      	mov	r5, r0
    eb2a:	b198      	cbz	r0, eb54 <bt_hci_cmd_send+0x4c>
			BT_ERR("Unable to send to driver (err %d)", err);
    eb2c:	466e      	mov	r6, sp
    eb2e:	b088      	sub	sp, #32
    eb30:	466a      	mov	r2, sp
    eb32:	4b0e      	ldr	r3, [pc, #56]	; (eb6c <bt_hci_cmd_send+0x64>)
    eb34:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    eb38:	6153      	str	r3, [r2, #20]
    eb3a:	4b0d      	ldr	r3, [pc, #52]	; (eb70 <bt_hci_cmd_send+0x68>)
    eb3c:	e9c2 3006 	strd	r3, r0, [r2, #24]
    eb40:	2304      	movs	r3, #4
    eb42:	480c      	ldr	r0, [pc, #48]	; (eb74 <bt_hci_cmd_send+0x6c>)
    eb44:	f842 3f10 	str.w	r3, [r2, #16]!
    eb48:	f00c ff92 	bl	1ba70 <z_log_msg_static_create.constprop.0>
			net_buf_unref(buf);
    eb4c:	4620      	mov	r0, r4
    eb4e:	46b5      	mov	sp, r6
    eb50:	f006 fcec 	bl	1552c <net_buf_unref>
}
    eb54:	4628      	mov	r0, r5
    eb56:	46bd      	mov	sp, r7
    eb58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    eb5a:	4621      	mov	r1, r4
    eb5c:	4806      	ldr	r0, [pc, #24]	; (eb78 <bt_hci_cmd_send+0x70>)
    eb5e:	f00e ffba 	bl	1dad6 <net_buf_put>
	return 0;
    eb62:	2500      	movs	r5, #0
    eb64:	e7f6      	b.n	eb54 <bt_hci_cmd_send+0x4c>
			return -ENOBUFS;
    eb66:	f06f 0568 	mvn.w	r5, #104	; 0x68
    eb6a:	e7f3      	b.n	eb54 <bt_hci_cmd_send+0x4c>
    eb6c:	00021a63 	.word	0x00021a63
    eb70:	00022149 	.word	0x00022149
    eb74:	0001fc74 	.word	0x0001fc74
    eb78:	20008144 	.word	0x20008144

0000eb7c <bt_hci_host_num_completed_packets>:
{
    eb7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eb80:	4604      	mov	r4, r0
	uint16_t handle = acl(buf)->handle;
    eb82:	8ac5      	ldrh	r5, [r0, #22]
	uint8_t index = acl(buf)->index;
    eb84:	7d46      	ldrb	r6, [r0, #21]
{
    eb86:	af00      	add	r7, sp, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    eb88:	7980      	ldrb	r0, [r0, #6]
    eb8a:	f006 fc0d 	bl	153a8 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
    eb8e:	4621      	mov	r1, r4
    eb90:	f010 f946 	bl	1ee20 <k_queue_prepend>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    eb94:	4b30      	ldr	r3, [pc, #192]	; (ec58 <bt_hci_host_num_completed_packets+0xdc>)
    eb96:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
    eb9a:	069b      	lsls	r3, r3, #26
    eb9c:	d52d      	bpl.n	ebfa <bt_hci_host_num_completed_packets+0x7e>
	conn = bt_conn_lookup_index(index);
    eb9e:	4630      	mov	r0, r6
    eba0:	f002 fbca 	bl	11338 <bt_conn_lookup_index>
	if (!conn) {
    eba4:	4604      	mov	r4, r0
    eba6:	b988      	cbnz	r0, ebcc <bt_hci_host_num_completed_packets+0x50>
		BT_WARN("Unable to look up conn with index 0x%02x", index);
    eba8:	466c      	mov	r4, sp
    ebaa:	b088      	sub	sp, #32
    ebac:	466a      	mov	r2, sp
    ebae:	4b2b      	ldr	r3, [pc, #172]	; (ec5c <bt_hci_host_num_completed_packets+0xe0>)
    ebb0:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    ebb4:	6153      	str	r3, [r2, #20]
    ebb6:	4b2a      	ldr	r3, [pc, #168]	; (ec60 <bt_hci_host_num_completed_packets+0xe4>)
    ebb8:	e9c2 3606 	strd	r3, r6, [r2, #24]
    ebbc:	2304      	movs	r3, #4
    ebbe:	f842 3f10 	str.w	r3, [r2, #16]!
		BT_ERR("Unable to allocate new HCI command");
    ebc2:	4828      	ldr	r0, [pc, #160]	; (ec64 <bt_hci_host_num_completed_packets+0xe8>)
    ebc4:	f00c ff54 	bl	1ba70 <z_log_msg_static_create.constprop.0>
    ebc8:	46a5      	mov	sp, r4
		return;
    ebca:	e016      	b.n	ebfa <bt_hci_host_num_completed_packets+0x7e>
	if (conn->state != BT_CONN_CONNECTED &&
    ebcc:	7b43      	ldrb	r3, [r0, #13]
    ebce:	3b07      	subs	r3, #7
    ebd0:	2b01      	cmp	r3, #1
    ebd2:	d915      	bls.n	ec00 <bt_hci_host_num_completed_packets+0x84>
		BT_WARN("Not reporting packet for non-connected conn");
    ebd4:	466d      	mov	r5, sp
    ebd6:	b088      	sub	sp, #32
    ebd8:	466a      	mov	r2, sp
    ebda:	4b23      	ldr	r3, [pc, #140]	; (ec68 <bt_hci_host_num_completed_packets+0xec>)
    ebdc:	4821      	ldr	r0, [pc, #132]	; (ec64 <bt_hci_host_num_completed_packets+0xe8>)
    ebde:	6153      	str	r3, [r2, #20]
    ebe0:	4b1f      	ldr	r3, [pc, #124]	; (ec60 <bt_hci_host_num_completed_packets+0xe4>)
    ebe2:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    ebe6:	6193      	str	r3, [r2, #24]
    ebe8:	2303      	movs	r3, #3
    ebea:	f842 3f10 	str.w	r3, [r2, #16]!
    ebee:	f00c ff3f 	bl	1ba70 <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
    ebf2:	4620      	mov	r0, r4
    ebf4:	46ad      	mov	sp, r5
    ebf6:	f00d fa72 	bl	1c0de <bt_conn_unref>
}
    ebfa:	46bd      	mov	sp, r7
    ebfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_conn_unref(conn);
    ec00:	f00d fa6d 	bl	1c0de <bt_conn_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS,
    ec04:	2105      	movs	r1, #5
    ec06:	f640 4035 	movw	r0, #3125	; 0xc35
    ec0a:	f7ff fbd7 	bl	e3bc <bt_hci_cmd_create>
	if (!buf) {
    ec0e:	4604      	mov	r4, r0
    ec10:	b960      	cbnz	r0, ec2c <bt_hci_host_num_completed_packets+0xb0>
		BT_ERR("Unable to allocate new HCI command");
    ec12:	466c      	mov	r4, sp
    ec14:	b088      	sub	sp, #32
    ec16:	466a      	mov	r2, sp
    ec18:	4b14      	ldr	r3, [pc, #80]	; (ec6c <bt_hci_host_num_completed_packets+0xf0>)
    ec1a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    ec1e:	6153      	str	r3, [r2, #20]
    ec20:	4b0f      	ldr	r3, [pc, #60]	; (ec60 <bt_hci_host_num_completed_packets+0xe4>)
    ec22:	6193      	str	r3, [r2, #24]
    ec24:	2303      	movs	r3, #3
    ec26:	f842 3f10 	str.w	r3, [r2, #16]!
    ec2a:	e7ca      	b.n	ebc2 <bt_hci_host_num_completed_packets+0x46>
	return net_buf_simple_add(&buf->b, len);
    ec2c:	f100 0808 	add.w	r8, r0, #8
    ec30:	2101      	movs	r1, #1
    ec32:	4640      	mov	r0, r8
    ec34:	f00e ff82 	bl	1db3c <net_buf_simple_add>
	cp->num_handles = sys_cpu_to_le16(1);
    ec38:	2601      	movs	r6, #1
    ec3a:	2104      	movs	r1, #4
    ec3c:	7006      	strb	r6, [r0, #0]
    ec3e:	4640      	mov	r0, r8
    ec40:	f00e ff7c 	bl	1db3c <net_buf_simple_add>
	hc->count  = sys_cpu_to_le16(1);
    ec44:	2300      	movs	r3, #0
	hc->handle = sys_cpu_to_le16(handle);
    ec46:	8005      	strh	r5, [r0, #0]
	hc->count  = sys_cpu_to_le16(1);
    ec48:	7086      	strb	r6, [r0, #2]
    ec4a:	70c3      	strb	r3, [r0, #3]
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
    ec4c:	4621      	mov	r1, r4
    ec4e:	f640 4035 	movw	r0, #3125	; 0xc35
    ec52:	f7ff ff59 	bl	eb08 <bt_hci_cmd_send>
    ec56:	e7d0      	b.n	ebfa <bt_hci_host_num_completed_packets+0x7e>
    ec58:	20008000 	.word	0x20008000
    ec5c:	00021a89 	.word	0x00021a89
    ec60:	00022159 	.word	0x00022159
    ec64:	0001fc74 	.word	0x0001fc74
    ec68:	00021ab6 	.word	0x00021ab6
    ec6c:	00021ae6 	.word	0x00021ae6

0000ec70 <le_ltk_request>:
{
    ec70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ec74:	b086      	sub	sp, #24
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
    ec76:	6884      	ldr	r4, [r0, #8]
{
    ec78:	af02      	add	r7, sp, #8
	handle = sys_le16_to_cpu(evt->handle);
    ec7a:	8826      	ldrh	r6, [r4, #0]
    ec7c:	fa1f f886 	uxth.w	r8, r6
	conn = bt_conn_lookup_handle(handle);
    ec80:	4640      	mov	r0, r8
    ec82:	f001 ff99 	bl	10bb8 <bt_conn_lookup_handle>
	if (!conn) {
    ec86:	4605      	mov	r5, r0
    ec88:	b9a0      	cbnz	r0, ecb4 <le_ltk_request+0x44>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    ec8a:	466c      	mov	r4, sp
    ec8c:	b088      	sub	sp, #32
    ec8e:	aa02      	add	r2, sp, #8
    ec90:	4b2e      	ldr	r3, [pc, #184]	; (ed4c <le_ltk_request+0xdc>)
    ec92:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    ec96:	6153      	str	r3, [r2, #20]
    ec98:	4b2d      	ldr	r3, [pc, #180]	; (ed50 <le_ltk_request+0xe0>)
    ec9a:	482e      	ldr	r0, [pc, #184]	; (ed54 <le_ltk_request+0xe4>)
    ec9c:	e9c2 3806 	strd	r3, r8, [r2, #24]
    eca0:	2304      	movs	r3, #4
    eca2:	f842 3f10 	str.w	r3, [r2, #16]!
    eca6:	f00c fee3 	bl	1ba70 <z_log_msg_static_create.constprop.0>
    ecaa:	46a5      	mov	sp, r4
}
    ecac:	3710      	adds	r7, #16
    ecae:	46bd      	mov	sp, r7
    ecb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
    ecb4:	f8d4 2002 	ldr.w	r2, [r4, #2]
    ecb8:	f8d4 3006 	ldr.w	r3, [r4, #6]
    ecbc:	9701      	str	r7, [sp, #4]
    ecbe:	8961      	ldrh	r1, [r4, #10]
    ecc0:	9100      	str	r1, [sp, #0]
    ecc2:	f00e fd61 	bl	1d788 <bt_smp_request_ltk>
    ecc6:	b350      	cbz	r0, ed1e <le_ltk_request+0xae>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    ecc8:	2112      	movs	r1, #18
    ecca:	f242 001a 	movw	r0, #8218	; 0x201a
    ecce:	f7ff fb75 	bl	e3bc <bt_hci_cmd_create>
	if (!buf) {
    ecd2:	4604      	mov	r4, r0
    ecd4:	b998      	cbnz	r0, ecfe <le_ltk_request+0x8e>
		BT_ERR("Out of command buffers");
    ecd6:	466c      	mov	r4, sp
    ecd8:	b088      	sub	sp, #32
    ecda:	aa02      	add	r2, sp, #8
    ecdc:	4b1e      	ldr	r3, [pc, #120]	; (ed58 <le_ltk_request+0xe8>)
    ecde:	6153      	str	r3, [r2, #20]
    ece0:	4b1e      	ldr	r3, [pc, #120]	; (ed5c <le_ltk_request+0xec>)
		BT_ERR("Out of command buffers");
    ece2:	6193      	str	r3, [r2, #24]
    ece4:	2303      	movs	r3, #3
    ece6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    ecea:	481a      	ldr	r0, [pc, #104]	; (ed54 <le_ltk_request+0xe4>)
    ecec:	f842 3f10 	str.w	r3, [r2, #16]!
    ecf0:	f00c febe 	bl	1ba70 <z_log_msg_static_create.constprop.0>
    ecf4:	46a5      	mov	sp, r4
	bt_conn_unref(conn);
    ecf6:	4628      	mov	r0, r5
    ecf8:	f00d f9f1 	bl	1c0de <bt_conn_unref>
    ecfc:	e7d6      	b.n	ecac <le_ltk_request+0x3c>
    ecfe:	2112      	movs	r1, #18
    ed00:	3008      	adds	r0, #8
    ed02:	f00e ff1b 	bl	1db3c <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
    ed06:	4639      	mov	r1, r7
    ed08:	2210      	movs	r2, #16
	cp->handle = sys_cpu_to_le16(handle);
    ed0a:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
    ed0e:	f00c fde0 	bl	1b8d2 <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    ed12:	4621      	mov	r1, r4
    ed14:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    ed18:	f7ff fef6 	bl	eb08 <bt_hci_cmd_send>
    ed1c:	e7eb      	b.n	ecf6 <le_ltk_request+0x86>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    ed1e:	2102      	movs	r1, #2
    ed20:	f242 001b 	movw	r0, #8219	; 0x201b
    ed24:	f7ff fb4a 	bl	e3bc <bt_hci_cmd_create>
	if (!buf) {
    ed28:	4604      	mov	r4, r0
    ed2a:	b930      	cbnz	r0, ed3a <le_ltk_request+0xca>
		BT_ERR("Out of command buffers");
    ed2c:	466c      	mov	r4, sp
    ed2e:	b088      	sub	sp, #32
    ed30:	aa02      	add	r2, sp, #8
    ed32:	4b09      	ldr	r3, [pc, #36]	; (ed58 <le_ltk_request+0xe8>)
    ed34:	6153      	str	r3, [r2, #20]
    ed36:	4b0a      	ldr	r3, [pc, #40]	; (ed60 <le_ltk_request+0xf0>)
    ed38:	e7d3      	b.n	ece2 <le_ltk_request+0x72>
    ed3a:	2102      	movs	r1, #2
    ed3c:	3008      	adds	r0, #8
    ed3e:	f00e fefd 	bl	1db3c <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    ed42:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
    ed44:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    ed46:	f242 001b 	movw	r0, #8219	; 0x201b
    ed4a:	e7e5      	b.n	ed18 <le_ltk_request+0xa8>
    ed4c:	0002167c 	.word	0x0002167c
    ed50:	00021ff2 	.word	0x00021ff2
    ed54:	0001fc74 	.word	0x0001fc74
    ed58:	00021b0d 	.word	0x00021b0d
    ed5c:	00021fe5 	.word	0x00021fe5
    ed60:	00021fd4 	.word	0x00021fd4

0000ed64 <le_conn_param_req>:
{
    ed64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ed68:	b082      	sub	sp, #8
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    ed6a:	6883      	ldr	r3, [r0, #8]
{
    ed6c:	af00      	add	r7, sp, #0
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    ed6e:	78d9      	ldrb	r1, [r3, #3]
    ed70:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    ed72:	f8b3 8000 	ldrh.w	r8, [r3]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    ed76:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    ed7a:	803a      	strh	r2, [r7, #0]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    ed7c:	7959      	ldrb	r1, [r3, #5]
    ed7e:	791a      	ldrb	r2, [r3, #4]
	handle = sys_le16_to_cpu(evt->handle);
    ed80:	fa1f f488 	uxth.w	r4, r8
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    ed84:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    ed88:	807a      	strh	r2, [r7, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    ed8a:	799a      	ldrb	r2, [r3, #6]
    ed8c:	79d9      	ldrb	r1, [r3, #7]
	conn = bt_conn_lookup_handle(handle);
    ed8e:	4620      	mov	r0, r4
	param.latency = sys_le16_to_cpu(evt->latency);
    ed90:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    ed94:	80ba      	strh	r2, [r7, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    ed96:	7a1a      	ldrb	r2, [r3, #8]
    ed98:	7a5b      	ldrb	r3, [r3, #9]
    ed9a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    ed9e:	80fb      	strh	r3, [r7, #6]
	conn = bt_conn_lookup_handle(handle);
    eda0:	f001 ff0a 	bl	10bb8 <bt_conn_lookup_handle>
	if (!conn) {
    eda4:	4606      	mov	r6, r0
    eda6:	b9c0      	cbnz	r0, edda <le_conn_param_req+0x76>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    eda8:	466d      	mov	r5, sp
    edaa:	b088      	sub	sp, #32
    edac:	466a      	mov	r2, sp
    edae:	4b21      	ldr	r3, [pc, #132]	; (ee34 <le_conn_param_req+0xd0>)
    edb0:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    edb4:	6153      	str	r3, [r2, #20]
    edb6:	4b20      	ldr	r3, [pc, #128]	; (ee38 <le_conn_param_req+0xd4>)
    edb8:	4820      	ldr	r0, [pc, #128]	; (ee3c <le_conn_param_req+0xd8>)
    edba:	e9c2 3406 	strd	r3, r4, [r2, #24]
    edbe:	2304      	movs	r3, #4
    edc0:	f842 3f10 	str.w	r3, [r2, #16]!
    edc4:	f00c fe54 	bl	1ba70 <z_log_msg_static_create.constprop.0>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    edc8:	2102      	movs	r1, #2
    edca:	46ad      	mov	sp, r5
    edcc:	4620      	mov	r0, r4
    edce:	f00c feef 	bl	1bbb0 <le_conn_param_neg_reply>
}
    edd2:	3708      	adds	r7, #8
    edd4:	46bd      	mov	sp, r7
    edd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!le_param_req(conn, &param)) {
    edda:	4639      	mov	r1, r7
    eddc:	f002 f84c 	bl	10e78 <le_param_req>
    ede0:	b938      	cbnz	r0, edf2 <le_conn_param_req+0x8e>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    ede2:	211e      	movs	r1, #30
    ede4:	4620      	mov	r0, r4
    ede6:	f00c fee3 	bl	1bbb0 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    edea:	4630      	mov	r0, r6
    edec:	f00d f977 	bl	1c0de <bt_conn_unref>
    edf0:	e7ef      	b.n	edd2 <le_conn_param_req+0x6e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    edf2:	210e      	movs	r1, #14
    edf4:	f242 0020 	movw	r0, #8224	; 0x2020
    edf8:	f7ff fae0 	bl	e3bc <bt_hci_cmd_create>
	if (!buf) {
    edfc:	4605      	mov	r5, r0
    edfe:	2800      	cmp	r0, #0
    ee00:	d0f3      	beq.n	edea <le_conn_param_req+0x86>
    ee02:	210e      	movs	r1, #14
    ee04:	3008      	adds	r0, #8
    ee06:	f00e fe99 	bl	1db3c <net_buf_simple_add>
    ee0a:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
    ee0c:	220e      	movs	r2, #14
    ee0e:	2100      	movs	r1, #0
    ee10:	f00c fd6a 	bl	1b8e8 <memset>
	cp->handle = sys_cpu_to_le16(handle);
    ee14:	f8a4 8000 	strh.w	r8, [r4]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    ee18:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    ee1a:	4629      	mov	r1, r5
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    ee1c:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    ee1e:	887b      	ldrh	r3, [r7, #2]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    ee20:	f242 0020 	movw	r0, #8224	; 0x2020
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    ee24:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    ee26:	88bb      	ldrh	r3, [r7, #4]
    ee28:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    ee2a:	88fb      	ldrh	r3, [r7, #6]
    ee2c:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    ee2e:	f7ff fe6b 	bl	eb08 <bt_hci_cmd_send>
    ee32:	e7da      	b.n	edea <le_conn_param_req+0x86>
    ee34:	0002167c 	.word	0x0002167c
    ee38:	00021f98 	.word	0x00021f98
    ee3c:	0001fc74 	.word	0x0001fc74

0000ee40 <hci_tx_thread>:
{
    ee40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    ee44:	f8df 816c 	ldr.w	r8, [pc, #364]	; efb4 <hci_tx_thread+0x174>
{
    ee48:	b083      	sub	sp, #12
		BT_ASSERT(err == 0);
    ee4a:	f8df 916c 	ldr.w	r9, [pc, #364]	; efb8 <hci_tx_thread+0x178>
			ev_count += bt_conn_prepare_events(&events[1]);
    ee4e:	f108 0a14 	add.w	sl, r8, #20
{
    ee52:	af00      	add	r7, sp, #0
		events[0].state = K_POLL_STATE_NOT_READY;
    ee54:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    ee58:	4650      	mov	r0, sl
		events[0].state = K_POLL_STATE_NOT_READY;
    ee5a:	f36f 3394 	bfc	r3, #14, #7
    ee5e:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    ee62:	f001 fe71 	bl	10b48 <bt_conn_prepare_events>
    ee66:	1c45      	adds	r5, r0, #1
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    ee68:	f04f 32ff 	mov.w	r2, #4294967295
    ee6c:	f04f 33ff 	mov.w	r3, #4294967295
    ee70:	4629      	mov	r1, r5
    ee72:	4850      	ldr	r0, [pc, #320]	; (efb4 <hci_tx_thread+0x174>)
    ee74:	f00a fea6 	bl	19bc4 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    ee78:	b160      	cbz	r0, ee94 <hci_tx_thread+0x54>
    ee7a:	f640 13da 	movw	r3, #2522	; 0x9da
    ee7e:	464a      	mov	r2, r9
    ee80:	494e      	ldr	r1, [pc, #312]	; (efbc <hci_tx_thread+0x17c>)
    ee82:	484f      	ldr	r0, [pc, #316]	; (efc0 <hci_tx_thread+0x180>)
    ee84:	f00b fb98 	bl	1a5b8 <assert_print>
    ee88:	4040      	eors	r0, r0
    ee8a:	f380 8811 	msr	BASEPRI, r0
    ee8e:	f04f 0003 	mov.w	r0, #3
    ee92:	df02      	svc	2
{
    ee94:	4e47      	ldr	r6, [pc, #284]	; (efb4 <hci_tx_thread+0x174>)
	for (; count; ev++, count--) {
    ee96:	b915      	cbnz	r5, ee9e <hci_tx_thread+0x5e>
	z_impl_k_yield();
    ee98:	f00a fb6e 	bl	19578 <z_impl_k_yield>
	while (1) {
    ee9c:	e7da      	b.n	ee54 <hci_tx_thread+0x14>
		switch (ev->state) {
    ee9e:	68f3      	ldr	r3, [r6, #12]
    eea0:	f3c3 3386 	ubfx	r3, r3, #14, #7
    eea4:	2b01      	cmp	r3, #1
    eea6:	d969      	bls.n	ef7c <hci_tx_thread+0x13c>
    eea8:	2b04      	cmp	r3, #4
    eeaa:	d171      	bne.n	ef90 <hci_tx_thread+0x150>
			if (ev->tag == BT_EVENT_CMD_TX) {
    eeac:	7b33      	ldrb	r3, [r6, #12]
    eeae:	2b00      	cmp	r3, #0
    eeb0:	d167      	bne.n	ef82 <hci_tx_thread+0x142>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    eeb2:	2200      	movs	r2, #0
    eeb4:	2300      	movs	r3, #0
    eeb6:	4843      	ldr	r0, [pc, #268]	; (efc4 <hci_tx_thread+0x184>)
    eeb8:	f00e fda5 	bl	1da06 <net_buf_get>
	BT_ASSERT(buf);
    eebc:	4604      	mov	r4, r0
    eebe:	b960      	cbnz	r0, eeda <hci_tx_thread+0x9a>
    eec0:	f640 1373 	movw	r3, #2419	; 0x973
    eec4:	464a      	mov	r2, r9
    eec6:	4940      	ldr	r1, [pc, #256]	; (efc8 <hci_tx_thread+0x188>)
    eec8:	483d      	ldr	r0, [pc, #244]	; (efc0 <hci_tx_thread+0x180>)
    eeca:	f00b fb75 	bl	1a5b8 <assert_print>
    eece:	4040      	eors	r0, r0
    eed0:	f380 8811 	msr	BASEPRI, r0
    eed4:	f04f 0003 	mov.w	r0, #3
    eed8:	df02      	svc	2
	if (bt_dev.sent_cmd) {
    eeda:	f8df b0f0 	ldr.w	fp, [pc, #240]	; efcc <hci_tx_thread+0x18c>
	return z_impl_k_sem_take(sem, timeout);
    eede:	f04f 32ff 	mov.w	r2, #4294967295
    eee2:	f04f 33ff 	mov.w	r3, #4294967295
    eee6:	483a      	ldr	r0, [pc, #232]	; (efd0 <hci_tx_thread+0x190>)
    eee8:	f009 feca 	bl	18c80 <z_impl_k_sem_take>
    eeec:	f8db 2138 	ldr.w	r2, [fp, #312]	; 0x138
    eef0:	b1c2      	cbz	r2, ef24 <hci_tx_thread+0xe4>
		BT_ERR("Uncleared pending sent_cmd");
    eef2:	f8c7 d004 	str.w	sp, [r7, #4]
    eef6:	b088      	sub	sp, #32
    eef8:	466a      	mov	r2, sp
    eefa:	4936      	ldr	r1, [pc, #216]	; (efd4 <hci_tx_thread+0x194>)
    eefc:	4836      	ldr	r0, [pc, #216]	; (efd8 <hci_tx_thread+0x198>)
    eefe:	6151      	str	r1, [r2, #20]
    ef00:	4936      	ldr	r1, [pc, #216]	; (efdc <hci_tx_thread+0x19c>)
    ef02:	6191      	str	r1, [r2, #24]
    ef04:	2103      	movs	r1, #3
    ef06:	f842 1f10 	str.w	r1, [r2, #16]!
    ef0a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    ef0e:	f00c fdaf 	bl	1ba70 <z_log_msg_static_create.constprop.0>
    ef12:	f8d7 d004 	ldr.w	sp, [r7, #4]
		net_buf_unref(bt_dev.sent_cmd);
    ef16:	f8db 0138 	ldr.w	r0, [fp, #312]	; 0x138
    ef1a:	f006 fb07 	bl	1552c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    ef1e:	2200      	movs	r2, #0
    ef20:	f8cb 2138 	str.w	r2, [fp, #312]	; 0x138
	bt_dev.sent_cmd = net_buf_ref(buf);
    ef24:	4620      	mov	r0, r4
    ef26:	f00e fde3 	bl	1daf0 <net_buf_ref>
    ef2a:	f8cb 0138 	str.w	r0, [fp, #312]	; 0x138
	err = bt_send(buf);
    ef2e:	4620      	mov	r0, r4
    ef30:	f7ff fde2 	bl	eaf8 <bt_send>
	if (err) {
    ef34:	b310      	cbz	r0, ef7c <hci_tx_thread+0x13c>
		BT_ERR("Unable to send to driver (err %d)", err);
    ef36:	46eb      	mov	fp, sp
    ef38:	b088      	sub	sp, #32
    ef3a:	466a      	mov	r2, sp
    ef3c:	4b28      	ldr	r3, [pc, #160]	; (efe0 <hci_tx_thread+0x1a0>)
    ef3e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    ef42:	6153      	str	r3, [r2, #20]
    ef44:	4b25      	ldr	r3, [pc, #148]	; (efdc <hci_tx_thread+0x19c>)
    ef46:	e9c2 3006 	strd	r3, r0, [r2, #24]
    ef4a:	2304      	movs	r3, #4
    ef4c:	4822      	ldr	r0, [pc, #136]	; (efd8 <hci_tx_thread+0x198>)
    ef4e:	f842 3f10 	str.w	r3, [r2, #16]!
    ef52:	f00c fd8d 	bl	1ba70 <z_log_msg_static_create.constprop.0>
    ef56:	46dd      	mov	sp, fp
	z_impl_k_sem_give(sem);
    ef58:	481d      	ldr	r0, [pc, #116]	; (efd0 <hci_tx_thread+0x190>)
    ef5a:	f009 fe6b 	bl	18c34 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    ef5e:	4620      	mov	r0, r4
    ef60:	f006 fa2a 	bl	153b8 <net_buf_id>
    ef64:	220c      	movs	r2, #12
    ef66:	4b1f      	ldr	r3, [pc, #124]	; (efe4 <hci_tx_thread+0x1a4>)
    ef68:	211f      	movs	r1, #31
    ef6a:	fb02 3000 	mla	r0, r2, r0, r3
    ef6e:	4622      	mov	r2, r4
    ef70:	8840      	ldrh	r0, [r0, #2]
    ef72:	f7ff f8b1 	bl	e0d8 <hci_cmd_done>
		net_buf_unref(buf);
    ef76:	4620      	mov	r0, r4
    ef78:	f006 fad8 	bl	1552c <net_buf_unref>
	for (; count; ev++, count--) {
    ef7c:	3614      	adds	r6, #20
    ef7e:	3d01      	subs	r5, #1
    ef80:	e789      	b.n	ee96 <hci_tx_thread+0x56>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    ef82:	2b01      	cmp	r3, #1
    ef84:	d1fa      	bne.n	ef7c <hci_tx_thread+0x13c>
					conn = CONTAINER_OF(ev->fifo,
    ef86:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
    ef88:	3838      	subs	r0, #56	; 0x38
    ef8a:	f002 f953 	bl	11234 <bt_conn_process_tx>
    ef8e:	e7f5      	b.n	ef7c <hci_tx_thread+0x13c>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    ef90:	466c      	mov	r4, sp
    ef92:	b088      	sub	sp, #32
    ef94:	466a      	mov	r2, sp
    ef96:	4914      	ldr	r1, [pc, #80]	; (efe8 <hci_tx_thread+0x1a8>)
    ef98:	480f      	ldr	r0, [pc, #60]	; (efd8 <hci_tx_thread+0x198>)
    ef9a:	6151      	str	r1, [r2, #20]
    ef9c:	4913      	ldr	r1, [pc, #76]	; (efec <hci_tx_thread+0x1ac>)
		switch (ev->state) {
    ef9e:	e9c2 1306 	strd	r1, r3, [r2, #24]
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    efa2:	2304      	movs	r3, #4
    efa4:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    efa8:	f842 3f10 	str.w	r3, [r2, #16]!
    efac:	f00c fd60 	bl	1ba70 <z_log_msg_static_create.constprop.0>
    efb0:	46a5      	mov	sp, r4
    efb2:	e7e3      	b.n	ef7c <hci_tx_thread+0x13c>
    efb4:	20008390 	.word	0x20008390
    efb8:	00021761 	.word	0x00021761
    efbc:	0002190a 	.word	0x0002190a
    efc0:	000217ae 	.word	0x000217ae
    efc4:	20008144 	.word	0x20008144
    efc8:	00021626 	.word	0x00021626
    efcc:	20008000 	.word	0x20008000
    efd0:	20008120 	.word	0x20008120
    efd4:	00021b28 	.word	0x00021b28
    efd8:	0001fc74 	.word	0x0001fc74
    efdc:	00021e2e 	.word	0x00021e2e
    efe0:	00021a63 	.word	0x00021a63
    efe4:	20009b30 	.word	0x20009b30
    efe8:	00021b47 	.word	0x00021b47
    efec:	00021e37 	.word	0x00021e37

0000eff0 <hci_event_prio>:
{
    eff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eff4:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
    eff6:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
    effa:	4630      	mov	r0, r6
    effc:	f00e fdde 	bl	1dbbc <net_buf_simple_headroom>
	state->len = buf->len;
    f000:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    f004:	4605      	mov	r5, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
    f006:	f1b8 0f01 	cmp.w	r8, #1
    f00a:	d80c      	bhi.n	f026 <hci_event_prio+0x36>
    f00c:	f640 5377 	movw	r3, #3447	; 0xd77
    f010:	4a1b      	ldr	r2, [pc, #108]	; (f080 <hci_event_prio+0x90>)
    f012:	491c      	ldr	r1, [pc, #112]	; (f084 <hci_event_prio+0x94>)
    f014:	481c      	ldr	r0, [pc, #112]	; (f088 <hci_event_prio+0x98>)
    f016:	f00b facf 	bl	1a5b8 <assert_print>
    f01a:	4040      	eors	r0, r0
    f01c:	f380 8811 	msr	BASEPRI, r0
    f020:	f04f 0003 	mov.w	r0, #3
    f024:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    f026:	4630      	mov	r0, r6
    f028:	2102      	movs	r1, #2
    f02a:	f00e fdb7 	bl	1db9c <net_buf_simple_pull_mem>
    f02e:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    f030:	7800      	ldrb	r0, [r0, #0]
    f032:	f00c fce4 	bl	1b9fe <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    f036:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    f038:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    f03a:	d40c      	bmi.n	f056 <hci_event_prio+0x66>
    f03c:	f640 537b 	movw	r3, #3451	; 0xd7b
    f040:	4a0f      	ldr	r2, [pc, #60]	; (f080 <hci_event_prio+0x90>)
    f042:	4912      	ldr	r1, [pc, #72]	; (f08c <hci_event_prio+0x9c>)
    f044:	4810      	ldr	r0, [pc, #64]	; (f088 <hci_event_prio+0x98>)
    f046:	f00b fab7 	bl	1a5b8 <assert_print>
    f04a:	4040      	eors	r0, r0
    f04c:	f380 8811 	msr	BASEPRI, r0
    f050:	f04f 0003 	mov.w	r0, #3
    f054:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    f056:	2305      	movs	r3, #5
    f058:	4621      	mov	r1, r4
    f05a:	4a0d      	ldr	r2, [pc, #52]	; (f090 <hci_event_prio+0xa0>)
    f05c:	7838      	ldrb	r0, [r7, #0]
    f05e:	f7fe feef 	bl	de40 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    f062:	07b3      	lsls	r3, r6, #30
    f064:	d507      	bpl.n	f076 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
    f066:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
    f068:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    f06c:	fa13 f585 	uxtah	r5, r3, r5
    f070:	60a5      	str	r5, [r4, #8]
}
    f072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    f076:	4620      	mov	r0, r4
}
    f078:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    f07c:	f006 ba56 	b.w	1552c <net_buf_unref>
    f080:	00021761 	.word	0x00021761
    f084:	00021795 	.word	0x00021795
    f088:	000217ae 	.word	0x000217ae
    f08c:	00021b6c 	.word	0x00021b6c
    f090:	00020220 	.word	0x00020220

0000f094 <bt_recv>:
{
    f094:	b5b0      	push	{r4, r5, r7, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    f096:	7d03      	ldrb	r3, [r0, #20]
    f098:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    f09a:	2b01      	cmp	r3, #1
{
    f09c:	af00      	add	r7, sp, #0
	switch (bt_buf_get_type(buf)) {
    f09e:	d006      	beq.n	f0ae <bt_recv+0x1a>
    f0a0:	2b03      	cmp	r3, #3
    f0a2:	d112      	bne.n	f0ca <bt_recv+0x36>
			rx_queue_put(buf);
    f0a4:	f7fe fde0 	bl	dc68 <rx_queue_put>
		return 0;
    f0a8:	2000      	movs	r0, #0
}
    f0aa:	46bd      	mov	sp, r7
    f0ac:	bdb0      	pop	{r4, r5, r7, pc}
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
    f0ae:	6883      	ldr	r3, [r0, #8]
    f0b0:	7818      	ldrb	r0, [r3, #0]
    f0b2:	f00c fca4 	bl	1b9fe <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
    f0b6:	07c2      	lsls	r2, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
    f0b8:	4605      	mov	r5, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
    f0ba:	d502      	bpl.n	f0c2 <bt_recv+0x2e>
			hci_event_prio(buf);
    f0bc:	4620      	mov	r0, r4
    f0be:	f7ff ff97 	bl	eff0 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    f0c2:	07ab      	lsls	r3, r5, #30
    f0c4:	d5f0      	bpl.n	f0a8 <bt_recv+0x14>
			rx_queue_put(buf);
    f0c6:	4620      	mov	r0, r4
    f0c8:	e7ec      	b.n	f0a4 <bt_recv+0x10>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    f0ca:	466d      	mov	r5, sp
    f0cc:	b088      	sub	sp, #32
    f0ce:	466a      	mov	r2, sp
    f0d0:	4909      	ldr	r1, [pc, #36]	; (f0f8 <bt_recv+0x64>)
    f0d2:	480a      	ldr	r0, [pc, #40]	; (f0fc <bt_recv+0x68>)
    f0d4:	6151      	str	r1, [r2, #20]
    f0d6:	490a      	ldr	r1, [pc, #40]	; (f100 <bt_recv+0x6c>)
	switch (bt_buf_get_type(buf)) {
    f0d8:	e9c2 1306 	strd	r1, r3, [r2, #24]
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    f0dc:	2304      	movs	r3, #4
    f0de:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    f0e2:	f842 3f10 	str.w	r3, [r2, #16]!
    f0e6:	f00c fcc3 	bl	1ba70 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
    f0ea:	4620      	mov	r0, r4
    f0ec:	46ad      	mov	sp, r5
    f0ee:	f006 fa1d 	bl	1552c <net_buf_unref>
		return -EINVAL;
    f0f2:	f06f 0015 	mvn.w	r0, #21
    f0f6:	e7d8      	b.n	f0aa <bt_recv+0x16>
    f0f8:	00021b85 	.word	0x00021b85
    f0fc:	0001fc74 	.word	0x0001fc74
    f100:	00022082 	.word	0x00022082

0000f104 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    f104:	4a08      	ldr	r2, [pc, #32]	; (f128 <bt_hci_driver_register+0x24>)
{
    f106:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    f108:	f8d2 015c 	ldr.w	r0, [r2, #348]	; 0x15c
    f10c:	b930      	cbnz	r0, f11c <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    f10e:	68d9      	ldr	r1, [r3, #12]
    f110:	b139      	cbz	r1, f122 <bt_hci_driver_register+0x1e>
    f112:	6959      	ldr	r1, [r3, #20]
    f114:	b129      	cbz	r1, f122 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    f116:	f8c2 315c 	str.w	r3, [r2, #348]	; 0x15c
	return 0;
    f11a:	4770      	bx	lr
		return -EALREADY;
    f11c:	f06f 0077 	mvn.w	r0, #119	; 0x77
    f120:	4770      	bx	lr
		return -EINVAL;
    f122:	f06f 0015 	mvn.w	r0, #21
}
    f126:	4770      	bx	lr
    f128:	20008000 	.word	0x20008000

0000f12c <bt_finalize_init>:
{
    f12c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    f130:	4d48      	ldr	r5, [pc, #288]	; (f254 <bt_finalize_init+0x128>)
{
    f132:	b083      	sub	sp, #12
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    f134:	2104      	movs	r1, #4
    f136:	af00      	add	r7, sp, #0
    f138:	4847      	ldr	r0, [pc, #284]	; (f258 <bt_finalize_init+0x12c>)
    f13a:	f00c fc8e 	bl	1ba5a <atomic_or>
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    f13e:	4c47      	ldr	r4, [pc, #284]	; (f25c <bt_finalize_init+0x130>)
    f140:	79ea      	ldrb	r2, [r5, #7]
    f142:	4b47      	ldr	r3, [pc, #284]	; (f260 <bt_finalize_init+0x134>)
    f144:	4628      	mov	r0, r5
    f146:	2a01      	cmp	r2, #1
    f148:	bf88      	it	hi
    f14a:	461c      	movhi	r4, r3
    f14c:	46e8      	mov	r8, sp
    f14e:	f7fe fbc5 	bl	d8dc <bt_addr_le_str>
    f152:	b08a      	sub	sp, #40	; 0x28
    f154:	466b      	mov	r3, sp
    f156:	4943      	ldr	r1, [pc, #268]	; (f264 <bt_finalize_init+0x138>)
    f158:	4e43      	ldr	r6, [pc, #268]	; (f268 <bt_finalize_init+0x13c>)
    f15a:	6159      	str	r1, [r3, #20]
    f15c:	4943      	ldr	r1, [pc, #268]	; (f26c <bt_finalize_init+0x140>)
    f15e:	e9c3 6406 	strd	r6, r4, [r3, #24]
    f162:	6079      	str	r1, [r7, #4]
    f164:	6218      	str	r0, [r3, #32]
    f166:	f103 0210 	add.w	r2, r3, #16
    f16a:	1d38      	adds	r0, r7, #4
    f16c:	f103 0123 	add.w	r1, r3, #35	; 0x23
    f170:	f103 0427 	add.w	r4, r3, #39	; 0x27
    f174:	f810 cb01 	ldrb.w	ip, [r0], #1
    f178:	f801 cf01 	strb.w	ip, [r1, #1]!
    f17c:	42a1      	cmp	r1, r4
    f17e:	d1f9      	bne.n	f174 <bt_finalize_init+0x48>
	for (i = 1; i < bt_dev.id_count; i++) {
    f180:	2401      	movs	r4, #1
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    f182:	493b      	ldr	r1, [pc, #236]	; (f270 <bt_finalize_init+0x144>)
    f184:	483b      	ldr	r0, [pc, #236]	; (f274 <bt_finalize_init+0x148>)
    f186:	6119      	str	r1, [r3, #16]
    f188:	f44f 5143 	mov.w	r1, #12480	; 0x30c0
    f18c:	f00c fc70 	bl	1ba70 <z_log_msg_static_create.constprop.0>
		BT_INFO("Identity[%d]: %s",
    f190:	f8df 90e4 	ldr.w	r9, [pc, #228]	; f278 <bt_finalize_init+0x14c>
    f194:	46c5      	mov	sp, r8
    f196:	f8df a0dc 	ldr.w	sl, [pc, #220]	; f274 <bt_finalize_init+0x148>
    f19a:	f8df 80b8 	ldr.w	r8, [pc, #184]	; f254 <bt_finalize_init+0x128>
	for (i = 1; i < bt_dev.id_count; i++) {
    f19e:	79ea      	ldrb	r2, [r5, #7]
    f1a0:	f108 0807 	add.w	r8, r8, #7
    f1a4:	4294      	cmp	r4, r2
    f1a6:	db3d      	blt.n	f224 <bt_finalize_init+0xf8>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    f1a8:	f895 8068 	ldrb.w	r8, [r5, #104]	; 0x68
    f1ac:	46ea      	mov	sl, sp
    f1ae:	4640      	mov	r0, r8
    f1b0:	f7fe fc86 	bl	dac0 <ver_str>
    f1b4:	b08c      	sub	sp, #48	; 0x30
    f1b6:	466c      	mov	r4, sp
    f1b8:	f8b5 206a 	ldrh.w	r2, [r5, #106]	; 0x6a
    f1bc:	f8b5 306e 	ldrh.w	r3, [r5, #110]	; 0x6e
    f1c0:	f240 3901 	movw	r9, #769	; 0x301
    f1c4:	e9c4 0807 	strd	r0, r8, [r4, #28]
    f1c8:	46a0      	mov	r8, r4
    f1ca:	e9c4 2309 	strd	r2, r3, [r4, #36]	; 0x24
    f1ce:	492b      	ldr	r1, [pc, #172]	; (f27c <bt_finalize_init+0x150>)
    f1d0:	4b2b      	ldr	r3, [pc, #172]	; (f280 <bt_finalize_init+0x154>)
    f1d2:	e9c4 1605 	strd	r1, r6, [r4, #20]
    f1d6:	f8a4 902c 	strh.w	r9, [r4, #44]	; 0x2c
    f1da:	f848 3f10 	str.w	r3, [r8, #16]!
    f1de:	4642      	mov	r2, r8
    f1e0:	f44f 5173 	mov.w	r1, #15552	; 0x3cc0
    f1e4:	4823      	ldr	r0, [pc, #140]	; (f274 <bt_finalize_init+0x148>)
    f1e6:	f00c fc43 	bl	1ba70 <z_log_msg_static_create.constprop.0>
    f1ea:	46d5      	mov	sp, sl
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    f1ec:	f895 a069 	ldrb.w	sl, [r5, #105]	; 0x69
    f1f0:	4650      	mov	r0, sl
    f1f2:	f7fe fc65 	bl	dac0 <ver_str>
    f1f6:	46a5      	mov	sp, r4
    f1f8:	f8b5 306c 	ldrh.w	r3, [r5, #108]	; 0x6c
    f1fc:	4a21      	ldr	r2, [pc, #132]	; (f284 <bt_finalize_init+0x158>)
    f1fe:	6263      	str	r3, [r4, #36]	; 0x24
    f200:	4b21      	ldr	r3, [pc, #132]	; (f288 <bt_finalize_init+0x15c>)
    f202:	e9c4 2605 	strd	r2, r6, [r4, #20]
    f206:	e9c4 0a07 	strd	r0, sl, [r4, #28]
    f20a:	4642      	mov	r2, r8
    f20c:	f44f 5153 	mov.w	r1, #13504	; 0x34c0
    f210:	4818      	ldr	r0, [pc, #96]	; (f274 <bt_finalize_init+0x148>)
    f212:	f8a4 9028 	strh.w	r9, [r4, #40]	; 0x28
    f216:	6123      	str	r3, [r4, #16]
    f218:	f00c fc2a 	bl	1ba70 <z_log_msg_static_create.constprop.0>
}
    f21c:	370c      	adds	r7, #12
    f21e:	46bd      	mov	sp, r7
    f220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		BT_INFO("Identity[%d]: %s",
    f224:	4640      	mov	r0, r8
    f226:	f7fe fb59 	bl	d8dc <bt_addr_le_str>
    f22a:	46eb      	mov	fp, sp
    f22c:	b08a      	sub	sp, #40	; 0x28
    f22e:	466a      	mov	r2, sp
    f230:	f240 4102 	movw	r1, #1026	; 0x402
    f234:	4b15      	ldr	r3, [pc, #84]	; (f28c <bt_finalize_init+0x160>)
    f236:	e9c2 4007 	strd	r4, r0, [r2, #28]
    f23a:	8491      	strh	r1, [r2, #36]	; 0x24
    f23c:	e9c2 3605 	strd	r3, r6, [r2, #20]
    f240:	f44f 5133 	mov.w	r1, #11456	; 0x2cc0
    f244:	4650      	mov	r0, sl
    f246:	f842 9f10 	str.w	r9, [r2, #16]!
    f24a:	f00c fc11 	bl	1ba70 <z_log_msg_static_create.constprop.0>
	for (i = 1; i < bt_dev.id_count; i++) {
    f24e:	3401      	adds	r4, #1
    f250:	46dd      	mov	sp, fp
    f252:	e7a4      	b.n	f19e <bt_finalize_init+0x72>
    f254:	20008000 	.word	0x20008000
    f258:	200080cc 	.word	0x200080cc
    f25c:	00020926 	.word	0x00020926
    f260:	00021b9d 	.word	0x00021b9d
    f264:	00021ba1 	.word	0x00021ba1
    f268:	00021f3f 	.word	0x00021f3f
    f26c:	04020301 	.word	0x04020301
    f270:	02000005 	.word	0x02000005
    f274:	0001fc74 	.word	0x0001fc74
    f278:	01000005 	.word	0x01000005
    f27c:	00021bc9 	.word	0x00021bc9
    f280:	01000007 	.word	0x01000007
    f284:	00021c0b 	.word	0x00021c0b
    f288:	01000006 	.word	0x01000006
    f28c:	00021bb4 	.word	0x00021bb4

0000f290 <init_work>:
{
    f290:	b510      	push	{r4, lr}
	err = bt_init();
    f292:	f7f9 fd79 	bl	8d88 <bt_init>
	if (ready_cb) {
    f296:	4b03      	ldr	r3, [pc, #12]	; (f2a4 <init_work+0x14>)
    f298:	681b      	ldr	r3, [r3, #0]
    f29a:	b113      	cbz	r3, f2a2 <init_work+0x12>
}
    f29c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    f2a0:	4718      	bx	r3
}
    f2a2:	bd10      	pop	{r4, pc}
    f2a4:	20009ba8 	.word	0x20009ba8

0000f2a8 <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
    f2a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    f2aa:	b089      	sub	sp, #36	; 0x24
	int err;

	if (!bt_dev.drv) {
    f2ac:	4d3e      	ldr	r5, [pc, #248]	; (f3a8 <bt_enable+0x100>)
{
    f2ae:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    f2b0:	f8d5 315c 	ldr.w	r3, [r5, #348]	; 0x15c
{
    f2b4:	af08      	add	r7, sp, #32
	if (!bt_dev.drv) {
    f2b6:	b9ab      	cbnz	r3, f2e4 <bt_enable+0x3c>
		BT_ERR("No HCI driver registered");
    f2b8:	466c      	mov	r4, sp
    f2ba:	b088      	sub	sp, #32
    f2bc:	4622      	mov	r2, r4
    f2be:	4b3b      	ldr	r3, [pc, #236]	; (f3ac <bt_enable+0x104>)
    f2c0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    f2c4:	6163      	str	r3, [r4, #20]
    f2c6:	4b3a      	ldr	r3, [pc, #232]	; (f3b0 <bt_enable+0x108>)
    f2c8:	483a      	ldr	r0, [pc, #232]	; (f3b4 <bt_enable+0x10c>)
    f2ca:	61a3      	str	r3, [r4, #24]
    f2cc:	2303      	movs	r3, #3
    f2ce:	f842 3f10 	str.w	r3, [r2, #16]!
    f2d2:	f00c fbcd 	bl	1ba70 <z_log_msg_static_create.constprop.0>
    f2d6:	46a5      	mov	sp, r4
		return -ENODEV;
    f2d8:	f06f 0412 	mvn.w	r4, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    f2dc:	4620      	mov	r0, r4
    f2de:	3704      	adds	r7, #4
    f2e0:	46bd      	mov	sp, r7
    f2e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    f2e4:	f06f 0102 	mvn.w	r1, #2
    f2e8:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
    f2ec:	f00c fbc3 	bl	1ba76 <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    f2f0:	2101      	movs	r1, #1
    f2f2:	f00c fbb2 	bl	1ba5a <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    f2f6:	ea10 0401 	ands.w	r4, r0, r1
    f2fa:	d152      	bne.n	f3a2 <bt_enable+0xfa>
	ready_cb = cb;
    f2fc:	4b2e      	ldr	r3, [pc, #184]	; (f3b8 <bt_enable+0x110>)
    f2fe:	601e      	str	r6, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
    f300:	460a      	mov	r2, r1
    f302:	f505 7090 	add.w	r0, r5, #288	; 0x120
    f306:	f00f fdd4 	bl	1eeb2 <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
    f30a:	f505 70a2 	add.w	r0, r5, #324	; 0x144
    f30e:	f00f fd70 	bl	1edf2 <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    f312:	2200      	movs	r2, #0
    f314:	2300      	movs	r3, #0
    f316:	e9cd 2306 	strd	r2, r3, [sp, #24]
    f31a:	f06f 0308 	mvn.w	r3, #8
    f31e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    f322:	e9cd 4302 	strd	r4, r3, [sp, #8]
    f326:	e9cd 4400 	strd	r4, r4, [sp]
    f32a:	4b24      	ldr	r3, [pc, #144]	; (f3bc <bt_enable+0x114>)
    f32c:	4924      	ldr	r1, [pc, #144]	; (f3c0 <bt_enable+0x118>)
    f32e:	9404      	str	r4, [sp, #16]
    f330:	4824      	ldr	r0, [pc, #144]	; (f3c4 <bt_enable+0x11c>)
    f332:	f009 faf1 	bl	18918 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    f336:	4924      	ldr	r1, [pc, #144]	; (f3c8 <bt_enable+0x120>)
    f338:	4822      	ldr	r0, [pc, #136]	; (f3c4 <bt_enable+0x11c>)
    f33a:	f00f fccb 	bl	1ecd4 <z_impl_k_thread_name_set>
	k_work_queue_init(&bt_workq);
    f33e:	4823      	ldr	r0, [pc, #140]	; (f3cc <bt_enable+0x124>)
    f340:	f00f fe77 	bl	1f032 <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
    f344:	f06f 0307 	mvn.w	r3, #7
    f348:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
    f34c:	4920      	ldr	r1, [pc, #128]	; (f3d0 <bt_enable+0x128>)
    f34e:	481f      	ldr	r0, [pc, #124]	; (f3cc <bt_enable+0x124>)
    f350:	9400      	str	r4, [sp, #0]
    f352:	f009 fdf1 	bl	18f38 <k_work_queue_start>
    f356:	491f      	ldr	r1, [pc, #124]	; (f3d4 <bt_enable+0x12c>)
    f358:	481c      	ldr	r0, [pc, #112]	; (f3cc <bt_enable+0x124>)
    f35a:	f00f fcbb 	bl	1ecd4 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
    f35e:	f8d5 315c 	ldr.w	r3, [r5, #348]	; 0x15c
    f362:	68db      	ldr	r3, [r3, #12]
    f364:	4798      	blx	r3
	if (err) {
    f366:	4604      	mov	r4, r0
    f368:	b188      	cbz	r0, f38e <bt_enable+0xe6>
		BT_ERR("HCI driver open failed (%d)", err);
    f36a:	466d      	mov	r5, sp
    f36c:	b088      	sub	sp, #32
    f36e:	462a      	mov	r2, r5
    f370:	4b19      	ldr	r3, [pc, #100]	; (f3d8 <bt_enable+0x130>)
    f372:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    f376:	616b      	str	r3, [r5, #20]
    f378:	4b0d      	ldr	r3, [pc, #52]	; (f3b0 <bt_enable+0x108>)
    f37a:	e9c5 3006 	strd	r3, r0, [r5, #24]
    f37e:	2304      	movs	r3, #4
    f380:	480c      	ldr	r0, [pc, #48]	; (f3b4 <bt_enable+0x10c>)
    f382:	f842 3f10 	str.w	r3, [r2, #16]!
    f386:	f00c fb73 	bl	1ba70 <z_log_msg_static_create.constprop.0>
    f38a:	46ad      	mov	sp, r5
		return err;
    f38c:	e7a6      	b.n	f2dc <bt_enable+0x34>
	if (!cb) {
    f38e:	b91e      	cbnz	r6, f398 <bt_enable+0xf0>
		return bt_init();
    f390:	f7f9 fcfa 	bl	8d88 <bt_init>
    f394:	4604      	mov	r4, r0
    f396:	e7a1      	b.n	f2dc <bt_enable+0x34>
	k_work_submit(&bt_dev.init);
    f398:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
    f39c:	f009 fdc6 	bl	18f2c <k_work_submit>
	return 0;
    f3a0:	e79c      	b.n	f2dc <bt_enable+0x34>
		return -EALREADY;
    f3a2:	f06f 0477 	mvn.w	r4, #119	; 0x77
    f3a6:	e799      	b.n	f2dc <bt_enable+0x34>
    f3a8:	20008000 	.word	0x20008000
    f3ac:	00021da3 	.word	0x00021da3
    f3b0:	00021e46 	.word	0x00021e46
    f3b4:	0001fc74 	.word	0x0001fc74
    f3b8:	20009ba8 	.word	0x20009ba8
    f3bc:	0000ee41 	.word	0x0000ee41
    f3c0:	2000b890 	.word	0x2000b890
    f3c4:	20009320 	.word	0x20009320
    f3c8:	00021dc0 	.word	0x00021dc0
    f3cc:	200093a8 	.word	0x200093a8
    f3d0:	2000bc90 	.word	0x2000bc90
    f3d4:	00021dc6 	.word	0x00021dc6
    f3d8:	00021dcc 	.word	0x00021dcc

0000f3dc <bt_is_ready>:
    f3dc:	4b02      	ldr	r3, [pc, #8]	; (f3e8 <bt_is_ready+0xc>)
    f3de:	e8d3 0faf 	lda	r0, [r3]
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
    f3e2:	f3c0 0080 	ubfx	r0, r0, #2, #1
    f3e6:	4770      	bx	lr
    f3e8:	200080cc 	.word	0x200080cc

0000f3ec <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
    f3ec:	4800      	ldr	r0, [pc, #0]	; (f3f0 <bt_get_name+0x4>)
    f3ee:	4770      	bx	lr
    f3f0:	00021dec 	.word	0x00021dec

0000f3f4 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
    f3f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f3f6:	4606      	mov	r6, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    f3f8:	2500      	movs	r5, #0
    f3fa:	4f09      	ldr	r7, [pc, #36]	; (f420 <id_find+0x2c>)
    f3fc:	79fb      	ldrb	r3, [r7, #7]
    f3fe:	b2ec      	uxtb	r4, r5
    f400:	42a3      	cmp	r3, r4
    f402:	d802      	bhi.n	f40a <id_find+0x16>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    f404:	f06f 0001 	mvn.w	r0, #1
    f408:	e009      	b.n	f41e <id_find+0x2a>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
    f40a:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    f40e:	4630      	mov	r0, r6
    f410:	4439      	add	r1, r7
    f412:	f00c fbf4 	bl	1bbfe <bt_addr_le_eq>
    f416:	3501      	adds	r5, #1
    f418:	2800      	cmp	r0, #0
    f41a:	d0ef      	beq.n	f3fc <id_find+0x8>
    f41c:	4620      	mov	r0, r4
}
    f41e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f420:	20008000 	.word	0x20008000

0000f424 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    f424:	b537      	push	{r0, r1, r2, r4, r5, lr}
    f426:	4604      	mov	r4, r0
{
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    f428:	460d      	mov	r5, r1
    f42a:	b171      	cbz	r1, f44a <id_create.constprop.0+0x26>
    f42c:	4628      	mov	r0, r5
    f42e:	4912      	ldr	r1, [pc, #72]	; (f478 <id_create.constprop.0+0x54>)
    f430:	f00c fbe5 	bl	1bbfe <bt_addr_le_eq>
    f434:	b948      	cbnz	r0, f44a <id_create.constprop.0+0x26>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    f436:	4629      	mov	r1, r5
    f438:	4810      	ldr	r0, [pc, #64]	; (f47c <id_create.constprop.0+0x58>)
    f43a:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    f43e:	4420      	add	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    f440:	f00c fbe5 	bl	1bc0e <bt_addr_le_copy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
    f444:	2000      	movs	r0, #0
}
    f446:	b003      	add	sp, #12
    f448:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
    f44a:	4668      	mov	r0, sp
    f44c:	f00c fac9 	bl	1b9e2 <bt_addr_le_create_static>
			if (err) {
    f450:	2800      	cmp	r0, #0
    f452:	d1f8      	bne.n	f446 <id_create.constprop.0+0x22>
		} while (id_find(&new_addr) >= 0);
    f454:	4668      	mov	r0, sp
    f456:	f7ff ffcd 	bl	f3f4 <id_find>
    f45a:	2800      	cmp	r0, #0
    f45c:	daf5      	bge.n	f44a <id_create.constprop.0+0x26>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    f45e:	4b07      	ldr	r3, [pc, #28]	; (f47c <id_create.constprop.0+0x58>)
    f460:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    f464:	441c      	add	r4, r3
    f466:	4669      	mov	r1, sp
    f468:	4620      	mov	r0, r4
    f46a:	f00c fbd0 	bl	1bc0e <bt_addr_le_copy>
		if (addr) {
    f46e:	2d00      	cmp	r5, #0
    f470:	d0e8      	beq.n	f444 <id_create.constprop.0+0x20>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    f472:	4621      	mov	r1, r4
    f474:	4628      	mov	r0, r5
    f476:	e7e3      	b.n	f440 <id_create.constprop.0+0x1c>
    f478:	000215de 	.word	0x000215de
    f47c:	20008000 	.word	0x20008000

0000f480 <bt_id_add.part.0>:
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
    f480:	2100      	movs	r1, #0
void bt_id_add(struct bt_keys *keys)
    f482:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f486:	b083      	sub	sp, #12
    f488:	4604      	mov	r4, r0
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
    f48a:	2206      	movs	r2, #6
    f48c:	4608      	mov	r0, r1
void bt_id_add(struct bt_keys *keys)
    f48e:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
    f490:	f001 fdea 	bl	11068 <bt_conn_lookup_state_le>
	if (conn) {
    f494:	4606      	mov	r6, r0
    f496:	b190      	cbz	r0, f4be <bt_id_add.part.0+0x3e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    f498:	4b5c      	ldr	r3, [pc, #368]	; (f60c <bt_id_add.part.0+0x18c>)
    f49a:	e8d3 1fef 	ldaex	r1, [r3]
    f49e:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
    f4a2:	e8c3 1fe2 	stlex	r2, r1, [r3]
    f4a6:	2a00      	cmp	r2, #0
    f4a8:	d1f7      	bne.n	f49a <bt_id_add.part.0+0x1a>
	keys->state |= flag;
    f4aa:	7a23      	ldrb	r3, [r4, #8]
    f4ac:	f043 0301 	orr.w	r3, r3, #1
    f4b0:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
    f4b2:	f00c fe14 	bl	1c0de <bt_conn_unref>
}
    f4b6:	370c      	adds	r7, #12
    f4b8:	46bd      	mov	sp, r7
    f4ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (bt_dev.le.rl_entries) {
    f4be:	4d54      	ldr	r5, [pc, #336]	; (f610 <bt_id_add.part.0+0x190>)
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
    f4c0:	4601      	mov	r1, r0
    f4c2:	4854      	ldr	r0, [pc, #336]	; (f614 <bt_id_add.part.0+0x194>)
    f4c4:	f000 fcb8 	bl	fe38 <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries) {
    f4c8:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
    f4cc:	b1a3      	cbz	r3, f4f8 <bt_id_add.part.0+0x78>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    f4ce:	4630      	mov	r0, r6
    f4d0:	f00c fbdd 	bl	1bc8e <addr_res_enable>
		if (err) {
    f4d4:	b180      	cbz	r0, f4f8 <bt_id_add.part.0+0x78>
			BT_WARN("Failed to disable address resolution");
    f4d6:	466c      	mov	r4, sp
    f4d8:	b088      	sub	sp, #32
    f4da:	466a      	mov	r2, sp
    f4dc:	4b4e      	ldr	r3, [pc, #312]	; (f618 <bt_id_add.part.0+0x198>)
    f4de:	6153      	str	r3, [r2, #20]
    f4e0:	4b4e      	ldr	r3, [pc, #312]	; (f61c <bt_id_add.part.0+0x19c>)
		BT_WARN("Set privacy mode command is not supported");
    f4e2:	6193      	str	r3, [r2, #24]
    f4e4:	2303      	movs	r3, #3
    f4e6:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    f4ea:	f842 3f10 	str.w	r3, [r2, #16]!
		BT_ERR("Failed to set privacy mode");
    f4ee:	484c      	ldr	r0, [pc, #304]	; (f620 <bt_id_add.part.0+0x1a0>)
    f4f0:	f00c fbca 	bl	1bc88 <z_log_msg_static_create.constprop.0>
    f4f4:	46a5      	mov	sp, r4
		goto done;
    f4f6:	e02c      	b.n	f552 <bt_id_add.part.0+0xd2>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
    f4f8:	f895 2119 	ldrb.w	r2, [r5, #281]	; 0x119
    f4fc:	f895 3118 	ldrb.w	r3, [r5, #280]	; 0x118
    f500:	429a      	cmp	r2, r3
    f502:	d138      	bne.n	f576 <bt_id_add.part.0+0xf6>
		BT_WARN("Resolving list size exceeded. Switching to host.");
    f504:	466e      	mov	r6, sp
    f506:	b088      	sub	sp, #32
    f508:	466a      	mov	r2, sp
    f50a:	f04f 0803 	mov.w	r8, #3
    f50e:	4b45      	ldr	r3, [pc, #276]	; (f624 <bt_id_add.part.0+0x1a4>)
    f510:	f8df 9108 	ldr.w	r9, [pc, #264]	; f61c <bt_id_add.part.0+0x19c>
    f514:	6153      	str	r3, [r2, #20]
    f516:	f8c2 9018 	str.w	r9, [r2, #24]
    f51a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    f51e:	4840      	ldr	r0, [pc, #256]	; (f620 <bt_id_add.part.0+0x1a0>)
    f520:	f842 8f10 	str.w	r8, [r2, #16]!
    f524:	f00c fbb0 	bl	1bc88 <z_log_msg_static_create.constprop.0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
    f528:	2200      	movs	r2, #0
    f52a:	46b5      	mov	sp, r6
    f52c:	4611      	mov	r1, r2
    f52e:	f242 0029 	movw	r0, #8233	; 0x2029
    f532:	f7fe ff7d 	bl	e430 <bt_hci_cmd_send_sync>
		if (err) {
    f536:	b1a0      	cbz	r0, f562 <bt_id_add.part.0+0xe2>
			BT_ERR("Failed to clear resolution list");
    f538:	b088      	sub	sp, #32
    f53a:	466a      	mov	r2, sp
    f53c:	4b3a      	ldr	r3, [pc, #232]	; (f628 <bt_id_add.part.0+0x1a8>)
    f53e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    f542:	e9c2 3905 	strd	r3, r9, [r2, #20]
    f546:	4836      	ldr	r0, [pc, #216]	; (f620 <bt_id_add.part.0+0x1a0>)
    f548:	f842 8f10 	str.w	r8, [r2, #16]!
    f54c:	f00c fb9c 	bl	1bc88 <z_log_msg_static_create.constprop.0>
    f550:	46b5      	mov	sp, r6
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    f552:	2001      	movs	r0, #1
    f554:	f00c fb9b 	bl	1bc8e <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
    f558:	2100      	movs	r1, #0
    f55a:	4834      	ldr	r0, [pc, #208]	; (f62c <bt_id_add.part.0+0x1ac>)
    f55c:	f000 fc6c 	bl	fe38 <bt_le_ext_adv_foreach>
    f560:	e7a9      	b.n	f4b6 <bt_id_add.part.0+0x36>
		bt_dev.le.rl_entries++;
    f562:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
    f566:	3301      	adds	r3, #1
    f568:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
    f56c:	7a23      	ldrb	r3, [r4, #8]
    f56e:	f043 0304 	orr.w	r3, r3, #4
    f572:	7223      	strb	r3, [r4, #8]
		goto done;
    f574:	e7ed      	b.n	f552 <bt_id_add.part.0+0xd2>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
    f576:	4622      	mov	r2, r4
    f578:	f104 0801 	add.w	r8, r4, #1
    f57c:	4641      	mov	r1, r8
    f57e:	f812 0b2a 	ldrb.w	r0, [r2], #42
    f582:	f00c fb47 	bl	1bc14 <hci_id_add>
	if (err) {
    f586:	4606      	mov	r6, r0
    f588:	b160      	cbz	r0, f5a4 <bt_id_add.part.0+0x124>
		BT_ERR("Failed to add IRK to controller");
    f58a:	466c      	mov	r4, sp
    f58c:	b088      	sub	sp, #32
    f58e:	466a      	mov	r2, sp
    f590:	4b27      	ldr	r3, [pc, #156]	; (f630 <bt_id_add.part.0+0x1b0>)
		BT_ERR("Failed to set privacy mode");
    f592:	6153      	str	r3, [r2, #20]
    f594:	4b21      	ldr	r3, [pc, #132]	; (f61c <bt_id_add.part.0+0x19c>)
    f596:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    f59a:	6193      	str	r3, [r2, #24]
    f59c:	2303      	movs	r3, #3
    f59e:	f842 3f10 	str.w	r3, [r2, #16]!
    f5a2:	e7a4      	b.n	f4ee <bt_id_add.part.0+0x6e>
	bt_dev.le.rl_entries++;
    f5a4:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
    f5a8:	3301      	adds	r3, #1
    f5aa:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
	keys->state |= BT_KEYS_ID_ADDED;
    f5ae:	7a23      	ldrb	r3, [r4, #8]
    f5b0:	f043 0304 	orr.w	r3, r3, #4
    f5b4:	7223      	strb	r3, [r4, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
    f5b6:	f895 309f 	ldrb.w	r3, [r5, #159]	; 0x9f
    f5ba:	075b      	lsls	r3, r3, #29
    f5bc:	d406      	bmi.n	f5cc <bt_id_add.part.0+0x14c>
		BT_WARN("Set privacy mode command is not supported");
    f5be:	466c      	mov	r4, sp
    f5c0:	b088      	sub	sp, #32
    f5c2:	466a      	mov	r2, sp
    f5c4:	4b1b      	ldr	r3, [pc, #108]	; (f634 <bt_id_add.part.0+0x1b4>)
    f5c6:	6153      	str	r3, [r2, #20]
    f5c8:	4b1b      	ldr	r3, [pc, #108]	; (f638 <bt_id_add.part.0+0x1b8>)
    f5ca:	e78a      	b.n	f4e2 <bt_id_add.part.0+0x62>
	bt_addr_le_copy(&cp.id_addr, addr);
    f5cc:	4641      	mov	r1, r8
    f5ce:	4638      	mov	r0, r7
    f5d0:	f00c fb1d 	bl	1bc0e <bt_addr_le_copy>
	cp.mode = mode;
    f5d4:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    f5d6:	2108      	movs	r1, #8
    f5d8:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
    f5dc:	71fb      	strb	r3, [r7, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    f5de:	f7fe feed 	bl	e3bc <bt_hci_cmd_create>
	if (!buf) {
    f5e2:	4604      	mov	r4, r0
    f5e4:	b160      	cbz	r0, f600 <bt_id_add.part.0+0x180>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    f5e6:	2208      	movs	r2, #8
    f5e8:	4639      	mov	r1, r7
    f5ea:	4410      	add	r0, r2
    f5ec:	f00e faac 	bl	1db48 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
    f5f0:	4632      	mov	r2, r6
    f5f2:	4621      	mov	r1, r4
    f5f4:	f242 004e 	movw	r0, #8270	; 0x204e
    f5f8:	f7fe ff1a 	bl	e430 <bt_hci_cmd_send_sync>
	if (err) {
    f5fc:	2800      	cmp	r0, #0
    f5fe:	d0a8      	beq.n	f552 <bt_id_add.part.0+0xd2>
		BT_ERR("Failed to set privacy mode");
    f600:	466c      	mov	r4, sp
    f602:	b088      	sub	sp, #32
    f604:	466a      	mov	r2, sp
    f606:	4b0d      	ldr	r3, [pc, #52]	; (f63c <bt_id_add.part.0+0x1bc>)
    f608:	e7c3      	b.n	f592 <bt_id_add.part.0+0x112>
    f60a:	bf00      	nop
    f60c:	200080cc 	.word	0x200080cc
    f610:	20008000 	.word	0x20008000
    f614:	0001bd3f 	.word	0x0001bd3f
    f618:	000221c2 	.word	0x000221c2
    f61c:	000224a6 	.word	0x000224a6
    f620:	0001fc84 	.word	0x0001fc84
    f624:	000221eb 	.word	0x000221eb
    f628:	00022220 	.word	0x00022220
    f62c:	0001bcbf 	.word	0x0001bcbf
    f630:	00022244 	.word	0x00022244
    f634:	00022268 	.word	0x00022268
    f638:	00022492 	.word	0x00022492
    f63c:	00022296 	.word	0x00022296

0000f640 <set_random_address>:
{
    f640:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
    f642:	2206      	movs	r2, #6
    f644:	4912      	ldr	r1, [pc, #72]	; (f690 <set_random_address+0x50>)
    f646:	4605      	mov	r5, r0
    f648:	f00c f933 	bl	1b8b2 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    f64c:	b1d8      	cbz	r0, f686 <set_random_address+0x46>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    f64e:	2106      	movs	r1, #6
    f650:	f242 0005 	movw	r0, #8197	; 0x2005
    f654:	f7fe feb2 	bl	e3bc <bt_hci_cmd_create>
	if (!buf) {
    f658:	4604      	mov	r4, r0
    f65a:	b1b0      	cbz	r0, f68a <set_random_address+0x4a>
    f65c:	2206      	movs	r2, #6
    f65e:	4629      	mov	r1, r5
    f660:	3008      	adds	r0, #8
    f662:	f00e fa71 	bl	1db48 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    f666:	2200      	movs	r2, #0
    f668:	4621      	mov	r1, r4
    f66a:	f242 0005 	movw	r0, #8197	; 0x2005
    f66e:	f7fe fedf 	bl	e430 <bt_hci_cmd_send_sync>
	if (err) {
    f672:	b948      	cbnz	r0, f688 <set_random_address+0x48>
	memcpy(dst, src, sizeof(*dst));
    f674:	2206      	movs	r2, #6
    f676:	4629      	mov	r1, r5
    f678:	4805      	ldr	r0, [pc, #20]	; (f690 <set_random_address+0x50>)
    f67a:	f00c f92a 	bl	1b8d2 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    f67e:	2201      	movs	r2, #1
    f680:	4b04      	ldr	r3, [pc, #16]	; (f694 <set_random_address+0x54>)
    f682:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		return 0;
    f686:	2000      	movs	r0, #0
}
    f688:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    f68a:	f06f 0068 	mvn.w	r0, #104	; 0x68
    f68e:	e7fb      	b.n	f688 <set_random_address+0x48>
    f690:	20008061 	.word	0x20008061
    f694:	20008000 	.word	0x20008000

0000f698 <bt_id_del.part.0>:
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
    f698:	2100      	movs	r1, #0
void bt_id_del(struct bt_keys *keys)
    f69a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
    f69e:	2206      	movs	r2, #6
void bt_id_del(struct bt_keys *keys)
    f6a0:	4604      	mov	r4, r0
    f6a2:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
    f6a4:	4608      	mov	r0, r1
    f6a6:	f001 fcdf 	bl	11068 <bt_conn_lookup_state_le>
	if (conn) {
    f6aa:	4605      	mov	r5, r0
    f6ac:	b188      	cbz	r0, f6d2 <bt_id_del.part.0+0x3a>
    f6ae:	4b3d      	ldr	r3, [pc, #244]	; (f7a4 <bt_id_del.part.0+0x10c>)
    f6b0:	e8d3 1fef 	ldaex	r1, [r3]
    f6b4:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
    f6b8:	e8c3 1fe2 	stlex	r2, r1, [r3]
    f6bc:	2a00      	cmp	r2, #0
    f6be:	d1f7      	bne.n	f6b0 <bt_id_del.part.0+0x18>
	keys->state |= flag;
    f6c0:	7a23      	ldrb	r3, [r4, #8]
    f6c2:	f043 0302 	orr.w	r3, r3, #2
    f6c6:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
    f6c8:	f00c fd09 	bl	1c0de <bt_conn_unref>
}
    f6cc:	46bd      	mov	sp, r7
    f6ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
    f6d2:	4601      	mov	r1, r0
    f6d4:	4834      	ldr	r0, [pc, #208]	; (f7a8 <bt_id_del.part.0+0x110>)
    f6d6:	f000 fbaf 	bl	fe38 <bt_le_ext_adv_foreach>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    f6da:	4628      	mov	r0, r5
    f6dc:	f00c fad7 	bl	1bc8e <addr_res_enable>
	if (err) {
    f6e0:	4d32      	ldr	r5, [pc, #200]	; (f7ac <bt_id_del.part.0+0x114>)
    f6e2:	4606      	mov	r6, r0
    f6e4:	b190      	cbz	r0, f70c <bt_id_del.part.0+0x74>
		BT_ERR("Disabling address resolution failed (err %d)", err);
    f6e6:	466c      	mov	r4, sp
    f6e8:	b088      	sub	sp, #32
    f6ea:	466b      	mov	r3, sp
    f6ec:	4a30      	ldr	r2, [pc, #192]	; (f7b0 <bt_id_del.part.0+0x118>)
    f6ee:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    f6f2:	615a      	str	r2, [r3, #20]
    f6f4:	4a2f      	ldr	r2, [pc, #188]	; (f7b4 <bt_id_del.part.0+0x11c>)
    f6f6:	e9c3 2006 	strd	r2, r0, [r3, #24]
    f6fa:	461a      	mov	r2, r3
    f6fc:	2304      	movs	r3, #4
    f6fe:	f842 3f10 	str.w	r3, [r2, #16]!
		BT_ERR("Failed to remove IRK from controller");
    f702:	482d      	ldr	r0, [pc, #180]	; (f7b8 <bt_id_del.part.0+0x120>)
    f704:	f00c fac0 	bl	1bc88 <z_log_msg_static_create.constprop.0>
    f708:	46a5      	mov	sp, r4
		goto done;
    f70a:	e011      	b.n	f730 <bt_id_del.part.0+0x98>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    f70c:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
    f710:	f895 2118 	ldrb.w	r2, [r5, #280]	; 0x118
    f714:	429a      	cmp	r2, r3
    f716:	d216      	bcs.n	f746 <bt_id_del.part.0+0xae>
		bt_dev.le.rl_entries--;
    f718:	3b01      	subs	r3, #1
    f71a:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
    f71e:	7a23      	ldrb	r3, [r4, #8]
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
    f720:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
    f722:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
    f726:	2002      	movs	r0, #2
    f728:	4924      	ldr	r1, [pc, #144]	; (f7bc <bt_id_del.part.0+0x124>)
		keys->state &= ~BT_KEYS_ID_ADDED;
    f72a:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
    f72c:	f005 fdb6 	bl	1529c <bt_keys_foreach_type>
	if (bt_dev.le.rl_entries) {
    f730:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
    f734:	b113      	cbz	r3, f73c <bt_id_del.part.0+0xa4>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    f736:	2001      	movs	r0, #1
    f738:	f00c faa9 	bl	1bc8e <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
    f73c:	2100      	movs	r1, #0
    f73e:	4820      	ldr	r0, [pc, #128]	; (f7c0 <bt_id_del.part.0+0x128>)
    f740:	f000 fb7a 	bl	fe38 <bt_le_ext_adv_foreach>
    f744:	e7c2      	b.n	f6cc <bt_id_del.part.0+0x34>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
    f746:	2107      	movs	r1, #7
    f748:	f242 0028 	movw	r0, #8232	; 0x2028
    f74c:	f7fe fe36 	bl	e3bc <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
    f750:	f104 0901 	add.w	r9, r4, #1
	if (!buf) {
    f754:	4680      	mov	r8, r0
    f756:	b960      	cbnz	r0, f772 <bt_id_del.part.0+0xda>
		BT_ERR("Failed to remove IRK from controller");
    f758:	466c      	mov	r4, sp
    f75a:	b088      	sub	sp, #32
    f75c:	466a      	mov	r2, sp
    f75e:	4b19      	ldr	r3, [pc, #100]	; (f7c4 <bt_id_del.part.0+0x12c>)
    f760:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    f764:	6153      	str	r3, [r2, #20]
    f766:	4b13      	ldr	r3, [pc, #76]	; (f7b4 <bt_id_del.part.0+0x11c>)
    f768:	6193      	str	r3, [r2, #24]
    f76a:	2303      	movs	r3, #3
    f76c:	f842 3f10 	str.w	r3, [r2, #16]!
    f770:	e7c7      	b.n	f702 <bt_id_del.part.0+0x6a>
	return net_buf_simple_add(&buf->b, len);
    f772:	2107      	movs	r1, #7
    f774:	3008      	adds	r0, #8
    f776:	f00e f9e1 	bl	1db3c <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    f77a:	4649      	mov	r1, r9
    f77c:	f00c fa47 	bl	1bc0e <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
    f780:	4632      	mov	r2, r6
    f782:	4641      	mov	r1, r8
    f784:	f242 0028 	movw	r0, #8232	; 0x2028
    f788:	f7fe fe52 	bl	e430 <bt_hci_cmd_send_sync>
	if (err) {
    f78c:	2800      	cmp	r0, #0
    f78e:	d1e3      	bne.n	f758 <bt_id_del.part.0+0xc0>
	bt_dev.le.rl_entries--;
    f790:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
    f794:	3b01      	subs	r3, #1
    f796:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
	keys->state &= ~BT_KEYS_ID_ADDED;
    f79a:	7a23      	ldrb	r3, [r4, #8]
    f79c:	f023 0304 	bic.w	r3, r3, #4
    f7a0:	7223      	strb	r3, [r4, #8]
    f7a2:	e7c5      	b.n	f730 <bt_id_del.part.0+0x98>
    f7a4:	200080cc 	.word	0x200080cc
    f7a8:	0001bd3f 	.word	0x0001bd3f
    f7ac:	20008000 	.word	0x20008000
    f7b0:	000222b5 	.word	0x000222b5
    f7b4:	00022488 	.word	0x00022488
    f7b8:	0001fc84 	.word	0x0001fc84
    f7bc:	0001bc73 	.word	0x0001bc73
    f7c0:	0001bcbf 	.word	0x0001bcbf
    f7c4:	000222e6 	.word	0x000222e6

0000f7c8 <bt_id_pending_keys_update>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    f7c8:	4b08      	ldr	r3, [pc, #32]	; (f7ec <bt_id_pending_keys_update+0x24>)
    f7ca:	e8d3 2fef 	ldaex	r2, [r3]
    f7ce:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
    f7d2:	e8c3 1fe0 	stlex	r0, r1, [r3]
    f7d6:	2800      	cmp	r0, #0
    f7d8:	d1f7      	bne.n	f7ca <bt_id_pending_keys_update+0x2>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    f7da:	0413      	lsls	r3, r2, #16
    f7dc:	d504      	bpl.n	f7e8 <bt_id_pending_keys_update+0x20>
			bt_keys_foreach_type(BT_KEYS_IRK, pending_id_update, NULL);
    f7de:	2200      	movs	r2, #0
    f7e0:	2002      	movs	r0, #2
    f7e2:	4903      	ldr	r1, [pc, #12]	; (f7f0 <bt_id_pending_keys_update+0x28>)
    f7e4:	f005 bd5a 	b.w	1529c <bt_keys_foreach_type>
}
    f7e8:	4770      	bx	lr
    f7ea:	bf00      	nop
    f7ec:	200080cc 	.word	0x200080cc
    f7f0:	0001bdc1 	.word	0x0001bdc1

0000f7f4 <bt_id_find_conflict>:
	struct bt_id_conflict conflict = {
    f7f4:	2300      	movs	r3, #0
{
    f7f6:	b507      	push	{r0, r1, r2, lr}
	bt_keys_foreach_type(BT_KEYS_IRK, find_rl_conflict, &conflict);
    f7f8:	4905      	ldr	r1, [pc, #20]	; (f810 <bt_id_find_conflict+0x1c>)
	struct bt_id_conflict conflict = {
    f7fa:	e9cd 0300 	strd	r0, r3, [sp]
	bt_keys_foreach_type(BT_KEYS_IRK, find_rl_conflict, &conflict);
    f7fe:	466a      	mov	r2, sp
    f800:	2002      	movs	r0, #2
    f802:	f005 fd4b 	bl	1529c <bt_keys_foreach_type>
}
    f806:	9801      	ldr	r0, [sp, #4]
    f808:	b003      	add	sp, #12
    f80a:	f85d fb04 	ldr.w	pc, [sp], #4
    f80e:	bf00      	nop
    f810:	0001bce5 	.word	0x0001bce5

0000f814 <bt_id_add>:
	CHECKIF(keys == NULL) {
    f814:	4603      	mov	r3, r0
{
    f816:	b410      	push	{r4}
	CHECKIF(keys == NULL) {
    f818:	b170      	cbz	r0, f838 <bt_id_add+0x24>
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    f81a:	490a      	ldr	r1, [pc, #40]	; (f844 <bt_id_add+0x30>)
    f81c:	f891 4118 	ldrb.w	r4, [r1, #280]	; 0x118
    f820:	f891 2119 	ldrb.w	r2, [r1, #281]	; 0x119
    f824:	b10c      	cbz	r4, f82a <bt_id_add+0x16>
    f826:	4294      	cmp	r4, r2
    f828:	d208      	bcs.n	f83c <bt_id_add+0x28>
		bt_dev.le.rl_entries++;
    f82a:	3201      	adds	r2, #1
    f82c:	f881 2119 	strb.w	r2, [r1, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
    f830:	7a1a      	ldrb	r2, [r3, #8]
    f832:	f042 0204 	orr.w	r2, r2, #4
    f836:	721a      	strb	r2, [r3, #8]
}
    f838:	bc10      	pop	{r4}
    f83a:	4770      	bx	lr
    f83c:	bc10      	pop	{r4}
    f83e:	f7ff be1f 	b.w	f480 <bt_id_add.part.0>
    f842:	bf00      	nop
    f844:	20008000 	.word	0x20008000

0000f848 <bt_id_del>:
	CHECKIF(keys == NULL) {
    f848:	4603      	mov	r3, r0
{
    f84a:	b410      	push	{r4}
	CHECKIF(keys == NULL) {
    f84c:	b198      	cbz	r0, f876 <bt_id_del+0x2e>
	if (!bt_dev.le.rl_size ||
    f84e:	4c0b      	ldr	r4, [pc, #44]	; (f87c <bt_id_del+0x34>)
    f850:	f894 1118 	ldrb.w	r1, [r4, #280]	; 0x118
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
    f854:	f894 2119 	ldrb.w	r2, [r4, #281]	; 0x119
	if (!bt_dev.le.rl_size ||
    f858:	b129      	cbz	r1, f866 <bt_id_del+0x1e>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
    f85a:	3101      	adds	r1, #1
	if (!bt_dev.le.rl_size ||
    f85c:	428a      	cmp	r2, r1
    f85e:	dc03      	bgt.n	f868 <bt_id_del+0x20>
}
    f860:	bc10      	pop	{r4}
    f862:	f7ff bf19 	b.w	f698 <bt_id_del.part.0>
		if (bt_dev.le.rl_entries > 0) {
    f866:	b112      	cbz	r2, f86e <bt_id_del+0x26>
			bt_dev.le.rl_entries--;
    f868:	3a01      	subs	r2, #1
    f86a:	f884 2119 	strb.w	r2, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
    f86e:	7a1a      	ldrb	r2, [r3, #8]
    f870:	f022 0204 	bic.w	r2, r2, #4
    f874:	721a      	strb	r2, [r3, #8]
}
    f876:	bc10      	pop	{r4}
    f878:	4770      	bx	lr
    f87a:	bf00      	nop
    f87c:	20008000 	.word	0x20008000

0000f880 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
    f880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f882:	460d      	mov	r5, r1
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    f884:	4604      	mov	r4, r0
{
    f886:	af00      	add	r7, sp, #0
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    f888:	b920      	cbnz	r0, f894 <bt_id_create+0x14>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    f88a:	b34d      	cbz	r5, f8e0 <bt_id_create+0x60>
			return -EINVAL;
    f88c:	f06f 0015 	mvn.w	r0, #21
	} else {
		bt_dev.id_count++;
	}

	return new_id;
}
    f890:	46bd      	mov	sp, r7
    f892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    f894:	4923      	ldr	r1, [pc, #140]	; (f924 <bt_id_create+0xa4>)
    f896:	f00c f9b2 	bl	1bbfe <bt_addr_le_eq>
    f89a:	2800      	cmp	r0, #0
    f89c:	d1f5      	bne.n	f88a <bt_id_create+0xa>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    f89e:	7823      	ldrb	r3, [r4, #0]
    f8a0:	2b01      	cmp	r3, #1
    f8a2:	d104      	bne.n	f8ae <bt_id_create+0x2e>
    f8a4:	79a3      	ldrb	r3, [r4, #6]
    f8a6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    f8aa:	2bc0      	cmp	r3, #192	; 0xc0
    f8ac:	d010      	beq.n	f8d0 <bt_id_create+0x50>
			BT_ERR("Only static random identity address supported");
    f8ae:	466c      	mov	r4, sp
    f8b0:	b088      	sub	sp, #32
    f8b2:	466a      	mov	r2, sp
    f8b4:	4b1c      	ldr	r3, [pc, #112]	; (f928 <bt_id_create+0xa8>)
    f8b6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    f8ba:	6153      	str	r3, [r2, #20]
    f8bc:	4b1b      	ldr	r3, [pc, #108]	; (f92c <bt_id_create+0xac>)
    f8be:	481c      	ldr	r0, [pc, #112]	; (f930 <bt_id_create+0xb0>)
    f8c0:	6193      	str	r3, [r2, #24]
    f8c2:	2303      	movs	r3, #3
    f8c4:	f842 3f10 	str.w	r3, [r2, #16]!
    f8c8:	f00c f9de 	bl	1bc88 <z_log_msg_static_create.constprop.0>
    f8cc:	46a5      	mov	sp, r4
			return -EINVAL;
    f8ce:	e7dd      	b.n	f88c <bt_id_create+0xc>
		if (id_find(addr) >= 0) {
    f8d0:	4620      	mov	r0, r4
    f8d2:	f7ff fd8f 	bl	f3f4 <id_find>
    f8d6:	2800      	cmp	r0, #0
    f8d8:	dbd7      	blt.n	f88a <bt_id_create+0xa>
			return -EALREADY;
    f8da:	f06f 0077 	mvn.w	r0, #119	; 0x77
    f8de:	e7d7      	b.n	f890 <bt_id_create+0x10>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    f8e0:	4d14      	ldr	r5, [pc, #80]	; (f934 <bt_id_create+0xb4>)
    f8e2:	79eb      	ldrb	r3, [r5, #7]
    f8e4:	2b01      	cmp	r3, #1
    f8e6:	d01a      	beq.n	f91e <bt_id_create+0x9e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    f8e8:	f105 03cc 	add.w	r3, r5, #204	; 0xcc
    f8ec:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    f8f0:	07db      	lsls	r3, r3, #31
    f8f2:	d50b      	bpl.n	f90c <bt_id_create+0x8c>
	new_id = bt_dev.id_count;
    f8f4:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
    f8f6:	4621      	mov	r1, r4
    f8f8:	4630      	mov	r0, r6
    f8fa:	f7ff fd93 	bl	f424 <id_create.constprop.0>
	if (err) {
    f8fe:	2800      	cmp	r0, #0
    f900:	d1c6      	bne.n	f890 <bt_id_create+0x10>
		bt_dev.id_count++;
    f902:	79eb      	ldrb	r3, [r5, #7]
	new_id = bt_dev.id_count;
    f904:	4630      	mov	r0, r6
		bt_dev.id_count++;
    f906:	3301      	adds	r3, #1
    f908:	71eb      	strb	r3, [r5, #7]
	return new_id;
    f90a:	e7c1      	b.n	f890 <bt_id_create+0x10>
		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
    f90c:	2c00      	cmp	r4, #0
    f90e:	d0bd      	beq.n	f88c <bt_id_create+0xc>
    f910:	4620      	mov	r0, r4
    f912:	4904      	ldr	r1, [pc, #16]	; (f924 <bt_id_create+0xa4>)
    f914:	f00c f973 	bl	1bbfe <bt_addr_le_eq>
    f918:	2800      	cmp	r0, #0
    f91a:	d0eb      	beq.n	f8f4 <bt_id_create+0x74>
    f91c:	e7b6      	b.n	f88c <bt_id_create+0xc>
		return -ENOMEM;
    f91e:	f06f 000b 	mvn.w	r0, #11
    f922:	e7b5      	b.n	f890 <bt_id_create+0x10>
    f924:	000215de 	.word	0x000215de
    f928:	0002230f 	.word	0x0002230f
    f92c:	0002247b 	.word	0x0002247b
    f930:	0001fc84 	.word	0x0001fc84
    f934:	20008000 	.word	0x20008000

0000f938 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
    f938:	b5f0      	push	{r4, r5, r6, r7, lr}
    f93a:	b083      	sub	sp, #12
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
    f93c:	4604      	mov	r4, r0
{
    f93e:	af00      	add	r7, sp, #0
	CHECKIF(addr == NULL) {
    f940:	b998      	cbnz	r0, f96a <bt_id_read_public_addr+0x32>
		BT_WARN("Invalid input parameters");
    f942:	466c      	mov	r4, sp
    f944:	b088      	sub	sp, #32
    f946:	466a      	mov	r2, sp
    f948:	4b1e      	ldr	r3, [pc, #120]	; (f9c4 <bt_id_read_public_addr+0x8c>)
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
	if (err) {
		BT_WARN("Failed to read public address");
    f94a:	6153      	str	r3, [r2, #20]
    f94c:	4b1e      	ldr	r3, [pc, #120]	; (f9c8 <bt_id_read_public_addr+0x90>)
    f94e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    f952:	6193      	str	r3, [r2, #24]
    f954:	2303      	movs	r3, #3
    f956:	481d      	ldr	r0, [pc, #116]	; (f9cc <bt_id_read_public_addr+0x94>)
    f958:	f842 3f10 	str.w	r3, [r2, #16]!
    f95c:	f00c f994 	bl	1bc88 <z_log_msg_static_create.constprop.0>
    f960:	46a5      	mov	sp, r4
		return 0U;
    f962:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
    f964:	370c      	adds	r7, #12
    f966:	46bd      	mov	sp, r7
    f968:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    f96a:	2100      	movs	r1, #0
    f96c:	f241 0009 	movw	r0, #4105	; 0x1009
    f970:	1d3a      	adds	r2, r7, #4
    f972:	f7fe fd5d 	bl	e430 <bt_hci_cmd_send_sync>
	if (err) {
    f976:	4606      	mov	r6, r0
    f978:	b120      	cbz	r0, f984 <bt_id_read_public_addr+0x4c>
		BT_WARN("Failed to read public address");
    f97a:	466c      	mov	r4, sp
    f97c:	b088      	sub	sp, #32
    f97e:	466a      	mov	r2, sp
    f980:	4b13      	ldr	r3, [pc, #76]	; (f9d0 <bt_id_read_public_addr+0x98>)
    f982:	e7e2      	b.n	f94a <bt_id_read_public_addr+0x12>
	rp = (void *)rsp->data;
    f984:	687b      	ldr	r3, [r7, #4]
	return memcmp(a, b, sizeof(*a));
    f986:	2206      	movs	r2, #6
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    f988:	689d      	ldr	r5, [r3, #8]
    f98a:	4912      	ldr	r1, [pc, #72]	; (f9d4 <bt_id_read_public_addr+0x9c>)
    f98c:	3501      	adds	r5, #1
    f98e:	4628      	mov	r0, r5
    f990:	f00b ff8f 	bl	1b8b2 <memcmp>
    f994:	b918      	cbnz	r0, f99e <bt_id_read_public_addr+0x66>
		net_buf_unref(rsp);
    f996:	6878      	ldr	r0, [r7, #4]
    f998:	f005 fdc8 	bl	1552c <net_buf_unref>
		return 0U;
    f99c:	e7e1      	b.n	f962 <bt_id_read_public_addr+0x2a>
    f99e:	2206      	movs	r2, #6
    f9a0:	4628      	mov	r0, r5
    f9a2:	490d      	ldr	r1, [pc, #52]	; (f9d8 <bt_id_read_public_addr+0xa0>)
    f9a4:	f00b ff85 	bl	1b8b2 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    f9a8:	2800      	cmp	r0, #0
    f9aa:	d0f4      	beq.n	f996 <bt_id_read_public_addr+0x5e>
	memcpy(dst, src, sizeof(*dst));
    f9ac:	2206      	movs	r2, #6
    f9ae:	4629      	mov	r1, r5
    f9b0:	1c60      	adds	r0, r4, #1
    f9b2:	f00b ff8e 	bl	1b8d2 <memcpy>
	net_buf_unref(rsp);
    f9b6:	6878      	ldr	r0, [r7, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    f9b8:	7026      	strb	r6, [r4, #0]
	net_buf_unref(rsp);
    f9ba:	f005 fdb7 	bl	1552c <net_buf_unref>
	return 1U;
    f9be:	2001      	movs	r0, #1
    f9c0:	e7d0      	b.n	f964 <bt_id_read_public_addr+0x2c>
    f9c2:	bf00      	nop
    f9c4:	00022341 	.word	0x00022341
    f9c8:	00022464 	.word	0x00022464
    f9cc:	0001fc84 	.word	0x0001fc84
    f9d0:	0002235e 	.word	0x0002235e
    f9d4:	000215eb 	.word	0x000215eb
    f9d8:	000215e5 	.word	0x000215e5

0000f9dc <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
    f9dc:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
    f9de:	4668      	mov	r0, sp
    f9e0:	f7ff ffaa 	bl	f938 <bt_id_read_public_addr>
    f9e4:	4b04      	ldr	r3, [pc, #16]	; (f9f8 <bt_setup_public_id_addr+0x1c>)
    f9e6:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
    f9e8:	b118      	cbz	r0, f9f2 <bt_setup_public_id_addr+0x16>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
    f9ea:	4669      	mov	r1, sp
    f9ec:	2000      	movs	r0, #0
    f9ee:	f7ff fd19 	bl	f424 <id_create.constprop.0>
}
    f9f2:	b003      	add	sp, #12
    f9f4:	f85d fb04 	ldr.w	pc, [sp], #4
    f9f8:	20008000 	.word	0x20008000

0000f9fc <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
    f9fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fa00:	b083      	sub	sp, #12
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    fa02:	4b2a      	ldr	r3, [pc, #168]	; (faac <bt_read_static_addr+0xb0>)
{
    fa04:	4680      	mov	r8, r0
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    fa06:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
{
    fa0a:	4689      	mov	r9, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    fa0c:	07db      	lsls	r3, r3, #31
{
    fa0e:	af00      	add	r7, sp, #0
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    fa10:	d415      	bmi.n	fa3e <bt_read_static_addr+0x42>
		BT_WARN("Read Static Addresses command not available");
    fa12:	466c      	mov	r4, sp
    fa14:	b088      	sub	sp, #32
    fa16:	466a      	mov	r2, sp
    fa18:	4b25      	ldr	r3, [pc, #148]	; (fab0 <bt_read_static_addr+0xb4>)
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
	if (err) {
		BT_WARN("Failed to read static addresses");
    fa1a:	6153      	str	r3, [r2, #20]
    fa1c:	4b25      	ldr	r3, [pc, #148]	; (fab4 <bt_read_static_addr+0xb8>)
    fa1e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    fa22:	6193      	str	r3, [r2, #24]
    fa24:	2303      	movs	r3, #3
    fa26:	4824      	ldr	r0, [pc, #144]	; (fab8 <bt_read_static_addr+0xbc>)
    fa28:	f842 3f10 	str.w	r3, [r2, #16]!
    fa2c:	f00c f92c 	bl	1bc88 <z_log_msg_static_create.constprop.0>
		return 0;
    fa30:	2500      	movs	r5, #0
    fa32:	46a5      	mov	sp, r4
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
    fa34:	4628      	mov	r0, r5
    fa36:	370c      	adds	r7, #12
    fa38:	46bd      	mov	sp, r7
    fa3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    fa3e:	2100      	movs	r1, #0
    fa40:	f64f 4009 	movw	r0, #64521	; 0xfc09
    fa44:	1d3a      	adds	r2, r7, #4
    fa46:	f7fe fcf3 	bl	e430 <bt_hci_cmd_send_sync>
	if (err) {
    fa4a:	4604      	mov	r4, r0
    fa4c:	b120      	cbz	r0, fa58 <bt_read_static_addr+0x5c>
		BT_WARN("Failed to read static addresses");
    fa4e:	466c      	mov	r4, sp
    fa50:	b088      	sub	sp, #32
    fa52:	466a      	mov	r2, sp
    fa54:	4b19      	ldr	r3, [pc, #100]	; (fabc <bt_read_static_addr+0xc0>)
    fa56:	e7e0      	b.n	fa1a <bt_read_static_addr+0x1e>
	rp = (void *)rsp->data;
    fa58:	687b      	ldr	r3, [r7, #4]
    fa5a:	689e      	ldr	r6, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
    fa5c:	7875      	ldrb	r5, [r6, #1]
    fa5e:	3602      	adds	r6, #2
    fa60:	454d      	cmp	r5, r9
    fa62:	bf28      	it	cs
    fa64:	464d      	movcs	r5, r9
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
    fa66:	f04f 0916 	mov.w	r9, #22
	for (i = 0; i < cnt; i++) {
    fa6a:	42a5      	cmp	r5, r4
    fa6c:	dc15      	bgt.n	fa9a <bt_read_static_addr+0x9e>
	net_buf_unref(rsp);
    fa6e:	6878      	ldr	r0, [r7, #4]
    fa70:	f005 fd5c 	bl	1552c <net_buf_unref>
	if (!cnt) {
    fa74:	2d00      	cmp	r5, #0
    fa76:	d1dd      	bne.n	fa34 <bt_read_static_addr+0x38>
		BT_WARN("No static addresses stored in controller");
    fa78:	466c      	mov	r4, sp
    fa7a:	b088      	sub	sp, #32
    fa7c:	466a      	mov	r2, sp
    fa7e:	4b10      	ldr	r3, [pc, #64]	; (fac0 <bt_read_static_addr+0xc4>)
    fa80:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    fa84:	6153      	str	r3, [r2, #20]
    fa86:	4b0b      	ldr	r3, [pc, #44]	; (fab4 <bt_read_static_addr+0xb8>)
    fa88:	480b      	ldr	r0, [pc, #44]	; (fab8 <bt_read_static_addr+0xbc>)
    fa8a:	6193      	str	r3, [r2, #24]
    fa8c:	2303      	movs	r3, #3
    fa8e:	f842 3f10 	str.w	r3, [r2, #16]!
    fa92:	f00c f8f9 	bl	1bc88 <z_log_msg_static_create.constprop.0>
    fa96:	46a5      	mov	sp, r4
    fa98:	e7cc      	b.n	fa34 <bt_read_static_addr+0x38>
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
    fa9a:	4631      	mov	r1, r6
    fa9c:	fb09 8004 	mla	r0, r9, r4, r8
    faa0:	2216      	movs	r2, #22
    faa2:	f00b ff16 	bl	1b8d2 <memcpy>
	for (i = 0; i < cnt; i++) {
    faa6:	3401      	adds	r4, #1
    faa8:	3616      	adds	r6, #22
    faaa:	e7de      	b.n	fa6a <bt_read_static_addr+0x6e>
    faac:	20008000 	.word	0x20008000
    fab0:	00022380 	.word	0x00022380
    fab4:	00022450 	.word	0x00022450
    fab8:	0001fc84 	.word	0x0001fc84
    fabc:	000223b0 	.word	0x000223b0
    fac0:	000223d4 	.word	0x000223d4

0000fac4 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
    fac4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
    fac6:	4e15      	ldr	r6, [pc, #84]	; (fb1c <bt_setup_random_id_addr+0x58>)
{
    fac8:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
    faca:	79f4      	ldrb	r4, [r6, #7]
    facc:	b92c      	cbnz	r4, fada <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    face:	2101      	movs	r1, #1
    fad0:	a802      	add	r0, sp, #8
    fad2:	f7ff ff93 	bl	f9fc <bt_read_static_addr>
    fad6:	71f0      	strb	r0, [r6, #7]

		if (bt_dev.id_count) {
    fad8:	b9c8      	cbnz	r0, fb0e <bt_setup_random_id_addr+0x4a>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
    fada:	2100      	movs	r1, #0
    fadc:	4608      	mov	r0, r1
}
    fade:	b009      	add	sp, #36	; 0x24
    fae0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
    fae4:	f7ff becc 	b.w	f880 <bt_id_create>
    fae8:	ab02      	add	r3, sp, #8
    faea:	fb07 3105 	mla	r1, r7, r5, r3
    faee:	2206      	movs	r2, #6
    faf0:	f10d 0001 	add.w	r0, sp, #1
    faf4:	f00b feed 	bl	1b8d2 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
    faf8:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
    fafa:	4669      	mov	r1, sp
    fafc:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
    fafe:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
    fb02:	f7ff fc8f 	bl	f424 <id_create.constprop.0>
				if (err) {
    fb06:	3401      	adds	r4, #1
    fb08:	b110      	cbz	r0, fb10 <bt_setup_random_id_addr+0x4c>
}
    fb0a:	b009      	add	sp, #36	; 0x24
    fb0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    fb0e:	2716      	movs	r7, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    fb10:	79f3      	ldrb	r3, [r6, #7]
    fb12:	b2e5      	uxtb	r5, r4
    fb14:	42ab      	cmp	r3, r5
    fb16:	d8e7      	bhi.n	fae8 <bt_setup_random_id_addr+0x24>
			return 0;
    fb18:	2000      	movs	r0, #0
    fb1a:	e7f6      	b.n	fb0a <bt_setup_random_id_addr+0x46>
    fb1c:	20008000 	.word	0x20008000

0000fb20 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
    fb20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fb24:	4690      	mov	r8, r2
    fb26:	460e      	mov	r6, r1
    fb28:	461d      	mov	r5, r3
	const bt_addr_le_t *id_addr;
	int err = 0;

	CHECKIF(adv == NULL || own_addr_type == NULL) {
    fb2a:	4602      	mov	r2, r0
    fb2c:	2800      	cmp	r0, #0
    fb2e:	d04b      	beq.n	fbc8 <bt_id_set_adv_own_addr+0xa8>
    fb30:	2b00      	cmp	r3, #0
    fb32:	d049      	beq.n	fbc8 <bt_id_set_adv_own_addr+0xa8>
	}

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    fb34:	07cf      	lsls	r7, r1, #31
	id_addr = &bt_dev.id_addr[adv->id];
    fb36:	7804      	ldrb	r4, [r0, #0]
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    fb38:	d531      	bpl.n	fb9e <bt_id_set_adv_own_addr+0x7e>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    fb3a:	4f25      	ldr	r7, [pc, #148]	; (fbd0 <bt_id_set_adv_own_addr+0xb0>)
    fb3c:	f1b8 0f00 	cmp.w	r8, #0
    fb40:	d013      	beq.n	fb6a <bt_id_set_adv_own_addr+0x4a>
    fb42:	0688      	lsls	r0, r1, #26
    fb44:	d40a      	bmi.n	fb5c <bt_id_set_adv_own_addr+0x3c>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    fb46:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
    fb4a:	5cfb      	ldrb	r3, [r7, r3]
    fb4c:	2b01      	cmp	r3, #1
    fb4e:	d015      	beq.n	fb7c <bt_id_set_adv_own_addr+0x5c>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
    fb50:	702b      	strb	r3, [r5, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    fb52:	06b2      	lsls	r2, r6, #26
    fb54:	d50f      	bpl.n	fb76 <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    fb56:	f043 0302 	orr.w	r3, r3, #2
    fb5a:	e00b      	b.n	fb74 <bt_id_set_adv_own_addr+0x54>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    fb5c:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
    fb60:	0659      	lsls	r1, r3, #25
    fb62:	d4f0      	bmi.n	fb46 <bt_id_set_adv_own_addr+0x26>
			return -ENOTSUP;
    fb64:	f06f 0085 	mvn.w	r0, #133	; 0x85
    fb68:	e006      	b.n	fb78 <bt_id_set_adv_own_addr+0x58>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    fb6a:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
    fb6e:	5cfb      	ldrb	r3, [r7, r3]
    fb70:	2b01      	cmp	r3, #1
    fb72:	d003      	beq.n	fb7c <bt_id_set_adv_own_addr+0x5c>
			*own_addr_type = id_addr->type;
    fb74:	702b      	strb	r3, [r5, #0]
		if (err) {
			return err;
		}
	}

	return 0;
    fb76:	2000      	movs	r0, #0
}
    fb78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    fb7c:	2107      	movs	r1, #7
    fb7e:	fb01 7104 	mla	r1, r1, r4, r7
    fb82:	4610      	mov	r0, r2
    fb84:	3101      	adds	r1, #1
    fb86:	f00c f8f8 	bl	1bd7a <bt_id_set_adv_random_addr>
				if (err) {
    fb8a:	2800      	cmp	r0, #0
    fb8c:	d1f4      	bne.n	fb78 <bt_id_set_adv_own_addr+0x58>
			*own_addr_type = id_addr->type;
    fb8e:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    fb92:	5d3b      	ldrb	r3, [r7, r4]
    fb94:	702b      	strb	r3, [r5, #0]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    fb96:	f1b8 0f00 	cmp.w	r8, #0
    fb9a:	d0ec      	beq.n	fb76 <bt_id_set_adv_own_addr+0x56>
    fb9c:	e7d9      	b.n	fb52 <bt_id_set_adv_own_addr+0x32>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    fb9e:	074b      	lsls	r3, r1, #29
    fba0:	d50e      	bpl.n	fbc0 <bt_id_set_adv_own_addr+0xa0>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    fba2:	4e0b      	ldr	r6, [pc, #44]	; (fbd0 <bt_id_set_adv_own_addr+0xb0>)
    fba4:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
    fba8:	5df3      	ldrb	r3, [r6, r7]
    fbaa:	2b01      	cmp	r3, #1
    fbac:	d1e2      	bne.n	fb74 <bt_id_set_adv_own_addr+0x54>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    fbae:	2107      	movs	r1, #7
    fbb0:	fb11 3104 	smlabb	r1, r1, r4, r3
    fbb4:	4431      	add	r1, r6
    fbb6:	f00c f8e0 	bl	1bd7a <bt_id_set_adv_random_addr>
			*own_addr_type = id_addr->type;
    fbba:	5df3      	ldrb	r3, [r6, r7]
    fbbc:	702b      	strb	r3, [r5, #0]
		if (err) {
    fbbe:	e7db      	b.n	fb78 <bt_id_set_adv_own_addr+0x58>
			err = bt_id_set_adv_private_addr(adv);
    fbc0:	f00c f8e3 	bl	1bd8a <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    fbc4:	2301      	movs	r3, #1
    fbc6:	e7f9      	b.n	fbbc <bt_id_set_adv_own_addr+0x9c>
		return -EINVAL;
    fbc8:	f06f 0015 	mvn.w	r0, #21
    fbcc:	e7d4      	b.n	fb78 <bt_id_set_adv_own_addr+0x58>
    fbce:	bf00      	nop
    fbd0:	20008000 	.word	0x20008000

0000fbd4 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
    fbd4:	b5b0      	push	{r4, r5, r7, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    fbd6:	4d18      	ldr	r5, [pc, #96]	; (fc38 <bt_id_init+0x64>)
{
    fbd8:	af00      	add	r7, sp, #0
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    fbda:	79eb      	ldrb	r3, [r5, #7]
    fbdc:	b11b      	cbz	r3, fbe6 <bt_id_init+0x12>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
    fbde:	2400      	movs	r4, #0
}
    fbe0:	4620      	mov	r0, r4
    fbe2:	46bd      	mov	sp, r7
    fbe4:	bdb0      	pop	{r4, r5, r7, pc}
		err = bt_setup_public_id_addr();
    fbe6:	f7ff fef9 	bl	f9dc <bt_setup_public_id_addr>
		if (err) {
    fbea:	4604      	mov	r4, r0
    fbec:	b180      	cbz	r0, fc10 <bt_id_init+0x3c>
			BT_ERR("Unable to set identity address");
    fbee:	466d      	mov	r5, sp
    fbf0:	b088      	sub	sp, #32
    fbf2:	466a      	mov	r2, sp
    fbf4:	4b11      	ldr	r3, [pc, #68]	; (fc3c <bt_id_init+0x68>)
			BT_ERR("Unable to set random address");
    fbf6:	6153      	str	r3, [r2, #20]
    fbf8:	4b11      	ldr	r3, [pc, #68]	; (fc40 <bt_id_init+0x6c>)
    fbfa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    fbfe:	6193      	str	r3, [r2, #24]
    fc00:	2303      	movs	r3, #3
    fc02:	4810      	ldr	r0, [pc, #64]	; (fc44 <bt_id_init+0x70>)
    fc04:	f842 3f10 	str.w	r3, [r2, #16]!
    fc08:	f00c f83e 	bl	1bc88 <z_log_msg_static_create.constprop.0>
    fc0c:	46ad      	mov	sp, r5
			return err;
    fc0e:	e7e7      	b.n	fbe0 <bt_id_init+0xc>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    fc10:	79eb      	ldrb	r3, [r5, #7]
    fc12:	2b00      	cmp	r3, #0
    fc14:	d1e3      	bne.n	fbde <bt_id_init+0xa>
		err = bt_setup_random_id_addr();
    fc16:	f7ff ff55 	bl	fac4 <bt_setup_random_id_addr>
		if (err) {
    fc1a:	4604      	mov	r4, r0
    fc1c:	2800      	cmp	r0, #0
    fc1e:	d1e6      	bne.n	fbee <bt_id_init+0x1a>
		err = set_random_address(&bt_dev.id_addr[0].a);
    fc20:	1c68      	adds	r0, r5, #1
    fc22:	f7ff fd0d 	bl	f640 <set_random_address>
		if (err) {
    fc26:	4604      	mov	r4, r0
    fc28:	2800      	cmp	r0, #0
    fc2a:	d0d9      	beq.n	fbe0 <bt_id_init+0xc>
			BT_ERR("Unable to set random address");
    fc2c:	466d      	mov	r5, sp
    fc2e:	b088      	sub	sp, #32
    fc30:	466a      	mov	r2, sp
    fc32:	4b05      	ldr	r3, [pc, #20]	; (fc48 <bt_id_init+0x74>)
    fc34:	e7df      	b.n	fbf6 <bt_id_init+0x22>
    fc36:	bf00      	nop
    fc38:	20008000 	.word	0x20008000
    fc3c:	00022401 	.word	0x00022401
    fc40:	00022445 	.word	0x00022445
    fc44:	0001fc84 	.word	0x0001fc84
    fc48:	00022424 	.word	0x00022424

0000fc4c <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
    fc4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fc50:	b085      	sub	sp, #20
    fc52:	460c      	mov	r4, r1
    fc54:	af00      	add	r7, sp, #0
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    fc56:	2120      	movs	r1, #32
{
    fc58:	4616      	mov	r6, r2
    fc5a:	60b8      	str	r0, [r7, #8]
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    fc5c:	f7fe fbae 	bl	e3bc <bt_hci_cmd_create>
	if (!buf) {
    fc60:	4605      	mov	r5, r0
    fc62:	2800      	cmp	r0, #0
    fc64:	d066      	beq.n	fd34 <hci_set_ad+0xe8>
    fc66:	2120      	movs	r1, #32
    fc68:	3008      	adds	r0, #8
    fc6a:	f00d ff67 	bl	1db3c <net_buf_simple_add>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));
    fc6e:	2220      	movs	r2, #32
    fc70:	4682      	mov	sl, r0
    fc72:	2100      	movs	r1, #0
    fc74:	f00b fe38 	bl	1b8e8 <memset>

	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    fc78:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
	uint8_t set_data_len = 0;
    fc7c:	2600      	movs	r6, #0
	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    fc7e:	f10a 0b01 	add.w	fp, sl, #1
	for (size_t i = 0; i < ad_len; i++) {
    fc82:	60fb      	str	r3, [r7, #12]
		for (size_t j = 0; j < ad[i].len; j++) {
    fc84:	2300      	movs	r3, #0
    fc86:	f8d4 9000 	ldr.w	r9, [r4]
    fc8a:	6862      	ldr	r2, [r4, #4]
    fc8c:	4293      	cmp	r3, r2
    fc8e:	d30b      	bcc.n	fca8 <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
    fc90:	68fb      	ldr	r3, [r7, #12]
    fc92:	3408      	adds	r4, #8
    fc94:	42a3      	cmp	r3, r4
    fc96:	d1f5      	bne.n	fc84 <hci_set_ad+0x38>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    fc98:	2200      	movs	r2, #0
    fc9a:	4629      	mov	r1, r5
    fc9c:	68b8      	ldr	r0, [r7, #8]
	*data_len = set_data_len;
    fc9e:	f88a 6000 	strb.w	r6, [sl]
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    fca2:	f7fe fbc5 	bl	e430 <bt_hci_cmd_send_sync>
    fca6:	e024      	b.n	fcf2 <hci_set_ad+0xa6>
			size_t len = data[j].data_len;
    fca8:	f899 2001 	ldrb.w	r2, [r9, #1]
			uint8_t type = data[j].type;
    fcac:	1cb0      	adds	r0, r6, #2
			if ((set_data_len + len + 2) > set_data_len_max) {
    fcae:	1881      	adds	r1, r0, r2
    fcb0:	291f      	cmp	r1, #31
			uint8_t type = data[j].type;
    fcb2:	f899 c000 	ldrb.w	ip, [r9]
			if ((set_data_len + len + 2) > set_data_len_max) {
    fcb6:	d922      	bls.n	fcfe <hci_set_ad+0xb2>
				if (!(type == BT_DATA_NAME_COMPLETE &&
    fcb8:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
    fcbc:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
    fcc0:	d101      	bne.n	fcc6 <hci_set_ad+0x7a>
    fcc2:	2a00      	cmp	r2, #0
    fcc4:	dc19      	bgt.n	fcfa <hci_set_ad+0xae>
					BT_ERR("Too big advertising data");
    fcc6:	466c      	mov	r4, sp
    fcc8:	b088      	sub	sp, #32
    fcca:	466a      	mov	r2, sp
    fccc:	4b1b      	ldr	r3, [pc, #108]	; (fd3c <hci_set_ad+0xf0>)
    fcce:	6153      	str	r3, [r2, #20]
    fcd0:	4b1b      	ldr	r3, [pc, #108]	; (fd40 <hci_set_ad+0xf4>)
    fcd2:	6193      	str	r3, [r2, #24]
    fcd4:	2303      	movs	r3, #3
    fcd6:	f842 3f10 	str.w	r3, [r2, #16]!
    fcda:	2300      	movs	r3, #0
    fcdc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    fce0:	4818      	ldr	r0, [pc, #96]	; (fd44 <hci_set_ad+0xf8>)
    fce2:	f7fb fc3d 	bl	b560 <z_impl_z_log_msg_static_create>
		net_buf_unref(buf);
    fce6:	4628      	mov	r0, r5
    fce8:	46a5      	mov	sp, r4
    fcea:	f005 fc1f 	bl	1552c <net_buf_unref>
					return -EINVAL;
    fcee:	f06f 0015 	mvn.w	r0, #21
}
    fcf2:	3714      	adds	r7, #20
    fcf4:	46bd      	mov	sp, r7
    fcf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
    fcfa:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
    fcfe:	fa5f f882 	uxtb.w	r8, r2
    fd02:	f108 0101 	add.w	r1, r8, #1
    fd06:	f80b 1006 	strb.w	r1, [fp, r6]
    fd0a:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
    fd0c:	b2c9      	uxtb	r1, r1
    fd0e:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
    fd12:	f8d9 1004 	ldr.w	r1, [r9, #4]
    fd16:	fa5b f080 	uxtab	r0, fp, r0
    fd1a:	607b      	str	r3, [r7, #4]
			set_data_len += len;
    fd1c:	f108 0802 	add.w	r8, r8, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
    fd20:	f00b fdd7 	bl	1b8d2 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
    fd24:	687b      	ldr	r3, [r7, #4]
			set_data_len += len;
    fd26:	44b0      	add	r8, r6
    fd28:	fa5f f688 	uxtb.w	r6, r8
		for (size_t j = 0; j < ad[i].len; j++) {
    fd2c:	3301      	adds	r3, #1
    fd2e:	f109 0908 	add.w	r9, r9, #8
    fd32:	e7aa      	b.n	fc8a <hci_set_ad+0x3e>
		return -ENOBUFS;
    fd34:	f06f 0068 	mvn.w	r0, #104	; 0x68
    fd38:	e7db      	b.n	fcf2 <hci_set_ad+0xa6>
    fd3a:	bf00      	nop
    fd3c:	000224b6 	.word	0x000224b6
    fd40:	00022538 	.word	0x00022538
    fd44:	0001fc34 	.word	0x0001fc34

0000fd48 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
    fd48:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
    fd4a:	4605      	mov	r5, r0
    fd4c:	4b16      	ldr	r3, [pc, #88]	; (fda8 <le_adv_start_add_conn+0x60>)
    fd4e:	f815 2b09 	ldrb.w	r2, [r5], #9
{
    fd52:	4604      	mov	r4, r0
	bt_dev.adv_conn_id = adv->id;
    fd54:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
    fd58:	460e      	mov	r6, r1
	return memcmp(a, b, sizeof(*a));
    fd5a:	2207      	movs	r2, #7
    fd5c:	4628      	mov	r0, r5
    fd5e:	4913      	ldr	r1, [pc, #76]	; (fdac <le_adv_start_add_conn+0x64>)
    fd60:	f00b fda7 	bl	1b8b2 <memcmp>
    fd64:	4603      	mov	r3, r0
    fd66:	7820      	ldrb	r0, [r4, #0]

	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
    fd68:	b96b      	cbnz	r3, fd86 <le_adv_start_add_conn+0x3e>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    fd6a:	4911      	ldr	r1, [pc, #68]	; (fdb0 <le_adv_start_add_conn+0x68>)
    fd6c:	f001 f912 	bl	10f94 <bt_conn_add_le>
		if (!conn) {
    fd70:	4604      	mov	r4, r0
    fd72:	b910      	cbnz	r0, fd7a <le_adv_start_add_conn+0x32>
			return -ENOMEM;
    fd74:	f06f 000b 	mvn.w	r0, #11
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
	*out_conn = conn;
	return 0;
}
    fd78:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
    fd7a:	2104      	movs	r1, #4
    fd7c:	f000 ff24 	bl	10bc8 <bt_conn_set_state>
		return 0;
    fd80:	2000      	movs	r0, #0
		*out_conn = conn;
    fd82:	6034      	str	r4, [r6, #0]
    fd84:	e7f8      	b.n	fd78 <le_adv_start_add_conn+0x30>
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    fd86:	4629      	mov	r1, r5
    fd88:	f001 f93a 	bl	11000 <bt_conn_exists_le>
    fd8c:	b940      	cbnz	r0, fda0 <le_adv_start_add_conn+0x58>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    fd8e:	7820      	ldrb	r0, [r4, #0]
    fd90:	4629      	mov	r1, r5
    fd92:	f001 f8ff 	bl	10f94 <bt_conn_add_le>
	if (!conn) {
    fd96:	4604      	mov	r4, r0
    fd98:	2800      	cmp	r0, #0
    fd9a:	d0eb      	beq.n	fd74 <le_adv_start_add_conn+0x2c>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
    fd9c:	2105      	movs	r1, #5
    fd9e:	e7ed      	b.n	fd7c <le_adv_start_add_conn+0x34>
		return -EINVAL;
    fda0:	f06f 0015 	mvn.w	r0, #21
    fda4:	e7e8      	b.n	fd78 <le_adv_start_add_conn+0x30>
    fda6:	bf00      	nop
    fda8:	20008000 	.word	0x20008000
    fdac:	000215de 	.word	0x000215de
    fdb0:	000215d7 	.word	0x000215d7

0000fdb4 <valid_adv_param>:
{
    fdb4:	b538      	push	{r3, r4, r5, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    fdb6:	6843      	ldr	r3, [r0, #4]
{
    fdb8:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    fdba:	0558      	lsls	r0, r3, #21
    fdbc:	d501      	bpl.n	fdc2 <valid_adv_param+0xe>
		return false;
    fdbe:	2000      	movs	r0, #0
}
    fdc0:	bd38      	pop	{r3, r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    fdc2:	6922      	ldr	r2, [r4, #16]
    fdc4:	b10a      	cbz	r2, fdca <valid_adv_param+0x16>
    fdc6:	07d9      	lsls	r1, r3, #31
    fdc8:	d5f9      	bpl.n	fdbe <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
    fdca:	4d19      	ldr	r5, [pc, #100]	; (fe30 <valid_adv_param+0x7c>)
    fdcc:	7820      	ldrb	r0, [r4, #0]
    fdce:	79eb      	ldrb	r3, [r5, #7]
    fdd0:	4283      	cmp	r3, r0
    fdd2:	d9f4      	bls.n	fdbe <valid_adv_param+0xa>
	    bt_addr_le_eq(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    fdd4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    fdd8:	2207      	movs	r2, #7
    fdda:	4916      	ldr	r1, [pc, #88]	; (fe34 <valid_adv_param+0x80>)
    fddc:	4428      	add	r0, r5
    fdde:	f00b fd68 	bl	1b8b2 <memcmp>
	if (param->id >= bt_dev.id_count ||
    fde2:	2800      	cmp	r0, #0
    fde4:	d0eb      	beq.n	fdbe <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    fde6:	6860      	ldr	r0, [r4, #4]
    fde8:	07c2      	lsls	r2, r0, #31
    fdea:	d406      	bmi.n	fdfa <valid_adv_param+0x46>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    fdec:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
    fdf0:	2b08      	cmp	r3, #8
    fdf2:	d802      	bhi.n	fdfa <valid_adv_param+0x46>
    fdf4:	68a3      	ldr	r3, [r4, #8]
    fdf6:	2b9f      	cmp	r3, #159	; 0x9f
    fdf8:	d9e1      	bls.n	fdbe <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
    fdfa:	f010 0f30 	tst.w	r0, #48	; 0x30
    fdfe:	d002      	beq.n	fe06 <valid_adv_param+0x52>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
    fe00:	6923      	ldr	r3, [r4, #16]
    fe02:	2b00      	cmp	r3, #0
    fe04:	d0db      	beq.n	fdbe <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    fe06:	06c3      	lsls	r3, r0, #27
    fe08:	d401      	bmi.n	fe0e <valid_adv_param+0x5a>
    fe0a:	6923      	ldr	r3, [r4, #16]
    fe0c:	b943      	cbnz	r3, fe20 <valid_adv_param+0x6c>
		if (param->interval_min > param->interval_max ||
    fe0e:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    fe12:	429a      	cmp	r2, r3
    fe14:	d8d3      	bhi.n	fdbe <valid_adv_param+0xa>
    fe16:	2a1f      	cmp	r2, #31
    fe18:	d9d1      	bls.n	fdbe <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
    fe1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    fe1e:	d8ce      	bhi.n	fdbe <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
    fe20:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
    fe24:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
    fe28:	bf18      	it	ne
    fe2a:	2001      	movne	r0, #1
    fe2c:	e7c8      	b.n	fdc0 <valid_adv_param+0xc>
    fe2e:	bf00      	nop
    fe30:	20008000 	.word	0x20008000
    fe34:	000215de 	.word	0x000215de

0000fe38 <bt_le_ext_adv_foreach>:
{
    fe38:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
    fe3a:	4801      	ldr	r0, [pc, #4]	; (fe40 <bt_le_ext_adv_foreach+0x8>)
    fe3c:	4718      	bx	r3
    fe3e:	bf00      	nop
    fe40:	20008018 	.word	0x20008018

0000fe44 <bt_le_adv_lookup_legacy>:
}
    fe44:	4800      	ldr	r0, [pc, #0]	; (fe48 <bt_le_adv_lookup_legacy+0x4>)
    fe46:	4770      	bx	lr
    fe48:	20008018 	.word	0x20008018

0000fe4c <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
    fe4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fe50:	b08d      	sub	sp, #52	; 0x34
    fe52:	af04      	add	r7, sp, #16
    fe54:	e9c7 3200 	strd	r3, r2, [r7]
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
    fe58:	2300      	movs	r3, #0
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
    fe5a:	f8d1 b010 	ldr.w	fp, [r1, #16]
{
    fe5e:	4606      	mov	r6, r0
	bool dir_adv = (param->peer != NULL), scannable = false;
    fe60:	ebbb 0403 	subs.w	r4, fp, r3
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    fe64:	4895      	ldr	r0, [pc, #596]	; (100bc <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xbc>)
    fe66:	bf18      	it	ne
    fe68:	2401      	movne	r4, #1
	struct bt_conn *conn = NULL;
    fe6a:	60fb      	str	r3, [r7, #12]
    fe6c:	f00b ffc7 	bl	1bdfe <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    fe70:	0743      	lsls	r3, r0, #29
{
    fe72:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    fe74:	f140 8119 	bpl.w	100aa <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xaa>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
    fe78:	4608      	mov	r0, r1
    fe7a:	f7ff ff9b 	bl	fdb4 <valid_adv_param>
    fe7e:	b930      	cbnz	r0, fe8e <bt_le_adv_start_legacy+0x42>
		return -EINVAL;
    fe80:	f06f 0415 	mvn.w	r4, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
    fe84:	4620      	mov	r0, r4
    fe86:	3724      	adds	r7, #36	; 0x24
    fe88:	46bd      	mov	sp, r7
    fe8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
    fe8e:	4628      	mov	r0, r5
    fe90:	f00b ff92 	bl	1bdb8 <bt_id_adv_random_addr_check>
    fe94:	4682      	mov	sl, r0
    fe96:	2800      	cmp	r0, #0
    fe98:	d0f2      	beq.n	fe80 <bt_le_adv_start_legacy+0x34>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    fe9a:	f106 0910 	add.w	r9, r6, #16
    fe9e:	4648      	mov	r0, r9
    fea0:	f00b ffad 	bl	1bdfe <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    fea4:	f3c0 18c0 	ubfx	r8, r0, #7, #1
    fea8:	0600      	lsls	r0, r0, #24
    feaa:	f100 8101 	bmi.w	100b0 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xb0>
	(void)memset(&set_param, 0, sizeof(set_param));
    feae:	220f      	movs	r2, #15
    feb0:	4641      	mov	r1, r8
    feb2:	f107 0010 	add.w	r0, r7, #16
    feb6:	f00b fd17 	bl	1b8e8 <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    feba:	68ab      	ldr	r3, [r5, #8]
	set_param.channel_map  = get_adv_channel_map(param->options);
    febc:	6868      	ldr	r0, [r5, #4]
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    febe:	823b      	strh	r3, [r7, #16]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    fec0:	68eb      	ldr	r3, [r5, #12]
    fec2:	827b      	strh	r3, [r7, #18]
	set_param.channel_map  = get_adv_channel_map(param->options);
    fec4:	f00b ff8c 	bl	1bde0 <get_adv_channel_map>
	if (adv->id != param->id) {
    fec8:	7832      	ldrb	r2, [r6, #0]
    feca:	782b      	ldrb	r3, [r5, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
    fecc:	7778      	strb	r0, [r7, #29]
	if (adv->id != param->id) {
    fece:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
    fed0:	f887 801e 	strb.w	r8, [r7, #30]
	if (adv->id != param->id) {
    fed4:	d004      	beq.n	fee0 <bt_le_adv_start_legacy+0x94>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    fed6:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
    feda:	4878      	ldr	r0, [pc, #480]	; (100bc <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xbc>)
    fedc:	f00b ff92 	bl	1be04 <atomic_and>
	adv->id = param->id;
    fee0:	782b      	ldrb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
    fee2:	4a77      	ldr	r2, [pc, #476]	; (100c0 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xc0>)
	adv->id = param->id;
    fee4:	7033      	strb	r3, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
    fee6:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
    feea:	4630      	mov	r0, r6
    feec:	4622      	mov	r2, r4
    feee:	6869      	ldr	r1, [r5, #4]
    fef0:	f107 0315 	add.w	r3, r7, #21
    fef4:	f7ff fe14 	bl	fb20 <bt_id_set_adv_own_addr>
	if (err) {
    fef8:	4604      	mov	r4, r0
    fefa:	2800      	cmp	r0, #0
    fefc:	d1c2      	bne.n	fe84 <bt_le_adv_start_legacy+0x38>
	memcpy(dst, src, sizeof(*dst));
    fefe:	2207      	movs	r2, #7
		bt_addr_le_copy(&adv->target_addr, param->peer);
    ff00:	f106 0009 	add.w	r0, r6, #9
	if (dir_adv) {
    ff04:	f1bb 0f00 	cmp.w	fp, #0
    ff08:	d013      	beq.n	ff32 <bt_le_adv_start_legacy+0xe6>
    ff0a:	6929      	ldr	r1, [r5, #16]
    ff0c:	f00b fce1 	bl	1b8d2 <memcpy>
	name_type = get_adv_name_type_param(param);
    ff10:	4628      	mov	r0, r5
    ff12:	f00c f807 	bl	1bf24 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    ff16:	686b      	ldr	r3, [r5, #4]
	name_type = get_adv_name_type_param(param);
    ff18:	4680      	mov	r8, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    ff1a:	07d9      	lsls	r1, r3, #31
    ff1c:	d416      	bmi.n	ff4c <bt_le_adv_start_legacy+0x100>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
    ff1e:	059b      	lsls	r3, r3, #22
    ff20:	d404      	bmi.n	ff2c <bt_le_adv_start_legacy+0xe0>
    ff22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    ff24:	b913      	cbnz	r3, ff2c <bt_le_adv_start_legacy+0xe0>
    ff26:	f1b8 0f02 	cmp.w	r8, #2
    ff2a:	d15f      	bne.n	ffec <bt_le_adv_start_legacy+0x1a0>
		set_param.type = BT_HCI_ADV_SCAN_IND;
    ff2c:	2302      	movs	r3, #2
    ff2e:	753b      	strb	r3, [r7, #20]
    ff30:	e019      	b.n	ff66 <bt_le_adv_start_legacy+0x11a>
    ff32:	4964      	ldr	r1, [pc, #400]	; (100c4 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xc4>)
    ff34:	f00b fccd 	bl	1b8d2 <memcpy>
	name_type = get_adv_name_type_param(param);
    ff38:	4628      	mov	r0, r5
    ff3a:	f00b fff3 	bl	1bf24 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    ff3e:	686b      	ldr	r3, [r5, #4]
	name_type = get_adv_name_type_param(param);
    ff40:	4680      	mov	r8, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    ff42:	07da      	lsls	r2, r3, #31
    ff44:	d5eb      	bpl.n	ff1e <bt_le_adv_start_legacy+0xd2>
			set_param.type = BT_HCI_ADV_IND;
    ff46:	f887 b014 	strb.w	fp, [r7, #20]
    ff4a:	e00c      	b.n	ff66 <bt_le_adv_start_legacy+0x11a>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
    ff4c:	f013 0f10 	tst.w	r3, #16
    ff50:	bf0c      	ite	eq
    ff52:	2301      	moveq	r3, #1
    ff54:	2304      	movne	r3, #4
    ff56:	2207      	movs	r2, #7
    ff58:	6929      	ldr	r1, [r5, #16]
    ff5a:	f107 0016 	add.w	r0, r7, #22
    ff5e:	753b      	strb	r3, [r7, #20]
	bool dir_adv = (param->peer != NULL), scannable = false;
    ff60:	46a2      	mov	sl, r4
    ff62:	f00b fcb6 	bl	1b8d2 <memcpy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    ff66:	210f      	movs	r1, #15
    ff68:	f242 0006 	movw	r0, #8198	; 0x2006
    ff6c:	f7fe fa26 	bl	e3bc <bt_hci_cmd_create>
	if (!buf) {
    ff70:	4604      	mov	r4, r0
    ff72:	2800      	cmp	r0, #0
    ff74:	f000 809f 	beq.w	100b6 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xb6>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    ff78:	220f      	movs	r2, #15
    ff7a:	f107 0110 	add.w	r1, r7, #16
    ff7e:	3008      	adds	r0, #8
    ff80:	f00d fde2 	bl	1db48 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    ff84:	4621      	mov	r1, r4
    ff86:	2200      	movs	r2, #0
    ff88:	f242 0006 	movw	r0, #8198	; 0x2006
    ff8c:	f7fe fa50 	bl	e430 <bt_hci_cmd_send_sync>
	if (err) {
    ff90:	4604      	mov	r4, r0
    ff92:	2800      	cmp	r0, #0
    ff94:	f47f af76 	bne.w	fe84 <bt_le_adv_start_legacy+0x38>
	if (!dir_adv) {
    ff98:	f1bb 0f00 	cmp.w	fp, #0
    ff9c:	d02b      	beq.n	fff6 <bt_le_adv_start_legacy+0x1aa>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    ff9e:	686b      	ldr	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    ffa0:	07dc      	lsls	r4, r3, #31
    ffa2:	d436      	bmi.n	10012 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x12>
	return bt_le_adv_set_enable_legacy(adv, enable);
    ffa4:	2101      	movs	r1, #1
    ffa6:	4630      	mov	r0, r6
    ffa8:	f00b ffcc 	bl	1bf44 <bt_le_adv_set_enable_legacy>
	if (err) {
    ffac:	4604      	mov	r4, r0
    ffae:	2800      	cmp	r0, #0
    ffb0:	d073      	beq.n	1009a <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x9a>
		BT_ERR("Failed to start advertiser");
    ffb2:	466d      	mov	r5, sp
    ffb4:	b088      	sub	sp, #32
    ffb6:	aa04      	add	r2, sp, #16
    ffb8:	4b43      	ldr	r3, [pc, #268]	; (100c8 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xc8>)
    ffba:	6153      	str	r3, [r2, #20]
    ffbc:	4b43      	ldr	r3, [pc, #268]	; (100cc <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xcc>)
    ffbe:	6193      	str	r3, [r2, #24]
    ffc0:	2303      	movs	r3, #3
    ffc2:	f842 3f10 	str.w	r3, [r2, #16]!
    ffc6:	2300      	movs	r3, #0
    ffc8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    ffcc:	4840      	ldr	r0, [pc, #256]	; (100d0 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xd0>)
    ffce:	f7fb fac7 	bl	b560 <z_impl_z_log_msg_static_create>
    ffd2:	46ad      	mov	sp, r5
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    ffd4:	68fd      	ldr	r5, [r7, #12]
    ffd6:	2d00      	cmp	r5, #0
    ffd8:	f43f af54 	beq.w	fe84 <bt_le_adv_start_legacy+0x38>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    ffdc:	4628      	mov	r0, r5
    ffde:	2100      	movs	r1, #0
    ffe0:	f000 fdf2 	bl	10bc8 <bt_conn_set_state>
			bt_conn_unref(conn);
    ffe4:	4628      	mov	r0, r5
    ffe6:	f00c f87a 	bl	1c0de <bt_conn_unref>
    ffea:	e74b      	b.n	fe84 <bt_le_adv_start_legacy+0x38>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
    ffec:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
    ffee:	f8d7 a048 	ldr.w	sl, [r7, #72]	; 0x48
		set_param.type = BT_HCI_ADV_NONCONN_IND;
    fff2:	753b      	strb	r3, [r7, #20]
    fff4:	e7b7      	b.n	ff66 <bt_le_adv_start_legacy+0x11a>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
    fff6:	e9cd a801 	strd	sl, r8, [sp, #4]
    fffa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    fffc:	4630      	mov	r0, r6
    fffe:	9300      	str	r3, [sp, #0]
   10000:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10002:	e9d7 2100 	ldrd	r2, r1, [r7]
   10006:	f00b ff1b 	bl	1be40 <le_adv_update.constprop.0>
		if (err) {
   1000a:	4604      	mov	r4, r0
   1000c:	2800      	cmp	r0, #0
   1000e:	d0c6      	beq.n	ff9e <bt_le_adv_start_legacy+0x152>
   10010:	e738      	b.n	fe84 <bt_le_adv_start_legacy+0x38>
		err = le_adv_start_add_conn(adv, &conn);
   10012:	4630      	mov	r0, r6
   10014:	f107 010c 	add.w	r1, r7, #12
   10018:	f7ff fe96 	bl	fd48 <le_adv_start_add_conn>
		if (err) {
   1001c:	4604      	mov	r4, r0
   1001e:	2800      	cmp	r0, #0
   10020:	d0c0      	beq.n	ffa4 <bt_le_adv_start_legacy+0x158>
			if (err == -ENOMEM && !dir_adv &&
   10022:	f110 0f0c 	cmn.w	r0, #12
   10026:	f47f af2d 	bne.w	fe84 <bt_le_adv_start_legacy+0x38>
   1002a:	f1bb 0f00 	cmp.w	fp, #0
   1002e:	f47f af29 	bne.w	fe84 <bt_le_adv_start_legacy+0x38>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   10032:	686b      	ldr	r3, [r5, #4]
			if (err == -ENOMEM && !dir_adv &&
   10034:	0798      	lsls	r0, r3, #30
   10036:	f53f af25 	bmi.w	fe84 <bt_le_adv_start_legacy+0x38>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   1003a:	686c      	ldr	r4, [r5, #4]
   1003c:	f084 0402 	eor.w	r4, r4, #2
   10040:	f3c4 0440 	ubfx	r4, r4, #1, #1
   10044:	f004 0201 	and.w	r2, r4, #1
   10048:	210e      	movs	r1, #14
   1004a:	4648      	mov	r0, r9
   1004c:	f00b fee5 	bl	1be1a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   10050:	f108 33ff 	add.w	r3, r8, #4294967295
   10054:	425a      	negs	r2, r3
   10056:	415a      	adcs	r2, r3
   10058:	2108      	movs	r1, #8
   1005a:	4648      	mov	r0, r9
   1005c:	f00b fedd 	bl	1be1a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   10060:	f1a8 0102 	sub.w	r1, r8, #2
   10064:	424a      	negs	r2, r1
   10066:	414a      	adcs	r2, r1
   10068:	4648      	mov	r0, r9
   1006a:	2109      	movs	r1, #9
   1006c:	f00b fed5 	bl	1be1a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   10070:	686a      	ldr	r2, [r5, #4]
   10072:	210a      	movs	r1, #10
   10074:	4648      	mov	r0, r9
   10076:	f002 0201 	and.w	r2, r2, #1
   1007a:	f00b fece 	bl	1be1a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   1007e:	4652      	mov	r2, sl
   10080:	210b      	movs	r1, #11
   10082:	4648      	mov	r0, r9
   10084:	f00b fec9 	bl	1be1a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   10088:	686a      	ldr	r2, [r5, #4]
   1008a:	210d      	movs	r1, #13
   1008c:	4648      	mov	r0, r9
   1008e:	f3c2 0280 	ubfx	r2, r2, #2, #1
   10092:	f00b fec2 	bl	1be1a <atomic_set_bit_to>
	return 0;
   10096:	2400      	movs	r4, #0
   10098:	e6f4      	b.n	fe84 <bt_le_adv_start_legacy+0x38>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   1009a:	68f8      	ldr	r0, [r7, #12]
   1009c:	b108      	cbz	r0, 100a2 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xa2>
		bt_conn_unref(conn);
   1009e:	f00c f81e 	bl	1c0de <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   100a2:	f1bb 0f00 	cmp.w	fp, #0
   100a6:	d1cd      	bne.n	10044 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x44>
   100a8:	e7c7      	b.n	1003a <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x3a>
		return -EAGAIN;
   100aa:	f06f 040a 	mvn.w	r4, #10
   100ae:	e6e9      	b.n	fe84 <bt_le_adv_start_legacy+0x38>
		return -EALREADY;
   100b0:	f06f 0477 	mvn.w	r4, #119	; 0x77
   100b4:	e6e6      	b.n	fe84 <bt_le_adv_start_legacy+0x38>
		return -ENOBUFS;
   100b6:	f06f 0468 	mvn.w	r4, #104	; 0x68
   100ba:	e6e3      	b.n	fe84 <bt_le_adv_start_legacy+0x38>
   100bc:	200080cc 	.word	0x200080cc
   100c0:	20008000 	.word	0x20008000
   100c4:	000215de 	.word	0x000215de
   100c8:	000224d3 	.word	0x000224d3
   100cc:	00022521 	.word	0x00022521
   100d0:	0001fc34 	.word	0x0001fc34

000100d4 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   100d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   100d6:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   100d8:	9a06      	ldr	r2, [sp, #24]
{
   100da:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   100dc:	e9cd 3200 	strd	r3, r2, [sp]
   100e0:	462b      	mov	r3, r5
   100e2:	460a      	mov	r2, r1
   100e4:	4601      	mov	r1, r0
   100e6:	4811      	ldr	r0, [pc, #68]	; (1012c <bt_le_adv_start+0x58>)
   100e8:	f7ff feb0 	bl	fe4c <bt_le_adv_start_legacy>
   100ec:	4621      	mov	r1, r4
   100ee:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   100f0:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   100f2:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   100f6:	429d      	cmp	r5, r3
   100f8:	d102      	bne.n	10100 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   100fa:	4630      	mov	r0, r6
   100fc:	b002      	add	sp, #8
   100fe:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   10100:	880a      	ldrh	r2, [r1, #0]
   10102:	4282      	cmp	r2, r0
   10104:	d104      	bne.n	10110 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   10106:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   10108:	b112      	cbz	r2, 10110 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   1010a:	7812      	ldrb	r2, [r2, #0]
   1010c:	07d2      	lsls	r2, r2, #31
   1010e:	d402      	bmi.n	10116 <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   10110:	3301      	adds	r3, #1
   10112:	3108      	adds	r1, #8
   10114:	e7ef      	b.n	100f6 <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   10116:	4906      	ldr	r1, [pc, #24]	; (10130 <bt_le_adv_start+0x5c>)
   10118:	4806      	ldr	r0, [pc, #24]	; (10134 <bt_le_adv_start+0x60>)
   1011a:	f00e ff90 	bl	1f03e <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   1011e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   10122:	2300      	movs	r3, #0
   10124:	4803      	ldr	r0, [pc, #12]	; (10134 <bt_le_adv_start+0x60>)
   10126:	f008 ffdb 	bl	190e0 <k_work_reschedule>
   1012a:	e7e6      	b.n	100fa <bt_le_adv_start+0x26>
   1012c:	20008018 	.word	0x20008018
   10130:	000101bd 	.word	0x000101bd
   10134:	20008030 	.word	0x20008030

00010138 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   10138:	b510      	push	{r4, lr}
	if (!adv) {
		BT_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
   1013a:	481a      	ldr	r0, [pc, #104]	; (101a4 <bt_le_adv_stop+0x6c>)
   1013c:	f00b ff29 	bl	1bf92 <bt_le_lim_adv_cancel_timeout>
   10140:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   10144:	4818      	ldr	r0, [pc, #96]	; (101a8 <bt_le_adv_stop+0x70>)
   10146:	f00b fe5d 	bl	1be04 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1014a:	4817      	ldr	r0, [pc, #92]	; (101a8 <bt_le_adv_stop+0x70>)
   1014c:	f00b fe57 	bl	1bdfe <atomic_get>
   10150:	4603      	mov	r3, r0
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   10152:	061a      	lsls	r2, r3, #24
   10154:	f3c0 10c0 	ubfx	r0, r0, #7, #1
   10158:	d523      	bpl.n	101a2 <bt_le_adv_stop+0x6a>
   1015a:	4813      	ldr	r0, [pc, #76]	; (101a8 <bt_le_adv_stop+0x70>)
   1015c:	f00b fe4f 	bl	1bdfe <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10160:	0543      	lsls	r3, r0, #21
   10162:	d514      	bpl.n	1018e <bt_le_adv_stop+0x56>
	return memcmp(a, b, sizeof(*a));
   10164:	2207      	movs	r2, #7
   10166:	4911      	ldr	r1, [pc, #68]	; (101ac <bt_le_adv_stop+0x74>)
   10168:	4811      	ldr	r0, [pc, #68]	; (101b0 <bt_le_adv_stop+0x78>)
   1016a:	f00b fba2 	bl	1b8b2 <memcmp>
   1016e:	4b11      	ldr	r3, [pc, #68]	; (101b4 <bt_le_adv_stop+0x7c>)
	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
   10170:	b998      	cbnz	r0, 1019a <bt_le_adv_stop+0x62>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   10172:	2204      	movs	r2, #4
   10174:	4910      	ldr	r1, [pc, #64]	; (101b8 <bt_le_adv_stop+0x80>)
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   10176:	7e18      	ldrb	r0, [r3, #24]
   10178:	f000 ff76 	bl	11068 <bt_conn_lookup_state_le>
   1017c:	4604      	mov	r4, r0
	if (conn) {
   1017e:	b130      	cbz	r0, 1018e <bt_le_adv_stop+0x56>
		conn->err = status;
   10180:	2100      	movs	r1, #0
   10182:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10184:	f000 fd20 	bl	10bc8 <bt_conn_set_state>
		bt_conn_unref(conn);
   10188:	4620      	mov	r0, r4
   1018a:	f00b ffa8 	bl	1c0de <bt_conn_unref>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   1018e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = bt_le_adv_set_enable_legacy(adv, false);
   10192:	2100      	movs	r1, #0
   10194:	4803      	ldr	r0, [pc, #12]	; (101a4 <bt_le_adv_stop+0x6c>)
   10196:	f00b bed5 	b.w	1bf44 <bt_le_adv_set_enable_legacy>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   1019a:	2205      	movs	r2, #5
   1019c:	f103 0121 	add.w	r1, r3, #33	; 0x21
   101a0:	e7e9      	b.n	10176 <bt_le_adv_stop+0x3e>
}
   101a2:	bd10      	pop	{r4, pc}
   101a4:	20008018 	.word	0x20008018
   101a8:	20008028 	.word	0x20008028
   101ac:	000215de 	.word	0x000215de
   101b0:	20008021 	.word	0x20008021
   101b4:	20008000 	.word	0x20008000
   101b8:	000215d7 	.word	0x000215d7

000101bc <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
   101bc:	b580      	push	{r7, lr}
   101be:	af00      	add	r7, sp, #0
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   101c0:	f7ff ffba 	bl	10138 <bt_le_adv_stop>
#endif
	BT_WARN("Failed to stop advertising: %d", err);
   101c4:	b088      	sub	sp, #32
   101c6:	466a      	mov	r2, sp
   101c8:	4b07      	ldr	r3, [pc, #28]	; (101e8 <adv_timeout+0x2c>)
   101ca:	6153      	str	r3, [r2, #20]
   101cc:	4b07      	ldr	r3, [pc, #28]	; (101ec <adv_timeout+0x30>)
   101ce:	e9c2 3006 	strd	r3, r0, [r2, #24]
   101d2:	2304      	movs	r3, #4
   101d4:	f842 3f10 	str.w	r3, [r2, #16]!
   101d8:	2300      	movs	r3, #0
   101da:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   101de:	4804      	ldr	r0, [pc, #16]	; (101f0 <adv_timeout+0x34>)
   101e0:	f7fb f9be 	bl	b560 <z_impl_z_log_msg_static_create>
}
   101e4:	46bd      	mov	sp, r7
   101e6:	bd80      	pop	{r7, pc}
   101e8:	000224f2 	.word	0x000224f2
   101ec:	00022515 	.word	0x00022515
   101f0:	0001fc34 	.word	0x0001fc34

000101f4 <bt_le_adv_resume>:
{
   101f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   101f6:	4c1e      	ldr	r4, [pc, #120]	; (10270 <bt_le_adv_resume+0x7c>)
   101f8:	4620      	mov	r0, r4
   101fa:	f00b fe00 	bl	1bdfe <atomic_get>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   101fe:	0440      	lsls	r0, r0, #17
   10200:	d534      	bpl.n	1026c <bt_le_adv_resume+0x78>
   10202:	4620      	mov	r0, r4
   10204:	f00b fdfb 	bl	1bdfe <atomic_get>
   10208:	0601      	lsls	r1, r0, #24
   1020a:	d42f      	bmi.n	1026c <bt_le_adv_resume+0x78>
   1020c:	4620      	mov	r0, r4
   1020e:	f00b fdf6 	bl	1bdfe <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   10212:	0542      	lsls	r2, r0, #21
   10214:	d52a      	bpl.n	1026c <bt_le_adv_resume+0x78>
	err = le_adv_start_add_conn(adv, &conn);
   10216:	a901      	add	r1, sp, #4
   10218:	f1a4 0010 	sub.w	r0, r4, #16
   1021c:	f7ff fd94 	bl	fd48 <le_adv_start_add_conn>
	if (err) {
   10220:	4605      	mov	r5, r0
   10222:	bb18      	cbnz	r0, 1026c <bt_le_adv_resume+0x78>
	return bt_le_adv_set_enable_legacy(adv, enable);
   10224:	2101      	movs	r1, #1
   10226:	f1a4 0010 	sub.w	r0, r4, #16
   1022a:	f00b fe8b 	bl	1bf44 <bt_le_adv_set_enable_legacy>
	bt_conn_unref(conn);
   1022e:	9e01      	ldr	r6, [sp, #4]
	if (err) {
   10230:	b928      	cbnz	r0, 1023e <bt_le_adv_resume+0x4a>
	bt_conn_unref(conn);
   10232:	4630      	mov	r0, r6
}
   10234:	b002      	add	sp, #8
   10236:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   1023a:	f00b bf50 	b.w	1c0de <bt_conn_unref>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1023e:	4629      	mov	r1, r5
   10240:	4630      	mov	r0, r6
   10242:	f000 fcc1 	bl	10bc8 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10246:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   1024a:	4620      	mov	r0, r4
   1024c:	f00b fdda 	bl	1be04 <atomic_and>
   10250:	4605      	mov	r5, r0
	bt_conn_unref(conn);
   10252:	4630      	mov	r0, r6
   10254:	f00b ff43 	bl	1c0de <bt_conn_unref>
	if (persist_paused) {
   10258:	046b      	lsls	r3, r5, #17
   1025a:	d507      	bpl.n	1026c <bt_le_adv_resume+0x78>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1025c:	e8d4 3fef 	ldaex	r3, [r4]
   10260:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   10264:	e8c4 3fe2 	stlex	r2, r3, [r4]
   10268:	2a00      	cmp	r2, #0
   1026a:	d1f7      	bne.n	1025c <bt_le_adv_resume+0x68>
}
   1026c:	b002      	add	sp, #8
   1026e:	bd70      	pop	{r4, r5, r6, pc}
   10270:	20008028 	.word	0x20008028

00010274 <prng_reseed.constprop.0>:

#include "hci_core.h"

static struct tc_hmac_prng_struct prng;

static int prng_reseed(struct tc_hmac_prng_struct *h)
   10274:	b5b0      	push	{r4, r5, r7, lr}
   10276:	b08c      	sub	sp, #48	; 0x30
   10278:	af02      	add	r7, sp, #8
{
	uint8_t seed[32];
	int64_t extra;
	int ret;

	ret = bt_hci_le_rand(seed, sizeof(seed));
   1027a:	2120      	movs	r1, #32
   1027c:	f107 0008 	add.w	r0, r7, #8
   10280:	f7fe f988 	bl	e594 <bt_hci_le_rand>
	if (ret) {
   10284:	4604      	mov	r4, r0
   10286:	bb50      	cbnz	r0, 102de <prng_reseed.constprop.0+0x6a>
	return z_impl_k_uptime_ticks();
   10288:	f00f f887 	bl	1f39a <z_impl_k_uptime_ticks>
			return ((t * to_hz + off) / from_hz);
   1028c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   10290:	fba0 2305 	umull	r2, r3, r0, r5
   10294:	fb05 3101 	mla	r1, r5, r1, r3
		return ret;
	}

	extra = k_uptime_get();

	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
   10298:	2308      	movs	r3, #8
   1029a:	0bd2      	lsrs	r2, r2, #15
   1029c:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
   102a0:	0bc9      	lsrs	r1, r1, #15
	extra = k_uptime_get();
   102a2:	e9c7 2100 	strd	r2, r1, [r7]
	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
   102a6:	4810      	ldr	r0, [pc, #64]	; (102e8 <prng_reseed.constprop.0+0x74>)
   102a8:	9300      	str	r3, [sp, #0]
   102aa:	2220      	movs	r2, #32
   102ac:	463b      	mov	r3, r7
   102ae:	f107 0108 	add.w	r1, r7, #8
   102b2:	f00b fa10 	bl	1b6d6 <tc_hmac_prng_reseed>
				  sizeof(extra));
	if (ret == TC_CRYPTO_FAIL) {
   102b6:	b990      	cbnz	r0, 102de <prng_reseed.constprop.0+0x6a>
		BT_ERR("Failed to re-seed PRNG");
   102b8:	466d      	mov	r5, sp
   102ba:	b088      	sub	sp, #32
   102bc:	aa02      	add	r2, sp, #8
   102be:	4b0b      	ldr	r3, [pc, #44]	; (102ec <prng_reseed.constprop.0+0x78>)
   102c0:	6153      	str	r3, [r2, #20]
   102c2:	4b0b      	ldr	r3, [pc, #44]	; (102f0 <prng_reseed.constprop.0+0x7c>)
   102c4:	6193      	str	r3, [r2, #24]
   102c6:	2303      	movs	r3, #3
   102c8:	f842 3f10 	str.w	r3, [r2, #16]!
   102cc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   102d0:	4623      	mov	r3, r4
   102d2:	4808      	ldr	r0, [pc, #32]	; (102f4 <prng_reseed.constprop.0+0x80>)
   102d4:	f7fb f944 	bl	b560 <z_impl_z_log_msg_static_create>
   102d8:	f06f 0404 	mvn.w	r4, #4
   102dc:	46ad      	mov	sp, r5
		return -EIO;
	}

	return 0;
}
   102de:	4620      	mov	r0, r4
   102e0:	3728      	adds	r7, #40	; 0x28
   102e2:	46bd      	mov	sp, r7
   102e4:	bdb0      	pop	{r4, r5, r7, pc}
   102e6:	bf00      	nop
   102e8:	20009450 	.word	0x20009450
   102ec:	00022555 	.word	0x00022555
   102f0:	0002258e 	.word	0x0002258e
   102f4:	0001fc54 	.word	0x0001fc54

000102f8 <prng_init>:

int prng_init(void)
{
   102f8:	b5b0      	push	{r4, r5, r7, lr}
   102fa:	b082      	sub	sp, #8
   102fc:	af00      	add	r7, sp, #0
	uint8_t perso[8];
	int ret;

	ret = bt_hci_le_rand(perso, sizeof(perso));
   102fe:	2108      	movs	r1, #8
   10300:	4638      	mov	r0, r7
   10302:	f7fe f947 	bl	e594 <bt_hci_le_rand>
	if (ret) {
   10306:	4604      	mov	r4, r0
   10308:	b9c0      	cbnz	r0, 1033c <prng_init+0x44>
		return ret;
	}

	ret = tc_hmac_prng_init(&prng, perso, sizeof(perso));
   1030a:	2208      	movs	r2, #8
   1030c:	4639      	mov	r1, r7
   1030e:	480f      	ldr	r0, [pc, #60]	; (1034c <prng_init+0x54>)
   10310:	f00b f9c1 	bl	1b696 <tc_hmac_prng_init>
	if (ret == TC_CRYPTO_FAIL) {
   10314:	b9b0      	cbnz	r0, 10344 <prng_init+0x4c>
		BT_ERR("Failed to initialize PRNG");
   10316:	466d      	mov	r5, sp
   10318:	b088      	sub	sp, #32
   1031a:	466a      	mov	r2, sp
   1031c:	4b0c      	ldr	r3, [pc, #48]	; (10350 <prng_init+0x58>)
   1031e:	6153      	str	r3, [r2, #20]
   10320:	4b0c      	ldr	r3, [pc, #48]	; (10354 <prng_init+0x5c>)
   10322:	6193      	str	r3, [r2, #24]
   10324:	2303      	movs	r3, #3
   10326:	f842 3f10 	str.w	r3, [r2, #16]!
   1032a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1032e:	4623      	mov	r3, r4
   10330:	4809      	ldr	r0, [pc, #36]	; (10358 <prng_init+0x60>)
   10332:	f7fb f915 	bl	b560 <z_impl_z_log_msg_static_create>
		return -EIO;
   10336:	f06f 0404 	mvn.w	r4, #4
   1033a:	46ad      	mov	sp, r5
	}

	/* re-seed is needed after init */
	return prng_reseed(&prng);
}
   1033c:	4620      	mov	r0, r4
   1033e:	3708      	adds	r7, #8
   10340:	46bd      	mov	sp, r7
   10342:	bdb0      	pop	{r4, r5, r7, pc}
	return prng_reseed(&prng);
   10344:	f7ff ff96 	bl	10274 <prng_reseed.constprop.0>
   10348:	4604      	mov	r4, r0
   1034a:	e7f7      	b.n	1033c <prng_init+0x44>
   1034c:	20009450 	.word	0x20009450
   10350:	00022570 	.word	0x00022570
   10354:	0002259a 	.word	0x0002259a
   10358:	0001fc54 	.word	0x0001fc54

0001035c <bt_rand>:

#if defined(CONFIG_BT_HOST_CRYPTO_PRNG)
int bt_rand(void *buf, size_t len)
{
   1035c:	b538      	push	{r3, r4, r5, lr}
   1035e:	460d      	mov	r5, r1
	int ret;

	CHECKIF(buf == NULL || len == 0) {
   10360:	4604      	mov	r4, r0
   10362:	b198      	cbz	r0, 1038c <bt_rand+0x30>
   10364:	b191      	cbz	r1, 1038c <bt_rand+0x30>
		return -EINVAL;
	}

	ret = tc_hmac_prng_generate(buf, len, &prng);
   10366:	4a0b      	ldr	r2, [pc, #44]	; (10394 <bt_rand+0x38>)
   10368:	f00b f9ce 	bl	1b708 <tc_hmac_prng_generate>
	if (ret == TC_HMAC_PRNG_RESEED_REQ) {
   1036c:	1c43      	adds	r3, r0, #1
   1036e:	d107      	bne.n	10380 <bt_rand+0x24>
		ret = prng_reseed(&prng);
   10370:	f7ff ff80 	bl	10274 <prng_reseed.constprop.0>
		if (ret) {
   10374:	b948      	cbnz	r0, 1038a <bt_rand+0x2e>
			return ret;
		}

		ret = tc_hmac_prng_generate(buf, len, &prng);
   10376:	4629      	mov	r1, r5
   10378:	4620      	mov	r0, r4
   1037a:	4a06      	ldr	r2, [pc, #24]	; (10394 <bt_rand+0x38>)
   1037c:	f00b f9c4 	bl	1b708 <tc_hmac_prng_generate>

	if (ret == TC_CRYPTO_SUCCESS) {
		return 0;
	}

	return -EIO;
   10380:	2801      	cmp	r0, #1
   10382:	bf0c      	ite	eq
   10384:	2000      	moveq	r0, #0
   10386:	f06f 0004 	mvnne.w	r0, #4
}
   1038a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1038c:	f06f 0015 	mvn.w	r0, #21
   10390:	e7fb      	b.n	1038a <bt_rand+0x2e>
   10392:	bf00      	nop
   10394:	20009450 	.word	0x20009450

00010398 <bt_pub_key_is_debug>:
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   10398:	2240      	movs	r2, #64	; 0x40
{
   1039a:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   1039c:	4903      	ldr	r1, [pc, #12]	; (103ac <bt_pub_key_is_debug+0x14>)
   1039e:	f00b fa88 	bl	1b8b2 <memcmp>
}
   103a2:	fab0 f080 	clz	r0, r0
   103a6:	0940      	lsrs	r0, r0, #5
   103a8:	bd08      	pop	{r3, pc}
   103aa:	bf00      	nop
   103ac:	00022662 	.word	0x00022662

000103b0 <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   103b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   103b4:	4b46      	ldr	r3, [pc, #280]	; (104d0 <bt_pub_key_gen+0x120>)
{
   103b6:	af00      	add	r7, sp, #0
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   103b8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   103bc:	f003 0306 	and.w	r3, r3, #6
   103c0:	2b06      	cmp	r3, #6
   103c2:	d016      	beq.n	103f2 <bt_pub_key_gen+0x42>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
   103c4:	466c      	mov	r4, sp
   103c6:	b088      	sub	sp, #32
   103c8:	466a      	mov	r2, sp
   103ca:	4b42      	ldr	r3, [pc, #264]	; (104d4 <bt_pub_key_gen+0x124>)
   103cc:	6153      	str	r3, [r2, #20]
   103ce:	4b42      	ldr	r3, [pc, #264]	; (104d8 <bt_pub_key_gen+0x128>)
   103d0:	6193      	str	r3, [r2, #24]
   103d2:	2303      	movs	r3, #3
   103d4:	f842 3f10 	str.w	r3, [r2, #16]!
   103d8:	2300      	movs	r3, #0
   103da:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   103de:	483f      	ldr	r0, [pc, #252]	; (104dc <bt_pub_key_gen+0x12c>)
   103e0:	f7fb f8be 	bl	b560 <z_impl_z_log_msg_static_create>
		return -ENOTSUP;
   103e4:	f06f 0585 	mvn.w	r5, #133	; 0x85
   103e8:	46a5      	mov	sp, r4
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
   103ea:	4628      	mov	r0, r5
   103ec:	46bd      	mov	sp, r7
   103ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!new_cb) {
   103f2:	2800      	cmp	r0, #0
   103f4:	d069      	beq.n	104ca <bt_pub_key_gen+0x11a>
	return list->head;
   103f6:	4e3a      	ldr	r6, [pc, #232]	; (104e0 <bt_pub_key_gen+0x130>)
   103f8:	6832      	ldr	r2, [r6, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   103fa:	b1d2      	cbz	r2, 10432 <bt_pub_key_gen+0x82>
   103fc:	1f13      	subs	r3, r2, #4
		if (cb == new_cb) {
   103fe:	4283      	cmp	r3, r0
   10400:	d113      	bne.n	1042a <bt_pub_key_gen+0x7a>
			BT_WARN("Callback already registered");
   10402:	466c      	mov	r4, sp
   10404:	b088      	sub	sp, #32
   10406:	466a      	mov	r2, sp
   10408:	4b36      	ldr	r3, [pc, #216]	; (104e4 <bt_pub_key_gen+0x134>)
   1040a:	6153      	str	r3, [r2, #20]
   1040c:	4b32      	ldr	r3, [pc, #200]	; (104d8 <bt_pub_key_gen+0x128>)
   1040e:	6193      	str	r3, [r2, #24]
   10410:	2303      	movs	r3, #3
   10412:	f842 3f10 	str.w	r3, [r2, #16]!
   10416:	2300      	movs	r3, #0
   10418:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1041c:	482f      	ldr	r0, [pc, #188]	; (104dc <bt_pub_key_gen+0x12c>)
   1041e:	f7fb f89f 	bl	b560 <z_impl_z_log_msg_static_create>
			return -EALREADY;
   10422:	f06f 0577 	mvn.w	r5, #119	; 0x77
   10426:	46a5      	mov	sp, r4
   10428:	e7df      	b.n	103ea <bt_pub_key_gen+0x3a>
	return node->next;
   1042a:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1042c:	b10b      	cbz	r3, 10432 <bt_pub_key_gen+0x82>
   1042e:	3b04      	subs	r3, #4
   10430:	e7e5      	b.n	103fe <bt_pub_key_gen+0x4e>
	parent->next = child;
   10432:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
   10434:	6872      	ldr	r2, [r6, #4]
	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   10436:	1d03      	adds	r3, r0, #4
	list->head = node;
   10438:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1043a:	b902      	cbnz	r2, 1043e <bt_pub_key_gen+0x8e>
	list->tail = node;
   1043c:	6073      	str	r3, [r6, #4]
   1043e:	4c2a      	ldr	r4, [pc, #168]	; (104e8 <bt_pub_key_gen+0x138>)
   10440:	e8d4 8fef 	ldaex	r8, [r4]
   10444:	f048 0320 	orr.w	r3, r8, #32
   10448:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1044c:	2a00      	cmp	r2, #0
   1044e:	d1f7      	bne.n	10440 <bt_pub_key_gen+0x90>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   10450:	f018 0820 	ands.w	r8, r8, #32
   10454:	d001      	beq.n	1045a <bt_pub_key_gen+0xaa>
	return 0;
   10456:	2500      	movs	r5, #0
   10458:	e7c7      	b.n	103ea <bt_pub_key_gen+0x3a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1045a:	e8d4 3fef 	ldaex	r3, [r4]
   1045e:	f023 0310 	bic.w	r3, r3, #16
   10462:	e8c4 3fe2 	stlex	r2, r3, [r4]
   10466:	2a00      	cmp	r2, #0
   10468:	d1f7      	bne.n	1045a <bt_pub_key_gen+0xaa>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   1046a:	4642      	mov	r2, r8
   1046c:	4641      	mov	r1, r8
   1046e:	f242 0025 	movw	r0, #8229	; 0x2025
   10472:	f7fd ffdd 	bl	e430 <bt_hci_cmd_send_sync>
	if (err) {
   10476:	4605      	mov	r5, r0
   10478:	2800      	cmp	r0, #0
   1047a:	d0ec      	beq.n	10456 <bt_pub_key_gen+0xa6>
		BT_ERR("Sending LE P256 Public Key command failed");
   1047c:	46e9      	mov	r9, sp
   1047e:	b088      	sub	sp, #32
   10480:	466a      	mov	r2, sp
   10482:	4b1a      	ldr	r3, [pc, #104]	; (104ec <bt_pub_key_gen+0x13c>)
   10484:	6153      	str	r3, [r2, #20]
   10486:	4b14      	ldr	r3, [pc, #80]	; (104d8 <bt_pub_key_gen+0x128>)
   10488:	6193      	str	r3, [r2, #24]
   1048a:	2303      	movs	r3, #3
   1048c:	f842 3f10 	str.w	r3, [r2, #16]!
   10490:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   10494:	4643      	mov	r3, r8
   10496:	4811      	ldr	r0, [pc, #68]	; (104dc <bt_pub_key_gen+0x12c>)
   10498:	f7fb f862 	bl	b560 <z_impl_z_log_msg_static_create>
   1049c:	46cd      	mov	sp, r9
   1049e:	e8d4 3fef 	ldaex	r3, [r4]
   104a2:	f023 0320 	bic.w	r3, r3, #32
   104a6:	e8c4 3fe2 	stlex	r2, r3, [r4]
   104aa:	2a00      	cmp	r2, #0
   104ac:	d1f7      	bne.n	1049e <bt_pub_key_gen+0xee>
	return list->head;
   104ae:	6834      	ldr	r4, [r6, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   104b0:	b13c      	cbz	r4, 104c2 <bt_pub_key_gen+0x112>
			if (cb->func) {
   104b2:	f854 3c04 	ldr.w	r3, [r4, #-4]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   104b6:	3c04      	subs	r4, #4
			if (cb->func) {
   104b8:	b10b      	cbz	r3, 104be <bt_pub_key_gen+0x10e>
				cb->func(NULL);
   104ba:	2000      	movs	r0, #0
   104bc:	4798      	blx	r3
	return node->next;
   104be:	6864      	ldr	r4, [r4, #4]
   104c0:	e7f6      	b.n	104b0 <bt_pub_key_gen+0x100>
	list->head = NULL;
   104c2:	2300      	movs	r3, #0
	list->tail = NULL;
   104c4:	e9c6 3300 	strd	r3, r3, [r6]
		return err;
   104c8:	e78f      	b.n	103ea <bt_pub_key_gen+0x3a>
		return -EINVAL;
   104ca:	f06f 0515 	mvn.w	r5, #21
   104ce:	e78c      	b.n	103ea <bt_pub_key_gen+0x3a>
   104d0:	20008000 	.word	0x20008000
   104d4:	000225ae 	.word	0x000225ae
   104d8:	00022653 	.word	0x00022653
   104dc:	0001fc64 	.word	0x0001fc64
   104e0:	20009bb0 	.word	0x20009bb0
   104e4:	000225d1 	.word	0x000225d1
   104e8:	200080cc 	.word	0x200080cc
   104ec:	000225f1 	.word	0x000225f1

000104f0 <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   104f0:	4b04      	ldr	r3, [pc, #16]	; (10504 <bt_pub_key_get+0x14>)
   104f2:	e8d3 3faf 	lda	r3, [r3]

	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
   104f6:	f013 0f10 	tst.w	r3, #16
}
   104fa:	4803      	ldr	r0, [pc, #12]	; (10508 <bt_pub_key_get+0x18>)
   104fc:	bf08      	it	eq
   104fe:	2000      	moveq	r0, #0
   10500:	4770      	bx	lr
   10502:	bf00      	nop
   10504:	200080cc 	.word	0x200080cc
   10508:	2000a031 	.word	0x2000a031

0001050c <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
   1050c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int err;

	if (dh_key_cb == cb) {
   10510:	4d26      	ldr	r5, [pc, #152]	; (105ac <bt_dh_key_gen+0xa0>)
{
   10512:	4606      	mov	r6, r0
	if (dh_key_cb == cb) {
   10514:	682b      	ldr	r3, [r5, #0]
{
   10516:	af00      	add	r7, sp, #0
	if (dh_key_cb == cb) {
   10518:	428b      	cmp	r3, r1
   1051a:	d041      	beq.n	105a0 <bt_dh_key_gen+0x94>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   1051c:	b12b      	cbz	r3, 1052a <bt_dh_key_gen+0x1e>
		return -EBUSY;
   1051e:	f06f 040f 	mvn.w	r4, #15
		BT_WARN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   10522:	4620      	mov	r0, r4
   10524:	46bd      	mov	sp, r7
   10526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1052a:	4b21      	ldr	r3, [pc, #132]	; (105b0 <bt_dh_key_gen+0xa4>)
   1052c:	e8d3 2faf 	lda	r2, [r3]
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   10530:	f3c2 1840 	ubfx	r8, r2, #5, #1
   10534:	0692      	lsls	r2, r2, #26
   10536:	d4f2      	bmi.n	1051e <bt_dh_key_gen+0x12>
   10538:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   1053c:	06db      	lsls	r3, r3, #27
   1053e:	d532      	bpl.n	105a6 <bt_dh_key_gen+0x9a>
	dh_key_cb = cb;
   10540:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   10542:	f242 0026 	movw	r0, #8230	; 0x2026
   10546:	2140      	movs	r1, #64	; 0x40
   10548:	f7fd ff38 	bl	e3bc <bt_hci_cmd_create>
	if (!buf) {
   1054c:	4604      	mov	r4, r0
   1054e:	b320      	cbz	r0, 1059a <bt_dh_key_gen+0x8e>
	return net_buf_simple_add(&buf->b, len);
   10550:	2140      	movs	r1, #64	; 0x40
   10552:	3008      	adds	r0, #8
   10554:	f00d faf2 	bl	1db3c <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
   10558:	2240      	movs	r2, #64	; 0x40
   1055a:	4631      	mov	r1, r6
   1055c:	f00b f9b9 	bl	1b8d2 <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   10560:	4621      	mov	r1, r4
   10562:	4642      	mov	r2, r8
   10564:	f242 0026 	movw	r0, #8230	; 0x2026
   10568:	f7fd ff62 	bl	e430 <bt_hci_cmd_send_sync>
	if (err) {
   1056c:	4604      	mov	r4, r0
   1056e:	2800      	cmp	r0, #0
   10570:	d0d7      	beq.n	10522 <bt_dh_key_gen+0x16>
		dh_key_cb = NULL;
   10572:	2300      	movs	r3, #0
   10574:	602b      	str	r3, [r5, #0]
		BT_WARN("Failed to generate DHKey (err %d)", err);
   10576:	466d      	mov	r5, sp
   10578:	b088      	sub	sp, #32
   1057a:	466a      	mov	r2, sp
   1057c:	490d      	ldr	r1, [pc, #52]	; (105b4 <bt_dh_key_gen+0xa8>)
   1057e:	6151      	str	r1, [r2, #20]
   10580:	490d      	ldr	r1, [pc, #52]	; (105b8 <bt_dh_key_gen+0xac>)
   10582:	e9c2 1406 	strd	r1, r4, [r2, #24]
   10586:	2104      	movs	r1, #4
   10588:	f842 1f10 	str.w	r1, [r2, #16]!
   1058c:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   10590:	480a      	ldr	r0, [pc, #40]	; (105bc <bt_dh_key_gen+0xb0>)
   10592:	f7fa ffe5 	bl	b560 <z_impl_z_log_msg_static_create>
   10596:	46ad      	mov	sp, r5
		return err;
   10598:	e7c3      	b.n	10522 <bt_dh_key_gen+0x16>
		return -ENOBUFS;
   1059a:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1059e:	e7e8      	b.n	10572 <bt_dh_key_gen+0x66>
		return -EALREADY;
   105a0:	f06f 0477 	mvn.w	r4, #119	; 0x77
   105a4:	e7bd      	b.n	10522 <bt_dh_key_gen+0x16>
		return -EADDRNOTAVAIL;
   105a6:	f06f 047c 	mvn.w	r4, #124	; 0x7c
   105aa:	e7ba      	b.n	10522 <bt_dh_key_gen+0x16>
   105ac:	20009bac 	.word	0x20009bac
   105b0:	200080cc 	.word	0x200080cc
   105b4:	0002261f 	.word	0x0002261f
   105b8:	00022645 	.word	0x00022645
   105bc:	0001fc64 	.word	0x0001fc64

000105c0 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   105c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   105c2:	4c17      	ldr	r4, [pc, #92]	; (10620 <bt_hci_evt_le_pkey_complete+0x60>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   105c4:	6886      	ldr	r6, [r0, #8]
   105c6:	e8d4 3fef 	ldaex	r3, [r4]
   105ca:	f023 0320 	bic.w	r3, r3, #32
   105ce:	e8c4 3fe2 	stlex	r2, r3, [r4]
   105d2:	2a00      	cmp	r2, #0
   105d4:	d1f7      	bne.n	105c6 <bt_hci_evt_le_pkey_complete+0x6>

	BT_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   105d6:	7833      	ldrb	r3, [r6, #0]
   105d8:	b963      	cbnz	r3, 105f4 <bt_hci_evt_le_pkey_complete+0x34>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
   105da:	2240      	movs	r2, #64	; 0x40
   105dc:	4811      	ldr	r0, [pc, #68]	; (10624 <bt_hci_evt_le_pkey_complete+0x64>)
   105de:	1c71      	adds	r1, r6, #1
   105e0:	f00b f977 	bl	1b8d2 <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   105e4:	e8d4 3fef 	ldaex	r3, [r4]
   105e8:	f043 0310 	orr.w	r3, r3, #16
   105ec:	e8c4 3fe2 	stlex	r2, r3, [r4]
   105f0:	2a00      	cmp	r2, #0
   105f2:	d1f7      	bne.n	105e4 <bt_hci_evt_le_pkey_complete+0x24>
	return list->head;
   105f4:	4d0c      	ldr	r5, [pc, #48]	; (10628 <bt_hci_evt_le_pkey_complete+0x68>)
   105f6:	682c      	ldr	r4, [r5, #0]
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   105f8:	b16c      	cbz	r4, 10616 <bt_hci_evt_le_pkey_complete+0x56>
		if (cb->func) {
			cb->func(evt->status ? NULL : pub_key);
   105fa:	4f0a      	ldr	r7, [pc, #40]	; (10624 <bt_hci_evt_le_pkey_complete+0x64>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   105fc:	3c04      	subs	r4, #4
		if (cb->func) {
   105fe:	6823      	ldr	r3, [r4, #0]
   10600:	b12b      	cbz	r3, 1060e <bt_hci_evt_le_pkey_complete+0x4e>
			cb->func(evt->status ? NULL : pub_key);
   10602:	7832      	ldrb	r2, [r6, #0]
   10604:	2a00      	cmp	r2, #0
   10606:	bf0c      	ite	eq
   10608:	4638      	moveq	r0, r7
   1060a:	2000      	movne	r0, #0
   1060c:	4798      	blx	r3
	return node->next;
   1060e:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   10610:	b10c      	cbz	r4, 10616 <bt_hci_evt_le_pkey_complete+0x56>
   10612:	3c04      	subs	r4, #4
   10614:	e7f3      	b.n	105fe <bt_hci_evt_le_pkey_complete+0x3e>
	list->head = NULL;
   10616:	2300      	movs	r3, #0
	list->tail = NULL;
   10618:	e9c5 3300 	strd	r3, r3, [r5]
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   1061c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1061e:	bf00      	nop
   10620:	200080cc 	.word	0x200080cc
   10624:	2000a031 	.word	0x2000a031
   10628:	20009bb0 	.word	0x20009bb0

0001062c <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   1062c:	4905      	ldr	r1, [pc, #20]	; (10644 <bt_hci_evt_le_dhkey_complete+0x18>)
   1062e:	680b      	ldr	r3, [r1, #0]
   10630:	b133      	cbz	r3, 10640 <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   10632:	6882      	ldr	r2, [r0, #8]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   10634:	2000      	movs	r0, #0
   10636:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
   10638:	7811      	ldrb	r1, [r2, #0]
   1063a:	b901      	cbnz	r1, 1063e <bt_hci_evt_le_dhkey_complete+0x12>
   1063c:	1c50      	adds	r0, r2, #1
   1063e:	4718      	bx	r3
	}
}
   10640:	4770      	bx	lr
   10642:	bf00      	nop
   10644:	20009bac 	.word	0x20009bac

00010648 <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   10648:	b570      	push	{r4, r5, r6, lr}
   1064a:	4604      	mov	r4, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   1064c:	4b0a      	ldr	r3, [pc, #40]	; (10678 <notify_connected+0x30>)
   1064e:	681d      	ldr	r5, [r3, #0]
   10650:	b925      	cbnz	r5, 1065c <notify_connected+0x14>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   10652:	4d0a      	ldr	r5, [pc, #40]	; (1067c <notify_connected+0x34>)
   10654:	4e0a      	ldr	r6, [pc, #40]	; (10680 <notify_connected+0x38>)
   10656:	42b5      	cmp	r5, r6
   10658:	d307      	bcc.n	1066a <notify_connected+0x22>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
   1065a:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->connected) {
   1065c:	682b      	ldr	r3, [r5, #0]
   1065e:	b113      	cbz	r3, 10666 <notify_connected+0x1e>
			cb->connected(conn, conn->err);
   10660:	4620      	mov	r0, r4
   10662:	7b21      	ldrb	r1, [r4, #12]
   10664:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   10666:	69ad      	ldr	r5, [r5, #24]
   10668:	e7f2      	b.n	10650 <notify_connected+0x8>
		if (cb->connected) {
   1066a:	682b      	ldr	r3, [r5, #0]
   1066c:	b113      	cbz	r3, 10674 <notify_connected+0x2c>
			cb->connected(conn, conn->err);
   1066e:	4620      	mov	r0, r4
   10670:	7b21      	ldrb	r1, [r4, #12]
   10672:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   10674:	351c      	adds	r5, #28
   10676:	e7ee      	b.n	10656 <notify_connected+0xe>
   10678:	20009be8 	.word	0x20009be8
   1067c:	0001fbe0 	.word	0x0001fbe0
   10680:	0001fbfc 	.word	0x0001fbfc

00010684 <bt_conn_create_pdu_timeout.part.0>:
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
   10684:	b580      	push	{r7, lr}
   10686:	af00      	add	r7, sp, #0
		BT_WARN("Unable to allocate buffer within timeout");
   10688:	b088      	sub	sp, #32
   1068a:	466a      	mov	r2, sp
   1068c:	4b07      	ldr	r3, [pc, #28]	; (106ac <bt_conn_create_pdu_timeout.part.0+0x28>)
   1068e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   10692:	6153      	str	r3, [r2, #20]
   10694:	4b06      	ldr	r3, [pc, #24]	; (106b0 <bt_conn_create_pdu_timeout.part.0+0x2c>)
   10696:	4807      	ldr	r0, [pc, #28]	; (106b4 <bt_conn_create_pdu_timeout.part.0+0x30>)
   10698:	6193      	str	r3, [r2, #24]
   1069a:	2303      	movs	r3, #3
   1069c:	f842 3f10 	str.w	r3, [r2, #16]!
   106a0:	f00b fcd7 	bl	1c052 <z_log_msg_static_create.constprop.0>
}
   106a4:	2000      	movs	r0, #0
   106a6:	46bd      	mov	sp, r7
   106a8:	bd80      	pop	{r7, pc}
   106aa:	bf00      	nop
   106ac:	000226a9 	.word	0x000226a9
   106b0:	00022920 	.word	0x00022920
   106b4:	0001fc4c 	.word	0x0001fc4c

000106b8 <tx_notify>:
{
   106b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   106bc:	4604      	mov	r4, r0
	tx->cb = NULL;
   106be:	f04f 0800 	mov.w	r8, #0
	k_fifo_put(&free_tx, tx);
   106c2:	4f14      	ldr	r7, [pc, #80]	; (10714 <tx_notify+0x5c>)
	__asm__ volatile(
   106c4:	f04f 0220 	mov.w	r2, #32
   106c8:	f3ef 8311 	mrs	r3, BASEPRI
   106cc:	f382 8812 	msr	BASEPRI_MAX, r2
   106d0:	f3bf 8f6f 	isb	sy
	return list->head;
   106d4:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   106d6:	b929      	cbnz	r1, 106e4 <tx_notify+0x2c>
	__asm__ volatile(
   106d8:	f383 8811 	msr	BASEPRI, r3
   106dc:	f3bf 8f6f 	isb	sy
}
   106e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   106e4:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
   106e6:	680a      	ldr	r2, [r1, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   106e8:	4281      	cmp	r1, r0
	list->tail = node;
   106ea:	bf08      	it	eq
   106ec:	6262      	streq	r2, [r4, #36]	; 0x24
	list->head = node;
   106ee:	6222      	str	r2, [r4, #32]
   106f0:	f383 8811 	msr	BASEPRI, r3
   106f4:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   106f8:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	k_fifo_put(&free_tx, tx);
   106fc:	4638      	mov	r0, r7
	tx->user_data = NULL;
   106fe:	e9c1 8801 	strd	r8, r8, [r1, #4]
	tx->pending_no_cb = 0U;
   10702:	f8c1 800c 	str.w	r8, [r1, #12]
	k_fifo_put(&free_tx, tx);
   10706:	f00e fb80 	bl	1ee0a <k_queue_append>
		cb(conn, user_data, 0);
   1070a:	2200      	movs	r2, #0
   1070c:	4631      	mov	r1, r6
   1070e:	4620      	mov	r0, r4
   10710:	47a8      	blx	r5
	while (1) {
   10712:	e7d7      	b.n	106c4 <tx_notify+0xc>
   10714:	2000876c 	.word	0x2000876c

00010718 <conn_tx_destroy>:
	tx->cb = NULL;
   10718:	2200      	movs	r2, #0
{
   1071a:	b570      	push	{r4, r5, r6, lr}
   1071c:	4604      	mov	r4, r0
	void *user_data = tx->user_data;
   1071e:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
   10722:	60ca      	str	r2, [r1, #12]
	tx->user_data = NULL;
   10724:	e9c1 2201 	strd	r2, r2, [r1, #4]
	k_fifo_put(&free_tx, tx);
   10728:	4805      	ldr	r0, [pc, #20]	; (10740 <conn_tx_destroy+0x28>)
   1072a:	f00e fb6e 	bl	1ee0a <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
   1072e:	4631      	mov	r1, r6
   10730:	4620      	mov	r0, r4
   10732:	462b      	mov	r3, r5
}
   10734:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb(conn, user_data, -ESHUTDOWN);
   10738:	f06f 026d 	mvn.w	r2, #109	; 0x6d
   1073c:	4718      	bx	r3
   1073e:	bf00      	nop
   10740:	2000876c 	.word	0x2000876c

00010744 <send_frag>:
{
   10744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10748:	4604      	mov	r4, r0
   1074a:	460e      	mov	r6, r1
   1074c:	4692      	mov	sl, r2
   1074e:	4699      	mov	r9, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   10750:	694d      	ldr	r5, [r1, #20]
{
   10752:	af00      	add	r7, sp, #0
	return z_impl_k_sem_take(sem, timeout);
   10754:	f04f 33ff 	mov.w	r3, #4294967295
   10758:	f04f 32ff 	mov.w	r2, #4294967295
   1075c:	4846      	ldr	r0, [pc, #280]	; (10878 <send_frag+0x134>)
   1075e:	f008 fa8f 	bl	18c80 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   10762:	7b63      	ldrb	r3, [r4, #13]
   10764:	2b07      	cmp	r3, #7
   10766:	d17a      	bne.n	1085e <send_frag+0x11a>
	__asm__ volatile(
   10768:	f04f 0320 	mov.w	r3, #32
   1076c:	f3ef 8211 	mrs	r2, BASEPRI
   10770:	f383 8812 	msr	BASEPRI_MAX, r3
   10774:	f3bf 8f6f 	isb	sy
	if (tx) {
   10778:	2d00      	cmp	r5, #0
   1077a:	d050      	beq.n	1081e <send_frag+0xda>
	parent->next = child;
   1077c:	2300      	movs	r3, #0
   1077e:	602b      	str	r3, [r5, #0]
	return list->tail;
   10780:	69a3      	ldr	r3, [r4, #24]
Z_GENLIST_APPEND(slist, snode)
   10782:	2b00      	cmp	r3, #0
   10784:	d148      	bne.n	10818 <send_frag+0xd4>
	list->head = node;
   10786:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   1078a:	f382 8811 	msr	BASEPRI, r2
   1078e:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   10792:	2104      	movs	r1, #4
   10794:	f106 0008 	add.w	r0, r6, #8
   10798:	f00d f9e7 	bl	1db6a <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   1079c:	8823      	ldrh	r3, [r4, #0]
   1079e:	f00a 0afd 	and.w	sl, sl, #253	; 0xfd
   107a2:	ea43 3a0a 	orr.w	sl, r3, sl, lsl #12
   107a6:	f8a0 a000 	strh.w	sl, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   107aa:	89b3      	ldrh	r3, [r6, #12]
   107ac:	3b04      	subs	r3, #4
   107ae:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   107b0:	2302      	movs	r3, #2
	return bt_send(buf);
   107b2:	4630      	mov	r0, r6
   107b4:	7533      	strb	r3, [r6, #20]
   107b6:	f7fe f99f 	bl	eaf8 <bt_send>
	if (err) {
   107ba:	2800      	cmp	r0, #0
   107bc:	d059      	beq.n	10872 <send_frag+0x12e>
		BT_ERR("Unable to send to driver (err %d)", err);
   107be:	46ea      	mov	sl, sp
   107c0:	b088      	sub	sp, #32
   107c2:	466a      	mov	r2, sp
   107c4:	4b2d      	ldr	r3, [pc, #180]	; (1087c <send_frag+0x138>)
   107c6:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   107ca:	6153      	str	r3, [r2, #20]
   107cc:	4b2c      	ldr	r3, [pc, #176]	; (10880 <send_frag+0x13c>)
   107ce:	e9c2 3006 	strd	r3, r0, [r2, #24]
   107d2:	2304      	movs	r3, #4
   107d4:	482b      	ldr	r0, [pc, #172]	; (10884 <send_frag+0x140>)
   107d6:	f842 3f10 	str.w	r3, [r2, #16]!
   107da:	f00b fc3a 	bl	1c052 <z_log_msg_static_create.constprop.0>
   107de:	46d5      	mov	sp, sl
	__asm__ volatile(
   107e0:	f04f 0320 	mov.w	r3, #32
   107e4:	f3ef 8a11 	mrs	sl, BASEPRI
   107e8:	f383 8812 	msr	BASEPRI_MAX, r3
   107ec:	f3bf 8f6f 	isb	sy
		if (tx) {
   107f0:	b315      	cbz	r5, 10838 <send_frag+0xf4>
			sys_slist_find_and_remove(&conn->tx_pending, &tx->node);
   107f2:	4629      	mov	r1, r5
   107f4:	f104 0014 	add.w	r0, r4, #20
   107f8:	f00b fc05 	bl	1c006 <sys_slist_find_and_remove>
	__asm__ volatile(
   107fc:	f38a 8811 	msr	BASEPRI, sl
   10800:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   10804:	481c      	ldr	r0, [pc, #112]	; (10878 <send_frag+0x134>)
   10806:	f008 fa15 	bl	18c34 <z_impl_k_sem_give>
		tx_data(buf)->tx = NULL;
   1080a:	2300      	movs	r3, #0
		conn_tx_destroy(conn, tx);
   1080c:	4629      	mov	r1, r5
   1080e:	4620      	mov	r0, r4
		tx_data(buf)->tx = NULL;
   10810:	6173      	str	r3, [r6, #20]
		conn_tx_destroy(conn, tx);
   10812:	f7ff ff81 	bl	10718 <conn_tx_destroy>
   10816:	e01b      	b.n	10850 <send_frag+0x10c>
	parent->next = child;
   10818:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1081a:	61a5      	str	r5, [r4, #24]
}
   1081c:	e7b5      	b.n	1078a <send_frag+0x46>
	return list->tail;
   1081e:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   10820:	b133      	cbz	r3, 10830 <send_frag+0xec>
			pending_no_cb = &tail_tx->pending_no_cb;
   10822:	f103 080c 	add.w	r8, r3, #12
   10826:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   10828:	3301      	adds	r3, #1
   1082a:	f8c8 3000 	str.w	r3, [r8]
   1082e:	e7ac      	b.n	1078a <send_frag+0x46>
			pending_no_cb = &conn->pending_no_cb;
   10830:	69e3      	ldr	r3, [r4, #28]
   10832:	f104 081c 	add.w	r8, r4, #28
   10836:	e7f7      	b.n	10828 <send_frag+0xe4>
			(*pending_no_cb)--;
   10838:	f8d8 3000 	ldr.w	r3, [r8]
   1083c:	3b01      	subs	r3, #1
   1083e:	f8c8 3000 	str.w	r3, [r8]
   10842:	f38a 8811 	msr	BASEPRI, sl
   10846:	f3bf 8f6f 	isb	sy
   1084a:	480b      	ldr	r0, [pc, #44]	; (10878 <send_frag+0x134>)
   1084c:	f008 f9f2 	bl	18c34 <z_impl_k_sem_give>
	if (always_consume) {
   10850:	f1b9 0f00 	cmp.w	r9, #0
   10854:	d109      	bne.n	1086a <send_frag+0x126>
	return false;
   10856:	2000      	movs	r0, #0
}
   10858:	46bd      	mov	sp, r7
   1085a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1085e:	4806      	ldr	r0, [pc, #24]	; (10878 <send_frag+0x134>)
   10860:	f008 f9e8 	bl	18c34 <z_impl_k_sem_give>
	if (tx) {
   10864:	2d00      	cmp	r5, #0
   10866:	d1d0      	bne.n	1080a <send_frag+0xc6>
   10868:	e7f2      	b.n	10850 <send_frag+0x10c>
		net_buf_unref(buf);
   1086a:	4630      	mov	r0, r6
   1086c:	f004 fe5e 	bl	1552c <net_buf_unref>
   10870:	e7f1      	b.n	10856 <send_frag+0x112>
	return true;
   10872:	2001      	movs	r0, #1
   10874:	e7f0      	b.n	10858 <send_frag+0x114>
   10876:	bf00      	nop
   10878:	20008100 	.word	0x20008100
   1087c:	00021a63 	.word	0x00021a63
   10880:	0002294d 	.word	0x0002294d
   10884:	0001fc4c 	.word	0x0001fc4c

00010888 <bt_conn_get_pkts>:
}
   10888:	4800      	ldr	r0, [pc, #0]	; (1088c <bt_conn_get_pkts+0x4>)
   1088a:	4770      	bx	lr
   1088c:	20008100 	.word	0x20008100

00010890 <bt_conn_new>:
{
   10890:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   10892:	2200      	movs	r2, #0
   10894:	4604      	mov	r4, r0
   10896:	428a      	cmp	r2, r1
   10898:	d102      	bne.n	108a0 <bt_conn_new+0x10>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   1089a:	2400      	movs	r4, #0
}
   1089c:	4620      	mov	r0, r4
   1089e:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   108a0:	2001      	movs	r0, #1
   108a2:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
   108a6:	e8d3 5fef 	ldaex	r5, [r3]
   108aa:	2d00      	cmp	r5, #0
   108ac:	d104      	bne.n	108b8 <bt_conn_new+0x28>
   108ae:	e8c3 0fec 	stlex	ip, r0, [r3]
   108b2:	f1bc 0f00 	cmp.w	ip, #0
   108b6:	d1f6      	bne.n	108a6 <bt_conn_new+0x16>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   108b8:	d002      	beq.n	108c0 <bt_conn_new+0x30>
   108ba:	34c0      	adds	r4, #192	; 0xc0
	for (i = 0; i < size; i++) {
   108bc:	4402      	add	r2, r0
   108be:	e7ea      	b.n	10896 <bt_conn_new+0x6>
	if (!conn) {
   108c0:	2c00      	cmp	r4, #0
   108c2:	d0ea      	beq.n	1089a <bt_conn_new+0xa>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   108c4:	22b8      	movs	r2, #184	; 0xb8
   108c6:	2100      	movs	r1, #0
   108c8:	4620      	mov	r0, r4
   108ca:	f00b f80d 	bl	1b8e8 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   108ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
   108d2:	4904      	ldr	r1, [pc, #16]	; (108e4 <bt_conn_new+0x54>)
   108d4:	f00e fbb3 	bl	1f03e <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   108d8:	4903      	ldr	r1, [pc, #12]	; (108e8 <bt_conn_new+0x58>)
   108da:	f104 0028 	add.w	r0, r4, #40	; 0x28
   108de:	f00e fb6a 	bl	1efb6 <k_work_init>
	return conn;
   108e2:	e7db      	b.n	1089c <bt_conn_new+0xc>
   108e4:	00011115 	.word	0x00011115
   108e8:	0001c059 	.word	0x0001c059

000108ec <bt_conn_recv>:
{
   108ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   108f0:	4616      	mov	r6, r2
   108f2:	af00      	add	r7, sp, #0
   108f4:	4604      	mov	r4, r0
   108f6:	460d      	mov	r5, r1
	tx_notify(conn);
   108f8:	f7ff fede 	bl	106b8 <tx_notify>
	switch (flags) {
   108fc:	2e01      	cmp	r6, #1
   108fe:	d038      	beq.n	10972 <bt_conn_recv+0x86>
   10900:	2e02      	cmp	r6, #2
   10902:	d17b      	bne.n	109fc <bt_conn_recv+0x110>
		if (conn->rx) {
   10904:	6923      	ldr	r3, [r4, #16]
   10906:	b193      	cbz	r3, 1092e <bt_conn_recv+0x42>
			BT_ERR("Unexpected first L2CAP frame");
   10908:	466e      	mov	r6, sp
   1090a:	b088      	sub	sp, #32
   1090c:	466a      	mov	r2, sp
   1090e:	4b48      	ldr	r3, [pc, #288]	; (10a30 <bt_conn_recv+0x144>)
   10910:	4848      	ldr	r0, [pc, #288]	; (10a34 <bt_conn_recv+0x148>)
   10912:	6153      	str	r3, [r2, #20]
   10914:	4b48      	ldr	r3, [pc, #288]	; (10a38 <bt_conn_recv+0x14c>)
   10916:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1091a:	6193      	str	r3, [r2, #24]
   1091c:	2303      	movs	r3, #3
   1091e:	f842 3f10 	str.w	r3, [r2, #16]!
   10922:	f00b fb96 	bl	1c052 <z_log_msg_static_create.constprop.0>
			bt_conn_reset_rx_state(conn);
   10926:	4620      	mov	r0, r4
   10928:	46b5      	mov	sp, r6
   1092a:	f00b fb98 	bl	1c05e <bt_conn_reset_rx_state>
		conn->rx = buf;
   1092e:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   10930:	6921      	ldr	r1, [r4, #16]
   10932:	8988      	ldrh	r0, [r1, #12]
   10934:	2801      	cmp	r0, #1
   10936:	d937      	bls.n	109a8 <bt_conn_recv+0xbc>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   10938:	688b      	ldr	r3, [r1, #8]
   1093a:	881b      	ldrh	r3, [r3, #0]
   1093c:	3304      	adds	r3, #4
   1093e:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   10940:	4298      	cmp	r0, r3
   10942:	d331      	bcc.n	109a8 <bt_conn_recv+0xbc>
	if (conn->rx->len > acl_total_len) {
   10944:	d96d      	bls.n	10a22 <bt_conn_recv+0x136>
		BT_ERR("ACL len mismatch (%u > %u)",
   10946:	466d      	mov	r5, sp
   10948:	b08a      	sub	sp, #40	; 0x28
   1094a:	466a      	mov	r2, sp
   1094c:	6213      	str	r3, [r2, #32]
   1094e:	2305      	movs	r3, #5
   10950:	493a      	ldr	r1, [pc, #232]	; (10a3c <bt_conn_recv+0x150>)
   10952:	6151      	str	r1, [r2, #20]
   10954:	4938      	ldr	r1, [pc, #224]	; (10a38 <bt_conn_recv+0x14c>)
   10956:	e9c2 1006 	strd	r1, r0, [r2, #24]
   1095a:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   1095e:	4835      	ldr	r0, [pc, #212]	; (10a34 <bt_conn_recv+0x148>)
   10960:	f842 3f10 	str.w	r3, [r2, #16]!
   10964:	f00b fb75 	bl	1c052 <z_log_msg_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   10968:	4620      	mov	r0, r4
   1096a:	46ad      	mov	sp, r5
   1096c:	f00b fb77 	bl	1c05e <bt_conn_reset_rx_state>
		return;
   10970:	e01a      	b.n	109a8 <bt_conn_recv+0xbc>
		if (!conn->rx) {
   10972:	6920      	ldr	r0, [r4, #16]
   10974:	b998      	cbnz	r0, 1099e <bt_conn_recv+0xb2>
			BT_ERR("Unexpected L2CAP continuation");
   10976:	466e      	mov	r6, sp
   10978:	b088      	sub	sp, #32
   1097a:	466a      	mov	r2, sp
   1097c:	4b30      	ldr	r3, [pc, #192]	; (10a40 <bt_conn_recv+0x154>)
   1097e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   10982:	6153      	str	r3, [r2, #20]
   10984:	4b2c      	ldr	r3, [pc, #176]	; (10a38 <bt_conn_recv+0x14c>)
   10986:	482b      	ldr	r0, [pc, #172]	; (10a34 <bt_conn_recv+0x148>)
   10988:	6193      	str	r3, [r2, #24]
   1098a:	2303      	movs	r3, #3
   1098c:	f842 3f10 	str.w	r3, [r2, #16]!
   10990:	f00b fb5f 	bl	1c052 <z_log_msg_static_create.constprop.0>
   10994:	46b5      	mov	sp, r6
		bt_conn_reset_rx_state(conn);
   10996:	4620      	mov	r0, r4
   10998:	f00b fb61 	bl	1c05e <bt_conn_reset_rx_state>
   1099c:	e001      	b.n	109a2 <bt_conn_recv+0xb6>
		if (!buf->len) {
   1099e:	89ae      	ldrh	r6, [r5, #12]
   109a0:	b92e      	cbnz	r6, 109ae <bt_conn_recv+0xc2>
		net_buf_unref(buf);
   109a2:	4628      	mov	r0, r5
   109a4:	f004 fdc2 	bl	1552c <net_buf_unref>
}
   109a8:	46bd      	mov	sp, r7
   109aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   109ae:	3008      	adds	r0, #8
   109b0:	f00d f908 	bl	1dbc4 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   109b4:	4286      	cmp	r6, r0
   109b6:	d917      	bls.n	109e8 <bt_conn_recv+0xfc>
			BT_ERR("Not enough buffer space for L2CAP data");
   109b8:	466e      	mov	r6, sp
   109ba:	b088      	sub	sp, #32
   109bc:	466a      	mov	r2, sp
   109be:	4b21      	ldr	r3, [pc, #132]	; (10a44 <bt_conn_recv+0x158>)
   109c0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   109c4:	6153      	str	r3, [r2, #20]
   109c6:	4b1c      	ldr	r3, [pc, #112]	; (10a38 <bt_conn_recv+0x14c>)
   109c8:	481a      	ldr	r0, [pc, #104]	; (10a34 <bt_conn_recv+0x148>)
   109ca:	6193      	str	r3, [r2, #24]
   109cc:	2303      	movs	r3, #3
   109ce:	f842 3f10 	str.w	r3, [r2, #16]!
   109d2:	f00b fb3e 	bl	1c052 <z_log_msg_static_create.constprop.0>
			bt_l2cap_recv(conn, conn->rx, false);
   109d6:	2200      	movs	r2, #0
   109d8:	46b5      	mov	sp, r6
   109da:	4620      	mov	r0, r4
   109dc:	6921      	ldr	r1, [r4, #16]
   109de:	f000 fde7 	bl	115b0 <bt_l2cap_recv>
			conn->rx = NULL;
   109e2:	2300      	movs	r3, #0
   109e4:	6123      	str	r3, [r4, #16]
			net_buf_unref(buf);
   109e6:	e7dc      	b.n	109a2 <bt_conn_recv+0xb6>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   109e8:	6920      	ldr	r0, [r4, #16]
   109ea:	89aa      	ldrh	r2, [r5, #12]
   109ec:	68a9      	ldr	r1, [r5, #8]
   109ee:	3008      	adds	r0, #8
   109f0:	f00d f8aa 	bl	1db48 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   109f4:	4628      	mov	r0, r5
   109f6:	f004 fd99 	bl	1552c <net_buf_unref>
		break;
   109fa:	e799      	b.n	10930 <bt_conn_recv+0x44>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   109fc:	46e8      	mov	r8, sp
   109fe:	b088      	sub	sp, #32
   10a00:	466b      	mov	r3, sp
   10a02:	4a11      	ldr	r2, [pc, #68]	; (10a48 <bt_conn_recv+0x15c>)
   10a04:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   10a08:	615a      	str	r2, [r3, #20]
   10a0a:	4a0b      	ldr	r2, [pc, #44]	; (10a38 <bt_conn_recv+0x14c>)
   10a0c:	4809      	ldr	r0, [pc, #36]	; (10a34 <bt_conn_recv+0x148>)
	switch (flags) {
   10a0e:	e9c3 2606 	strd	r2, r6, [r3, #24]
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   10a12:	461a      	mov	r2, r3
   10a14:	2304      	movs	r3, #4
   10a16:	f842 3f10 	str.w	r3, [r2, #16]!
   10a1a:	f00b fb1a 	bl	1c052 <z_log_msg_static_create.constprop.0>
   10a1e:	46c5      	mov	sp, r8
   10a20:	e7b9      	b.n	10996 <bt_conn_recv+0xaa>
	conn->rx = NULL;
   10a22:	2300      	movs	r3, #0
	bt_l2cap_recv(conn, buf, true);
   10a24:	2201      	movs	r2, #1
   10a26:	4620      	mov	r0, r4
	conn->rx = NULL;
   10a28:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   10a2a:	f000 fdc1 	bl	115b0 <bt_l2cap_recv>
		__ASSERT(false, "Invalid connection type %u", conn->type);
   10a2e:	e7bb      	b.n	109a8 <bt_conn_recv+0xbc>
   10a30:	000226d6 	.word	0x000226d6
   10a34:	0001fc4c 	.word	0x0001fc4c
   10a38:	00022967 	.word	0x00022967
   10a3c:	00022766 	.word	0x00022766
   10a40:	000226f7 	.word	0x000226f7
   10a44:	00022719 	.word	0x00022719
   10a48:	00022744 	.word	0x00022744

00010a4c <bt_conn_send_cb>:
{
   10a4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10a50:	4699      	mov	r9, r3
	if (conn->state != BT_CONN_CONNECTED) {
   10a52:	7b43      	ldrb	r3, [r0, #13]
{
   10a54:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   10a56:	2b07      	cmp	r3, #7
{
   10a58:	4688      	mov	r8, r1
   10a5a:	4616      	mov	r6, r2
   10a5c:	af00      	add	r7, sp, #0
	if (conn->state != BT_CONN_CONNECTED) {
   10a5e:	d012      	beq.n	10a86 <bt_conn_send_cb+0x3a>
		BT_ERR("not connected!");
   10a60:	466c      	mov	r4, sp
   10a62:	b088      	sub	sp, #32
   10a64:	466a      	mov	r2, sp
   10a66:	4b31      	ldr	r3, [pc, #196]	; (10b2c <bt_conn_send_cb+0xe0>)
   10a68:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   10a6c:	6153      	str	r3, [r2, #20]
   10a6e:	4b30      	ldr	r3, [pc, #192]	; (10b30 <bt_conn_send_cb+0xe4>)
   10a70:	4830      	ldr	r0, [pc, #192]	; (10b34 <bt_conn_send_cb+0xe8>)
   10a72:	6193      	str	r3, [r2, #24]
   10a74:	2303      	movs	r3, #3
   10a76:	f842 3f10 	str.w	r3, [r2, #16]!
   10a7a:	f00b faea 	bl	1c052 <z_log_msg_static_create.constprop.0>
   10a7e:	46a5      	mov	sp, r4
		return -ENOTCONN;
   10a80:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   10a84:	e023      	b.n	10ace <bt_conn_send_cb+0x82>
	if (cb) {
   10a86:	2a00      	cmp	r2, #0
   10a88:	d04d      	beq.n	10b26 <bt_conn_send_cb+0xda>
	return z_impl_z_current_get();
   10a8a:	f008 fe11 	bl	196b0 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   10a8e:	4b2a      	ldr	r3, [pc, #168]	; (10b38 <bt_conn_send_cb+0xec>)
   10a90:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   10a92:	482a      	ldr	r0, [pc, #168]	; (10b3c <bt_conn_send_cb+0xf0>)
   10a94:	bf07      	ittee	eq
   10a96:	2200      	moveq	r2, #0
   10a98:	2300      	moveq	r3, #0
   10a9a:	f04f 32ff 	movne.w	r2, #4294967295
   10a9e:	f04f 33ff 	movne.w	r3, #4294967295
   10aa2:	f008 f893 	bl	18bcc <z_impl_k_queue_get>
   10aa6:	4604      	mov	r4, r0
		if (!tx) {
   10aa8:	b9a0      	cbnz	r0, 10ad4 <bt_conn_send_cb+0x88>
			BT_ERR("Unable to allocate TX context");
   10aaa:	466c      	mov	r4, sp
   10aac:	b088      	sub	sp, #32
   10aae:	466a      	mov	r2, sp
   10ab0:	4b23      	ldr	r3, [pc, #140]	; (10b40 <bt_conn_send_cb+0xf4>)
   10ab2:	4820      	ldr	r0, [pc, #128]	; (10b34 <bt_conn_send_cb+0xe8>)
   10ab4:	6153      	str	r3, [r2, #20]
   10ab6:	4b1e      	ldr	r3, [pc, #120]	; (10b30 <bt_conn_send_cb+0xe4>)
   10ab8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   10abc:	6193      	str	r3, [r2, #24]
   10abe:	2303      	movs	r3, #3
   10ac0:	f842 3f10 	str.w	r3, [r2, #16]!
   10ac4:	f00b fac5 	bl	1c052 <z_log_msg_static_create.constprop.0>
			return -ENOBUFS;
   10ac8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   10acc:	46a5      	mov	sp, r4
}
   10ace:	46bd      	mov	sp, r7
   10ad0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   10ad4:	7b6b      	ldrb	r3, [r5, #13]
   10ad6:	2b07      	cmp	r3, #7
   10ad8:	d018      	beq.n	10b0c <bt_conn_send_cb+0xc0>
			BT_WARN("Disconnected while allocating context");
   10ada:	466d      	mov	r5, sp
   10adc:	b088      	sub	sp, #32
   10ade:	466a      	mov	r2, sp
   10ae0:	4b18      	ldr	r3, [pc, #96]	; (10b44 <bt_conn_send_cb+0xf8>)
   10ae2:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   10ae6:	6153      	str	r3, [r2, #20]
   10ae8:	4b11      	ldr	r3, [pc, #68]	; (10b30 <bt_conn_send_cb+0xe4>)
   10aea:	4812      	ldr	r0, [pc, #72]	; (10b34 <bt_conn_send_cb+0xe8>)
   10aec:	6193      	str	r3, [r2, #24]
   10aee:	2303      	movs	r3, #3
   10af0:	f842 3f10 	str.w	r3, [r2, #16]!
   10af4:	f00b faad 	bl	1c052 <z_log_msg_static_create.constprop.0>
	tx->cb = NULL;
   10af8:	2300      	movs	r3, #0
   10afa:	46ad      	mov	sp, r5
	k_fifo_put(&free_tx, tx);
   10afc:	4621      	mov	r1, r4
	tx->user_data = NULL;
   10afe:	e9c4 3301 	strd	r3, r3, [r4, #4]
	k_fifo_put(&free_tx, tx);
   10b02:	480e      	ldr	r0, [pc, #56]	; (10b3c <bt_conn_send_cb+0xf0>)
	tx->pending_no_cb = 0U;
   10b04:	60e3      	str	r3, [r4, #12]
	k_fifo_put(&free_tx, tx);
   10b06:	f00e f980 	bl	1ee0a <k_queue_append>
}
   10b0a:	e7b9      	b.n	10a80 <bt_conn_send_cb+0x34>
		tx->pending_no_cb = 0U;
   10b0c:	2300      	movs	r3, #0
		tx->user_data = user_data;
   10b0e:	e9c0 6901 	strd	r6, r9, [r0, #4]
		tx->pending_no_cb = 0U;
   10b12:	60c3      	str	r3, [r0, #12]
	net_buf_put(&conn->tx_queue, buf);
   10b14:	f105 0038 	add.w	r0, r5, #56	; 0x38
   10b18:	4641      	mov	r1, r8
		tx_data(buf)->tx = tx;
   10b1a:	f8c8 4014 	str.w	r4, [r8, #20]
	net_buf_put(&conn->tx_queue, buf);
   10b1e:	f00c ffda 	bl	1dad6 <net_buf_put>
	return 0;
   10b22:	2000      	movs	r0, #0
   10b24:	e7d3      	b.n	10ace <bt_conn_send_cb+0x82>
   10b26:	4614      	mov	r4, r2
   10b28:	e7f4      	b.n	10b14 <bt_conn_send_cb+0xc8>
   10b2a:	bf00      	nop
   10b2c:	00022785 	.word	0x00022785
   10b30:	00022957 	.word	0x00022957
   10b34:	0001fc4c 	.word	0x0001fc4c
   10b38:	200099f8 	.word	0x200099f8
   10b3c:	2000876c 	.word	0x2000876c
   10b40:	00022798 	.word	0x00022798
   10b44:	000227ba 	.word	0x000227ba

00010b48 <bt_conn_prepare_events>:
{
   10b48:	b570      	push	{r4, r5, r6, lr}
   10b4a:	4604      	mov	r4, r0
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_POLL_SIGNAL_INIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_init(sig);
   10b4c:	4817      	ldr	r0, [pc, #92]	; (10bac <bt_conn_prepare_events+0x64>)
   10b4e:	f00e fdc3 	bl	1f6d8 <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   10b52:	2200      	movs	r2, #0
   10b54:	2101      	movs	r1, #1
   10b56:	4620      	mov	r0, r4
   10b58:	4b14      	ldr	r3, [pc, #80]	; (10bac <bt_conn_prepare_events+0x64>)
   10b5a:	f00e fda0 	bl	1f69e <k_poll_event_init>
		if (!conn_prepare_events(conn, &events[ev_count])) {
   10b5e:	f104 0614 	add.w	r6, r4, #20
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   10b62:	4b13      	ldr	r3, [pc, #76]	; (10bb0 <bt_conn_prepare_events+0x68>)
   10b64:	e8d3 2faf 	lda	r2, [r3]
	if (!atomic_get(&conn->ref)) {
   10b68:	b90a      	cbnz	r2, 10b6e <bt_conn_prepare_events+0x26>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   10b6a:	2001      	movs	r0, #1
}
   10b6c:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   10b6e:	f1a3 05b8 	sub.w	r5, r3, #184	; 0xb8
   10b72:	f813 3cab 	ldrb.w	r3, [r3, #-171]
   10b76:	b953      	cbnz	r3, 10b8e <bt_conn_prepare_events+0x46>
   10b78:	f06f 0140 	mvn.w	r1, #64	; 0x40
   10b7c:	1d28      	adds	r0, r5, #4
   10b7e:	f00b fa5d 	bl	1c03c <atomic_and>
   10b82:	0643      	lsls	r3, r0, #25
   10b84:	d503      	bpl.n	10b8e <bt_conn_prepare_events+0x46>
		conn_cleanup(conn);
   10b86:	4628      	mov	r0, r5
   10b88:	f00b fa72 	bl	1c070 <conn_cleanup>
		return -ENOTCONN;
   10b8c:	e7ed      	b.n	10b6a <bt_conn_prepare_events+0x22>
	if (conn->state != BT_CONN_CONNECTED) {
   10b8e:	7b6b      	ldrb	r3, [r5, #13]
   10b90:	2b07      	cmp	r3, #7
   10b92:	d1ea      	bne.n	10b6a <bt_conn_prepare_events+0x22>
	k_poll_event_init(&events[0],
   10b94:	4630      	mov	r0, r6
   10b96:	4b07      	ldr	r3, [pc, #28]	; (10bb4 <bt_conn_prepare_events+0x6c>)
   10b98:	2200      	movs	r2, #0
   10b9a:	2104      	movs	r1, #4
   10b9c:	f00e fd7f 	bl	1f69e <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   10ba0:	2301      	movs	r3, #1
			ev_count++;
   10ba2:	2002      	movs	r0, #2
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   10ba4:	f884 3020 	strb.w	r3, [r4, #32]
	return ev_count;
   10ba8:	e7e0      	b.n	10b6c <bt_conn_prepare_events+0x24>
   10baa:	bf00      	nop
   10bac:	200083dc 	.word	0x200083dc
   10bb0:	20009640 	.word	0x20009640
   10bb4:	200095c0 	.word	0x200095c0

00010bb8 <bt_conn_lookup_handle>:
{
   10bb8:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   10bba:	2101      	movs	r1, #1
   10bbc:	4801      	ldr	r0, [pc, #4]	; (10bc4 <bt_conn_lookup_handle+0xc>)
   10bbe:	f00b baa2 	b.w	1c106 <conn_lookup_handle>
   10bc2:	bf00      	nop
   10bc4:	20009588 	.word	0x20009588

00010bc8 <bt_conn_set_state>:
{
   10bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == state) {
   10bca:	7b46      	ldrb	r6, [r0, #13]
{
   10bcc:	4604      	mov	r4, r0
	if (conn->state == state) {
   10bce:	428e      	cmp	r6, r1
{
   10bd0:	460d      	mov	r5, r1
   10bd2:	af00      	add	r7, sp, #0
	if (conn->state == state) {
   10bd4:	d11b      	bne.n	10c0e <bt_conn_set_state+0x46>
	switch (state) {
   10bd6:	2e08      	cmp	r6, #8
   10bd8:	bf98      	it	ls
   10bda:	4b6c      	ldrls	r3, [pc, #432]	; (10d8c <bt_conn_set_state+0x1c4>)
		BT_WARN("no transition %s", state2str(state));
   10bdc:	466c      	mov	r4, sp
   10bde:	b08a      	sub	sp, #40	; 0x28
   10be0:	bf94      	ite	ls
   10be2:	f853 3026 	ldrls.w	r3, [r3, r6, lsl #2]
	if (conn->state == state) {
   10be6:	4b6a      	ldrhi	r3, [pc, #424]	; (10d90 <bt_conn_set_state+0x1c8>)
		BT_WARN("no transition %s", state2str(state));
   10be8:	466a      	mov	r2, sp
   10bea:	496a      	ldr	r1, [pc, #424]	; (10d94 <bt_conn_set_state+0x1cc>)
   10bec:	6151      	str	r1, [r2, #20]
   10bee:	496a      	ldr	r1, [pc, #424]	; (10d98 <bt_conn_set_state+0x1d0>)
   10bf0:	e9c2 1306 	strd	r1, r3, [r2, #24]
   10bf4:	f240 3301 	movw	r3, #769	; 0x301
   10bf8:	f44f 5112 	mov.w	r1, #9344	; 0x2480
   10bfc:	8413      	strh	r3, [r2, #32]
   10bfe:	4b67      	ldr	r3, [pc, #412]	; (10d9c <bt_conn_set_state+0x1d4>)
   10c00:	f842 3f10 	str.w	r3, [r2, #16]!
		BT_WARN("no valid (%u) state was set", state);
   10c04:	4866      	ldr	r0, [pc, #408]	; (10da0 <bt_conn_set_state+0x1d8>)
   10c06:	f00b fa24 	bl	1c052 <z_log_msg_static_create.constprop.0>
   10c0a:	46a5      	mov	sp, r4
   10c0c:	e040      	b.n	10c90 <bt_conn_set_state+0xc8>
	conn->state = state;
   10c0e:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   10c10:	b926      	cbnz	r6, 10c1c <bt_conn_set_state+0x54>
		if (conn->type != BT_CONN_TYPE_ISO) {
   10c12:	7883      	ldrb	r3, [r0, #2]
   10c14:	2b08      	cmp	r3, #8
   10c16:	d001      	beq.n	10c1c <bt_conn_set_state+0x54>
			bt_conn_ref(conn);
   10c18:	f00b fa4d 	bl	1c0b6 <bt_conn_ref>
	switch (conn->state) {
   10c1c:	7b63      	ldrb	r3, [r4, #13]
   10c1e:	2b08      	cmp	r3, #8
   10c20:	f200 80ae 	bhi.w	10d80 <bt_conn_set_state+0x1b8>
   10c24:	e8df f003 	tbb	[pc, r3]
   10c28:	34340536 	.word	0x34340536
   10c2c:	1c343434 	.word	0x1c343434
   10c30:	34          	.byte	0x34
   10c31:	00          	.byte	0x00
		tx->pending_no_cb = 0U;
   10c32:	2600      	movs	r6, #0
	z_impl_k_sem_give(sem);
   10c34:	4d5b      	ldr	r5, [pc, #364]	; (10da4 <bt_conn_set_state+0x1dc>)
	__asm__ volatile(
   10c36:	f04f 0220 	mov.w	r2, #32
   10c3a:	f3ef 8311 	mrs	r3, BASEPRI
   10c3e:	f382 8812 	msr	BASEPRI_MAX, r2
   10c42:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   10c46:	69e2      	ldr	r2, [r4, #28]
   10c48:	2a00      	cmp	r2, #0
   10c4a:	d075      	beq.n	10d38 <bt_conn_set_state+0x170>
			conn->pending_no_cb--;
   10c4c:	3a01      	subs	r2, #1
   10c4e:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
   10c50:	f383 8811 	msr	BASEPRI, r3
   10c54:	f3bf 8f6f 	isb	sy
   10c58:	4628      	mov	r0, r5
   10c5a:	f007 ffeb 	bl	18c34 <z_impl_k_sem_give>
}
   10c5e:	e7ea      	b.n	10c36 <bt_conn_set_state+0x6e>
		if (conn->type == BT_CONN_TYPE_SCO) {
   10c60:	78a3      	ldrb	r3, [r4, #2]
   10c62:	2b04      	cmp	r3, #4
   10c64:	d014      	beq.n	10c90 <bt_conn_set_state+0xc8>
	z_impl_k_queue_init(queue);
   10c66:	f104 0038 	add.w	r0, r4, #56	; 0x38
   10c6a:	f00e f8c2 	bl	1edf2 <z_impl_k_queue_init>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   10c6e:	2100      	movs	r1, #0
   10c70:	484d      	ldr	r0, [pc, #308]	; (10da8 <bt_conn_set_state+0x1e0>)
   10c72:	f009 f803 	bl	19c7c <z_impl_k_poll_signal_raise>
	list->head = NULL;
   10c76:	2300      	movs	r3, #0
	list->tail = NULL;
   10c78:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10c7c:	78e3      	ldrb	r3, [r4, #3]
   10c7e:	2b01      	cmp	r3, #1
   10c80:	d106      	bne.n	10c90 <bt_conn_set_state+0xc8>
			k_work_schedule(&conn->deferred_work,
   10c82:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   10c86:	2300      	movs	r3, #0
   10c88:	f104 0058 	add.w	r0, r4, #88	; 0x58
   10c8c:	f008 f9f4 	bl	19078 <k_work_schedule>
}
   10c90:	46bd      	mov	sp, r7
   10c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
   10c94:	78a3      	ldrb	r3, [r4, #2]
   10c96:	2b04      	cmp	r3, #4
   10c98:	d103      	bne.n	10ca2 <bt_conn_set_state+0xda>
			bt_conn_unref(conn);
   10c9a:	4620      	mov	r0, r4
   10c9c:	f00b fa1f 	bl	1c0de <bt_conn_unref>
			break;
   10ca0:	e7f6      	b.n	10c90 <bt_conn_set_state+0xc8>
		switch (old_state) {
   10ca2:	2e08      	cmp	r6, #8
   10ca4:	d8f4      	bhi.n	10c90 <bt_conn_set_state+0xc8>
   10ca6:	a301      	add	r3, pc, #4	; (adr r3, 10cac <bt_conn_set_state+0xe4>)
   10ca8:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   10cac:	00010d1d 	.word	0x00010d1d
   10cb0:	00010cd1 	.word	0x00010cd1
   10cb4:	00010d0f 	.word	0x00010d0f
   10cb8:	00010c9b 	.word	0x00010c9b
   10cbc:	00010c9b 	.word	0x00010c9b
   10cc0:	00010d0f 	.word	0x00010d0f
   10cc4:	00010d0f 	.word	0x00010d0f
   10cc8:	00010c91 	.word	0x00010c91
   10ccc:	00010d1d 	.word	0x00010d1d
			tx_notify(conn);
   10cd0:	4620      	mov	r0, r4
   10cd2:	f7ff fcf1 	bl	106b8 <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   10cd6:	78a3      	ldrb	r3, [r4, #2]
   10cd8:	2b01      	cmp	r3, #1
   10cda:	d10a      	bne.n	10cf2 <bt_conn_set_state+0x12a>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   10cdc:	f104 0558 	add.w	r5, r4, #88	; 0x58
   10ce0:	4628      	mov	r0, r5
   10ce2:	f00e f9b8 	bl	1f056 <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   10ce6:	f010 0f0c 	tst.w	r0, #12
   10cea:	d002      	beq.n	10cf2 <bt_conn_set_state+0x12a>
				k_work_cancel_delayable(&conn->deferred_work);
   10cec:	4628      	mov	r0, r5
   10cee:	f00e f9b4 	bl	1f05a <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   10cf2:	3404      	adds	r4, #4
   10cf4:	e8d4 3fef 	ldaex	r3, [r4]
   10cf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10cfc:	e8c4 3fe2 	stlex	r2, r3, [r4]
   10d00:	2a00      	cmp	r2, #0
   10d02:	d1f7      	bne.n	10cf4 <bt_conn_set_state+0x12c>
   10d04:	2100      	movs	r1, #0
   10d06:	4828      	ldr	r0, [pc, #160]	; (10da8 <bt_conn_set_state+0x1e0>)
   10d08:	f008 ffb8 	bl	19c7c <z_impl_k_poll_signal_raise>
   10d0c:	e7c0      	b.n	10c90 <bt_conn_set_state+0xc8>
			if (conn->err) {
   10d0e:	7b23      	ldrb	r3, [r4, #12]
   10d10:	2b00      	cmp	r3, #0
   10d12:	d0c2      	beq.n	10c9a <bt_conn_set_state+0xd2>
				notify_connected(conn);
   10d14:	4620      	mov	r0, r4
   10d16:	f7ff fc97 	bl	10648 <notify_connected>
   10d1a:	e7be      	b.n	10c9a <bt_conn_set_state+0xd2>
			BT_WARN("Invalid (%u) old state", state);
   10d1c:	466c      	mov	r4, sp
   10d1e:	b088      	sub	sp, #32
   10d20:	466a      	mov	r2, sp
   10d22:	4b22      	ldr	r3, [pc, #136]	; (10dac <bt_conn_set_state+0x1e4>)
		BT_WARN("no valid (%u) state was set", state);
   10d24:	6153      	str	r3, [r2, #20]
   10d26:	4b1c      	ldr	r3, [pc, #112]	; (10d98 <bt_conn_set_state+0x1d0>)
   10d28:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   10d2c:	e9c2 3506 	strd	r3, r5, [r2, #24]
   10d30:	2304      	movs	r3, #4
   10d32:	f842 3f10 	str.w	r3, [r2, #16]!
   10d36:	e765      	b.n	10c04 <bt_conn_set_state+0x3c>
	return list->head;
   10d38:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   10d3a:	b921      	cbnz	r1, 10d46 <bt_conn_set_state+0x17e>
   10d3c:	f383 8811 	msr	BASEPRI, r3
   10d40:	f3bf 8f6f 	isb	sy
		if (!node) {
   10d44:	e7a4      	b.n	10c90 <bt_conn_set_state+0xc8>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   10d46:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   10d48:	680a      	ldr	r2, [r1, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   10d4a:	4281      	cmp	r1, r0
	list->tail = node;
   10d4c:	bf08      	it	eq
   10d4e:	61a2      	streq	r2, [r4, #24]
	list->head = node;
   10d50:	6162      	str	r2, [r4, #20]
   10d52:	f383 8811 	msr	BASEPRI, r3
   10d56:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   10d5a:	f04f 0220 	mov.w	r2, #32
   10d5e:	f3ef 8311 	mrs	r3, BASEPRI
   10d62:	f382 8812 	msr	BASEPRI_MAX, r2
   10d66:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   10d6a:	68ca      	ldr	r2, [r1, #12]
   10d6c:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   10d6e:	60ce      	str	r6, [r1, #12]
	__asm__ volatile(
   10d70:	f383 8811 	msr	BASEPRI, r3
   10d74:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   10d78:	4620      	mov	r0, r4
   10d7a:	f7ff fccd 	bl	10718 <conn_tx_destroy>
   10d7e:	e76b      	b.n	10c58 <bt_conn_set_state+0x90>
		BT_WARN("no valid (%u) state was set", state);
   10d80:	466c      	mov	r4, sp
   10d82:	b088      	sub	sp, #32
   10d84:	466a      	mov	r2, sp
   10d86:	4b0a      	ldr	r3, [pc, #40]	; (10db0 <bt_conn_set_state+0x1e8>)
   10d88:	e7cc      	b.n	10d24 <bt_conn_set_state+0x15c>
   10d8a:	bf00      	nop
   10d8c:	000202d8 	.word	0x000202d8
   10d90:	000227e4 	.word	0x000227e4
   10d94:	000227ee 	.word	0x000227ee
   10d98:	0002293b 	.word	0x0002293b
   10d9c:	01000004 	.word	0x01000004
   10da0:	0001fc4c 	.word	0x0001fc4c
   10da4:	20008100 	.word	0x20008100
   10da8:	200083dc 	.word	0x200083dc
   10dac:	00022803 	.word	0x00022803
   10db0:	0002281e 	.word	0x0002281e

00010db4 <bt_conn_index>:
		index = conn - acl_conns;
   10db4:	4b03      	ldr	r3, [pc, #12]	; (10dc4 <bt_conn_index+0x10>)
   10db6:	1ac0      	subs	r0, r0, r3
   10db8:	4b03      	ldr	r3, [pc, #12]	; (10dc8 <bt_conn_index+0x14>)
   10dba:	1180      	asrs	r0, r0, #6
   10dbc:	4358      	muls	r0, r3
}
   10dbe:	b2c0      	uxtb	r0, r0
   10dc0:	4770      	bx	lr
   10dc2:	bf00      	nop
   10dc4:	20009588 	.word	0x20009588
   10dc8:	aaaaaaab 	.word	0xaaaaaaab

00010dcc <bt_conn_create_pdu_timeout>:
{
   10dcc:	b538      	push	{r3, r4, r5, lr}
   10dce:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
   10dd0:	4908      	ldr	r1, [pc, #32]	; (10df4 <bt_conn_create_pdu_timeout+0x28>)
   10dd2:	2800      	cmp	r0, #0
   10dd4:	bf08      	it	eq
   10dd6:	4608      	moveq	r0, r1
   10dd8:	f00c fe10 	bl	1d9fc <net_buf_alloc_fixed>
	if (!buf) {
   10ddc:	4604      	mov	r4, r0
   10dde:	b918      	cbnz	r0, 10de8 <bt_conn_create_pdu_timeout+0x1c>
}
   10de0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   10de4:	f7ff bc4e 	b.w	10684 <bt_conn_create_pdu_timeout.part.0>
	net_buf_simple_reserve(&buf->b, reserve);
   10de8:	1d69      	adds	r1, r5, #5
   10dea:	3008      	adds	r0, #8
   10dec:	f00c fe25 	bl	1da3a <net_buf_simple_reserve>
   10df0:	4620      	mov	r0, r4
   10df2:	bd38      	pop	{r3, r4, r5, pc}
   10df4:	200087b0 	.word	0x200087b0

00010df8 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   10df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10dfa:	4604      	mov	r4, r0
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   10dfc:	3004      	adds	r0, #4
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   10dfe:	e8d0 3faf 	lda	r3, [r0]
   10e02:	05db      	lsls	r3, r3, #23
   10e04:	d511      	bpl.n	10e2a <notify_le_param_updated+0x32>
	    conn->le.interval >= conn->le.interval_min &&
   10e06:	f8b4 309e 	ldrh.w	r3, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   10e0a:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	; 0xa0
   10e0e:	429a      	cmp	r2, r3
   10e10:	d80b      	bhi.n	10e2a <notify_le_param_updated+0x32>
	    conn->le.interval >= conn->le.interval_min &&
   10e12:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	; 0xa2
   10e16:	429a      	cmp	r2, r3
   10e18:	d307      	bcc.n	10e2a <notify_le_param_updated+0x32>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   10e1a:	e9d4 2329 	ldrd	r2, r3, [r4, #164]	; 0xa4
   10e1e:	429a      	cmp	r2, r3
   10e20:	d103      	bne.n	10e2a <notify_le_param_updated+0x32>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10e22:	f46f 7180 	mvn.w	r1, #256	; 0x100
   10e26:	f00b f909 	bl	1c03c <atomic_and>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   10e2a:	4b10      	ldr	r3, [pc, #64]	; (10e6c <notify_le_param_updated+0x74>)
   10e2c:	681d      	ldr	r5, [r3, #0]
   10e2e:	b925      	cbnz	r5, 10e3a <notify_le_param_updated+0x42>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   10e30:	4d0f      	ldr	r5, [pc, #60]	; (10e70 <notify_le_param_updated+0x78>)
   10e32:	4f10      	ldr	r7, [pc, #64]	; (10e74 <notify_le_param_updated+0x7c>)
   10e34:	42bd      	cmp	r5, r7
   10e36:	d30c      	bcc.n	10e52 <notify_le_param_updated+0x5a>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   10e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
   10e3a:	68ee      	ldr	r6, [r5, #12]
   10e3c:	b13e      	cbz	r6, 10e4e <notify_le_param_updated+0x56>
			cb->le_param_updated(conn, conn->le.interval,
   10e3e:	4620      	mov	r0, r4
   10e40:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   10e44:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   10e48:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   10e4c:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   10e4e:	69ad      	ldr	r5, [r5, #24]
   10e50:	e7ed      	b.n	10e2e <notify_le_param_updated+0x36>
		if (cb->le_param_updated) {
   10e52:	68ee      	ldr	r6, [r5, #12]
   10e54:	b13e      	cbz	r6, 10e66 <notify_le_param_updated+0x6e>
			cb->le_param_updated(conn, conn->le.interval,
   10e56:	4620      	mov	r0, r4
   10e58:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   10e5c:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   10e60:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   10e64:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   10e66:	351c      	adds	r5, #28
   10e68:	e7e4      	b.n	10e34 <notify_le_param_updated+0x3c>
   10e6a:	bf00      	nop
   10e6c:	20009be8 	.word	0x20009be8
   10e70:	0001fbe0 	.word	0x0001fbe0
   10e74:	0001fbfc 	.word	0x0001fbfc

00010e78 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   10e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10e7c:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   10e7e:	4608      	mov	r0, r1
{
   10e80:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   10e82:	f00a fe74 	bl	1bb6e <bt_le_conn_params_valid>
   10e86:	4605      	mov	r5, r0
   10e88:	b918      	cbnz	r0, 10e92 <le_param_req+0x1a>
		return false;
   10e8a:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   10e8c:	4628      	mov	r0, r5
   10e8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   10e92:	4b13      	ldr	r3, [pc, #76]	; (10ee0 <le_param_req+0x68>)
   10e94:	681e      	ldr	r6, [r3, #0]
   10e96:	b946      	cbnz	r6, 10eaa <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   10e98:	4e12      	ldr	r6, [pc, #72]	; (10ee4 <le_param_req+0x6c>)
   10e9a:	f8df 804c 	ldr.w	r8, [pc, #76]	; 10ee8 <le_param_req+0x70>
   10e9e:	4546      	cmp	r6, r8
   10ea0:	d2f4      	bcs.n	10e8c <le_param_req+0x14>
		if (!cb->le_param_req) {
   10ea2:	68b3      	ldr	r3, [r6, #8]
   10ea4:	b983      	cbnz	r3, 10ec8 <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   10ea6:	361c      	adds	r6, #28
   10ea8:	e7f9      	b.n	10e9e <le_param_req+0x26>
		if (!cb->le_param_req) {
   10eaa:	68b3      	ldr	r3, [r6, #8]
   10eac:	b90b      	cbnz	r3, 10eb2 <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
   10eae:	69b6      	ldr	r6, [r6, #24]
   10eb0:	e7f1      	b.n	10e96 <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   10eb2:	4621      	mov	r1, r4
   10eb4:	4638      	mov	r0, r7
   10eb6:	4798      	blx	r3
   10eb8:	2800      	cmp	r0, #0
   10eba:	d0e6      	beq.n	10e8a <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   10ebc:	4620      	mov	r0, r4
   10ebe:	f00a fe56 	bl	1bb6e <bt_le_conn_params_valid>
   10ec2:	2800      	cmp	r0, #0
   10ec4:	d1f3      	bne.n	10eae <le_param_req+0x36>
   10ec6:	e7e0      	b.n	10e8a <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   10ec8:	4621      	mov	r1, r4
   10eca:	4638      	mov	r0, r7
   10ecc:	4798      	blx	r3
   10ece:	2800      	cmp	r0, #0
   10ed0:	d0db      	beq.n	10e8a <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   10ed2:	4620      	mov	r0, r4
   10ed4:	f00a fe4b 	bl	1bb6e <bt_le_conn_params_valid>
   10ed8:	2800      	cmp	r0, #0
   10eda:	d1e4      	bne.n	10ea6 <le_param_req+0x2e>
   10edc:	e7d5      	b.n	10e8a <le_param_req+0x12>
   10ede:	bf00      	nop
   10ee0:	20009be8 	.word	0x20009be8
   10ee4:	0001fbe0 	.word	0x0001fbe0
   10ee8:	0001fbfc 	.word	0x0001fbfc

00010eec <bt_conn_identity_resolved>:

#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
   10eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   10ef0:	78c3      	ldrb	r3, [r0, #3]
{
   10ef2:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   10ef4:	b973      	cbnz	r3, 10f14 <bt_conn_identity_resolved+0x28>
		rpa = &conn->le.resp_addr;
   10ef6:	f100 0696 	add.w	r6, r0, #150	; 0x96
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   10efa:	4b10      	ldr	r3, [pc, #64]	; (10f3c <bt_conn_identity_resolved+0x50>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   10efc:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
   10f00:	681d      	ldr	r5, [r3, #0]
   10f02:	b955      	cbnz	r5, 10f1a <bt_conn_identity_resolved+0x2e>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   10f04:	4d0e      	ldr	r5, [pc, #56]	; (10f40 <bt_conn_identity_resolved+0x54>)
   10f06:	4f0f      	ldr	r7, [pc, #60]	; (10f44 <bt_conn_identity_resolved+0x58>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   10f08:	f104 0888 	add.w	r8, r4, #136	; 0x88
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   10f0c:	42bd      	cmp	r5, r7
   10f0e:	d30c      	bcc.n	10f2a <bt_conn_identity_resolved+0x3e>
		}
	}
}
   10f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rpa = &conn->le.init_addr;
   10f14:	f100 068f 	add.w	r6, r0, #143	; 0x8f
   10f18:	e7ef      	b.n	10efa <bt_conn_identity_resolved+0xe>
		if (cb->identity_resolved) {
   10f1a:	692b      	ldr	r3, [r5, #16]
   10f1c:	b11b      	cbz	r3, 10f26 <bt_conn_identity_resolved+0x3a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   10f1e:	463a      	mov	r2, r7
   10f20:	4631      	mov	r1, r6
   10f22:	4620      	mov	r0, r4
   10f24:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   10f26:	69ad      	ldr	r5, [r5, #24]
   10f28:	e7eb      	b.n	10f02 <bt_conn_identity_resolved+0x16>
		if (cb->identity_resolved) {
   10f2a:	692b      	ldr	r3, [r5, #16]
   10f2c:	b11b      	cbz	r3, 10f36 <bt_conn_identity_resolved+0x4a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   10f2e:	4642      	mov	r2, r8
   10f30:	4631      	mov	r1, r6
   10f32:	4620      	mov	r0, r4
   10f34:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   10f36:	351c      	adds	r5, #28
   10f38:	e7e8      	b.n	10f0c <bt_conn_identity_resolved+0x20>
   10f3a:	bf00      	nop
   10f3c:	20009be8 	.word	0x20009be8
   10f40:	0001fbe0 	.word	0x0001fbe0
   10f44:	0001fbfc 	.word	0x0001fbfc

00010f48 <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
   10f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	conn->required_sec_level = conn->sec_level;
   10f4a:	7a43      	ldrb	r3, [r0, #9]
{
   10f4c:	4604      	mov	r4, r0
	conn->required_sec_level = conn->sec_level;
   10f4e:	7283      	strb	r3, [r0, #10]
{
   10f50:	4616      	mov	r6, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
	bt_l2cap_security_changed(conn, hci_err);
   10f52:	f00b f9e8 	bl	1c326 <bt_l2cap_security_changed>
	if (IS_ENABLED(CONFIG_BT_ISO_CENTRAL)) {
		bt_iso_security_changed(conn, hci_err);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   10f56:	4b0c      	ldr	r3, [pc, #48]	; (10f88 <bt_conn_security_changed+0x40>)
   10f58:	681d      	ldr	r5, [r3, #0]
   10f5a:	b925      	cbnz	r5, 10f66 <bt_conn_security_changed+0x1e>
		if (cb->security_changed) {
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   10f5c:	4d0b      	ldr	r5, [pc, #44]	; (10f8c <bt_conn_security_changed+0x44>)
   10f5e:	4f0c      	ldr	r7, [pc, #48]	; (10f90 <bt_conn_security_changed+0x48>)
   10f60:	42bd      	cmp	r5, r7
   10f62:	d308      	bcc.n	10f76 <bt_conn_security_changed+0x2e>
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
   10f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->security_changed) {
   10f66:	696b      	ldr	r3, [r5, #20]
   10f68:	b11b      	cbz	r3, 10f72 <bt_conn_security_changed+0x2a>
			cb->security_changed(conn, conn->sec_level, err);
   10f6a:	4632      	mov	r2, r6
   10f6c:	4620      	mov	r0, r4
   10f6e:	7a61      	ldrb	r1, [r4, #9]
   10f70:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   10f72:	69ad      	ldr	r5, [r5, #24]
   10f74:	e7f1      	b.n	10f5a <bt_conn_security_changed+0x12>
		if (cb->security_changed) {
   10f76:	696b      	ldr	r3, [r5, #20]
   10f78:	b11b      	cbz	r3, 10f82 <bt_conn_security_changed+0x3a>
			cb->security_changed(conn, conn->sec_level, err);
   10f7a:	4632      	mov	r2, r6
   10f7c:	4620      	mov	r0, r4
   10f7e:	7a61      	ldrb	r1, [r4, #9]
   10f80:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   10f82:	351c      	adds	r5, #28
   10f84:	e7ec      	b.n	10f60 <bt_conn_security_changed+0x18>
   10f86:	bf00      	nop
   10f88:	20009be8 	.word	0x20009be8
   10f8c:	0001fbe0 	.word	0x0001fbe0
   10f90:	0001fbfc 	.word	0x0001fbfc

00010f94 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   10f94:	b570      	push	{r4, r5, r6, lr}
   10f96:	4606      	mov	r6, r0
   10f98:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   10f9a:	480a      	ldr	r0, [pc, #40]	; (10fc4 <bt_conn_add_le+0x30>)
   10f9c:	2101      	movs	r1, #1
   10f9e:	f7ff fc77 	bl	10890 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   10fa2:	4604      	mov	r4, r0
   10fa4:	b160      	cbz	r0, 10fc0 <bt_conn_add_le+0x2c>
		return NULL;
	}

	conn->id = id;
   10fa6:	7206      	strb	r6, [r0, #8]
	memcpy(dst, src, sizeof(*dst));
   10fa8:	2207      	movs	r2, #7
   10faa:	4629      	mov	r1, r5
   10fac:	3088      	adds	r0, #136	; 0x88
   10fae:	f00a fc90 	bl	1b8d2 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
   10fb2:	2301      	movs	r3, #1
   10fb4:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   10fb6:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   10fb8:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   10fba:	4b03      	ldr	r3, [pc, #12]	; (10fc8 <bt_conn_add_le+0x34>)
   10fbc:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   10fc0:	4620      	mov	r0, r4
   10fc2:	bd70      	pop	{r4, r5, r6, pc}
   10fc4:	20009588 	.word	0x20009588
   10fc8:	00280018 	.word	0x00280018

00010fcc <bt_conn_lookup_addr_le>:

	return bt_addr_le_eq(peer, &conn->le.init_addr);
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   10fcc:	b570      	push	{r4, r5, r6, lr}
   10fce:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   10fd0:	480a      	ldr	r0, [pc, #40]	; (10ffc <bt_conn_lookup_addr_le+0x30>)
{
   10fd2:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   10fd4:	f00b f86f 	bl	1c0b6 <bt_conn_ref>
   10fd8:	4604      	mov	r4, r0

		if (!conn) {
   10fda:	b120      	cbz	r0, 10fe6 <bt_conn_lookup_addr_le+0x1a>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   10fdc:	7883      	ldrb	r3, [r0, #2]
   10fde:	2b01      	cmp	r3, #1
   10fe0:	d004      	beq.n	10fec <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
			bt_conn_unref(conn);
   10fe2:	f00b f87c 	bl	1c0de <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   10fe6:	2400      	movs	r4, #0
}
   10fe8:	4620      	mov	r0, r4
   10fea:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   10fec:	4632      	mov	r2, r6
   10fee:	4629      	mov	r1, r5
   10ff0:	f00b f902 	bl	1c1f8 <bt_conn_is_peer_addr_le>
   10ff4:	2800      	cmp	r0, #0
   10ff6:	d1f7      	bne.n	10fe8 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   10ff8:	4620      	mov	r0, r4
   10ffa:	e7f2      	b.n	10fe2 <bt_conn_lookup_addr_le+0x16>
   10ffc:	20009588 	.word	0x20009588

00011000 <bt_conn_exists_le>:
{
   11000:	b5b0      	push	{r4, r5, r7, lr}
   11002:	af00      	add	r7, sp, #0
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   11004:	f7ff ffe2 	bl	10fcc <bt_conn_lookup_addr_le>
	if (conn) {
   11008:	4604      	mov	r4, r0
   1100a:	b1f8      	cbz	r0, 1104c <bt_conn_exists_le+0x4c>
		BT_WARN("Found valid connection in %s state",
   1100c:	7b43      	ldrb	r3, [r0, #13]
   1100e:	466d      	mov	r5, sp
   11010:	2b08      	cmp	r3, #8
   11012:	bf98      	it	ls
   11014:	4a0e      	ldrls	r2, [pc, #56]	; (11050 <bt_conn_exists_le+0x50>)
   11016:	b08a      	sub	sp, #40	; 0x28
   11018:	bf94      	ite	ls
   1101a:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   1101e:	4b0d      	ldrhi	r3, [pc, #52]	; (11054 <bt_conn_exists_le+0x54>)
   11020:	466a      	mov	r2, sp
   11022:	490d      	ldr	r1, [pc, #52]	; (11058 <bt_conn_exists_le+0x58>)
   11024:	480d      	ldr	r0, [pc, #52]	; (1105c <bt_conn_exists_le+0x5c>)
   11026:	6151      	str	r1, [r2, #20]
   11028:	490d      	ldr	r1, [pc, #52]	; (11060 <bt_conn_exists_le+0x60>)
   1102a:	e9c2 1306 	strd	r1, r3, [r2, #24]
   1102e:	f240 3301 	movw	r3, #769	; 0x301
   11032:	8413      	strh	r3, [r2, #32]
   11034:	4b0b      	ldr	r3, [pc, #44]	; (11064 <bt_conn_exists_le+0x64>)
   11036:	f44f 5112 	mov.w	r1, #9344	; 0x2480
   1103a:	f842 3f10 	str.w	r3, [r2, #16]!
   1103e:	f00b f808 	bl	1c052 <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
   11042:	4620      	mov	r0, r4
   11044:	46ad      	mov	sp, r5
   11046:	f00b f84a 	bl	1c0de <bt_conn_unref>
		return true;
   1104a:	2001      	movs	r0, #1
}
   1104c:	46bd      	mov	sp, r7
   1104e:	bdb0      	pop	{r4, r5, r7, pc}
   11050:	000202d8 	.word	0x000202d8
   11054:	000227e4 	.word	0x000227e4
   11058:	0002283e 	.word	0x0002283e
   1105c:	0001fc4c 	.word	0x0001fc4c
   11060:	0002290e 	.word	0x0002290e
   11064:	01000004 	.word	0x01000004

00011068 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   11068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1106a:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1106c:	480e      	ldr	r0, [pc, #56]	; (110a8 <bt_conn_lookup_state_le+0x40>)
{
   1106e:	460e      	mov	r6, r1
   11070:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   11072:	f00b f820 	bl	1c0b6 <bt_conn_ref>

		if (!conn) {
   11076:	4604      	mov	r4, r0
   11078:	b120      	cbz	r0, 11084 <bt_conn_lookup_state_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   1107a:	7883      	ldrb	r3, [r0, #2]
   1107c:	2b01      	cmp	r3, #1
   1107e:	d003      	beq.n	11088 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   11080:	f00b f82d 	bl	1c0de <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   11084:	2400      	movs	r4, #0
   11086:	e00d      	b.n	110a4 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   11088:	b136      	cbz	r6, 11098 <bt_conn_lookup_state_le+0x30>
   1108a:	4632      	mov	r2, r6
   1108c:	4629      	mov	r1, r5
   1108e:	f00b f8b3 	bl	1c1f8 <bt_conn_is_peer_addr_le>
   11092:	b908      	cbnz	r0, 11098 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   11094:	4620      	mov	r0, r4
   11096:	e7f3      	b.n	11080 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   11098:	7b63      	ldrb	r3, [r4, #13]
   1109a:	42bb      	cmp	r3, r7
   1109c:	d1fa      	bne.n	11094 <bt_conn_lookup_state_le+0x2c>
   1109e:	7a23      	ldrb	r3, [r4, #8]
   110a0:	42ab      	cmp	r3, r5
   110a2:	d1f7      	bne.n	11094 <bt_conn_lookup_state_le+0x2c>
}
   110a4:	4620      	mov	r0, r4
   110a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   110a8:	20009588 	.word	0x20009588

000110ac <send_conn_le_param_update>:
{
   110ac:	b538      	push	{r3, r4, r5, lr}
   110ae:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   110b0:	4608      	mov	r0, r1
{
   110b2:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   110b4:	f00a fd5b 	bl	1bb6e <bt_le_conn_params_valid>
   110b8:	b338      	cbz	r0, 1110a <send_conn_le_param_update+0x5e>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   110ba:	4b15      	ldr	r3, [pc, #84]	; (11110 <send_conn_le_param_update+0x64>)
   110bc:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   110c0:	0799      	lsls	r1, r3, #30
   110c2:	d407      	bmi.n	110d4 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   110c4:	78e3      	ldrb	r3, [r4, #3]
   110c6:	b173      	cbz	r3, 110e6 <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
   110c8:	4629      	mov	r1, r5
   110ca:	4620      	mov	r0, r4
}
   110cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   110d0:	f000 bab0 	b.w	11634 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   110d4:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
   110d8:	079a      	lsls	r2, r3, #30
   110da:	d5f3      	bpl.n	110c4 <send_conn_le_param_update+0x18>
   110dc:	1d23      	adds	r3, r4, #4
   110de:	e8d3 3faf 	lda	r3, [r3]
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   110e2:	059b      	lsls	r3, r3, #22
   110e4:	d4ee      	bmi.n	110c4 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   110e6:	4629      	mov	r1, r5
   110e8:	4620      	mov	r0, r4
   110ea:	f00b f8a7 	bl	1c23c <bt_conn_le_conn_update>
		if (rc == 0) {
   110ee:	b958      	cbnz	r0, 11108 <send_conn_le_param_update+0x5c>
			conn->le.interval_min = param->interval_min;
   110f0:	882b      	ldrh	r3, [r5, #0]
   110f2:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
   110f6:	886b      	ldrh	r3, [r5, #2]
   110f8:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
   110fc:	88ab      	ldrh	r3, [r5, #4]
   110fe:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   11102:	88eb      	ldrh	r3, [r5, #6]
   11104:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   11108:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1110a:	f06f 0015 	mvn.w	r0, #21
   1110e:	e7fb      	b.n	11108 <send_conn_le_param_update+0x5c>
   11110:	20008000 	.word	0x20008000

00011114 <deferred_work>:
{
   11114:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   11116:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
   1111a:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   1111c:	f1a0 0558 	sub.w	r5, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   11120:	b9fb      	cbnz	r3, 11162 <deferred_work+0x4e>
		bt_l2cap_disconnected(conn);
   11122:	4628      	mov	r0, r5
   11124:	f00b f8e7 	bl	1c2f6 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   11128:	4b20      	ldr	r3, [pc, #128]	; (111ac <deferred_work+0x98>)
   1112a:	681e      	ldr	r6, [r3, #0]
   1112c:	b94e      	cbnz	r6, 11142 <deferred_work+0x2e>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1112e:	4e20      	ldr	r6, [pc, #128]	; (111b0 <deferred_work+0x9c>)
   11130:	4f20      	ldr	r7, [pc, #128]	; (111b4 <deferred_work+0xa0>)
   11132:	42be      	cmp	r6, r7
   11134:	d30d      	bcc.n	11152 <deferred_work+0x3e>
		bt_conn_unref(conn);
   11136:	4628      	mov	r0, r5
}
   11138:	b003      	add	sp, #12
   1113a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   1113e:	f00a bfce 	b.w	1c0de <bt_conn_unref>
		if (cb->disconnected) {
   11142:	6873      	ldr	r3, [r6, #4]
   11144:	b11b      	cbz	r3, 1114e <deferred_work+0x3a>
			cb->disconnected(conn, conn->err);
   11146:	4628      	mov	r0, r5
   11148:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   1114c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1114e:	69b6      	ldr	r6, [r6, #24]
   11150:	e7ec      	b.n	1112c <deferred_work+0x18>
		if (cb->disconnected) {
   11152:	6873      	ldr	r3, [r6, #4]
   11154:	b11b      	cbz	r3, 1115e <deferred_work+0x4a>
			cb->disconnected(conn, conn->err);
   11156:	4628      	mov	r0, r5
   11158:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   1115c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1115e:	361c      	adds	r6, #28
   11160:	e7e7      	b.n	11132 <deferred_work+0x1e>
	if (conn->type != BT_CONN_TYPE_LE) {
   11162:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   11166:	2b01      	cmp	r3, #1
   11168:	d118      	bne.n	1119c <deferred_work+0x88>
	if (atomic_test_and_clear_bit(conn->flags,
   1116a:	f1a0 0654 	sub.w	r6, r0, #84	; 0x54
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1116e:	f46f 7180 	mvn.w	r1, #256	; 0x100
   11172:	4630      	mov	r0, r6
   11174:	f00a ff62 	bl	1c03c <atomic_and>
   11178:	05c3      	lsls	r3, r0, #23
   1117a:	d511      	bpl.n	111a0 <deferred_work+0x8c>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   1117c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1117e:	9300      	str	r3, [sp, #0]
   11180:	6d23      	ldr	r3, [r4, #80]	; 0x50
   11182:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
   11184:	4669      	mov	r1, sp
   11186:	4628      	mov	r0, r5
   11188:	f7ff ff90 	bl	110ac <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1118c:	e8d6 3fef 	ldaex	r3, [r6]
   11190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   11194:	e8c6 3fe2 	stlex	r2, r3, [r6]
   11198:	2a00      	cmp	r2, #0
   1119a:	d1f7      	bne.n	1118c <deferred_work+0x78>
}
   1119c:	b003      	add	sp, #12
   1119e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		param = BT_LE_CONN_PARAM(
   111a0:	466b      	mov	r3, sp
   111a2:	4a05      	ldr	r2, [pc, #20]	; (111b8 <deferred_work+0xa4>)
   111a4:	6810      	ldr	r0, [r2, #0]
   111a6:	6851      	ldr	r1, [r2, #4]
   111a8:	c303      	stmia	r3!, {r0, r1}
   111aa:	e7eb      	b.n	11184 <deferred_work+0x70>
   111ac:	20009be8 	.word	0x20009be8
   111b0:	0001fbe0 	.word	0x0001fbe0
   111b4:	0001fbfc 	.word	0x0001fbfc
   111b8:	0001fdd4 	.word	0x0001fdd4

000111bc <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   111bc:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   111be:	4801      	ldr	r0, [pc, #4]	; (111c4 <bt_conn_create_frag_timeout+0x8>)
   111c0:	f7ff be04 	b.w	10dcc <bt_conn_create_pdu_timeout>
   111c4:	20008834 	.word	0x20008834

000111c8 <create_frag>:
{
   111c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   111cc:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   111ce:	f04f 33ff 	mov.w	r3, #4294967295
   111d2:	f04f 32ff 	mov.w	r2, #4294967295
   111d6:	2000      	movs	r0, #0
{
   111d8:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   111da:	f7ff ffef 	bl	111bc <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   111de:	7b73      	ldrb	r3, [r6, #13]
		frag = bt_conn_create_frag(0);
   111e0:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   111e2:	2b07      	cmp	r3, #7
   111e4:	f04f 0600 	mov.w	r6, #0
   111e8:	d005      	beq.n	111f6 <create_frag+0x2e>
		net_buf_unref(frag);
   111ea:	f004 f99f 	bl	1552c <net_buf_unref>
		return NULL;
   111ee:	4635      	mov	r5, r6
}
   111f0:	4628      	mov	r0, r5
   111f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   111f6:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
   111f8:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   111fc:	4e0c      	ldr	r6, [pc, #48]	; (11230 <create_frag+0x68>)
   111fe:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   11200:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   11204:	f00c fcde 	bl	1dbc4 <net_buf_simple_tailroom>
   11208:	4580      	cmp	r8, r0
   1120a:	d20c      	bcs.n	11226 <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   1120c:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   11210:	f854 1f08 	ldr.w	r1, [r4, #8]!
   11214:	4632      	mov	r2, r6
   11216:	4638      	mov	r0, r7
   11218:	f00c fc96 	bl	1db48 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   1121c:	4631      	mov	r1, r6
   1121e:	4620      	mov	r0, r4
   11220:	f00c fcb4 	bl	1db8c <net_buf_simple_pull>
   11224:	e7e4      	b.n	111f0 <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   11226:	4638      	mov	r0, r7
   11228:	f00c fccc 	bl	1dbc4 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   1122c:	b286      	uxth	r6, r0
   1122e:	e7ef      	b.n	11210 <create_frag+0x48>
   11230:	20008000 	.word	0x20008000

00011234 <bt_conn_process_tx>:
{
   11234:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   11236:	7b43      	ldrb	r3, [r0, #13]
{
   11238:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   1123a:	b95b      	cbnz	r3, 11254 <bt_conn_process_tx+0x20>
   1123c:	f06f 0140 	mvn.w	r1, #64	; 0x40
   11240:	3004      	adds	r0, #4
   11242:	f00a fefb 	bl	1c03c <atomic_and>
   11246:	0643      	lsls	r3, r0, #25
   11248:	d504      	bpl.n	11254 <bt_conn_process_tx+0x20>
		conn_cleanup(conn);
   1124a:	4620      	mov	r0, r4
}
   1124c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   11250:	f00a bf0e 	b.w	1c070 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   11254:	2200      	movs	r2, #0
   11256:	2300      	movs	r3, #0
   11258:	f104 0038 	add.w	r0, r4, #56	; 0x38
   1125c:	f00c fbd3 	bl	1da06 <net_buf_get>
	BT_ASSERT(buf);
   11260:	4605      	mov	r5, r0
   11262:	b960      	cbnz	r0, 1127e <bt_conn_process_tx+0x4a>
   11264:	f44f 7347 	mov.w	r3, #796	; 0x31c
   11268:	4a22      	ldr	r2, [pc, #136]	; (112f4 <bt_conn_process_tx+0xc0>)
   1126a:	4923      	ldr	r1, [pc, #140]	; (112f8 <bt_conn_process_tx+0xc4>)
   1126c:	4823      	ldr	r0, [pc, #140]	; (112fc <bt_conn_process_tx+0xc8>)
   1126e:	f009 f9a3 	bl	1a5b8 <assert_print>
   11272:	4040      	eors	r0, r0
   11274:	f380 8811 	msr	BASEPRI, r0
   11278:	f04f 0003 	mov.w	r0, #3
   1127c:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   1127e:	4e20      	ldr	r6, [pc, #128]	; (11300 <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
   11280:	89aa      	ldrh	r2, [r5, #12]
   11282:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   11286:	429a      	cmp	r2, r3
   11288:	d807      	bhi.n	1129a <bt_conn_process_tx+0x66>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   1128a:	2300      	movs	r3, #0
   1128c:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   1128e:	4629      	mov	r1, r5
   11290:	4620      	mov	r0, r4
   11292:	f7ff fa57 	bl	10744 <send_frag>
	if (!send_buf(conn, buf)) {
   11296:	b968      	cbnz	r0, 112b4 <bt_conn_process_tx+0x80>
   11298:	e005      	b.n	112a6 <bt_conn_process_tx+0x72>
	frag = create_frag(conn, buf);
   1129a:	4629      	mov	r1, r5
   1129c:	4620      	mov	r0, r4
   1129e:	f7ff ff93 	bl	111c8 <create_frag>
	if (!frag) {
   112a2:	4601      	mov	r1, r0
   112a4:	b938      	cbnz	r0, 112b6 <bt_conn_process_tx+0x82>
		tx_data(buf)->tx = NULL;
   112a6:	2300      	movs	r3, #0
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   112a8:	696e      	ldr	r6, [r5, #20]
		net_buf_unref(buf);
   112aa:	4628      	mov	r0, r5
		tx_data(buf)->tx = NULL;
   112ac:	616b      	str	r3, [r5, #20]
		net_buf_unref(buf);
   112ae:	f004 f93d 	bl	1552c <net_buf_unref>
		if (tx) {
   112b2:	b9ce      	cbnz	r6, 112e8 <bt_conn_process_tx+0xb4>
}
   112b4:	bd70      	pop	{r4, r5, r6, pc}
	if (!send_frag(conn, frag, FRAG_START, true)) {
   112b6:	2301      	movs	r3, #1
   112b8:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   112ba:	4620      	mov	r0, r4
   112bc:	f7ff fa42 	bl	10744 <send_frag>
   112c0:	2800      	cmp	r0, #0
   112c2:	d0f0      	beq.n	112a6 <bt_conn_process_tx+0x72>
	while (buf->len > conn_mtu(conn)) {
   112c4:	89aa      	ldrh	r2, [r5, #12]
   112c6:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   112ca:	429a      	cmp	r2, r3
   112cc:	d802      	bhi.n	112d4 <bt_conn_process_tx+0xa0>
	return send_frag(conn, buf, FRAG_END, false);
   112ce:	2300      	movs	r3, #0
   112d0:	2203      	movs	r2, #3
   112d2:	e7dc      	b.n	1128e <bt_conn_process_tx+0x5a>
		frag = create_frag(conn, buf);
   112d4:	4629      	mov	r1, r5
   112d6:	4620      	mov	r0, r4
   112d8:	f7ff ff76 	bl	111c8 <create_frag>
		if (!frag) {
   112dc:	4601      	mov	r1, r0
   112de:	2800      	cmp	r0, #0
   112e0:	d0e1      	beq.n	112a6 <bt_conn_process_tx+0x72>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   112e2:	2301      	movs	r3, #1
   112e4:	461a      	mov	r2, r3
   112e6:	e7e8      	b.n	112ba <bt_conn_process_tx+0x86>
			conn_tx_destroy(conn, tx);
   112e8:	4631      	mov	r1, r6
   112ea:	4620      	mov	r0, r4
}
   112ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			conn_tx_destroy(conn, tx);
   112f0:	f7ff ba12 	b.w	10718 <conn_tx_destroy>
   112f4:	00022865 	.word	0x00022865
   112f8:	00021626 	.word	0x00021626
   112fc:	000217ae 	.word	0x000217ae
   11300:	20008000 	.word	0x20008000

00011304 <bt_conn_auth_cb_register>:
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
   11304:	4b0b      	ldr	r3, [pc, #44]	; (11334 <bt_conn_auth_cb_register+0x30>)
   11306:	b158      	cbz	r0, 11320 <bt_conn_auth_cb_register+0x1c>
		bt_auth = NULL;
		return 0;
	}

	if (bt_auth) {
   11308:	681a      	ldr	r2, [r3, #0]
   1130a:	b962      	cbnz	r2, 11326 <bt_conn_auth_cb_register+0x22>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
   1130c:	6902      	ldr	r2, [r0, #16]
   1130e:	b93a      	cbnz	r2, 11320 <bt_conn_auth_cb_register+0x1c>
   11310:	6802      	ldr	r2, [r0, #0]
   11312:	b95a      	cbnz	r2, 1132c <bt_conn_auth_cb_register+0x28>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
   11314:	6842      	ldr	r2, [r0, #4]
   11316:	b94a      	cbnz	r2, 1132c <bt_conn_auth_cb_register+0x28>
   11318:	6882      	ldr	r2, [r0, #8]
   1131a:	b93a      	cbnz	r2, 1132c <bt_conn_auth_cb_register+0x28>
   1131c:	6942      	ldr	r2, [r0, #20]
   1131e:	b92a      	cbnz	r2, 1132c <bt_conn_auth_cb_register+0x28>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
   11320:	6018      	str	r0, [r3, #0]
		return 0;
   11322:	2000      	movs	r0, #0
   11324:	4770      	bx	lr
		return -EALREADY;
   11326:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1132a:	4770      	bx	lr
		return -EINVAL;
   1132c:	f06f 0015 	mvn.w	r0, #21
	return 0;
}
   11330:	4770      	bx	lr
   11332:	bf00      	nop
   11334:	20009bf4 	.word	0x20009bf4

00011338 <bt_conn_lookup_index>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

struct bt_conn *bt_conn_lookup_index(uint8_t index)
{
	if (index >= ARRAY_SIZE(acl_conns)) {
   11338:	b910      	cbnz	r0, 11340 <bt_conn_lookup_index+0x8>
		return NULL;
	}

	return bt_conn_ref(&acl_conns[index]);
   1133a:	4802      	ldr	r0, [pc, #8]	; (11344 <bt_conn_lookup_index+0xc>)
   1133c:	f00a bebb 	b.w	1c0b6 <bt_conn_ref>
}
   11340:	2000      	movs	r0, #0
   11342:	4770      	bx	lr
   11344:	20009588 	.word	0x20009588

00011348 <bt_conn_init>:

int bt_conn_init(void)
{
   11348:	b510      	push	{r4, lr}
	z_impl_k_queue_init(queue);
   1134a:	480c      	ldr	r0, [pc, #48]	; (1137c <bt_conn_init+0x34>)
   1134c:	f00d fd51 	bl	1edf2 <z_impl_k_queue_init>
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   11350:	490b      	ldr	r1, [pc, #44]	; (11380 <bt_conn_init+0x38>)
   11352:	480a      	ldr	r0, [pc, #40]	; (1137c <bt_conn_init+0x34>)
   11354:	f00d fd59 	bl	1ee0a <k_queue_append>
   11358:	490a      	ldr	r1, [pc, #40]	; (11384 <bt_conn_init+0x3c>)
   1135a:	4808      	ldr	r0, [pc, #32]	; (1137c <bt_conn_init+0x34>)
   1135c:	f00d fd55 	bl	1ee0a <k_queue_append>
   11360:	4909      	ldr	r1, [pc, #36]	; (11388 <bt_conn_init+0x40>)
   11362:	4806      	ldr	r0, [pc, #24]	; (1137c <bt_conn_init+0x34>)
   11364:	f00d fd51 	bl	1ee0a <k_queue_append>
	}

	bt_att_init();
   11368:	f001 f8f2 	bl	12550 <bt_att_init>

	err = bt_smp_init();
   1136c:	f003 ff5a 	bl	15224 <bt_smp_init>
	if (err) {
   11370:	4604      	mov	r4, r0
   11372:	b908      	cbnz	r0, 11378 <bt_conn_init+0x30>
		return err;
	}

	bt_l2cap_init();
   11374:	f00b f822 	bl	1c3bc <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   11378:	4620      	mov	r0, r4
   1137a:	bd10      	pop	{r4, pc}
   1137c:	2000876c 	.word	0x2000876c
   11380:	20009bb8 	.word	0x20009bb8
   11384:	20009bc8 	.word	0x20009bc8
   11388:	20009bd8 	.word	0x20009bd8

0001138c <l2cap_create_le_sig_pdu.part.0>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
		bt_l2cap_chan_del(chan);
	}
}

static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   1138c:	b580      	push	{r7, lr}
   1138e:	af00      	add	r7, sp, #0
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
	if (!buf) {
		/* If it was not possible to allocate a buffer within the
		 * timeout return NULL.
		 */
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   11390:	b088      	sub	sp, #32
   11392:	466a      	mov	r2, sp
   11394:	4b07      	ldr	r3, [pc, #28]	; (113b4 <l2cap_create_le_sig_pdu.part.0+0x28>)
   11396:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1139a:	6153      	str	r3, [r2, #20]
   1139c:	4b06      	ldr	r3, [pc, #24]	; (113b8 <l2cap_create_le_sig_pdu.part.0+0x2c>)
   1139e:	e9c2 3006 	strd	r3, r0, [r2, #24]
   113a2:	2304      	movs	r3, #4
   113a4:	4805      	ldr	r0, [pc, #20]	; (113bc <l2cap_create_le_sig_pdu.part.0+0x30>)
   113a6:	f842 3f10 	str.w	r3, [r2, #16]!
   113aa:	f00a ff70 	bl	1c28e <z_log_msg_static_create.constprop.0>
	hdr->code = code;
	hdr->ident = ident;
	hdr->len = sys_cpu_to_le16(len);

	return buf;
}
   113ae:	2000      	movs	r0, #0
   113b0:	46bd      	mov	sp, r7
   113b2:	bd80      	pop	{r7, pc}
   113b4:	00022973 	.word	0x00022973
   113b8:	00022b0d 	.word	0x00022b0d
   113bc:	0001fc94 	.word	0x0001fc94

000113c0 <l2cap_accept.part.0>:
	 */
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   113c0:	b580      	push	{r7, lr}
   113c2:	af00      	add	r7, sp, #0
		*chan = &l2cap->chan.chan;

		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);
   113c4:	b088      	sub	sp, #32
   113c6:	466a      	mov	r2, sp
   113c8:	4b08      	ldr	r3, [pc, #32]	; (113ec <l2cap_accept.part.0+0x2c>)
   113ca:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   113ce:	6153      	str	r3, [r2, #20]
   113d0:	4b07      	ldr	r3, [pc, #28]	; (113f0 <l2cap_accept.part.0+0x30>)
   113d2:	e9c2 3006 	strd	r3, r0, [r2, #24]
   113d6:	2304      	movs	r3, #4
   113d8:	4806      	ldr	r0, [pc, #24]	; (113f4 <l2cap_accept.part.0+0x34>)
   113da:	f842 3f10 	str.w	r3, [r2, #16]!
   113de:	f00a ff56 	bl	1c28e <z_log_msg_static_create.constprop.0>

	return -ENOMEM;
}
   113e2:	f06f 000b 	mvn.w	r0, #11
   113e6:	46bd      	mov	sp, r7
   113e8:	bd80      	pop	{r7, pc}
   113ea:	bf00      	nop
   113ec:	0002299f 	.word	0x0002299f
   113f0:	00022b00 	.word	0x00022b00
   113f4:	0001fc94 	.word	0x0001fc94

000113f8 <l2cap_accept>:
		if (l2cap->chan.chan.conn) {
   113f8:	4b04      	ldr	r3, [pc, #16]	; (1140c <l2cap_accept+0x14>)
   113fa:	681a      	ldr	r2, [r3, #0]
   113fc:	b10a      	cbz	r2, 11402 <l2cap_accept+0xa>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   113fe:	f7ff bfdf 	b.w	113c0 <l2cap_accept.part.0>
		l2cap->chan.chan.ops = &ops;
   11402:	4803      	ldr	r0, [pc, #12]	; (11410 <l2cap_accept+0x18>)
   11404:	6058      	str	r0, [r3, #4]
}
   11406:	4610      	mov	r0, r2
		*chan = &l2cap->chan.chan;
   11408:	600b      	str	r3, [r1, #0]
}
   1140a:	4770      	bx	lr
   1140c:	20009bf8 	.word	0x20009bf8
   11410:	0002031c 	.word	0x0002031c

00011414 <bt_l2cap_connected>:
{
   11414:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11416:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   11418:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1141a:	4d1f      	ldr	r5, [pc, #124]	; (11498 <bt_l2cap_connected+0x84>)
   1141c:	4f1f      	ldr	r7, [pc, #124]	; (1149c <bt_l2cap_connected+0x88>)
   1141e:	42bd      	cmp	r5, r7
   11420:	d301      	bcc.n	11426 <bt_l2cap_connected+0x12>
}
   11422:	b003      	add	sp, #12
   11424:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (fchan->accept(conn, &chan) < 0) {
   11426:	4620      	mov	r0, r4
   11428:	686b      	ldr	r3, [r5, #4]
   1142a:	a901      	add	r1, sp, #4
   1142c:	4798      	blx	r3
   1142e:	2800      	cmp	r0, #0
   11430:	db2c      	blt.n	1148c <bt_l2cap_connected+0x78>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   11432:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   11434:	882a      	ldrh	r2, [r5, #0]
   11436:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
   11438:	849a      	strh	r2, [r3, #36]	; 0x24
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   1143a:	68a8      	ldr	r0, [r5, #8]
   1143c:	f103 0210 	add.w	r2, r3, #16
   11440:	e8d2 1fef 	ldaex	r1, [r2]
   11444:	e8c2 6fec 	stlex	ip, r6, [r2]
   11448:	f1bc 0f00 	cmp.w	ip, #0
   1144c:	d1f8      	bne.n	11440 <bt_l2cap_connected+0x2c>
	parent->next = child;
   1144e:	609e      	str	r6, [r3, #8]
	return list->tail;
   11450:	6d61      	ldr	r1, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
   11452:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
   11456:	b9d9      	cbnz	r1, 11490 <bt_l2cap_connected+0x7c>
	list->head = node;
   11458:	e9c4 2214 	strd	r2, r2, [r4, #80]	; 0x50
	chan->conn = conn;
   1145c:	601c      	str	r4, [r3, #0]
	chan->destroy = destroy;
   1145e:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
   11460:	9801      	ldr	r0, [sp, #4]
   11462:	6843      	ldr	r3, [r0, #4]
   11464:	681b      	ldr	r3, [r3, #0]
   11466:	b103      	cbz	r3, 1146a <bt_l2cap_connected+0x56>
			chan->ops->connected(chan);
   11468:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1146a:	9b01      	ldr	r3, [sp, #4]
   1146c:	3310      	adds	r3, #16
   1146e:	e8d3 1fef 	ldaex	r1, [r3]
   11472:	f041 0101 	orr.w	r1, r1, #1
   11476:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1147a:	2a00      	cmp	r2, #0
   1147c:	d1f7      	bne.n	1146e <bt_l2cap_connected+0x5a>
		if (chan->ops->status) {
   1147e:	9801      	ldr	r0, [sp, #4]
   11480:	6843      	ldr	r3, [r0, #4]
   11482:	69db      	ldr	r3, [r3, #28]
   11484:	b113      	cbz	r3, 1148c <bt_l2cap_connected+0x78>
			chan->ops->status(chan, chan->status);
   11486:	f100 0110 	add.w	r1, r0, #16
   1148a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1148c:	350c      	adds	r5, #12
   1148e:	e7c6      	b.n	1141e <bt_l2cap_connected+0xa>
	parent->next = child;
   11490:	600a      	str	r2, [r1, #0]
	list->tail = node;
   11492:	6562      	str	r2, [r4, #84]	; 0x54
}
   11494:	e7e2      	b.n	1145c <bt_l2cap_connected+0x48>
   11496:	bf00      	nop
   11498:	0001fbbc 	.word	0x0001fbbc
   1149c:	0001fbe0 	.word	0x0001fbe0

000114a0 <l2cap_recv>:
{
   114a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   114a2:	b083      	sub	sp, #12
	if (buf->len < sizeof(*hdr)) {
   114a4:	898b      	ldrh	r3, [r1, #12]
{
   114a6:	4606      	mov	r6, r0
	if (buf->len < sizeof(*hdr)) {
   114a8:	2b03      	cmp	r3, #3
{
   114aa:	460d      	mov	r5, r1
   114ac:	af02      	add	r7, sp, #8
	if (buf->len < sizeof(*hdr)) {
   114ae:	d80c      	bhi.n	114ca <l2cap_recv+0x2a>
		BT_ERR("Too small L2CAP signaling PDU");
   114b0:	466c      	mov	r4, sp
   114b2:	b088      	sub	sp, #32
   114b4:	aa02      	add	r2, sp, #8
   114b6:	4b36      	ldr	r3, [pc, #216]	; (11590 <l2cap_recv+0xf0>)
		BT_ERR("Invalid ident value in L2CAP PDU");
   114b8:	6153      	str	r3, [r2, #20]
   114ba:	4b36      	ldr	r3, [pc, #216]	; (11594 <l2cap_recv+0xf4>)
		BT_ERR("Too small LE conn param rsp");
   114bc:	6193      	str	r3, [r2, #24]
   114be:	2303      	movs	r3, #3
   114c0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   114c4:	f842 3f10 	str.w	r3, [r2, #16]!
   114c8:	e017      	b.n	114fa <l2cap_recv+0x5a>
	return net_buf_simple_pull_mem(&buf->b, len);
   114ca:	2104      	movs	r1, #4
   114cc:	f105 0008 	add.w	r0, r5, #8
   114d0:	f00c fb64 	bl	1db9c <net_buf_simple_pull_mem>
	if (buf->len != len) {
   114d4:	89a9      	ldrh	r1, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
   114d6:	8843      	ldrh	r3, [r0, #2]
   114d8:	4604      	mov	r4, r0
	if (buf->len != len) {
   114da:	4299      	cmp	r1, r3
   114dc:	d015      	beq.n	1150a <l2cap_recv+0x6a>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   114de:	466c      	mov	r4, sp
   114e0:	b08a      	sub	sp, #40	; 0x28
   114e2:	aa02      	add	r2, sp, #8
   114e4:	482c      	ldr	r0, [pc, #176]	; (11598 <l2cap_recv+0xf8>)
   114e6:	6213      	str	r3, [r2, #32]
   114e8:	6150      	str	r0, [r2, #20]
   114ea:	482a      	ldr	r0, [pc, #168]	; (11594 <l2cap_recv+0xf4>)
   114ec:	2305      	movs	r3, #5
   114ee:	e9c2 0106 	strd	r0, r1, [r2, #24]
   114f2:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   114f6:	f842 3f10 	str.w	r3, [r2, #16]!
   114fa:	4828      	ldr	r0, [pc, #160]	; (1159c <l2cap_recv+0xfc>)
   114fc:	f00a fec7 	bl	1c28e <z_log_msg_static_create.constprop.0>
   11500:	46a5      	mov	sp, r4
}
   11502:	2000      	movs	r0, #0
   11504:	3704      	adds	r7, #4
   11506:	46bd      	mov	sp, r7
   11508:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
   1150a:	7843      	ldrb	r3, [r0, #1]
   1150c:	b923      	cbnz	r3, 11518 <l2cap_recv+0x78>
		BT_ERR("Invalid ident value in L2CAP PDU");
   1150e:	466c      	mov	r4, sp
   11510:	b088      	sub	sp, #32
   11512:	aa02      	add	r2, sp, #8
   11514:	4b22      	ldr	r3, [pc, #136]	; (115a0 <l2cap_recv+0x100>)
   11516:	e7cf      	b.n	114b8 <l2cap_recv+0x18>
	switch (hdr->code) {
   11518:	7803      	ldrb	r3, [r0, #0]
   1151a:	2b01      	cmp	r3, #1
   1151c:	d0f1      	beq.n	11502 <l2cap_recv+0x62>
   1151e:	2b13      	cmp	r3, #19
   11520:	d108      	bne.n	11534 <l2cap_recv+0x94>
	if (buf->len < sizeof(*rsp)) {
   11522:	2901      	cmp	r1, #1
   11524:	d8ed      	bhi.n	11502 <l2cap_recv+0x62>
		BT_ERR("Too small LE conn param rsp");
   11526:	466c      	mov	r4, sp
   11528:	b088      	sub	sp, #32
   1152a:	aa02      	add	r2, sp, #8
   1152c:	4b1d      	ldr	r3, [pc, #116]	; (115a4 <l2cap_recv+0x104>)
   1152e:	6153      	str	r3, [r2, #20]
   11530:	4b1d      	ldr	r3, [pc, #116]	; (115a8 <l2cap_recv+0x108>)
   11532:	e7c3      	b.n	114bc <l2cap_recv+0x1c>
		BT_WARN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   11534:	466d      	mov	r5, sp
   11536:	b088      	sub	sp, #32
   11538:	aa02      	add	r2, sp, #8
   1153a:	491c      	ldr	r1, [pc, #112]	; (115ac <l2cap_recv+0x10c>)
   1153c:	4817      	ldr	r0, [pc, #92]	; (1159c <l2cap_recv+0xfc>)
   1153e:	6151      	str	r1, [r2, #20]
   11540:	4914      	ldr	r1, [pc, #80]	; (11594 <l2cap_recv+0xf4>)
	switch (hdr->code) {
   11542:	e9c2 1306 	strd	r1, r3, [r2, #24]
		BT_WARN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   11546:	2304      	movs	r3, #4
   11548:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1154c:	f842 3f10 	str.w	r3, [r2, #16]!
   11550:	f00a fe9d 	bl	1c28e <z_log_msg_static_create.constprop.0>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   11554:	2202      	movs	r2, #2
   11556:	46ad      	mov	sp, r5
   11558:	7861      	ldrb	r1, [r4, #1]
   1155a:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   1155c:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1155e:	f00a fe99 	bl	1c294 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   11562:	4604      	mov	r4, r0
   11564:	2800      	cmp	r0, #0
   11566:	d0cc      	beq.n	11502 <l2cap_recv+0x62>
	return net_buf_simple_add(&buf->b, len);
   11568:	2102      	movs	r1, #2
   1156a:	3008      	adds	r0, #8
   1156c:	f00c fae6 	bl	1db3c <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   11570:	2300      	movs	r3, #0
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   11572:	4622      	mov	r2, r4
   11574:	7003      	strb	r3, [r0, #0]
   11576:	7043      	strb	r3, [r0, #1]
   11578:	2105      	movs	r1, #5
   1157a:	4628      	mov	r0, r5
   1157c:	9300      	str	r3, [sp, #0]
   1157e:	f00a fef2 	bl	1c366 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   11582:	2800      	cmp	r0, #0
   11584:	d0bd      	beq.n	11502 <l2cap_recv+0x62>
		net_buf_unref(buf);
   11586:	4620      	mov	r0, r4
   11588:	f003 ffd0 	bl	1552c <net_buf_unref>
   1158c:	e7b9      	b.n	11502 <l2cap_recv+0x62>
   1158e:	bf00      	nop
   11590:	000229ca 	.word	0x000229ca
   11594:	00022af5 	.word	0x00022af5
   11598:	000229ec 	.word	0x000229ec
   1159c:	0001fc94 	.word	0x0001fc94
   115a0:	00022a11 	.word	0x00022a11
   115a4:	00022a36 	.word	0x00022a36
   115a8:	00022ae3 	.word	0x00022ae3
   115ac:	00022a56 	.word	0x00022a56

000115b0 <bt_l2cap_recv>:
{
   115b0:	b5b0      	push	{r4, r5, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   115b2:	898b      	ldrh	r3, [r1, #12]
{
   115b4:	4605      	mov	r5, r0
	if (buf->len < sizeof(*hdr)) {
   115b6:	2b03      	cmp	r3, #3
{
   115b8:	460c      	mov	r4, r1
   115ba:	af00      	add	r7, sp, #0
	if (buf->len < sizeof(*hdr)) {
   115bc:	d814      	bhi.n	115e8 <bt_l2cap_recv+0x38>
		BT_ERR("Too small L2CAP PDU received");
   115be:	466d      	mov	r5, sp
   115c0:	b088      	sub	sp, #32
   115c2:	466a      	mov	r2, sp
   115c4:	4b17      	ldr	r3, [pc, #92]	; (11624 <bt_l2cap_recv+0x74>)
   115c6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   115ca:	6153      	str	r3, [r2, #20]
   115cc:	4b16      	ldr	r3, [pc, #88]	; (11628 <bt_l2cap_recv+0x78>)
   115ce:	6193      	str	r3, [r2, #24]
   115d0:	2303      	movs	r3, #3
   115d2:	f842 3f10 	str.w	r3, [r2, #16]!
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
   115d6:	4815      	ldr	r0, [pc, #84]	; (1162c <bt_l2cap_recv+0x7c>)
   115d8:	f00a fe59 	bl	1c28e <z_log_msg_static_create.constprop.0>
   115dc:	46ad      	mov	sp, r5
	net_buf_unref(buf);
   115de:	4620      	mov	r0, r4
   115e0:	f003 ffa4 	bl	1552c <net_buf_unref>
}
   115e4:	46bd      	mov	sp, r7
   115e6:	bdb0      	pop	{r4, r5, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   115e8:	2104      	movs	r1, #4
   115ea:	f104 0008 	add.w	r0, r4, #8
   115ee:	f00c fad5 	bl	1db9c <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   115f2:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   115f4:	4628      	mov	r0, r5
   115f6:	f00a fed8 	bl	1c3aa <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   115fa:	b968      	cbnz	r0, 11618 <bt_l2cap_recv+0x68>
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
   115fc:	466d      	mov	r5, sp
   115fe:	b088      	sub	sp, #32
   11600:	466a      	mov	r2, sp
   11602:	4b0b      	ldr	r3, [pc, #44]	; (11630 <bt_l2cap_recv+0x80>)
   11604:	6153      	str	r3, [r2, #20]
   11606:	4b08      	ldr	r3, [pc, #32]	; (11628 <bt_l2cap_recv+0x78>)
   11608:	e9c2 3106 	strd	r3, r1, [r2, #24]
   1160c:	2304      	movs	r3, #4
   1160e:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   11612:	f842 3f10 	str.w	r3, [r2, #16]!
   11616:	e7de      	b.n	115d6 <bt_l2cap_recv+0x26>
	chan->ops->recv(chan, buf);
   11618:	6843      	ldr	r3, [r0, #4]
   1161a:	4621      	mov	r1, r4
   1161c:	695b      	ldr	r3, [r3, #20]
   1161e:	4798      	blx	r3
   11620:	e7dd      	b.n	115de <bt_l2cap_recv+0x2e>
   11622:	bf00      	nop
   11624:	00022a82 	.word	0x00022a82
   11628:	00022b25 	.word	0x00022b25
   1162c:	0001fc94 	.word	0x0001fc94
   11630:	00022aa3 	.word	0x00022aa3

00011634 <bt_l2cap_update_conn_param>:
{
   11634:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   11636:	4b17      	ldr	r3, [pc, #92]	; (11694 <bt_l2cap_update_conn_param+0x60>)
{
   11638:	460e      	mov	r6, r1
	ident++;
   1163a:	7819      	ldrb	r1, [r3, #0]
{
   1163c:	4605      	mov	r5, r0
	ident++;
   1163e:	3101      	adds	r1, #1
   11640:	b2c9      	uxtb	r1, r1
   11642:	2901      	cmp	r1, #1
   11644:	bf38      	it	cc
   11646:	2101      	movcc	r1, #1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   11648:	2208      	movs	r2, #8
   1164a:	2012      	movs	r0, #18
	ident++;
   1164c:	7019      	strb	r1, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   1164e:	f00a fe21 	bl	1c294 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   11652:	4604      	mov	r4, r0
   11654:	b1d0      	cbz	r0, 1168c <bt_l2cap_update_conn_param+0x58>
	return net_buf_simple_add(&buf->b, len);
   11656:	2108      	movs	r1, #8
   11658:	4408      	add	r0, r1
   1165a:	f00c fa6f 	bl	1db3c <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   1165e:	8833      	ldrh	r3, [r6, #0]
   11660:	4622      	mov	r2, r4
   11662:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   11664:	8873      	ldrh	r3, [r6, #2]
   11666:	2105      	movs	r1, #5
   11668:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   1166a:	88b3      	ldrh	r3, [r6, #4]
   1166c:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   1166e:	88f3      	ldrh	r3, [r6, #6]
   11670:	80c3      	strh	r3, [r0, #6]
   11672:	2300      	movs	r3, #0
   11674:	4628      	mov	r0, r5
   11676:	9300      	str	r3, [sp, #0]
   11678:	f00a fe75 	bl	1c366 <bt_l2cap_send_cb>
	if (err) {
   1167c:	4605      	mov	r5, r0
   1167e:	b110      	cbz	r0, 11686 <bt_l2cap_update_conn_param+0x52>
		net_buf_unref(buf);
   11680:	4620      	mov	r0, r4
   11682:	f003 ff53 	bl	1552c <net_buf_unref>
}
   11686:	4628      	mov	r0, r5
   11688:	b002      	add	sp, #8
   1168a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   1168c:	f06f 050b 	mvn.w	r5, #11
   11690:	e7f9      	b.n	11686 <bt_l2cap_update_conn_param+0x52>
   11692:	bf00      	nop
   11694:	2000a071 	.word	0x2000a071

00011698 <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   11698:	2823      	cmp	r0, #35	; 0x23
   1169a:	d81f      	bhi.n	116dc <att_op_get_type+0x44>
   1169c:	281a      	cmp	r0, #26
   1169e:	d804      	bhi.n	116aa <att_op_get_type+0x12>
   116a0:	1e43      	subs	r3, r0, #1
   116a2:	2b18      	cmp	r3, #24
   116a4:	d90e      	bls.n	116c4 <att_op_get_type+0x2c>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
   116a6:	2006      	movs	r0, #6
   116a8:	4770      	bx	lr
	switch (op) {
   116aa:	f1a0 031b 	sub.w	r3, r0, #27
   116ae:	2b08      	cmp	r3, #8
   116b0:	d81e      	bhi.n	116f0 <att_op_get_type+0x58>
   116b2:	e8df f003 	tbb	[pc, r3]
   116b6:	1d05      	.short	0x1d05
   116b8:	191d231b 	.word	0x191d231b
   116bc:	1d25      	.short	0x1d25
   116be:	05          	.byte	0x05
   116bf:	00          	.byte	0x00
		return ATT_NOTIFICATION;
   116c0:	2003      	movs	r0, #3
   116c2:	4770      	bx	lr
   116c4:	2301      	movs	r3, #1
	switch (op) {
   116c6:	4a0f      	ldr	r2, [pc, #60]	; (11704 <att_op_get_type+0x6c>)
   116c8:	4083      	lsls	r3, r0
   116ca:	401a      	ands	r2, r3
   116cc:	b9c2      	cbnz	r2, 11700 <att_op_get_type+0x68>
   116ce:	4a0e      	ldr	r2, [pc, #56]	; (11708 <att_op_get_type+0x70>)
   116d0:	401a      	ands	r2, r3
	return ATT_UNKNOWN;
   116d2:	2a00      	cmp	r2, #0
   116d4:	bf14      	ite	ne
   116d6:	2001      	movne	r0, #1
   116d8:	2006      	moveq	r0, #6
   116da:	4770      	bx	lr
	switch (op) {
   116dc:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   116e0:	2b52      	cmp	r3, #82	; 0x52
   116e2:	d105      	bne.n	116f0 <att_op_get_type+0x58>
		return ATT_COMMAND;
   116e4:	2000      	movs	r0, #0
}
   116e6:	4770      	bx	lr
		return ATT_REQUEST;
   116e8:	2001      	movs	r0, #1
   116ea:	4770      	bx	lr
		return ATT_INDICATION;
   116ec:	2005      	movs	r0, #5
   116ee:	4770      	bx	lr
		return ATT_COMMAND;
   116f0:	f010 0f40 	tst.w	r0, #64	; 0x40
   116f4:	bf0c      	ite	eq
   116f6:	2006      	moveq	r0, #6
   116f8:	2000      	movne	r0, #0
   116fa:	4770      	bx	lr
	switch (op) {
   116fc:	2004      	movs	r0, #4
   116fe:	4770      	bx	lr
		return ATT_RESPONSE;
   11700:	2002      	movs	r0, #2
   11702:	4770      	bx	lr
   11704:	028aaaaa 	.word	0x028aaaaa
   11708:	01455554 	.word	0x01455554

0001170c <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   1170c:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1170e:	3804      	subs	r0, #4
   11710:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   11712:	a901      	add	r1, sp, #4
   11714:	4802      	ldr	r0, [pc, #8]	; (11720 <bt_att_released+0x14>)
   11716:	f00d faae 	bl	1ec76 <k_mem_slab_free>
}
   1171a:	b003      	add	sp, #12
   1171c:	f85d fb04 	ldr.w	pc, [sp], #4
   11720:	200086ac 	.word	0x200086ac

00011724 <tx_meta_data_free>:
{
   11724:	b510      	push	{r4, lr}
   11726:	4604      	mov	r4, r0
	(void)memset(data, 0, sizeof(*data));
   11728:	2100      	movs	r1, #0
   1172a:	2214      	movs	r2, #20
   1172c:	f00a f8dc 	bl	1b8e8 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   11730:	4621      	mov	r1, r4
}
   11732:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
   11736:	4801      	ldr	r0, [pc, #4]	; (1173c <tx_meta_data_free+0x18>)
   11738:	f00d bb67 	b.w	1ee0a <k_queue_append>
   1173c:	20008754 	.word	0x20008754

00011740 <find_type_cb>:
{
   11740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11744:	b093      	sub	sp, #76	; 0x4c
	struct bt_att_chan *chan = data->chan;
   11746:	f8d2 a000 	ldr.w	sl, [r2]
{
   1174a:	af02      	add	r7, sp, #8
	struct bt_conn *conn = chan->chan.chan.conn;
   1174c:	f8da 3004 	ldr.w	r3, [sl, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   11750:	2500      	movs	r5, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   11752:	607b      	str	r3, [r7, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   11754:	f642 0301 	movw	r3, #10241	; 0x2801
{
   11758:	4680      	mov	r8, r0
   1175a:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1175c:	6800      	ldr	r0, [r0, #0]
   1175e:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   11762:	85fb      	strh	r3, [r7, #46]	; 0x2e
   11764:	f107 012c 	add.w	r1, r7, #44	; 0x2c
{
   11768:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1176a:	f00a f8f1 	bl	1b950 <bt_uuid_cmp>
   1176e:	2800      	cmp	r0, #0
   11770:	d072      	beq.n	11858 <find_type_cb+0x118>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   11772:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   11776:	f8d8 0000 	ldr.w	r0, [r8]
   1177a:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   1177e:	85fb      	strh	r3, [r7, #46]	; 0x2e
   11780:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   11784:	f00a f8e4 	bl	1b950 <bt_uuid_cmp>
   11788:	b138      	cbz	r0, 1179a <find_type_cb+0x5a>
		if (data->group &&
   1178a:	68a3      	ldr	r3, [r4, #8]
   1178c:	b11b      	cbz	r3, 11796 <find_type_cb+0x56>
   1178e:	885a      	ldrh	r2, [r3, #2]
   11790:	42b2      	cmp	r2, r6
   11792:	d200      	bcs.n	11796 <find_type_cb+0x56>
	data->group->end_handle = sys_cpu_to_le16(handle);
   11794:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   11796:	2001      	movs	r0, #1
   11798:	e009      	b.n	117ae <find_type_cb+0x6e>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1179a:	6861      	ldr	r1, [r4, #4]
   1179c:	4608      	mov	r0, r1
   1179e:	f00a fe18 	bl	1c3d2 <net_buf_frags_len>
   117a2:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   117a6:	1a1b      	subs	r3, r3, r0
   117a8:	2b03      	cmp	r3, #3
   117aa:	d804      	bhi.n	117b6 <find_type_cb+0x76>
		return BT_GATT_ITER_STOP;
   117ac:	2000      	movs	r0, #0
}
   117ae:	3744      	adds	r7, #68	; 0x44
   117b0:	46bd      	mov	sp, r7
   117b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   117b6:	4608      	mov	r0, r1
   117b8:	f00c f99e 	bl	1daf8 <net_buf_frag_last>
   117bc:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   117be:	6860      	ldr	r0, [r4, #4]
   117c0:	f00a fe07 	bl	1c3d2 <net_buf_frags_len>
   117c4:	f8ba b02a 	ldrh.w	fp, [sl, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   117c8:	f105 0908 	add.w	r9, r5, #8
   117cc:	ebab 0b00 	sub.w	fp, fp, r0
   117d0:	4648      	mov	r0, r9
   117d2:	f00c f9f7 	bl	1dbc4 <net_buf_simple_tailroom>
   117d6:	4558      	cmp	r0, fp
   117d8:	d941      	bls.n	1185e <find_type_cb+0x11e>
   117da:	6860      	ldr	r0, [r4, #4]
   117dc:	f00a fdf9 	bl	1c3d2 <net_buf_frags_len>
   117e0:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   117e4:	1a18      	subs	r0, r3, r0
	if (!len) {
   117e6:	b970      	cbnz	r0, 11806 <find_type_cb+0xc6>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   117e8:	6863      	ldr	r3, [r4, #4]
   117ea:	7998      	ldrb	r0, [r3, #6]
   117ec:	f003 fddc 	bl	153a8 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   117f0:	2200      	movs	r2, #0
   117f2:	2300      	movs	r3, #0
   117f4:	f00c f902 	bl	1d9fc <net_buf_alloc_fixed>
		if (!frag) {
   117f8:	4605      	mov	r5, r0
   117fa:	2800      	cmp	r0, #0
   117fc:	d0d6      	beq.n	117ac <find_type_cb+0x6c>
		net_buf_frag_add(data->buf, frag);
   117fe:	4601      	mov	r1, r0
   11800:	6860      	ldr	r0, [r4, #4]
   11802:	f00c f98a 	bl	1db1a <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   11806:	2300      	movs	r3, #0
   11808:	9300      	str	r3, [sp, #0]
   1180a:	4641      	mov	r1, r8
   1180c:	f8d8 a004 	ldr.w	sl, [r8, #4]
   11810:	2310      	movs	r3, #16
   11812:	6878      	ldr	r0, [r7, #4]
   11814:	f107 0208 	add.w	r2, r7, #8
   11818:	47d0      	blx	sl
	if (read < 0) {
   1181a:	f1b0 0800 	subs.w	r8, r0, #0
   1181e:	db1b      	blt.n	11858 <find_type_cb+0x118>
	if (read != data->value_len) {
   11820:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   11822:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   11824:	4542      	cmp	r2, r8
   11826:	d043      	beq.n	118b0 <find_type_cb+0x170>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   11828:	4601      	mov	r1, r0
   1182a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   1182e:	f00a f8bd 	bl	1b9ac <bt_uuid_create>
   11832:	b9c0      	cbnz	r0, 11866 <find_type_cb+0x126>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   11834:	466d      	mov	r5, sp
   11836:	b088      	sub	sp, #32
   11838:	7c23      	ldrb	r3, [r4, #16]
   1183a:	aa02      	add	r2, sp, #8
   1183c:	491f      	ldr	r1, [pc, #124]	; (118bc <find_type_cb+0x17c>)
   1183e:	6151      	str	r1, [r2, #20]
   11840:	491f      	ldr	r1, [pc, #124]	; (118c0 <find_type_cb+0x180>)
   11842:	e9c2 1306 	strd	r1, r3, [r2, #24]
			BT_WARN("Unable to create UUID: size %d", read);
   11846:	2304      	movs	r3, #4
   11848:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1184c:	481d      	ldr	r0, [pc, #116]	; (118c4 <find_type_cb+0x184>)
   1184e:	f842 3f10 	str.w	r3, [r2, #16]!
   11852:	f00a fea9 	bl	1c5a8 <z_log_msg_static_create.constprop.0>
   11856:	46ad      	mov	sp, r5
	data->group = NULL;
   11858:	2300      	movs	r3, #0
   1185a:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   1185c:	e79b      	b.n	11796 <find_type_cb+0x56>
	return net_buf_simple_tailroom(&buf->b);
   1185e:	4648      	mov	r0, r9
   11860:	f00c f9b0 	bl	1dbc4 <net_buf_simple_tailroom>
   11864:	e7bf      	b.n	117e6 <find_type_cb+0xa6>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   11866:	fa5f f288 	uxtb.w	r2, r8
   1186a:	f107 0108 	add.w	r1, r7, #8
   1186e:	f107 0018 	add.w	r0, r7, #24
   11872:	f00a f89b 	bl	1b9ac <bt_uuid_create>
   11876:	b940      	cbnz	r0, 1188a <find_type_cb+0x14a>
			BT_WARN("Unable to create UUID: size %d", read);
   11878:	466d      	mov	r5, sp
   1187a:	b088      	sub	sp, #32
   1187c:	aa02      	add	r2, sp, #8
   1187e:	4b12      	ldr	r3, [pc, #72]	; (118c8 <find_type_cb+0x188>)
   11880:	6153      	str	r3, [r2, #20]
   11882:	4b0f      	ldr	r3, [pc, #60]	; (118c0 <find_type_cb+0x180>)
   11884:	e9c2 3806 	strd	r3, r8, [r2, #24]
   11888:	e7dd      	b.n	11846 <find_type_cb+0x106>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   1188a:	f107 0118 	add.w	r1, r7, #24
   1188e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   11892:	f00a f85d 	bl	1b950 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   11896:	2800      	cmp	r0, #0
   11898:	d1de      	bne.n	11858 <find_type_cb+0x118>
	data->err = 0x00;
   1189a:	2300      	movs	r3, #0
	return net_buf_simple_add(&buf->b, len);
   1189c:	2104      	movs	r1, #4
   1189e:	7463      	strb	r3, [r4, #17]
   118a0:	f105 0008 	add.w	r0, r5, #8
   118a4:	f00c f94a 	bl	1db3c <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   118a8:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   118aa:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   118ac:	68a3      	ldr	r3, [r4, #8]
   118ae:	e771      	b.n	11794 <find_type_cb+0x54>
	} else if (memcmp(data->value, uuid, read)) {
   118b0:	f107 0108 	add.w	r1, r7, #8
   118b4:	f009 fffd 	bl	1b8b2 <memcmp>
   118b8:	e7ed      	b.n	11896 <find_type_cb+0x156>
   118ba:	bf00      	nop
   118bc:	00022b33 	.word	0x00022b33
   118c0:	00022d58 	.word	0x00022d58
   118c4:	0001fc3c 	.word	0x0001fc3c
   118c8:	00022b56 	.word	0x00022b56

000118cc <chan_send>:
{
   118cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   118d0:	b082      	sub	sp, #8
   118d2:	4606      	mov	r6, r0
   118d4:	460c      	mov	r4, r1
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   118d6:	f8d1 9014 	ldr.w	r9, [r1, #20]
	hdr = (void *)buf->data;
   118da:	688b      	ldr	r3, [r1, #8]
{
   118dc:	af02      	add	r7, sp, #8
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   118de:	2102      	movs	r1, #2
   118e0:	3090      	adds	r0, #144	; 0x90
   118e2:	f00a fd90 	bl	1c406 <atomic_test_bit>
   118e6:	2800      	cmp	r0, #0
   118e8:	d04a      	beq.n	11980 <chan_send+0xb4>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   118ea:	781b      	ldrb	r3, [r3, #0]
   118ec:	2bd2      	cmp	r3, #210	; 0xd2
   118ee:	d120      	bne.n	11932 <chan_send+0x66>
		err = bt_smp_sign(chan->att->conn, buf);
   118f0:	6833      	ldr	r3, [r6, #0]
   118f2:	4621      	mov	r1, r4
   118f4:	6818      	ldr	r0, [r3, #0]
   118f6:	f00b ffd1 	bl	1d89c <bt_smp_sign>
		if (err) {
   118fa:	4605      	mov	r5, r0
   118fc:	b1c8      	cbz	r0, 11932 <chan_send+0x66>
			BT_ERR("Error signing data");
   118fe:	466e      	mov	r6, sp
   11900:	b088      	sub	sp, #32
   11902:	aa02      	add	r2, sp, #8
   11904:	4b20      	ldr	r3, [pc, #128]	; (11988 <chan_send+0xbc>)
   11906:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1190a:	6153      	str	r3, [r2, #20]
   1190c:	4b1f      	ldr	r3, [pc, #124]	; (1198c <chan_send+0xc0>)
   1190e:	4820      	ldr	r0, [pc, #128]	; (11990 <chan_send+0xc4>)
   11910:	6193      	str	r3, [r2, #24]
   11912:	2303      	movs	r3, #3
   11914:	f842 3f10 	str.w	r3, [r2, #16]!
   11918:	f00a fe46 	bl	1c5a8 <z_log_msg_static_create.constprop.0>
   1191c:	46b5      	mov	sp, r6
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   1191e:	6960      	ldr	r0, [r4, #20]
   11920:	f7ff ff00 	bl	11724 <tx_meta_data_free>
			net_buf_unref(buf);
   11924:	4620      	mov	r0, r4
   11926:	f003 fe01 	bl	1552c <net_buf_unref>
}
   1192a:	4628      	mov	r0, r5
   1192c:	46bd      	mov	sp, r7
   1192e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	state->offset = net_buf_simple_headroom(buf);
   11932:	f104 0008 	add.w	r0, r4, #8
   11936:	f00c f941 	bl	1dbbc <net_buf_simple_headroom>
	state->len = buf->len;
   1193a:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
	data->att_chan = chan;
   1193e:	f8c9 6000 	str.w	r6, [r9]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   11942:	6833      	ldr	r3, [r6, #0]
	state->offset = net_buf_simple_headroom(buf);
   11944:	4680      	mov	r8, r0
   11946:	681d      	ldr	r5, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   11948:	68a3      	ldr	r3, [r4, #8]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1194a:	2104      	movs	r1, #4
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   1194c:	7818      	ldrb	r0, [r3, #0]
   1194e:	f7ff fea3 	bl	11698 <att_op_get_type>
	switch (op_type) {
   11952:	2805      	cmp	r0, #5
   11954:	bf98      	it	ls
   11956:	4b0f      	ldrls	r3, [pc, #60]	; (11994 <chan_send+0xc8>)
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   11958:	4622      	mov	r2, r4
   1195a:	bf94      	ite	ls
   1195c:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   11960:	4b0d      	ldrhi	r3, [pc, #52]	; (11998 <chan_send+0xcc>)
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   11962:	4628      	mov	r0, r5
   11964:	f8cd 9000 	str.w	r9, [sp]
   11968:	f00a fcfd 	bl	1c366 <bt_l2cap_send_cb>
	if (err) {
   1196c:	4605      	mov	r5, r0
   1196e:	2800      	cmp	r0, #0
   11970:	d0db      	beq.n	1192a <chan_send+0x5e>
	buf->data = buf->__buf + state->offset;
   11972:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
   11974:	f8a4 a00c 	strh.w	sl, [r4, #12]
	buf->data = buf->__buf + state->offset;
   11978:	fa13 f388 	uxtah	r3, r3, r8
   1197c:	60a3      	str	r3, [r4, #8]
}
   1197e:	e7d4      	b.n	1192a <chan_send+0x5e>
		return -EINVAL;
   11980:	f06f 0515 	mvn.w	r5, #21
   11984:	e7d1      	b.n	1192a <chan_send+0x5e>
   11986:	bf00      	nop
   11988:	00022b79 	.word	0x00022b79
   1198c:	00022d80 	.word	0x00022d80
   11990:	0001fc3c 	.word	0x0001fc3c
   11994:	00020344 	.word	0x00020344
   11998:	0001c98d 	.word	0x0001c98d

0001199c <att_get>:
{
   1199c:	b598      	push	{r3, r4, r7, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1199e:	7b43      	ldrb	r3, [r0, #13]
{
   119a0:	af00      	add	r7, sp, #0
	if (conn->state != BT_CONN_CONNECTED) {
   119a2:	2b07      	cmp	r3, #7
   119a4:	d012      	beq.n	119cc <att_get+0x30>
		BT_WARN("Not connected");
   119a6:	466c      	mov	r4, sp
   119a8:	b088      	sub	sp, #32
   119aa:	466a      	mov	r2, sp
   119ac:	4b11      	ldr	r3, [pc, #68]	; (119f4 <att_get+0x58>)
   119ae:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   119b2:	6153      	str	r3, [r2, #20]
   119b4:	4b10      	ldr	r3, [pc, #64]	; (119f8 <att_get+0x5c>)
   119b6:	6193      	str	r3, [r2, #24]
   119b8:	2303      	movs	r3, #3
   119ba:	f842 3f10 	str.w	r3, [r2, #16]!
		BT_ERR("Unable to find ATT channel");
   119be:	480f      	ldr	r0, [pc, #60]	; (119fc <att_get+0x60>)
   119c0:	f00a fdf2 	bl	1c5a8 <z_log_msg_static_create.constprop.0>
		return NULL;
   119c4:	2000      	movs	r0, #0
   119c6:	46a5      	mov	sp, r4
}
   119c8:	46bd      	mov	sp, r7
   119ca:	bd98      	pop	{r3, r4, r7, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   119cc:	2104      	movs	r1, #4
   119ce:	f00a fcec 	bl	1c3aa <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   119d2:	b960      	cbnz	r0, 119ee <att_get+0x52>
		BT_ERR("Unable to find ATT channel");
   119d4:	466c      	mov	r4, sp
   119d6:	b088      	sub	sp, #32
   119d8:	466a      	mov	r2, sp
   119da:	4b09      	ldr	r3, [pc, #36]	; (11a00 <att_get+0x64>)
   119dc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   119e0:	6153      	str	r3, [r2, #20]
   119e2:	4b05      	ldr	r3, [pc, #20]	; (119f8 <att_get+0x5c>)
   119e4:	6193      	str	r3, [r2, #24]
   119e6:	2303      	movs	r3, #3
   119e8:	f842 3f10 	str.w	r3, [r2, #16]!
   119ec:	e7e7      	b.n	119be <att_get+0x22>
	return att_chan->att;
   119ee:	f850 0c04 	ldr.w	r0, [r0, #-4]
   119f2:	e7e9      	b.n	119c8 <att_get+0x2c>
   119f4:	00022b90 	.word	0x00022b90
   119f8:	00022da5 	.word	0x00022da5
   119fc:	0001fc3c 	.word	0x0001fc3c
   11a00:	00022ba2 	.word	0x00022ba2

00011a04 <bt_att_connected>:
{
   11a04:	b510      	push	{r4, lr}
   11a06:	4604      	mov	r4, r0
   11a08:	f100 038c 	add.w	r3, r0, #140	; 0x8c
   11a0c:	e8d3 1fef 	ldaex	r1, [r3]
   11a10:	f041 0104 	orr.w	r1, r1, #4
   11a14:	e8c3 1fe2 	stlex	r2, r1, [r3]
   11a18:	2a00      	cmp	r2, #0
   11a1a:	d1f7      	bne.n	11a0c <bt_att_connected+0x8>
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   11a1c:	2317      	movs	r3, #23
	att_chan_mtu_updated(att_chan);
   11a1e:	1f20      	subs	r0, r4, #4
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   11a20:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   11a22:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   11a24:	f00a fd7d 	bl	1c522 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   11a28:	f104 00ac 	add.w	r0, r4, #172	; 0xac
   11a2c:	4903      	ldr	r1, [pc, #12]	; (11a3c <bt_att_connected+0x38>)
   11a2e:	f00d fb06 	bl	1f03e <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   11a32:	6820      	ldr	r0, [r4, #0]
}
   11a34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
   11a38:	f001 bde8 	b.w	1360c <bt_gatt_connected>
   11a3c:	00012769 	.word	0x00012769

00011a40 <read_group_cb>:
{
   11a40:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   11a44:	f04f 0800 	mov.w	r8, #0
   11a48:	f44f 5320 	mov.w	r3, #10240	; 0x2800
{
   11a4c:	4605      	mov	r5, r0
   11a4e:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   11a50:	6800      	ldr	r0, [r0, #0]
   11a52:	a902      	add	r1, sp, #8
{
   11a54:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   11a56:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   11a58:	f88d 8008 	strb.w	r8, [sp, #8]
   11a5c:	f8ad 300a 	strh.w	r3, [sp, #10]
   11a60:	f009 ff76 	bl	1b950 <bt_uuid_cmp>
   11a64:	b1a0      	cbz	r0, 11a90 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   11a66:	f642 0301 	movw	r3, #10241	; 0x2801
   11a6a:	6828      	ldr	r0, [r5, #0]
   11a6c:	a903      	add	r1, sp, #12
   11a6e:	f88d 800c 	strb.w	r8, [sp, #12]
   11a72:	f8ad 300e 	strh.w	r3, [sp, #14]
   11a76:	f009 ff6b 	bl	1b950 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   11a7a:	b148      	cbz	r0, 11a90 <read_group_cb+0x50>
		if (data->group &&
   11a7c:	6923      	ldr	r3, [r4, #16]
   11a7e:	b11b      	cbz	r3, 11a88 <read_group_cb+0x48>
   11a80:	885a      	ldrh	r2, [r3, #2]
   11a82:	42b2      	cmp	r2, r6
   11a84:	d200      	bcs.n	11a88 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   11a86:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   11a88:	2001      	movs	r0, #1
}
   11a8a:	b004      	add	sp, #16
   11a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   11a90:	6861      	ldr	r1, [r4, #4]
   11a92:	6828      	ldr	r0, [r5, #0]
   11a94:	f009 ff5c 	bl	1b950 <bt_uuid_cmp>
   11a98:	b110      	cbz	r0, 11aa0 <read_group_cb+0x60>
		data->group = NULL;
   11a9a:	2300      	movs	r3, #0
   11a9c:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   11a9e:	e7f3      	b.n	11a88 <read_group_cb+0x48>
	if (data->rsp->len &&
   11aa0:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   11aa2:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   11aa4:	781a      	ldrb	r2, [r3, #0]
   11aa6:	b132      	cbz	r2, 11ab6 <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   11aa8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   11aaa:	8981      	ldrh	r1, [r0, #12]
   11aac:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   11aae:	4293      	cmp	r3, r2
   11ab0:	da01      	bge.n	11ab6 <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
   11ab2:	2000      	movs	r0, #0
   11ab4:	e7e9      	b.n	11a8a <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
   11ab6:	2104      	movs	r1, #4
   11ab8:	3008      	adds	r0, #8
   11aba:	f00c f83f 	bl	1db3c <net_buf_simple_add>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   11abe:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   11ac0:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   11ac2:	6923      	ldr	r3, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   11ac4:	4629      	mov	r1, r5
	data->group->end_handle = sys_cpu_to_le16(handle);
   11ac6:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   11ac8:	4b07      	ldr	r3, [pc, #28]	; (11ae8 <read_group_cb+0xa8>)
   11aca:	9401      	str	r4, [sp, #4]
   11acc:	9300      	str	r3, [sp, #0]
   11ace:	4638      	mov	r0, r7
   11ad0:	2300      	movs	r3, #0
   11ad2:	68a2      	ldr	r2, [r4, #8]
   11ad4:	f00a fdac 	bl	1c630 <att_chan_read>
	if (read < 0) {
   11ad8:	2800      	cmp	r0, #0
   11ada:	dbea      	blt.n	11ab2 <read_group_cb+0x72>
	if (!data->group) {
   11adc:	6920      	ldr	r0, [r4, #16]
   11ade:	3800      	subs	r0, #0
   11ae0:	bf18      	it	ne
   11ae2:	2001      	movne	r0, #1
   11ae4:	e7d1      	b.n	11a8a <read_group_cb+0x4a>
   11ae6:	bf00      	nop
   11ae8:	0001c589 	.word	0x0001c589

00011aec <read_type_cb>:
{
   11aec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   11af0:	6817      	ldr	r7, [r2, #0]
{
   11af2:	4605      	mov	r5, r0
   11af4:	4688      	mov	r8, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   11af6:	6800      	ldr	r0, [r0, #0]
   11af8:	6851      	ldr	r1, [r2, #4]
{
   11afa:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   11afc:	687e      	ldr	r6, [r7, #4]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   11afe:	f009 ff27 	bl	1b950 <bt_uuid_cmp>
   11b02:	4681      	mov	r9, r0
   11b04:	2800      	cmp	r0, #0
   11b06:	d13c      	bne.n	11b82 <read_type_cb+0x96>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   11b08:	4630      	mov	r0, r6
   11b0a:	2295      	movs	r2, #149	; 0x95
   11b0c:	4629      	mov	r1, r5
   11b0e:	f00b fae3 	bl	1d0d8 <bt_gatt_check_perm>
   11b12:	4606      	mov	r6, r0
   11b14:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   11b16:	b140      	cbz	r0, 11b2a <read_type_cb+0x3e>
		if (data->rsp->len) {
   11b18:	68e3      	ldr	r3, [r4, #12]
   11b1a:	781b      	ldrb	r3, [r3, #0]
   11b1c:	b10b      	cbz	r3, 11b22 <read_type_cb+0x36>
			data->err = 0x00;
   11b1e:	f884 9014 	strb.w	r9, [r4, #20]
		return BT_GATT_ITER_STOP;
   11b22:	2000      	movs	r0, #0
}
   11b24:	b003      	add	sp, #12
   11b26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   11b2a:	68a0      	ldr	r0, [r4, #8]
   11b2c:	f00b ffe4 	bl	1daf8 <net_buf_frag_last>
   11b30:	2102      	movs	r1, #2
   11b32:	3008      	adds	r0, #8
   11b34:	f00c f802 	bl	1db3c <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   11b38:	4b13      	ldr	r3, [pc, #76]	; (11b88 <read_type_cb+0x9c>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   11b3a:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   11b3c:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   11b40:	9300      	str	r3, [sp, #0]
   11b42:	9401      	str	r4, [sp, #4]
   11b44:	4633      	mov	r3, r6
   11b46:	4629      	mov	r1, r5
   11b48:	4638      	mov	r0, r7
   11b4a:	68a2      	ldr	r2, [r4, #8]
   11b4c:	f00a fd70 	bl	1c630 <att_chan_read>
	if (read < 0) {
   11b50:	2800      	cmp	r0, #0
   11b52:	da07      	bge.n	11b64 <read_type_cb+0x78>
	if (err < 0 && err >= -0xff) {
   11b54:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   11b58:	bf32      	itee	cc
   11b5a:	200e      	movcc	r0, #14
		return -err;
   11b5c:	4240      	negcs	r0, r0
   11b5e:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(read);
   11b60:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   11b62:	e7de      	b.n	11b22 <read_type_cb+0x36>
	if (!data->item) {
   11b64:	6923      	ldr	r3, [r4, #16]
   11b66:	2b00      	cmp	r3, #0
   11b68:	d0db      	beq.n	11b22 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   11b6a:	68a0      	ldr	r0, [r4, #8]
   11b6c:	f00a fc31 	bl	1c3d2 <net_buf_frags_len>
   11b70:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   11b72:	1a18      	subs	r0, r3, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   11b74:	68e3      	ldr	r3, [r4, #12]
   11b76:	781b      	ldrb	r3, [r3, #0]
   11b78:	4298      	cmp	r0, r3
   11b7a:	bf94      	ite	ls
   11b7c:	2000      	movls	r0, #0
   11b7e:	2001      	movhi	r0, #1
   11b80:	e7d0      	b.n	11b24 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   11b82:	2001      	movs	r0, #1
   11b84:	e7ce      	b.n	11b24 <read_type_cb+0x38>
   11b86:	bf00      	nop
   11b88:	0001c3e3 	.word	0x0001c3e3

00011b8c <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   11b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11b90:	b082      	sub	sp, #8
   11b92:	af00      	add	r7, sp, #0
   11b94:	4604      	mov	r4, r0
   11b96:	460e      	mov	r6, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   11b98:	2200      	movs	r2, #0
   11b9a:	2300      	movs	r3, #0
   11b9c:	4639      	mov	r1, r7
   11b9e:	483a      	ldr	r0, [pc, #232]	; (11c88 <bt_att_accept+0xfc>)
   11ba0:	f006 fe5c 	bl	1885c <k_mem_slab_alloc>
   11ba4:	4605      	mov	r5, r0
   11ba6:	b1b8      	cbz	r0, 11bd8 <bt_att_accept+0x4c>
		BT_ERR("No available ATT context for conn %p", conn);
   11ba8:	466d      	mov	r5, sp
   11baa:	b088      	sub	sp, #32
   11bac:	466a      	mov	r2, sp
   11bae:	4b37      	ldr	r3, [pc, #220]	; (11c8c <bt_att_accept+0x100>)
   11bb0:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   11bb4:	6153      	str	r3, [r2, #20]
   11bb6:	4b36      	ldr	r3, [pc, #216]	; (11c90 <bt_att_accept+0x104>)
   11bb8:	4836      	ldr	r0, [pc, #216]	; (11c94 <bt_att_accept+0x108>)
   11bba:	e9c2 3406 	strd	r3, r4, [r2, #24]
   11bbe:	2304      	movs	r3, #4
   11bc0:	f842 3f10 	str.w	r3, [r2, #16]!
   11bc4:	f00a fcf0 	bl	1c5a8 <z_log_msg_static_create.constprop.0>
   11bc8:	46ad      	mov	sp, r5
		return -ENOMEM;
   11bca:	f06f 050b 	mvn.w	r5, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   11bce:	4628      	mov	r0, r5
   11bd0:	3708      	adds	r7, #8
   11bd2:	46bd      	mov	sp, r7
   11bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_z_current_get();
   11bd8:	f007 fd6a 	bl	196b0 <z_impl_z_current_get>
	att_handle_rsp_thread = k_current_get();
   11bdc:	4b2e      	ldr	r3, [pc, #184]	; (11c98 <bt_att_accept+0x10c>)
	(void)memset(att, 0, sizeof(*att));
   11bde:	4629      	mov	r1, r5
	att_handle_rsp_thread = k_current_get();
   11be0:	6018      	str	r0, [r3, #0]
	(void)memset(att, 0, sizeof(*att));
   11be2:	222c      	movs	r2, #44	; 0x2c
   11be4:	6838      	ldr	r0, [r7, #0]
   11be6:	f009 fe7f 	bl	1b8e8 <memset>
	att->conn = conn;
   11bea:	683b      	ldr	r3, [r7, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   11bec:	2200      	movs	r2, #0
	att->conn = conn;
   11bee:	601c      	str	r4, [r3, #0]
	sys_slist_init(&att->reqs);
   11bf0:	683c      	ldr	r4, [r7, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   11bf2:	2300      	movs	r3, #0
	list->tail = NULL;
   11bf4:	e9c4 5501 	strd	r5, r5, [r4, #4]
   11bf8:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
   11bfc:	4827      	ldr	r0, [pc, #156]	; (11c9c <bt_att_accept+0x110>)
   11bfe:	1d39      	adds	r1, r7, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   11c00:	607d      	str	r5, [r7, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   11c02:	f006 fe2b 	bl	1885c <k_mem_slab_alloc>
   11c06:	4605      	mov	r5, r0
   11c08:	b190      	cbz	r0, 11c30 <bt_att_accept+0xa4>
		BT_WARN("No available ATT channel for conn %p", att->conn);
   11c0a:	6823      	ldr	r3, [r4, #0]
   11c0c:	466c      	mov	r4, sp
   11c0e:	b088      	sub	sp, #32
   11c10:	466a      	mov	r2, sp
   11c12:	4923      	ldr	r1, [pc, #140]	; (11ca0 <bt_att_accept+0x114>)
   11c14:	481f      	ldr	r0, [pc, #124]	; (11c94 <bt_att_accept+0x108>)
   11c16:	6151      	str	r1, [r2, #20]
   11c18:	4922      	ldr	r1, [pc, #136]	; (11ca4 <bt_att_accept+0x118>)
   11c1a:	e9c2 1306 	strd	r1, r3, [r2, #24]
   11c1e:	2304      	movs	r3, #4
   11c20:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   11c24:	f842 3f10 	str.w	r3, [r2, #16]!
   11c28:	f00a fcbe 	bl	1c5a8 <z_log_msg_static_create.constprop.0>
   11c2c:	46a5      	mov	sp, r4
	if (!chan) {
   11c2e:	e7cc      	b.n	11bca <bt_att_accept+0x3e>
	(void)memset(chan, 0, sizeof(*chan));
   11c30:	4601      	mov	r1, r0
   11c32:	22e8      	movs	r2, #232	; 0xe8
   11c34:	6878      	ldr	r0, [r7, #4]
   11c36:	f009 fe57 	bl	1b8e8 <memset>
	chan->chan.chan.ops = &ops;
   11c3a:	6878      	ldr	r0, [r7, #4]
   11c3c:	4b1a      	ldr	r3, [pc, #104]	; (11ca8 <bt_att_accept+0x11c>)
   11c3e:	6083      	str	r3, [r0, #8]
	z_impl_k_queue_init(queue);
   11c40:	3098      	adds	r0, #152	; 0x98
   11c42:	f00d f8d6 	bl	1edf2 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   11c46:	687b      	ldr	r3, [r7, #4]
   11c48:	3390      	adds	r3, #144	; 0x90
   11c4a:	e8d3 2fef 	ldaex	r2, [r3]
   11c4e:	e8c3 5fe1 	stlex	r1, r5, [r3]
   11c52:	2900      	cmp	r1, #0
   11c54:	d1f9      	bne.n	11c4a <bt_att_accept+0xbe>
	chan->att = att;
   11c56:	687b      	ldr	r3, [r7, #4]
   11c58:	601c      	str	r4, [r3, #0]
	if (sys_slist_is_empty(&att->chans)) {
   11c5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
	att_chan_attach(att, chan);
   11c5c:	f8d7 8004 	ldr.w	r8, [r7, #4]
	if (sys_slist_is_empty(&att->chans)) {
   11c60:	b91b      	cbnz	r3, 11c6a <bt_att_accept+0xde>
   11c62:	f104 000c 	add.w	r0, r4, #12
   11c66:	f00d f8c4 	bl	1edf2 <z_impl_k_queue_init>
	return list->head;
   11c6a:	6a62      	ldr	r2, [r4, #36]	; 0x24
	sys_slist_prepend(&att->chans, &chan->node);
   11c6c:	f108 03e0 	add.w	r3, r8, #224	; 0xe0
	parent->next = child;
   11c70:	f8c8 20e0 	str.w	r2, [r8, #224]	; 0xe0
Z_GENLIST_PREPEND(slist, snode)
   11c74:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	list->head = node;
   11c76:	6263      	str	r3, [r4, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
   11c78:	b902      	cbnz	r2, 11c7c <bt_att_accept+0xf0>
	list->tail = node;
   11c7a:	62a3      	str	r3, [r4, #40]	; 0x28
	return chan;
   11c7c:	687b      	ldr	r3, [r7, #4]
	if (!chan) {
   11c7e:	2b00      	cmp	r3, #0
   11c80:	d0a3      	beq.n	11bca <bt_att_accept+0x3e>
	*ch = &chan->chan.chan;
   11c82:	3304      	adds	r3, #4
   11c84:	6033      	str	r3, [r6, #0]
	return 0;
   11c86:	e7a2      	b.n	11bce <bt_att_accept+0x42>
   11c88:	20008690 	.word	0x20008690
   11c8c:	00022bc1 	.word	0x00022bc1
   11c90:	00022d97 	.word	0x00022d97
   11c94:	0001fc3c 	.word	0x0001fc3c
   11c98:	20009cc0 	.word	0x20009cc0
   11c9c:	200086ac 	.word	0x200086ac
   11ca0:	00022bea 	.word	0x00022bea
   11ca4:	00022d8a 	.word	0x00022d8a
   11ca8:	200083ec 	.word	0x200083ec

00011cac <bt_att_chan_create_pdu>:
{
   11cac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   11cb0:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   11cb2:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   11cb4:	1c53      	adds	r3, r2, #1
   11cb6:	428b      	cmp	r3, r1
{
   11cb8:	af00      	add	r7, sp, #0
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   11cba:	d916      	bls.n	11cea <bt_att_chan_create_pdu+0x3e>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   11cbc:	466c      	mov	r4, sp
   11cbe:	b08a      	sub	sp, #40	; 0x28
   11cc0:	466a      	mov	r2, sp
   11cc2:	482e      	ldr	r0, [pc, #184]	; (11d7c <bt_att_chan_create_pdu+0xd0>)
   11cc4:	6213      	str	r3, [r2, #32]
   11cc6:	6150      	str	r0, [r2, #20]
   11cc8:	482d      	ldr	r0, [pc, #180]	; (11d80 <bt_att_chan_create_pdu+0xd4>)
   11cca:	2305      	movs	r3, #5
   11ccc:	e9c2 0106 	strd	r0, r1, [r2, #24]
   11cd0:	f44f 5122 	mov.w	r1, #10368	; 0x2880
   11cd4:	f842 3f10 	str.w	r3, [r2, #16]!
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   11cd8:	482a      	ldr	r0, [pc, #168]	; (11d84 <bt_att_chan_create_pdu+0xd8>)
   11cda:	f00a fc65 	bl	1c5a8 <z_log_msg_static_create.constprop.0>
   11cde:	46a5      	mov	sp, r4
		return NULL;
   11ce0:	2400      	movs	r4, #0
}
   11ce2:	4620      	mov	r0, r4
   11ce4:	46bd      	mov	sp, r7
   11ce6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	switch (att_op_get_type(op)) {
   11cea:	4628      	mov	r0, r5
   11cec:	f7ff fcd4 	bl	11698 <att_op_get_type>
   11cf0:	2802      	cmp	r0, #2
   11cf2:	d01b      	beq.n	11d2c <bt_att_chan_create_pdu+0x80>
   11cf4:	2804      	cmp	r0, #4
   11cf6:	d019      	beq.n	11d2c <bt_att_chan_create_pdu+0x80>
		timeout = K_FOREVER;
   11cf8:	f04f 38ff 	mov.w	r8, #4294967295
   11cfc:	f04f 39ff 	mov.w	r9, #4294967295
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   11d00:	2100      	movs	r1, #0
   11d02:	4642      	mov	r2, r8
   11d04:	464b      	mov	r3, r9
   11d06:	4608      	mov	r0, r1
   11d08:	f00a fb2a 	bl	1c360 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   11d0c:	4604      	mov	r4, r0
   11d0e:	b990      	cbnz	r0, 11d36 <bt_att_chan_create_pdu+0x8a>
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   11d10:	466c      	mov	r4, sp
   11d12:	b088      	sub	sp, #32
   11d14:	466a      	mov	r2, sp
   11d16:	4b1c      	ldr	r3, [pc, #112]	; (11d88 <bt_att_chan_create_pdu+0xdc>)
   11d18:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   11d1c:	6153      	str	r3, [r2, #20]
   11d1e:	4b18      	ldr	r3, [pc, #96]	; (11d80 <bt_att_chan_create_pdu+0xd4>)
   11d20:	e9c2 3506 	strd	r3, r5, [r2, #24]
   11d24:	2304      	movs	r3, #4
   11d26:	f842 3f10 	str.w	r3, [r2, #16]!
   11d2a:	e7d5      	b.n	11cd8 <bt_att_chan_create_pdu+0x2c>
	switch (att_op_get_type(op)) {
   11d2c:	f44f 2870 	mov.w	r8, #983040	; 0xf0000
   11d30:	f04f 0900 	mov.w	r9, #0
   11d34:	e7e4      	b.n	11d00 <bt_att_chan_create_pdu+0x54>
	return z_impl_k_queue_get(queue, timeout);
   11d36:	4815      	ldr	r0, [pc, #84]	; (11d8c <bt_att_chan_create_pdu+0xe0>)
   11d38:	4642      	mov	r2, r8
   11d3a:	464b      	mov	r3, r9
   11d3c:	f006 ff46 	bl	18bcc <z_impl_k_queue_get>
	if (!data) {
   11d40:	b998      	cbnz	r0, 11d6a <bt_att_chan_create_pdu+0xbe>
		BT_WARN("Unable to allocate ATT TX meta");
   11d42:	466d      	mov	r5, sp
   11d44:	b088      	sub	sp, #32
   11d46:	466a      	mov	r2, sp
   11d48:	4b11      	ldr	r3, [pc, #68]	; (11d90 <bt_att_chan_create_pdu+0xe4>)
   11d4a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   11d4e:	6153      	str	r3, [r2, #20]
   11d50:	4b0b      	ldr	r3, [pc, #44]	; (11d80 <bt_att_chan_create_pdu+0xd4>)
   11d52:	480c      	ldr	r0, [pc, #48]	; (11d84 <bt_att_chan_create_pdu+0xd8>)
   11d54:	6193      	str	r3, [r2, #24]
   11d56:	2303      	movs	r3, #3
   11d58:	f842 3f10 	str.w	r3, [r2, #16]!
   11d5c:	f00a fc24 	bl	1c5a8 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   11d60:	4620      	mov	r0, r4
   11d62:	46ad      	mov	sp, r5
   11d64:	f003 fbe2 	bl	1552c <net_buf_unref>
		return NULL;
   11d68:	e7ba      	b.n	11ce0 <bt_att_chan_create_pdu+0x34>
	bt_att_tx_meta_data(buf) = data;
   11d6a:	6160      	str	r0, [r4, #20]
   11d6c:	2101      	movs	r1, #1
   11d6e:	f104 0008 	add.w	r0, r4, #8
   11d72:	f00b fee3 	bl	1db3c <net_buf_simple_add>
	hdr->code = op;
   11d76:	7005      	strb	r5, [r0, #0]
	return buf;
   11d78:	e7b3      	b.n	11ce2 <bt_att_chan_create_pdu+0x36>
   11d7a:	bf00      	nop
   11d7c:	00022c13 	.word	0x00022c13
   11d80:	00022dbf 	.word	0x00022dbf
   11d84:	0001fc3c 	.word	0x0001fc3c
   11d88:	00022973 	.word	0x00022973
   11d8c:	20008754 	.word	0x20008754
   11d90:	00022c3c 	.word	0x00022c3c

00011d94 <bt_att_recv>:
{
   11d94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (buf->len < sizeof(*hdr)) {
   11d98:	898b      	ldrh	r3, [r1, #12]
{
   11d9a:	4605      	mov	r5, r0
   11d9c:	4689      	mov	r9, r1
   11d9e:	af00      	add	r7, sp, #0
	if (buf->len < sizeof(*hdr)) {
   11da0:	b99b      	cbnz	r3, 11dca <bt_att_recv+0x36>
		BT_ERR("Too small ATT PDU received");
   11da2:	466c      	mov	r4, sp
   11da4:	b088      	sub	sp, #32
   11da6:	466a      	mov	r2, sp
   11da8:	4b52      	ldr	r3, [pc, #328]	; (11ef4 <bt_att_recv+0x160>)
   11daa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11dae:	6153      	str	r3, [r2, #20]
   11db0:	4b51      	ldr	r3, [pc, #324]	; (11ef8 <bt_att_recv+0x164>)
   11db2:	6193      	str	r3, [r2, #24]
   11db4:	2303      	movs	r3, #3
   11db6:	f842 3f10 	str.w	r3, [r2, #16]!
			BT_WARN("Ignoring unexpected request");
   11dba:	4850      	ldr	r0, [pc, #320]	; (11efc <bt_att_recv+0x168>)
   11dbc:	f00a fbf4 	bl	1c5a8 <z_log_msg_static_create.constprop.0>
   11dc0:	46a5      	mov	sp, r4
}
   11dc2:	2000      	movs	r0, #0
   11dc4:	46bd      	mov	sp, r7
   11dc6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   11dca:	2101      	movs	r1, #1
   11dcc:	f109 0008 	add.w	r0, r9, #8
   11dd0:	f00b fee4 	bl	1db9c <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   11dd4:	f855 3c04 	ldr.w	r3, [r5, #-4]
   11dd8:	4604      	mov	r4, r0
   11dda:	2b00      	cmp	r3, #0
   11ddc:	d0f1      	beq.n	11dc2 <bt_att_recv+0x2e>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   11dde:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   11de0:	7801      	ldrb	r1, [r0, #0]
   11de2:	f8df b11c 	ldr.w	fp, [pc, #284]	; 11f00 <bt_att_recv+0x16c>
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   11de6:	1f2e      	subs	r6, r5, #4
		if (hdr->code == handlers[i].op) {
   11de8:	f81b 0033 	ldrb.w	r0, [fp, r3, lsl #3]
   11dec:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
   11df0:	4288      	cmp	r0, r1
   11df2:	eb0b 02c3 	add.w	r2, fp, r3, lsl #3
   11df6:	d118      	bne.n	11e2a <bt_att_recv+0x96>
		if (handler->type == ATT_REQUEST &&
   11df8:	f892 8002 	ldrb.w	r8, [r2, #2]
   11dfc:	f1b8 0f01 	cmp.w	r8, #1
   11e00:	d137      	bne.n	11e72 <bt_att_recv+0xde>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   11e02:	2100      	movs	r1, #0
   11e04:	f105 008c 	add.w	r0, r5, #140	; 0x8c
   11e08:	f00a fcb8 	bl	1c77c <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   11e0c:	2800      	cmp	r0, #0
   11e0e:	d03e      	beq.n	11e8e <bt_att_recv+0xfa>
			BT_WARN("Ignoring unexpected request");
   11e10:	466c      	mov	r4, sp
   11e12:	b088      	sub	sp, #32
   11e14:	466a      	mov	r2, sp
   11e16:	4b3b      	ldr	r3, [pc, #236]	; (11f04 <bt_att_recv+0x170>)
   11e18:	6153      	str	r3, [r2, #20]
   11e1a:	4b37      	ldr	r3, [pc, #220]	; (11ef8 <bt_att_recv+0x164>)
   11e1c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   11e20:	6193      	str	r3, [r2, #24]
   11e22:	2303      	movs	r3, #3
   11e24:	f842 3f10 	str.w	r3, [r2, #16]!
   11e28:	e7c7      	b.n	11dba <bt_att_recv+0x26>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   11e2a:	3301      	adds	r3, #1
   11e2c:	2b0e      	cmp	r3, #14
   11e2e:	d1db      	bne.n	11de8 <bt_att_recv+0x54>
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   11e30:	466d      	mov	r5, sp
   11e32:	b088      	sub	sp, #32
   11e34:	466a      	mov	r2, sp
   11e36:	4b34      	ldr	r3, [pc, #208]	; (11f08 <bt_att_recv+0x174>)
   11e38:	4830      	ldr	r0, [pc, #192]	; (11efc <bt_att_recv+0x168>)
   11e3a:	6153      	str	r3, [r2, #20]
   11e3c:	4b2e      	ldr	r3, [pc, #184]	; (11ef8 <bt_att_recv+0x164>)
   11e3e:	e9c2 3106 	strd	r3, r1, [r2, #24]
   11e42:	2304      	movs	r3, #4
   11e44:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   11e48:	f842 3f10 	str.w	r3, [r2, #16]!
   11e4c:	f00a fbac 	bl	1c5a8 <z_log_msg_static_create.constprop.0>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   11e50:	7821      	ldrb	r1, [r4, #0]
   11e52:	46ad      	mov	sp, r5
   11e54:	4608      	mov	r0, r1
   11e56:	f7ff fc1f 	bl	11698 <att_op_get_type>
   11e5a:	2800      	cmp	r0, #0
   11e5c:	d0b1      	beq.n	11dc2 <bt_att_recv+0x2e>
   11e5e:	2805      	cmp	r0, #5
   11e60:	d0af      	beq.n	11dc2 <bt_att_recv+0x2e>
	if (!req) {
   11e62:	2900      	cmp	r1, #0
   11e64:	d0ad      	beq.n	11dc2 <bt_att_recv+0x2e>
   11e66:	2306      	movs	r3, #6
   11e68:	2200      	movs	r2, #0
   11e6a:	4630      	mov	r0, r6
   11e6c:	f00a fdf4 	bl	1ca58 <send_err_rsp.part.0>
   11e70:	e7a7      	b.n	11dc2 <bt_att_recv+0x2e>
		} else if (handler->type == ATT_INDICATION &&
   11e72:	f1b8 0f05 	cmp.w	r8, #5
   11e76:	d10a      	bne.n	11e8e <bt_att_recv+0xfa>
			   atomic_test_and_set_bit(att_chan->flags,
   11e78:	2101      	movs	r1, #1
   11e7a:	f105 008c 	add.w	r0, r5, #140	; 0x8c
   11e7e:	f00a fc7d 	bl	1c77c <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   11e82:	b120      	cbz	r0, 11e8e <bt_att_recv+0xfa>
			BT_WARN("Ignoring unexpected indication");
   11e84:	466c      	mov	r4, sp
   11e86:	b088      	sub	sp, #32
   11e88:	466a      	mov	r2, sp
   11e8a:	4b20      	ldr	r3, [pc, #128]	; (11f0c <bt_att_recv+0x178>)
   11e8c:	e7c4      	b.n	11e18 <bt_att_recv+0x84>
	if (buf->len < handler->expect_len) {
   11e8e:	44da      	add	sl, fp
   11e90:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   11e94:	f89a 2001 	ldrb.w	r2, [sl, #1]
   11e98:	429a      	cmp	r2, r3
   11e9a:	d919      	bls.n	11ed0 <bt_att_recv+0x13c>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   11e9c:	46e8      	mov	r8, sp
   11e9e:	b08a      	sub	sp, #40	; 0x28
   11ea0:	466a      	mov	r2, sp
   11ea2:	7821      	ldrb	r1, [r4, #0]
   11ea4:	481a      	ldr	r0, [pc, #104]	; (11f10 <bt_att_recv+0x17c>)
   11ea6:	6211      	str	r1, [r2, #32]
   11ea8:	6150      	str	r0, [r2, #20]
   11eaa:	4813      	ldr	r0, [pc, #76]	; (11ef8 <bt_att_recv+0x164>)
   11eac:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   11eb0:	e9c2 0306 	strd	r0, r3, [r2, #24]
   11eb4:	2305      	movs	r3, #5
   11eb6:	4811      	ldr	r0, [pc, #68]	; (11efc <bt_att_recv+0x168>)
   11eb8:	f842 3f10 	str.w	r3, [r2, #16]!
   11ebc:	f00a fb74 	bl	1c5a8 <z_log_msg_static_create.constprop.0>
	if (handler->type == ATT_REQUEST && err) {
   11ec0:	f89a 3002 	ldrb.w	r3, [sl, #2]
   11ec4:	46c5      	mov	sp, r8
   11ec6:	2b01      	cmp	r3, #1
   11ec8:	f47f af7b 	bne.w	11dc2 <bt_att_recv+0x2e>
		err = BT_ATT_ERR_INVALID_PDU;
   11ecc:	2304      	movs	r3, #4
   11ece:	e00c      	b.n	11eea <bt_att_recv+0x156>
		err = handler->func(att_chan, buf);
   11ed0:	f8da 3004 	ldr.w	r3, [sl, #4]
   11ed4:	4649      	mov	r1, r9
   11ed6:	4630      	mov	r0, r6
   11ed8:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   11eda:	f1b8 0f01 	cmp.w	r8, #1
		err = handler->func(att_chan, buf);
   11ede:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   11ee0:	f47f af6f 	bne.w	11dc2 <bt_att_recv+0x2e>
   11ee4:	2800      	cmp	r0, #0
   11ee6:	f43f af6c 	beq.w	11dc2 <bt_att_recv+0x2e>
		send_err_rsp(att_chan, hdr->code, 0, err);
   11eea:	7821      	ldrb	r1, [r4, #0]
	if (!req) {
   11eec:	2900      	cmp	r1, #0
   11eee:	f43f af68 	beq.w	11dc2 <bt_att_recv+0x2e>
   11ef2:	e7b9      	b.n	11e68 <bt_att_recv+0xd4>
   11ef4:	00022c5f 	.word	0x00022c5f
   11ef8:	00022d74 	.word	0x00022d74
   11efc:	0001fc3c 	.word	0x0001fc3c
   11f00:	0002035c 	.word	0x0002035c
   11f04:	00022c9c 	.word	0x00022c9c
   11f08:	00022c7e 	.word	0x00022c7e
   11f0c:	00022cbc 	.word	0x00022cbc
   11f10:	00022cdf 	.word	0x00022cdf

00011f14 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   11f14:	b5f0      	push	{r4, r5, r6, r7, lr}
   11f16:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   11f18:	6803      	ldr	r3, [r0, #0]
   11f1a:	460d      	mov	r5, r1
   11f1c:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   11f1e:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   11f20:	bf18      	it	ne
   11f22:	2101      	movne	r1, #1
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   11f24:	b087      	sub	sp, #28
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   11f26:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   11f28:	4617      	mov	r7, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   11f2a:	f00b f996 	bl	1d25a <bt_gatt_change_aware>
   11f2e:	b948      	cbnz	r0, 11f44 <att_write_rsp.constprop.0+0x30>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   11f30:	2105      	movs	r1, #5
   11f32:	f104 0090 	add.w	r0, r4, #144	; 0x90
   11f36:	f00a fc21 	bl	1c77c <atomic_test_and_set_bit>
   11f3a:	2800      	cmp	r0, #0
   11f3c:	d048      	beq.n	11fd0 <att_write_rsp.constprop.0+0xbc>
			return 0;
   11f3e:	2000      	movs	r0, #0
}
   11f40:	b007      	add	sp, #28
   11f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!handle) {
   11f44:	2e00      	cmp	r6, #0
   11f46:	d045      	beq.n	11fd4 <att_write_rsp.constprop.0+0xc0>
	(void)memset(&data, 0, sizeof(data));
   11f48:	2218      	movs	r2, #24
   11f4a:	2100      	movs	r1, #0
   11f4c:	4668      	mov	r0, sp
   11f4e:	f009 fccb 	bl	1b8e8 <memset>
	if (rsp) {
   11f52:	bb67      	cbnz	r7, 11fae <att_write_rsp.constprop.0+0x9a>
	data.conn = chan->att->conn;
   11f54:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   11f56:	4631      	mov	r1, r6
	data.conn = chan->att->conn;
   11f58:	681b      	ldr	r3, [r3, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   11f5a:	4630      	mov	r0, r6
	data.conn = chan->att->conn;
   11f5c:	9300      	str	r3, [sp, #0]
	data.offset = offset;
   11f5e:	2300      	movs	r3, #0
   11f60:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
   11f64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   11f66:	4a1c      	ldr	r2, [pc, #112]	; (11fd8 <att_write_rsp.constprop.0+0xc4>)
	data.value = value;
   11f68:	9303      	str	r3, [sp, #12]
	data.len = len;
   11f6a:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
	data.req = req;
   11f6e:	f88d 5008 	strb.w	r5, [sp, #8]
	data.len = len;
   11f72:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   11f76:	2301      	movs	r3, #1
   11f78:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   11f7c:	466b      	mov	r3, sp
   11f7e:	f00a fa79 	bl	1c474 <bt_gatt_foreach_attr>
	if (data.err) {
   11f82:	f89d 3014 	ldrb.w	r3, [sp, #20]
   11f86:	b1e3      	cbz	r3, 11fc2 <att_write_rsp.constprop.0+0xae>
		if (rsp) {
   11f88:	2f00      	cmp	r7, #0
   11f8a:	d0d8      	beq.n	11f3e <att_write_rsp.constprop.0+0x2a>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   11f8c:	9b01      	ldr	r3, [sp, #4]
   11f8e:	6958      	ldr	r0, [r3, #20]
   11f90:	f7ff fbc8 	bl	11724 <tx_meta_data_free>
			net_buf_unref(data.buf);
   11f94:	9801      	ldr	r0, [sp, #4]
   11f96:	f003 fac9 	bl	1552c <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   11f9a:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (!req) {
   11f9e:	2d00      	cmp	r5, #0
   11fa0:	d0cd      	beq.n	11f3e <att_write_rsp.constprop.0+0x2a>
   11fa2:	4632      	mov	r2, r6
   11fa4:	4629      	mov	r1, r5
   11fa6:	4620      	mov	r0, r4
   11fa8:	f00a fd56 	bl	1ca58 <send_err_rsp.part.0>
   11fac:	e7c7      	b.n	11f3e <att_write_rsp.constprop.0+0x2a>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   11fae:	2200      	movs	r2, #0
   11fb0:	4639      	mov	r1, r7
   11fb2:	4620      	mov	r0, r4
   11fb4:	f7ff fe7a 	bl	11cac <bt_att_chan_create_pdu>
   11fb8:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   11fba:	2800      	cmp	r0, #0
   11fbc:	d1ca      	bne.n	11f54 <att_write_rsp.constprop.0+0x40>
			return BT_ATT_ERR_UNLIKELY;
   11fbe:	200e      	movs	r0, #14
   11fc0:	e7be      	b.n	11f40 <att_write_rsp.constprop.0+0x2c>
	if (data.buf) {
   11fc2:	9901      	ldr	r1, [sp, #4]
   11fc4:	2900      	cmp	r1, #0
   11fc6:	d0ba      	beq.n	11f3e <att_write_rsp.constprop.0+0x2a>
		bt_att_chan_send_rsp(chan, data.buf);
   11fc8:	4620      	mov	r0, r4
   11fca:	f00a fb23 	bl	1c614 <bt_att_chan_send_rsp>
   11fce:	e7b6      	b.n	11f3e <att_write_rsp.constprop.0+0x2a>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   11fd0:	2012      	movs	r0, #18
   11fd2:	e7b5      	b.n	11f40 <att_write_rsp.constprop.0+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   11fd4:	2001      	movs	r0, #1
   11fd6:	e7b3      	b.n	11f40 <att_write_rsp.constprop.0+0x2c>
   11fd8:	0001c413 	.word	0x0001c413

00011fdc <bt_att_create_pdu>:
{
   11fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11fde:	af00      	add	r7, sp, #0
   11fe0:	460e      	mov	r6, r1
   11fe2:	4615      	mov	r5, r2
	att = att_get(conn);
   11fe4:	f7ff fcda 	bl	1199c <att_get>
	if (!att) {
   11fe8:	b1f0      	cbz	r0, 12028 <bt_att_create_pdu+0x4c>
	return list->head;
   11fea:	6a43      	ldr	r3, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   11fec:	4618      	mov	r0, r3
   11fee:	b11b      	cbz	r3, 11ff8 <bt_att_create_pdu+0x1c>
	return node->next;
   11ff0:	f850 39e0 	ldr.w	r3, [r0], #-224
   11ff4:	b103      	cbz	r3, 11ff8 <bt_att_create_pdu+0x1c>
   11ff6:	3be0      	subs	r3, #224	; 0xe0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   11ff8:	1c6c      	adds	r4, r5, #1
   11ffa:	4622      	mov	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   11ffc:	b118      	cbz	r0, 12006 <bt_att_create_pdu+0x2a>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   11ffe:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   12000:	42a1      	cmp	r1, r4
   12002:	d21b      	bcs.n	1203c <bt_att_create_pdu+0x60>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   12004:	b993      	cbnz	r3, 1202c <bt_att_create_pdu+0x50>
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   12006:	466d      	mov	r5, sp
   12008:	b088      	sub	sp, #32
   1200a:	466a      	mov	r2, sp
   1200c:	4b0f      	ldr	r3, [pc, #60]	; (1204c <bt_att_create_pdu+0x70>)
   1200e:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   12012:	6153      	str	r3, [r2, #20]
   12014:	4b0e      	ldr	r3, [pc, #56]	; (12050 <bt_att_create_pdu+0x74>)
   12016:	480f      	ldr	r0, [pc, #60]	; (12054 <bt_att_create_pdu+0x78>)
   12018:	e9c2 3406 	strd	r3, r4, [r2, #24]
   1201c:	2304      	movs	r3, #4
   1201e:	f842 3f10 	str.w	r3, [r2, #16]!
   12022:	f00a fac1 	bl	1c5a8 <z_log_msg_static_create.constprop.0>
   12026:	46ad      	mov	sp, r5
		return NULL;
   12028:	2000      	movs	r0, #0
   1202a:	e00b      	b.n	12044 <bt_att_create_pdu+0x68>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1202c:	4618      	mov	r0, r3
   1202e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   12032:	b14b      	cbz	r3, 12048 <bt_att_create_pdu+0x6c>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   12034:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   12036:	3be0      	subs	r3, #224	; 0xe0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   12038:	428a      	cmp	r2, r1
   1203a:	d8f7      	bhi.n	1202c <bt_att_create_pdu+0x50>
		return bt_att_chan_create_pdu(chan, op, len);
   1203c:	462a      	mov	r2, r5
   1203e:	4631      	mov	r1, r6
   12040:	f7ff fe34 	bl	11cac <bt_att_chan_create_pdu>
}
   12044:	46bd      	mov	sp, r7
   12046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   12048:	4614      	mov	r4, r2
   1204a:	e7d8      	b.n	11ffe <bt_att_create_pdu+0x22>
   1204c:	00022d02 	.word	0x00022d02
   12050:	00022dad 	.word	0x00022dad
   12054:	0001fc3c 	.word	0x0001fc3c

00012058 <att_read_group_req>:
{
   12058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   1205c:	898e      	ldrh	r6, [r1, #12]
{
   1205e:	4604      	mov	r4, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   12060:	3e04      	subs	r6, #4
   12062:	b2f6      	uxtb	r6, r6
	if (uuid_len != 2 && uuid_len != 16) {
   12064:	2e02      	cmp	r6, #2
{
   12066:	4608      	mov	r0, r1
   12068:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   1206a:	d001      	beq.n	12070 <att_read_group_req+0x18>
   1206c:	2e10      	cmp	r6, #16
   1206e:	d16a      	bne.n	12146 <att_read_group_req+0xee>
   12070:	2104      	movs	r1, #4
   12072:	3008      	adds	r0, #8
   12074:	f00b fd92 	bl	1db9c <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   12078:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   1207c:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1207e:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   12080:	1d01      	adds	r1, r0, #4
   12082:	4632      	mov	r2, r6
   12084:	4640      	mov	r0, r8
   12086:	f009 fc91 	bl	1b9ac <bt_uuid_create>
   1208a:	2800      	cmp	r0, #0
   1208c:	d05d      	beq.n	1214a <att_read_group_req+0xf2>
	if (!start || !end) {
   1208e:	2d00      	cmp	r5, #0
   12090:	d03a      	beq.n	12108 <att_read_group_req+0xb0>
   12092:	2600      	movs	r6, #0
   12094:	2f00      	cmp	r7, #0
   12096:	d036      	beq.n	12106 <att_read_group_req+0xae>
	if (start > end) {
   12098:	42bd      	cmp	r5, r7
   1209a:	d835      	bhi.n	12108 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   1209c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   120a0:	4640      	mov	r0, r8
   120a2:	a901      	add	r1, sp, #4
   120a4:	f88d 6004 	strb.w	r6, [sp, #4]
   120a8:	f8ad 3006 	strh.w	r3, [sp, #6]
   120ac:	f009 fc50 	bl	1b950 <bt_uuid_cmp>
   120b0:	bb70      	cbnz	r0, 12110 <att_read_group_req+0xb8>
	struct bt_conn *conn = chan->chan.chan.conn;
   120b2:	6866      	ldr	r6, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   120b4:	2214      	movs	r2, #20
   120b6:	2100      	movs	r1, #0
   120b8:	a807      	add	r0, sp, #28
   120ba:	f009 fc15 	bl	1b8e8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   120be:	2201      	movs	r2, #1
   120c0:	2111      	movs	r1, #17
   120c2:	4630      	mov	r0, r6
   120c4:	f7ff ff8a 	bl	11fdc <bt_att_create_pdu>
   120c8:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   120ca:	2800      	cmp	r0, #0
   120cc:	d03d      	beq.n	1214a <att_read_group_req+0xf2>
	return net_buf_simple_add(&buf->b, len);
   120ce:	2101      	movs	r1, #1
   120d0:	3008      	adds	r0, #8
	data.uuid = uuid;
   120d2:	e9cd 4807 	strd	r4, r8, [sp, #28]
   120d6:	f00b fd31 	bl	1db3c <net_buf_simple_add>
	data.rsp->len = 0U;
   120da:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   120dc:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   120de:	4639      	mov	r1, r7
	data.rsp->len = 0U;
   120e0:	7003      	strb	r3, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   120e2:	4a1b      	ldr	r2, [pc, #108]	; (12150 <att_read_group_req+0xf8>)
	data.group = NULL;
   120e4:	930b      	str	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   120e6:	4628      	mov	r0, r5
   120e8:	ab07      	add	r3, sp, #28
   120ea:	f00a f9c3 	bl	1c474 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   120ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   120f0:	781b      	ldrb	r3, [r3, #0]
   120f2:	bb1b      	cbnz	r3, 1213c <att_read_group_req+0xe4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   120f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   120f6:	6958      	ldr	r0, [r3, #20]
   120f8:	f7ff fb14 	bl	11724 <tx_meta_data_free>
		net_buf_unref(data.buf);
   120fc:	9809      	ldr	r0, [sp, #36]	; 0x24
   120fe:	f003 fa15 	bl	1552c <net_buf_unref>
	if (!req) {
   12102:	230a      	movs	r3, #10
   12104:	e001      	b.n	1210a <att_read_group_req+0xb2>
			*err = 0U;
   12106:	463d      	mov	r5, r7
	if (!req) {
   12108:	2301      	movs	r3, #1
   1210a:	462a      	mov	r2, r5
   1210c:	2110      	movs	r1, #16
   1210e:	e00e      	b.n	1212e <att_read_group_req+0xd6>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   12110:	f642 0301 	movw	r3, #10241	; 0x2801
   12114:	4640      	mov	r0, r8
   12116:	a907      	add	r1, sp, #28
   12118:	f88d 601c 	strb.w	r6, [sp, #28]
   1211c:	f8ad 301e 	strh.w	r3, [sp, #30]
   12120:	f009 fc16 	bl	1b950 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   12124:	2800      	cmp	r0, #0
   12126:	d0c4      	beq.n	120b2 <att_read_group_req+0x5a>
	if (!req) {
   12128:	2310      	movs	r3, #16
   1212a:	462a      	mov	r2, r5
   1212c:	4619      	mov	r1, r3
   1212e:	4620      	mov	r0, r4
   12130:	f00a fc92 	bl	1ca58 <send_err_rsp.part.0>
		return 0;
   12134:	2000      	movs	r0, #0
}
   12136:	b00c      	add	sp, #48	; 0x30
   12138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf);
   1213c:	4620      	mov	r0, r4
   1213e:	9909      	ldr	r1, [sp, #36]	; 0x24
   12140:	f00a fa68 	bl	1c614 <bt_att_chan_send_rsp>
	return 0;
   12144:	e7f6      	b.n	12134 <att_read_group_req+0xdc>
		return BT_ATT_ERR_INVALID_PDU;
   12146:	2004      	movs	r0, #4
   12148:	e7f5      	b.n	12136 <att_read_group_req+0xde>
		return BT_ATT_ERR_UNLIKELY;
   1214a:	200e      	movs	r0, #14
   1214c:	e7f3      	b.n	12136 <att_read_group_req+0xde>
   1214e:	bf00      	nop
   12150:	00011a41 	.word	0x00011a41

00012154 <att_read_mult_vl_req>:
{
   12154:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   12158:	6846      	ldr	r6, [r0, #4]
{
   1215a:	4604      	mov	r4, r0
   1215c:	460d      	mov	r5, r1
   1215e:	b085      	sub	sp, #20
	if (!bt_gatt_change_aware(conn, true)) {
   12160:	2101      	movs	r1, #1
   12162:	4630      	mov	r0, r6
   12164:	f00b f879 	bl	1d25a <bt_gatt_change_aware>
   12168:	b950      	cbnz	r0, 12180 <att_read_mult_vl_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1216a:	2105      	movs	r1, #5
   1216c:	f104 0090 	add.w	r0, r4, #144	; 0x90
   12170:	f00a fb04 	bl	1c77c <atomic_test_and_set_bit>
   12174:	2800      	cmp	r0, #0
   12176:	d13b      	bne.n	121f0 <att_read_mult_vl_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   12178:	2012      	movs	r0, #18
}
   1217a:	b005      	add	sp, #20
   1217c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   12180:	2210      	movs	r2, #16
   12182:	2100      	movs	r1, #0
   12184:	4668      	mov	r0, sp
   12186:	f009 fbaf 	bl	1b8e8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   1218a:	2200      	movs	r2, #0
   1218c:	2121      	movs	r1, #33	; 0x21
   1218e:	4630      	mov	r0, r6
   12190:	f7ff ff24 	bl	11fdc <bt_att_create_pdu>
   12194:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   12196:	b368      	cbz	r0, 121f4 <att_read_mult_vl_req+0xa0>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   12198:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   1219c:	f8df 9058 	ldr.w	r9, [pc, #88]	; 121f8 <att_read_mult_vl_req+0xa4>
	data.chan = chan;
   121a0:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   121a2:	f105 0708 	add.w	r7, r5, #8
	while (buf->len >= sizeof(uint16_t)) {
   121a6:	89ab      	ldrh	r3, [r5, #12]
   121a8:	2b01      	cmp	r3, #1
   121aa:	d804      	bhi.n	121b6 <att_read_mult_vl_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   121ac:	4620      	mov	r0, r4
   121ae:	9902      	ldr	r1, [sp, #8]
   121b0:	f00a fa30 	bl	1c614 <bt_att_chan_send_rsp>
	return 0;
   121b4:	e01c      	b.n	121f0 <att_read_mult_vl_req+0x9c>
   121b6:	4638      	mov	r0, r7
   121b8:	f00b fcf8 	bl	1dbac <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   121bc:	466b      	mov	r3, sp
   121be:	464a      	mov	r2, r9
   121c0:	4601      	mov	r1, r0
   121c2:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   121c4:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   121c8:	f00a f954 	bl	1c474 <bt_gatt_foreach_attr>
		if (data.err) {
   121cc:	f89d 300c 	ldrb.w	r3, [sp, #12]
   121d0:	2b00      	cmp	r3, #0
   121d2:	d0e8      	beq.n	121a6 <att_read_mult_vl_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   121d4:	9b02      	ldr	r3, [sp, #8]
   121d6:	6958      	ldr	r0, [r3, #20]
   121d8:	f7ff faa4 	bl	11724 <tx_meta_data_free>
			net_buf_unref(data.buf);
   121dc:	9802      	ldr	r0, [sp, #8]
   121de:	f003 f9a5 	bl	1552c <net_buf_unref>
	if (!req) {
   121e2:	4632      	mov	r2, r6
   121e4:	2120      	movs	r1, #32
   121e6:	4620      	mov	r0, r4
   121e8:	f89d 300c 	ldrb.w	r3, [sp, #12]
   121ec:	f00a fc34 	bl	1ca58 <send_err_rsp.part.0>
			return 0;
   121f0:	2000      	movs	r0, #0
   121f2:	e7c2      	b.n	1217a <att_read_mult_vl_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   121f4:	200e      	movs	r0, #14
   121f6:	e7c0      	b.n	1217a <att_read_mult_vl_req+0x26>
   121f8:	0001c7e5 	.word	0x0001c7e5

000121fc <att_read_mult_req>:
{
   121fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   12200:	6846      	ldr	r6, [r0, #4]
{
   12202:	4604      	mov	r4, r0
   12204:	460d      	mov	r5, r1
   12206:	b085      	sub	sp, #20
	if (!bt_gatt_change_aware(conn, true)) {
   12208:	2101      	movs	r1, #1
   1220a:	4630      	mov	r0, r6
   1220c:	f00b f825 	bl	1d25a <bt_gatt_change_aware>
   12210:	b950      	cbnz	r0, 12228 <att_read_mult_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   12212:	2105      	movs	r1, #5
   12214:	f104 0090 	add.w	r0, r4, #144	; 0x90
   12218:	f00a fab0 	bl	1c77c <atomic_test_and_set_bit>
   1221c:	2800      	cmp	r0, #0
   1221e:	d13b      	bne.n	12298 <att_read_mult_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   12220:	2012      	movs	r0, #18
}
   12222:	b005      	add	sp, #20
   12224:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   12228:	2210      	movs	r2, #16
   1222a:	2100      	movs	r1, #0
   1222c:	4668      	mov	r0, sp
   1222e:	f009 fb5b 	bl	1b8e8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   12232:	2200      	movs	r2, #0
   12234:	210f      	movs	r1, #15
   12236:	4630      	mov	r0, r6
   12238:	f7ff fed0 	bl	11fdc <bt_att_create_pdu>
   1223c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1223e:	b368      	cbz	r0, 1229c <att_read_mult_req+0xa0>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   12240:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12244:	f8df 9058 	ldr.w	r9, [pc, #88]	; 122a0 <att_read_mult_req+0xa4>
	data.chan = chan;
   12248:	9400      	str	r4, [sp, #0]
   1224a:	f105 0708 	add.w	r7, r5, #8
	while (buf->len >= sizeof(uint16_t)) {
   1224e:	89ab      	ldrh	r3, [r5, #12]
   12250:	2b01      	cmp	r3, #1
   12252:	d804      	bhi.n	1225e <att_read_mult_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   12254:	4620      	mov	r0, r4
   12256:	9902      	ldr	r1, [sp, #8]
   12258:	f00a f9dc 	bl	1c614 <bt_att_chan_send_rsp>
	return 0;
   1225c:	e01c      	b.n	12298 <att_read_mult_req+0x9c>
   1225e:	4638      	mov	r0, r7
   12260:	f00b fca4 	bl	1dbac <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12264:	466b      	mov	r3, sp
   12266:	464a      	mov	r2, r9
   12268:	4601      	mov	r1, r0
   1226a:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1226c:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12270:	f00a f900 	bl	1c474 <bt_gatt_foreach_attr>
		if (data.err) {
   12274:	f89d 300c 	ldrb.w	r3, [sp, #12]
   12278:	2b00      	cmp	r3, #0
   1227a:	d0e8      	beq.n	1224e <att_read_mult_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1227c:	9b02      	ldr	r3, [sp, #8]
   1227e:	6958      	ldr	r0, [r3, #20]
   12280:	f7ff fa50 	bl	11724 <tx_meta_data_free>
			net_buf_unref(data.buf);
   12284:	9802      	ldr	r0, [sp, #8]
   12286:	f003 f951 	bl	1552c <net_buf_unref>
	if (!req) {
   1228a:	4632      	mov	r2, r6
   1228c:	210e      	movs	r1, #14
   1228e:	4620      	mov	r0, r4
   12290:	f89d 300c 	ldrb.w	r3, [sp, #12]
   12294:	f00a fbe0 	bl	1ca58 <send_err_rsp.part.0>
			return 0;
   12298:	2000      	movs	r0, #0
   1229a:	e7c2      	b.n	12222 <att_read_mult_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   1229c:	200e      	movs	r0, #14
   1229e:	e7c0      	b.n	12222 <att_read_mult_req+0x26>
   122a0:	0001c79f 	.word	0x0001c79f

000122a4 <att_read_rsp>:
{
   122a4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   122a8:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   122ac:	4604      	mov	r4, r0
   122ae:	460e      	mov	r6, r1
	if (!bt_gatt_change_aware(conn, true)) {
   122b0:	4640      	mov	r0, r8
   122b2:	2101      	movs	r1, #1
{
   122b4:	4617      	mov	r7, r2
   122b6:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
   122b8:	f00a ffcf 	bl	1d25a <bt_gatt_change_aware>
   122bc:	b948      	cbnz	r0, 122d2 <att_read_rsp+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   122be:	2105      	movs	r1, #5
   122c0:	f104 0090 	add.w	r0, r4, #144	; 0x90
   122c4:	f00a fa5a 	bl	1c77c <atomic_test_and_set_bit>
   122c8:	bb78      	cbnz	r0, 1232a <att_read_rsp+0x86>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   122ca:	2012      	movs	r0, #18
}
   122cc:	b004      	add	sp, #16
   122ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   122d2:	b38d      	cbz	r5, 12338 <att_read_rsp+0x94>
	(void)memset(&data, 0, sizeof(data));
   122d4:	2210      	movs	r2, #16
   122d6:	2100      	movs	r1, #0
   122d8:	4668      	mov	r0, sp
   122da:	f009 fb05 	bl	1b8e8 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   122de:	2200      	movs	r2, #0
   122e0:	4639      	mov	r1, r7
   122e2:	4640      	mov	r0, r8
   122e4:	f7ff fe7a 	bl	11fdc <bt_att_create_pdu>
   122e8:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   122ea:	b338      	cbz	r0, 1233c <att_read_rsp+0x98>
	data.offset = offset;
   122ec:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   122f0:	4629      	mov	r1, r5
	data.offset = offset;
   122f2:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   122f6:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   122f8:	4628      	mov	r0, r5
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   122fa:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   122fe:	4a10      	ldr	r2, [pc, #64]	; (12340 <att_read_rsp+0x9c>)
   12300:	466b      	mov	r3, sp
	data.chan = chan;
   12302:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12304:	f00a f8b6 	bl	1c474 <bt_gatt_foreach_attr>
	if (data.err) {
   12308:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1230c:	b17b      	cbz	r3, 1232e <att_read_rsp+0x8a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1230e:	9b02      	ldr	r3, [sp, #8]
   12310:	6958      	ldr	r0, [r3, #20]
   12312:	f7ff fa07 	bl	11724 <tx_meta_data_free>
		net_buf_unref(data.buf);
   12316:	9802      	ldr	r0, [sp, #8]
   12318:	f003 f908 	bl	1552c <net_buf_unref>
	if (!req) {
   1231c:	462a      	mov	r2, r5
   1231e:	4631      	mov	r1, r6
   12320:	4620      	mov	r0, r4
   12322:	f89d 300c 	ldrb.w	r3, [sp, #12]
   12326:	f00a fb97 	bl	1ca58 <send_err_rsp.part.0>
			return 0;
   1232a:	2000      	movs	r0, #0
   1232c:	e7ce      	b.n	122cc <att_read_rsp+0x28>
	bt_att_chan_send_rsp(chan, data.buf);
   1232e:	4620      	mov	r0, r4
   12330:	9902      	ldr	r1, [sp, #8]
   12332:	f00a f96f 	bl	1c614 <bt_att_chan_send_rsp>
	return 0;
   12336:	e7f8      	b.n	1232a <att_read_rsp+0x86>
		return BT_ATT_ERR_INVALID_HANDLE;
   12338:	2001      	movs	r0, #1
   1233a:	e7c7      	b.n	122cc <att_read_rsp+0x28>
		return BT_ATT_ERR_UNLIKELY;
   1233c:	200e      	movs	r0, #14
   1233e:	e7c5      	b.n	122cc <att_read_rsp+0x28>
   12340:	0001c79f 	.word	0x0001c79f

00012344 <att_read_type_req>:
{
   12344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   12348:	898d      	ldrh	r5, [r1, #12]
{
   1234a:	4604      	mov	r4, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   1234c:	3d04      	subs	r5, #4
   1234e:	b2ed      	uxtb	r5, r5
	if (uuid_len != 2 && uuid_len != 16) {
   12350:	2d02      	cmp	r5, #2
{
   12352:	4608      	mov	r0, r1
   12354:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   12356:	d001      	beq.n	1235c <att_read_type_req+0x18>
   12358:	2d10      	cmp	r5, #16
   1235a:	d150      	bne.n	123fe <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   1235c:	2104      	movs	r1, #4
   1235e:	3008      	adds	r0, #8
   12360:	f00b fc1c 	bl	1db9c <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   12364:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   12368:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1236a:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1236c:	1d01      	adds	r1, r0, #4
   1236e:	462a      	mov	r2, r5
   12370:	4640      	mov	r0, r8
   12372:	f009 fb1b 	bl	1b9ac <bt_uuid_create>
   12376:	b188      	cbz	r0, 1239c <att_read_type_req+0x58>
	if (!start || !end) {
   12378:	b19e      	cbz	r6, 123a2 <att_read_type_req+0x5e>
   1237a:	b18f      	cbz	r7, 123a0 <att_read_type_req+0x5c>
	if (start > end) {
   1237c:	42b7      	cmp	r7, r6
   1237e:	d310      	bcc.n	123a2 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   12380:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   12382:	6865      	ldr	r5, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   12384:	2100      	movs	r1, #0
   12386:	eb0d 0002 	add.w	r0, sp, r2
   1238a:	f009 faad 	bl	1b8e8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   1238e:	2201      	movs	r2, #1
   12390:	2109      	movs	r1, #9
   12392:	4628      	mov	r0, r5
   12394:	f7ff fe22 	bl	11fdc <bt_att_create_pdu>
   12398:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   1239a:	b960      	cbnz	r0, 123b6 <att_read_type_req+0x72>
		return BT_ATT_ERR_UNLIKELY;
   1239c:	200e      	movs	r0, #14
   1239e:	e007      	b.n	123b0 <att_read_type_req+0x6c>
			*err = 0U;
   123a0:	463e      	mov	r6, r7
	if (!req) {
   123a2:	2301      	movs	r3, #1
   123a4:	4632      	mov	r2, r6
   123a6:	2108      	movs	r1, #8
   123a8:	4620      	mov	r0, r4
   123aa:	f00a fb55 	bl	1ca58 <send_err_rsp.part.0>
		return 0;
   123ae:	2000      	movs	r0, #0
}
   123b0:	b00c      	add	sp, #48	; 0x30
   123b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   123b6:	2101      	movs	r1, #1
   123b8:	3008      	adds	r0, #8
	data.uuid = uuid;
   123ba:	e9cd 4806 	strd	r4, r8, [sp, #24]
   123be:	f00b fbbd 	bl	1db3c <net_buf_simple_add>
	data.rsp->len = 0U;
   123c2:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   123c4:	9009      	str	r0, [sp, #36]	; 0x24
	data.rsp->len = 0U;
   123c6:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   123c8:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   123ca:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   123cc:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   123d0:	4630      	mov	r0, r6
   123d2:	ab06      	add	r3, sp, #24
   123d4:	4a0b      	ldr	r2, [pc, #44]	; (12404 <att_read_type_req+0xc0>)
   123d6:	f00a f84d 	bl	1c474 <bt_gatt_foreach_attr>
	if (data.err) {
   123da:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   123de:	b14b      	cbz	r3, 123f4 <att_read_type_req+0xb0>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   123e0:	9b08      	ldr	r3, [sp, #32]
   123e2:	6958      	ldr	r0, [r3, #20]
   123e4:	f7ff f99e 	bl	11724 <tx_meta_data_free>
		net_buf_unref(data.buf);
   123e8:	9808      	ldr	r0, [sp, #32]
   123ea:	f003 f89f 	bl	1552c <net_buf_unref>
	if (!req) {
   123ee:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   123f2:	e7d7      	b.n	123a4 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   123f4:	4620      	mov	r0, r4
   123f6:	9908      	ldr	r1, [sp, #32]
   123f8:	f00a f90c 	bl	1c614 <bt_att_chan_send_rsp>
	return 0;
   123fc:	e7d7      	b.n	123ae <att_read_type_req+0x6a>
		return BT_ATT_ERR_INVALID_PDU;
   123fe:	2004      	movs	r0, #4
   12400:	e7d6      	b.n	123b0 <att_read_type_req+0x6c>
   12402:	bf00      	nop
   12404:	00011aed 	.word	0x00011aed

00012408 <att_find_type_req>:
{
   12408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1240c:	460f      	mov	r7, r1
   1240e:	4604      	mov	r4, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   12410:	2106      	movs	r1, #6
   12412:	b086      	sub	sp, #24
   12414:	f107 0008 	add.w	r0, r7, #8
   12418:	f00b fbc0 	bl	1db9c <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   1241c:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1241e:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   12422:	8882      	ldrh	r2, [r0, #4]
	value = buf->data;
   12424:	f8d7 9008 	ldr.w	r9, [r7, #8]
	if (!start || !end) {
   12428:	b1c5      	cbz	r5, 1245c <att_find_type_req+0x54>
   1242a:	2300      	movs	r3, #0
   1242c:	f1b8 0f00 	cmp.w	r8, #0
   12430:	d013      	beq.n	1245a <att_find_type_req+0x52>
	if (start > end) {
   12432:	4545      	cmp	r5, r8
   12434:	d812      	bhi.n	1245c <att_find_type_req+0x54>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   12436:	f88d 3000 	strb.w	r3, [sp]
   1243a:	f88d 3004 	strb.w	r3, [sp, #4]
   1243e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   12442:	4668      	mov	r0, sp
   12444:	a901      	add	r1, sp, #4
   12446:	f8ad 2002 	strh.w	r2, [sp, #2]
   1244a:	f8ad 3006 	strh.w	r3, [sp, #6]
   1244e:	f009 fa7f 	bl	1b950 <bt_uuid_cmp>
   12452:	4606      	mov	r6, r0
   12454:	b160      	cbz	r0, 12470 <att_find_type_req+0x68>
	if (!req) {
   12456:	230a      	movs	r3, #10
   12458:	e001      	b.n	1245e <att_find_type_req+0x56>
			*err = 0U;
   1245a:	4645      	mov	r5, r8
	if (!req) {
   1245c:	2301      	movs	r3, #1
   1245e:	462a      	mov	r2, r5
   12460:	2106      	movs	r1, #6
   12462:	4620      	mov	r0, r4
   12464:	f00a faf8 	bl	1ca58 <send_err_rsp.part.0>
		return 0;
   12468:	2000      	movs	r0, #0
}
   1246a:	b006      	add	sp, #24
   1246c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct bt_conn *conn = chan->chan.chan.conn;
   12470:	f8d4 a004 	ldr.w	sl, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   12474:	4601      	mov	r1, r0
   12476:	2214      	movs	r2, #20
   12478:	a801      	add	r0, sp, #4
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   1247a:	7b3f      	ldrb	r7, [r7, #12]
	(void)memset(&data, 0, sizeof(data));
   1247c:	f009 fa34 	bl	1b8e8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   12480:	4632      	mov	r2, r6
   12482:	2107      	movs	r1, #7
   12484:	4650      	mov	r0, sl
   12486:	f7ff fda9 	bl	11fdc <bt_att_create_pdu>
   1248a:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1248c:	b1f8      	cbz	r0, 124ce <att_find_type_req+0xc6>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1248e:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   12490:	4641      	mov	r1, r8
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   12492:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   12496:	4628      	mov	r0, r5
   12498:	ab01      	add	r3, sp, #4
   1249a:	4a0e      	ldr	r2, [pc, #56]	; (124d4 <att_find_type_req+0xcc>)
	data.value = value;
   1249c:	e9cd 6903 	strd	r6, r9, [sp, #12]
	data.chan = chan;
   124a0:	9401      	str	r4, [sp, #4]
	data.value_len = value_len;
   124a2:	f88d 7014 	strb.w	r7, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   124a6:	f009 ffe5 	bl	1c474 <bt_gatt_foreach_attr>
	if (data.err) {
   124aa:	f89d 3015 	ldrb.w	r3, [sp, #21]
   124ae:	b14b      	cbz	r3, 124c4 <att_find_type_req+0xbc>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   124b0:	9b02      	ldr	r3, [sp, #8]
   124b2:	6958      	ldr	r0, [r3, #20]
   124b4:	f7ff f936 	bl	11724 <tx_meta_data_free>
		net_buf_unref(data.buf);
   124b8:	9802      	ldr	r0, [sp, #8]
   124ba:	f003 f837 	bl	1552c <net_buf_unref>
	if (!req) {
   124be:	f89d 3015 	ldrb.w	r3, [sp, #21]
   124c2:	e7cc      	b.n	1245e <att_find_type_req+0x56>
	bt_att_chan_send_rsp(chan, data.buf);
   124c4:	4620      	mov	r0, r4
   124c6:	9902      	ldr	r1, [sp, #8]
   124c8:	f00a f8a4 	bl	1c614 <bt_att_chan_send_rsp>
	return 0;
   124cc:	e7cc      	b.n	12468 <att_find_type_req+0x60>
		return BT_ATT_ERR_UNLIKELY;
   124ce:	200e      	movs	r0, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   124d0:	e7cb      	b.n	1246a <att_find_type_req+0x62>
   124d2:	bf00      	nop
   124d4:	00011741 	.word	0x00011741

000124d8 <att_find_info_req>:
{
   124d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   124da:	688b      	ldr	r3, [r1, #8]
{
   124dc:	4604      	mov	r4, r0
	start_handle = sys_le16_to_cpu(req->start_handle);
   124de:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   124e0:	885e      	ldrh	r6, [r3, #2]
{
   124e2:	b085      	sub	sp, #20
	if (!start || !end) {
   124e4:	b195      	cbz	r5, 1250c <att_find_info_req+0x34>
   124e6:	b186      	cbz	r6, 1250a <att_find_info_req+0x32>
	if (start > end) {
   124e8:	42b5      	cmp	r5, r6
   124ea:	d80f      	bhi.n	1250c <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   124ec:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   124ee:	2210      	movs	r2, #16
   124f0:	2100      	movs	r1, #0
   124f2:	4668      	mov	r0, sp
   124f4:	f009 f9f8 	bl	1b8e8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   124f8:	2200      	movs	r2, #0
   124fa:	2105      	movs	r1, #5
   124fc:	4638      	mov	r0, r7
   124fe:	f7ff fd6d 	bl	11fdc <bt_att_create_pdu>
   12502:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   12504:	b958      	cbnz	r0, 1251e <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   12506:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   12508:	e007      	b.n	1251a <att_find_info_req+0x42>
			*err = 0U;
   1250a:	4635      	mov	r5, r6
	if (!req) {
   1250c:	2301      	movs	r3, #1
   1250e:	462a      	mov	r2, r5
   12510:	2104      	movs	r1, #4
   12512:	4620      	mov	r0, r4
   12514:	f00a faa0 	bl	1ca58 <send_err_rsp.part.0>
		return 0;
   12518:	2000      	movs	r0, #0
}
   1251a:	b005      	add	sp, #20
   1251c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1251e:	466b      	mov	r3, sp
   12520:	4631      	mov	r1, r6
   12522:	4628      	mov	r0, r5
   12524:	4a09      	ldr	r2, [pc, #36]	; (1254c <att_find_info_req+0x74>)
	data.chan = chan;
   12526:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   12528:	f009 ffa4 	bl	1c474 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   1252c:	9b02      	ldr	r3, [sp, #8]
   1252e:	b943      	cbnz	r3, 12542 <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   12530:	9b01      	ldr	r3, [sp, #4]
   12532:	6958      	ldr	r0, [r3, #20]
   12534:	f7ff f8f6 	bl	11724 <tx_meta_data_free>
		net_buf_unref(data.buf);
   12538:	9801      	ldr	r0, [sp, #4]
   1253a:	f002 fff7 	bl	1552c <net_buf_unref>
	if (!req) {
   1253e:	230a      	movs	r3, #10
   12540:	e7e5      	b.n	1250e <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
   12542:	4620      	mov	r0, r4
   12544:	9901      	ldr	r1, [sp, #4]
   12546:	f00a f865 	bl	1c614 <bt_att_chan_send_rsp>
	return 0;
   1254a:	e7e5      	b.n	12518 <att_find_info_req+0x40>
   1254c:	0001c48b 	.word	0x0001c48b

00012550 <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   12550:	b538      	push	{r3, r4, r5, lr}
	z_impl_k_queue_init(queue);
   12552:	4c0b      	ldr	r4, [pc, #44]	; (12580 <bt_att_init+0x30>)
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   12554:	4d0b      	ldr	r5, [pc, #44]	; (12584 <bt_att_init+0x34>)
   12556:	4620      	mov	r0, r4
   12558:	f00c fc4b 	bl	1edf2 <z_impl_k_queue_init>
   1255c:	4629      	mov	r1, r5
   1255e:	4620      	mov	r0, r4
   12560:	f00c fc53 	bl	1ee0a <k_queue_append>
   12564:	4620      	mov	r0, r4
   12566:	f105 0114 	add.w	r1, r5, #20
   1256a:	f00c fc4e 	bl	1ee0a <k_queue_append>
   1256e:	4620      	mov	r0, r4
   12570:	f105 0128 	add.w	r1, r5, #40	; 0x28
   12574:	f00c fc49 	bl	1ee0a <k_queue_append>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   12578:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_init();
   1257c:	f000 bb46 	b.w	12c0c <bt_gatt_init>
   12580:	20008754 	.word	0x20008754
   12584:	20009c84 	.word	0x20009c84

00012588 <bt_att_req_alloc>:
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
	struct bt_att_req *req = NULL;
   12588:	2300      	movs	r3, #0
{
   1258a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1258c:	4605      	mov	r5, r0
   1258e:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   12590:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   12592:	f007 f88d 	bl	196b0 <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   12596:	4b0b      	ldr	r3, [pc, #44]	; (125c4 <bt_att_req_alloc+0x3c>)
		 */
		timeout = K_NO_WAIT;
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   12598:	a901      	add	r1, sp, #4
	if (k_current_get() == att_handle_rsp_thread) {
   1259a:	681b      	ldr	r3, [r3, #0]
   1259c:	4283      	cmp	r3, r0
		timeout = K_NO_WAIT;
   1259e:	bf04      	itt	eq
   125a0:	2500      	moveq	r5, #0
   125a2:	462c      	moveq	r4, r5
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   125a4:	462a      	mov	r2, r5
   125a6:	4623      	mov	r3, r4
   125a8:	4807      	ldr	r0, [pc, #28]	; (125c8 <bt_att_req_alloc+0x40>)
   125aa:	f006 f957 	bl	1885c <k_mem_slab_alloc>
   125ae:	4601      	mov	r1, r0
   125b0:	b930      	cbnz	r0, 125c0 <bt_att_req_alloc+0x38>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   125b2:	221c      	movs	r2, #28
   125b4:	9801      	ldr	r0, [sp, #4]
   125b6:	f009 f997 	bl	1b8e8 <memset>

	return req;
   125ba:	9801      	ldr	r0, [sp, #4]
}
   125bc:	b003      	add	sp, #12
   125be:	bd30      	pop	{r4, r5, pc}
		return NULL;
   125c0:	2000      	movs	r0, #0
   125c2:	e7fb      	b.n	125bc <bt_att_req_alloc+0x34>
   125c4:	20009cc0 	.word	0x20009cc0
   125c8:	200086c8 	.word	0x200086c8

000125cc <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   125cc:	b507      	push	{r0, r1, r2, lr}
	BT_DBG("req %p", req);

	if (req->buf) {
   125ce:	6883      	ldr	r3, [r0, #8]
{
   125d0:	9001      	str	r0, [sp, #4]
	if (req->buf) {
   125d2:	b14b      	cbz	r3, 125e8 <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   125d4:	6958      	ldr	r0, [r3, #20]
   125d6:	f7ff f8a5 	bl	11724 <tx_meta_data_free>
		net_buf_unref(req->buf);
   125da:	9b01      	ldr	r3, [sp, #4]
   125dc:	6898      	ldr	r0, [r3, #8]
   125de:	f002 ffa5 	bl	1552c <net_buf_unref>
		req->buf = NULL;
   125e2:	2200      	movs	r2, #0
   125e4:	9b01      	ldr	r3, [sp, #4]
   125e6:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   125e8:	4803      	ldr	r0, [pc, #12]	; (125f8 <bt_att_req_free+0x2c>)
   125ea:	a901      	add	r1, sp, #4
   125ec:	f00c fb43 	bl	1ec76 <k_mem_slab_free>
}
   125f0:	b003      	add	sp, #12
   125f2:	f85d fb04 	ldr.w	pc, [sp], #4
   125f6:	bf00      	nop
   125f8:	200086c8 	.word	0x200086c8

000125fc <att_handle_rsp>:
{
   125fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12600:	4604      	mov	r4, r0
   12602:	b083      	sub	sp, #12
	k_work_cancel_delayable(&chan->timeout_work);
   12604:	30b0      	adds	r0, #176	; 0xb0
{
   12606:	af02      	add	r7, sp, #8
   12608:	460e      	mov	r6, r1
   1260a:	4690      	mov	r8, r2
   1260c:	461d      	mov	r5, r3
	k_work_cancel_delayable(&chan->timeout_work);
   1260e:	f00c fd24 	bl	1f05a <k_work_cancel_delayable>
	if (!chan->req) {
   12612:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   12616:	b9b8      	cbnz	r0, 12648 <att_handle_rsp+0x4c>
		BT_WARN("No pending ATT request");
   12618:	466d      	mov	r5, sp
   1261a:	b088      	sub	sp, #32
   1261c:	aa02      	add	r2, sp, #8
   1261e:	4b1c      	ldr	r3, [pc, #112]	; (12690 <att_handle_rsp+0x94>)
   12620:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   12624:	6153      	str	r3, [r2, #20]
   12626:	4b1b      	ldr	r3, [pc, #108]	; (12694 <att_handle_rsp+0x98>)
   12628:	481b      	ldr	r0, [pc, #108]	; (12698 <att_handle_rsp+0x9c>)
   1262a:	6193      	str	r3, [r2, #24]
   1262c:	2303      	movs	r3, #3
   1262e:	f842 3f10 	str.w	r3, [r2, #16]!
   12632:	f009 ffb9 	bl	1c5a8 <z_log_msg_static_create.constprop.0>
   12636:	46ad      	mov	sp, r5
	att_req_send_process(chan->att);
   12638:	6820      	ldr	r0, [r4, #0]
   1263a:	f00a f93b 	bl	1c8b4 <att_req_send_process>
}
   1263e:	2000      	movs	r0, #0
   12640:	3704      	adds	r7, #4
   12642:	46bd      	mov	sp, r7
   12644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (chan->req == &cancel) {
   12648:	4b14      	ldr	r3, [pc, #80]	; (1269c <att_handle_rsp+0xa0>)
   1264a:	f04f 0900 	mov.w	r9, #0
   1264e:	4298      	cmp	r0, r3
   12650:	d102      	bne.n	12658 <att_handle_rsp+0x5c>
		chan->req = NULL;
   12652:	f8c4 9094 	str.w	r9, [r4, #148]	; 0x94
   12656:	e7ef      	b.n	12638 <att_handle_rsp+0x3c>
	func = chan->req->func;
   12658:	f8d0 a004 	ldr.w	sl, [r0, #4]
	chan->req->func = NULL;
   1265c:	f8c0 9004 	str.w	r9, [r0, #4]
	params = chan->req->user_data;
   12660:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   12664:	f8d0 b018 	ldr.w	fp, [r0, #24]
	bt_att_req_free(chan->req);
   12668:	f7ff ffb0 	bl	125cc <bt_att_req_free>
	att_req_send_process(chan->att);
   1266c:	6820      	ldr	r0, [r4, #0]
	chan->req = NULL;
   1266e:	f8c4 9094 	str.w	r9, [r4, #148]	; 0x94
	att_req_send_process(chan->att);
   12672:	f00a f91f 	bl	1c8b4 <att_req_send_process>
	if (func) {
   12676:	f1ba 0f00 	cmp.w	sl, #0
   1267a:	d0e0      	beq.n	1263e <att_handle_rsp+0x42>
		func(chan->att->conn, err, pdu, len, params);
   1267c:	6820      	ldr	r0, [r4, #0]
   1267e:	f8cd b000 	str.w	fp, [sp]
   12682:	4643      	mov	r3, r8
   12684:	4632      	mov	r2, r6
   12686:	4629      	mov	r1, r5
   12688:	6800      	ldr	r0, [r0, #0]
   1268a:	47d0      	blx	sl
   1268c:	e7d7      	b.n	1263e <att_handle_rsp+0x42>
   1268e:	bf00      	nop
   12690:	00022d21 	.word	0x00022d21
   12694:	00022d65 	.word	0x00022d65
   12698:	0001fc3c 	.word	0x0001fc3c
   1269c:	20009cc4 	.word	0x20009cc4

000126a0 <bt_att_disconnected>:
{
   126a0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
   126a4:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
   126a8:	4604      	mov	r4, r0
	if (!att_chan->att) {
   126aa:	2e00      	cmp	r6, #0
   126ac:	d056      	beq.n	1275c <bt_att_disconnected+0xbc>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   126ae:	f100 01dc 	add.w	r1, r0, #220	; 0xdc
   126b2:	f106 0024 	add.w	r0, r6, #36	; 0x24
   126b6:	f00a f846 	bl	1c746 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   126ba:	1f27      	subs	r7, r4, #4
   126bc:	f104 0894 	add.w	r8, r4, #148	; 0x94
   126c0:	2200      	movs	r2, #0
   126c2:	2300      	movs	r3, #0
   126c4:	4640      	mov	r0, r8
   126c6:	f00b f99e 	bl	1da06 <net_buf_get>
   126ca:	4605      	mov	r5, r0
   126cc:	bb28      	cbnz	r0, 1271a <bt_att_disconnected+0x7a>
	if (chan->req) {
   126ce:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   126d2:	b12b      	cbz	r3, 126e0 <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   126d4:	4602      	mov	r2, r0
   126d6:	4601      	mov	r1, r0
   126d8:	230e      	movs	r3, #14
   126da:	4638      	mov	r0, r7
   126dc:	f7ff ff8e 	bl	125fc <att_handle_rsp>
	chan->att = NULL;
   126e0:	2300      	movs	r3, #0
   126e2:	f844 3c04 	str.w	r3, [r4, #-4]
	if (!sys_slist_is_empty(&att->chans)) {
   126e6:	6a73      	ldr	r3, [r6, #36]	; 0x24
   126e8:	2b00      	cmp	r3, #0
   126ea:	d137      	bne.n	1275c <bt_att_disconnected+0xbc>
	att_reset(att);
   126ec:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   126ee:	9803      	ldr	r0, [sp, #12]
   126f0:	2200      	movs	r2, #0
   126f2:	2300      	movs	r3, #0
   126f4:	300c      	adds	r0, #12
   126f6:	f00b f986 	bl	1da06 <net_buf_get>
   126fa:	4605      	mov	r5, r0
   126fc:	b9a0      	cbnz	r0, 12728 <bt_att_disconnected+0x88>
	while (!sys_slist_is_empty(&att->reqs)) {
   126fe:	9803      	ldr	r0, [sp, #12]
	return list->head;
   12700:	6845      	ldr	r5, [r0, #4]
   12702:	b9c5      	cbnz	r5, 12736 <bt_att_disconnected+0x96>
	att->conn = NULL;
   12704:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   12706:	a903      	add	r1, sp, #12
   12708:	4816      	ldr	r0, [pc, #88]	; (12764 <bt_att_disconnected+0xc4>)
   1270a:	f00c fab4 	bl	1ec76 <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   1270e:	6820      	ldr	r0, [r4, #0]
}
   12710:	b004      	add	sp, #16
   12712:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   12716:	f000 bfd1 	b.w	136bc <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1271a:	6968      	ldr	r0, [r5, #20]
   1271c:	f7ff f802 	bl	11724 <tx_meta_data_free>
		net_buf_unref(buf);
   12720:	4628      	mov	r0, r5
   12722:	f002 ff03 	bl	1552c <net_buf_unref>
   12726:	e7cb      	b.n	126c0 <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   12728:	6968      	ldr	r0, [r5, #20]
   1272a:	f7fe fffb 	bl	11724 <tx_meta_data_free>
		net_buf_unref(buf);
   1272e:	4628      	mov	r0, r5
   12730:	f002 fefc 	bl	1552c <net_buf_unref>
   12734:	e7db      	b.n	126ee <bt_att_disconnected+0x4e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   12736:	6882      	ldr	r2, [r0, #8]
	return node->next;
   12738:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1273a:	4295      	cmp	r5, r2
	list->head = node;
   1273c:	6043      	str	r3, [r0, #4]
	list->tail = node;
   1273e:	bf08      	it	eq
   12740:	6083      	streq	r3, [r0, #8]
		if (req->func) {
   12742:	686e      	ldr	r6, [r5, #4]
   12744:	b136      	cbz	r6, 12754 <bt_att_disconnected+0xb4>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   12746:	69ab      	ldr	r3, [r5, #24]
   12748:	210e      	movs	r1, #14
   1274a:	9300      	str	r3, [sp, #0]
   1274c:	2300      	movs	r3, #0
   1274e:	6800      	ldr	r0, [r0, #0]
   12750:	461a      	mov	r2, r3
   12752:	47b0      	blx	r6
		bt_att_req_free(req);
   12754:	4628      	mov	r0, r5
   12756:	f7ff ff39 	bl	125cc <bt_att_req_free>
   1275a:	e7d0      	b.n	126fe <bt_att_disconnected+0x5e>
}
   1275c:	b004      	add	sp, #16
   1275e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12762:	bf00      	nop
   12764:	20008690 	.word	0x20008690

00012768 <att_timeout>:
{
   12768:	b5b0      	push	{r4, r5, r7, lr}
   1276a:	af00      	add	r7, sp, #0
	BT_ERR("ATT Timeout");
   1276c:	466d      	mov	r5, sp
   1276e:	b088      	sub	sp, #32
{
   12770:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
   12772:	466a      	mov	r2, sp
   12774:	4b09      	ldr	r3, [pc, #36]	; (1279c <att_timeout+0x34>)
   12776:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1277a:	6153      	str	r3, [r2, #20]
   1277c:	4b08      	ldr	r3, [pc, #32]	; (127a0 <att_timeout+0x38>)
   1277e:	4809      	ldr	r0, [pc, #36]	; (127a4 <att_timeout+0x3c>)
   12780:	6193      	str	r3, [r2, #24]
   12782:	2303      	movs	r3, #3
   12784:	f842 3f10 	str.w	r3, [r2, #16]!
   12788:	f009 ff0e 	bl	1c5a8 <z_log_msg_static_create.constprop.0>
	bt_att_disconnected(&chan->chan.chan);
   1278c:	f1a4 00ac 	sub.w	r0, r4, #172	; 0xac
   12790:	46ad      	mov	sp, r5
   12792:	f7ff ff85 	bl	126a0 <bt_att_disconnected>
}
   12796:	46bd      	mov	sp, r7
   12798:	bdb0      	pop	{r4, r5, r7, pc}
   1279a:	bf00      	nop
   1279c:	00022d3c 	.word	0x00022d3c
   127a0:	00022d4c 	.word	0x00022d4c
   127a4:	0001fc3c 	.word	0x0001fc3c

000127a8 <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   127a8:	b570      	push	{r4, r5, r6, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   127aa:	4606      	mov	r6, r0
   127ac:	4d13      	ldr	r5, [pc, #76]	; (127fc <find_cf_cfg+0x54>)
   127ae:	b140      	cbz	r0, 127c2 <find_cf_cfg+0x1a>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
				return cfg;
			}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   127b0:	462a      	mov	r2, r5
   127b2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   127b6:	1e6c      	subs	r4, r5, #1
   127b8:	f009 fd1e 	bl	1c1f8 <bt_conn_is_peer_addr_le>
   127bc:	b198      	cbz	r0, 127e6 <find_cf_cfg+0x3e>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   127be:	4620      	mov	r0, r4
   127c0:	e00c      	b.n	127dc <find_cf_cfg+0x34>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   127c2:	4628      	mov	r0, r5
   127c4:	490e      	ldr	r1, [pc, #56]	; (12800 <find_cf_cfg+0x58>)
   127c6:	f00a fb12 	bl	1cdee <bt_addr_le_eq>
   127ca:	b940      	cbnz	r0, 127de <find_cf_cfg+0x36>
   127cc:	490c      	ldr	r1, [pc, #48]	; (12800 <find_cf_cfg+0x58>)
   127ce:	f105 0010 	add.w	r0, r5, #16
   127d2:	f00a fb0c 	bl	1cdee <bt_addr_le_eq>
   127d6:	b120      	cbz	r0, 127e2 <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   127d8:	f105 000f 	add.w	r0, r5, #15
			return cfg;
		}
	}

	return NULL;
}
   127dc:	bd70      	pop	{r4, r5, r6, pc}
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   127de:	1e68      	subs	r0, r5, #1
   127e0:	e7fc      	b.n	127dc <find_cf_cfg+0x34>
	return NULL;
   127e2:	2000      	movs	r0, #0
   127e4:	e7fa      	b.n	127dc <find_cf_cfg+0x34>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   127e6:	4630      	mov	r0, r6
   127e8:	7c21      	ldrb	r1, [r4, #16]
   127ea:	f104 0211 	add.w	r2, r4, #17
   127ee:	f009 fd03 	bl	1c1f8 <bt_conn_is_peer_addr_le>
   127f2:	2800      	cmp	r0, #0
   127f4:	d0f5      	beq.n	127e2 <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   127f6:	f104 0010 	add.w	r0, r4, #16
   127fa:	e7ef      	b.n	127dc <find_cf_cfg+0x34>
   127fc:	20009cf9 	.word	0x20009cf9
   12800:	000215de 	.word	0x000215de

00012804 <find_sc_cfg>:
{
   12804:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
   12806:	4c0e      	ldr	r4, [pc, #56]	; (12840 <find_sc_cfg+0x3c>)
{
   12808:	4605      	mov	r5, r0
		if (id == sc_cfg[i].id &&
   1280a:	7823      	ldrb	r3, [r4, #0]
{
   1280c:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
   1280e:	4283      	cmp	r3, r0
   12810:	d00c      	beq.n	1282c <find_sc_cfg+0x28>
   12812:	7b23      	ldrb	r3, [r4, #12]
   12814:	42ab      	cmp	r3, r5
   12816:	d110      	bne.n	1283a <find_sc_cfg+0x36>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   12818:	4631      	mov	r1, r6
   1281a:	480a      	ldr	r0, [pc, #40]	; (12844 <find_sc_cfg+0x40>)
   1281c:	f00a fae7 	bl	1cdee <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   12820:	b158      	cbz	r0, 1283a <find_sc_cfg+0x36>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   12822:	2301      	movs	r3, #1
			return &sc_cfg[i];
   12824:	220c      	movs	r2, #12
   12826:	fb02 4003 	mla	r0, r2, r3, r4
   1282a:	e007      	b.n	1283c <find_sc_cfg+0x38>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   1282c:	1c60      	adds	r0, r4, #1
   1282e:	f00a fade 	bl	1cdee <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   12832:	2800      	cmp	r0, #0
   12834:	d0ed      	beq.n	12812 <find_sc_cfg+0xe>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   12836:	2300      	movs	r3, #0
   12838:	e7f4      	b.n	12824 <find_sc_cfg+0x20>
	return NULL;
   1283a:	2000      	movs	r0, #0
}
   1283c:	bd70      	pop	{r4, r5, r6, pc}
   1283e:	bf00      	nop
   12840:	20009f70 	.word	0x20009f70
   12844:	20009f7d 	.word	0x20009f7d

00012848 <find_ccc_cfg>:
	return next;
}

static struct bt_gatt_ccc_cfg *find_ccc_cfg(const struct bt_conn *conn,
					    struct _bt_gatt_ccc *ccc)
{
   12848:	b538      	push	{r3, r4, r5, lr}
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];

		if (conn) {
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
						    &cfg->peer)) {
   1284a:	1c4a      	adds	r2, r1, #1
{
   1284c:	460c      	mov	r4, r1
		if (conn) {
   1284e:	4605      	mov	r5, r0
   12850:	b968      	cbnz	r0, 1286e <find_ccc_cfg+0x26>
				return cfg;
			}
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   12852:	4610      	mov	r0, r2
   12854:	490d      	ldr	r1, [pc, #52]	; (1288c <find_ccc_cfg+0x44>)
   12856:	f00a faca 	bl	1cdee <bt_addr_le_eq>
   1285a:	b930      	cbnz	r0, 1286a <find_ccc_cfg+0x22>
   1285c:	490b      	ldr	r1, [pc, #44]	; (1288c <find_ccc_cfg+0x44>)
   1285e:	f104 000b 	add.w	r0, r4, #11
   12862:	f00a fac4 	bl	1cdee <bt_addr_le_eq>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   12866:	b170      	cbz	r0, 12886 <find_ccc_cfg+0x3e>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   12868:	340a      	adds	r4, #10
   1286a:	4620      	mov	r0, r4
   1286c:	e00c      	b.n	12888 <find_ccc_cfg+0x40>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1286e:	7809      	ldrb	r1, [r1, #0]
   12870:	f009 fcc2 	bl	1c1f8 <bt_conn_is_peer_addr_le>
   12874:	2800      	cmp	r0, #0
   12876:	d1f8      	bne.n	1286a <find_ccc_cfg+0x22>
   12878:	4628      	mov	r0, r5
   1287a:	7aa1      	ldrb	r1, [r4, #10]
   1287c:	f104 020b 	add.w	r2, r4, #11
   12880:	f009 fcba 	bl	1c1f8 <bt_conn_is_peer_addr_le>
   12884:	e7ef      	b.n	12866 <find_ccc_cfg+0x1e>
			return cfg;
		}
	}

	return NULL;
   12886:	2000      	movs	r0, #0
}
   12888:	bd38      	pop	{r3, r4, r5, pc}
   1288a:	bf00      	nop
   1288c:	000215de 	.word	0x000215de

00012890 <bt_gatt_attr_write_ccc>:
}

ssize_t bt_gatt_attr_write_ccc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, const void *buf,
			       uint16_t len, uint16_t offset, uint8_t flags)
{
   12890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12894:	af00      	add	r7, sp, #0
   12896:	461e      	mov	r6, r3
   12898:	8c3b      	ldrh	r3, [r7, #32]
   1289a:	4682      	mov	sl, r0
   1289c:	4688      	mov	r8, r1
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1289e:	f8d1 900c 	ldr.w	r9, [r1, #12]
	struct bt_gatt_ccc_cfg *cfg;
	bool value_changed;
	uint16_t value;

	if (offset) {
   128a2:	2b00      	cmp	r3, #0
   128a4:	d151      	bne.n	1294a <bt_gatt_attr_write_ccc+0xba>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (!len || len > sizeof(uint16_t)) {
   128a6:	1e73      	subs	r3, r6, #1
   128a8:	2b01      	cmp	r3, #1
   128aa:	d851      	bhi.n	12950 <bt_gatt_attr_write_ccc+0xc0>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (len < sizeof(uint16_t)) {
   128ac:	2e01      	cmp	r6, #1
		value = *(uint8_t *)buf;
	} else {
		value = sys_get_le16(buf);
	}

	cfg = find_ccc_cfg(conn, ccc);
   128ae:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
   128b0:	7815      	ldrb	r5, [r2, #0]
   128b2:	bf18      	it	ne
   128b4:	8815      	ldrhne	r5, [r2, #0]
	cfg = find_ccc_cfg(conn, ccc);
   128b6:	f7ff ffc7 	bl	12848 <find_ccc_cfg>
	if (!cfg) {
   128ba:	4604      	mov	r4, r0
   128bc:	bb20      	cbnz	r0, 12908 <bt_gatt_attr_write_ccc+0x78>
		/* If there's no existing entry, but the new value is zero,
		 * we don't need to do anything, since a disabled CCC is
		 * behaviorally the same as no written CCC.
		 */
		if (!value) {
   128be:	b91d      	cbnz	r5, 128c8 <bt_gatt_attr_write_ccc+0x38>
			return len;
   128c0:	4630      	mov	r0, r6
	if (!value) {
		clear_ccc_cfg(cfg);
	}

	return len;
}
   128c2:	46bd      	mov	sp, r7
   128c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   128c8:	4649      	mov	r1, r9
   128ca:	f7ff ffbd 	bl	12848 <find_ccc_cfg>
		if (!cfg) {
   128ce:	4604      	mov	r4, r0
   128d0:	b990      	cbnz	r0, 128f8 <bt_gatt_attr_write_ccc+0x68>
			BT_WARN("No space to store CCC cfg");
   128d2:	466c      	mov	r4, sp
   128d4:	b088      	sub	sp, #32
   128d6:	466a      	mov	r2, sp
   128d8:	4b1f      	ldr	r3, [pc, #124]	; (12958 <bt_gatt_attr_write_ccc+0xc8>)
   128da:	4820      	ldr	r0, [pc, #128]	; (1295c <bt_gatt_attr_write_ccc+0xcc>)
   128dc:	6153      	str	r3, [r2, #20]
   128de:	4b20      	ldr	r3, [pc, #128]	; (12960 <bt_gatt_attr_write_ccc+0xd0>)
   128e0:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   128e4:	6193      	str	r3, [r2, #24]
   128e6:	2303      	movs	r3, #3
   128e8:	f842 3f10 	str.w	r3, [r2, #16]!
   128ec:	f00a fa8a 	bl	1ce04 <z_log_msg_static_create.constprop.0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   128f0:	f06f 0010 	mvn.w	r0, #16
   128f4:	46a5      	mov	sp, r4
   128f6:	e7e4      	b.n	128c2 <bt_gatt_attr_write_ccc+0x32>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   128f8:	f10a 0188 	add.w	r1, sl, #136	; 0x88
   128fc:	3001      	adds	r0, #1
   128fe:	f00a fa7e 	bl	1cdfe <bt_addr_le_copy>
		cfg->id = conn->id;
   12902:	f89a 3008 	ldrb.w	r3, [sl, #8]
   12906:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   12908:	f8d9 301c 	ldr.w	r3, [r9, #28]
   1290c:	b98b      	cbnz	r3, 12932 <bt_gatt_attr_write_ccc+0xa2>
	cfg->value = value;
   1290e:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   12910:	f8b9 3014 	ldrh.w	r3, [r9, #20]
   12914:	42ab      	cmp	r3, r5
   12916:	d003      	beq.n	12920 <bt_gatt_attr_write_ccc+0x90>
		gatt_ccc_changed(attr, ccc);
   12918:	4649      	mov	r1, r9
   1291a:	4640      	mov	r0, r8
   1291c:	f00a f9ef 	bl	1ccfe <gatt_ccc_changed>
	if (!value) {
   12920:	2d00      	cmp	r5, #0
   12922:	d1cd      	bne.n	128c0 <bt_gatt_attr_write_ccc+0x30>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   12924:	490f      	ldr	r1, [pc, #60]	; (12964 <bt_gatt_attr_write_ccc+0xd4>)
   12926:	1c60      	adds	r0, r4, #1
   12928:	f00a fa69 	bl	1cdfe <bt_addr_le_copy>
	cfg->id = 0U;
   1292c:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1292e:	8125      	strh	r5, [r4, #8]
}
   12930:	e7c6      	b.n	128c0 <bt_gatt_attr_write_ccc+0x30>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   12932:	462a      	mov	r2, r5
   12934:	4641      	mov	r1, r8
   12936:	4650      	mov	r0, sl
   12938:	4798      	blx	r3
		if (write < 0) {
   1293a:	2800      	cmp	r0, #0
   1293c:	dbc1      	blt.n	128c2 <bt_gatt_attr_write_ccc+0x32>
		if (write != sizeof(value) && write != 1) {
   1293e:	3801      	subs	r0, #1
   12940:	2801      	cmp	r0, #1
   12942:	d9e4      	bls.n	1290e <bt_gatt_attr_write_ccc+0x7e>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   12944:	f06f 000d 	mvn.w	r0, #13
   12948:	e7bb      	b.n	128c2 <bt_gatt_attr_write_ccc+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1294a:	f06f 0006 	mvn.w	r0, #6
   1294e:	e7b8      	b.n	128c2 <bt_gatt_attr_write_ccc+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   12950:	f06f 000c 	mvn.w	r0, #12
   12954:	e7b5      	b.n	128c2 <bt_gatt_attr_write_ccc+0x32>
   12956:	bf00      	nop
   12958:	00022ddd 	.word	0x00022ddd
   1295c:	0001fc6c 	.word	0x0001fc6c
   12960:	00022fde 	.word	0x00022fde
   12964:	000215de 	.word	0x000215de

00012968 <clear_cf_cfg>:
{
   12968:	b510      	push	{r4, lr}
   1296a:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1296c:	4909      	ldr	r1, [pc, #36]	; (12994 <clear_cf_cfg+0x2c>)
   1296e:	3001      	adds	r0, #1
   12970:	f00a fa45 	bl	1cdfe <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   12974:	f104 0008 	add.w	r0, r4, #8
   12978:	2201      	movs	r2, #1
   1297a:	2100      	movs	r1, #0
   1297c:	f008 ffb4 	bl	1b8e8 <memset>
   12980:	2300      	movs	r3, #0
   12982:	340c      	adds	r4, #12
   12984:	e8d4 2fef 	ldaex	r2, [r4]
   12988:	e8c4 3fe1 	stlex	r1, r3, [r4]
   1298c:	2900      	cmp	r1, #0
   1298e:	d1f9      	bne.n	12984 <clear_cf_cfg+0x1c>
}
   12990:	bd10      	pop	{r4, pc}
   12992:	bf00      	nop
   12994:	000215de 	.word	0x000215de

00012998 <sc_save>:
{
   12998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1299c:	af00      	add	r7, sp, #0
   1299e:	4681      	mov	r9, r0
   129a0:	4688      	mov	r8, r1
   129a2:	4616      	mov	r6, r2
   129a4:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   129a6:	f7ff ff2d 	bl	12804 <find_sc_cfg>
	if (!cfg) {
   129aa:	4604      	mov	r4, r0
   129ac:	b9e0      	cbnz	r0, 129e8 <sc_save+0x50>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   129ae:	4915      	ldr	r1, [pc, #84]	; (12a04 <sc_save+0x6c>)
   129b0:	f7ff ff28 	bl	12804 <find_sc_cfg>
		if (!cfg) {
   129b4:	4604      	mov	r4, r0
   129b6:	b990      	cbnz	r0, 129de <sc_save+0x46>
			BT_ERR("unable to save SC: no cfg left");
   129b8:	466c      	mov	r4, sp
   129ba:	b088      	sub	sp, #32
   129bc:	466a      	mov	r2, sp
   129be:	4b12      	ldr	r3, [pc, #72]	; (12a08 <sc_save+0x70>)
   129c0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   129c4:	6153      	str	r3, [r2, #20]
   129c6:	4b11      	ldr	r3, [pc, #68]	; (12a0c <sc_save+0x74>)
   129c8:	4811      	ldr	r0, [pc, #68]	; (12a10 <sc_save+0x78>)
   129ca:	6193      	str	r3, [r2, #24]
   129cc:	2303      	movs	r3, #3
   129ce:	f842 3f10 	str.w	r3, [r2, #16]!
   129d2:	f00a fa17 	bl	1ce04 <z_log_msg_static_create.constprop.0>
   129d6:	46a5      	mov	sp, r4
}
   129d8:	46bd      	mov	sp, r7
   129da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		bt_addr_le_copy(&cfg->peer, peer);
   129de:	4641      	mov	r1, r8
		cfg->id = id;
   129e0:	f800 9b01 	strb.w	r9, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   129e4:	f00a fa0b 	bl	1cdfe <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   129e8:	8922      	ldrh	r2, [r4, #8]
   129ea:	8963      	ldrh	r3, [r4, #10]
   129ec:	b91a      	cbnz	r2, 129f6 <sc_save+0x5e>
   129ee:	b92b      	cbnz	r3, 129fc <sc_save+0x64>
		cfg->data.start = start;
   129f0:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   129f2:	8165      	strh	r5, [r4, #10]
   129f4:	e7f0      	b.n	129d8 <sc_save+0x40>
	if (new_start >= *start && new_end <= *end) {
   129f6:	4296      	cmp	r6, r2
		*start = new_start;
   129f8:	bf38      	it	cc
   129fa:	8126      	strhcc	r6, [r4, #8]
	if (new_start >= *start && new_end <= *end) {
   129fc:	429d      	cmp	r5, r3
   129fe:	d9eb      	bls.n	129d8 <sc_save+0x40>
   12a00:	e7f7      	b.n	129f2 <sc_save+0x5a>
   12a02:	bf00      	nop
   12a04:	000215de 	.word	0x000215de
   12a08:	00022dfb 	.word	0x00022dfb
   12a0c:	00022ff5 	.word	0x00022ff5
   12a10:	0001fc6c 	.word	0x0001fc6c

00012a14 <cf_write>:
{
   12a14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12a18:	af00      	add	r7, sp, #0
   12a1a:	4698      	mov	r8, r3
   12a1c:	8c3b      	ldrh	r3, [r7, #32]
   12a1e:	4606      	mov	r6, r0
	if (offset > sizeof(cfg->data)) {
   12a20:	2b01      	cmp	r3, #1
{
   12a22:	4691      	mov	r9, r2
	if (offset > sizeof(cfg->data)) {
   12a24:	d844      	bhi.n	12ab0 <cf_write+0x9c>
	if (offset + len > sizeof(cfg->data)) {
   12a26:	4443      	add	r3, r8
   12a28:	2b01      	cmp	r3, #1
   12a2a:	4645      	mov	r5, r8
   12a2c:	dc43      	bgt.n	12ab6 <cf_write+0xa2>
	cfg = find_cf_cfg(conn);
   12a2e:	f7ff febb 	bl	127a8 <find_cf_cfg>
	if (!cfg) {
   12a32:	4604      	mov	r4, r0
   12a34:	b9c8      	cbnz	r0, 12a6a <cf_write+0x56>
		cfg = find_cf_cfg(NULL);
   12a36:	f7ff feb7 	bl	127a8 <find_cf_cfg>
	if (!cfg) {
   12a3a:	4604      	mov	r4, r0
   12a3c:	b9a8      	cbnz	r0, 12a6a <cf_write+0x56>
		BT_WARN("No space to store Client Supported Features");
   12a3e:	466c      	mov	r4, sp
   12a40:	b088      	sub	sp, #32
   12a42:	466a      	mov	r2, sp
   12a44:	4b1f      	ldr	r3, [pc, #124]	; (12ac4 <cf_write+0xb0>)
   12a46:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   12a4a:	6153      	str	r3, [r2, #20]
   12a4c:	4b1e      	ldr	r3, [pc, #120]	; (12ac8 <cf_write+0xb4>)
   12a4e:	481f      	ldr	r0, [pc, #124]	; (12acc <cf_write+0xb8>)
   12a50:	6193      	str	r3, [r2, #24]
   12a52:	2303      	movs	r3, #3
   12a54:	f842 3f10 	str.w	r3, [r2, #16]!
   12a58:	f00a f9d4 	bl	1ce04 <z_log_msg_static_create.constprop.0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   12a5c:	f06f 0510 	mvn.w	r5, #16
   12a60:	46a5      	mov	sp, r4
}
   12a62:	4628      	mov	r0, r5
   12a64:	46bd      	mov	sp, r7
   12a66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   12a6a:	f1b8 0f00 	cmp.w	r8, #0
   12a6e:	d012      	beq.n	12a96 <cf_write+0x82>
		    !(value[i / 8] & BIT(i % 8))) {
   12a70:	2300      	movs	r3, #0
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   12a72:	7a21      	ldrb	r1, [r4, #8]
		    !(value[i / 8] & BIT(i % 8))) {
   12a74:	f899 2000 	ldrb.w	r2, [r9]
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   12a78:	fa21 f003 	lsr.w	r0, r1, r3
   12a7c:	07c0      	lsls	r0, r0, #31
   12a7e:	d503      	bpl.n	12a88 <cf_write+0x74>
		    !(value[i / 8] & BIT(i % 8))) {
   12a80:	fa22 f003 	lsr.w	r0, r2, r3
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   12a84:	07c0      	lsls	r0, r0, #31
   12a86:	d519      	bpl.n	12abc <cf_write+0xa8>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   12a88:	3301      	adds	r3, #1
   12a8a:	2b03      	cmp	r3, #3
   12a8c:	d1f4      	bne.n	12a78 <cf_write+0x64>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   12a8e:	f002 0207 	and.w	r2, r2, #7
   12a92:	4311      	orrs	r1, r2
   12a94:	7221      	strb	r1, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   12a96:	f106 0188 	add.w	r1, r6, #136	; 0x88
   12a9a:	1c60      	adds	r0, r4, #1
   12a9c:	f00a f9af 	bl	1cdfe <bt_addr_le_copy>
	cfg->id = conn->id;
   12aa0:	4620      	mov	r0, r4
   12aa2:	7a33      	ldrb	r3, [r6, #8]
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   12aa4:	2100      	movs	r1, #0
	cfg->id = conn->id;
   12aa6:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   12aaa:	f00a f9ae 	bl	1ce0a <atomic_set_bit>
	return len;
   12aae:	e7d8      	b.n	12a62 <cf_write+0x4e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   12ab0:	f06f 0506 	mvn.w	r5, #6
   12ab4:	e7d5      	b.n	12a62 <cf_write+0x4e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   12ab6:	f06f 050c 	mvn.w	r5, #12
   12aba:	e7d2      	b.n	12a62 <cf_write+0x4e>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   12abc:	f06f 0512 	mvn.w	r5, #18
   12ac0:	e7cf      	b.n	12a62 <cf_write+0x4e>
   12ac2:	bf00      	nop
   12ac4:	00022e1e 	.word	0x00022e1e
   12ac8:	00022ffd 	.word	0x00022ffd
   12acc:	0001fc6c 	.word	0x0001fc6c

00012ad0 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   12ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   12ad4:	4b28      	ldr	r3, [pc, #160]	; (12b78 <disconnected_cb+0xa8>)
{
   12ad6:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   12ad8:	6882      	ldr	r2, [r0, #8]
{
   12ada:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   12adc:	429a      	cmp	r2, r3
   12ade:	d12b      	bne.n	12b38 <disconnected_cb+0x68>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
   12ae0:	68c5      	ldr	r5, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
   12ae2:	8aab      	ldrh	r3, [r5, #20]
   12ae4:	b343      	cbz	r3, 12b38 <disconnected_cb+0x68>
		return BT_GATT_ITER_CONTINUE;
	}

	/* Checking if all values are disabled */
	value_used = false;
   12ae6:	f04f 0800 	mov.w	r8, #0
   12aea:	1c6c      	adds	r4, r5, #1
   12aec:	f105 0915 	add.w	r9, r5, #21

	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];

		/* Ignore configurations with disabled value */
		if (!cfg->value) {
   12af0:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   12af4:	b19b      	cbz	r3, 12b1e <disconnected_cb+0x4e>
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   12af6:	4622      	mov	r2, r4
   12af8:	4630      	mov	r0, r6
   12afa:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   12afe:	f009 fb7b 	bl	1c1f8 <bt_conn_is_peer_addr_le>
   12b02:	b9e0      	cbnz	r0, 12b3e <disconnected_cb+0x6e>
			struct bt_conn *tmp;

			/* Skip if there is another peer connected */
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   12b04:	4621      	mov	r1, r4
   12b06:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   12b0a:	f7fe fa5f 	bl	10fcc <bt_conn_lookup_addr_le>
			if (tmp) {
   12b0e:	b130      	cbz	r0, 12b1e <disconnected_cb+0x4e>
				if (tmp->state == BT_CONN_CONNECTED) {
   12b10:	7b43      	ldrb	r3, [r0, #13]
					value_used = true;
   12b12:	2b07      	cmp	r3, #7
   12b14:	bf08      	it	eq
   12b16:	f04f 0801 	moveq.w	r8, #1
				}

				bt_conn_unref(tmp);
   12b1a:	f009 fae0 	bl	1c0de <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   12b1e:	340a      	adds	r4, #10
   12b20:	454c      	cmp	r4, r9
   12b22:	d1e5      	bne.n	12af0 <disconnected_cb+0x20>
			}
		}
	}

	/* If all values are now disabled, reset value while disconnected */
	if (!value_used) {
   12b24:	f1b8 0f00 	cmp.w	r8, #0
   12b28:	d106      	bne.n	12b38 <disconnected_cb+0x68>
		ccc->value = 0U;
		if (ccc->cfg_changed) {
   12b2a:	69ab      	ldr	r3, [r5, #24]
		ccc->value = 0U;
   12b2c:	f8a5 8014 	strh.w	r8, [r5, #20]
		if (ccc->cfg_changed) {
   12b30:	b113      	cbz	r3, 12b38 <disconnected_cb+0x68>
			ccc->cfg_changed(attr, ccc->value);
   12b32:	4641      	mov	r1, r8
   12b34:	4638      	mov	r0, r7
   12b36:	4798      	blx	r3

		BT_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   12b38:	2001      	movs	r0, #1
   12b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   12b3e:	f106 0a88 	add.w	sl, r6, #136	; 0x88
   12b42:	4651      	mov	r1, sl
   12b44:	7a30      	ldrb	r0, [r6, #8]
   12b46:	f009 f851 	bl	1bbec <bt_addr_le_is_bonded>
   12b4a:	b978      	cbnz	r0, 12b6c <disconnected_cb+0x9c>
				if (ccc == &sc_ccc) {
   12b4c:	4b0b      	ldr	r3, [pc, #44]	; (12b7c <disconnected_cb+0xac>)
   12b4e:	429d      	cmp	r5, r3
   12b50:	d102      	bne.n	12b58 <disconnected_cb+0x88>
					sc_clear(conn);
   12b52:	4630      	mov	r0, r6
   12b54:	f00a f983 	bl	1ce5e <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   12b58:	4620      	mov	r0, r4
   12b5a:	4909      	ldr	r1, [pc, #36]	; (12b80 <disconnected_cb+0xb0>)
   12b5c:	f00a f94f 	bl	1cdfe <bt_addr_le_copy>
	cfg->id = 0U;
   12b60:	2300      	movs	r3, #0
   12b62:	f804 3c01 	strb.w	r3, [r4, #-1]
	cfg->value = 0U;
   12b66:	f8a4 3007 	strh.w	r3, [r4, #7]
}
   12b6a:	e7d8      	b.n	12b1e <disconnected_cb+0x4e>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   12b6c:	4651      	mov	r1, sl
   12b6e:	4620      	mov	r0, r4
   12b70:	f00a f945 	bl	1cdfe <bt_addr_le_copy>
   12b74:	e7d3      	b.n	12b1e <disconnected_cb+0x4e>
   12b76:	bf00      	nop
   12b78:	00012891 	.word	0x00012891
   12b7c:	2000842c 	.word	0x2000842c
   12b80:	000215de 	.word	0x000215de

00012b84 <read_ppcp>:
{
   12b84:	b513      	push	{r0, r1, r4, lr}
   12b86:	4610      	mov	r0, r2
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   12b88:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
{
   12b8c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   12b90:	4c09      	ldr	r4, [pc, #36]	; (12bb8 <read_ppcp+0x34>)
	if (offset > value_len) {
   12b92:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   12b94:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
   12b98:	d80b      	bhi.n	12bb2 <read_ppcp+0x2e>
	len = MIN(buf_len, value_len - offset);
   12b9a:	f1c1 0408 	rsb	r4, r1, #8
   12b9e:	429c      	cmp	r4, r3
   12ba0:	bfa8      	it	ge
   12ba2:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   12ba4:	4469      	add	r1, sp
   12ba6:	4622      	mov	r2, r4
   12ba8:	f008 fe93 	bl	1b8d2 <memcpy>
}
   12bac:	4620      	mov	r0, r4
   12bae:	b002      	add	sp, #8
   12bb0:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   12bb2:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   12bb6:	e7f9      	b.n	12bac <read_ppcp+0x28>
   12bb8:	00280018 	.word	0x00280018

00012bbc <sc_indicate_rsp>:
{
   12bbc:	b510      	push	{r4, lr}
   12bbe:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12bc0:	4811      	ldr	r0, [pc, #68]	; (12c08 <sc_indicate_rsp+0x4c>)
   12bc2:	e8d0 3fef 	ldaex	r3, [r0]
   12bc6:	f023 0302 	bic.w	r3, r3, #2
   12bca:	e8c0 3fe2 	stlex	r2, r3, [r0]
   12bce:	2a00      	cmp	r2, #0
   12bd0:	d1f7      	bne.n	12bc2 <sc_indicate_rsp+0x6>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12bd2:	e8d0 3faf 	lda	r3, [r0]
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   12bd6:	07da      	lsls	r2, r3, #31
   12bd8:	d504      	bpl.n	12be4 <sc_indicate_rsp+0x28>
	k_work_reschedule(&gatt_sc.work, timeout);
   12bda:	2200      	movs	r2, #0
   12bdc:	2300      	movs	r3, #0
   12bde:	3830      	subs	r0, #48	; 0x30
   12be0:	f006 fa7e 	bl	190e0 <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   12be4:	4620      	mov	r0, r4
   12be6:	f00a f85d 	bl	1cca4 <bt_att_fixed_chan_only>
   12bea:	b160      	cbz	r0, 12c06 <sc_indicate_rsp+0x4a>
		cfg = find_cf_cfg(conn);
   12bec:	4620      	mov	r0, r4
   12bee:	f7ff fddb 	bl	127a8 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   12bf2:	b140      	cbz	r0, 12c06 <sc_indicate_rsp+0x4a>
   12bf4:	7a03      	ldrb	r3, [r0, #8]
   12bf6:	07db      	lsls	r3, r3, #31
   12bf8:	d505      	bpl.n	12c06 <sc_indicate_rsp+0x4a>
}
   12bfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   12bfe:	2100      	movs	r1, #0
   12c00:	300c      	adds	r0, #12
   12c02:	f00a b902 	b.w	1ce0a <atomic_set_bit>
}
   12c06:	bd10      	pop	{r4, pc}
   12c08:	20009700 	.word	0x20009700

00012c0c <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   12c0c:	2201      	movs	r2, #1
{
   12c0e:	b510      	push	{r4, lr}
   12c10:	4b1b      	ldr	r3, [pc, #108]	; (12c80 <bt_gatt_init+0x74>)
   12c12:	e8d3 1fef 	ldaex	r1, [r3]
   12c16:	2900      	cmp	r1, #0
   12c18:	d103      	bne.n	12c22 <bt_gatt_init+0x16>
   12c1a:	e8c3 2fe0 	stlex	r0, r2, [r3]
   12c1e:	2800      	cmp	r0, #0
   12c20:	d1f7      	bne.n	12c12 <bt_gatt_init+0x6>
	if (!atomic_cas(&init, 0, 1)) {
   12c22:	d12c      	bne.n	12c7e <bt_gatt_init+0x72>
   12c24:	4b17      	ldr	r3, [pc, #92]	; (12c84 <bt_gatt_init+0x78>)
   12c26:	e8d3 1fef 	ldaex	r1, [r3]
   12c2a:	2900      	cmp	r1, #0
   12c2c:	d103      	bne.n	12c36 <bt_gatt_init+0x2a>
   12c2e:	e8c3 2fe0 	stlex	r0, r2, [r3]
   12c32:	2800      	cmp	r0, #0
   12c34:	d1f7      	bne.n	12c26 <bt_gatt_init+0x1a>
	if (!atomic_cas(&service_init, 0, 1)) {
   12c36:	d108      	bne.n	12c4a <bt_gatt_init+0x3e>
   12c38:	2000      	movs	r0, #0
   12c3a:	4913      	ldr	r1, [pc, #76]	; (12c88 <bt_gatt_init+0x7c>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   12c3c:	4a13      	ldr	r2, [pc, #76]	; (12c8c <bt_gatt_init+0x80>)
   12c3e:	880b      	ldrh	r3, [r1, #0]
   12c40:	4c13      	ldr	r4, [pc, #76]	; (12c90 <bt_gatt_init+0x84>)
   12c42:	42a2      	cmp	r2, r4
   12c44:	d315      	bcc.n	12c72 <bt_gatt_init+0x66>
   12c46:	b100      	cbz	r0, 12c4a <bt_gatt_init+0x3e>
   12c48:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   12c4a:	2200      	movs	r2, #0
   12c4c:	4b11      	ldr	r3, [pc, #68]	; (12c94 <bt_gatt_init+0x88>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   12c4e:	4912      	ldr	r1, [pc, #72]	; (12c98 <bt_gatt_init+0x8c>)
   12c50:	4812      	ldr	r0, [pc, #72]	; (12c9c <bt_gatt_init+0x90>)
	list->tail = NULL;
   12c52:	e9c3 2200 	strd	r2, r2, [r3]
   12c56:	f00c f9f2 	bl	1f03e <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   12c5a:	f44f 72a4 	mov.w	r2, #328	; 0x148
   12c5e:	2300      	movs	r3, #0
   12c60:	480e      	ldr	r0, [pc, #56]	; (12c9c <bt_gatt_init+0x90>)
   12c62:	f7fa fe95 	bl	d990 <bt_long_wq_schedule>
}
   12c66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
   12c6a:	490d      	ldr	r1, [pc, #52]	; (12ca0 <bt_gatt_init+0x94>)
   12c6c:	480d      	ldr	r0, [pc, #52]	; (12ca4 <bt_gatt_init+0x98>)
   12c6e:	f00c b9e6 	b.w	1f03e <k_work_init_delayable>
		last_static_handle += svc->attr_count;
   12c72:	6850      	ldr	r0, [r2, #4]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   12c74:	3208      	adds	r2, #8
		last_static_handle += svc->attr_count;
   12c76:	4403      	add	r3, r0
   12c78:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   12c7a:	2001      	movs	r0, #1
   12c7c:	e7e1      	b.n	12c42 <bt_gatt_init+0x36>
}
   12c7e:	bd10      	pop	{r4, pc}
   12c80:	20009d1c 	.word	0x20009d1c
   12c84:	20009d18 	.word	0x20009d18
   12c88:	20009f88 	.word	0x20009f88
   12c8c:	0001fbfc 	.word	0x0001fbfc
   12c90:	0001fc24 	.word	0x0001fc24
   12c94:	20009d20 	.word	0x20009d20
   12c98:	0001d0d5 	.word	0x0001d0d5
   12c9c:	20009658 	.word	0x20009658
   12ca0:	00013135 	.word	0x00013135
   12ca4:	200096d0 	.word	0x200096d0

00012ca8 <bt_gatt_attr_get_handle>:
	if (!attr) {
   12ca8:	4603      	mov	r3, r0
{
   12caa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   12cae:	b148      	cbz	r0, 12cc4 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
   12cb0:	8a00      	ldrh	r0, [r0, #16]
   12cb2:	b938      	cbnz	r0, 12cc4 <bt_gatt_attr_get_handle+0x1c>
	uint16_t handle = 1;
   12cb4:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   12cb6:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   12cba:	4911      	ldr	r1, [pc, #68]	; (12d00 <bt_gatt_attr_get_handle+0x58>)
   12cbc:	f8df e044 	ldr.w	lr, [pc, #68]	; 12d04 <bt_gatt_attr_get_handle+0x5c>
   12cc0:	4571      	cmp	r1, lr
   12cc2:	d301      	bcc.n	12cc8 <bt_gatt_attr_get_handle+0x20>
}
   12cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   12cc8:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   12ccc:	42bb      	cmp	r3, r7
   12cce:	d304      	bcc.n	12cda <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   12cd0:	fb0c 7206 	mla	r2, ip, r6, r7
   12cd4:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   12cd6:	4293      	cmp	r3, r2
   12cd8:	d90e      	bls.n	12cf8 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
   12cda:	4434      	add	r4, r6
   12cdc:	b2a2      	uxth	r2, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   12cde:	4614      	mov	r4, r2
   12ce0:	3108      	adds	r1, #8
   12ce2:	e7ed      	b.n	12cc0 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   12ce4:	fb0c 7805 	mla	r8, ip, r5, r7
   12ce8:	4543      	cmp	r3, r8
   12cea:	d007      	beq.n	12cfc <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   12cec:	3501      	adds	r5, #1
   12cee:	1962      	adds	r2, r4, r5
   12cf0:	42b5      	cmp	r5, r6
   12cf2:	b292      	uxth	r2, r2
   12cf4:	d1f6      	bne.n	12ce4 <bt_gatt_attr_get_handle+0x3c>
   12cf6:	e7f2      	b.n	12cde <bt_gatt_attr_get_handle+0x36>
   12cf8:	2500      	movs	r5, #0
   12cfa:	e7f8      	b.n	12cee <bt_gatt_attr_get_handle+0x46>
   12cfc:	4610      	mov	r0, r2
   12cfe:	e7e1      	b.n	12cc4 <bt_gatt_attr_get_handle+0x1c>
   12d00:	0001fbfc 	.word	0x0001fbfc
   12d04:	0001fc24 	.word	0x0001fc24

00012d08 <bt_gatt_foreach_attr_type>:
{
   12d08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d0c:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   12d0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
   12d12:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   12d16:	4607      	mov	r7, r0
		num_matches = UINT16_MAX;
   12d18:	2d00      	cmp	r5, #0
   12d1a:	bf08      	it	eq
   12d1c:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   12d1e:	4b24      	ldr	r3, [pc, #144]	; (12db0 <bt_gatt_foreach_attr_type+0xa8>)
{
   12d20:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   12d22:	881b      	ldrh	r3, [r3, #0]
{
   12d24:	9100      	str	r1, [sp, #0]
	if (start_handle <= last_static_handle) {
   12d26:	4283      	cmp	r3, r0
   12d28:	d23c      	bcs.n	12da4 <bt_gatt_foreach_attr_type+0x9c>
}
   12d2a:	b003      	add	sp, #12
   12d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   12d30:	6873      	ldr	r3, [r6, #4]
   12d32:	4423      	add	r3, r4
   12d34:	42bb      	cmp	r3, r7
   12d36:	d232      	bcs.n	12d9e <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
   12d38:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   12d3a:	3608      	adds	r6, #8
   12d3c:	4b1d      	ldr	r3, [pc, #116]	; (12db4 <bt_gatt_foreach_attr_type+0xac>)
   12d3e:	429e      	cmp	r6, r3
   12d40:	d3f6      	bcc.n	12d30 <bt_gatt_foreach_attr_type+0x28>
   12d42:	e7f2      	b.n	12d2a <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   12d44:	4640      	mov	r0, r8
   12d46:	5889      	ldr	r1, [r1, r2]
   12d48:	9301      	str	r3, [sp, #4]
   12d4a:	f008 fe01 	bl	1b950 <bt_uuid_cmp>
   12d4e:	9b01      	ldr	r3, [sp, #4]
   12d50:	b190      	cbz	r0, 12d78 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   12d52:	3401      	adds	r4, #1
   12d54:	f10a 0a01 	add.w	sl, sl, #1
   12d58:	b2a4      	uxth	r4, r4
   12d5a:	6873      	ldr	r3, [r6, #4]
   12d5c:	4553      	cmp	r3, sl
   12d5e:	d9ec      	bls.n	12d3a <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   12d60:	9b00      	ldr	r3, [sp, #0]
   12d62:	429c      	cmp	r4, r3
   12d64:	d8e1      	bhi.n	12d2a <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   12d66:	42bc      	cmp	r4, r7
				if (gatt_foreach_iter(&static_svc->attrs[i],
   12d68:	6831      	ldr	r1, [r6, #0]
	if (handle < start_handle) {
   12d6a:	d3f2      	bcc.n	12d52 <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   12d6c:	fb0b f20a 	mul.w	r2, fp, sl
   12d70:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   12d72:	f1b8 0f00 	cmp.w	r8, #0
   12d76:	d1e5      	bne.n	12d44 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
   12d78:	f1b9 0f00 	cmp.w	r9, #0
   12d7c:	d10b      	bne.n	12d96 <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
   12d7e:	3d01      	subs	r5, #1
	result = func(attr, handle, user_data);
   12d80:	4618      	mov	r0, r3
	*num_matches -= 1;
   12d82:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   12d84:	4621      	mov	r1, r4
   12d86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   12d88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12d8a:	4798      	blx	r3
	if (!*num_matches) {
   12d8c:	2d00      	cmp	r5, #0
   12d8e:	d0cc      	beq.n	12d2a <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   12d90:	2800      	cmp	r0, #0
   12d92:	d1de      	bne.n	12d52 <bt_gatt_foreach_attr_type+0x4a>
   12d94:	e7c9      	b.n	12d2a <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   12d96:	68da      	ldr	r2, [r3, #12]
   12d98:	4591      	cmp	r9, r2
   12d9a:	d1da      	bne.n	12d52 <bt_gatt_foreach_attr_type+0x4a>
   12d9c:	e7ef      	b.n	12d7e <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   12d9e:	f04f 0a00 	mov.w	sl, #0
   12da2:	e7da      	b.n	12d5a <bt_gatt_foreach_attr_type+0x52>
		uint16_t handle = 1;
   12da4:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   12da6:	f04f 0b14 	mov.w	fp, #20
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   12daa:	4e03      	ldr	r6, [pc, #12]	; (12db8 <bt_gatt_foreach_attr_type+0xb0>)
   12dac:	e7c6      	b.n	12d3c <bt_gatt_foreach_attr_type+0x34>
   12dae:	bf00      	nop
   12db0:	20009f88 	.word	0x20009f88
   12db4:	0001fc24 	.word	0x0001fc24
   12db8:	0001fbfc 	.word	0x0001fbfc

00012dbc <db_hash_gen.constprop.0>:
	uint8_t key[16] = {};
   12dbc:	2300      	movs	r3, #0
static void db_hash_gen(bool store)
   12dbe:	b590      	push	{r4, r7, lr}
   12dc0:	b0c9      	sub	sp, #292	; 0x124
   12dc2:	af00      	add	r7, sp, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   12dc4:	4639      	mov	r1, r7
   12dc6:	f107 0270 	add.w	r2, r7, #112	; 0x70
   12dca:	f107 0010 	add.w	r0, r7, #16
	uint8_t key[16] = {};
   12dce:	e9c7 3300 	strd	r3, r3, [r7]
   12dd2:	e9c7 3302 	strd	r3, r3, [r7, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   12dd6:	f008 f9f3 	bl	1b1c0 <tc_cmac_setup>
   12dda:	b998      	cbnz	r0, 12e04 <db_hash_gen.constprop.0+0x48>
		BT_ERR("Unable to setup AES CMAC");
   12ddc:	466c      	mov	r4, sp
   12dde:	b088      	sub	sp, #32
   12de0:	466a      	mov	r2, sp
   12de2:	4b1d      	ldr	r3, [pc, #116]	; (12e58 <db_hash_gen.constprop.0+0x9c>)
		BT_ERR("Unable to calculate hash");
   12de4:	6153      	str	r3, [r2, #20]
   12de6:	4b1d      	ldr	r3, [pc, #116]	; (12e5c <db_hash_gen.constprop.0+0xa0>)
   12de8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12dec:	6193      	str	r3, [r2, #24]
   12dee:	2303      	movs	r3, #3
   12df0:	481b      	ldr	r0, [pc, #108]	; (12e60 <db_hash_gen.constprop.0+0xa4>)
   12df2:	f842 3f10 	str.w	r3, [r2, #16]!
   12df6:	f00a f805 	bl	1ce04 <z_log_msg_static_create.constprop.0>
   12dfa:	46a5      	mov	sp, r4
}
   12dfc:	f507 7792 	add.w	r7, r7, #292	; 0x124
   12e00:	46bd      	mov	sp, r7
   12e02:	bd90      	pop	{r4, r7, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   12e04:	f64f 71ff 	movw	r1, #65535	; 0xffff
   12e08:	2001      	movs	r0, #1
   12e0a:	4a16      	ldr	r2, [pc, #88]	; (12e64 <db_hash_gen.constprop.0+0xa8>)
   12e0c:	f107 0310 	add.w	r3, r7, #16
   12e10:	f00a f955 	bl	1d0be <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   12e14:	4814      	ldr	r0, [pc, #80]	; (12e68 <db_hash_gen.constprop.0+0xac>)
   12e16:	f107 0110 	add.w	r1, r7, #16
   12e1a:	f008 fa66 	bl	1b2ea <tc_cmac_final>
   12e1e:	b920      	cbnz	r0, 12e2a <db_hash_gen.constprop.0+0x6e>
		BT_ERR("Unable to calculate hash");
   12e20:	466c      	mov	r4, sp
   12e22:	b088      	sub	sp, #32
   12e24:	466a      	mov	r2, sp
   12e26:	4b11      	ldr	r3, [pc, #68]	; (12e6c <db_hash_gen.constprop.0+0xb0>)
   12e28:	e7dc      	b.n	12de4 <db_hash_gen.constprop.0+0x28>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   12e2a:	2208      	movs	r2, #8
   12e2c:	4b0e      	ldr	r3, [pc, #56]	; (12e68 <db_hash_gen.constprop.0+0xac>)
   12e2e:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   12e32:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   12e34:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
	for (i = 0; i < (length/2); i++) {
   12e38:	3a01      	subs	r2, #1
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   12e3a:	f803 4b01 	strb.w	r4, [r3], #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   12e3e:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
   12e40:	d1f7      	bne.n	12e32 <db_hash_gen.constprop.0+0x76>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12e42:	4b0b      	ldr	r3, [pc, #44]	; (12e70 <db_hash_gen.constprop.0+0xb4>)
   12e44:	e8d3 1fef 	ldaex	r1, [r3]
   12e48:	f041 0104 	orr.w	r1, r1, #4
   12e4c:	e8c3 1fe2 	stlex	r2, r1, [r3]
   12e50:	2a00      	cmp	r2, #0
   12e52:	d0d3      	beq.n	12dfc <db_hash_gen.constprop.0+0x40>
   12e54:	e7f6      	b.n	12e44 <db_hash_gen.constprop.0+0x88>
   12e56:	bf00      	nop
   12e58:	00022e4e 	.word	0x00022e4e
   12e5c:	00023006 	.word	0x00023006
   12e60:	0001fc6c 	.word	0x0001fc6c
   12e64:	0001cd49 	.word	0x0001cd49
   12e68:	20009648 	.word	0x20009648
   12e6c:	00022e6b 	.word	0x00022e6b
   12e70:	20009700 	.word	0x20009700

00012e74 <db_hash_read>:
{
   12e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   12e76:	4919      	ldr	r1, [pc, #100]	; (12edc <db_hash_read+0x68>)
{
   12e78:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   12e7a:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   12e7e:	4615      	mov	r5, r2
   12e80:	461f      	mov	r7, r3
   12e82:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   12e86:	f00c f8fc 	bl	1f082 <k_work_cancel_delayable_sync>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12e8a:	4b15      	ldr	r3, [pc, #84]	; (12ee0 <db_hash_read+0x6c>)
   12e8c:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   12e90:	0759      	lsls	r1, r3, #29
   12e92:	d401      	bmi.n	12e98 <db_hash_read+0x24>
		db_hash_gen(true);
   12e94:	f7ff ff92 	bl	12dbc <db_hash_gen.constprop.0>
	cfg = find_cf_cfg(conn);
   12e98:	4620      	mov	r0, r4
   12e9a:	f7ff fc85 	bl	127a8 <find_cf_cfg>
	if (cfg &&
   12e9e:	b150      	cbz	r0, 12eb6 <db_hash_read+0x42>
   12ea0:	7a03      	ldrb	r3, [r0, #8]
   12ea2:	07da      	lsls	r2, r3, #31
   12ea4:	d507      	bpl.n	12eb6 <db_hash_read+0x42>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   12ea6:	300c      	adds	r0, #12
   12ea8:	e8d0 3faf 	lda	r3, [r0]
	    CF_ROBUST_CACHING(cfg) &&
   12eac:	07db      	lsls	r3, r3, #31
   12eae:	d402      	bmi.n	12eb6 <db_hash_read+0x42>
		atomic_set_bit(cfg->flags, CF_DB_HASH_READ);
   12eb0:	2101      	movs	r1, #1
   12eb2:	f009 ffaa 	bl	1ce0a <atomic_set_bit>
	if (offset > value_len) {
   12eb6:	2e10      	cmp	r6, #16
   12eb8:	d80c      	bhi.n	12ed4 <db_hash_read+0x60>
	len = MIN(buf_len, value_len - offset);
   12eba:	f1c6 0410 	rsb	r4, r6, #16
   12ebe:	42bc      	cmp	r4, r7
   12ec0:	bfa8      	it	ge
   12ec2:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   12ec4:	4907      	ldr	r1, [pc, #28]	; (12ee4 <db_hash_read+0x70>)
   12ec6:	4622      	mov	r2, r4
   12ec8:	4628      	mov	r0, r5
   12eca:	4431      	add	r1, r6
   12ecc:	f008 fd01 	bl	1b8d2 <memcpy>
}
   12ed0:	4620      	mov	r0, r4
   12ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   12ed4:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   12ed8:	e7fa      	b.n	12ed0 <db_hash_read+0x5c>
   12eda:	bf00      	nop
   12edc:	20009688 	.word	0x20009688
   12ee0:	20009700 	.word	0x20009700
   12ee4:	20009648 	.word	0x20009648

00012ee8 <bt_gatt_attr_next>:
	struct bt_gatt_attr *next = NULL;
   12ee8:	2300      	movs	r3, #0
{
   12eea:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   12eec:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   12eee:	f7ff fedb 	bl	12ca8 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   12ef2:	1c41      	adds	r1, r0, #1
   12ef4:	b289      	uxth	r1, r1
   12ef6:	4608      	mov	r0, r1
   12ef8:	4a03      	ldr	r2, [pc, #12]	; (12f08 <bt_gatt_attr_next+0x20>)
   12efa:	ab01      	add	r3, sp, #4
   12efc:	f00a f8df 	bl	1d0be <bt_gatt_foreach_attr>
}
   12f00:	9801      	ldr	r0, [sp, #4]
   12f02:	b003      	add	sp, #12
   12f04:	f85d fb04 	ldr.w	pc, [sp], #4
   12f08:	0001ccf9 	.word	0x0001ccf9

00012f0c <gatt_indicate>:
{
   12f0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f10:	4615      	mov	r5, r2
   12f12:	468a      	mov	sl, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   12f14:	2294      	movs	r2, #148	; 0x94
   12f16:	6869      	ldr	r1, [r5, #4]
{
   12f18:	af00      	add	r7, sp, #0
   12f1a:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   12f1c:	f00a f8dc 	bl	1d0d8 <bt_gatt_check_perm>
   12f20:	4681      	mov	r9, r0
   12f22:	b1a8      	cbz	r0, 12f50 <gatt_indicate+0x44>
		BT_WARN("Link is not encrypted");
   12f24:	466c      	mov	r4, sp
   12f26:	b088      	sub	sp, #32
   12f28:	466a      	mov	r2, sp
   12f2a:	4b40      	ldr	r3, [pc, #256]	; (1302c <gatt_indicate+0x120>)
   12f2c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   12f30:	6153      	str	r3, [r2, #20]
   12f32:	4b3f      	ldr	r3, [pc, #252]	; (13030 <gatt_indicate+0x124>)
   12f34:	483f      	ldr	r0, [pc, #252]	; (13034 <gatt_indicate+0x128>)
   12f36:	6193      	str	r3, [r2, #24]
   12f38:	2303      	movs	r3, #3
   12f3a:	f842 3f10 	str.w	r3, [r2, #16]!
   12f3e:	f009 ff61 	bl	1ce04 <z_log_msg_static_create.constprop.0>
		return -EPERM;
   12f42:	f04f 35ff 	mov.w	r5, #4294967295
   12f46:	46a5      	mov	sp, r4
}
   12f48:	4628      	mov	r0, r5
   12f4a:	46bd      	mov	sp, r7
   12f4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   12f50:	2202      	movs	r2, #2
   12f52:	4630      	mov	r0, r6
   12f54:	6869      	ldr	r1, [r5, #4]
   12f56:	f00a f8f3 	bl	1d140 <bt_gatt_is_subscribed>
   12f5a:	b990      	cbnz	r0, 12f82 <gatt_indicate+0x76>
			BT_WARN("Device is not subscribed to characteristic");
   12f5c:	466c      	mov	r4, sp
   12f5e:	b088      	sub	sp, #32
   12f60:	466a      	mov	r2, sp
   12f62:	4b35      	ldr	r3, [pc, #212]	; (13038 <gatt_indicate+0x12c>)
   12f64:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   12f68:	6153      	str	r3, [r2, #20]
   12f6a:	4b31      	ldr	r3, [pc, #196]	; (13030 <gatt_indicate+0x124>)
   12f6c:	4831      	ldr	r0, [pc, #196]	; (13034 <gatt_indicate+0x128>)
   12f6e:	6193      	str	r3, [r2, #24]
   12f70:	2303      	movs	r3, #3
   12f72:	f842 3f10 	str.w	r3, [r2, #16]!
   12f76:	f009 ff45 	bl	1ce04 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   12f7a:	f06f 0515 	mvn.w	r5, #21
   12f7e:	46a5      	mov	sp, r4
   12f80:	e7e2      	b.n	12f48 <gatt_indicate+0x3c>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   12f82:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   12f86:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   12f88:	f8b5 8014 	ldrh.w	r8, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   12f8c:	f7ff fafc 	bl	12588 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   12f90:	f108 0802 	add.w	r8, r8, #2
	if (!req) {
   12f94:	4604      	mov	r4, r0
   12f96:	b308      	cbz	r0, 12fdc <gatt_indicate+0xd0>
	req->att_op = op;
   12f98:	211d      	movs	r1, #29
	req->func = func;
   12f9a:	4b28      	ldr	r3, [pc, #160]	; (1303c <gatt_indicate+0x130>)
	req->len = len;
   12f9c:	f8c0 8014 	str.w	r8, [r0, #20]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   12fa0:	4642      	mov	r2, r8
	req->att_op = op;
   12fa2:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
   12fa4:	f8c0 900c 	str.w	r9, [r0, #12]
	req->func = func;
   12fa8:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   12faa:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   12fac:	4630      	mov	r0, r6
   12fae:	f7ff f815 	bl	11fdc <bt_att_create_pdu>
	if (!buf) {
   12fb2:	4680      	mov	r8, r0
   12fb4:	b9a8      	cbnz	r0, 12fe2 <gatt_indicate+0xd6>
		BT_WARN("No buffer available to send indication");
   12fb6:	466d      	mov	r5, sp
   12fb8:	b088      	sub	sp, #32
   12fba:	466a      	mov	r2, sp
   12fbc:	4b20      	ldr	r3, [pc, #128]	; (13040 <gatt_indicate+0x134>)
   12fbe:	481d      	ldr	r0, [pc, #116]	; (13034 <gatt_indicate+0x128>)
   12fc0:	6153      	str	r3, [r2, #20]
   12fc2:	4b1b      	ldr	r3, [pc, #108]	; (13030 <gatt_indicate+0x124>)
   12fc4:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   12fc8:	6193      	str	r3, [r2, #24]
   12fca:	2303      	movs	r3, #3
   12fcc:	f842 3f10 	str.w	r3, [r2, #16]!
   12fd0:	f009 ff18 	bl	1ce04 <z_log_msg_static_create.constprop.0>
		bt_att_req_free(req);
   12fd4:	4620      	mov	r0, r4
   12fd6:	46ad      	mov	sp, r5
   12fd8:	f7ff faf8 	bl	125cc <bt_att_req_free>
		return -ENOMEM;
   12fdc:	f06f 050b 	mvn.w	r5, #11
   12fe0:	e7b2      	b.n	12f48 <gatt_indicate+0x3c>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   12fe2:	2301      	movs	r3, #1
   12fe4:	464a      	mov	r2, r9
   12fe6:	4649      	mov	r1, r9
	return net_buf_simple_add(&buf->b, len);
   12fe8:	f108 0b08 	add.w	fp, r8, #8
   12fec:	f009 fe7d 	bl	1ccea <bt_att_set_tx_meta_data>
   12ff0:	2102      	movs	r1, #2
   12ff2:	4658      	mov	r0, fp
   12ff4:	f00a fda2 	bl	1db3c <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   12ff8:	4681      	mov	r9, r0
   12ffa:	f829 ab02 	strh.w	sl, [r9], #2
   12ffe:	8aa9      	ldrh	r1, [r5, #20]
   13000:	4658      	mov	r0, fp
   13002:	f00a fd9b 	bl	1db3c <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   13006:	8aaa      	ldrh	r2, [r5, #20]
   13008:	6929      	ldr	r1, [r5, #16]
   1300a:	4648      	mov	r0, r9
   1300c:	f008 fc61 	bl	1b8d2 <memcpy>
	err = bt_att_req_send(conn, req);
   13010:	4621      	mov	r1, r4
   13012:	4630      	mov	r0, r6
	req->buf = buf;
   13014:	f8c4 8008 	str.w	r8, [r4, #8]
	err = bt_att_req_send(conn, req);
   13018:	f009 fe2f 	bl	1cc7a <bt_att_req_send>
	if (err) {
   1301c:	4605      	mov	r5, r0
   1301e:	2800      	cmp	r0, #0
   13020:	d092      	beq.n	12f48 <gatt_indicate+0x3c>
		bt_att_req_free(req);
   13022:	4620      	mov	r0, r4
   13024:	f7ff fad2 	bl	125cc <bt_att_req_free>
   13028:	e78e      	b.n	12f48 <gatt_indicate+0x3c>
   1302a:	bf00      	nop
   1302c:	00022e88 	.word	0x00022e88
   13030:	00022fc6 	.word	0x00022fc6
   13034:	0001fc6c 	.word	0x0001fc6c
   13038:	00022ea2 	.word	0x00022ea2
   1303c:	0001cd1b 	.word	0x0001cd1b
   13040:	00022ed1 	.word	0x00022ed1

00013044 <bt_gatt_indicate>:
{
   13044:	b530      	push	{r4, r5, lr}
   13046:	4604      	mov	r4, r0
   13048:	460d      	mov	r5, r1
   1304a:	b08b      	sub	sp, #44	; 0x2c
   1304c:	4b36      	ldr	r3, [pc, #216]	; (13128 <bt_gatt_indicate+0xe4>)
   1304e:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   13052:	075a      	lsls	r2, r3, #29
   13054:	d561      	bpl.n	1311a <bt_gatt_indicate+0xd6>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   13056:	b110      	cbz	r0, 1305e <bt_gatt_indicate+0x1a>
   13058:	7b43      	ldrb	r3, [r0, #13]
   1305a:	2b07      	cmp	r3, #7
   1305c:	d160      	bne.n	13120 <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
   1305e:	6868      	ldr	r0, [r5, #4]
   13060:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   13062:	f7ff fe21 	bl	12ca8 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   13066:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   13068:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1306c:	b33a      	cbz	r2, 130be <bt_gatt_indicate+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1306e:	a905      	add	r1, sp, #20
   13070:	9102      	str	r1, [sp, #8]
   13072:	492e      	ldr	r1, [pc, #184]	; (1312c <bt_gatt_indicate+0xe8>)
	found->attr = NULL;
   13074:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   13076:	9101      	str	r1, [sp, #4]
   13078:	2101      	movs	r1, #1
   1307a:	9100      	str	r1, [sp, #0]
   1307c:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   13080:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   13082:	f7ff fe41 	bl	12d08 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   13086:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   13088:	b91b      	cbnz	r3, 13092 <bt_gatt_indicate+0x4e>
			return -ENOENT;
   1308a:	f06f 0001 	mvn.w	r0, #1
}
   1308e:	b00b      	add	sp, #44	; 0x2c
   13090:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   13092:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   13094:	9b05      	ldr	r3, [sp, #20]
   13096:	a904      	add	r1, sp, #16
   13098:	6818      	ldr	r0, [r3, #0]
   1309a:	2300      	movs	r3, #0
   1309c:	f88d 3010 	strb.w	r3, [sp, #16]
   130a0:	f642 0303 	movw	r3, #10243	; 0x2803
   130a4:	f8ad 3012 	strh.w	r3, [sp, #18]
   130a8:	f008 fc52 	bl	1b950 <bt_uuid_cmp>
   130ac:	b970      	cbnz	r0, 130cc <bt_gatt_indicate+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   130ae:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   130b0:	68c3      	ldr	r3, [r0, #12]
   130b2:	799b      	ldrb	r3, [r3, #6]
   130b4:	069b      	lsls	r3, r3, #26
   130b6:	d405      	bmi.n	130c4 <bt_gatt_indicate+0x80>
			return -EINVAL;
   130b8:	f06f 0015 	mvn.w	r0, #21
   130bc:	e7e7      	b.n	1308e <bt_gatt_indicate+0x4a>
		if (!data.handle) {
   130be:	2800      	cmp	r0, #0
   130c0:	d1e8      	bne.n	13094 <bt_gatt_indicate+0x50>
   130c2:	e7e2      	b.n	1308a <bt_gatt_indicate+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   130c4:	f009 ffad 	bl	1d022 <bt_gatt_attr_value_handle>
   130c8:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   130cc:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   130d0:	b13c      	cbz	r4, 130e2 <bt_gatt_indicate+0x9e>
		params->_ref = 1;
   130d2:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   130d4:	4601      	mov	r1, r0
   130d6:	462a      	mov	r2, r5
   130d8:	4620      	mov	r0, r4
		params->_ref = 1;
   130da:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
   130dc:	f7ff ff16 	bl	12f0c <gatt_indicate>
   130e0:	e7d5      	b.n	1308e <bt_gatt_indicate+0x4a>
	data.err = -ENOTCONN;
   130e2:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   130e6:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   130e8:	2302      	movs	r3, #2
   130ea:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   130ee:	f642 1302 	movw	r3, #10498	; 0x2902
   130f2:	f8ad 3012 	strh.w	r3, [sp, #18]
   130f6:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   130f8:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   130fa:	9302      	str	r3, [sp, #8]
   130fc:	4b0c      	ldr	r3, [pc, #48]	; (13130 <bt_gatt_indicate+0xec>)
   130fe:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13102:	9301      	str	r3, [sp, #4]
   13104:	2301      	movs	r3, #1
   13106:	aa04      	add	r2, sp, #16
   13108:	9300      	str	r3, [sp, #0]
   1310a:	4623      	mov	r3, r4
	data.ind_params = params;
   1310c:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1310e:	f88d 4010 	strb.w	r4, [sp, #16]
   13112:	f7ff fdf9 	bl	12d08 <bt_gatt_foreach_attr_type>
	return data.err;
   13116:	9807      	ldr	r0, [sp, #28]
   13118:	e7b9      	b.n	1308e <bt_gatt_indicate+0x4a>
		return -EAGAIN;
   1311a:	f06f 000a 	mvn.w	r0, #10
   1311e:	e7b6      	b.n	1308e <bt_gatt_indicate+0x4a>
		return -ENOTCONN;
   13120:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   13124:	e7b3      	b.n	1308e <bt_gatt_indicate+0x4a>
   13126:	bf00      	nop
   13128:	200080cc 	.word	0x200080cc
   1312c:	0001cd41 	.word	0x0001cd41
   13130:	000134b9 	.word	0x000134b9

00013134 <sc_process>:
{
   13134:	4603      	mov	r3, r0
   13136:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
   13138:	f850 2c08 	ldr.w	r2, [r0, #-8]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   1313c:	f1a0 0120 	sub.w	r1, r0, #32
	sc_range[0] = sys_cpu_to_le16(sc->start);
   13140:	9201      	str	r2, [sp, #4]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   13142:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13146:	e8d4 2fef 	ldaex	r2, [r4]
   1314a:	f022 0201 	bic.w	r2, r2, #1
   1314e:	e8c4 2fe0 	stlex	r0, r2, [r4]
   13152:	2800      	cmp	r0, #0
   13154:	d1f7      	bne.n	13146 <sc_process+0x12>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   13156:	4a0d      	ldr	r2, [pc, #52]	; (1318c <sc_process+0x58>)
	sc->start = 0U;
   13158:	2000      	movs	r0, #0
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1315a:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   1315e:	4a0c      	ldr	r2, [pc, #48]	; (13190 <sc_process+0x5c>)
	sc->start = 0U;
   13160:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->params.func = sc_indicate_rsp;
   13164:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   13168:	aa01      	add	r2, sp, #4
   1316a:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   1316e:	2204      	movs	r2, #4
	sc->end = 0U;
   13170:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.len = sizeof(sc_range);
   13174:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   13178:	f7ff ff64 	bl	13044 <bt_gatt_indicate>
   1317c:	b918      	cbnz	r0, 13186 <sc_process+0x52>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
   1317e:	2101      	movs	r1, #1
   13180:	4620      	mov	r0, r4
   13182:	f009 fe42 	bl	1ce0a <atomic_set_bit>
}
   13186:	b002      	add	sp, #8
   13188:	bd10      	pop	{r4, pc}
   1318a:	bf00      	nop
   1318c:	000203f4 	.word	0x000203f4
   13190:	00012bbd 	.word	0x00012bbd

00013194 <update_ccc>:
{
   13194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13198:	b083      	sub	sp, #12
   1319a:	4690      	mov	r8, r2
	struct bt_conn *conn = data->conn;
   1319c:	6814      	ldr	r4, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   1319e:	4b44      	ldr	r3, [pc, #272]	; (132b0 <update_ccc+0x11c>)
   131a0:	6882      	ldr	r2, [r0, #8]
{
   131a2:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   131a4:	429a      	cmp	r2, r3
{
   131a6:	af00      	add	r7, sp, #0
	if (attr->write != bt_gatt_attr_write_ccc) {
   131a8:	d17c      	bne.n	132a4 <update_ccc+0x110>
	ccc = attr->user_data;
   131aa:	f8d0 900c 	ldr.w	r9, [r0, #12]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   131ae:	f109 0601 	add.w	r6, r9, #1
   131b2:	f109 0a15 	add.w	sl, r9, #21
		if (!cfg->value ||
   131b6:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   131ba:	b303      	cbz	r3, 131fe <update_ccc+0x6a>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   131bc:	4632      	mov	r2, r6
   131be:	4620      	mov	r0, r4
   131c0:	f816 1c01 	ldrb.w	r1, [r6, #-1]
   131c4:	f009 f818 	bl	1c1f8 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   131c8:	b1c8      	cbz	r0, 131fe <update_ccc+0x6a>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   131ca:	f44f 7295 	mov.w	r2, #298	; 0x12a
   131ce:	4629      	mov	r1, r5
   131d0:	4620      	mov	r0, r4
   131d2:	f009 ff81 	bl	1d0d8 <bt_gatt_check_perm>
		if (err) {
   131d6:	b340      	cbz	r0, 1322a <update_ccc+0x96>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   131d8:	2803      	cmp	r0, #3
   131da:	d114      	bne.n	13206 <update_ccc+0x72>
				BT_WARN("CCC %p not writable", attr);
   131dc:	46eb      	mov	fp, sp
   131de:	b088      	sub	sp, #32
   131e0:	466a      	mov	r2, sp
   131e2:	4b34      	ldr	r3, [pc, #208]	; (132b4 <update_ccc+0x120>)
   131e4:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   131e8:	6153      	str	r3, [r2, #20]
   131ea:	4b33      	ldr	r3, [pc, #204]	; (132b8 <update_ccc+0x124>)
   131ec:	4833      	ldr	r0, [pc, #204]	; (132bc <update_ccc+0x128>)
   131ee:	e9c2 3506 	strd	r3, r5, [r2, #24]
   131f2:	2304      	movs	r3, #4
   131f4:	f842 3f10 	str.w	r3, [r2, #16]!
   131f8:	f009 fe04 	bl	1ce04 <z_log_msg_static_create.constprop.0>
   131fc:	46dd      	mov	sp, fp
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   131fe:	360a      	adds	r6, #10
   13200:	45b2      	cmp	sl, r6
   13202:	d1d8      	bne.n	131b6 <update_ccc+0x22>
   13204:	e04e      	b.n	132a4 <update_ccc+0x110>
			sec = BT_SECURITY_L2;
   13206:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   13208:	4620      	mov	r0, r4
			sec = BT_SECURITY_L2;
   1320a:	bf0c      	ite	eq
   1320c:	f04f 0b03 	moveq.w	fp, #3
   13210:	f04f 0b02 	movne.w	fp, #2
			    bt_conn_get_security(conn) < sec) {
   13214:	f008 ffee 	bl	1c1f4 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   13218:	4583      	cmp	fp, r0
   1321a:	d906      	bls.n	1322a <update_ccc+0x96>
				if (data->sec < sec) {
   1321c:	f898 3004 	ldrb.w	r3, [r8, #4]
   13220:	455b      	cmp	r3, fp
   13222:	d2ec      	bcs.n	131fe <update_ccc+0x6a>
					data->sec = sec;
   13224:	f888 b004 	strb.w	fp, [r8, #4]
   13228:	e7e9      	b.n	131fe <update_ccc+0x6a>
		gatt_ccc_changed(attr, ccc);
   1322a:	4649      	mov	r1, r9
   1322c:	4628      	mov	r0, r5
   1322e:	f009 fd66 	bl	1ccfe <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   13232:	4b23      	ldr	r3, [pc, #140]	; (132c0 <update_ccc+0x12c>)
   13234:	4599      	cmp	r9, r3
   13236:	d135      	bne.n	132a4 <update_ccc+0x110>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   13238:	7a20      	ldrb	r0, [r4, #8]
   1323a:	f104 0188 	add.w	r1, r4, #136	; 0x88
   1323e:	f7ff fae1 	bl	12804 <find_sc_cfg>
	if (!cfg) {
   13242:	2800      	cmp	r0, #0
   13244:	d02e      	beq.n	132a4 <update_ccc+0x110>
	if (!(cfg->data.start || cfg->data.end)) {
   13246:	8902      	ldrh	r2, [r0, #8]
   13248:	8943      	ldrh	r3, [r0, #10]
   1324a:	ea52 0103 	orrs.w	r1, r2, r3
   1324e:	d029      	beq.n	132a4 <update_ccc+0x110>
	index = bt_conn_index(conn);
   13250:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   13252:	80ba      	strh	r2, [r7, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   13254:	80fb      	strh	r3, [r7, #6]
	index = bt_conn_index(conn);
   13256:	f7fd fdad 	bl	10db4 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1325a:	2318      	movs	r3, #24
   1325c:	4919      	ldr	r1, [pc, #100]	; (132c4 <update_ccc+0x130>)
   1325e:	4a1a      	ldr	r2, [pc, #104]	; (132c8 <update_ccc+0x134>)
   13260:	fb03 1300 	mla	r3, r3, r0, r1
   13264:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   13266:	4a19      	ldr	r2, [pc, #100]	; (132cc <update_ccc+0x138>)
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   13268:	b200      	sxth	r0, r0
	sc_restore_params[index].func = sc_restore_rsp;
   1326a:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   1326c:	1d3a      	adds	r2, r7, #4
   1326e:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   13270:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   13272:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   13276:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   1327a:	4620      	mov	r0, r4
	sc_restore_params[index].len = sizeof(sc_range);
   1327c:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1327e:	f7ff fee1 	bl	13044 <bt_gatt_indicate>
   13282:	b178      	cbz	r0, 132a4 <update_ccc+0x110>
		BT_ERR("SC restore indication failed");
   13284:	466c      	mov	r4, sp
   13286:	b088      	sub	sp, #32
   13288:	466a      	mov	r2, sp
   1328a:	4b11      	ldr	r3, [pc, #68]	; (132d0 <update_ccc+0x13c>)
   1328c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13290:	6153      	str	r3, [r2, #20]
   13292:	4b10      	ldr	r3, [pc, #64]	; (132d4 <update_ccc+0x140>)
   13294:	4809      	ldr	r0, [pc, #36]	; (132bc <update_ccc+0x128>)
   13296:	6193      	str	r3, [r2, #24]
   13298:	2303      	movs	r3, #3
   1329a:	f842 3f10 	str.w	r3, [r2, #16]!
   1329e:	f009 fdb1 	bl	1ce04 <z_log_msg_static_create.constprop.0>
   132a2:	46a5      	mov	sp, r4
}
   132a4:	2001      	movs	r0, #1
   132a6:	370c      	adds	r7, #12
   132a8:	46bd      	mov	sp, r7
   132aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   132ae:	bf00      	nop
   132b0:	00012891 	.word	0x00012891
   132b4:	00022efc 	.word	0x00022efc
   132b8:	00022f9d 	.word	0x00022f9d
   132bc:	0001fc6c 	.word	0x0001fc6c
   132c0:	2000842c 	.word	0x2000842c
   132c4:	20009ce0 	.word	0x20009ce0
   132c8:	000203f4 	.word	0x000203f4
   132cc:	0001ce1f 	.word	0x0001ce1f
   132d0:	00022f14 	.word	0x00022f14
   132d4:	00022f92 	.word	0x00022f92

000132d8 <gatt_notify>:
{
   132d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   132dc:	4614      	mov	r4, r2
   132de:	4689      	mov	r9, r1
   132e0:	af00      	add	r7, sp, #0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   132e2:	2294      	movs	r2, #148	; 0x94
   132e4:	6861      	ldr	r1, [r4, #4]
{
   132e6:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   132e8:	f009 fef6 	bl	1d0d8 <bt_gatt_check_perm>
   132ec:	b1a0      	cbz	r0, 13318 <gatt_notify+0x40>
		BT_WARN("Link is not encrypted");
   132ee:	466c      	mov	r4, sp
   132f0:	b088      	sub	sp, #32
   132f2:	466a      	mov	r2, sp
   132f4:	4b31      	ldr	r3, [pc, #196]	; (133bc <gatt_notify+0xe4>)
   132f6:	4832      	ldr	r0, [pc, #200]	; (133c0 <gatt_notify+0xe8>)
   132f8:	6153      	str	r3, [r2, #20]
   132fa:	4b32      	ldr	r3, [pc, #200]	; (133c4 <gatt_notify+0xec>)
   132fc:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   13300:	6193      	str	r3, [r2, #24]
   13302:	2303      	movs	r3, #3
   13304:	f842 3f10 	str.w	r3, [r2, #16]!
   13308:	f009 fd7c 	bl	1ce04 <z_log_msg_static_create.constprop.0>
		return -EPERM;
   1330c:	f04f 30ff 	mov.w	r0, #4294967295
   13310:	46a5      	mov	sp, r4
}
   13312:	46bd      	mov	sp, r7
   13314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   13318:	2201      	movs	r2, #1
   1331a:	4630      	mov	r0, r6
   1331c:	6861      	ldr	r1, [r4, #4]
   1331e:	f009 ff0f 	bl	1d140 <bt_gatt_is_subscribed>
   13322:	b990      	cbnz	r0, 1334a <gatt_notify+0x72>
			BT_WARN("Device is not subscribed to characteristic");
   13324:	466c      	mov	r4, sp
   13326:	b088      	sub	sp, #32
   13328:	466a      	mov	r2, sp
   1332a:	4b27      	ldr	r3, [pc, #156]	; (133c8 <gatt_notify+0xf0>)
   1332c:	4824      	ldr	r0, [pc, #144]	; (133c0 <gatt_notify+0xe8>)
   1332e:	6153      	str	r3, [r2, #20]
   13330:	4b24      	ldr	r3, [pc, #144]	; (133c4 <gatt_notify+0xec>)
   13332:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   13336:	6193      	str	r3, [r2, #24]
   13338:	2303      	movs	r3, #3
   1333a:	f842 3f10 	str.w	r3, [r2, #16]!
   1333e:	f009 fd61 	bl	1ce04 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   13342:	f06f 0015 	mvn.w	r0, #21
   13346:	46a5      	mov	sp, r4
   13348:	e7e3      	b.n	13312 <gatt_notify+0x3a>
				sizeof(*nfy) + params->len);
   1334a:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1334c:	211b      	movs	r1, #27
   1334e:	4630      	mov	r0, r6
   13350:	3202      	adds	r2, #2
   13352:	f7fe fe43 	bl	11fdc <bt_att_create_pdu>
	if (!buf) {
   13356:	4605      	mov	r5, r0
   13358:	b990      	cbnz	r0, 13380 <gatt_notify+0xa8>
		BT_WARN("No buffer available to send notification");
   1335a:	466c      	mov	r4, sp
   1335c:	b088      	sub	sp, #32
   1335e:	466a      	mov	r2, sp
   13360:	4b1a      	ldr	r3, [pc, #104]	; (133cc <gatt_notify+0xf4>)
   13362:	4817      	ldr	r0, [pc, #92]	; (133c0 <gatt_notify+0xe8>)
   13364:	6153      	str	r3, [r2, #20]
   13366:	4b17      	ldr	r3, [pc, #92]	; (133c4 <gatt_notify+0xec>)
   13368:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1336c:	6193      	str	r3, [r2, #24]
   1336e:	2303      	movs	r3, #3
   13370:	f842 3f10 	str.w	r3, [r2, #16]!
   13374:	f009 fd46 	bl	1ce04 <z_log_msg_static_create.constprop.0>
		return -ENOMEM;
   13378:	f06f 000b 	mvn.w	r0, #11
   1337c:	46a5      	mov	sp, r4
   1337e:	e7c8      	b.n	13312 <gatt_notify+0x3a>
   13380:	f100 0a08 	add.w	sl, r0, #8
   13384:	2102      	movs	r1, #2
   13386:	4650      	mov	r0, sl
   13388:	f00a fbd8 	bl	1db3c <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1338c:	4680      	mov	r8, r0
   1338e:	f828 9b02 	strh.w	r9, [r8], #2
   13392:	89a1      	ldrh	r1, [r4, #12]
   13394:	4650      	mov	r0, sl
   13396:	f00a fbd1 	bl	1db3c <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   1339a:	89a2      	ldrh	r2, [r4, #12]
   1339c:	68a1      	ldr	r1, [r4, #8]
   1339e:	4640      	mov	r0, r8
   133a0:	f008 fa97 	bl	1b8d2 <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   133a4:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   133a8:	4628      	mov	r0, r5
   133aa:	2301      	movs	r3, #1
   133ac:	f009 fc9d 	bl	1ccea <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   133b0:	4629      	mov	r1, r5
   133b2:	4630      	mov	r0, r6
   133b4:	f009 fc23 	bl	1cbfe <bt_att_send>
   133b8:	e7ab      	b.n	13312 <gatt_notify+0x3a>
   133ba:	bf00      	nop
   133bc:	00022e88 	.word	0x00022e88
   133c0:	0001fc6c 	.word	0x0001fc6c
   133c4:	00022fba 	.word	0x00022fba
   133c8:	00022ea2 	.word	0x00022ea2
   133cc:	00022f35 	.word	0x00022f35

000133d0 <bt_gatt_notify_cb>:
{
   133d0:	b530      	push	{r4, r5, lr}
   133d2:	4604      	mov	r4, r0
   133d4:	460d      	mov	r5, r1
   133d6:	b08b      	sub	sp, #44	; 0x2c
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   133d8:	4b34      	ldr	r3, [pc, #208]	; (134ac <bt_gatt_notify_cb+0xdc>)
   133da:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   133de:	075a      	lsls	r2, r3, #29
   133e0:	d55d      	bpl.n	1349e <bt_gatt_notify_cb+0xce>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   133e2:	b110      	cbz	r0, 133ea <bt_gatt_notify_cb+0x1a>
   133e4:	7b43      	ldrb	r3, [r0, #13]
   133e6:	2b07      	cmp	r3, #7
   133e8:	d15c      	bne.n	134a4 <bt_gatt_notify_cb+0xd4>
	data.attr = params->attr;
   133ea:	6868      	ldr	r0, [r5, #4]
   133ec:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   133ee:	f7ff fc5b 	bl	12ca8 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   133f2:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   133f4:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   133f8:	b33a      	cbz	r2, 1344a <bt_gatt_notify_cb+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   133fa:	a905      	add	r1, sp, #20
   133fc:	9102      	str	r1, [sp, #8]
   133fe:	492c      	ldr	r1, [pc, #176]	; (134b0 <bt_gatt_notify_cb+0xe0>)
	found->attr = NULL;
   13400:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   13402:	9101      	str	r1, [sp, #4]
   13404:	2101      	movs	r1, #1
   13406:	9100      	str	r1, [sp, #0]
   13408:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1340c:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1340e:	f7ff fc7b 	bl	12d08 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   13412:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   13414:	b91b      	cbnz	r3, 1341e <bt_gatt_notify_cb+0x4e>
			return -ENOENT;
   13416:	f06f 0001 	mvn.w	r0, #1
}
   1341a:	b00b      	add	sp, #44	; 0x2c
   1341c:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   1341e:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   13420:	9b05      	ldr	r3, [sp, #20]
   13422:	a904      	add	r1, sp, #16
   13424:	6818      	ldr	r0, [r3, #0]
   13426:	2300      	movs	r3, #0
   13428:	f88d 3010 	strb.w	r3, [sp, #16]
   1342c:	f642 0303 	movw	r3, #10243	; 0x2803
   13430:	f8ad 3012 	strh.w	r3, [sp, #18]
   13434:	f008 fa8c 	bl	1b950 <bt_uuid_cmp>
   13438:	b970      	cbnz	r0, 13458 <bt_gatt_notify_cb+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1343a:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   1343c:	68c3      	ldr	r3, [r0, #12]
   1343e:	799b      	ldrb	r3, [r3, #6]
   13440:	06db      	lsls	r3, r3, #27
   13442:	d405      	bmi.n	13450 <bt_gatt_notify_cb+0x80>
			return -EINVAL;
   13444:	f06f 0015 	mvn.w	r0, #21
   13448:	e7e7      	b.n	1341a <bt_gatt_notify_cb+0x4a>
		if (!data.handle) {
   1344a:	2800      	cmp	r0, #0
   1344c:	d1e8      	bne.n	13420 <bt_gatt_notify_cb+0x50>
   1344e:	e7e2      	b.n	13416 <bt_gatt_notify_cb+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   13450:	f009 fde7 	bl	1d022 <bt_gatt_attr_value_handle>
   13454:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_notify(conn, data.handle, params);
   13458:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   1345c:	b12c      	cbz	r4, 1346a <bt_gatt_notify_cb+0x9a>
		return gatt_notify(conn, data.handle, params);
   1345e:	4601      	mov	r1, r0
   13460:	462a      	mov	r2, r5
   13462:	4620      	mov	r0, r4
   13464:	f7ff ff38 	bl	132d8 <gatt_notify>
   13468:	e7d7      	b.n	1341a <bt_gatt_notify_cb+0x4a>
	data.err = -ENOTCONN;
   1346a:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1346e:	f642 1202 	movw	r2, #10498	; 0x2902
	data.err = -ENOTCONN;
   13472:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   13474:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   13476:	f8ad 2012 	strh.w	r2, [sp, #18]
   1347a:	aa05      	add	r2, sp, #20
   1347c:	9202      	str	r2, [sp, #8]
   1347e:	4a0d      	ldr	r2, [pc, #52]	; (134b4 <bt_gatt_notify_cb+0xe4>)
	data.type = BT_GATT_CCC_NOTIFY;
   13480:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   13484:	e9cd 3200 	strd	r3, r2, [sp]
   13488:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1348c:	4623      	mov	r3, r4
   1348e:	aa04      	add	r2, sp, #16
	data.nfy_params = params;
   13490:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   13492:	f88d 4010 	strb.w	r4, [sp, #16]
   13496:	f7ff fc37 	bl	12d08 <bt_gatt_foreach_attr_type>
	return data.err;
   1349a:	9807      	ldr	r0, [sp, #28]
   1349c:	e7bd      	b.n	1341a <bt_gatt_notify_cb+0x4a>
		return -EAGAIN;
   1349e:	f06f 000a 	mvn.w	r0, #10
   134a2:	e7ba      	b.n	1341a <bt_gatt_notify_cb+0x4a>
		return -ENOTCONN;
   134a4:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   134a8:	e7b7      	b.n	1341a <bt_gatt_notify_cb+0x4a>
   134aa:	bf00      	nop
   134ac:	200080cc 	.word	0x200080cc
   134b0:	0001cd41 	.word	0x0001cd41
   134b4:	000134b9 	.word	0x000134b9

000134b8 <notify_cb>:
{
   134b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   134bc:	b083      	sub	sp, #12
   134be:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   134c0:	4b4b      	ldr	r3, [pc, #300]	; (135f0 <notify_cb+0x138>)
   134c2:	6882      	ldr	r2, [r0, #8]
{
   134c4:	4680      	mov	r8, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   134c6:	429a      	cmp	r2, r3
{
   134c8:	af00      	add	r7, sp, #0
	if (attr->write != bt_gatt_attr_write_ccc) {
   134ca:	d137      	bne.n	1353c <notify_cb+0x84>
	ccc = attr->user_data;
   134cc:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   134d0:	4b48      	ldr	r3, [pc, #288]	; (135f4 <notify_cb+0x13c>)
   134d2:	459a      	cmp	sl, r3
   134d4:	d11a      	bne.n	1350c <notify_cb+0x54>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   134d6:	2600      	movs	r6, #0
   134d8:	4c47      	ldr	r4, [pc, #284]	; (135f8 <notify_cb+0x140>)
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   134da:	f8df 9120 	ldr.w	r9, [pc, #288]	; 135fc <notify_cb+0x144>
   134de:	4649      	mov	r1, r9
   134e0:	4620      	mov	r0, r4
   134e2:	f009 fc84 	bl	1cdee <bt_addr_le_eq>
   134e6:	b978      	cbnz	r0, 13508 <notify_cb+0x50>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   134e8:	2207      	movs	r2, #7
   134ea:	4621      	mov	r1, r4
   134ec:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   134f0:	f7fd fdba 	bl	11068 <bt_conn_lookup_state_le>
			if (!conn) {
   134f4:	bb38      	cbnz	r0, 13546 <notify_cb+0x8e>
				sc = (struct sc_data *)data->ind_params->data;
   134f6:	692b      	ldr	r3, [r5, #16]
				sc_save(cfg->id, &cfg->peer,
   134f8:	4621      	mov	r1, r4
				sc = (struct sc_data *)data->ind_params->data;
   134fa:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   134fc:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   13500:	8853      	ldrh	r3, [r2, #2]
   13502:	8812      	ldrh	r2, [r2, #0]
   13504:	f7ff fa48 	bl	12998 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   13508:	340c      	adds	r4, #12
   1350a:	b1d6      	cbz	r6, 13542 <notify_cb+0x8a>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1350c:	f10a 0601 	add.w	r6, sl, #1
   13510:	f10a 0b15 	add.w	fp, sl, #21
		if (cfg->value != data->type) {
   13514:	f8b6 2007 	ldrh.w	r2, [r6, #7]
   13518:	89ab      	ldrh	r3, [r5, #12]
   1351a:	429a      	cmp	r2, r3
   1351c:	d10b      	bne.n	13536 <notify_cb+0x7e>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1351e:	4631      	mov	r1, r6
   13520:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   13524:	f7fd fd52 	bl	10fcc <bt_conn_lookup_addr_le>
		if (!conn) {
   13528:	4604      	mov	r4, r0
   1352a:	b120      	cbz	r0, 13536 <notify_cb+0x7e>
		if (conn->state != BT_CONN_CONNECTED) {
   1352c:	7b43      	ldrb	r3, [r0, #13]
   1352e:	2b07      	cmp	r3, #7
   13530:	d00c      	beq.n	1354c <notify_cb+0x94>
			bt_conn_unref(conn);
   13532:	f008 fdd4 	bl	1c0de <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   13536:	360a      	adds	r6, #10
   13538:	45b3      	cmp	fp, r6
   1353a:	d1eb      	bne.n	13514 <notify_cb+0x5c>
		return BT_GATT_ITER_CONTINUE;
   1353c:	f04f 0901 	mov.w	r9, #1
   13540:	e050      	b.n	135e4 <notify_cb+0x12c>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   13542:	2601      	movs	r6, #1
   13544:	e7cb      	b.n	134de <notify_cb+0x26>
			bt_conn_unref(conn);
   13546:	f008 fdca 	bl	1c0de <bt_conn_unref>
   1354a:	e7dd      	b.n	13508 <notify_cb+0x50>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   1354c:	f8da 3020 	ldr.w	r3, [sl, #32]
   13550:	b123      	cbz	r3, 1355c <notify_cb+0xa4>
   13552:	4641      	mov	r1, r8
   13554:	4798      	blx	r3
   13556:	b908      	cbnz	r0, 1355c <notify_cb+0xa4>
			bt_conn_unref(conn);
   13558:	4620      	mov	r0, r4
   1355a:	e7ea      	b.n	13532 <notify_cb+0x7a>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1355c:	2294      	movs	r2, #148	; 0x94
   1355e:	4641      	mov	r1, r8
   13560:	4620      	mov	r0, r4
   13562:	f009 fdb9 	bl	1d0d8 <bt_gatt_check_perm>
   13566:	4681      	mov	r9, r0
   13568:	b180      	cbz	r0, 1358c <notify_cb+0xd4>
			BT_WARN("Link is not encrypted");
   1356a:	46e9      	mov	r9, sp
   1356c:	b088      	sub	sp, #32
   1356e:	466a      	mov	r2, sp
   13570:	4b23      	ldr	r3, [pc, #140]	; (13600 <notify_cb+0x148>)
   13572:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   13576:	6153      	str	r3, [r2, #20]
   13578:	4b22      	ldr	r3, [pc, #136]	; (13604 <notify_cb+0x14c>)
   1357a:	4823      	ldr	r0, [pc, #140]	; (13608 <notify_cb+0x150>)
   1357c:	6193      	str	r3, [r2, #24]
   1357e:	2303      	movs	r3, #3
   13580:	f842 3f10 	str.w	r3, [r2, #16]!
   13584:	f009 fc3e 	bl	1ce04 <z_log_msg_static_create.constprop.0>
   13588:	46cd      	mov	sp, r9
			bt_conn_unref(conn);
   1358a:	e7e5      	b.n	13558 <notify_cb+0xa0>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   1358c:	89ab      	ldrh	r3, [r5, #12]
   1358e:	2b02      	cmp	r3, #2
   13590:	d115      	bne.n	135be <notify_cb+0x106>
   13592:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   13596:	079a      	lsls	r2, r3, #30
   13598:	d405      	bmi.n	135a6 <notify_cb+0xee>
		bt_conn_unref(conn);
   1359a:	4620      	mov	r0, r4
   1359c:	f008 fd9f 	bl	1c0de <bt_conn_unref>
		data->err = 0;
   135a0:	2300      	movs	r3, #0
   135a2:	60ab      	str	r3, [r5, #8]
   135a4:	e7c7      	b.n	13536 <notify_cb+0x7e>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   135a6:	4620      	mov	r0, r4
   135a8:	692a      	ldr	r2, [r5, #16]
   135aa:	88a9      	ldrh	r1, [r5, #4]
   135ac:	f7ff fcae 	bl	12f0c <gatt_indicate>
			if (err == 0) {
   135b0:	4603      	mov	r3, r0
   135b2:	b980      	cbnz	r0, 135d6 <notify_cb+0x11e>
				data->ind_params->_ref++;
   135b4:	692a      	ldr	r2, [r5, #16]
   135b6:	7d93      	ldrb	r3, [r2, #22]
   135b8:	3301      	adds	r3, #1
   135ba:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   135bc:	e7ed      	b.n	1359a <notify_cb+0xe2>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   135be:	2b01      	cmp	r3, #1
   135c0:	d1eb      	bne.n	1359a <notify_cb+0xe2>
   135c2:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   135c6:	07db      	lsls	r3, r3, #31
   135c8:	d5e7      	bpl.n	1359a <notify_cb+0xe2>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   135ca:	4620      	mov	r0, r4
   135cc:	692a      	ldr	r2, [r5, #16]
   135ce:	88a9      	ldrh	r1, [r5, #4]
   135d0:	f7ff fe82 	bl	132d8 <gatt_notify>
   135d4:	4603      	mov	r3, r0
		bt_conn_unref(conn);
   135d6:	4620      	mov	r0, r4
   135d8:	607b      	str	r3, [r7, #4]
   135da:	f008 fd80 	bl	1c0de <bt_conn_unref>
		if (err < 0) {
   135de:	687b      	ldr	r3, [r7, #4]
   135e0:	2b00      	cmp	r3, #0
   135e2:	dadd      	bge.n	135a0 <notify_cb+0xe8>
}
   135e4:	4648      	mov	r0, r9
   135e6:	370c      	adds	r7, #12
   135e8:	46bd      	mov	sp, r7
   135ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135ee:	bf00      	nop
   135f0:	00012891 	.word	0x00012891
   135f4:	2000842c 	.word	0x2000842c
   135f8:	20009f71 	.word	0x20009f71
   135fc:	000215de 	.word	0x000215de
   13600:	00022e88 	.word	0x00022e88
   13604:	00022fd4 	.word	0x00022fd4
   13608:	0001fc6c 	.word	0x0001fc6c

0001360c <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   1360c:	b590      	push	{r4, r7, lr}
   1360e:	b083      	sub	sp, #12
   13610:	af00      	add	r7, sp, #0
   13612:	4604      	mov	r4, r0
	struct conn_data data;

	BT_DBG("conn %p", conn);

	data.conn = conn;
   13614:	6038      	str	r0, [r7, #0]
	data.sec = BT_SECURITY_L1;
   13616:	2001      	movs	r0, #1
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   13618:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1361c:	463b      	mov	r3, r7
   1361e:	4a11      	ldr	r2, [pc, #68]	; (13664 <bt_gatt_connected+0x58>)
	data.sec = BT_SECURITY_L1;
   13620:	7138      	strb	r0, [r7, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   13622:	f009 fd4c 	bl	1d0be <bt_gatt_foreach_attr>
	 * enabling encryption will fail.
	 */
	if (IS_ENABLED(CONFIG_BT_SMP) &&
	    (conn->role == BT_HCI_ROLE_CENTRAL ||
	     IS_ENABLED(CONFIG_BT_GATT_AUTO_SEC_REQ)) &&
	    bt_conn_get_security(conn) < data.sec) {
   13626:	4620      	mov	r0, r4
   13628:	f008 fde4 	bl	1c1f4 <bt_conn_get_security>
   1362c:	7939      	ldrb	r1, [r7, #4]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   1362e:	4288      	cmp	r0, r1
   13630:	d214      	bcs.n	1365c <bt_gatt_connected+0x50>
		int err = bt_conn_set_security(conn, data.sec);
   13632:	4620      	mov	r0, r4
   13634:	f008 fdb2 	bl	1c19c <bt_conn_set_security>

		if (err) {
   13638:	b180      	cbz	r0, 1365c <bt_gatt_connected+0x50>
			BT_WARN("Failed to set security for bonded peer (%d)",
   1363a:	466c      	mov	r4, sp
   1363c:	b088      	sub	sp, #32
   1363e:	466a      	mov	r2, sp
   13640:	4b09      	ldr	r3, [pc, #36]	; (13668 <bt_gatt_connected+0x5c>)
   13642:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   13646:	6153      	str	r3, [r2, #20]
   13648:	4b08      	ldr	r3, [pc, #32]	; (1366c <bt_gatt_connected+0x60>)
   1364a:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1364e:	2304      	movs	r3, #4
   13650:	4807      	ldr	r0, [pc, #28]	; (13670 <bt_gatt_connected+0x64>)
   13652:	f842 3f10 	str.w	r3, [r2, #16]!
   13656:	f009 fbd5 	bl	1ce04 <z_log_msg_static_create.constprop.0>
   1365a:	46a5      	mov	sp, r4
	if (err) {
		BT_WARN("MTU Exchange failed (err %d)", err);
	}
#endif /* CONFIG_BT_GATT_AUTO_UPDATE_MTU */
#endif /* CONFIG_BT_GATT_CLIENT */
}
   1365c:	370c      	adds	r7, #12
   1365e:	46bd      	mov	sp, r7
   13660:	bd90      	pop	{r4, r7, pc}
   13662:	bf00      	nop
   13664:	00013195 	.word	0x00013195
   13668:	00022f62 	.word	0x00022f62
   1366c:	00022fa8 	.word	0x00022fa8
   13670:	0001fc6c 	.word	0x0001fc6c

00013674 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   13674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13676:	4605      	mov	r5, r0
   13678:	460e      	mov	r6, r1
   1367a:	4617      	mov	r7, r2
	return list->head;
   1367c:	4b06      	ldr	r3, [pc, #24]	; (13698 <bt_gatt_att_max_mtu_changed+0x24>)
   1367e:	681c      	ldr	r4, [r3, #0]
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   13680:	b14c      	cbz	r4, 13696 <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   13682:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   13686:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   13688:	b11b      	cbz	r3, 13692 <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   1368a:	463a      	mov	r2, r7
   1368c:	4631      	mov	r1, r6
   1368e:	4628      	mov	r0, r5
   13690:	4798      	blx	r3
	return node->next;
   13692:	6864      	ldr	r4, [r4, #4]
   13694:	e7f4      	b.n	13680 <bt_gatt_att_max_mtu_changed+0xc>
		}
	}
}
   13696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13698:	20009d20 	.word	0x20009d20

0001369c <bt_gatt_encrypt_change>:

void bt_gatt_encrypt_change(struct bt_conn *conn)
{
   1369c:	b507      	push	{r0, r1, r2, lr}
	struct conn_data data;

	BT_DBG("conn %p", conn);

	data.conn = conn;
   1369e:	9000      	str	r0, [sp, #0]
	data.sec = BT_SECURITY_L1;
   136a0:	2001      	movs	r0, #1

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   136a2:	466b      	mov	r3, sp
   136a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   136a8:	4a03      	ldr	r2, [pc, #12]	; (136b8 <bt_gatt_encrypt_change+0x1c>)
	data.sec = BT_SECURITY_L1;
   136aa:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   136ae:	f009 fd06 	bl	1d0be <bt_gatt_foreach_attr>
}
   136b2:	b003      	add	sp, #12
   136b4:	f85d fb04 	ldr.w	pc, [sp], #4
   136b8:	00013195 	.word	0x00013195

000136bc <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   136bc:	b570      	push	{r4, r5, r6, lr}
   136be:	4604      	mov	r4, r0
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   136c0:	4603      	mov	r3, r0
   136c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   136c6:	2001      	movs	r0, #1
   136c8:	4a0d      	ldr	r2, [pc, #52]	; (13700 <bt_gatt_disconnected+0x44>)
   136ca:	f009 fcf8 	bl	1d0be <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   136ce:	4620      	mov	r0, r4
   136d0:	f7ff f86a 	bl	127a8 <find_cf_cfg>
	if (!cfg) {
   136d4:	4605      	mov	r5, r0
   136d6:	b188      	cbz	r0, 136fc <bt_gatt_disconnected+0x40>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   136d8:	f104 0688 	add.w	r6, r4, #136	; 0x88
   136dc:	4631      	mov	r1, r6
   136de:	7a20      	ldrb	r0, [r4, #8]
   136e0:	f008 fa84 	bl	1bbec <bt_addr_le_is_bonded>
   136e4:	b920      	cbnz	r0, 136f0 <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
   136e6:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   136e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
   136ec:	f7ff b93c 	b.w	12968 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   136f0:	4631      	mov	r1, r6
   136f2:	1c68      	adds	r0, r5, #1
}
   136f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   136f8:	f009 bb81 	b.w	1cdfe <bt_addr_le_copy>
}
   136fc:	bd70      	pop	{r4, r5, r6, pc}
   136fe:	bf00      	nop
   13700:	00012ad1 	.word	0x00012ad1

00013704 <smp_find>:

	return 0;
}

static struct bt_smp *smp_find(int flag)
{
   13704:	b508      	push	{r3, lr}
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   13706:	4b05      	ldr	r3, [pc, #20]	; (1371c <smp_find+0x18>)
{
   13708:	4601      	mov	r1, r0
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   1370a:	4618      	mov	r0, r3
   1370c:	f009 fded 	bl	1d2ea <atomic_test_bit>
			return &bt_smp_pool[i];
		}
	}

	return NULL;
   13710:	3b04      	subs	r3, #4
   13712:	2800      	cmp	r0, #0
}
   13714:	bf14      	ite	ne
   13716:	4618      	movne	r0, r3
   13718:	2000      	moveq	r0, #0
   1371a:	bd08      	pop	{r3, pc}
   1371c:	2000970c 	.word	0x2000970c

00013720 <latch_auth_cb>:
	atomic_ptr_cas(&smp->auth_cb, BT_SMP_AUTH_CB_UNINITIALIZED, (atomic_ptr_val_t)bt_auth);
   13720:	4b08      	ldr	r3, [pc, #32]	; (13744 <latch_auth_cb+0x24>)
   13722:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   13726:	681a      	ldr	r2, [r3, #0]
   13728:	4b07      	ldr	r3, [pc, #28]	; (13748 <latch_auth_cb+0x28>)
   1372a:	e8d0 1fef 	ldaex	r1, [r0]
   1372e:	4299      	cmp	r1, r3
   13730:	d104      	bne.n	1373c <latch_auth_cb+0x1c>
   13732:	e8c0 2fec 	stlex	ip, r2, [r0]
   13736:	f1bc 0f00 	cmp.w	ip, #0
   1373a:	d1f6      	bne.n	1372a <latch_auth_cb+0xa>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1373c:	e8d0 0faf 	lda	r0, [r0]
}
   13740:	4770      	bx	lr
   13742:	bf00      	nop
   13744:	20009bf4 	.word	0x20009bf4
   13748:	20009708 	.word	0x20009708

0001374c <get_io_capa>:
{
   1374c:	b508      	push	{r3, lr}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1374e:	f7ff ffe7 	bl	13720 <latch_auth_cb>
	if (!smp_auth_cb) {
   13752:	4603      	mov	r3, r0
   13754:	b1c8      	cbz	r0, 1378a <get_io_capa+0x3e>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   13756:	e9d0 1200 	ldrd	r1, r2, [r0]
   1375a:	b921      	cbnz	r1, 13766 <get_io_capa+0x1a>
			return BT_SMP_IO_KEYBOARD_ONLY;
   1375c:	2a00      	cmp	r2, #0
   1375e:	bf0c      	ite	eq
   13760:	2003      	moveq	r0, #3
   13762:	2002      	movne	r0, #2
   13764:	e010      	b.n	13788 <get_io_capa+0x3c>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   13766:	b132      	cbz	r2, 13776 <get_io_capa+0x2a>
   13768:	6883      	ldr	r3, [r0, #8]
   1376a:	b913      	cbnz	r3, 13772 <get_io_capa+0x26>
	    (smp_auth_cb->passkey_confirm || !sc_supported)) {
   1376c:	4b09      	ldr	r3, [pc, #36]	; (13794 <get_io_capa+0x48>)
   1376e:	781b      	ldrb	r3, [r3, #0]
   13770:	b933      	cbnz	r3, 13780 <get_io_capa+0x34>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   13772:	2004      	movs	r0, #4
   13774:	e008      	b.n	13788 <get_io_capa+0x3c>
	if (sc_supported && smp_auth_cb->passkey_display &&
   13776:	4907      	ldr	r1, [pc, #28]	; (13794 <get_io_capa+0x48>)
   13778:	7808      	ldrb	r0, [r1, #0]
   1377a:	b128      	cbz	r0, 13788 <get_io_capa+0x3c>
   1377c:	689b      	ldr	r3, [r3, #8]
   1377e:	b933      	cbnz	r3, 1378e <get_io_capa+0x42>
	if (smp_auth_cb->passkey_entry) {
   13780:	3a00      	subs	r2, #0
   13782:	bf18      	it	ne
   13784:	2201      	movne	r2, #1
   13786:	0050      	lsls	r0, r2, #1
}
   13788:	bd08      	pop	{r3, pc}
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   1378a:	2003      	movs	r0, #3
   1378c:	e7fc      	b.n	13788 <get_io_capa+0x3c>
		return BT_SMP_IO_DISPLAY_YESNO;
   1378e:	2001      	movs	r0, #1
   13790:	e7fa      	b.n	13788 <get_io_capa+0x3c>
   13792:	bf00      	nop
   13794:	2000a072 	.word	0x2000a072

00013798 <get_auth>:
{
   13798:	b510      	push	{r4, lr}
	if (sc_supported) {
   1379a:	4b0c      	ldr	r3, [pc, #48]	; (137cc <get_auth+0x34>)
   1379c:	781b      	ldrb	r3, [r3, #0]
   1379e:	b17b      	cbz	r3, 137c0 <get_auth+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
   137a0:	f001 040f 	and.w	r4, r1, #15
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   137a4:	f7ff ffd2 	bl	1374c <get_io_capa>
	if (bondable) {
   137a8:	4b09      	ldr	r3, [pc, #36]	; (137d0 <get_auth+0x38>)
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   137aa:	2803      	cmp	r0, #3
	if (bondable) {
   137ac:	781b      	ldrb	r3, [r3, #0]
		auth &= ~(BT_SMP_AUTH_MITM);
   137ae:	bf0c      	ite	eq
   137b0:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
   137b4:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
   137b8:	b12b      	cbz	r3, 137c6 <get_auth+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
   137ba:	f044 0001 	orr.w	r0, r4, #1
}
   137be:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
   137c0:	f001 0407 	and.w	r4, r1, #7
   137c4:	e7ee      	b.n	137a4 <get_auth+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
   137c6:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
   137ca:	e7f8      	b.n	137be <get_auth+0x26>
   137cc:	2000a072 	.word	0x2000a072
   137d0:	20008638 	.word	0x20008638

000137d4 <bt_smp_pkey_ready.part.0>:
	}

	return 0;
}

static void bt_smp_pkey_ready(const uint8_t *pkey)
   137d4:	b580      	push	{r7, lr}
   137d6:	af00      	add	r7, sp, #0
	BT_DBG("");

	sc_public_key = pkey;

	if (!pkey) {
		BT_WARN("Public key not available");
   137d8:	b088      	sub	sp, #32
   137da:	466a      	mov	r2, sp
   137dc:	4b06      	ldr	r3, [pc, #24]	; (137f8 <bt_smp_pkey_ready.part.0+0x24>)
   137de:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   137e2:	6153      	str	r3, [r2, #20]
   137e4:	4b05      	ldr	r3, [pc, #20]	; (137fc <bt_smp_pkey_ready.part.0+0x28>)
   137e6:	4806      	ldr	r0, [pc, #24]	; (13800 <bt_smp_pkey_ready.part.0+0x2c>)
   137e8:	6193      	str	r3, [r2, #24]
   137ea:	2303      	movs	r3, #3
   137ec:	f842 3f10 	str.w	r3, [r2, #16]!
   137f0:	f009 fdea 	bl	1d3c8 <z_log_msg_static_create.constprop.0>
		if (err) {
			smp_error(smp, err);
		}
#endif /* CONFIG_BT_PERIPHERAL */
	}
}
   137f4:	46bd      	mov	sp, r7
   137f6:	bd80      	pop	{r7, pc}
   137f8:	00023021 	.word	0x00023021
   137fc:	0002344f 	.word	0x0002344f
   13800:	0001fca4 	.word	0x0001fca4

00013804 <smp_chan_get.part.0>:
static struct bt_smp *smp_chan_get(struct bt_conn *conn)
   13804:	b580      	push	{r7, lr}
   13806:	af00      	add	r7, sp, #0
		BT_ERR("Unable to find SMP channel");
   13808:	b088      	sub	sp, #32
   1380a:	466a      	mov	r2, sp
   1380c:	4b07      	ldr	r3, [pc, #28]	; (1382c <smp_chan_get.part.0+0x28>)
   1380e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13812:	6153      	str	r3, [r2, #20]
   13814:	4b06      	ldr	r3, [pc, #24]	; (13830 <smp_chan_get.part.0+0x2c>)
   13816:	4807      	ldr	r0, [pc, #28]	; (13834 <smp_chan_get.part.0+0x30>)
   13818:	6193      	str	r3, [r2, #24]
   1381a:	2303      	movs	r3, #3
   1381c:	f842 3f10 	str.w	r3, [r2, #16]!
   13820:	f009 fdd2 	bl	1d3c8 <z_log_msg_static_create.constprop.0>
}
   13824:	2000      	movs	r0, #0
   13826:	46bd      	mov	sp, r7
   13828:	bd80      	pop	{r7, pc}
   1382a:	bf00      	nop
   1382c:	0002303e 	.word	0x0002303e
   13830:	0002362d 	.word	0x0002362d
   13834:	0001fca4 	.word	0x0001fca4

00013838 <bt_smp_accept.part.0>:
	} else {
		conn->le.keys->flags &= ~BT_KEYS_SC;
	}
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   13838:	b580      	push	{r7, lr}
   1383a:	af00      	add	r7, sp, #0
		*chan = &smp->chan.chan;

		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);
   1383c:	b088      	sub	sp, #32
   1383e:	466a      	mov	r2, sp
   13840:	4b08      	ldr	r3, [pc, #32]	; (13864 <bt_smp_accept.part.0+0x2c>)
   13842:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   13846:	6153      	str	r3, [r2, #20]
   13848:	4b07      	ldr	r3, [pc, #28]	; (13868 <bt_smp_accept.part.0+0x30>)
   1384a:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1384e:	2304      	movs	r3, #4
   13850:	4806      	ldr	r0, [pc, #24]	; (1386c <bt_smp_accept.part.0+0x34>)
   13852:	f842 3f10 	str.w	r3, [r2, #16]!
   13856:	f009 fdb7 	bl	1d3c8 <z_log_msg_static_create.constprop.0>

	return -ENOMEM;
}
   1385a:	f06f 000b 	mvn.w	r0, #11
   1385e:	46bd      	mov	sp, r7
   13860:	bd80      	pop	{r7, pc}
   13862:	bf00      	nop
   13864:	0002305d 	.word	0x0002305d
   13868:	000235af 	.word	0x000235af
   1386c:	0001fca4 	.word	0x0001fca4

00013870 <bt_smp_accept>:
		if (smp->chan.chan.conn) {
   13870:	4b05      	ldr	r3, [pc, #20]	; (13888 <bt_smp_accept+0x18>)
   13872:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
   13876:	b10a      	cbz	r2, 1387c <bt_smp_accept+0xc>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   13878:	f7ff bfde 	b.w	13838 <bt_smp_accept.part.0>
		smp->chan.chan.ops = &ops;
   1387c:	4803      	ldr	r0, [pc, #12]	; (1388c <bt_smp_accept+0x1c>)
		*chan = &smp->chan.chan;
   1387e:	33ec      	adds	r3, #236	; 0xec
		smp->chan.chan.ops = &ops;
   13880:	6058      	str	r0, [r3, #4]
}
   13882:	4610      	mov	r0, r2
		*chan = &smp->chan.chan;
   13884:	600b      	str	r3, [r1, #0]
}
   13886:	4770      	bx	lr
   13888:	20009708 	.word	0x20009708
   1388c:	000204f8 	.word	0x000204f8

00013890 <smp_init>:
{
   13890:	b538      	push	{r3, r4, r5, lr}
   13892:	4605      	mov	r5, r0
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   13894:	22ec      	movs	r2, #236	; 0xec
   13896:	2100      	movs	r1, #0
   13898:	f008 f826 	bl	1b8e8 <memset>
	if (bt_rand(smp->prnd, 16)) {
   1389c:	2110      	movs	r1, #16
   1389e:	f105 0027 	add.w	r0, r5, #39	; 0x27
   138a2:	f7fc fd5b 	bl	1035c <bt_rand>
   138a6:	4604      	mov	r4, r0
   138a8:	b948      	cbnz	r0, 138be <smp_init+0x2e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   138aa:	2105      	movs	r1, #5
   138ac:	4628      	mov	r0, r5
   138ae:	f009 fe18 	bl	1d4e2 <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   138b2:	f7fc fe1d 	bl	104f0 <bt_pub_key_get>
   138b6:	4b03      	ldr	r3, [pc, #12]	; (138c4 <smp_init+0x34>)
   138b8:	6018      	str	r0, [r3, #0]
}
   138ba:	4620      	mov	r0, r4
   138bc:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   138be:	2408      	movs	r4, #8
   138c0:	e7fb      	b.n	138ba <smp_init+0x2a>
   138c2:	bf00      	nop
   138c4:	20009d28 	.word	0x20009d28

000138c8 <smp_dhkey_generate>:
{
   138c8:	b5b0      	push	{r4, r5, r7, lr}
   138ca:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   138cc:	1d05      	adds	r5, r0, #4
   138ce:	2108      	movs	r1, #8
   138d0:	4628      	mov	r0, r5
{
   138d2:	af00      	add	r7, sp, #0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   138d4:	f009 fe05 	bl	1d4e2 <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   138d8:	490e      	ldr	r1, [pc, #56]	; (13914 <smp_dhkey_generate+0x4c>)
   138da:	f104 0057 	add.w	r0, r4, #87	; 0x57
   138de:	f7fc fe15 	bl	1050c <bt_dh_key_gen>
	if (err) {
   138e2:	b1a0      	cbz	r0, 1390e <smp_dhkey_generate+0x46>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   138e4:	2108      	movs	r1, #8
   138e6:	4628      	mov	r0, r5
   138e8:	f009 fd26 	bl	1d338 <atomic_clear_bit>
		BT_ERR("Failed to generate DHKey");
   138ec:	466c      	mov	r4, sp
   138ee:	b088      	sub	sp, #32
   138f0:	466a      	mov	r2, sp
   138f2:	4b09      	ldr	r3, [pc, #36]	; (13918 <smp_dhkey_generate+0x50>)
   138f4:	4809      	ldr	r0, [pc, #36]	; (1391c <smp_dhkey_generate+0x54>)
   138f6:	6153      	str	r3, [r2, #20]
   138f8:	4b09      	ldr	r3, [pc, #36]	; (13920 <smp_dhkey_generate+0x58>)
   138fa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   138fe:	6193      	str	r3, [r2, #24]
   13900:	2303      	movs	r3, #3
   13902:	f842 3f10 	str.w	r3, [r2, #16]!
   13906:	f009 fd5f 	bl	1d3c8 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1390a:	2008      	movs	r0, #8
   1390c:	46a5      	mov	sp, r4
}
   1390e:	46bd      	mov	sp, r7
   13910:	bdb0      	pop	{r4, r5, r7, pc}
   13912:	bf00      	nop
   13914:	0001d8a3 	.word	0x0001d8a3
   13918:	00023086 	.word	0x00023086
   1391c:	0001fca4 	.word	0x0001fca4
   13920:	0002356b 	.word	0x0002356b

00013924 <smp_ident_info>:
{
   13924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13926:	4604      	mov	r4, r0
   13928:	460b      	mov	r3, r1
   1392a:	af00      	add	r7, sp, #0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1392c:	210d      	movs	r1, #13
   1392e:	3004      	adds	r0, #4
   13930:	f009 fcdb 	bl	1d2ea <atomic_test_bit>
   13934:	b348      	cbz	r0, 1398a <smp_ident_info+0x66>
		struct bt_smp_ident_info *req = (void *)buf->data;
   13936:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   13938:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1393c:	2002      	movs	r0, #2
   1393e:	f103 0588 	add.w	r5, r3, #136	; 0x88
   13942:	462a      	mov	r2, r5
   13944:	7a19      	ldrb	r1, [r3, #8]
   13946:	f00a f836 	bl	1d9b6 <bt_keys_get_type>
		if (!keys) {
   1394a:	b9c8      	cbnz	r0, 13980 <smp_ident_info+0x5c>
			BT_ERR("Unable to get keys for %s",
   1394c:	4628      	mov	r0, r5
   1394e:	f7f9 ffc5 	bl	d8dc <bt_addr_le_str>
   13952:	466c      	mov	r4, sp
   13954:	b08a      	sub	sp, #40	; 0x28
   13956:	466a      	mov	r2, sp
   13958:	4b0f      	ldr	r3, [pc, #60]	; (13998 <smp_ident_info+0x74>)
   1395a:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1395e:	6153      	str	r3, [r2, #20]
   13960:	4b0e      	ldr	r3, [pc, #56]	; (1399c <smp_ident_info+0x78>)
   13962:	e9c2 3006 	strd	r3, r0, [r2, #24]
   13966:	f240 3301 	movw	r3, #769	; 0x301
   1396a:	8413      	strh	r3, [r2, #32]
   1396c:	4b0c      	ldr	r3, [pc, #48]	; (139a0 <smp_ident_info+0x7c>)
   1396e:	480d      	ldr	r0, [pc, #52]	; (139a4 <smp_ident_info+0x80>)
   13970:	f842 3f10 	str.w	r3, [r2, #16]!
   13974:	f009 fd28 	bl	1d3c8 <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   13978:	2008      	movs	r0, #8
   1397a:	46a5      	mov	sp, r4
}
   1397c:	46bd      	mov	sp, r7
   1397e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memcpy(keys->irk.val, req->irk, 16);
   13980:	2210      	movs	r2, #16
   13982:	4631      	mov	r1, r6
   13984:	302a      	adds	r0, #42	; 0x2a
   13986:	f007 ffa4 	bl	1b8d2 <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   1398a:	4620      	mov	r0, r4
   1398c:	2109      	movs	r1, #9
   1398e:	f009 fda8 	bl	1d4e2 <atomic_set_bit>
	return 0;
   13992:	2000      	movs	r0, #0
   13994:	e7f2      	b.n	1397c <smp_ident_info+0x58>
   13996:	bf00      	nop
   13998:	000230a3 	.word	0x000230a3
   1399c:	00023535 	.word	0x00023535
   139a0:	01000004 	.word	0x01000004
   139a4:	0001fca4 	.word	0x0001fca4

000139a8 <smp_encrypt_info>:
{
   139a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   139aa:	4604      	mov	r4, r0
   139ac:	460b      	mov	r3, r1
   139ae:	af00      	add	r7, sp, #0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   139b0:	210d      	movs	r1, #13
   139b2:	3004      	adds	r0, #4
   139b4:	f009 fc99 	bl	1d2ea <atomic_test_bit>
   139b8:	b348      	cbz	r0, 13a0e <smp_encrypt_info+0x66>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   139ba:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   139bc:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   139c0:	2004      	movs	r0, #4
   139c2:	f103 0588 	add.w	r5, r3, #136	; 0x88
   139c6:	462a      	mov	r2, r5
   139c8:	7a19      	ldrb	r1, [r3, #8]
   139ca:	f009 fff4 	bl	1d9b6 <bt_keys_get_type>
		if (!keys) {
   139ce:	b9c8      	cbnz	r0, 13a04 <smp_encrypt_info+0x5c>
			BT_ERR("Unable to get keys for %s",
   139d0:	4628      	mov	r0, r5
   139d2:	f7f9 ff83 	bl	d8dc <bt_addr_le_str>
   139d6:	466c      	mov	r4, sp
   139d8:	b08a      	sub	sp, #40	; 0x28
   139da:	466a      	mov	r2, sp
   139dc:	4b0f      	ldr	r3, [pc, #60]	; (13a1c <smp_encrypt_info+0x74>)
   139de:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   139e2:	6153      	str	r3, [r2, #20]
   139e4:	4b0e      	ldr	r3, [pc, #56]	; (13a20 <smp_encrypt_info+0x78>)
   139e6:	e9c2 3006 	strd	r3, r0, [r2, #24]
   139ea:	f240 3301 	movw	r3, #769	; 0x301
   139ee:	8413      	strh	r3, [r2, #32]
   139f0:	4b0c      	ldr	r3, [pc, #48]	; (13a24 <smp_encrypt_info+0x7c>)
   139f2:	480d      	ldr	r0, [pc, #52]	; (13a28 <smp_encrypt_info+0x80>)
   139f4:	f842 3f10 	str.w	r3, [r2, #16]!
   139f8:	f009 fce6 	bl	1d3c8 <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   139fc:	2008      	movs	r0, #8
   139fe:	46a5      	mov	sp, r4
}
   13a00:	46bd      	mov	sp, r7
   13a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memcpy(keys->ltk.val, req->ltk, 16);
   13a04:	2210      	movs	r2, #16
   13a06:	4631      	mov	r1, r6
   13a08:	301a      	adds	r0, #26
   13a0a:	f007 ff62 	bl	1b8d2 <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_CENTRAL_IDENT);
   13a0e:	4620      	mov	r0, r4
   13a10:	2107      	movs	r1, #7
   13a12:	f009 fd66 	bl	1d4e2 <atomic_set_bit>
	return 0;
   13a16:	2000      	movs	r0, #0
   13a18:	e7f2      	b.n	13a00 <smp_encrypt_info+0x58>
   13a1a:	bf00      	nop
   13a1c:	000230a3 	.word	0x000230a3
   13a20:	00023512 	.word	0x00023512
   13a24:	01000004 	.word	0x01000004
   13a28:	0001fca4 	.word	0x0001fca4

00013a2c <smp_send_pairing_confirm>:
{
   13a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   13a2e:	b083      	sub	sp, #12
	switch (smp->method) {
   13a30:	7a04      	ldrb	r4, [r0, #8]
{
   13a32:	4605      	mov	r5, r0
	switch (smp->method) {
   13a34:	2c02      	cmp	r4, #2
{
   13a36:	af02      	add	r7, sp, #8
	switch (smp->method) {
   13a38:	d823      	bhi.n	13a82 <smp_send_pairing_confirm+0x56>
   13a3a:	b144      	cbz	r4, 13a4e <smp_send_pairing_confirm+0x22>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   13a3c:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
   13a40:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   13a44:	40dc      	lsrs	r4, r3
   13a46:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   13a4a:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   13a4e:	2103      	movs	r1, #3
   13a50:	4628      	mov	r0, r5
   13a52:	f009 fd56 	bl	1d502 <smp_create_pdu.constprop.0>
	if (!buf) {
   13a56:	4606      	mov	r6, r0
   13a58:	b330      	cbz	r0, 13aa8 <smp_send_pairing_confirm+0x7c>
   13a5a:	2110      	movs	r1, #16
   13a5c:	3008      	adds	r0, #8
   13a5e:	f00a f86d 	bl	1db3c <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   13a62:	9000      	str	r0, [sp, #0]
   13a64:	4819      	ldr	r0, [pc, #100]	; (13acc <smp_send_pairing_confirm+0xa0>)
   13a66:	4623      	mov	r3, r4
   13a68:	6800      	ldr	r0, [r0, #0]
   13a6a:	f105 0227 	add.w	r2, r5, #39	; 0x27
   13a6e:	f105 0157 	add.w	r1, r5, #87	; 0x57
   13a72:	f009 fd11 	bl	1d498 <smp_f4>
   13a76:	4604      	mov	r4, r0
   13a78:	b1e0      	cbz	r0, 13ab4 <smp_send_pairing_confirm+0x88>
		net_buf_unref(buf);
   13a7a:	4630      	mov	r0, r6
   13a7c:	f001 fd56 	bl	1552c <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   13a80:	e012      	b.n	13aa8 <smp_send_pairing_confirm+0x7c>
	switch (smp->method) {
   13a82:	2c03      	cmp	r4, #3
   13a84:	d014      	beq.n	13ab0 <smp_send_pairing_confirm+0x84>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   13a86:	466d      	mov	r5, sp
   13a88:	b088      	sub	sp, #32
   13a8a:	aa02      	add	r2, sp, #8
   13a8c:	4b10      	ldr	r3, [pc, #64]	; (13ad0 <smp_send_pairing_confirm+0xa4>)
   13a8e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   13a92:	6153      	str	r3, [r2, #20]
   13a94:	4b0f      	ldr	r3, [pc, #60]	; (13ad4 <smp_send_pairing_confirm+0xa8>)
   13a96:	4810      	ldr	r0, [pc, #64]	; (13ad8 <smp_send_pairing_confirm+0xac>)
	switch (smp->method) {
   13a98:	e9c2 3406 	strd	r3, r4, [r2, #24]
		BT_ERR("Unknown pairing method (%u)", smp->method);
   13a9c:	2304      	movs	r3, #4
   13a9e:	f842 3f10 	str.w	r3, [r2, #16]!
   13aa2:	f009 fc91 	bl	1d3c8 <z_log_msg_static_create.constprop.0>
   13aa6:	46ad      	mov	sp, r5
		return BT_SMP_ERR_UNSPECIFIED;
   13aa8:	2008      	movs	r0, #8
}
   13aaa:	3704      	adds	r7, #4
   13aac:	46bd      	mov	sp, r7
   13aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (smp->method) {
   13ab0:	2400      	movs	r4, #0
   13ab2:	e7cc      	b.n	13a4e <smp_send_pairing_confirm+0x22>
	smp_send(smp, buf, NULL, NULL);
   13ab4:	4602      	mov	r2, r0
   13ab6:	4631      	mov	r1, r6
   13ab8:	4628      	mov	r0, r5
   13aba:	f009 fc68 	bl	1d38e <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   13abe:	1d28      	adds	r0, r5, #4
   13ac0:	4621      	mov	r1, r4
   13ac2:	f009 fc39 	bl	1d338 <atomic_clear_bit>
	return 0;
   13ac6:	4620      	mov	r0, r4
   13ac8:	e7ef      	b.n	13aaa <smp_send_pairing_confirm+0x7e>
   13aca:	bf00      	nop
   13acc:	20009d28 	.word	0x20009d28
   13ad0:	000230c1 	.word	0x000230c1
   13ad4:	00023614 	.word	0x00023614
   13ad8:	0001fca4 	.word	0x0001fca4

00013adc <smp_public_key_periph>:
{
   13adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13ae0:	4604      	mov	r4, r0
   13ae2:	af00      	add	r7, sp, #0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   13ae4:	f7ff fe1c 	bl	13720 <latch_auth_cb>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   13ae8:	1d26      	adds	r6, r4, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   13aea:	4680      	mov	r8, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   13aec:	210e      	movs	r1, #14
   13aee:	4630      	mov	r0, r6
   13af0:	f009 fbfb 	bl	1d2ea <atomic_test_bit>
   13af4:	b9c8      	cbnz	r0, 13b2a <smp_public_key_periph+0x4e>
	    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   13af6:	4b54      	ldr	r3, [pc, #336]	; (13c48 <smp_public_key_periph+0x16c>)
   13af8:	2220      	movs	r2, #32
   13afa:	6819      	ldr	r1, [r3, #0]
   13afc:	f104 0057 	add.w	r0, r4, #87	; 0x57
   13b00:	f007 fed7 	bl	1b8b2 <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   13b04:	b988      	cbnz	r0, 13b2a <smp_public_key_periph+0x4e>
		BT_WARN("Remote public key rejected");
   13b06:	466c      	mov	r4, sp
   13b08:	b088      	sub	sp, #32
   13b0a:	466a      	mov	r2, sp
   13b0c:	4b4f      	ldr	r3, [pc, #316]	; (13c4c <smp_public_key_periph+0x170>)
   13b0e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   13b12:	6153      	str	r3, [r2, #20]
   13b14:	4b4e      	ldr	r3, [pc, #312]	; (13c50 <smp_public_key_periph+0x174>)
   13b16:	6193      	str	r3, [r2, #24]
   13b18:	2303      	movs	r3, #3
   13b1a:	f842 3f10 	str.w	r3, [r2, #16]!
		BT_ERR("Unknown pairing method (%u)", smp->method);
   13b1e:	484d      	ldr	r0, [pc, #308]	; (13c54 <smp_public_key_periph+0x178>)
   13b20:	f009 fc52 	bl	1d3c8 <z_log_msg_static_create.constprop.0>
   13b24:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   13b26:	2008      	movs	r0, #8
   13b28:	e02f      	b.n	13b8a <smp_public_key_periph+0xae>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   13b2a:	210c      	movs	r1, #12
   13b2c:	4620      	mov	r0, r4
   13b2e:	f009 fce8 	bl	1d502 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   13b32:	4605      	mov	r5, r0
   13b34:	2800      	cmp	r0, #0
   13b36:	d0f6      	beq.n	13b26 <smp_public_key_periph+0x4a>
   13b38:	2140      	movs	r1, #64	; 0x40
   13b3a:	3008      	adds	r0, #8
   13b3c:	f009 fffe 	bl	1db3c <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   13b40:	f8df a104 	ldr.w	sl, [pc, #260]	; 13c48 <smp_public_key_periph+0x16c>
   13b44:	2220      	movs	r2, #32
   13b46:	f8da 1000 	ldr.w	r1, [sl]
   13b4a:	4681      	mov	r9, r0
   13b4c:	f007 fec1 	bl	1b8d2 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
   13b50:	2220      	movs	r2, #32
   13b52:	f8da 1000 	ldr.w	r1, [sl]
   13b56:	eb09 0002 	add.w	r0, r9, r2
   13b5a:	4411      	add	r1, r2
   13b5c:	f007 feb9 	bl	1b8d2 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   13b60:	2200      	movs	r2, #0
   13b62:	4629      	mov	r1, r5
   13b64:	4620      	mov	r0, r4
   13b66:	f009 fc12 	bl	1d38e <smp_send.constprop.0>
	switch (smp->method) {
   13b6a:	7a23      	ldrb	r3, [r4, #8]
   13b6c:	2b05      	cmp	r3, #5
   13b6e:	d85a      	bhi.n	13c26 <smp_public_key_periph+0x14a>
   13b70:	e8df f003 	tbb	[pc, r3]
   13b74:	030e3a03 	.word	0x030e3a03
   13b78:	5659      	.short	0x5659
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   13b7a:	2104      	movs	r1, #4
   13b7c:	4620      	mov	r0, r4
   13b7e:	f009 fcb0 	bl	1d4e2 <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
   13b82:	f7ff ff53 	bl	13a2c <smp_send_pairing_confirm>
		if (err) {
   13b86:	2800      	cmp	r0, #0
   13b88:	d03e      	beq.n	13c08 <smp_public_key_periph+0x12c>
}
   13b8a:	46bd      	mov	sp, r7
   13b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   13b90:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   13b92:	f8d4 80ec 	ldr.w	r8, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   13b96:	f7ff fdc3 	bl	13720 <latch_auth_cb>
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   13b9a:	2104      	movs	r1, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   13b9c:	4605      	mov	r5, r0
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   13b9e:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   13ba2:	f7fc fbdb 	bl	1035c <bt_rand>
   13ba6:	2800      	cmp	r0, #0
   13ba8:	d1bd      	bne.n	13b26 <smp_public_key_periph+0x4a>
		smp->passkey %= 1000000;
   13baa:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   13bae:	4a2a      	ldr	r2, [pc, #168]	; (13c58 <smp_public_key_periph+0x17c>)
	smp->passkey_round = 0U;
   13bb0:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
		smp->passkey %= 1000000;
   13bb4:	fbb3 f1f2 	udiv	r1, r3, r2
   13bb8:	fb02 3311 	mls	r3, r2, r1, r3
   13bbc:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	if (smp_auth_cb && smp_auth_cb->passkey_display) {
   13bc0:	b155      	cbz	r5, 13bd8 <smp_public_key_periph+0xfc>
   13bc2:	682b      	ldr	r3, [r5, #0]
   13bc4:	b143      	cbz	r3, 13bd8 <smp_public_key_periph+0xfc>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   13bc6:	210b      	movs	r1, #11
   13bc8:	4630      	mov	r0, r6
   13bca:	f009 fc8a 	bl	1d4e2 <atomic_set_bit>
		smp_auth_cb->passkey_display(conn, smp->passkey);
   13bce:	4640      	mov	r0, r8
   13bd0:	682b      	ldr	r3, [r5, #0]
   13bd2:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   13bd6:	4798      	blx	r3
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   13bd8:	2103      	movs	r1, #3
   13bda:	4620      	mov	r0, r4
   13bdc:	f009 fc81 	bl	1d4e2 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   13be0:	210e      	movs	r1, #14
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   13be2:	f009 fc7e 	bl	1d4e2 <atomic_set_bit>
		break;
   13be6:	e00f      	b.n	13c08 <smp_public_key_periph+0x12c>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   13be8:	4620      	mov	r0, r4
   13bea:	2103      	movs	r1, #3
   13bec:	f009 fc79 	bl	1d4e2 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   13bf0:	210e      	movs	r1, #14
   13bf2:	f009 fc76 	bl	1d4e2 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   13bf6:	4630      	mov	r0, r6
   13bf8:	210a      	movs	r1, #10
   13bfa:	f009 fc72 	bl	1d4e2 <atomic_set_bit>
		smp_auth_cb->passkey_entry(smp->chan.chan.conn);
   13bfe:	f8d8 3004 	ldr.w	r3, [r8, #4]
   13c02:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   13c06:	4798      	blx	r3
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   13c08:	4630      	mov	r0, r6
   13c0a:	2107      	movs	r1, #7
   13c0c:	f009 fc69 	bl	1d4e2 <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   13c10:	2008      	movs	r0, #8
   13c12:	f7ff fd77 	bl	13704 <smp_find>
   13c16:	b9a0      	cbnz	r0, 13c42 <smp_public_key_periph+0x166>
		return smp_dhkey_generate(smp);
   13c18:	4620      	mov	r0, r4
   13c1a:	f7ff fe55 	bl	138c8 <smp_dhkey_generate>
   13c1e:	e7b4      	b.n	13b8a <smp_public_key_periph+0xae>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   13c20:	2104      	movs	r1, #4
   13c22:	4620      	mov	r0, r4
   13c24:	e7dd      	b.n	13be2 <smp_public_key_periph+0x106>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   13c26:	466c      	mov	r4, sp
   13c28:	b088      	sub	sp, #32
   13c2a:	466a      	mov	r2, sp
   13c2c:	490b      	ldr	r1, [pc, #44]	; (13c5c <smp_public_key_periph+0x180>)
   13c2e:	6151      	str	r1, [r2, #20]
   13c30:	4907      	ldr	r1, [pc, #28]	; (13c50 <smp_public_key_periph+0x174>)
	switch (smp->method) {
   13c32:	e9c2 1306 	strd	r1, r3, [r2, #24]
		BT_ERR("Unknown pairing method (%u)", smp->method);
   13c36:	2304      	movs	r3, #4
   13c38:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   13c3c:	f842 3f10 	str.w	r3, [r2, #16]!
   13c40:	e76d      	b.n	13b1e <smp_public_key_periph+0x42>
	return 0;
   13c42:	2000      	movs	r0, #0
   13c44:	e7a1      	b.n	13b8a <smp_public_key_periph+0xae>
   13c46:	bf00      	nop
   13c48:	20009d28 	.word	0x20009d28
   13c4c:	000230e1 	.word	0x000230e1
   13c50:	0002357e 	.word	0x0002357e
   13c54:	0001fca4 	.word	0x0001fca4
   13c58:	000f4240 	.word	0x000f4240
   13c5c:	000230c1 	.word	0x000230c1

00013c60 <smp_public_key>:
{
   13c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13c62:	460c      	mov	r4, r1
   13c64:	4605      	mov	r5, r0
   13c66:	af00      	add	r7, sp, #0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   13c68:	f7ff fd5a 	bl	13720 <latch_auth_cb>
	struct bt_smp_public_key *req = (void *)buf->data;
   13c6c:	68a6      	ldr	r6, [r4, #8]
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   13c6e:	f105 0457 	add.w	r4, r5, #87	; 0x57
   13c72:	2220      	movs	r2, #32
   13c74:	4631      	mov	r1, r6
   13c76:	4620      	mov	r0, r4
   13c78:	f007 fe2b 	bl	1b8d2 <memcpy>
	memcpy(&smp->pkey[BT_PUB_KEY_COORD_LEN], req->y, BT_PUB_KEY_COORD_LEN);
   13c7c:	2220      	movs	r2, #32
   13c7e:	f105 0077 	add.w	r0, r5, #119	; 0x77
   13c82:	18b1      	adds	r1, r6, r2
   13c84:	f007 fe25 	bl	1b8d2 <memcpy>
	if (bt_pub_key_is_debug(smp->pkey)) {
   13c88:	4620      	mov	r0, r4
   13c8a:	f7fc fb85 	bl	10398 <bt_pub_key_is_debug>
   13c8e:	b948      	cbnz	r0, 13ca4 <smp_public_key+0x44>
	if (!sc_public_key) {
   13c90:	4b1e      	ldr	r3, [pc, #120]	; (13d0c <smp_public_key+0xac>)
   13c92:	681c      	ldr	r4, [r3, #0]
   13c94:	2c00      	cmp	r4, #0
   13c96:	d134      	bne.n	13d02 <smp_public_key+0xa2>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   13c98:	1d28      	adds	r0, r5, #4
   13c9a:	2106      	movs	r1, #6
   13c9c:	f009 fc21 	bl	1d4e2 <atomic_set_bit>
	return 0;
   13ca0:	4620      	mov	r0, r4
		return 0;
   13ca2:	e02c      	b.n	13cfe <smp_public_key+0x9e>
		BT_INFO("Remote is using Debug Public key");
   13ca4:	466c      	mov	r4, sp
   13ca6:	b088      	sub	sp, #32
   13ca8:	466a      	mov	r2, sp
   13caa:	4b19      	ldr	r3, [pc, #100]	; (13d10 <smp_public_key+0xb0>)
   13cac:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
   13cb0:	6153      	str	r3, [r2, #20]
   13cb2:	4b18      	ldr	r3, [pc, #96]	; (13d14 <smp_public_key+0xb4>)
   13cb4:	4818      	ldr	r0, [pc, #96]	; (13d18 <smp_public_key+0xb8>)
   13cb6:	6193      	str	r3, [r2, #24]
   13cb8:	2303      	movs	r3, #3
   13cba:	f842 3f10 	str.w	r3, [r2, #16]!
   13cbe:	f009 fb83 	bl	1d3c8 <z_log_msg_static_create.constprop.0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   13cc2:	210e      	movs	r1, #14
   13cc4:	46a5      	mov	sp, r4
   13cc6:	1d28      	adds	r0, r5, #4
   13cc8:	f009 fc0b 	bl	1d4e2 <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   13ccc:	f8d5 40ec 	ldr.w	r4, [r5, #236]	; 0xec
	if (!conn->le.keys) {
   13cd0:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   13cd4:	b933      	cbnz	r3, 13ce4 <smp_public_key+0x84>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   13cd6:	7a20      	ldrb	r0, [r4, #8]
   13cd8:	f104 0188 	add.w	r1, r4, #136	; 0x88
   13cdc:	f001 fab8 	bl	15250 <bt_keys_get_addr>
   13ce0:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys ||
   13ce4:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   13ce8:	2b00      	cmp	r3, #0
   13cea:	d0d1      	beq.n	13c90 <smp_public_key+0x30>
   13cec:	89da      	ldrh	r2, [r3, #14]
   13cee:	f002 0224 	and.w	r2, r2, #36	; 0x24
   13cf2:	2a00      	cmp	r2, #0
   13cf4:	d0cc      	beq.n	13c90 <smp_public_key+0x30>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   13cf6:	7b5b      	ldrb	r3, [r3, #13]
   13cf8:	079b      	lsls	r3, r3, #30
   13cfa:	d4c9      	bmi.n	13c90 <smp_public_key+0x30>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   13cfc:	2003      	movs	r0, #3
}
   13cfe:	46bd      	mov	sp, r7
   13d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	err = smp_public_key_periph(smp);
   13d02:	4628      	mov	r0, r5
   13d04:	f7ff feea 	bl	13adc <smp_public_key_periph>
	if (err) {
   13d08:	e7f9      	b.n	13cfe <smp_public_key+0x9e>
   13d0a:	bf00      	nop
   13d0c:	20009d28 	.word	0x20009d28
   13d10:	00023100 	.word	0x00023100
   13d14:	00023594 	.word	0x00023594
   13d18:	0001fca4 	.word	0x0001fca4

00013d1c <smp_pairing_req>:
{
   13d1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13d20:	b083      	sub	sp, #12
   13d22:	460d      	mov	r5, r1
   13d24:	af00      	add	r7, sp, #0
   13d26:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   13d28:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   13d2c:	f7ff fcf8 	bl	13720 <latch_auth_cb>
	struct bt_smp_pairing *req = (void *)buf->data;
   13d30:	f8d5 9008 	ldr.w	r9, [r5, #8]
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   13d34:	4680      	mov	r8, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   13d36:	f899 3003 	ldrb.w	r3, [r9, #3]
   13d3a:	3b07      	subs	r3, #7
   13d3c:	2b09      	cmp	r3, #9
   13d3e:	d904      	bls.n	13d4a <smp_pairing_req+0x2e>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   13d40:	2006      	movs	r0, #6
}
   13d42:	370c      	adds	r7, #12
   13d44:	46bd      	mov	sp, r7
   13d46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   13d4a:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
   13d4e:	b15b      	cbz	r3, 13d68 <smp_pairing_req+0x4c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   13d50:	1d25      	adds	r5, r4, #4
   13d52:	210f      	movs	r1, #15
   13d54:	4628      	mov	r0, r5
   13d56:	f009 fac8 	bl	1d2ea <atomic_test_bit>
   13d5a:	b980      	cbnz	r0, 13d7e <smp_pairing_req+0x62>
		int ret = smp_init(smp);
   13d5c:	4620      	mov	r0, r4
   13d5e:	f7ff fd97 	bl	13890 <smp_init>
		if (ret) {
   13d62:	b160      	cbz	r0, 13d7e <smp_pairing_req+0x62>
			return ret;
   13d64:	b2c0      	uxtb	r0, r0
   13d66:	e7ec      	b.n	13d42 <smp_pairing_req+0x26>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   13d68:	7a30      	ldrb	r0, [r6, #8]
   13d6a:	f106 0188 	add.w	r1, r6, #136	; 0x88
   13d6e:	f001 fa6f 	bl	15250 <bt_keys_get_addr>
   13d72:	f8c6 00b4 	str.w	r0, [r6, #180]	; 0xb4
		if (!conn->le.keys) {
   13d76:	2800      	cmp	r0, #0
   13d78:	d1ea      	bne.n	13d50 <smp_pairing_req+0x34>
			return BT_SMP_ERR_UNSPECIFIED;
   13d7a:	2008      	movs	r0, #8
   13d7c:	e7e1      	b.n	13d42 <smp_pairing_req+0x26>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   13d7e:	2301      	movs	r3, #1
	memcpy(smp->preq + 1, req, sizeof(*req));
   13d80:	2206      	movs	r2, #6
   13d82:	4649      	mov	r1, r9
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   13d84:	7263      	strb	r3, [r4, #9]
	memcpy(smp->preq + 1, req, sizeof(*req));
   13d86:	f104 000a 	add.w	r0, r4, #10
   13d8a:	f007 fda2 	bl	1b8d2 <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   13d8e:	2302      	movs	r3, #2
   13d90:	7423      	strb	r3, [r4, #16]
	rsp->auth_req = get_auth(smp, req->auth_req);
   13d92:	f899 1002 	ldrb.w	r1, [r9, #2]
   13d96:	4620      	mov	r0, r4
   13d98:	f7ff fcfe 	bl	13798 <get_auth>
   13d9c:	74e0      	strb	r0, [r4, #19]
	rsp->io_capability = get_io_capa(smp);
   13d9e:	4620      	mov	r0, r4
   13da0:	f7ff fcd4 	bl	1374c <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   13da4:	4ba8      	ldr	r3, [pc, #672]	; (14048 <smp_pairing_req+0x32c>)
	rsp->io_capability = get_io_capa(smp);
   13da6:	7460      	strb	r0, [r4, #17]
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   13da8:	781b      	ldrb	r3, [r3, #0]
   13daa:	74a3      	strb	r3, [r4, #18]
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   13dac:	2310      	movs	r3, #16
   13dae:	7523      	strb	r3, [r4, #20]
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
   13db0:	f899 3004 	ldrb.w	r3, [r9, #4]
   13db4:	f003 0303 	and.w	r3, r3, #3
   13db8:	7563      	strb	r3, [r4, #21]
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   13dba:	f899 3005 	ldrb.w	r3, [r9, #5]
   13dbe:	f003 0301 	and.w	r3, r3, #1
   13dc2:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   13dc4:	7ce3      	ldrb	r3, [r4, #19]
   13dc6:	071b      	lsls	r3, r3, #28
   13dc8:	d50d      	bpl.n	13de6 <smp_pairing_req+0xca>
   13dca:	f899 3002 	ldrb.w	r3, [r9, #2]
   13dce:	0718      	lsls	r0, r3, #28
   13dd0:	d509      	bpl.n	13de6 <smp_pairing_req+0xca>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   13dd2:	2105      	movs	r1, #5
   13dd4:	4628      	mov	r0, r5
   13dd6:	f009 fb84 	bl	1d4e2 <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
   13dda:	7d63      	ldrb	r3, [r4, #21]
   13ddc:	f003 0302 	and.w	r3, r3, #2
   13de0:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist &= SEND_KEYS_SC;
   13de2:	2300      	movs	r3, #0
   13de4:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   13de6:	7ce3      	ldrb	r3, [r4, #19]
   13de8:	0699      	lsls	r1, r3, #26
   13dea:	d507      	bpl.n	13dfc <smp_pairing_req+0xe0>
   13dec:	f899 3002 	ldrb.w	r3, [r9, #2]
   13df0:	069a      	lsls	r2, r3, #26
   13df2:	d503      	bpl.n	13dfc <smp_pairing_req+0xe0>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   13df4:	2114      	movs	r1, #20
   13df6:	4628      	mov	r0, r5
   13df8:	f009 fb73 	bl	1d4e2 <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
   13dfc:	7da3      	ldrb	r3, [r4, #22]
   13dfe:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist = rsp->init_key_dist;
   13e02:	7d63      	ldrb	r3, [r4, #21]
   13e04:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   13e08:	7ce3      	ldrb	r3, [r4, #19]
   13e0a:	07db      	lsls	r3, r3, #31
   13e0c:	d507      	bpl.n	13e1e <smp_pairing_req+0x102>
   13e0e:	f899 3002 	ldrb.w	r3, [r9, #2]
   13e12:	07d8      	lsls	r0, r3, #31
   13e14:	d503      	bpl.n	13e1e <smp_pairing_req+0x102>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   13e16:	210d      	movs	r1, #13
   13e18:	4628      	mov	r0, r5
   13e1a:	f009 fb62 	bl	1d4e2 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   13e1e:	2103      	movs	r1, #3
   13e20:	4628      	mov	r0, r5
   13e22:	f009 fb5e 	bl	1d4e2 <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   13e26:	2105      	movs	r1, #5
	smp->method = get_pair_method(smp, req->io_capability);
   13e28:	f899 9000 	ldrb.w	r9, [r9]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   13e2c:	f009 fa5d 	bl	1d2ea <atomic_test_bit>
   13e30:	bb40      	cbnz	r0, 13e84 <smp_pairing_req+0x168>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   13e32:	f1b9 0f04 	cmp.w	r9, #4
   13e36:	d845      	bhi.n	13ec4 <smp_pairing_req+0x1a8>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   13e38:	7ae3      	ldrb	r3, [r4, #11]
   13e3a:	7ca2      	ldrb	r2, [r4, #18]
   13e3c:	4013      	ands	r3, r2
   13e3e:	07d9      	lsls	r1, r3, #31
   13e40:	d43e      	bmi.n	13ec0 <smp_pairing_req+0x1a4>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   13e42:	7b21      	ldrb	r1, [r4, #12]
   13e44:	7ce3      	ldrb	r3, [r4, #19]
   13e46:	4319      	orrs	r1, r3
   13e48:	f011 0104 	ands.w	r1, r1, #4
   13e4c:	d011      	beq.n	13e72 <smp_pairing_req+0x156>
	method = gen_method_legacy[remote_io][get_io_capa(smp)];
   13e4e:	4620      	mov	r0, r4
   13e50:	f7ff fc7c 	bl	1374c <get_io_capa>
   13e54:	4b7d      	ldr	r3, [pc, #500]	; (1404c <smp_pairing_req+0x330>)
   13e56:	eb09 0989 	add.w	r9, r9, r9, lsl #2
   13e5a:	4499      	add	r9, r3
   13e5c:	f819 1000 	ldrb.w	r1, [r9, r0]
	if (method == PASSKEY_ROLE) {
   13e60:	2904      	cmp	r1, #4
   13e62:	d106      	bne.n	13e72 <smp_pairing_req+0x156>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   13e64:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   13e68:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_DISPLAY;
   13e6a:	2b00      	cmp	r3, #0
   13e6c:	bf14      	ite	ne
   13e6e:	2101      	movne	r1, #1
   13e70:	2102      	moveq	r1, #2
	smp->method = get_pair_method(smp, req->io_capability);
   13e72:	7221      	strb	r1, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   13e74:	4620      	mov	r0, r4
   13e76:	f8d6 10b4 	ldr.w	r1, [r6, #180]	; 0xb4
   13e7a:	f009 fa3c 	bl	1d2f6 <update_keys_check>
   13e7e:	bb18      	cbnz	r0, 13ec8 <smp_pairing_req+0x1ac>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   13e80:	2003      	movs	r0, #3
   13e82:	e75e      	b.n	13d42 <smp_pairing_req+0x26>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   13e84:	7b23      	ldrb	r3, [r4, #12]
   13e86:	7ce0      	ldrb	r0, [r4, #19]
   13e88:	ea03 0200 	and.w	r2, r3, r0
   13e8c:	0712      	lsls	r2, r2, #28
   13e8e:	d506      	bpl.n	13e9e <smp_pairing_req+0x182>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   13e90:	7ae2      	ldrb	r2, [r4, #11]
   13e92:	f894 c012 	ldrb.w	ip, [r4, #18]
   13e96:	ea42 020c 	orr.w	r2, r2, ip
   13e9a:	07d2      	lsls	r2, r2, #31
   13e9c:	d4e9      	bmi.n	13e72 <smp_pairing_req+0x156>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   13e9e:	f1b9 0f04 	cmp.w	r9, #4
   13ea2:	d80f      	bhi.n	13ec4 <smp_pairing_req+0x1a8>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   13ea4:	ea43 0100 	orr.w	r1, r3, r0
   13ea8:	f011 0104 	ands.w	r1, r1, #4
   13eac:	d0e1      	beq.n	13e72 <smp_pairing_req+0x156>
	return gen_method_sc[remote_io][get_io_capa(smp)];
   13eae:	4620      	mov	r0, r4
   13eb0:	f7ff fc4c 	bl	1374c <get_io_capa>
   13eb4:	4b66      	ldr	r3, [pc, #408]	; (14050 <smp_pairing_req+0x334>)
   13eb6:	eb09 0989 	add.w	r9, r9, r9, lsl #2
   13eba:	444b      	add	r3, r9
   13ebc:	5c19      	ldrb	r1, [r3, r0]
   13ebe:	e7d8      	b.n	13e72 <smp_pairing_req+0x156>
		return LEGACY_OOB;
   13ec0:	2106      	movs	r1, #6
   13ec2:	e7d6      	b.n	13e72 <smp_pairing_req+0x156>
		return JUST_WORKS;
   13ec4:	2100      	movs	r1, #0
   13ec6:	e7d4      	b.n	13e72 <smp_pairing_req+0x156>
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   13ec8:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   13ecc:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
   13ece:	2b03      	cmp	r3, #3
   13ed0:	d043      	beq.n	13f5a <smp_pairing_req+0x23e>
   13ed2:	d831      	bhi.n	13f38 <smp_pairing_req+0x21c>
   13ed4:	3b01      	subs	r3, #1
   13ed6:	2b01      	cmp	r3, #1
   13ed8:	f63f af4f 	bhi.w	13d7a <smp_pairing_req+0x5e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   13edc:	2105      	movs	r1, #5
   13ede:	4628      	mov	r0, r5
   13ee0:	f009 fa03 	bl	1d2ea <atomic_test_bit>
   13ee4:	2800      	cmp	r0, #0
   13ee6:	f040 80c9 	bne.w	1407c <smp_pairing_req+0x360>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   13eea:	4620      	mov	r0, r4
   13eec:	f7ff fc18 	bl	13720 <latch_auth_cb>
   13ef0:	4680      	mov	r8, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   13ef2:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   13ef4:	f8d4 90ec 	ldr.w	r9, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   13ef8:	f7ff fc12 	bl	13720 <latch_auth_cb>
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   13efc:	f109 0188 	add.w	r1, r9, #136	; 0x88
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   13f00:	4606      	mov	r6, r0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   13f02:	f899 0008 	ldrb.w	r0, [r9, #8]
   13f06:	f001 fa3f 	bl	15388 <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   13f0a:	7a23      	ldrb	r3, [r4, #8]
   13f0c:	b348      	cbz	r0, 13f62 <smp_pairing_req+0x246>
   13f0e:	7b42      	ldrb	r2, [r0, #13]
   13f10:	07d2      	lsls	r2, r2, #31
   13f12:	d526      	bpl.n	13f62 <smp_pairing_req+0x246>
   13f14:	bb2b      	cbnz	r3, 13f62 <smp_pairing_req+0x246>
		BT_ERR("JustWorks failed, authenticated keys present");
   13f16:	466c      	mov	r4, sp
   13f18:	b088      	sub	sp, #32
   13f1a:	466a      	mov	r2, sp
   13f1c:	4b4d      	ldr	r3, [pc, #308]	; (14054 <smp_pairing_req+0x338>)
   13f1e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13f22:	6153      	str	r3, [r2, #20]
   13f24:	4b4c      	ldr	r3, [pc, #304]	; (14058 <smp_pairing_req+0x33c>)
   13f26:	6193      	str	r3, [r2, #24]
   13f28:	2303      	movs	r3, #3
   13f2a:	f842 3f10 	str.w	r3, [r2, #16]!
		BT_ERR("Unknown pairing method (%u)", smp->method);
   13f2e:	484b      	ldr	r0, [pc, #300]	; (1405c <smp_pairing_req+0x340>)
   13f30:	f009 fa4a 	bl	1d3c8 <z_log_msg_static_create.constprop.0>
   13f34:	46a5      	mov	sp, r4
	if (ret) {
   13f36:	e720      	b.n	13d7a <smp_pairing_req+0x5e>
	switch (sec) {
   13f38:	2b04      	cmp	r3, #4
   13f3a:	f47f af1e 	bne.w	13d7a <smp_pairing_req+0x5e>
	return MIN(req->max_key_size, rsp->max_key_size);
   13f3e:	7d23      	ldrb	r3, [r4, #20]
   13f40:	7b62      	ldrb	r2, [r4, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   13f42:	4293      	cmp	r3, r2
   13f44:	bf28      	it	cs
   13f46:	4613      	movcs	r3, r2
   13f48:	2b10      	cmp	r3, #16
   13f4a:	f47f aef9 	bne.w	13d40 <smp_pairing_req+0x24>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   13f4e:	2105      	movs	r1, #5
   13f50:	4628      	mov	r0, r5
   13f52:	f009 f9ca 	bl	1d2ea <atomic_test_bit>
   13f56:	2800      	cmp	r0, #0
   13f58:	d092      	beq.n	13e80 <smp_pairing_req+0x164>
		if (smp->method == JUST_WORKS) {
   13f5a:	7a23      	ldrb	r3, [r4, #8]
   13f5c:	2b00      	cmp	r3, #0
   13f5e:	d1bd      	bne.n	13edc <smp_pairing_req+0x1c0>
   13f60:	e78e      	b.n	13e80 <smp_pairing_req+0x164>
	switch (smp->method) {
   13f62:	2b06      	cmp	r3, #6
   13f64:	d85f      	bhi.n	14026 <smp_pairing_req+0x30a>
   13f66:	e8df f003 	tbb	[pc, r3]
   13f6a:	5617      	.short	0x5617
   13f6c:	5e5e5e2f 	.word	0x5e5e5e2f
   13f70:	04          	.byte	0x04
   13f71:	00          	.byte	0x00
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   13f72:	2e00      	cmp	r6, #0
   13f74:	d065      	beq.n	14042 <smp_pairing_req+0x326>
   13f76:	68f3      	ldr	r3, [r6, #12]
   13f78:	2b00      	cmp	r3, #0
   13f7a:	d062      	beq.n	14042 <smp_pairing_req+0x326>
			struct bt_conn_oob_info info = {
   13f7c:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   13f7e:	210a      	movs	r1, #10
   13f80:	4628      	mov	r0, r5
			struct bt_conn_oob_info info = {
   13f82:	80bb      	strh	r3, [r7, #4]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   13f84:	f009 faad 	bl	1d4e2 <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   13f88:	68f3      	ldr	r3, [r6, #12]
   13f8a:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   13f8e:	1d39      	adds	r1, r7, #4
   13f90:	4798      	blx	r3
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   13f92:	7a23      	ldrb	r3, [r4, #8]
   13f94:	2b00      	cmp	r3, #0
   13f96:	d167      	bne.n	14068 <smp_pairing_req+0x34c>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   13f98:	210f      	movs	r1, #15
   13f9a:	4628      	mov	r0, r5
   13f9c:	f009 f9a5 	bl	1d2ea <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   13fa0:	2800      	cmp	r0, #0
   13fa2:	d161      	bne.n	14068 <smp_pairing_req+0x34c>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   13fa4:	f1b8 0f00 	cmp.w	r8, #0
   13fa8:	d05e      	beq.n	14068 <smp_pairing_req+0x34c>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   13faa:	f8d8 3014 	ldr.w	r3, [r8, #20]
   13fae:	2b00      	cmp	r3, #0
   13fb0:	d05a      	beq.n	14068 <smp_pairing_req+0x34c>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   13fb2:	4628      	mov	r0, r5
   13fb4:	210a      	movs	r1, #10
   13fb6:	f009 fa94 	bl	1d4e2 <atomic_set_bit>
		smp_auth_cb->pairing_confirm(smp->chan.chan.conn);
   13fba:	f8d8 3014 	ldr.w	r3, [r8, #20]
   13fbe:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
		smp_auth_cb->pairing_confirm(conn);
   13fc2:	4798      	blx	r3
		return 0;
   13fc4:	2000      	movs	r0, #0
   13fc6:	e6bc      	b.n	13d42 <smp_pairing_req+0x26>
			if (bt_rand(&passkey, sizeof(passkey))) {
   13fc8:	2104      	movs	r1, #4
   13fca:	1878      	adds	r0, r7, r1
   13fcc:	f7fc f9c6 	bl	1035c <bt_rand>
   13fd0:	2800      	cmp	r0, #0
   13fd2:	f47f aed2 	bne.w	13d7a <smp_pairing_req+0x5e>
			passkey %= 1000000;
   13fd6:	687b      	ldr	r3, [r7, #4]
   13fd8:	4a21      	ldr	r2, [pc, #132]	; (14060 <smp_pairing_req+0x344>)
   13fda:	fbb3 f1f2 	udiv	r1, r3, r2
   13fde:	fb02 3311 	mls	r3, r2, r1, r3
   13fe2:	607b      	str	r3, [r7, #4]
		if (smp_auth_cb && smp_auth_cb->passkey_display) {
   13fe4:	b14e      	cbz	r6, 13ffa <smp_pairing_req+0x2de>
   13fe6:	6833      	ldr	r3, [r6, #0]
   13fe8:	b13b      	cbz	r3, 13ffa <smp_pairing_req+0x2de>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   13fea:	210b      	movs	r1, #11
   13fec:	4628      	mov	r0, r5
   13fee:	f009 fa78 	bl	1d4e2 <atomic_set_bit>
			smp_auth_cb->passkey_display(conn, passkey);
   13ff2:	4648      	mov	r0, r9
   13ff4:	6833      	ldr	r3, [r6, #0]
   13ff6:	6879      	ldr	r1, [r7, #4]
   13ff8:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   13ffa:	687b      	ldr	r3, [r7, #4]
	dst[1] = val >> 8;
   13ffc:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
   14000:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	sys_put_le16(val >> 16, &dst[2]);
   14004:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   14006:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	dst[1] = val >> 8;
   1400a:	0a1b      	lsrs	r3, r3, #8
   1400c:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
   14010:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	if (ret) {
   14014:	e7bd      	b.n	13f92 <smp_pairing_req+0x276>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   14016:	4628      	mov	r0, r5
   14018:	210a      	movs	r1, #10
   1401a:	f009 fa62 	bl	1d4e2 <atomic_set_bit>
		smp_auth_cb->passkey_entry(conn);
   1401e:	4648      	mov	r0, r9
   14020:	6873      	ldr	r3, [r6, #4]
   14022:	4798      	blx	r3
	if (ret) {
   14024:	e7b5      	b.n	13f92 <smp_pairing_req+0x276>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   14026:	466c      	mov	r4, sp
   14028:	b088      	sub	sp, #32
   1402a:	466a      	mov	r2, sp
   1402c:	490d      	ldr	r1, [pc, #52]	; (14064 <smp_pairing_req+0x348>)
   1402e:	6151      	str	r1, [r2, #20]
   14030:	4909      	ldr	r1, [pc, #36]	; (14058 <smp_pairing_req+0x33c>)
	switch (smp->method) {
   14032:	e9c2 1306 	strd	r1, r3, [r2, #24]
		BT_ERR("Unknown pairing method (%u)", smp->method);
   14036:	2304      	movs	r3, #4
   14038:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1403c:	f842 3f10 	str.w	r3, [r2, #16]!
   14040:	e775      	b.n	13f2e <smp_pairing_req+0x212>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   14042:	2002      	movs	r0, #2
   14044:	e67d      	b.n	13d42 <smp_pairing_req+0x26>
   14046:	bf00      	nop
   14048:	2000a073 	.word	0x2000a073
   1404c:	00023653 	.word	0x00023653
   14050:	0002363a 	.word	0x0002363a
   14054:	00023125 	.word	0x00023125
   14058:	0002349b 	.word	0x0002349b
   1405c:	0001fca4 	.word	0x0001fca4
   14060:	000f4240 	.word	0x000f4240
   14064:	000230c1 	.word	0x000230c1
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   14068:	2103      	movs	r1, #3
   1406a:	4620      	mov	r0, r4
   1406c:	f009 fa39 	bl	1d4e2 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   14070:	210e      	movs	r1, #14
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   14072:	f009 fa36 	bl	1d4e2 <atomic_set_bit>
	return send_pairing_rsp(smp);
   14076:	f009 fa63 	bl	1d540 <send_pairing_rsp>
   1407a:	e662      	b.n	13d42 <smp_pairing_req+0x26>
	if (!IS_ENABLED(CONFIG_BT_SMP_SC_PAIR_ONLY) &&
   1407c:	7a23      	ldrb	r3, [r4, #8]
   1407e:	b993      	cbnz	r3, 140a6 <smp_pairing_req+0x38a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   14080:	210f      	movs	r1, #15
   14082:	4628      	mov	r0, r5
   14084:	f009 f931 	bl	1d2ea <atomic_test_bit>
	    (DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   14088:	b968      	cbnz	r0, 140a6 <smp_pairing_req+0x38a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1408a:	f1b8 0f00 	cmp.w	r8, #0
   1408e:	d00a      	beq.n	140a6 <smp_pairing_req+0x38a>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   14090:	f8d8 3014 	ldr.w	r3, [r8, #20]
   14094:	b13b      	cbz	r3, 140a6 <smp_pairing_req+0x38a>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   14096:	4628      	mov	r0, r5
   14098:	210a      	movs	r1, #10
   1409a:	f009 fa22 	bl	1d4e2 <atomic_set_bit>
		smp_auth_cb->pairing_confirm(conn);
   1409e:	4630      	mov	r0, r6
   140a0:	f8d8 3014 	ldr.w	r3, [r8, #20]
   140a4:	e78d      	b.n	13fc2 <smp_pairing_req+0x2a6>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   140a6:	210c      	movs	r1, #12
   140a8:	4620      	mov	r0, r4
   140aa:	e7e2      	b.n	14072 <smp_pairing_req+0x356>

000140ac <compute_and_check_and_send_periph_dhcheck>:
{
   140ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   140b0:	4604      	mov	r4, r0
   140b2:	b0a2      	sub	sp, #136	; 0x88
   140b4:	af04      	add	r7, sp, #16
	(void)memset(r, 0, sizeof(r));
   140b6:	2210      	movs	r2, #16
   140b8:	2100      	movs	r1, #0
   140ba:	4638      	mov	r0, r7
   140bc:	f007 fc14 	bl	1b8e8 <memset>
	switch (smp->method) {
   140c0:	7a23      	ldrb	r3, [r4, #8]
   140c2:	2b05      	cmp	r3, #5
   140c4:	d840      	bhi.n	14148 <compute_and_check_and_send_periph_dhcheck+0x9c>
   140c6:	e8df f003 	tbb	[pc, r3]
   140ca:	0309      	.short	0x0309
   140cc:	393f0903 	.word	0x393f0903
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   140d0:	2204      	movs	r2, #4
   140d2:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   140d6:	4638      	mov	r0, r7
   140d8:	f007 fbfb 	bl	1b8d2 <memcpy>
	uint8_t m[53] = { 0x00, /* counter */
   140dc:	4b7a      	ldr	r3, [pc, #488]	; (142c8 <compute_and_check_and_send_periph_dhcheck+0x21c>)
		   &smp->chan.chan.conn->le.init_addr,
   140de:	f8d4 80ec 	ldr.w	r8, [r4, #236]	; 0xec
	uint8_t m[53] = { 0x00, /* counter */
   140e2:	f107 0240 	add.w	r2, r7, #64	; 0x40
   140e6:	f103 0630 	add.w	r6, r3, #48	; 0x30
   140ea:	4615      	mov	r5, r2
   140ec:	6818      	ldr	r0, [r3, #0]
   140ee:	6859      	ldr	r1, [r3, #4]
   140f0:	3308      	adds	r3, #8
   140f2:	c503      	stmia	r5!, {r0, r1}
   140f4:	42b3      	cmp	r3, r6
   140f6:	462a      	mov	r2, r5
   140f8:	d1f7      	bne.n	140ea <compute_and_check_and_send_periph_dhcheck+0x3e>
   140fa:	6818      	ldr	r0, [r3, #0]
   140fc:	791b      	ldrb	r3, [r3, #4]
   140fe:	6028      	str	r0, [r5, #0]
   14100:	712b      	strb	r3, [r5, #4]
	sys_memcpy_swap(ws, w, 32);
   14102:	f107 0520 	add.w	r5, r7, #32
   14106:	2220      	movs	r2, #32
   14108:	4628      	mov	r0, r5
   1410a:	f104 0197 	add.w	r1, r4, #151	; 0x97
   1410e:	f009 f8e0 	bl	1d2d2 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
   14112:	2220      	movs	r2, #32
   14114:	4629      	mov	r1, r5
   14116:	486d      	ldr	r0, [pc, #436]	; (142cc <compute_and_check_and_send_periph_dhcheck+0x220>)
   14118:	f107 0310 	add.w	r3, r7, #16
   1411c:	f009 f917 	bl	1d34e <bt_smp_aes_cmac>
	if (err) {
   14120:	b340      	cbz	r0, 14174 <compute_and_check_and_send_periph_dhcheck+0xc8>
		BT_ERR("Calculate LTK failed");
   14122:	466c      	mov	r4, sp
   14124:	b088      	sub	sp, #32
   14126:	aa04      	add	r2, sp, #16
   14128:	4b69      	ldr	r3, [pc, #420]	; (142d0 <compute_and_check_and_send_periph_dhcheck+0x224>)
   1412a:	6153      	str	r3, [r2, #20]
   1412c:	4b69      	ldr	r3, [pc, #420]	; (142d4 <compute_and_check_and_send_periph_dhcheck+0x228>)
   1412e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14132:	6193      	str	r3, [r2, #24]
   14134:	2303      	movs	r3, #3
   14136:	f842 3f10 	str.w	r3, [r2, #16]!
   1413a:	e012      	b.n	14162 <compute_and_check_and_send_periph_dhcheck+0xb6>
		if (smp->oobd_remote) {
   1413c:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
   14140:	2900      	cmp	r1, #0
   14142:	d0cb      	beq.n	140dc <compute_and_check_and_send_periph_dhcheck+0x30>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   14144:	2210      	movs	r2, #16
   14146:	e7c6      	b.n	140d6 <compute_and_check_and_send_periph_dhcheck+0x2a>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   14148:	466c      	mov	r4, sp
   1414a:	b088      	sub	sp, #32
   1414c:	aa04      	add	r2, sp, #16
   1414e:	4962      	ldr	r1, [pc, #392]	; (142d8 <compute_and_check_and_send_periph_dhcheck+0x22c>)
   14150:	6151      	str	r1, [r2, #20]
   14152:	4960      	ldr	r1, [pc, #384]	; (142d4 <compute_and_check_and_send_periph_dhcheck+0x228>)
	switch (smp->method) {
   14154:	e9c2 1306 	strd	r1, r3, [r2, #24]
		BT_ERR("Unknown pairing method (%u)", smp->method);
   14158:	2304      	movs	r3, #4
   1415a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1415e:	f842 3f10 	str.w	r3, [r2, #16]!
		BT_ERR("Calculate LTK failed");
   14162:	485e      	ldr	r0, [pc, #376]	; (142dc <compute_and_check_and_send_periph_dhcheck+0x230>)
   14164:	f009 f930 	bl	1d3c8 <z_log_msg_static_create.constprop.0>
   14168:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   1416a:	2008      	movs	r0, #8
}
   1416c:	3778      	adds	r7, #120	; 0x78
   1416e:	46bd      	mov	sp, r7
   14170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   14174:	f104 0937 	add.w	r9, r4, #55	; 0x37
	sys_memcpy_swap(m + 5, n1, 16);
   14178:	2210      	movs	r2, #16
   1417a:	4649      	mov	r1, r9
   1417c:	f107 0045 	add.w	r0, r7, #69	; 0x45
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   14180:	f104 0a27 	add.w	sl, r4, #39	; 0x27
	sys_memcpy_swap(m + 5, n1, 16);
   14184:	f009 f8a5 	bl	1d2d2 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   14188:	2210      	movs	r2, #16
   1418a:	4651      	mov	r1, sl
   1418c:	f107 0055 	add.w	r0, r7, #85	; 0x55
   14190:	f009 f89f 	bl	1d2d2 <sys_memcpy_swap>
	m[37] = a1->type;
   14194:	f898 308f 	ldrb.w	r3, [r8, #143]	; 0x8f
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   14198:	2206      	movs	r2, #6
	m[37] = a1->type;
   1419a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   1419e:	f108 0190 	add.w	r1, r8, #144	; 0x90
   141a2:	f107 0066 	add.w	r0, r7, #102	; 0x66
   141a6:	f009 f894 	bl	1d2d2 <sys_memcpy_swap>
	m[44] = a2->type;
   141aa:	f898 3096 	ldrb.w	r3, [r8, #150]	; 0x96
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   141ae:	2206      	movs	r2, #6
	m[44] = a2->type;
   141b0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   141b4:	f108 0197 	add.w	r1, r8, #151	; 0x97
   141b8:	f107 006d 	add.w	r0, r7, #109	; 0x6d
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   141bc:	f104 06c7 	add.w	r6, r4, #199	; 0xc7
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   141c0:	f009 f887 	bl	1d2d2 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
   141c4:	4633      	mov	r3, r6
   141c6:	2235      	movs	r2, #53	; 0x35
   141c8:	f107 0140 	add.w	r1, r7, #64	; 0x40
   141cc:	f107 0010 	add.w	r0, r7, #16
   141d0:	f009 f8bd 	bl	1d34e <bt_smp_aes_cmac>
	if (err) {
   141d4:	2800      	cmp	r0, #0
   141d6:	d1a4      	bne.n	14122 <compute_and_check_and_send_periph_dhcheck+0x76>
	sys_mem_swap(mackey, 16);
   141d8:	4630      	mov	r0, r6
   141da:	f009 f903 	bl	1d3e4 <sys_mem_swap.constprop.0>
	m[0] = 0x01;
   141de:	2301      	movs	r3, #1
		   smp->tk)) {
   141e0:	f104 0847 	add.w	r8, r4, #71	; 0x47
	m[0] = 0x01;
   141e4:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
   141e8:	2235      	movs	r2, #53	; 0x35
   141ea:	4643      	mov	r3, r8
   141ec:	f107 0140 	add.w	r1, r7, #64	; 0x40
   141f0:	f107 0010 	add.w	r0, r7, #16
   141f4:	f009 f8ab 	bl	1d34e <bt_smp_aes_cmac>
	if (err) {
   141f8:	2800      	cmp	r0, #0
   141fa:	d192      	bne.n	14122 <compute_and_check_and_send_periph_dhcheck+0x76>
	sys_mem_swap(ltk, 16);
   141fc:	4640      	mov	r0, r8
   141fe:	f009 f8f1 	bl	1d3e4 <sys_mem_swap.constprop.0>
		   &smp->chan.chan.conn->le.resp_addr,
   14202:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   14206:	f107 0240 	add.w	r2, r7, #64	; 0x40
   1420a:	9203      	str	r2, [sp, #12]
		   &smp->chan.chan.conn->le.init_addr, e)) {
   1420c:	f103 028f 	add.w	r2, r3, #143	; 0x8f
		   &smp->chan.chan.conn->le.resp_addr,
   14210:	3396      	adds	r3, #150	; 0x96
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   14212:	9301      	str	r3, [sp, #4]
   14214:	f104 0311 	add.w	r3, r4, #17
   14218:	9202      	str	r2, [sp, #8]
   1421a:	9300      	str	r3, [sp, #0]
   1421c:	464a      	mov	r2, r9
   1421e:	463b      	mov	r3, r7
   14220:	4651      	mov	r1, sl
   14222:	4630      	mov	r0, r6
   14224:	f009 f8ec 	bl	1d400 <smp_f6>
   14228:	b120      	cbz	r0, 14234 <compute_and_check_and_send_periph_dhcheck+0x188>
		BT_ERR("Calculate local DHKey check failed");
   1422a:	466c      	mov	r4, sp
   1422c:	b088      	sub	sp, #32
   1422e:	aa04      	add	r2, sp, #16
   14230:	4b2b      	ldr	r3, [pc, #172]	; (142e0 <compute_and_check_and_send_periph_dhcheck+0x234>)
   14232:	e77a      	b.n	1412a <compute_and_check_and_send_periph_dhcheck+0x7e>
	if (smp->method == LE_SC_OOB) {
   14234:	7a23      	ldrb	r3, [r4, #8]
   14236:	2b05      	cmp	r3, #5
   14238:	d106      	bne.n	14248 <compute_and_check_and_send_periph_dhcheck+0x19c>
		if (smp->oobd_local) {
   1423a:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
			memcpy(r, smp->oobd_local->r, sizeof(r));
   1423e:	2210      	movs	r2, #16
   14240:	4638      	mov	r0, r7
		if (smp->oobd_local) {
   14242:	b1c1      	cbz	r1, 14276 <compute_and_check_and_send_periph_dhcheck+0x1ca>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   14244:	f007 fb45 	bl	1b8d2 <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
   14248:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   1424c:	4649      	mov	r1, r9
		   &smp->chan.chan.conn->le.resp_addr, re)) {
   1424e:	f103 0296 	add.w	r2, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
   14252:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   14254:	9301      	str	r3, [sp, #4]
   14256:	f104 030a 	add.w	r3, r4, #10
   1425a:	9202      	str	r2, [sp, #8]
   1425c:	9300      	str	r3, [sp, #0]
   1425e:	4652      	mov	r2, sl
   14260:	463b      	mov	r3, r7
   14262:	4630      	mov	r0, r6
   14264:	9503      	str	r5, [sp, #12]
   14266:	f009 f8cb 	bl	1d400 <smp_f6>
   1426a:	b138      	cbz	r0, 1427c <compute_and_check_and_send_periph_dhcheck+0x1d0>
		BT_ERR("Calculate remote DHKey check failed");
   1426c:	466c      	mov	r4, sp
   1426e:	b088      	sub	sp, #32
   14270:	aa04      	add	r2, sp, #16
   14272:	4b1c      	ldr	r3, [pc, #112]	; (142e4 <compute_and_check_and_send_periph_dhcheck+0x238>)
   14274:	e759      	b.n	1412a <compute_and_check_and_send_periph_dhcheck+0x7e>
			memset(r, 0, sizeof(r));
   14276:	f007 fb37 	bl	1b8e8 <memset>
   1427a:	e7e5      	b.n	14248 <compute_and_check_and_send_periph_dhcheck+0x19c>
	if (memcmp(smp->e, re, 16)) {
   1427c:	4629      	mov	r1, r5
   1427e:	2210      	movs	r2, #16
   14280:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   14284:	f007 fb15 	bl	1b8b2 <memcmp>
   14288:	4605      	mov	r5, r0
   1428a:	b9d8      	cbnz	r0, 142c4 <compute_and_check_and_send_periph_dhcheck+0x218>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   1428c:	210d      	movs	r1, #13
   1428e:	4620      	mov	r0, r4
   14290:	f009 f937 	bl	1d502 <smp_create_pdu.constprop.0>
	if (!buf) {
   14294:	4606      	mov	r6, r0
   14296:	2800      	cmp	r0, #0
   14298:	f43f af67 	beq.w	1416a <compute_and_check_and_send_periph_dhcheck+0xbe>
   1429c:	2110      	movs	r1, #16
   1429e:	3008      	adds	r0, #8
   142a0:	f009 fc4c 	bl	1db3c <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
   142a4:	2210      	movs	r2, #16
   142a6:	f107 0140 	add.w	r1, r7, #64	; 0x40
   142aa:	f007 fb12 	bl	1b8d2 <memcpy>
	smp_send(smp, buf, NULL, NULL);
   142ae:	462a      	mov	r2, r5
   142b0:	4631      	mov	r1, r6
   142b2:	4620      	mov	r0, r4
   142b4:	f009 f86b 	bl	1d38e <smp_send.constprop.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   142b8:	1d20      	adds	r0, r4, #4
   142ba:	2101      	movs	r1, #1
   142bc:	f009 f911 	bl	1d4e2 <atomic_set_bit>
	return 0;
   142c0:	4628      	mov	r0, r5
   142c2:	e753      	b.n	1416c <compute_and_check_and_send_periph_dhcheck+0xc0>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   142c4:	200b      	movs	r0, #11
   142c6:	e751      	b.n	1416c <compute_and_check_and_send_periph_dhcheck+0xc0>
   142c8:	0001fddc 	.word	0x0001fddc
   142cc:	000235d0 	.word	0x000235d0
   142d0:	00023156 	.word	0x00023156
   142d4:	000235e0 	.word	0x000235e0
   142d8:	000230c1 	.word	0x000230c1
   142dc:	0001fca4 	.word	0x0001fca4
   142e0:	0002316f 	.word	0x0002316f
   142e4:	00023196 	.word	0x00023196

000142e8 <bt_smp_connected>:
{
   142e8:	b538      	push	{r3, r4, r5, lr}
   142ea:	4604      	mov	r4, r0
	k_work_init_delayable(&smp->work, smp_timeout);
   142ec:	4908      	ldr	r1, [pc, #32]	; (14310 <bt_smp_connected+0x28>)
   142ee:	f1a0 05ec 	sub.w	r5, r0, #236	; 0xec
   142f2:	308c      	adds	r0, #140	; 0x8c
   142f4:	f00a fea3 	bl	1f03e <k_work_init_delayable>
	smp_reset(smp);
   142f8:	4628      	mov	r0, r5
   142fa:	f009 f990 	bl	1d61e <smp_reset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   142fe:	4b05      	ldr	r3, [pc, #20]	; (14314 <bt_smp_connected+0x2c>)
   14300:	34bc      	adds	r4, #188	; 0xbc
   14302:	e8d4 2fef 	ldaex	r2, [r4]
   14306:	e8c4 3fe1 	stlex	r1, r3, [r4]
   1430a:	2900      	cmp	r1, #0
   1430c:	d1f9      	bne.n	14302 <bt_smp_connected+0x1a>
}
   1430e:	bd38      	pop	{r3, r4, r5, pc}
   14310:	00015091 	.word	0x00015091
   14314:	20009708 	.word	0x20009708

00014318 <smp_pairing_confirm>:
{
   14318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1431a:	4604      	mov	r4, r0
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   1431c:	688e      	ldr	r6, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1431e:	1d05      	adds	r5, r0, #4
{
   14320:	af00      	add	r7, sp, #0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   14322:	210b      	movs	r1, #11
   14324:	4628      	mov	r0, r5
   14326:	f009 f807 	bl	1d338 <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   1432a:	4631      	mov	r1, r6
   1432c:	2210      	movs	r2, #16
   1432e:	f104 0017 	add.w	r0, r4, #23
   14332:	f007 face 	bl	1b8d2 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   14336:	2105      	movs	r1, #5
   14338:	4628      	mov	r0, r5
   1433a:	f008 ffd6 	bl	1d2ea <atomic_test_bit>
   1433e:	b920      	cbnz	r0, 1434a <smp_pairing_confirm+0x32>
		return legacy_pairing_confirm(smp);
   14340:	4620      	mov	r0, r4
   14342:	f009 f9e1 	bl	1d708 <legacy_pairing_confirm>
}
   14346:	46bd      	mov	sp, r7
   14348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (smp->method) {
   1434a:	7a23      	ldrb	r3, [r4, #8]
   1434c:	2b01      	cmp	r3, #1
   1434e:	d008      	beq.n	14362 <smp_pairing_confirm+0x4a>
   14350:	2b02      	cmp	r3, #2
   14352:	d112      	bne.n	1437a <smp_pairing_confirm+0x62>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   14354:	2104      	movs	r1, #4
   14356:	4620      	mov	r0, r4
   14358:	f009 f8c3 	bl	1d4e2 <atomic_set_bit>
		return smp_send_pairing_confirm(smp);
   1435c:	f7ff fb66 	bl	13a2c <smp_send_pairing_confirm>
   14360:	e7f1      	b.n	14346 <smp_pairing_confirm+0x2e>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   14362:	210a      	movs	r1, #10
   14364:	4628      	mov	r0, r5
   14366:	f008 ffc0 	bl	1d2ea <atomic_test_bit>
   1436a:	2800      	cmp	r0, #0
   1436c:	d0f2      	beq.n	14354 <smp_pairing_confirm+0x3c>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1436e:	4628      	mov	r0, r5
   14370:	2100      	movs	r1, #0
   14372:	f009 f8b6 	bl	1d4e2 <atomic_set_bit>
			return 0;
   14376:	2000      	movs	r0, #0
   14378:	e7e5      	b.n	14346 <smp_pairing_confirm+0x2e>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1437a:	466c      	mov	r4, sp
   1437c:	b088      	sub	sp, #32
   1437e:	466a      	mov	r2, sp
   14380:	4907      	ldr	r1, [pc, #28]	; (143a0 <smp_pairing_confirm+0x88>)
   14382:	4808      	ldr	r0, [pc, #32]	; (143a4 <smp_pairing_confirm+0x8c>)
   14384:	6151      	str	r1, [r2, #20]
   14386:	4908      	ldr	r1, [pc, #32]	; (143a8 <smp_pairing_confirm+0x90>)
	switch (smp->method) {
   14388:	e9c2 1306 	strd	r1, r3, [r2, #24]
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1438c:	2304      	movs	r3, #4
   1438e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   14392:	f842 3f10 	str.w	r3, [r2, #16]!
   14396:	f009 f817 	bl	1d3c8 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1439a:	2008      	movs	r0, #8
   1439c:	46a5      	mov	sp, r4
   1439e:	e7d2      	b.n	14346 <smp_pairing_confirm+0x2e>
   143a0:	000230c1 	.word	0x000230c1
   143a4:	0001fca4 	.word	0x0001fca4
   143a8:	000234ad 	.word	0x000234ad

000143ac <smp_pairing_random>:
{
   143ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   143b0:	b09f      	sub	sp, #124	; 0x7c
   143b2:	4604      	mov	r4, r0
   143b4:	af04      	add	r7, sp, #16
   143b6:	460d      	mov	r5, r1
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   143b8:	f7ff f9b2 	bl	13720 <latch_auth_cb>
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   143bc:	f104 0837 	add.w	r8, r4, #55	; 0x37
   143c0:	68a9      	ldr	r1, [r5, #8]
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   143c2:	4606      	mov	r6, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   143c4:	2210      	movs	r2, #16
   143c6:	4640      	mov	r0, r8
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   143c8:	1d25      	adds	r5, r4, #4
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   143ca:	f007 fa82 	bl	1b8d2 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   143ce:	2105      	movs	r1, #5
   143d0:	4628      	mov	r0, r5
   143d2:	f008 ff8a 	bl	1d2ea <atomic_test_bit>
   143d6:	2800      	cmp	r0, #0
   143d8:	d14e      	bne.n	14478 <smp_pairing_random+0xcc>
	struct bt_conn *conn = smp->chan.chan.conn;
   143da:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   143de:	f104 0947 	add.w	r9, r4, #71	; 0x47
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   143e2:	f103 0296 	add.w	r2, r3, #150	; 0x96
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   143e6:	f107 0618 	add.w	r6, r7, #24
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   143ea:	338f      	adds	r3, #143	; 0x8f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   143ec:	9201      	str	r2, [sp, #4]
   143ee:	9300      	str	r3, [sp, #0]
   143f0:	4641      	mov	r1, r8
   143f2:	4648      	mov	r0, r9
   143f4:	9602      	str	r6, [sp, #8]
   143f6:	f104 0310 	add.w	r3, r4, #16
   143fa:	f104 0209 	add.w	r2, r4, #9
   143fe:	f009 f929 	bl	1d654 <smp_c1>
	if (err) {
   14402:	2800      	cmp	r0, #0
   14404:	d167      	bne.n	144d6 <smp_pairing_random+0x12a>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   14406:	2210      	movs	r2, #16
   14408:	4631      	mov	r1, r6
   1440a:	f104 0017 	add.w	r0, r4, #23
   1440e:	f007 fa50 	bl	1b8b2 <memcmp>
   14412:	2800      	cmp	r0, #0
   14414:	f040 80a3 	bne.w	1455e <smp_pairing_random+0x1b2>
	memcpy(out, r2, 8);
   14418:	2208      	movs	r2, #8
   1441a:	4641      	mov	r1, r8
   1441c:	4630      	mov	r0, r6
   1441e:	f007 fa58 	bl	1b8d2 <memcpy>
	memcpy(out + 8, r1, 8);
   14422:	2208      	movs	r2, #8
   14424:	f104 0127 	add.w	r1, r4, #39	; 0x27
   14428:	f107 0020 	add.w	r0, r7, #32
   1442c:	f007 fa51 	bl	1b8d2 <memcpy>
	return bt_encrypt_le(k, out, out);
   14430:	4632      	mov	r2, r6
   14432:	4631      	mov	r1, r6
   14434:	4648      	mov	r0, r9
   14436:	f007 fdaf 	bl	1bf98 <bt_encrypt_le>
		if (err) {
   1443a:	b180      	cbz	r0, 1445e <smp_pairing_random+0xb2>
			BT_ERR("Calculate STK failed");
   1443c:	466c      	mov	r4, sp
   1443e:	b088      	sub	sp, #32
   14440:	aa04      	add	r2, sp, #16
   14442:	4b76      	ldr	r3, [pc, #472]	; (1461c <smp_pairing_random+0x270>)
   14444:	6153      	str	r3, [r2, #20]
   14446:	4b76      	ldr	r3, [pc, #472]	; (14620 <smp_pairing_random+0x274>)
		BT_ERR("Calculate confirm failed");
   14448:	6193      	str	r3, [r2, #24]
   1444a:	2303      	movs	r3, #3
   1444c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14450:	f842 3f10 	str.w	r3, [r2, #16]!
		BT_ERR("Unknown pairing method (%u)", smp->method);
   14454:	4873      	ldr	r0, [pc, #460]	; (14624 <smp_pairing_random+0x278>)
   14456:	f008 ffb7 	bl	1d3c8 <z_log_msg_static_create.constprop.0>
   1445a:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   1445c:	e03b      	b.n	144d6 <smp_pairing_random+0x12a>
		memcpy(smp->tk, tmp, sizeof(smp->tk));
   1445e:	4631      	mov	r1, r6
   14460:	2210      	movs	r2, #16
   14462:	4648      	mov	r0, r9
   14464:	f007 fa35 	bl	1b8d2 <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   14468:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1446a:	4628      	mov	r0, r5
   1446c:	f009 f839 	bl	1d4e2 <atomic_set_bit>
	return smp_send_pairing_random(smp);
   14470:	4620      	mov	r0, r4
   14472:	f009 f87e 	bl	1d572 <smp_send_pairing_random>
   14476:	e02f      	b.n	144d8 <smp_pairing_random+0x12c>
	switch (smp->method) {
   14478:	7a23      	ldrb	r3, [r4, #8]
   1447a:	2b05      	cmp	r3, #5
   1447c:	f200 80be 	bhi.w	145fc <smp_pairing_random+0x250>
   14480:	e8df f003 	tbb	[pc, r3]
   14484:	034b4b45 	.word	0x034b4b45
   14488:	93bc      	.short	0x93bc
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
   1448a:	4b67      	ldr	r3, [pc, #412]	; (14628 <smp_pairing_random+0x27c>)
	sys_memcpy_swap(m, u, 32);
   1448c:	2220      	movs	r2, #32
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
   1448e:	f8d3 9000 	ldr.w	r9, [r3]
	sys_memcpy_swap(m, u, 32);
   14492:	f104 0157 	add.w	r1, r4, #87	; 0x57
   14496:	f107 0018 	add.w	r0, r7, #24
   1449a:	f008 ff1a 	bl	1d2d2 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   1449e:	2220      	movs	r2, #32
   144a0:	4649      	mov	r1, r9
   144a2:	f107 0038 	add.w	r0, r7, #56	; 0x38
   144a6:	f008 ff14 	bl	1d2d2 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   144aa:	2210      	movs	r2, #16
   144ac:	f104 0127 	add.w	r1, r4, #39	; 0x27
   144b0:	f107 0058 	add.w	r0, r7, #88	; 0x58
   144b4:	f008 ff0d 	bl	1d2d2 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   144b8:	2210      	movs	r2, #16
   144ba:	4641      	mov	r1, r8
   144bc:	f107 0008 	add.w	r0, r7, #8
   144c0:	f008 ff07 	bl	1d2d2 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
   144c4:	f107 0308 	add.w	r3, r7, #8
   144c8:	2250      	movs	r2, #80	; 0x50
   144ca:	4618      	mov	r0, r3
   144cc:	f107 0118 	add.w	r1, r7, #24
   144d0:	f008 ff3d 	bl	1d34e <bt_smp_aes_cmac>
	if (err) {
   144d4:	b120      	cbz	r0, 144e0 <smp_pairing_random+0x134>
			return BT_SMP_ERR_UNSPECIFIED;
   144d6:	2008      	movs	r0, #8
}
   144d8:	376c      	adds	r7, #108	; 0x6c
   144da:	46bd      	mov	sp, r7
   144dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	memcpy(passkey, xs + 12, 4);
   144e0:	2204      	movs	r2, #4
   144e2:	f107 0114 	add.w	r1, r7, #20
   144e6:	18b8      	adds	r0, r7, r2
   144e8:	f007 f9f3 	bl	1b8d2 <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   144ec:	687b      	ldr	r3, [r7, #4]
   144ee:	4a4f      	ldr	r2, [pc, #316]	; (1462c <smp_pairing_random+0x280>)
   144f0:	ba1b      	rev	r3, r3
   144f2:	fbb3 f1f2 	udiv	r1, r3, r2
   144f6:	fb02 3311 	mls	r3, r2, r1, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   144fa:	4628      	mov	r0, r5
   144fc:	210a      	movs	r1, #10
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   144fe:	607b      	str	r3, [r7, #4]
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   14500:	f008 ffef 	bl	1d4e2 <atomic_set_bit>
		smp_auth_cb->passkey_confirm(smp->chan.chan.conn, passkey);
   14504:	68b3      	ldr	r3, [r6, #8]
   14506:	6879      	ldr	r1, [r7, #4]
   14508:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1450c:	4798      	blx	r3
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   1450e:	210d      	movs	r1, #13
   14510:	4620      	mov	r0, r4
   14512:	f008 ffe6 	bl	1d4e2 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   14516:	2110      	movs	r1, #16
   14518:	e7a7      	b.n	1446a <smp_pairing_random+0xbe>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1451a:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   1451e:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   14522:	4941      	ldr	r1, [pc, #260]	; (14628 <smp_pairing_random+0x27c>)
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   14524:	40d3      	lsrs	r3, r2
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   14526:	f107 0618 	add.w	r6, r7, #24
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1452a:	f003 0301 	and.w	r3, r3, #1
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1452e:	9600      	str	r6, [sp, #0]
   14530:	4642      	mov	r2, r8
   14532:	6809      	ldr	r1, [r1, #0]
   14534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   14538:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1453c:	f008 ffac 	bl	1d498 <smp_f4>
   14540:	b130      	cbz	r0, 14550 <smp_pairing_random+0x1a4>
		BT_ERR("Calculate confirm failed");
   14542:	466c      	mov	r4, sp
   14544:	b088      	sub	sp, #32
   14546:	aa04      	add	r2, sp, #16
   14548:	4b39      	ldr	r3, [pc, #228]	; (14630 <smp_pairing_random+0x284>)
   1454a:	6153      	str	r3, [r2, #20]
   1454c:	4b39      	ldr	r3, [pc, #228]	; (14634 <smp_pairing_random+0x288>)
   1454e:	e77b      	b.n	14448 <smp_pairing_random+0x9c>
	if (memcmp(smp->pcnf, cfm, 16)) {
   14550:	2210      	movs	r2, #16
   14552:	4631      	mov	r1, r6
   14554:	f104 0017 	add.w	r0, r4, #23
   14558:	f007 f9ab 	bl	1b8b2 <memcmp>
   1455c:	b108      	cbz	r0, 14562 <smp_pairing_random+0x1b6>
		return BT_SMP_ERR_CONFIRM_FAILED;
   1455e:	2004      	movs	r0, #4
   14560:	e7ba      	b.n	144d8 <smp_pairing_random+0x12c>
		atomic_set_bit(smp->allowed_cmds,
   14562:	2103      	movs	r1, #3
   14564:	4620      	mov	r0, r4
   14566:	f008 ffbc 	bl	1d4e2 <atomic_set_bit>
		err = smp_send_pairing_random(smp);
   1456a:	f009 f802 	bl	1d572 <smp_send_pairing_random>
		if (err) {
   1456e:	2800      	cmp	r0, #0
   14570:	d1b2      	bne.n	144d8 <smp_pairing_random+0x12c>
		smp->passkey_round++;
   14572:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   14576:	3301      	adds	r3, #1
   14578:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
   1457a:	2b14      	cmp	r3, #20
		smp->passkey_round++;
   1457c:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
		if (smp->passkey_round == 20U) {
   14580:	d109      	bne.n	14596 <smp_pairing_random+0x1ea>
			atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   14582:	210d      	movs	r1, #13
   14584:	4620      	mov	r0, r4
   14586:	f008 ffac 	bl	1d4e2 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1458a:	2110      	movs	r1, #16
   1458c:	4628      	mov	r0, r5
   1458e:	f008 ffa8 	bl	1d4e2 <atomic_set_bit>
			return 0;
   14592:	2000      	movs	r0, #0
   14594:	e7a0      	b.n	144d8 <smp_pairing_random+0x12c>
		if (bt_rand(smp->prnd, 16)) {
   14596:	2110      	movs	r1, #16
   14598:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1459c:	f7fb fede 	bl	1035c <bt_rand>
   145a0:	3800      	subs	r0, #0
   145a2:	bf18      	it	ne
   145a4:	2001      	movne	r0, #1
   145a6:	00c0      	lsls	r0, r0, #3
   145a8:	e796      	b.n	144d8 <smp_pairing_random+0x12c>
		if (bt_rand(smp->prnd, 16)) {
   145aa:	2110      	movs	r1, #16
   145ac:	f104 0027 	add.w	r0, r4, #39	; 0x27
   145b0:	f7fb fed4 	bl	1035c <bt_rand>
   145b4:	2800      	cmp	r0, #0
   145b6:	d18e      	bne.n	144d6 <smp_pairing_random+0x12a>
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   145b8:	b376      	cbz	r6, 14618 <smp_pairing_random+0x26c>
   145ba:	68f3      	ldr	r3, [r6, #12]
   145bc:	b363      	cbz	r3, 14618 <smp_pairing_random+0x26c>
			struct bt_conn_oob_info info = {
   145be:	4b1e      	ldr	r3, [pc, #120]	; (14638 <smp_pairing_random+0x28c>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   145c0:	7ae2      	ldrb	r2, [r4, #11]
			struct bt_conn_oob_info info = {
   145c2:	f8b3 3035 	ldrh.w	r3, [r3, #53]	; 0x35
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   145c6:	07d2      	lsls	r2, r2, #31
			struct bt_conn_oob_info info = {
   145c8:	833b      	strh	r3, [r7, #24]
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   145ca:	7ca3      	ldrb	r3, [r4, #18]
   145cc:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   145d0:	d412      	bmi.n	145f8 <smp_pairing_random+0x24c>
   145d2:	2b00      	cmp	r3, #0
   145d4:	bf14      	ite	ne
   145d6:	2301      	movne	r3, #1
   145d8:	2303      	moveq	r3, #3
	info->lesc.oob_config = oob_config;
   145da:	767b      	strb	r3, [r7, #25]
			smp->oobd_local = NULL;
   145dc:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   145de:	4628      	mov	r0, r5
			smp->oobd_remote = NULL;
   145e0:	e9c4 3338 	strd	r3, r3, [r4, #224]	; 0xe0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   145e4:	210c      	movs	r1, #12
   145e6:	f008 ff7c 	bl	1d4e2 <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   145ea:	68f3      	ldr	r3, [r6, #12]
   145ec:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   145f0:	f107 0118 	add.w	r1, r7, #24
   145f4:	4798      	blx	r3
			return 0;
   145f6:	e7cc      	b.n	14592 <smp_pairing_random+0x1e6>
		if (rsp_oob_present) {
   145f8:	005b      	lsls	r3, r3, #1
   145fa:	e7ee      	b.n	145da <smp_pairing_random+0x22e>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   145fc:	466c      	mov	r4, sp
   145fe:	b088      	sub	sp, #32
   14600:	aa04      	add	r2, sp, #16
   14602:	490e      	ldr	r1, [pc, #56]	; (1463c <smp_pairing_random+0x290>)
   14604:	6151      	str	r1, [r2, #20]
   14606:	490e      	ldr	r1, [pc, #56]	; (14640 <smp_pairing_random+0x294>)
	switch (smp->method) {
   14608:	e9c2 1306 	strd	r1, r3, [r2, #24]
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1460c:	2304      	movs	r3, #4
   1460e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   14612:	f842 3f10 	str.w	r3, [r2, #16]!
   14616:	e71d      	b.n	14454 <smp_pairing_random+0xa8>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   14618:	2002      	movs	r0, #2
   1461a:	e75d      	b.n	144d8 <smp_pairing_random+0x12c>
   1461c:	000231be 	.word	0x000231be
   14620:	000234d6 	.word	0x000234d6
   14624:	0001fca4 	.word	0x0001fca4
   14628:	20009d28 	.word	0x20009d28
   1462c:	000f4240 	.word	0x000f4240
   14630:	000231d7 	.word	0x000231d7
   14634:	000234c1 	.word	0x000234c1
   14638:	0001fddc 	.word	0x0001fddc
   1463c:	000230c1 	.word	0x000230c1
   14640:	000234ec 	.word	0x000234ec

00014644 <bt_smp_start_security>:
{
   14644:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
   14648:	78c6      	ldrb	r6, [r0, #3]
{
   1464a:	4604      	mov	r4, r0
	switch (conn->role) {
   1464c:	2e01      	cmp	r6, #1
   1464e:	d005      	beq.n	1465c <bt_smp_start_security+0x18>
		return -EINVAL;
   14650:	f06f 0415 	mvn.w	r4, #21
}
   14654:	4620      	mov	r0, r4
   14656:	b003      	add	sp, #12
   14658:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
   1465c:	f008 feb7 	bl	1d3ce <smp_chan_get>
	if (!smp) {
   14660:	4605      	mov	r5, r0
   14662:	2800      	cmp	r0, #0
   14664:	f000 80ac 	beq.w	147c0 <bt_smp_start_security+0x17c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   14668:	1d07      	adds	r7, r0, #4
   1466a:	2104      	movs	r1, #4
   1466c:	4638      	mov	r0, r7
   1466e:	f008 fe3c 	bl	1d2ea <atomic_test_bit>
   14672:	2800      	cmp	r0, #0
   14674:	f040 80a7 	bne.w	147c6 <bt_smp_start_security+0x182>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   14678:	2103      	movs	r1, #3
   1467a:	4638      	mov	r0, r7
   1467c:	f008 fe35 	bl	1d2ea <atomic_test_bit>
   14680:	b110      	cbz	r0, 14688 <bt_smp_start_security+0x44>
		return -EBUSY;
   14682:	f06f 040f 	mvn.w	r4, #15
   14686:	e7e5      	b.n	14654 <bt_smp_start_security+0x10>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   14688:	4631      	mov	r1, r6
   1468a:	4638      	mov	r0, r7
   1468c:	f008 fe2d 	bl	1d2ea <atomic_test_bit>
   14690:	2800      	cmp	r0, #0
   14692:	d1f6      	bne.n	14682 <bt_smp_start_security+0x3e>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   14694:	4628      	mov	r0, r5
   14696:	f7ff f843 	bl	13720 <latch_auth_cb>
	switch (smp->chan.chan.conn->required_sec_level) {
   1469a:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1469e:	4606      	mov	r6, r0
	switch (smp->chan.chan.conn->required_sec_level) {
   146a0:	7a9b      	ldrb	r3, [r3, #10]
   146a2:	2b03      	cmp	r3, #3
   146a4:	d042      	beq.n	1472c <bt_smp_start_security+0xe8>
   146a6:	d832      	bhi.n	1470e <bt_smp_start_security+0xca>
   146a8:	3b01      	subs	r3, #1
   146aa:	2b01      	cmp	r3, #1
   146ac:	d948      	bls.n	14740 <bt_smp_start_security+0xfc>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   146ae:	210a      	movs	r1, #10
   146b0:	1d20      	adds	r0, r4, #4
   146b2:	f008 fe1a 	bl	1d2ea <atomic_test_bit>
   146b6:	2800      	cmp	r0, #0
   146b8:	d1ca      	bne.n	14650 <bt_smp_start_security+0xc>
	if (!conn->le.keys) {
   146ba:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   146be:	b983      	cbnz	r3, 146e2 <bt_smp_start_security+0x9e>
						     conn->id, &conn->le.dst);
   146c0:	f104 0688 	add.w	r6, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   146c4:	4632      	mov	r2, r6
   146c6:	2020      	movs	r0, #32
   146c8:	7a21      	ldrb	r1, [r4, #8]
   146ca:	f000 fdf5 	bl	152b8 <bt_keys_find>
   146ce:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   146d2:	b930      	cbnz	r0, 146e2 <bt_smp_start_security+0x9e>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   146d4:	4632      	mov	r2, r6
   146d6:	2004      	movs	r0, #4
   146d8:	7a21      	ldrb	r1, [r4, #8]
   146da:	f000 fded 	bl	152b8 <bt_keys_find>
   146de:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys ||
   146e2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   146e6:	2b00      	cmp	r3, #0
   146e8:	d0b2      	beq.n	14650 <bt_smp_start_security+0xc>
	    !(conn->le.keys->keys & (BT_KEYS_LTK | BT_KEYS_LTK_P256))) {
   146ea:	89da      	ldrh	r2, [r3, #14]
	if (!conn->le.keys ||
   146ec:	f012 0f24 	tst.w	r2, #36	; 0x24
   146f0:	d0ae      	beq.n	14650 <bt_smp_start_security+0xc>
	if (conn->required_sec_level >= BT_SECURITY_L3 &&
   146f2:	7aa1      	ldrb	r1, [r4, #10]
   146f4:	2902      	cmp	r1, #2
   146f6:	d923      	bls.n	14740 <bt_smp_start_security+0xfc>
   146f8:	7b58      	ldrb	r0, [r3, #13]
   146fa:	07c0      	lsls	r0, r0, #31
   146fc:	d5a8      	bpl.n	14650 <bt_smp_start_security+0xc>
	if (conn->required_sec_level >= BT_SECURITY_L4 &&
   146fe:	2903      	cmp	r1, #3
   14700:	d01e      	beq.n	14740 <bt_smp_start_security+0xfc>
	    !((conn->le.keys->flags & BT_KEYS_AUTHENTICATED) &&
   14702:	0692      	lsls	r2, r2, #26
   14704:	d5a4      	bpl.n	14650 <bt_smp_start_security+0xc>
   14706:	7b1b      	ldrb	r3, [r3, #12]
   14708:	2b10      	cmp	r3, #16
   1470a:	d1a1      	bne.n	14650 <bt_smp_start_security+0xc>
   1470c:	e018      	b.n	14740 <bt_smp_start_security+0xfc>
	switch (smp->chan.chan.conn->required_sec_level) {
   1470e:	2b04      	cmp	r3, #4
   14710:	d1cd      	bne.n	146ae <bt_smp_start_security+0x6a>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   14712:	4628      	mov	r0, r5
   14714:	f7ff f81a 	bl	1374c <get_io_capa>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   14718:	2803      	cmp	r0, #3
   1471a:	d104      	bne.n	14726 <bt_smp_start_security+0xe2>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1471c:	2e00      	cmp	r6, #0
   1471e:	d0c6      	beq.n	146ae <bt_smp_start_security+0x6a>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   14720:	68f3      	ldr	r3, [r6, #12]
   14722:	2b00      	cmp	r3, #0
   14724:	d0c3      	beq.n	146ae <bt_smp_start_security+0x6a>
   14726:	4b29      	ldr	r3, [pc, #164]	; (147cc <bt_smp_start_security+0x188>)
   14728:	781b      	ldrb	r3, [r3, #0]
   1472a:	e007      	b.n	1473c <bt_smp_start_security+0xf8>
		return get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1472c:	4628      	mov	r0, r5
   1472e:	f7ff f80d 	bl	1374c <get_io_capa>
   14732:	2803      	cmp	r0, #3
   14734:	d104      	bne.n	14740 <bt_smp_start_security+0xfc>
   14736:	2e00      	cmp	r6, #0
   14738:	d0b9      	beq.n	146ae <bt_smp_start_security+0x6a>
		       (smp_auth_cb && smp_auth_cb->oob_data_request);
   1473a:	68f3      	ldr	r3, [r6, #12]
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1473c:	2b00      	cmp	r3, #0
   1473e:	d0b6      	beq.n	146ae <bt_smp_start_security+0x6a>
	if (!conn->le.keys) {
   14740:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   14744:	b13b      	cbz	r3, 14756 <bt_smp_start_security+0x112>
	if (smp_init(smp) != 0) {
   14746:	4628      	mov	r0, r5
   14748:	f7ff f8a2 	bl	13890 <smp_init>
   1474c:	4680      	mov	r8, r0
   1474e:	b170      	cbz	r0, 1476e <bt_smp_start_security+0x12a>
		return -ENOBUFS;
   14750:	f06f 0468 	mvn.w	r4, #104	; 0x68
   14754:	e77e      	b.n	14654 <bt_smp_start_security+0x10>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   14756:	7a20      	ldrb	r0, [r4, #8]
   14758:	f104 0188 	add.w	r1, r4, #136	; 0x88
   1475c:	f000 fd78 	bl	15250 <bt_keys_get_addr>
   14760:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   14764:	2800      	cmp	r0, #0
   14766:	d1ee      	bne.n	14746 <bt_smp_start_security+0x102>
			return -ENOMEM;
   14768:	f06f 040b 	mvn.w	r4, #11
   1476c:	e772      	b.n	14654 <bt_smp_start_security+0x10>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   1476e:	210b      	movs	r1, #11
   14770:	4628      	mov	r0, r5
   14772:	f008 fec6 	bl	1d502 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   14776:	4606      	mov	r6, r0
   14778:	2800      	cmp	r0, #0
   1477a:	d0e9      	beq.n	14750 <bt_smp_start_security+0x10c>
   1477c:	2101      	movs	r1, #1
   1477e:	3008      	adds	r0, #8
   14780:	f009 f9dc 	bl	1db3c <net_buf_simple_add>
	req->auth_req = get_auth(smp, BT_SMP_AUTH_DEFAULT);
   14784:	2109      	movs	r1, #9
   14786:	4681      	mov	r9, r0
   14788:	4628      	mov	r0, r5
   1478a:	f7ff f805 	bl	13798 <get_auth>
   1478e:	4643      	mov	r3, r8
   14790:	f889 0000 	strb.w	r0, [r9]
   14794:	4632      	mov	r2, r6
   14796:	4620      	mov	r0, r4
   14798:	2106      	movs	r1, #6
   1479a:	f8cd 8000 	str.w	r8, [sp]
   1479e:	f007 fde2 	bl	1c366 <bt_l2cap_send_cb>
	if (err) {
   147a2:	4604      	mov	r4, r0
   147a4:	b118      	cbz	r0, 147ae <bt_smp_start_security+0x16a>
		net_buf_unref(req_buf);
   147a6:	4630      	mov	r0, r6
   147a8:	f000 fec0 	bl	1552c <net_buf_unref>
		return err;
   147ac:	e752      	b.n	14654 <bt_smp_start_security+0x10>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   147ae:	4638      	mov	r0, r7
   147b0:	210f      	movs	r1, #15
   147b2:	f008 fe96 	bl	1d4e2 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   147b6:	2101      	movs	r1, #1
   147b8:	4628      	mov	r0, r5
   147ba:	f008 fe92 	bl	1d4e2 <atomic_set_bit>
	return 0;
   147be:	e749      	b.n	14654 <bt_smp_start_security+0x10>
		return -ENOTCONN;
   147c0:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   147c4:	e746      	b.n	14654 <bt_smp_start_security+0x10>
		return -EIO;
   147c6:	f06f 0404 	mvn.w	r4, #4
   147ca:	e743      	b.n	14654 <bt_smp_start_security+0x10>
   147cc:	2000a072 	.word	0x2000a072

000147d0 <smp_pairing_complete>:
{
   147d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   147d2:	4606      	mov	r6, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   147d4:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   147d8:	1d04      	adds	r4, r0, #4
	if (!status) {
   147da:	bb39      	cbnz	r1, 1482c <smp_pairing_complete+0x5c>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   147dc:	210d      	movs	r1, #13
   147de:	4620      	mov	r0, r4
   147e0:	f008 fd83 	bl	1d2ea <atomic_test_bit>
	return list->head;
   147e4:	4b36      	ldr	r3, [pc, #216]	; (148c0 <smp_pairing_complete+0xf0>)
   147e6:	4607      	mov	r7, r0
   147e8:	681b      	ldr	r3, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   147ea:	b19b      	cbz	r3, 14814 <smp_pairing_complete+0x44>
	return node->next;
   147ec:	681c      	ldr	r4, [r3, #0]
   147ee:	b104      	cbz	r4, 147f2 <smp_pairing_complete+0x22>
   147f0:	3c0c      	subs	r4, #12
			if (listener->pairing_complete) {
   147f2:	f853 3c0c 	ldr.w	r3, [r3, #-12]
   147f6:	b113      	cbz	r3, 147fe <smp_pairing_complete+0x2e>
				listener->pairing_complete(conn, bond_flag);
   147f8:	4639      	mov	r1, r7
   147fa:	4628      	mov	r0, r5
   147fc:	4798      	blx	r3
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   147fe:	b14c      	cbz	r4, 14814 <smp_pairing_complete+0x44>
   14800:	4623      	mov	r3, r4
   14802:	68e4      	ldr	r4, [r4, #12]
   14804:	681b      	ldr	r3, [r3, #0]
   14806:	b11c      	cbz	r4, 14810 <smp_pairing_complete+0x40>
   14808:	3c0c      	subs	r4, #12
			if (listener->pairing_complete) {
   1480a:	2b00      	cmp	r3, #0
   1480c:	d1f4      	bne.n	147f8 <smp_pairing_complete+0x28>
   1480e:	e7f7      	b.n	14800 <smp_pairing_complete+0x30>
   14810:	2b00      	cmp	r3, #0
   14812:	d1f1      	bne.n	147f8 <smp_pairing_complete+0x28>
	smp_reset(smp);
   14814:	4630      	mov	r0, r6
   14816:	f008 ff02 	bl	1d61e <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   1481a:	7a6a      	ldrb	r2, [r5, #9]
   1481c:	7aab      	ldrb	r3, [r5, #10]
   1481e:	429a      	cmp	r2, r3
   14820:	d04d      	beq.n	148be <smp_pairing_complete+0xee>
		bt_smp_start_security(conn);
   14822:	4628      	mov	r0, r5
}
   14824:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_smp_start_security(conn);
   14828:	f7ff bf0c 	b.w	14644 <bt_smp_start_security>
	switch (smp_err) {
   1482c:	3901      	subs	r1, #1
   1482e:	b2c9      	uxtb	r1, r1
   14830:	290e      	cmp	r1, #14
   14832:	bf96      	itet	ls
   14834:	4b23      	ldrls	r3, [pc, #140]	; (148c4 <smp_pairing_complete+0xf4>)
	if (!status) {
   14836:	2709      	movhi	r7, #9
   14838:	5c5f      	ldrbls	r7, [r3, r1]
		if (conn->le.keys &&
   1483a:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   1483e:	b143      	cbz	r3, 14852 <smp_pairing_complete+0x82>
   14840:	7b1b      	ldrb	r3, [r3, #12]
   14842:	bb33      	cbnz	r3, 14892 <smp_pairing_complete+0xc2>
			bt_keys_clear(conn->le.keys);
   14844:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
   14848:	f009 f8c9 	bl	1d9de <bt_keys_clear>
			conn->le.keys = NULL;
   1484c:	2300      	movs	r3, #0
   1484e:	f8c5 30b4 	str.w	r3, [r5, #180]	; 0xb4
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   14852:	2102      	movs	r1, #2
   14854:	4620      	mov	r0, r4
   14856:	f008 fd48 	bl	1d2ea <atomic_test_bit>
   1485a:	b948      	cbnz	r0, 14870 <smp_pairing_complete+0xa0>
	switch (err) {
   1485c:	2f07      	cmp	r7, #7
   1485e:	bf94      	ite	ls
   14860:	4b19      	ldrls	r3, [pc, #100]	; (148c8 <smp_pairing_complete+0xf8>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   14862:	211f      	movhi	r1, #31
			bt_conn_security_changed(conn,
   14864:	463a      	mov	r2, r7
   14866:	4628      	mov	r0, r5
   14868:	bf98      	it	ls
   1486a:	5dd9      	ldrbls	r1, [r3, r7]
   1486c:	f7fc fb6c 	bl	10f48 <bt_conn_security_changed>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   14870:	2103      	movs	r1, #3
   14872:	4620      	mov	r0, r4
   14874:	f008 fd39 	bl	1d2ea <atomic_test_bit>
   14878:	2800      	cmp	r0, #0
   1487a:	d0cb      	beq.n	14814 <smp_pairing_complete+0x44>
	return list->head;
   1487c:	4b10      	ldr	r3, [pc, #64]	; (148c0 <smp_pairing_complete+0xf0>)
   1487e:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   14880:	2b00      	cmp	r3, #0
   14882:	d0c7      	beq.n	14814 <smp_pairing_complete+0x44>
	return node->next;
   14884:	681c      	ldr	r4, [r3, #0]
   14886:	b104      	cbz	r4, 1488a <smp_pairing_complete+0xba>
   14888:	3c0c      	subs	r4, #12
				if (listener->pairing_failed) {
   1488a:	f853 3c08 	ldr.w	r3, [r3, #-8]
   1488e:	b94b      	cbnz	r3, 148a4 <smp_pairing_complete+0xd4>
   14890:	e00b      	b.n	148aa <smp_pairing_complete+0xda>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   14892:	2102      	movs	r1, #2
   14894:	4620      	mov	r0, r4
   14896:	f008 fd28 	bl	1d2ea <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   1489a:	2800      	cmp	r0, #0
   1489c:	d1d2      	bne.n	14844 <smp_pairing_complete+0x74>
   1489e:	e7d8      	b.n	14852 <smp_pairing_complete+0x82>
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   148a0:	3c0c      	subs	r4, #12
				if (listener->pairing_failed) {
   148a2:	b123      	cbz	r3, 148ae <smp_pairing_complete+0xde>
					listener->pairing_failed(conn, security_err);
   148a4:	4639      	mov	r1, r7
   148a6:	4628      	mov	r0, r5
   148a8:	4798      	blx	r3
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   148aa:	2c00      	cmp	r4, #0
   148ac:	d0b2      	beq.n	14814 <smp_pairing_complete+0x44>
   148ae:	4623      	mov	r3, r4
   148b0:	68e4      	ldr	r4, [r4, #12]
   148b2:	685b      	ldr	r3, [r3, #4]
   148b4:	2c00      	cmp	r4, #0
   148b6:	d1f3      	bne.n	148a0 <smp_pairing_complete+0xd0>
				if (listener->pairing_failed) {
   148b8:	2b00      	cmp	r3, #0
   148ba:	d1f3      	bne.n	148a4 <smp_pairing_complete+0xd4>
   148bc:	e7aa      	b.n	14814 <smp_pairing_complete+0x44>
}
   148be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   148c0:	20009bec 	.word	0x20009bec
   148c4:	00023440 	.word	0x00023440
   148c8:	0002342f 	.word	0x0002342f

000148cc <smp_error>:
{
   148cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   148d0:	1d03      	adds	r3, r0, #4
{
   148d2:	b082      	sub	sp, #8
   148d4:	4605      	mov	r5, r0
   148d6:	4688      	mov	r8, r1
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   148d8:	4618      	mov	r0, r3
   148da:	2102      	movs	r1, #2
{
   148dc:	af02      	add	r7, sp, #8
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   148de:	f008 fd04 	bl	1d2ea <atomic_test_bit>
				    !smp->local_dist && !smp->remote_dist);
   148e2:	4604      	mov	r4, r0
   148e4:	b120      	cbz	r0, 148f0 <smp_error+0x24>
   148e6:	f8b5 40e8 	ldrh.w	r4, [r5, #232]	; 0xe8
   148ea:	fab4 f484 	clz	r4, r4
   148ee:	0964      	lsrs	r4, r4, #5
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   148f0:	2103      	movs	r1, #3
   148f2:	4618      	mov	r0, r3
   148f4:	f008 fcf9 	bl	1d2ea <atomic_test_bit>
   148f8:	b1e8      	cbz	r0, 14936 <smp_error+0x6a>
		smp_pairing_complete(smp, reason);
   148fa:	4641      	mov	r1, r8
   148fc:	4628      	mov	r0, r5
   148fe:	f7ff ff67 	bl	147d0 <smp_pairing_complete>
	if (remote_already_completed) {
   14902:	b32c      	cbz	r4, 14950 <smp_error+0x84>
		BT_WARN("SMP does not allow a pairing failure at this point. Known issue. "
   14904:	466c      	mov	r4, sp
   14906:	b088      	sub	sp, #32
   14908:	aa02      	add	r2, sp, #8
   1490a:	4b20      	ldr	r3, [pc, #128]	; (1498c <smp_error+0xc0>)
   1490c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   14910:	6153      	str	r3, [r2, #20]
   14912:	4b1f      	ldr	r3, [pc, #124]	; (14990 <smp_error+0xc4>)
   14914:	481f      	ldr	r0, [pc, #124]	; (14994 <smp_error+0xc8>)
   14916:	6193      	str	r3, [r2, #24]
   14918:	2303      	movs	r3, #3
   1491a:	f842 3f10 	str.w	r3, [r2, #16]!
   1491e:	f008 fd53 	bl	1d3c8 <z_log_msg_static_create.constprop.0>
		bt_conn_disconnect(smp->chan.chan.conn, BT_HCI_ERR_AUTH_FAIL);
   14922:	2105      	movs	r1, #5
   14924:	46a5      	mov	sp, r4
   14926:	f8d5 00ec 	ldr.w	r0, [r5, #236]	; 0xec
   1492a:	f007 fc17 	bl	1c15c <bt_conn_disconnect>
		return 0;
   1492e:	2000      	movs	r0, #0
}
   14930:	46bd      	mov	sp, r7
   14932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   14936:	2101      	movs	r1, #1
   14938:	4618      	mov	r0, r3
   1493a:	f008 fcd6 	bl	1d2ea <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1493e:	2800      	cmp	r0, #0
   14940:	d1db      	bne.n	148fa <smp_error+0x2e>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   14942:	210f      	movs	r1, #15
   14944:	4618      	mov	r0, r3
   14946:	f008 fcd0 	bl	1d2ea <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   1494a:	2800      	cmp	r0, #0
   1494c:	d1d5      	bne.n	148fa <smp_error+0x2e>
   1494e:	e7d8      	b.n	14902 <smp_error+0x36>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   14950:	2105      	movs	r1, #5
   14952:	4628      	mov	r0, r5
   14954:	f008 fdd5 	bl	1d502 <smp_create_pdu.constprop.0>
	if (!buf) {
   14958:	4606      	mov	r6, r0
   1495a:	b198      	cbz	r0, 14984 <smp_error+0xb8>
   1495c:	2101      	movs	r1, #1
   1495e:	3008      	adds	r0, #8
   14960:	f009 f8ec 	bl	1db3c <net_buf_simple_add>
	rsp->reason = reason;
   14964:	f880 8000 	strb.w	r8, [r0]
   14968:	9400      	str	r4, [sp, #0]
   1496a:	4623      	mov	r3, r4
   1496c:	4632      	mov	r2, r6
   1496e:	2106      	movs	r1, #6
   14970:	f8d5 00ec 	ldr.w	r0, [r5, #236]	; 0xec
   14974:	f007 fcf7 	bl	1c366 <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   14978:	2800      	cmp	r0, #0
   1497a:	d0d8      	beq.n	1492e <smp_error+0x62>
		net_buf_unref(buf);
   1497c:	4630      	mov	r0, r6
   1497e:	f000 fdd5 	bl	1552c <net_buf_unref>
   14982:	e7d4      	b.n	1492e <smp_error+0x62>
		return -ENOBUFS;
   14984:	f06f 0068 	mvn.w	r0, #104	; 0x68
   14988:	e7d2      	b.n	14930 <smp_error+0x64>
   1498a:	bf00      	nop
   1498c:	000231f4 	.word	0x000231f4
   14990:	0002360a 	.word	0x0002360a
   14994:	0001fca4 	.word	0x0001fca4

00014998 <bt_smp_recv>:
{
   14998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buf->len < sizeof(*hdr)) {
   1499c:	898b      	ldrh	r3, [r1, #12]
{
   1499e:	4680      	mov	r8, r0
   149a0:	460d      	mov	r5, r1
   149a2:	af00      	add	r7, sp, #0
	if (buf->len < sizeof(*hdr)) {
   149a4:	b99b      	cbnz	r3, 149ce <bt_smp_recv+0x36>
		BT_ERR("Too small SMP PDU received");
   149a6:	466c      	mov	r4, sp
   149a8:	b088      	sub	sp, #32
   149aa:	466a      	mov	r2, sp
   149ac:	4b46      	ldr	r3, [pc, #280]	; (14ac8 <bt_smp_recv+0x130>)
   149ae:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   149b2:	6153      	str	r3, [r2, #20]
   149b4:	4b45      	ldr	r3, [pc, #276]	; (14acc <bt_smp_recv+0x134>)
   149b6:	6193      	str	r3, [r2, #24]
   149b8:	2303      	movs	r3, #3
   149ba:	f842 3f10 	str.w	r3, [r2, #16]!
		BT_WARN("SMP command (code 0x%02x) received after timeout",
   149be:	4844      	ldr	r0, [pc, #272]	; (14ad0 <bt_smp_recv+0x138>)
   149c0:	f008 fd02 	bl	1d3c8 <z_log_msg_static_create.constprop.0>
   149c4:	46a5      	mov	sp, r4
}
   149c6:	2000      	movs	r0, #0
   149c8:	46bd      	mov	sp, r7
   149ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   149ce:	2101      	movs	r1, #1
   149d0:	f105 0008 	add.w	r0, r5, #8
   149d4:	f009 f8e2 	bl	1db9c <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   149d8:	2104      	movs	r1, #4
   149da:	4606      	mov	r6, r0
   149dc:	f1a8 00e8 	sub.w	r0, r8, #232	; 0xe8
   149e0:	f008 fc83 	bl	1d2ea <atomic_test_bit>
   149e4:	f1a8 04ec 	sub.w	r4, r8, #236	; 0xec
   149e8:	7833      	ldrb	r3, [r6, #0]
   149ea:	b160      	cbz	r0, 14a06 <bt_smp_recv+0x6e>
		BT_WARN("SMP command (code 0x%02x) received after timeout",
   149ec:	466c      	mov	r4, sp
   149ee:	b088      	sub	sp, #32
   149f0:	466a      	mov	r2, sp
   149f2:	4838      	ldr	r0, [pc, #224]	; (14ad4 <bt_smp_recv+0x13c>)
   149f4:	6150      	str	r0, [r2, #20]
   149f6:	4835      	ldr	r0, [pc, #212]	; (14acc <bt_smp_recv+0x134>)
   149f8:	e9c2 0306 	strd	r0, r3, [r2, #24]
   149fc:	f842 1f10 	str.w	r1, [r2, #16]!
   14a00:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   14a04:	e7db      	b.n	149be <bt_smp_recv+0x26>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   14a06:	2b0e      	cmp	r3, #14
   14a08:	d904      	bls.n	14a14 <bt_smp_recv+0x7c>
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
   14a0a:	466c      	mov	r4, sp
   14a0c:	b088      	sub	sp, #32
   14a0e:	466a      	mov	r2, sp
   14a10:	4831      	ldr	r0, [pc, #196]	; (14ad8 <bt_smp_recv+0x140>)
   14a12:	e7ef      	b.n	149f4 <bt_smp_recv+0x5c>
	if (!handlers[hdr->code].func) {
   14a14:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 14adc <bt_smp_recv+0x144>
   14a18:	f858 2033 	ldr.w	r2, [r8, r3, lsl #3]
   14a1c:	b9a2      	cbnz	r2, 14a48 <bt_smp_recv+0xb0>
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
   14a1e:	466d      	mov	r5, sp
   14a20:	b088      	sub	sp, #32
   14a22:	466a      	mov	r2, sp
   14a24:	482e      	ldr	r0, [pc, #184]	; (14ae0 <bt_smp_recv+0x148>)
   14a26:	6150      	str	r0, [r2, #20]
   14a28:	4828      	ldr	r0, [pc, #160]	; (14acc <bt_smp_recv+0x134>)
   14a2a:	e9c2 0306 	strd	r0, r3, [r2, #24]
   14a2e:	f842 1f10 	str.w	r1, [r2, #16]!
   14a32:	4827      	ldr	r0, [pc, #156]	; (14ad0 <bt_smp_recv+0x138>)
   14a34:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   14a38:	f008 fcc6 	bl	1d3c8 <z_log_msg_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   14a3c:	2107      	movs	r1, #7
   14a3e:	46ad      	mov	sp, r5
		smp_error(smp, err);
   14a40:	4620      	mov	r0, r4
   14a42:	f7ff ff43 	bl	148cc <smp_error>
   14a46:	e7be      	b.n	149c6 <bt_smp_recv+0x2e>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   14a48:	4619      	mov	r1, r3
   14a4a:	4620      	mov	r0, r4
   14a4c:	f008 fdd5 	bl	1d5fa <atomic_test_and_clear_bit>
   14a50:	7833      	ldrb	r3, [r6, #0]
   14a52:	b9a8      	cbnz	r0, 14a80 <bt_smp_recv+0xe8>
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
   14a54:	466d      	mov	r5, sp
   14a56:	b088      	sub	sp, #32
   14a58:	466a      	mov	r2, sp
   14a5a:	4922      	ldr	r1, [pc, #136]	; (14ae4 <bt_smp_recv+0x14c>)
   14a5c:	481c      	ldr	r0, [pc, #112]	; (14ad0 <bt_smp_recv+0x138>)
   14a5e:	6151      	str	r1, [r2, #20]
   14a60:	491a      	ldr	r1, [pc, #104]	; (14acc <bt_smp_recv+0x134>)
   14a62:	e9c2 1306 	strd	r1, r3, [r2, #24]
   14a66:	2304      	movs	r3, #4
   14a68:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   14a6c:	f842 3f10 	str.w	r3, [r2, #16]!
   14a70:	f008 fcaa 	bl	1d3c8 <z_log_msg_static_create.constprop.0>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   14a74:	7833      	ldrb	r3, [r6, #0]
   14a76:	46ad      	mov	sp, r5
   14a78:	2b05      	cmp	r3, #5
   14a7a:	d0a4      	beq.n	149c6 <bt_smp_recv+0x2e>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   14a7c:	2108      	movs	r1, #8
   14a7e:	e7df      	b.n	14a40 <bt_smp_recv+0xa8>
	if (buf->len != handlers[hdr->code].expect_len) {
   14a80:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   14a84:	89a9      	ldrh	r1, [r5, #12]
   14a86:	7912      	ldrb	r2, [r2, #4]
   14a88:	428a      	cmp	r2, r1
   14a8a:	d013      	beq.n	14ab4 <bt_smp_recv+0x11c>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   14a8c:	466d      	mov	r5, sp
   14a8e:	b08a      	sub	sp, #40	; 0x28
   14a90:	466a      	mov	r2, sp
   14a92:	6213      	str	r3, [r2, #32]
   14a94:	2305      	movs	r3, #5
   14a96:	4814      	ldr	r0, [pc, #80]	; (14ae8 <bt_smp_recv+0x150>)
   14a98:	6150      	str	r0, [r2, #20]
   14a9a:	480c      	ldr	r0, [pc, #48]	; (14acc <bt_smp_recv+0x134>)
   14a9c:	e9c2 0106 	strd	r0, r1, [r2, #24]
   14aa0:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   14aa4:	480a      	ldr	r0, [pc, #40]	; (14ad0 <bt_smp_recv+0x138>)
   14aa6:	f842 3f10 	str.w	r3, [r2, #16]!
   14aaa:	f008 fc8d 	bl	1d3c8 <z_log_msg_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   14aae:	210a      	movs	r1, #10
   14ab0:	46ad      	mov	sp, r5
   14ab2:	e7c5      	b.n	14a40 <bt_smp_recv+0xa8>
	err = handlers[hdr->code].func(smp, buf);
   14ab4:	4629      	mov	r1, r5
   14ab6:	4620      	mov	r0, r4
   14ab8:	f858 3033 	ldr.w	r3, [r8, r3, lsl #3]
   14abc:	4798      	blx	r3
	if (err) {
   14abe:	4601      	mov	r1, r0
   14ac0:	2800      	cmp	r0, #0
   14ac2:	d080      	beq.n	149c6 <bt_smp_recv+0x2e>
   14ac4:	e7bc      	b.n	14a40 <bt_smp_recv+0xa8>
   14ac6:	bf00      	nop
   14ac8:	00023250 	.word	0x00023250
   14acc:	000235a3 	.word	0x000235a3
   14ad0:	0001fca4 	.word	0x0001fca4
   14ad4:	0002326f 	.word	0x0002326f
   14ad8:	000232a4 	.word	0x000232a4
   14adc:	00020520 	.word	0x00020520
   14ae0:	000232ca 	.word	0x000232ca
   14ae4:	000232e8 	.word	0x000232e8
   14ae8:	00022cdf 	.word	0x00022cdf

00014aec <bt_smp_pkey_ready>:
	sc_public_key = pkey;
   14aec:	4b0c      	ldr	r3, [pc, #48]	; (14b20 <bt_smp_pkey_ready+0x34>)
{
   14aee:	b510      	push	{r4, lr}
	sc_public_key = pkey;
   14af0:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   14af2:	b918      	cbnz	r0, 14afc <bt_smp_pkey_ready+0x10>
}
   14af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   14af8:	f7fe be6c 	b.w	137d4 <bt_smp_pkey_ready.part.0>
	z_impl_k_sem_give(sem);
   14afc:	4809      	ldr	r0, [pc, #36]	; (14b24 <bt_smp_pkey_ready+0x38>)
   14afe:	f004 f899 	bl	18c34 <z_impl_k_sem_give>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14b02:	4b09      	ldr	r3, [pc, #36]	; (14b28 <bt_smp_pkey_ready+0x3c>)
		err = smp_public_key_periph(smp);
   14b04:	1f1c      	subs	r4, r3, #4
   14b06:	e8d3 3faf 	lda	r3, [r3]
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   14b0a:	065b      	lsls	r3, r3, #25
   14b0c:	d507      	bpl.n	14b1e <bt_smp_pkey_ready+0x32>
		err = smp_public_key_periph(smp);
   14b0e:	4620      	mov	r0, r4
   14b10:	f7fe ffe4 	bl	13adc <smp_public_key_periph>
		if (err) {
   14b14:	4601      	mov	r1, r0
   14b16:	b110      	cbz	r0, 14b1e <bt_smp_pkey_ready+0x32>
			smp_error(smp, err);
   14b18:	4620      	mov	r0, r4
   14b1a:	f7ff fed7 	bl	148cc <smp_error>
}
   14b1e:	bd10      	pop	{r4, pc}
   14b20:	20009d28 	.word	0x20009d28
   14b24:	2000873c 	.word	0x2000873c
   14b28:	2000970c 	.word	0x2000970c

00014b2c <smp_ident_addr_info>:
{
   14b2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   14b30:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   14b34:	f8d1 8008 	ldr.w	r8, [r1, #8]
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   14b38:	f023 0302 	bic.w	r3, r3, #2
   14b3c:	f880 30e9 	strb.w	r3, [r0, #233]	; 0xe9
	struct bt_conn *conn = smp->chan.chan.conn;
   14b40:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   14b44:	f898 3000 	ldrb.w	r3, [r8]
{
   14b48:	4604      	mov	r4, r0
   14b4a:	af00      	add	r7, sp, #0
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   14b4c:	f105 0988 	add.w	r9, r5, #136	; 0x88
   14b50:	b3c3      	cbz	r3, 14bc4 <smp_ident_addr_info+0x98>
	if (!bt_addr_le_is_identity(&req->addr)) {
   14b52:	f898 3006 	ldrb.w	r3, [r8, #6]
   14b56:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   14b5a:	2bc0      	cmp	r3, #192	; 0xc0
   14b5c:	d032      	beq.n	14bc4 <smp_ident_addr_info+0x98>
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   14b5e:	4640      	mov	r0, r8
   14b60:	f7f8 febc 	bl	d8dc <bt_addr_le_str>
   14b64:	466e      	mov	r6, sp
   14b66:	b08a      	sub	sp, #40	; 0x28
   14b68:	466c      	mov	r4, sp
   14b6a:	f240 3a01 	movw	sl, #769	; 0x301
   14b6e:	4625      	mov	r5, r4
   14b70:	4b5c      	ldr	r3, [pc, #368]	; (14ce4 <smp_ident_addr_info+0x1b8>)
   14b72:	f8df b174 	ldr.w	fp, [pc, #372]	; 14ce8 <smp_ident_addr_info+0x1bc>
   14b76:	f8df 8174 	ldr.w	r8, [pc, #372]	; 14cec <smp_ident_addr_info+0x1c0>
   14b7a:	e9c4 b006 	strd	fp, r0, [r4, #24]
   14b7e:	6163      	str	r3, [r4, #20]
   14b80:	f8a4 a020 	strh.w	sl, [r4, #32]
   14b84:	f845 8f10 	str.w	r8, [r5, #16]!
   14b88:	462a      	mov	r2, r5
   14b8a:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   14b8e:	4858      	ldr	r0, [pc, #352]	; (14cf0 <smp_ident_addr_info+0x1c4>)
   14b90:	f008 fc1a 	bl	1d3c8 <z_log_msg_static_create.constprop.0>
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   14b94:	4648      	mov	r0, r9
   14b96:	46b5      	mov	sp, r6
   14b98:	f7f8 fea0 	bl	d8dc <bt_addr_le_str>
   14b9c:	46a5      	mov	sp, r4
   14b9e:	4b55      	ldr	r3, [pc, #340]	; (14cf4 <smp_ident_addr_info+0x1c8>)
   14ba0:	61e0      	str	r0, [r4, #28]
   14ba2:	462a      	mov	r2, r5
   14ba4:	4852      	ldr	r0, [pc, #328]	; (14cf0 <smp_ident_addr_info+0x1c4>)
   14ba6:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   14baa:	e9c4 3b05 	strd	r3, fp, [r4, #20]
   14bae:	f8a4 a020 	strh.w	sl, [r4, #32]
   14bb2:	f8c4 8010 	str.w	r8, [r4, #16]
   14bb6:	f008 fc07 	bl	1d3c8 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_INVALID_PARAMS;
   14bba:	200a      	movs	r0, #10
   14bbc:	46b5      	mov	sp, r6
}
   14bbe:	46bd      	mov	sp, r7
   14bc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return memcmp(a, b, sizeof(*a));
   14bc4:	2207      	movs	r2, #7
   14bc6:	4641      	mov	r1, r8
   14bc8:	4648      	mov	r0, r9
   14bca:	f006 fe72 	bl	1b8b2 <memcmp>
	if (!bt_addr_le_eq(&conn->le.dst, &req->addr)) {
   14bce:	b168      	cbz	r0, 14bec <smp_ident_addr_info+0xc0>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   14bd0:	4641      	mov	r1, r8
   14bd2:	7a28      	ldrb	r0, [r5, #8]
   14bd4:	f000 fbd8 	bl	15388 <bt_keys_find_addr>
		if (keys) {
   14bd8:	4606      	mov	r6, r0
   14bda:	b138      	cbz	r0, 14bec <smp_ident_addr_info+0xc0>
			if (!update_keys_check(smp, keys)) {
   14bdc:	4601      	mov	r1, r0
   14bde:	4620      	mov	r0, r4
   14be0:	f008 fb89 	bl	1d2f6 <update_keys_check>
   14be4:	b330      	cbz	r0, 14c34 <smp_ident_addr_info+0x108>
			bt_keys_clear(keys);
   14be6:	4630      	mov	r0, r6
   14be8:	f008 fef9 	bl	1d9de <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   14bec:	210d      	movs	r1, #13
   14bee:	1d20      	adds	r0, r4, #4
   14bf0:	f008 fb7b 	bl	1d2ea <atomic_test_bit>
   14bf4:	2800      	cmp	r0, #0
   14bf6:	d064      	beq.n	14cc2 <smp_ident_addr_info+0x196>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   14bf8:	464a      	mov	r2, r9
   14bfa:	2002      	movs	r0, #2
   14bfc:	7a29      	ldrb	r1, [r5, #8]
   14bfe:	f008 feda 	bl	1d9b6 <bt_keys_get_type>
		if (!keys) {
   14c02:	4606      	mov	r6, r0
   14c04:	b9c0      	cbnz	r0, 14c38 <smp_ident_addr_info+0x10c>
			BT_ERR("Unable to get keys for %s",
   14c06:	4648      	mov	r0, r9
   14c08:	f7f8 fe68 	bl	d8dc <bt_addr_le_str>
   14c0c:	466c      	mov	r4, sp
   14c0e:	b08a      	sub	sp, #40	; 0x28
   14c10:	466a      	mov	r2, sp
   14c12:	4b39      	ldr	r3, [pc, #228]	; (14cf8 <smp_ident_addr_info+0x1cc>)
   14c14:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   14c18:	6153      	str	r3, [r2, #20]
   14c1a:	4b33      	ldr	r3, [pc, #204]	; (14ce8 <smp_ident_addr_info+0x1bc>)
   14c1c:	e9c2 3006 	strd	r3, r0, [r2, #24]
   14c20:	f240 3301 	movw	r3, #769	; 0x301
   14c24:	8413      	strh	r3, [r2, #32]
   14c26:	4b31      	ldr	r3, [pc, #196]	; (14cec <smp_ident_addr_info+0x1c0>)
   14c28:	4831      	ldr	r0, [pc, #196]	; (14cf0 <smp_ident_addr_info+0x1c4>)
   14c2a:	f842 3f10 	str.w	r3, [r2, #16]!
   14c2e:	f008 fbcb 	bl	1d3c8 <z_log_msg_static_create.constprop.0>
   14c32:	46a5      	mov	sp, r4
				return BT_SMP_ERR_UNSPECIFIED;
   14c34:	2008      	movs	r0, #8
   14c36:	e7c2      	b.n	14bbe <smp_ident_addr_info+0x92>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   14c38:	78eb      	ldrb	r3, [r5, #3]
   14c3a:	2b00      	cmp	r3, #0
   14c3c:	d13b      	bne.n	14cb6 <smp_ident_addr_info+0x18a>
			dst = &conn->le.resp_addr;
   14c3e:	f105 0196 	add.w	r1, r5, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
   14c42:	780b      	ldrb	r3, [r1, #0]
   14c44:	2b01      	cmp	r3, #1
   14c46:	d120      	bne.n	14c8a <smp_ident_addr_info+0x15e>
		if (bt_addr_le_is_rpa(dst)) {
   14c48:	798b      	ldrb	r3, [r1, #6]
   14c4a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   14c4e:	2b40      	cmp	r3, #64	; 0x40
   14c50:	d11b      	bne.n	14c8a <smp_ident_addr_info+0x15e>
	memcpy(dst, src, sizeof(*dst));
   14c52:	2206      	movs	r2, #6
   14c54:	3101      	adds	r1, #1
   14c56:	f106 003a 	add.w	r0, r6, #58	; 0x3a
   14c5a:	f006 fe3a 	bl	1b8d2 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   14c5e:	f895 3088 	ldrb.w	r3, [r5, #136]	; 0x88
   14c62:	b193      	cbz	r3, 14c8a <smp_ident_addr_info+0x15e>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   14c64:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
   14c68:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   14c6c:	2bc0      	cmp	r3, #192	; 0xc0
   14c6e:	d00c      	beq.n	14c8a <smp_ident_addr_info+0x15e>
	memcpy(dst, src, sizeof(*dst));
   14c70:	2207      	movs	r2, #7
   14c72:	4641      	mov	r1, r8
   14c74:	1c70      	adds	r0, r6, #1
   14c76:	f006 fe2c 	bl	1b8d2 <memcpy>
   14c7a:	2207      	movs	r2, #7
   14c7c:	4641      	mov	r1, r8
   14c7e:	4648      	mov	r0, r9
   14c80:	f006 fe27 	bl	1b8d2 <memcpy>
				bt_conn_identity_resolved(conn);
   14c84:	4628      	mov	r0, r5
   14c86:	f7fc f931 	bl	10eec <bt_conn_identity_resolved>
	conflict = bt_id_find_conflict(new_bond);
   14c8a:	4630      	mov	r0, r6
   14c8c:	f7fa fdb2 	bl	f7f4 <bt_id_find_conflict>
	if (conflict) {
   14c90:	b1a0      	cbz	r0, 14cbc <smp_ident_addr_info+0x190>
		BT_WARN("Refusing new pairing. The old bond must be unpaired first.");
   14c92:	466d      	mov	r5, sp
   14c94:	b088      	sub	sp, #32
   14c96:	466a      	mov	r2, sp
   14c98:	2403      	movs	r4, #3
   14c9a:	4b18      	ldr	r3, [pc, #96]	; (14cfc <smp_ident_addr_info+0x1d0>)
   14c9c:	4814      	ldr	r0, [pc, #80]	; (14cf0 <smp_ident_addr_info+0x1c4>)
   14c9e:	6153      	str	r3, [r2, #20]
   14ca0:	4b17      	ldr	r3, [pc, #92]	; (14d00 <smp_ident_addr_info+0x1d4>)
   14ca2:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   14ca6:	6193      	str	r3, [r2, #24]
   14ca8:	f842 4f10 	str.w	r4, [r2, #16]!
   14cac:	f008 fb8c 	bl	1d3c8 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   14cb0:	4620      	mov	r0, r4
   14cb2:	46ad      	mov	sp, r5
		if (err) {
   14cb4:	e783      	b.n	14bbe <smp_ident_addr_info+0x92>
			dst = &conn->le.init_addr;
   14cb6:	f105 018f 	add.w	r1, r5, #143	; 0x8f
   14cba:	e7c2      	b.n	14c42 <smp_ident_addr_info+0x116>
	bt_id_add(new_bond);
   14cbc:	4630      	mov	r0, r6
   14cbe:	f7fa fda9 	bl	f814 <bt_id_add>
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   14cc2:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   14cc6:	075b      	lsls	r3, r3, #29
   14cc8:	d503      	bpl.n	14cd2 <smp_ident_addr_info+0x1a6>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   14cca:	210a      	movs	r1, #10
   14ccc:	4620      	mov	r0, r4
   14cce:	f008 fc08 	bl	1d4e2 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   14cd2:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   14cd6:	b109      	cbz	r1, 14cdc <smp_ident_addr_info+0x1b0>
	return 0;
   14cd8:	2000      	movs	r0, #0
   14cda:	e770      	b.n	14bbe <smp_ident_addr_info+0x92>
		smp_pairing_complete(smp, 0);
   14cdc:	4620      	mov	r0, r4
   14cde:	f7ff fd77 	bl	147d0 <smp_pairing_complete>
   14ce2:	e7f9      	b.n	14cd8 <smp_ident_addr_info+0x1ac>
   14ce4:	00023307 	.word	0x00023307
   14ce8:	00023557 	.word	0x00023557
   14cec:	01000004 	.word	0x01000004
   14cf0:	0001fca4 	.word	0x0001fca4
   14cf4:	0002331f 	.word	0x0002331f
   14cf8:	000230a3 	.word	0x000230a3
   14cfc:	0002332b 	.word	0x0002332b
   14d00:	00023544 	.word	0x00023544

00014d04 <smp_central_ident>:
{
   14d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14d08:	460b      	mov	r3, r1
   14d0a:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   14d0c:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
{
   14d10:	af00      	add	r7, sp, #0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   14d12:	210d      	movs	r1, #13
   14d14:	3004      	adds	r0, #4
   14d16:	f008 fae8 	bl	1d2ea <atomic_test_bit>
   14d1a:	b378      	cbz	r0, 14d7c <smp_central_ident+0x78>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   14d1c:	f105 0888 	add.w	r8, r5, #136	; 0x88
   14d20:	7a29      	ldrb	r1, [r5, #8]
   14d22:	4642      	mov	r2, r8
   14d24:	2004      	movs	r0, #4
		struct bt_smp_central_ident *req = (void *)buf->data;
   14d26:	689e      	ldr	r6, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   14d28:	f008 fe45 	bl	1d9b6 <bt_keys_get_type>
		if (!keys) {
   14d2c:	4605      	mov	r5, r0
   14d2e:	b9d0      	cbnz	r0, 14d66 <smp_central_ident+0x62>
			BT_ERR("Unable to get keys for %s",
   14d30:	4640      	mov	r0, r8
   14d32:	f7f8 fdd3 	bl	d8dc <bt_addr_le_str>
   14d36:	466c      	mov	r4, sp
   14d38:	b08a      	sub	sp, #40	; 0x28
   14d3a:	466a      	mov	r2, sp
   14d3c:	4b1c      	ldr	r3, [pc, #112]	; (14db0 <smp_central_ident+0xac>)
   14d3e:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   14d42:	6153      	str	r3, [r2, #20]
   14d44:	4b1b      	ldr	r3, [pc, #108]	; (14db4 <smp_central_ident+0xb0>)
   14d46:	e9c2 3006 	strd	r3, r0, [r2, #24]
   14d4a:	f240 3301 	movw	r3, #769	; 0x301
   14d4e:	8413      	strh	r3, [r2, #32]
   14d50:	4b19      	ldr	r3, [pc, #100]	; (14db8 <smp_central_ident+0xb4>)
   14d52:	481a      	ldr	r0, [pc, #104]	; (14dbc <smp_central_ident+0xb8>)
   14d54:	f842 3f10 	str.w	r3, [r2, #16]!
   14d58:	f008 fb36 	bl	1d3c8 <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   14d5c:	2008      	movs	r0, #8
   14d5e:	46a5      	mov	sp, r4
}
   14d60:	46bd      	mov	sp, r7
   14d62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
   14d66:	2202      	movs	r2, #2
   14d68:	4631      	mov	r1, r6
   14d6a:	3018      	adds	r0, #24
   14d6c:	f006 fdb1 	bl	1b8d2 <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
   14d70:	2208      	movs	r2, #8
   14d72:	1cb1      	adds	r1, r6, #2
   14d74:	f105 0010 	add.w	r0, r5, #16
   14d78:	f006 fdab 	bl	1b8d2 <memcpy>
	smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   14d7c:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   14d80:	f023 0201 	bic.w	r2, r3, #1
   14d84:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   14d88:	079a      	lsls	r2, r3, #30
   14d8a:	d508      	bpl.n	14d9e <smp_central_ident+0x9a>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   14d8c:	2108      	movs	r1, #8
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   14d8e:	4620      	mov	r0, r4
   14d90:	f008 fba7 	bl	1d4e2 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   14d94:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   14d98:	b129      	cbz	r1, 14da6 <smp_central_ident+0xa2>
	return 0;
   14d9a:	2000      	movs	r0, #0
   14d9c:	e7e0      	b.n	14d60 <smp_central_ident+0x5c>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   14d9e:	075b      	lsls	r3, r3, #29
   14da0:	d5f8      	bpl.n	14d94 <smp_central_ident+0x90>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   14da2:	210a      	movs	r1, #10
   14da4:	e7f3      	b.n	14d8e <smp_central_ident+0x8a>
		smp_pairing_complete(smp, 0);
   14da6:	4620      	mov	r0, r4
   14da8:	f7ff fd12 	bl	147d0 <smp_pairing_complete>
   14dac:	e7f5      	b.n	14d9a <smp_central_ident+0x96>
   14dae:	bf00      	nop
   14db0:	000230a3 	.word	0x000230a3
   14db4:	00023523 	.word	0x00023523
   14db8:	01000004 	.word	0x01000004
   14dbc:	0001fca4 	.word	0x0001fca4

00014dc0 <smp_pairing_failed>:
{
   14dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14dc4:	460e      	mov	r6, r1
   14dc6:	af00      	add	r7, sp, #0
   14dc8:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   14dca:	f8d0 80ec 	ldr.w	r8, [r0, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   14dce:	f7fe fca7 	bl	13720 <latch_auth_cb>
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   14dd2:	68b6      	ldr	r6, [r6, #8]
	BT_ERR("pairing failed (peer reason 0x%x)", req->reason);
   14dd4:	46e9      	mov	r9, sp
   14dd6:	b088      	sub	sp, #32
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   14dd8:	4605      	mov	r5, r0
	BT_ERR("pairing failed (peer reason 0x%x)", req->reason);
   14dda:	466a      	mov	r2, sp
   14ddc:	7833      	ldrb	r3, [r6, #0]
   14dde:	4915      	ldr	r1, [pc, #84]	; (14e34 <smp_pairing_failed+0x74>)
   14de0:	4815      	ldr	r0, [pc, #84]	; (14e38 <smp_pairing_failed+0x78>)
   14de2:	6151      	str	r1, [r2, #20]
   14de4:	4915      	ldr	r1, [pc, #84]	; (14e3c <smp_pairing_failed+0x7c>)
   14de6:	e9c2 1306 	strd	r1, r3, [r2, #24]
   14dea:	2304      	movs	r3, #4
   14dec:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   14df0:	f842 3f10 	str.w	r3, [r2, #16]!
   14df4:	f008 fae8 	bl	1d3c8 <z_log_msg_static_create.constprop.0>
   14df8:	46cd      	mov	sp, r9
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   14dfa:	f104 0904 	add.w	r9, r4, #4
   14dfe:	210a      	movs	r1, #10
   14e00:	4648      	mov	r0, r9
   14e02:	f008 fbfa 	bl	1d5fa <atomic_test_and_clear_bit>
   14e06:	b140      	cbz	r0, 14e1a <smp_pairing_failed+0x5a>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   14e08:	b975      	cbnz	r5, 14e28 <smp_pairing_failed+0x68>
	smp_pairing_complete(smp, req->reason);
   14e0a:	4620      	mov	r0, r4
   14e0c:	7831      	ldrb	r1, [r6, #0]
   14e0e:	f7ff fcdf 	bl	147d0 <smp_pairing_complete>
}
   14e12:	2000      	movs	r0, #0
   14e14:	46bd      	mov	sp, r7
   14e16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   14e1a:	210b      	movs	r1, #11
   14e1c:	4648      	mov	r0, r9
   14e1e:	f008 fbec 	bl	1d5fa <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   14e22:	2800      	cmp	r0, #0
   14e24:	d1f0      	bne.n	14e08 <smp_pairing_failed+0x48>
   14e26:	e7f0      	b.n	14e0a <smp_pairing_failed+0x4a>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   14e28:	692b      	ldr	r3, [r5, #16]
   14e2a:	2b00      	cmp	r3, #0
   14e2c:	d0ed      	beq.n	14e0a <smp_pairing_failed+0x4a>
			smp_auth_cb->cancel(conn);
   14e2e:	4640      	mov	r0, r8
   14e30:	4798      	blx	r3
   14e32:	e7ea      	b.n	14e0a <smp_pairing_failed+0x4a>
   14e34:	0002336a 	.word	0x0002336a
   14e38:	0001fca4 	.word	0x0001fca4
   14e3c:	000234ff 	.word	0x000234ff

00014e40 <bt_smp_encrypt_change>:
{
   14e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e44:	b089      	sub	sp, #36	; 0x24
	struct bt_conn *conn = chan->conn;
   14e46:	4605      	mov	r5, r0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   14e48:	f1a0 06e8 	sub.w	r6, r0, #232	; 0xe8
{
   14e4c:	4604      	mov	r4, r0
   14e4e:	4688      	mov	r8, r1
   14e50:	af00      	add	r7, sp, #0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   14e52:	2101      	movs	r1, #1
   14e54:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->conn;
   14e56:	f855 99ec 	ldr.w	r9, [r5], #-236
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   14e5a:	f008 fbce 	bl	1d5fa <atomic_test_and_clear_bit>
   14e5e:	b338      	cbz	r0, 14eb0 <bt_smp_encrypt_change+0x70>
	if (hci_status) {
   14e60:	f1b8 0f00 	cmp.w	r8, #0
   14e64:	d019      	beq.n	14e9a <bt_smp_encrypt_change+0x5a>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   14e66:	2103      	movs	r1, #3
   14e68:	4630      	mov	r0, r6
   14e6a:	f008 fa3e 	bl	1d2ea <atomic_test_bit>
   14e6e:	b1f8      	cbz	r0, 14eb0 <bt_smp_encrypt_change+0x70>
			uint8_t smp_err = smp_err_get(
   14e70:	4640      	mov	r0, r8
   14e72:	f7f9 fd79 	bl	e968 <bt_security_err_get>
	switch (auth_err) {
   14e76:	3801      	subs	r0, #1
   14e78:	b2c0      	uxtb	r0, r0
   14e7a:	2808      	cmp	r0, #8
			uint8_t smp_err = smp_err_get(
   14e7c:	bf8c      	ite	hi
   14e7e:	2400      	movhi	r4, #0
   14e80:	4b79      	ldrls	r3, [pc, #484]	; (15068 <bt_smp_encrypt_change+0x228>)
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   14e82:	f04f 0102 	mov.w	r1, #2
   14e86:	bf98      	it	ls
   14e88:	5c1c      	ldrbls	r4, [r3, r0]
   14e8a:	4630      	mov	r0, r6
   14e8c:	f008 fb29 	bl	1d4e2 <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
   14e90:	4621      	mov	r1, r4
		smp_pairing_complete(smp, 0);
   14e92:	4628      	mov	r0, r5
   14e94:	f7ff fc9c 	bl	147d0 <smp_pairing_complete>
   14e98:	e00a      	b.n	14eb0 <bt_smp_encrypt_change+0x70>
	if (!conn->encrypt) {
   14e9a:	f899 300b 	ldrb.w	r3, [r9, #11]
   14e9e:	b13b      	cbz	r3, 14eb0 <bt_smp_encrypt_change+0x70>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   14ea0:	2103      	movs	r1, #3
   14ea2:	4630      	mov	r0, r6
   14ea4:	f008 fa21 	bl	1d2ea <atomic_test_bit>
   14ea8:	b930      	cbnz	r0, 14eb8 <bt_smp_encrypt_change+0x78>
		smp_reset(smp);
   14eaa:	4628      	mov	r0, r5
   14eac:	f008 fbb7 	bl	1d61e <smp_reset>
}
   14eb0:	3724      	adds	r7, #36	; 0x24
   14eb2:	46bd      	mov	sp, r7
   14eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   14eb8:	2105      	movs	r1, #5
   14eba:	4630      	mov	r0, r6
   14ebc:	f008 fa15 	bl	1d2ea <atomic_test_bit>
   14ec0:	b1b8      	cbz	r0, 14ef2 <bt_smp_encrypt_change+0xb2>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   14ec2:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   14ec6:	071a      	lsls	r2, r3, #28
   14ec8:	d507      	bpl.n	14eda <bt_smp_encrypt_change+0x9a>
   14eca:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   14ece:	071b      	lsls	r3, r3, #28
   14ed0:	d503      	bpl.n	14eda <bt_smp_encrypt_change+0x9a>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   14ed2:	2111      	movs	r1, #17
   14ed4:	4630      	mov	r0, r6
   14ed6:	f008 fb04 	bl	1d4e2 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   14eda:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   14ede:	f023 0308 	bic.w	r3, r3, #8
   14ee2:	f804 3c04 	strb.w	r3, [r4, #-4]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   14ee6:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   14eea:	f023 0308 	bic.w	r3, r3, #8
   14eee:	f804 3c03 	strb.w	r3, [r4, #-3]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   14ef2:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   14ef6:	07d8      	lsls	r0, r3, #31
   14ef8:	d524      	bpl.n	14f44 <bt_smp_encrypt_change+0x104>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   14efa:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   14efc:	4628      	mov	r0, r5
   14efe:	f008 faf0 	bl	1d4e2 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   14f02:	2102      	movs	r1, #2
   14f04:	4630      	mov	r0, r6
   14f06:	f008 faec 	bl	1d4e2 <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
   14f0a:	6823      	ldr	r3, [r4, #0]
	if (!keys) {
   14f0c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
   14f10:	bb02      	cbnz	r2, 14f54 <bt_smp_encrypt_change+0x114>
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   14f12:	f103 0088 	add.w	r0, r3, #136	; 0x88
   14f16:	f7f8 fce1 	bl	d8dc <bt_addr_le_str>
   14f1a:	466c      	mov	r4, sp
   14f1c:	b08a      	sub	sp, #40	; 0x28
   14f1e:	466a      	mov	r2, sp
   14f20:	4b52      	ldr	r3, [pc, #328]	; (1506c <bt_smp_encrypt_change+0x22c>)
   14f22:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   14f26:	6153      	str	r3, [r2, #20]
   14f28:	4b51      	ldr	r3, [pc, #324]	; (15070 <bt_smp_encrypt_change+0x230>)
   14f2a:	e9c2 3006 	strd	r3, r0, [r2, #24]
   14f2e:	f240 3301 	movw	r3, #769	; 0x301
   14f32:	8413      	strh	r3, [r2, #32]
   14f34:	4b4f      	ldr	r3, [pc, #316]	; (15074 <bt_smp_encrypt_change+0x234>)
   14f36:	4850      	ldr	r0, [pc, #320]	; (15078 <bt_smp_encrypt_change+0x238>)
   14f38:	f842 3f10 	str.w	r3, [r2, #16]!
   14f3c:	f008 fa44 	bl	1d3c8 <z_log_msg_static_create.constprop.0>
   14f40:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   14f42:	e7b5      	b.n	14eb0 <bt_smp_encrypt_change+0x70>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   14f44:	0799      	lsls	r1, r3, #30
   14f46:	d501      	bpl.n	14f4c <bt_smp_encrypt_change+0x10c>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   14f48:	2108      	movs	r1, #8
   14f4a:	e7d7      	b.n	14efc <bt_smp_encrypt_change+0xbc>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   14f4c:	075a      	lsls	r2, r3, #29
   14f4e:	d5d8      	bpl.n	14f02 <bt_smp_encrypt_change+0xc2>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   14f50:	210a      	movs	r1, #10
   14f52:	e7d3      	b.n	14efc <bt_smp_encrypt_change+0xbc>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   14f54:	2105      	movs	r1, #5
   14f56:	f008 f9c8 	bl	1d2ea <atomic_test_bit>
   14f5a:	b9e0      	cbnz	r0, 14f96 <bt_smp_encrypt_change+0x156>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
   14f5c:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   14f60:	07db      	lsls	r3, r3, #31
   14f62:	d518      	bpl.n	14f96 <bt_smp_encrypt_change+0x156>
	struct bt_keys *keys = conn->le.keys;
   14f64:	6823      	ldr	r3, [r4, #0]
		if (bt_rand((void *)&rand, sizeof(rand))) {
   14f66:	211a      	movs	r1, #26
   14f68:	1d38      	adds	r0, r7, #4
	struct bt_keys *keys = conn->le.keys;
   14f6a:	f8d3 80b4 	ldr.w	r8, [r3, #180]	; 0xb4
		if (bt_rand((void *)&rand, sizeof(rand))) {
   14f6e:	f7fb f9f5 	bl	1035c <bt_rand>
   14f72:	4682      	mov	sl, r0
   14f74:	b1a0      	cbz	r0, 14fa0 <bt_smp_encrypt_change+0x160>
			BT_ERR("Unable to get random bytes");
   14f76:	466e      	mov	r6, sp
   14f78:	b088      	sub	sp, #32
   14f7a:	466a      	mov	r2, sp
   14f7c:	4b3f      	ldr	r3, [pc, #252]	; (1507c <bt_smp_encrypt_change+0x23c>)
			BT_ERR("Unable to allocate Encrypt Info buffer");
   14f7e:	6153      	str	r3, [r2, #20]
   14f80:	4b3f      	ldr	r3, [pc, #252]	; (15080 <bt_smp_encrypt_change+0x240>)
   14f82:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14f86:	6193      	str	r3, [r2, #24]
   14f88:	2303      	movs	r3, #3
   14f8a:	483b      	ldr	r0, [pc, #236]	; (15078 <bt_smp_encrypt_change+0x238>)
   14f8c:	f842 3f10 	str.w	r3, [r2, #16]!
   14f90:	f008 fa1a 	bl	1d3c8 <z_log_msg_static_create.constprop.0>
   14f94:	46b5      	mov	sp, r6
	if (!smp->local_dist && !smp->remote_dist) {
   14f96:	f834 1c04 	ldrh.w	r1, [r4, #-4]
   14f9a:	2900      	cmp	r1, #0
   14f9c:	d188      	bne.n	14eb0 <bt_smp_encrypt_change+0x70>
   14f9e:	e778      	b.n	14e92 <bt_smp_encrypt_change+0x52>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
   14fa0:	2106      	movs	r1, #6
   14fa2:	4628      	mov	r0, r5
   14fa4:	f008 faad 	bl	1d502 <smp_create_pdu.constprop.0>
		if (!buf) {
   14fa8:	4681      	mov	r9, r0
   14faa:	b920      	cbnz	r0, 14fb6 <bt_smp_encrypt_change+0x176>
			BT_ERR("Unable to allocate Encrypt Info buffer");
   14fac:	466e      	mov	r6, sp
   14fae:	b088      	sub	sp, #32
   14fb0:	466a      	mov	r2, sp
   14fb2:	4b34      	ldr	r3, [pc, #208]	; (15084 <bt_smp_encrypt_change+0x244>)
   14fb4:	e7e3      	b.n	14f7e <bt_smp_encrypt_change+0x13e>
	return net_buf_simple_add(&buf->b, len);
   14fb6:	2110      	movs	r1, #16
   14fb8:	3008      	adds	r0, #8
   14fba:	f008 fdbf 	bl	1db3c <net_buf_simple_add>
		memcpy(info->ltk, rand.key, keys->enc_size);
   14fbe:	f898 200c 	ldrb.w	r2, [r8, #12]
   14fc2:	1d39      	adds	r1, r7, #4
   14fc4:	4683      	mov	fp, r0
   14fc6:	f006 fc84 	bl	1b8d2 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
   14fca:	f898 000c 	ldrb.w	r0, [r8, #12]
   14fce:	280f      	cmp	r0, #15
   14fd0:	d805      	bhi.n	14fde <bt_smp_encrypt_change+0x19e>
			(void)memset(info->ltk + keys->enc_size, 0,
   14fd2:	f1c0 0210 	rsb	r2, r0, #16
   14fd6:	4651      	mov	r1, sl
   14fd8:	4458      	add	r0, fp
   14fda:	f006 fc85 	bl	1b8e8 <memset>
		smp_send(smp, buf, NULL, NULL);
   14fde:	4649      	mov	r1, r9
   14fe0:	2200      	movs	r2, #0
   14fe2:	4628      	mov	r0, r5
   14fe4:	f008 f9d3 	bl	1d38e <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_CENTRAL_IDENT,
   14fe8:	2107      	movs	r1, #7
   14fea:	4628      	mov	r0, r5
   14fec:	f008 fa89 	bl	1d502 <smp_create_pdu.constprop.0>
		if (!buf) {
   14ff0:	4681      	mov	r9, r0
   14ff2:	b920      	cbnz	r0, 14ffe <bt_smp_encrypt_change+0x1be>
			BT_ERR("Unable to allocate Central Ident buffer");
   14ff4:	466e      	mov	r6, sp
   14ff6:	b088      	sub	sp, #32
   14ff8:	466a      	mov	r2, sp
   14ffa:	4b23      	ldr	r3, [pc, #140]	; (15088 <bt_smp_encrypt_change+0x248>)
   14ffc:	e7bf      	b.n	14f7e <bt_smp_encrypt_change+0x13e>
   14ffe:	210a      	movs	r1, #10
   15000:	3008      	adds	r0, #8
   15002:	f008 fd9b 	bl	1db3c <net_buf_simple_add>
   15006:	4682      	mov	sl, r0
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
   15008:	2208      	movs	r2, #8
   1500a:	f107 0114 	add.w	r1, r7, #20
   1500e:	3002      	adds	r0, #2
   15010:	f006 fc5f 	bl	1b8d2 <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
   15014:	2202      	movs	r2, #2
   15016:	f107 011c 	add.w	r1, r7, #28
   1501a:	4650      	mov	r0, sl
   1501c:	f006 fc59 	bl	1b8d2 <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
   15020:	4649      	mov	r1, r9
   15022:	4628      	mov	r0, r5
   15024:	4a19      	ldr	r2, [pc, #100]	; (1508c <bt_smp_encrypt_change+0x24c>)
   15026:	f008 f9b2 	bl	1d38e <smp_send.constprop.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1502a:	210d      	movs	r1, #13
   1502c:	4630      	mov	r0, r6
   1502e:	f008 f95c 	bl	1d2ea <atomic_test_bit>
   15032:	2800      	cmp	r0, #0
   15034:	d0af      	beq.n	14f96 <bt_smp_encrypt_change+0x156>
			bt_keys_add_type(keys, BT_KEYS_PERIPH_LTK);
   15036:	4640      	mov	r0, r8
   15038:	2101      	movs	r1, #1
   1503a:	f008 fccc 	bl	1d9d6 <bt_keys_add_type>
			memcpy(keys->periph_ltk.val, rand.key,
   1503e:	1d39      	adds	r1, r7, #4
   15040:	2210      	movs	r2, #16
   15042:	f108 004a 	add.w	r0, r8, #74	; 0x4a
   15046:	f006 fc44 	bl	1b8d2 <memcpy>
			memcpy(keys->periph_ltk.rand, rand.rand,
   1504a:	f107 0114 	add.w	r1, r7, #20
   1504e:	2208      	movs	r2, #8
   15050:	f108 0040 	add.w	r0, r8, #64	; 0x40
   15054:	f006 fc3d 	bl	1b8d2 <memcpy>
			memcpy(keys->periph_ltk.ediv, rand.ediv,
   15058:	2202      	movs	r2, #2
   1505a:	f107 011c 	add.w	r1, r7, #28
   1505e:	f108 0048 	add.w	r0, r8, #72	; 0x48
   15062:	f006 fc36 	bl	1b8d2 <memcpy>
   15066:	e796      	b.n	14f96 <bt_smp_encrypt_change+0x156>
   15068:	00023437 	.word	0x00023437
   1506c:	00023390 	.word	0x00023390
   15070:	00023484 	.word	0x00023484
   15074:	01000004 	.word	0x01000004
   15078:	0001fca4 	.word	0x0001fca4
   1507c:	000233a9 	.word	0x000233a9
   15080:	0002346d 	.word	0x0002346d
   15084:	000233c8 	.word	0x000233c8
   15088:	000233f3 	.word	0x000233f3
   1508c:	0001d989 	.word	0x0001d989

00015090 <smp_timeout>:
{
   15090:	b5b0      	push	{r4, r5, r7, lr}
   15092:	af00      	add	r7, sp, #0
	BT_ERR("SMP Timeout");
   15094:	466d      	mov	r5, sp
   15096:	b088      	sub	sp, #32
{
   15098:	4604      	mov	r4, r0
	BT_ERR("SMP Timeout");
   1509a:	466a      	mov	r2, sp
   1509c:	4b0c      	ldr	r3, [pc, #48]	; (150d0 <smp_timeout+0x40>)
   1509e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   150a2:	6153      	str	r3, [r2, #20]
   150a4:	4b0b      	ldr	r3, [pc, #44]	; (150d4 <smp_timeout+0x44>)
   150a6:	480c      	ldr	r0, [pc, #48]	; (150d8 <smp_timeout+0x48>)
   150a8:	6193      	str	r3, [r2, #24]
   150aa:	2303      	movs	r3, #3
   150ac:	f842 3f10 	str.w	r3, [r2, #16]!
   150b0:	f008 f98a 	bl	1d3c8 <z_log_msg_static_create.constprop.0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   150b4:	f5a4 70bc 	sub.w	r0, r4, #376	; 0x178
   150b8:	46ad      	mov	sp, r5
   150ba:	2108      	movs	r1, #8
   150bc:	f7ff fb88 	bl	147d0 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   150c0:	2104      	movs	r1, #4
   150c2:	f5a4 70ba 	sub.w	r0, r4, #372	; 0x174
   150c6:	f008 fa0c 	bl	1d4e2 <atomic_set_bit>
}
   150ca:	46bd      	mov	sp, r7
   150cc:	bdb0      	pop	{r4, r5, r7, pc}
   150ce:	bf00      	nop
   150d0:	0002341f 	.word	0x0002341f
   150d4:	00023461 	.word	0x00023461
   150d8:	0001fca4 	.word	0x0001fca4

000150dc <bt_smp_update_keys>:
{
   150dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   150e0:	af00      	add	r7, sp, #0
   150e2:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   150e4:	f008 f973 	bl	1d3ce <smp_chan_get>
	if (!smp) {
   150e8:	4605      	mov	r5, r0
   150ea:	b370      	cbz	r0, 1514a <bt_smp_update_keys+0x6e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   150ec:	1d06      	adds	r6, r0, #4
   150ee:	2103      	movs	r1, #3
   150f0:	4630      	mov	r0, r6
   150f2:	f008 f8fa 	bl	1d2ea <atomic_test_bit>
   150f6:	b340      	cbz	r0, 1514a <bt_smp_update_keys+0x6e>
	if (conn->le.keys) {
   150f8:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   150fc:	b108      	cbz	r0, 15102 <bt_smp_update_keys+0x26>
		bt_keys_clear(conn->le.keys);
   150fe:	f008 fc6e 	bl	1d9de <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   15102:	f104 0888 	add.w	r8, r4, #136	; 0x88
   15106:	4641      	mov	r1, r8
   15108:	7a20      	ldrb	r0, [r4, #8]
   1510a:	f000 f8a1 	bl	15250 <bt_keys_get_addr>
   1510e:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
   15112:	b9e8      	cbnz	r0, 15150 <bt_smp_update_keys+0x74>
		BT_ERR("Unable to get keys for %s",
   15114:	4640      	mov	r0, r8
   15116:	f7f8 fbe1 	bl	d8dc <bt_addr_le_str>
   1511a:	466c      	mov	r4, sp
   1511c:	b08a      	sub	sp, #40	; 0x28
   1511e:	466a      	mov	r2, sp
   15120:	4b3c      	ldr	r3, [pc, #240]	; (15214 <bt_smp_update_keys+0x138>)
   15122:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   15126:	6153      	str	r3, [r2, #20]
   15128:	4b3b      	ldr	r3, [pc, #236]	; (15218 <bt_smp_update_keys+0x13c>)
   1512a:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1512e:	f240 3301 	movw	r3, #769	; 0x301
   15132:	8413      	strh	r3, [r2, #32]
   15134:	4b39      	ldr	r3, [pc, #228]	; (1521c <bt_smp_update_keys+0x140>)
   15136:	483a      	ldr	r0, [pc, #232]	; (15220 <bt_smp_update_keys+0x144>)
   15138:	f842 3f10 	str.w	r3, [r2, #16]!
   1513c:	f008 f944 	bl	1d3c8 <z_log_msg_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   15140:	2108      	movs	r1, #8
   15142:	46a5      	mov	sp, r4
   15144:	4628      	mov	r0, r5
   15146:	f7ff fbc1 	bl	148cc <smp_error>
}
   1514a:	46bd      	mov	sp, r7
   1514c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   15150:	210e      	movs	r1, #14
   15152:	4630      	mov	r0, r6
   15154:	f008 f8c9 	bl	1d2ea <atomic_test_bit>
   15158:	b128      	cbz	r0, 15166 <bt_smp_update_keys+0x8a>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   1515a:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   1515e:	7b53      	ldrb	r3, [r2, #13]
   15160:	f043 0302 	orr.w	r3, r3, #2
   15164:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   15166:	7a2a      	ldrb	r2, [r5, #8]
		conn->le.keys->flags |= BT_KEYS_OOB;
   15168:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
	switch (smp->method) {
   1516c:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_OOB;
   1516e:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
   15170:	d83c      	bhi.n	151ec <bt_smp_update_keys+0x110>
   15172:	2a00      	cmp	r2, #0
   15174:	d041      	beq.n	151fa <bt_smp_update_keys+0x11e>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   15176:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   1517a:	7b53      	ldrb	r3, [r2, #13]
   1517c:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   15180:	7353      	strb	r3, [r2, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   15182:	7b6b      	ldrb	r3, [r5, #13]
   15184:	7d29      	ldrb	r1, [r5, #20]
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   15186:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
	return MIN(req->max_key_size, rsp->max_key_size);
   1518a:	428b      	cmp	r3, r1
   1518c:	bf28      	it	cs
   1518e:	460b      	movcs	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   15190:	4630      	mov	r0, r6
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   15192:	7313      	strb	r3, [r2, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   15194:	2105      	movs	r1, #5
   15196:	f008 f8a8 	bl	1d2ea <atomic_test_bit>
   1519a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
		conn->le.keys->flags |= BT_KEYS_SC;
   1519e:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   151a0:	b3a0      	cbz	r0, 1520c <bt_smp_update_keys+0x130>
		conn->le.keys->flags |= BT_KEYS_SC;
   151a2:	f042 0210 	orr.w	r2, r2, #16
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   151a6:	210d      	movs	r1, #13
   151a8:	4630      	mov	r0, r6
		conn->le.keys->flags |= BT_KEYS_SC;
   151aa:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   151ac:	f008 f89d 	bl	1d2ea <atomic_test_bit>
   151b0:	2800      	cmp	r0, #0
   151b2:	d0ca      	beq.n	1514a <bt_smp_update_keys+0x6e>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   151b4:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   151b8:	2120      	movs	r1, #32
   151ba:	f008 fc0c 	bl	1d9d6 <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
   151be:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   151c2:	f105 0147 	add.w	r1, r5, #71	; 0x47
   151c6:	2210      	movs	r2, #16
   151c8:	301a      	adds	r0, #26
   151ca:	f006 fb82 	bl	1b8d2 <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
   151ce:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   151d2:	2208      	movs	r2, #8
   151d4:	2100      	movs	r1, #0
   151d6:	3010      	adds	r0, #16
   151d8:	f006 fb86 	bl	1b8e8 <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
   151dc:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   151e0:	2202      	movs	r2, #2
   151e2:	2100      	movs	r1, #0
   151e4:	3018      	adds	r0, #24
   151e6:	f006 fb7f 	bl	1b8e8 <memset>
   151ea:	e7ae      	b.n	1514a <bt_smp_update_keys+0x6e>
	switch (smp->method) {
   151ec:	3a05      	subs	r2, #5
   151ee:	2a01      	cmp	r2, #1
   151f0:	d803      	bhi.n	151fa <bt_smp_update_keys+0x11e>
		conn->le.keys->flags |= BT_KEYS_OOB;
   151f2:	f043 0320 	orr.w	r3, r3, #32
   151f6:	734b      	strb	r3, [r1, #13]
   151f8:	e7bd      	b.n	15176 <bt_smp_update_keys+0x9a>
		conn->le.keys->flags &= ~BT_KEYS_OOB;
   151fa:	f023 0320 	bic.w	r3, r3, #32
   151fe:	734b      	strb	r3, [r1, #13]
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   15200:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   15204:	7b53      	ldrb	r3, [r2, #13]
   15206:	f023 0301 	bic.w	r3, r3, #1
   1520a:	e7b9      	b.n	15180 <bt_smp_update_keys+0xa4>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   1520c:	f022 0210 	bic.w	r2, r2, #16
   15210:	735a      	strb	r2, [r3, #13]
   15212:	e79a      	b.n	1514a <bt_smp_update_keys+0x6e>
   15214:	000230a3 	.word	0x000230a3
   15218:	000235bd 	.word	0x000235bd
   1521c:	01000004 	.word	0x01000004
   15220:	0001fca4 	.word	0x0001fca4

00015224 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   15224:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   15226:	4b07      	ldr	r3, [pc, #28]	; (15244 <bt_smp_init+0x20>)
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   15228:	4807      	ldr	r0, [pc, #28]	; (15248 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1522a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   1522e:	f003 0306 	and.w	r3, r3, #6
   15232:	1f9a      	subs	r2, r3, #6
   15234:	4253      	negs	r3, r2
   15236:	4153      	adcs	r3, r2
   15238:	4a04      	ldr	r2, [pc, #16]	; (1524c <bt_smp_init+0x28>)
   1523a:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
   1523c:	f7fb f8b8 	bl	103b0 <bt_pub_key_gen>
	}

	return smp_self_test();
}
   15240:	2000      	movs	r0, #0
   15242:	bd08      	pop	{r3, pc}
   15244:	20008000 	.word	0x20008000
   15248:	20008468 	.word	0x20008468
   1524c:	2000a072 	.word	0x2000a072

00015250 <bt_keys_get_addr>:
	return kdata.in_use;
}
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   15250:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   15252:	4c0f      	ldr	r4, [pc, #60]	; (15290 <bt_keys_get_addr+0x40>)
{
   15254:	4605      	mov	r5, r0
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   15256:	f814 3b01 	ldrb.w	r3, [r4], #1
{
   1525a:	460e      	mov	r6, r1
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   1525c:	4283      	cmp	r3, r0
   1525e:	d007      	beq.n	15270 <bt_keys_get_addr+0x20>
	return memcmp(a, b, sizeof(*a));
   15260:	2207      	movs	r2, #7
   15262:	490c      	ldr	r1, [pc, #48]	; (15294 <bt_keys_get_addr+0x44>)
   15264:	480c      	ldr	r0, [pc, #48]	; (15298 <bt_keys_get_addr+0x48>)
   15266:	f006 fb24 	bl	1b8b2 <memcmp>
			first_free_slot = oldest - &key_pool[0];
		}
	}

#endif  /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */
	if (first_free_slot < ARRAY_SIZE(key_pool)) {
   1526a:	b148      	cbz	r0, 15280 <bt_keys_get_addr+0x30>
		return keys;
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
   1526c:	2000      	movs	r0, #0
}
   1526e:	bd70      	pop	{r4, r5, r6, pc}
   15270:	2207      	movs	r2, #7
   15272:	4620      	mov	r0, r4
   15274:	f006 fb1d 	bl	1b8b2 <memcmp>
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   15278:	2800      	cmp	r0, #0
   1527a:	d1f1      	bne.n	15260 <bt_keys_get_addr+0x10>
		keys = &key_pool[i];
   1527c:	4804      	ldr	r0, [pc, #16]	; (15290 <bt_keys_get_addr+0x40>)
   1527e:	e7f6      	b.n	1526e <bt_keys_get_addr+0x1e>
	memcpy(dst, src, sizeof(*dst));
   15280:	2207      	movs	r2, #7
   15282:	4631      	mov	r1, r6
   15284:	4804      	ldr	r0, [pc, #16]	; (15298 <bt_keys_get_addr+0x48>)
		keys->id = id;
   15286:	f804 5c01 	strb.w	r5, [r4, #-1]
   1528a:	f006 fb22 	bl	1b8d2 <memcpy>
}
   1528e:	e7f5      	b.n	1527c <bt_keys_get_addr+0x2c>
   15290:	20009d2c 	.word	0x20009d2c
   15294:	000215de 	.word	0x000215de
   15298:	20009d2d 	.word	0x20009d2d

0001529c <bt_keys_foreach_type>:
	}
}

void bt_keys_foreach_type(enum bt_keys_type type, void (*func)(struct bt_keys *keys, void *data),
			  void *data)
{
   1529c:	b410      	push	{r4}
   1529e:	460b      	mov	r3, r1
   152a0:	4611      	mov	r1, r2
	int i;

	__ASSERT_NO_MSG(func != NULL);

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
   152a2:	4a04      	ldr	r2, [pc, #16]	; (152b4 <bt_keys_foreach_type+0x18>)
   152a4:	89d4      	ldrh	r4, [r2, #14]
   152a6:	4204      	tst	r4, r0
   152a8:	d002      	beq.n	152b0 <bt_keys_foreach_type+0x14>
			func(&key_pool[i], data);
   152aa:	4610      	mov	r0, r2
		}
	}
}
   152ac:	bc10      	pop	{r4}
			func(&key_pool[i], data);
   152ae:	4718      	bx	r3
}
   152b0:	bc10      	pop	{r4}
   152b2:	4770      	bx	lr
   152b4:	20009d2c 	.word	0x20009d2c

000152b8 <bt_keys_find>:

struct bt_keys *bt_keys_find(enum bt_keys_type type, uint8_t id, const bt_addr_le_t *addr)
{
   152b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	__ASSERT_NO_MSG(addr != NULL);

	BT_DBG("type %d %s", type, bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   152bc:	2300      	movs	r3, #0
{
   152be:	4605      	mov	r5, r0
   152c0:	460e      	mov	r6, r1
   152c2:	4617      	mov	r7, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   152c4:	f8df 8030 	ldr.w	r8, [pc, #48]	; 152f8 <bt_keys_find+0x40>
   152c8:	f8b8 400e 	ldrh.w	r4, [r8, #14]
   152cc:	f898 2000 	ldrb.w	r2, [r8]
   152d0:	402c      	ands	r4, r5
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   152d2:	b113      	cbz	r3, 152da <bt_keys_find+0x22>
		    bt_addr_le_eq(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
   152d4:	2000      	movs	r0, #0
}
   152d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   152da:	2c00      	cmp	r4, #0
   152dc:	d0fa      	beq.n	152d4 <bt_keys_find+0x1c>
   152de:	4296      	cmp	r6, r2
   152e0:	d1f8      	bne.n	152d4 <bt_keys_find+0x1c>
	return memcmp(a, b, sizeof(*a));
   152e2:	2207      	movs	r2, #7
   152e4:	4639      	mov	r1, r7
   152e6:	4805      	ldr	r0, [pc, #20]	; (152fc <bt_keys_find+0x44>)
   152e8:	f006 fae3 	bl	1b8b2 <memcmp>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   152ec:	2301      	movs	r3, #1
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   152ee:	2800      	cmp	r0, #0
   152f0:	d1ea      	bne.n	152c8 <bt_keys_find+0x10>
			return &key_pool[i];
   152f2:	4801      	ldr	r0, [pc, #4]	; (152f8 <bt_keys_find+0x40>)
   152f4:	e7ef      	b.n	152d6 <bt_keys_find+0x1e>
   152f6:	bf00      	nop
   152f8:	20009d2c 	.word	0x20009d2c
   152fc:	20009d2d 	.word	0x20009d2d

00015300 <bt_keys_find_irk>:

	return keys;
}

struct bt_keys *bt_keys_find_irk(uint8_t id, const bt_addr_le_t *addr)
{
   15300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
   15302:	780b      	ldrb	r3, [r1, #0]
   15304:	4606      	mov	r6, r0
   15306:	2b01      	cmp	r3, #1
   15308:	460c      	mov	r4, r1
   1530a:	d001      	beq.n	15310 <bt_keys_find_irk+0x10>
	__ASSERT_NO_MSG(addr != NULL);

	BT_DBG("%s", bt_addr_le_str(addr));

	if (!bt_addr_le_is_rpa(addr)) {
		return NULL;
   1530c:	2000      	movs	r0, #0
	}

	BT_DBG("No IRK for %s", bt_addr_le_str(addr));

	return NULL;
}
   1530e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   15310:	798b      	ldrb	r3, [r1, #6]
   15312:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   15316:	2b40      	cmp	r3, #64	; 0x40
   15318:	d1f8      	bne.n	1530c <bt_keys_find_irk+0xc>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1531a:	2300      	movs	r3, #0
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1531c:	4d17      	ldr	r5, [pc, #92]	; (1537c <bt_keys_find_irk+0x7c>)
	return memcmp(a, b, sizeof(*a));
   1531e:	f105 073a 	add.w	r7, r5, #58	; 0x3a
   15322:	89ea      	ldrh	r2, [r5, #14]
		if (key_pool[i].id == id &&
   15324:	7828      	ldrb	r0, [r5, #0]
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   15326:	f002 0202 	and.w	r2, r2, #2
   1532a:	b1c3      	cbz	r3, 1535e <bt_keys_find_irk+0x5e>
   1532c:	2300      	movs	r3, #0
   1532e:	89ea      	ldrh	r2, [r5, #14]
		if (key_pool[i].id != id) {
   15330:	7829      	ldrb	r1, [r5, #0]
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   15332:	f002 0202 	and.w	r2, r2, #2
   15336:	2b00      	cmp	r3, #0
   15338:	d1e8      	bne.n	1530c <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1533a:	2a00      	cmp	r2, #0
   1533c:	d0e6      	beq.n	1530c <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
   1533e:	42b1      	cmp	r1, r6
   15340:	d1e4      	bne.n	1530c <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   15342:	1c67      	adds	r7, r4, #1
   15344:	4639      	mov	r1, r7
   15346:	480e      	ldr	r0, [pc, #56]	; (15380 <bt_keys_find_irk+0x80>)
   15348:	f006 fadc 	bl	1b904 <bt_rpa_irk_matches>
   1534c:	2301      	movs	r3, #1
   1534e:	2800      	cmp	r0, #0
   15350:	d0ed      	beq.n	1532e <bt_keys_find_irk+0x2e>
	memcpy(dst, src, sizeof(*dst));
   15352:	2206      	movs	r2, #6
   15354:	4639      	mov	r1, r7
   15356:	480b      	ldr	r0, [pc, #44]	; (15384 <bt_keys_find_irk+0x84>)
   15358:	f006 fabb 	bl	1b8d2 <memcpy>
}
   1535c:	e00b      	b.n	15376 <bt_keys_find_irk+0x76>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1535e:	2a00      	cmp	r2, #0
   15360:	d0e5      	beq.n	1532e <bt_keys_find_irk+0x2e>
		if (key_pool[i].id == id &&
   15362:	42b0      	cmp	r0, r6
   15364:	d1e3      	bne.n	1532e <bt_keys_find_irk+0x2e>
	return memcmp(a, b, sizeof(*a));
   15366:	2206      	movs	r2, #6
   15368:	4639      	mov	r1, r7
   1536a:	1c60      	adds	r0, r4, #1
   1536c:	f006 faa1 	bl	1b8b2 <memcmp>
   15370:	2301      	movs	r3, #1
   15372:	2800      	cmp	r0, #0
   15374:	d1d5      	bne.n	15322 <bt_keys_find_irk+0x22>
			return &key_pool[i];
   15376:	4801      	ldr	r0, [pc, #4]	; (1537c <bt_keys_find_irk+0x7c>)
   15378:	e7c9      	b.n	1530e <bt_keys_find_irk+0xe>
   1537a:	bf00      	nop
   1537c:	20009d2c 	.word	0x20009d2c
   15380:	20009d56 	.word	0x20009d56
   15384:	20009d66 	.word	0x20009d66

00015388 <bt_keys_find_addr>:

struct bt_keys *bt_keys_find_addr(uint8_t id, const bt_addr_le_t *addr)
{
   15388:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(addr != NULL);

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if (key_pool[i].id == id &&
   1538a:	4c06      	ldr	r4, [pc, #24]	; (153a4 <bt_keys_find_addr+0x1c>)
   1538c:	7823      	ldrb	r3, [r4, #0]
   1538e:	4283      	cmp	r3, r0
   15390:	d104      	bne.n	1539c <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
   15392:	2207      	movs	r2, #7
   15394:	1c60      	adds	r0, r4, #1
   15396:	f006 fa8c 	bl	1b8b2 <memcmp>
   1539a:	b108      	cbz	r0, 153a0 <bt_keys_find_addr+0x18>
		    bt_addr_le_eq(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
   1539c:	2000      	movs	r0, #0
}
   1539e:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   153a0:	4620      	mov	r0, r4
   153a2:	e7fc      	b.n	1539e <bt_keys_find_addr+0x16>
   153a4:	20009d2c 	.word	0x20009d2c

000153a8 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   153a8:	222c      	movs	r2, #44	; 0x2c
   153aa:	4b02      	ldr	r3, [pc, #8]	; (153b4 <net_buf_pool_get+0xc>)
   153ac:	fb02 3000 	mla	r0, r2, r0, r3
   153b0:	4770      	bx	lr
   153b2:	bf00      	nop
   153b4:	20008784 	.word	0x20008784

000153b8 <net_buf_id>:
int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   153b8:	212c      	movs	r1, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   153ba:	7982      	ldrb	r2, [r0, #6]
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   153bc:	4b05      	ldr	r3, [pc, #20]	; (153d4 <net_buf_id+0x1c>)
   153be:	fb01 3302 	mla	r3, r1, r2, r3
   153c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   153c4:	7f1b      	ldrb	r3, [r3, #28]
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   153c6:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   153c8:	3317      	adds	r3, #23
   153ca:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   153ce:	fbb0 f0f3 	udiv	r0, r0, r3
   153d2:	4770      	bx	lr
   153d4:	20008784 	.word	0x20008784

000153d8 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   153d8:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   153da:	242c      	movs	r4, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   153dc:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   153de:	4b09      	ldr	r3, [pc, #36]	; (15404 <fixed_data_alloc+0x2c>)
   153e0:	fb04 3302 	mla	r3, r4, r2, r3
   153e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24

	*size = MIN(fixed->data_size, *size);
   153e6:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   153e8:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   153ea:	681a      	ldr	r2, [r3, #0]
   153ec:	4294      	cmp	r4, r2
   153ee:	bf94      	ite	ls
   153f0:	600c      	strls	r4, [r1, #0]
   153f2:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   153f4:	e9d3 5400 	ldrd	r5, r4, [r3]
   153f8:	f7ff ffde 	bl	153b8 <net_buf_id>
}
   153fc:	fb05 4000 	mla	r0, r5, r0, r4
   15400:	bd38      	pop	{r3, r4, r5, pc}
   15402:	bf00      	nop
   15404:	20008784 	.word	0x20008784

00015408 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   15408:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1540c:	4605      	mov	r5, r0
   1540e:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   15410:	4610      	mov	r0, r2
   15412:	4619      	mov	r1, r3
{
   15414:	4691      	mov	r9, r2
   15416:	4698      	mov	r8, r3
   15418:	4617      	mov	r7, r2
   1541a:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1541c:	f009 ffc3 	bl	1f3a6 <sys_clock_timeout_end_calc>
   15420:	4682      	mov	sl, r0
   15422:	468b      	mov	fp, r1
	__asm__ volatile(
   15424:	f04f 0320 	mov.w	r3, #32
   15428:	f3ef 8111 	mrs	r1, BASEPRI
   1542c:	f383 8812 	msr	BASEPRI_MAX, r3
   15430:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   15434:	8b6b      	ldrh	r3, [r5, #26]
   15436:	2b00      	cmp	r3, #0
   15438:	d058      	beq.n	154ec <net_buf_alloc_len+0xe4>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1543a:	8b2a      	ldrh	r2, [r5, #24]
   1543c:	429a      	cmp	r2, r3
   1543e:	d93c      	bls.n	154ba <net_buf_alloc_len+0xb2>
   15440:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   15442:	2200      	movs	r2, #0
   15444:	2300      	movs	r3, #0
   15446:	4628      	mov	r0, r5
   15448:	f003 fbc0 	bl	18bcc <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1544c:	9900      	ldr	r1, [sp, #0]
   1544e:	4604      	mov	r4, r0
   15450:	2800      	cmp	r0, #0
   15452:	d032      	beq.n	154ba <net_buf_alloc_len+0xb2>
	__asm__ volatile(
   15454:	f381 8811 	msr	BASEPRI, r1
   15458:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1545c:	9b01      	ldr	r3, [sp, #4]
   1545e:	2b00      	cmp	r3, #0
   15460:	d055      	beq.n	1550e <net_buf_alloc_len+0x106>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   15462:	ea58 0309 	orrs.w	r3, r8, r9
   15466:	d00f      	beq.n	15488 <net_buf_alloc_len+0x80>
   15468:	f1b8 3fff 	cmp.w	r8, #4294967295
   1546c:	bf08      	it	eq
   1546e:	f1b9 3fff 	cmpeq.w	r9, #4294967295
   15472:	d009      	beq.n	15488 <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   15474:	f004 fad6 	bl	19a24 <sys_clock_tick_get>
   15478:	ebba 0700 	subs.w	r7, sl, r0
   1547c:	eb6b 0601 	sbc.w	r6, fp, r1

			if (remaining <= 0) {
   15480:	2e00      	cmp	r6, #0
   15482:	bfbc      	itt	lt
   15484:	2700      	movlt	r7, #0
   15486:	463e      	movlt	r6, r7
	return pool->alloc->cb->alloc(buf, size, timeout);
   15488:	f04f 082c 	mov.w	r8, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1548c:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1548e:	4d25      	ldr	r5, [pc, #148]	; (15524 <net_buf_alloc_len+0x11c>)
   15490:	463a      	mov	r2, r7
   15492:	fb08 5303 	mla	r3, r8, r3, r5
   15496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   15498:	4620      	mov	r0, r4
   1549a:	681b      	ldr	r3, [r3, #0]
   1549c:	a901      	add	r1, sp, #4
   1549e:	f8d3 9000 	ldr.w	r9, [r3]
   154a2:	4633      	mov	r3, r6
   154a4:	47c8      	blx	r9
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   154a6:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   154a8:	2800      	cmp	r0, #0
   154aa:	d131      	bne.n	15510 <net_buf_alloc_len+0x108>
	k_lifo_put(&pool->free, buf);
   154ac:	79a0      	ldrb	r0, [r4, #6]
   154ae:	4621      	mov	r1, r4
   154b0:	fb00 5008 	mla	r0, r0, r8, r5
   154b4:	f009 fcb4 	bl	1ee20 <k_queue_prepend>
}
   154b8:	e024      	b.n	15504 <net_buf_alloc_len+0xfc>
		uninit_count = pool->uninit_count--;
   154ba:	8b68      	ldrh	r0, [r5, #26]
   154bc:	1e43      	subs	r3, r0, #1
   154be:	836b      	strh	r3, [r5, #26]
   154c0:	f381 8811 	msr	BASEPRI, r1
   154c4:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   154c8:	7f2b      	ldrb	r3, [r5, #28]
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   154ca:	8b2a      	ldrh	r2, [r5, #24]
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   154cc:	6aac      	ldr	r4, [r5, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   154ce:	3317      	adds	r3, #23
   154d0:	f023 0303 	bic.w	r3, r3, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   154d4:	1a12      	subs	r2, r2, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   154d6:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - _net_buf_pool_list;
   154da:	4b12      	ldr	r3, [pc, #72]	; (15524 <net_buf_alloc_len+0x11c>)
   154dc:	4a12      	ldr	r2, [pc, #72]	; (15528 <net_buf_alloc_len+0x120>)
   154de:	1aeb      	subs	r3, r5, r3
   154e0:	109b      	asrs	r3, r3, #2
   154e2:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
   154e4:	71a3      	strb	r3, [r4, #6]
	buf->user_data_size = pool->user_data_size;
   154e6:	7f2b      	ldrb	r3, [r5, #28]
   154e8:	71e3      	strb	r3, [r4, #7]
		goto success;
   154ea:	e7b7      	b.n	1545c <net_buf_alloc_len+0x54>
   154ec:	f381 8811 	msr	BASEPRI, r1
   154f0:	f3bf 8f6f 	isb	sy
   154f4:	464a      	mov	r2, r9
   154f6:	4643      	mov	r3, r8
   154f8:	4628      	mov	r0, r5
   154fa:	f003 fb67 	bl	18bcc <z_impl_k_queue_get>
	if (!buf) {
   154fe:	4604      	mov	r4, r0
   15500:	2800      	cmp	r0, #0
   15502:	d1ab      	bne.n	1545c <net_buf_alloc_len+0x54>
		return NULL;
   15504:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   15506:	4620      	mov	r0, r4
   15508:	b003      	add	sp, #12
   1550a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   1550e:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   15510:	2300      	movs	r3, #0
	buf->ref   = 1U;
   15512:	2201      	movs	r2, #1
	buf->frags = NULL;
   15514:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   15516:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   15518:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   1551a:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   1551c:	6923      	ldr	r3, [r4, #16]
   1551e:	81e2      	strh	r2, [r4, #14]
   15520:	60a3      	str	r3, [r4, #8]
	return buf;
   15522:	e7f0      	b.n	15506 <net_buf_alloc_len+0xfe>
   15524:	20008784 	.word	0x20008784
   15528:	ba2e8ba3 	.word	0xba2e8ba3

0001552c <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1552c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15530:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   15532:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   15534:	272c      	movs	r7, #44	; 0x2c
   15536:	4d15      	ldr	r5, [pc, #84]	; (1558c <net_buf_unref+0x60>)
	while (buf) {
   15538:	b90c      	cbnz	r4, 1553e <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1553a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   1553e:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   15540:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   15544:	3b01      	subs	r3, #1
   15546:	b2db      	uxtb	r3, r3
   15548:	7123      	strb	r3, [r4, #4]
   1554a:	2b00      	cmp	r3, #0
   1554c:	d1f5      	bne.n	1553a <net_buf_unref+0xe>
		if (buf->__buf) {
   1554e:	6921      	ldr	r1, [r4, #16]
   15550:	b159      	cbz	r1, 1556a <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   15552:	7963      	ldrb	r3, [r4, #5]
   15554:	079b      	lsls	r3, r3, #30
   15556:	d407      	bmi.n	15568 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   15558:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   1555a:	4620      	mov	r0, r4
   1555c:	fb07 5303 	mla	r3, r7, r3, r5
   15560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   15562:	681b      	ldr	r3, [r3, #0]
   15564:	689b      	ldr	r3, [r3, #8]
   15566:	4798      	blx	r3
			buf->__buf = NULL;
   15568:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   1556a:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1556c:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   1556e:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   15572:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   15574:	6a1b      	ldr	r3, [r3, #32]
   15576:	b11b      	cbz	r3, 15580 <net_buf_unref+0x54>
			pool->destroy(buf);
   15578:	4620      	mov	r0, r4
   1557a:	4798      	blx	r3
{
   1557c:	4644      	mov	r4, r8
   1557e:	e7db      	b.n	15538 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   15580:	4621      	mov	r1, r4
   15582:	fb00 5007 	mla	r0, r0, r7, r5
   15586:	f009 fc4b 	bl	1ee20 <k_queue_prepend>
}
   1558a:	e7f7      	b.n	1557c <net_buf_unref+0x50>
   1558c:	20008784 	.word	0x20008784

00015590 <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(const struct device *dev)
{
   15590:	b508      	push	{r3, lr}
   15592:	4804      	ldr	r0, [pc, #16]	; (155a4 <xoshiro128_initialize+0x14>)
   15594:	f009 fad8 	bl	1eb48 <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
	}
	return 0;
   15598:	2800      	cmp	r0, #0
}
   1559a:	bf0c      	ite	eq
   1559c:	f06f 0012 	mvneq.w	r0, #18
   155a0:	2000      	movne	r0, #0
   155a2:	bd08      	pop	{r3, pc}
   155a4:	0001f850 	.word	0x0001f850

000155a8 <adc_gain_invert>:
		[ADC_GAIN_64] = {.mul = 1, .div = 64},
		[ADC_GAIN_128] = {.mul = 1, .div = 128},
	};
	int rv = -EINVAL;

	if ((uint8_t)gain < ARRAY_SIZE(gains)) {
   155a8:	2813      	cmp	r0, #19
   155aa:	d80e      	bhi.n	155ca <adc_gain_invert+0x22>
		const struct gain_desc *gdp = &gains[gain];

		if ((gdp->mul != 0) && (gdp->div != 0)) {
   155ac:	4a08      	ldr	r2, [pc, #32]	; (155d0 <adc_gain_invert+0x28>)
   155ae:	f812 3010 	ldrb.w	r3, [r2, r0, lsl #1]
   155b2:	b153      	cbz	r3, 155ca <adc_gain_invert+0x22>
   155b4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
   155b8:	7852      	ldrb	r2, [r2, #1]
   155ba:	b132      	cbz	r2, 155ca <adc_gain_invert+0x22>
			*value = (gdp->mul * *value) / gdp->div;
   155bc:	6808      	ldr	r0, [r1, #0]
   155be:	4343      	muls	r3, r0
   155c0:	fb93 f3f2 	sdiv	r3, r3, r2
			rv = 0;
   155c4:	2000      	movs	r0, #0
			*value = (gdp->mul * *value) / gdp->div;
   155c6:	600b      	str	r3, [r1, #0]
			rv = 0;
   155c8:	4770      	bx	lr
	int rv = -EINVAL;
   155ca:	f06f 0015 	mvn.w	r0, #21
		}
	}

	return rv;
}
   155ce:	4770      	bx	lr
   155d0:	00023683 	.word	0x00023683

000155d4 <adc_context_start_sampling>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
   155d4:	2201      	movs	r2, #1
   155d6:	4b05      	ldr	r3, [pc, #20]	; (155ec <adc_context_start_sampling+0x18>)
   155d8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
   155dc:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
   155e0:	b109      	cbz	r1, 155e6 <adc_context_start_sampling+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   155e2:	60da      	str	r2, [r3, #12]
}
   155e4:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   155e6:	601a      	str	r2, [r3, #0]
   155e8:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
   155ea:	4770      	bx	lr
   155ec:	4000e000 	.word	0x4000e000

000155f0 <adc_nrfx_channel_setup>:
{
   155f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t channel_id = channel_cfg->channel_id;
   155f2:	7908      	ldrb	r0, [r1, #4]
{
   155f4:	af00      	add	r7, sp, #0
	uint8_t channel_id = channel_cfg->channel_id;
   155f6:	f000 041f 	and.w	r4, r0, #31
	if (channel_id >= SAADC_CH_NUM) {
   155fa:	2c07      	cmp	r4, #7
   155fc:	d82c      	bhi.n	15658 <adc_nrfx_channel_setup+0x68>
	switch (channel_cfg->gain) {
   155fe:	780b      	ldrb	r3, [r1, #0]
   15600:	2b0b      	cmp	r3, #11
   15602:	d818      	bhi.n	15636 <adc_nrfx_channel_setup+0x46>
   15604:	e8df f003 	tbb	[pc, r3]
   15608:	07070707 	.word	0x07070707
   1560c:	17170617 	.word	0x17170617
   15610:	15171311 	.word	0x15171311
		config.gain = NRF_SAADC_GAIN1_2;
   15614:	2304      	movs	r3, #4
	switch (channel_cfg->reference) {
   15616:	784a      	ldrb	r2, [r1, #1]
   15618:	2a03      	cmp	r2, #3
   1561a:	d021      	beq.n	15660 <adc_nrfx_channel_setup+0x70>
   1561c:	2a04      	cmp	r2, #4
   1561e:	d034      	beq.n	1568a <adc_nrfx_channel_setup+0x9a>
		LOG_ERR("Selected ADC reference is not valid");
   15620:	466c      	mov	r4, sp
   15622:	b088      	sub	sp, #32
   15624:	466a      	mov	r2, sp
   15626:	4b36      	ldr	r3, [pc, #216]	; (15700 <adc_nrfx_channel_setup+0x110>)
   15628:	e009      	b.n	1563e <adc_nrfx_channel_setup+0x4e>
		config.gain = NRF_SAADC_GAIN1;
   1562a:	2305      	movs	r3, #5
		break;
   1562c:	e7f3      	b.n	15616 <adc_nrfx_channel_setup+0x26>
		config.gain = NRF_SAADC_GAIN2;
   1562e:	2306      	movs	r3, #6
		break;
   15630:	e7f1      	b.n	15616 <adc_nrfx_channel_setup+0x26>
		config.gain = NRF_SAADC_GAIN4;
   15632:	2307      	movs	r3, #7
		break;
   15634:	e7ef      	b.n	15616 <adc_nrfx_channel_setup+0x26>
		LOG_ERR("Selected ADC gain is not valid");
   15636:	466c      	mov	r4, sp
   15638:	b088      	sub	sp, #32
   1563a:	466a      	mov	r2, sp
   1563c:	4b31      	ldr	r3, [pc, #196]	; (15704 <adc_nrfx_channel_setup+0x114>)
   1563e:	6153      	str	r3, [r2, #20]
   15640:	4b31      	ldr	r3, [pc, #196]	; (15708 <adc_nrfx_channel_setup+0x118>)
   15642:	6193      	str	r3, [r2, #24]
   15644:	2303      	movs	r3, #3
   15646:	f842 3f10 	str.w	r3, [r2, #16]!
   1564a:	2300      	movs	r3, #0
   1564c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15650:	482e      	ldr	r0, [pc, #184]	; (1570c <adc_nrfx_channel_setup+0x11c>)
   15652:	f7f5 ff85 	bl	b560 <z_impl_z_log_msg_static_create>
   15656:	46a5      	mov	sp, r4
		return -EINVAL;
   15658:	f06f 0015 	mvn.w	r0, #21
}
   1565c:	46bd      	mov	sp, r7
   1565e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (channel_cfg->reference) {
   15660:	2501      	movs	r5, #1
	switch (channel_cfg->acquisition_time) {
   15662:	f244 060a 	movw	r6, #16394	; 0x400a
   15666:	884a      	ldrh	r2, [r1, #2]
   15668:	42b2      	cmp	r2, r6
   1566a:	d042      	beq.n	156f2 <adc_nrfx_channel_setup+0x102>
   1566c:	d80f      	bhi.n	1568e <adc_nrfx_channel_setup+0x9e>
   1566e:	f244 0603 	movw	r6, #16387	; 0x4003
   15672:	42b2      	cmp	r2, r6
   15674:	d019      	beq.n	156aa <adc_nrfx_channel_setup+0xba>
   15676:	f244 0605 	movw	r6, #16389	; 0x4005
   1567a:	42b2      	cmp	r2, r6
   1567c:	d037      	beq.n	156ee <adc_nrfx_channel_setup+0xfe>
   1567e:	b3c2      	cbz	r2, 156f2 <adc_nrfx_channel_setup+0x102>
		LOG_ERR("Selected ADC acquisition time is not valid");
   15680:	466c      	mov	r4, sp
   15682:	b088      	sub	sp, #32
   15684:	466a      	mov	r2, sp
   15686:	4b22      	ldr	r3, [pc, #136]	; (15710 <adc_nrfx_channel_setup+0x120>)
   15688:	e7d9      	b.n	1563e <adc_nrfx_channel_setup+0x4e>
	nrf_saadc_channel_config_t config = {
   1568a:	2500      	movs	r5, #0
   1568c:	e7e9      	b.n	15662 <adc_nrfx_channel_setup+0x72>
	switch (channel_cfg->acquisition_time) {
   1568e:	f244 0614 	movw	r6, #16404	; 0x4014
   15692:	42b2      	cmp	r2, r6
   15694:	d02f      	beq.n	156f6 <adc_nrfx_channel_setup+0x106>
   15696:	f244 0628 	movw	r6, #16424	; 0x4028
   1569a:	42b2      	cmp	r2, r6
   1569c:	d02d      	beq.n	156fa <adc_nrfx_channel_setup+0x10a>
   1569e:	f244 060f 	movw	r6, #16399	; 0x400f
   156a2:	42b2      	cmp	r2, r6
   156a4:	d1ec      	bne.n	15680 <adc_nrfx_channel_setup+0x90>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
   156a6:	2203      	movs	r2, #3
   156a8:	e000      	b.n	156ac <adc_nrfx_channel_setup+0xbc>
	nrf_saadc_channel_config_t config = {
   156aa:	2200      	movs	r2, #0
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   156ac:	f3c0 1040 	ubfx	r0, r0, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
   156b0:	021b      	lsls	r3, r3, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   156b2:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
    p_reg->CH[channel].PSELP = pselp;
   156b6:	2000      	movs	r0, #0
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   156b8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
   156bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    p_reg->CH[channel].CONFIG =
   156c0:	0122      	lsls	r2, r4, #4
   156c2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   156c6:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
   156ca:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
   156ce:	0123      	lsls	r3, r4, #4
   156d0:	798a      	ldrb	r2, [r1, #6]
   156d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   156d6:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   156da:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
   156de:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
   156e2:	4b0c      	ldr	r3, [pc, #48]	; (15714 <adc_nrfx_channel_setup+0x124>)
   156e4:	794a      	ldrb	r2, [r1, #5]
   156e6:	4423      	add	r3, r4
   156e8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	return 0;
   156ec:	e7b6      	b.n	1565c <adc_nrfx_channel_setup+0x6c>
	switch (channel_cfg->acquisition_time) {
   156ee:	2201      	movs	r2, #1
   156f0:	e7dc      	b.n	156ac <adc_nrfx_channel_setup+0xbc>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
   156f2:	2202      	movs	r2, #2
   156f4:	e7da      	b.n	156ac <adc_nrfx_channel_setup+0xbc>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
   156f6:	2204      	movs	r2, #4
   156f8:	e7d8      	b.n	156ac <adc_nrfx_channel_setup+0xbc>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
   156fa:	2205      	movs	r2, #5
   156fc:	e7d6      	b.n	156ac <adc_nrfx_channel_setup+0xbc>
   156fe:	bf00      	nop
   15700:	000236ce 	.word	0x000236ce
   15704:	000236ab 	.word	0x000236ab
   15708:	00023814 	.word	0x00023814
   1570c:	0001fc24 	.word	0x0001fc24
   15710:	000236f6 	.word	0x000236f6
   15714:	20008160 	.word	0x20008160

00015718 <adc_nrfx_read>:
}

/* Implementation of the ADC driver API function: adc_read. */
static int adc_nrfx_read(const struct device *dev,
			 const struct adc_sequence *sequence)
{
   15718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1571c:	b082      	sub	sp, #8
   1571e:	460c      	mov	r4, r1
   15720:	af02      	add	r7, sp, #8
	return z_impl_k_sem_take(sem, timeout);
   15722:	f04f 33ff 	mov.w	r3, #4294967295
   15726:	f04f 32ff 	mov.w	r2, #4294967295
   1572a:	487d      	ldr	r0, [pc, #500]	; (15920 <adc_nrfx_read+0x208>)
   1572c:	f003 faa8 	bl	18c80 <z_impl_k_sem_take>
	uint32_t selected_channels = sequence->channels;
   15730:	6866      	ldr	r6, [r4, #4]
	if (!selected_channels ||
   15732:	1e73      	subs	r3, r6, #1
   15734:	2bfe      	cmp	r3, #254	; 0xfe
   15736:	d90d      	bls.n	15754 <adc_nrfx_read+0x3c>
		LOG_ERR("Invalid selection of channels");
   15738:	466c      	mov	r4, sp
   1573a:	b088      	sub	sp, #32
   1573c:	aa02      	add	r2, sp, #8
   1573e:	4b79      	ldr	r3, [pc, #484]	; (15924 <adc_nrfx_read+0x20c>)
   15740:	6153      	str	r3, [r2, #20]
   15742:	4b79      	ldr	r3, [pc, #484]	; (15928 <adc_nrfx_read+0x210>)
		LOG_ERR(
   15744:	6193      	str	r3, [r2, #24]
   15746:	2303      	movs	r3, #3
   15748:	f842 3f10 	str.w	r3, [r2, #16]!
   1574c:	2300      	movs	r3, #0
   1574e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15752:	e019      	b.n	15788 <adc_nrfx_read+0x70>
   15754:	2100      	movs	r1, #0
	active_channels = 0U;
   15756:	460a      	mov	r2, r1
    p_reg->CH[channel].PSELP = pselp;
   15758:	4d74      	ldr	r5, [pc, #464]	; (1592c <adc_nrfx_read+0x214>)
			if (m_data.positive_inputs[channel_id] == 0U) {
   1575a:	f8df c1d4 	ldr.w	ip, [pc, #468]	; 15930 <adc_nrfx_read+0x218>
		if (selected_channels & BIT(channel_id)) {
   1575e:	fa26 f301 	lsr.w	r3, r6, r1
   15762:	f013 0301 	ands.w	r3, r3, #1
   15766:	d041      	beq.n	157ec <adc_nrfx_read+0xd4>
			if (m_data.positive_inputs[channel_id] == 0U) {
   15768:	f81c 3001 	ldrb.w	r3, [ip, r1]
   1576c:	b9cb      	cbnz	r3, 157a2 <adc_nrfx_read+0x8a>
				LOG_ERR("Channel %u not configured",
   1576e:	466c      	mov	r4, sp
   15770:	b088      	sub	sp, #32
   15772:	aa02      	add	r2, sp, #8
   15774:	486f      	ldr	r0, [pc, #444]	; (15934 <adc_nrfx_read+0x21c>)
   15776:	6150      	str	r0, [r2, #20]
   15778:	486b      	ldr	r0, [pc, #428]	; (15928 <adc_nrfx_read+0x210>)
   1577a:	e9c2 0106 	strd	r0, r1, [r2, #24]
   1577e:	2104      	movs	r1, #4
   15780:	f842 1f10 	str.w	r1, [r2, #16]!
   15784:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   15788:	486b      	ldr	r0, [pc, #428]	; (15938 <adc_nrfx_read+0x220>)
   1578a:	f7f5 fee9 	bl	b560 <z_impl_z_log_msg_static_create>
   1578e:	46a5      	mov	sp, r4
		return -EINVAL;
   15790:	f06f 0415 	mvn.w	r4, #21
	z_impl_k_sem_give(sem);
   15794:	4862      	ldr	r0, [pc, #392]	; (15920 <adc_nrfx_read+0x208>)
   15796:	f003 fa4d 	bl	18c34 <z_impl_k_sem_give>
	adc_context_lock(&m_data.ctx, false, NULL);
	error = start_read(dev, sequence);
	adc_context_release(&m_data.ctx, error);

	return error;
}
   1579a:	4620      	mov	r0, r4
   1579c:	46bd      	mov	sp, r7
   1579e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
   157a2:	f894 e011 	ldrb.w	lr, [r4, #17]

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
   157a6:	eb05 1801 	add.w	r8, r5, r1, lsl #4
   157aa:	f1be 0e00 	subs.w	lr, lr, #0
   157ae:	bf18      	it	ne
   157b0:	f04f 0e01 	movne.w	lr, #1
   157b4:	f8d8 0518 	ldr.w	r0, [r8, #1304]	; 0x518
			++active_channels;
   157b8:	3201      	adds	r2, #1
   157ba:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
   157be:	ea40 600e 	orr.w	r0, r0, lr, lsl #24
   157c2:	f8c8 0518 	str.w	r0, [r8, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
   157c6:	f101 0051 	add.w	r0, r1, #81	; 0x51
   157ca:	0100      	lsls	r0, r0, #4
   157cc:	502b      	str	r3, [r5, r0]
   157ce:	b2d2      	uxtb	r2, r2
	} while (++channel_id < SAADC_CH_NUM);
   157d0:	3101      	adds	r1, #1
   157d2:	2908      	cmp	r1, #8
   157d4:	d1c3      	bne.n	1575e <adc_nrfx_read+0x46>
	error = set_resolution(sequence);
   157d6:	7c23      	ldrb	r3, [r4, #16]
	switch (sequence->resolution) {
   157d8:	f1a3 0108 	sub.w	r1, r3, #8
   157dc:	2906      	cmp	r1, #6
   157de:	d81b      	bhi.n	15818 <adc_nrfx_read+0x100>
   157e0:	e8df f001 	tbb	[pc, r1]
   157e4:	1a291a27 	.word	0x1a291a27
   157e8:	1a09      	.short	0x1a09
   157ea:	18          	.byte	0x18
   157eb:	00          	.byte	0x00
   157ec:	f101 0051 	add.w	r0, r1, #81	; 0x51
   157f0:	0100      	lsls	r0, r0, #4
   157f2:	502b      	str	r3, [r5, r0]
}
   157f4:	e7ec      	b.n	157d0 <adc_nrfx_read+0xb8>
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
   157f6:	2302      	movs	r3, #2
    p_reg->RESOLUTION = resolution;
   157f8:	494c      	ldr	r1, [pc, #304]	; (1592c <adc_nrfx_read+0x214>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   157fa:	2a01      	cmp	r2, #1
   157fc:	f8c1 35f0 	str.w	r3, [r1, #1520]	; 0x5f0
	error = set_oversampling(sequence, active_channels);
   15800:	7c63      	ldrb	r3, [r4, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   15802:	d91a      	bls.n	1583a <adc_nrfx_read+0x122>
   15804:	b1db      	cbz	r3, 1583e <adc_nrfx_read+0x126>
		LOG_ERR(
   15806:	466c      	mov	r4, sp
   15808:	b088      	sub	sp, #32
   1580a:	aa02      	add	r2, sp, #8
   1580c:	4b4b      	ldr	r3, [pc, #300]	; (1593c <adc_nrfx_read+0x224>)
   1580e:	6153      	str	r3, [r2, #20]
   15810:	4b4b      	ldr	r3, [pc, #300]	; (15940 <adc_nrfx_read+0x228>)
   15812:	e797      	b.n	15744 <adc_nrfx_read+0x2c>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
   15814:	2303      	movs	r3, #3
		break;
   15816:	e7ef      	b.n	157f8 <adc_nrfx_read+0xe0>
		LOG_ERR("ADC resolution value %d is not valid",
   15818:	466c      	mov	r4, sp
   1581a:	b088      	sub	sp, #32
   1581c:	aa02      	add	r2, sp, #8
   1581e:	4949      	ldr	r1, [pc, #292]	; (15944 <adc_nrfx_read+0x22c>)
   15820:	6151      	str	r1, [r2, #20]
   15822:	4949      	ldr	r1, [pc, #292]	; (15948 <adc_nrfx_read+0x230>)
	switch (sequence->oversampling) {
   15824:	e9c2 1306 	strd	r1, r3, [r2, #24]
		LOG_ERR("Oversampling value %d is not valid",
   15828:	2304      	movs	r3, #4
   1582a:	f842 3f10 	str.w	r3, [r2, #16]!
   1582e:	2300      	movs	r3, #0
   15830:	e7a8      	b.n	15784 <adc_nrfx_read+0x6c>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
   15832:	2300      	movs	r3, #0
   15834:	e7e0      	b.n	157f8 <adc_nrfx_read+0xe0>
	switch (sequence->resolution) {
   15836:	2301      	movs	r3, #1
   15838:	e7de      	b.n	157f8 <adc_nrfx_read+0xe0>
	switch (sequence->oversampling) {
   1583a:	2b08      	cmp	r3, #8
   1583c:	d81d      	bhi.n	1587a <adc_nrfx_read+0x162>
    p_reg->OVERSAMPLE = oversample;
   1583e:	f8c1 35f4 	str.w	r3, [r1, #1524]	; 0x5f4
	if (sequence->options) {
   15842:	6821      	ldr	r1, [r4, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
   15844:	0053      	lsls	r3, r2, #1
	if (sequence->options) {
   15846:	b9f9      	cbnz	r1, 15888 <adc_nrfx_read+0x170>
	if (sequence->buffer_size < needed_buffer_size) {
   15848:	68e1      	ldr	r1, [r4, #12]
   1584a:	4299      	cmp	r1, r3
   1584c:	d220      	bcs.n	15890 <adc_nrfx_read+0x178>
		LOG_ERR("Provided buffer is too small (%u/%u)",
   1584e:	466c      	mov	r4, sp
   15850:	b08a      	sub	sp, #40	; 0x28
   15852:	aa02      	add	r2, sp, #8
   15854:	6213      	str	r3, [r2, #32]
   15856:	2305      	movs	r3, #5
   15858:	483c      	ldr	r0, [pc, #240]	; (1594c <adc_nrfx_read+0x234>)
   1585a:	6150      	str	r0, [r2, #20]
   1585c:	483c      	ldr	r0, [pc, #240]	; (15950 <adc_nrfx_read+0x238>)
   1585e:	e9c2 0106 	strd	r0, r1, [r2, #24]
   15862:	f842 3f10 	str.w	r3, [r2, #16]!
   15866:	2300      	movs	r3, #0
   15868:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   1586c:	4832      	ldr	r0, [pc, #200]	; (15938 <adc_nrfx_read+0x220>)
   1586e:	f7f5 fe77 	bl	b560 <z_impl_z_log_msg_static_create>
   15872:	46a5      	mov	sp, r4
		return -ENOMEM;
   15874:	f06f 040b 	mvn.w	r4, #11
   15878:	e78c      	b.n	15794 <adc_nrfx_read+0x7c>
		LOG_ERR("Oversampling value %d is not valid",
   1587a:	466c      	mov	r4, sp
   1587c:	b088      	sub	sp, #32
   1587e:	aa02      	add	r2, sp, #8
   15880:	4934      	ldr	r1, [pc, #208]	; (15954 <adc_nrfx_read+0x23c>)
   15882:	6151      	str	r1, [r2, #20]
   15884:	492e      	ldr	r1, [pc, #184]	; (15940 <adc_nrfx_read+0x228>)
   15886:	e7cd      	b.n	15824 <adc_nrfx_read+0x10c>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
   15888:	8989      	ldrh	r1, [r1, #12]
   1588a:	fb01 3303 	mla	r3, r1, r3, r3
   1588e:	e7db      	b.n	15848 <adc_nrfx_read+0x130>
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
   15890:	46a4      	mov	ip, r4
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   15892:	68a1      	ldr	r1, [r4, #8]
   15894:	4b25      	ldr	r3, [pc, #148]	; (1592c <adc_nrfx_read+0x214>)
   15896:	4d30      	ldr	r5, [pc, #192]	; (15958 <adc_nrfx_read+0x240>)
   15898:	f8c3 162c 	str.w	r1, [r3, #1580]	; 0x62c
   1589c:	f105 0674 	add.w	r6, r5, #116	; 0x74
    p_reg->RESULT.MAXCNT = size;
   158a0:	f8c3 2630 	str.w	r2, [r3, #1584]	; 0x630
   158a4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   158a8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   158aa:	f8dc 3000 	ldr.w	r3, [ip]
   158ae:	46ac      	mov	ip, r5
   158b0:	6033      	str	r3, [r6, #0]
	ctx->status = 0;
   158b2:	2600      	movs	r6, #0
   158b4:	672e      	str	r6, [r5, #112]	; 0x70

	if (sequence->options) {
   158b6:	6823      	ldr	r3, [r4, #0]
   158b8:	b36b      	cbz	r3, 15916 <adc_nrfx_read+0x1fe>
		ctx->options = *sequence->options;
   158ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   158bc:	f105 0488 	add.w	r4, r5, #136	; 0x88
   158c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
   158c4:	676c      	str	r4, [r5, #116]	; 0x74
		ctx->sampling_index = 0U;
   158c6:	f8a5 6098 	strh.w	r6, [r5, #152]	; 0x98

		if (ctx->options.interval_us != 0U) {
   158ca:	b320      	cbz	r0, 15916 <adc_nrfx_read+0x1fe>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   158cc:	e8dc 3fef 	ldaex	r3, [ip]
   158d0:	e8cc 6fe2 	stlex	r2, r6, [ip]
   158d4:	2a00      	cmp	r2, #0
   158d6:	d1f9      	bne.n	158cc <adc_nrfx_read+0x1b4>
   158d8:	4920      	ldr	r1, [pc, #128]	; (1595c <adc_nrfx_read+0x244>)
   158da:	f44f 4400 	mov.w	r4, #32768	; 0x8000
   158de:	468c      	mov	ip, r1
   158e0:	4631      	mov	r1, r6
   158e2:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
   158e6:	2300      	movs	r3, #0
   158e8:	fbe0 c104 	umlal	ip, r1, r0, r4
   158ec:	4a1c      	ldr	r2, [pc, #112]	; (15960 <adc_nrfx_read+0x248>)
   158ee:	4660      	mov	r0, ip
   158f0:	f7f3 f8e2 	bl	8ab8 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
   158f4:	2200      	movs	r2, #0
   158f6:	e9cd 0100 	strd	r0, r1, [sp]
   158fa:	2300      	movs	r3, #0
   158fc:	f105 0008 	add.w	r0, r5, #8
   15900:	f004 f914 	bl	19b2c <z_impl_k_timer_start>
	return z_impl_k_sem_take(sem, timeout);
   15904:	f04f 32ff 	mov.w	r2, #4294967295
   15908:	f04f 33ff 	mov.w	r3, #4294967295
   1590c:	4815      	ldr	r0, [pc, #84]	; (15964 <adc_nrfx_read+0x24c>)
   1590e:	f003 f9b7 	bl	18c80 <z_impl_k_sem_take>
	return ctx->status;
   15912:	6f2c      	ldr	r4, [r5, #112]	; 0x70
	return error;
   15914:	e73e      	b.n	15794 <adc_nrfx_read+0x7c>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
   15916:	4810      	ldr	r0, [pc, #64]	; (15958 <adc_nrfx_read+0x240>)
   15918:	f7ff fe5c 	bl	155d4 <adc_context_start_sampling>
   1591c:	e7f2      	b.n	15904 <adc_nrfx_read+0x1ec>
   1591e:	bf00      	nop
   15920:	200081a0 	.word	0x200081a0
   15924:	00023725 	.word	0x00023725
   15928:	0002385d 	.word	0x0002385d
   1592c:	4000e000 	.word	0x4000e000
   15930:	20008200 	.word	0x20008200
   15934:	00023747 	.word	0x00023747
   15938:	0001fc24 	.word	0x0001fc24
   1593c:	0002378e 	.word	0x0002378e
   15940:	0002383d 	.word	0x0002383d
   15944:	00023765 	.word	0x00023765
   15948:	0002384e 	.word	0x0002384e
   1594c:	000237eb 	.word	0x000237eb
   15950:	0002382b 	.word	0x0002382b
   15954:	000237c4 	.word	0x000237c4
   15958:	20008160 	.word	0x20008160
   1595c:	000f423f 	.word	0x000f423f
   15960:	000f4240 	.word	0x000f4240
   15964:	200081b8 	.word	0x200081b8

00015968 <init_saadc>:
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
   15968:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1596a:	2400      	movs	r4, #0
   1596c:	4b0d      	ldr	r3, [pc, #52]	; (159a4 <init_saadc+0x3c>)
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
   1596e:	200e      	movs	r0, #14
   15970:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   15974:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   15978:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
   1597c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
   15980:	2212      	movs	r2, #18
   15982:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   15986:	f7f7 f859 	bl	ca3c <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1598a:	4622      	mov	r2, r4
   1598c:	2101      	movs	r1, #1
   1598e:	200e      	movs	r0, #14
   15990:	f7f7 f884 	bl	ca9c <z_arm_irq_priority_set>
/**
 * @internal
 */
static inline unsigned int z_impl_k_sem_count_get(struct k_sem *sem)
{
	return sem->count;
   15994:	4804      	ldr	r0, [pc, #16]	; (159a8 <init_saadc+0x40>)
	if (!k_sem_count_get(&ctx->lock)) {
   15996:	6c83      	ldr	r3, [r0, #72]	; 0x48
   15998:	b913      	cbnz	r3, 159a0 <init_saadc+0x38>
	z_impl_k_sem_give(sem);
   1599a:	3040      	adds	r0, #64	; 0x40
   1599c:	f003 f94a 	bl	18c34 <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
   159a0:	2000      	movs	r0, #0
   159a2:	bd10      	pop	{r4, pc}
   159a4:	4000e000 	.word	0x4000e000
   159a8:	20008160 	.word	0x20008160

000159ac <saadc_irq_handler>:
{
   159ac:	b538      	push	{r3, r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   159ae:	4b2d      	ldr	r3, [pc, #180]	; (15a64 <saadc_irq_handler+0xb8>)
   159b0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
   159b4:	2a00      	cmp	r2, #0
   159b6:	d048      	beq.n	15a4a <saadc_irq_handler+0x9e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   159b8:	2200      	movs	r2, #0
   159ba:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   159be:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   159c2:	2101      	movs	r1, #1
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
   159c4:	4c28      	ldr	r4, [pc, #160]	; (15a68 <saadc_irq_handler+0xbc>)
   159c6:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
   159c8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   159cc:	6f63      	ldr	r3, [r4, #116]	; 0x74
   159ce:	4625      	mov	r5, r4
   159d0:	b3b3      	cbz	r3, 15a40 <saadc_irq_handler+0x94>
		adc_sequence_callback callback = ctx->options.callback;
   159d2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
			action = callback(dev,
   159d6:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
		if (callback) {
   159da:	b133      	cbz	r3, 159ea <saadc_irq_handler+0x3e>
			action = callback(dev,
   159dc:	f104 0174 	add.w	r1, r4, #116	; 0x74
   159e0:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
   159e2:	2801      	cmp	r0, #1
   159e4:	d014      	beq.n	15a10 <saadc_irq_handler+0x64>
   159e6:	2802      	cmp	r0, #2
   159e8:	d024      	beq.n	15a34 <saadc_irq_handler+0x88>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
   159ea:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
   159ee:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
   159f2:	429a      	cmp	r2, r3
   159f4:	d91e      	bls.n	15a34 <saadc_irq_handler+0x88>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
   159f6:	3301      	adds	r3, #1
   159f8:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
   159fc:	4b19      	ldr	r3, [pc, #100]	; (15a64 <saadc_irq_handler+0xb8>)
   159fe:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
   15a02:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
   15a06:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
   15a08:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   15a0c:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
   15a10:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   15a14:	b923      	cbnz	r3, 15a20 <saadc_irq_handler+0x74>
}
   15a16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				adc_context_start_sampling(ctx);
   15a1a:	4813      	ldr	r0, [pc, #76]	; (15a68 <saadc_irq_handler+0xbc>)
   15a1c:	f7ff bdda 	b.w	155d4 <adc_context_start_sampling>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   15a20:	e8d5 3fef 	ldaex	r3, [r5]
   15a24:	1e5a      	subs	r2, r3, #1
   15a26:	e8c5 2fe1 	stlex	r1, r2, [r5]
   15a2a:	2900      	cmp	r1, #0
   15a2c:	d1f8      	bne.n	15a20 <saadc_irq_handler+0x74>
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
   15a2e:	2b01      	cmp	r3, #1
   15a30:	dcf1      	bgt.n	15a16 <saadc_irq_handler+0x6a>
   15a32:	bd38      	pop	{r3, r4, r5, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
   15a34:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   15a38:	b113      	cbz	r3, 15a40 <saadc_irq_handler+0x94>
	z_impl_k_timer_stop(timer);
   15a3a:	480c      	ldr	r0, [pc, #48]	; (15a6c <saadc_irq_handler+0xc0>)
   15a3c:	f009 fce1 	bl	1f402 <z_impl_k_timer_stop>
   15a40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_sem_give(sem);
   15a44:	480a      	ldr	r0, [pc, #40]	; (15a70 <saadc_irq_handler+0xc4>)
   15a46:	f003 b8f5 	b.w	18c34 <z_impl_k_sem_give>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15a4a:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
   15a4e:	2900      	cmp	r1, #0
   15a50:	d0ef      	beq.n	15a32 <saadc_irq_handler+0x86>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15a52:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   15a56:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15a5a:	2201      	movs	r2, #1
   15a5c:	609a      	str	r2, [r3, #8]
   15a5e:	601a      	str	r2, [r3, #0]
   15a60:	605a      	str	r2, [r3, #4]
}
   15a62:	e7e6      	b.n	15a32 <saadc_irq_handler+0x86>
   15a64:	4000e000 	.word	0x4000e000
   15a68:	20008160 	.word	0x20008160
   15a6c:	20008168 	.word	0x20008168
   15a70:	200081b8 	.word	0x200081b8

00015a74 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   15a74:	4b08      	ldr	r3, [pc, #32]	; (15a98 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   15a76:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   15a78:	1ac3      	subs	r3, r0, r3
{
   15a7a:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   15a7c:	4907      	ldr	r1, [pc, #28]	; (15a9c <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   15a7e:	109b      	asrs	r3, r3, #2
{
   15a80:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   15a82:	4359      	muls	r1, r3
   15a84:	2240      	movs	r2, #64	; 0x40
   15a86:	4806      	ldr	r0, [pc, #24]	; (15aa0 <onoff_stop+0x2c>)
   15a88:	f008 f8d3 	bl	1dc32 <stop>
	notify(mgr, res);
   15a8c:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   15a8e:	4601      	mov	r1, r0
	notify(mgr, res);
   15a90:	4620      	mov	r0, r4
}
   15a92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   15a96:	4718      	bx	r3
   15a98:	20009d9c 	.word	0x20009d9c
   15a9c:	b6db6db7 	.word	0xb6db6db7
   15aa0:	0001f7f0 	.word	0x0001f7f0

00015aa4 <onoff_start>:
static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   15aa4:	2340      	movs	r3, #64	; 0x40
{
   15aa6:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   15aa8:	4c0b      	ldr	r4, [pc, #44]	; (15ad8 <onoff_start+0x34>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   15aaa:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
   15aac:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   15aae:	460b      	mov	r3, r1
{
   15ab0:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   15ab2:	490a      	ldr	r1, [pc, #40]	; (15adc <onoff_start+0x38>)
	size_t offset = (size_t)(mgr - data->mgr);
   15ab4:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   15ab6:	4361      	muls	r1, r4
{
   15ab8:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   15aba:	4a09      	ldr	r2, [pc, #36]	; (15ae0 <onoff_start+0x3c>)
   15abc:	4809      	ldr	r0, [pc, #36]	; (15ae4 <onoff_start+0x40>)
   15abe:	f008 f8e4 	bl	1dc8a <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   15ac2:	1e01      	subs	r1, r0, #0
   15ac4:	da05      	bge.n	15ad2 <onoff_start+0x2e>
		notify(mgr, err);
   15ac6:	4630      	mov	r0, r6
   15ac8:	462b      	mov	r3, r5
	}
}
   15aca:	b002      	add	sp, #8
   15acc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   15ad0:	4718      	bx	r3
}
   15ad2:	b002      	add	sp, #8
   15ad4:	bd70      	pop	{r4, r5, r6, pc}
   15ad6:	bf00      	nop
   15ad8:	20009d9c 	.word	0x20009d9c
   15adc:	b6db6db7 	.word	0xb6db6db7
   15ae0:	0001dcf5 	.word	0x0001dcf5
   15ae4:	0001f7f0 	.word	0x0001f7f0

00015ae8 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   15ae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   15aec:	2200      	movs	r2, #0
   15aee:	2101      	movs	r1, #1
{
   15af0:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   15af2:	2005      	movs	r0, #5
   15af4:	f7f6 ffd2 	bl	ca9c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   15af8:	4811      	ldr	r0, [pc, #68]	; (15b40 <clk_init+0x58>)
   15afa:	f001 fc93 	bl	17424 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   15afe:	4b11      	ldr	r3, [pc, #68]	; (15b44 <clk_init+0x5c>)
   15b00:	4298      	cmp	r0, r3
   15b02:	d119      	bne.n	15b38 <clk_init+0x50>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   15b04:	f001 fc9e 	bl	17444 <nrfx_clock_enable>
   15b08:	2400      	movs	r4, #0
	return &data->mgr[type];
   15b0a:	f04f 091c 	mov.w	r9, #28
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   15b0e:	270c      	movs	r7, #12
		err = onoff_manager_init(get_onoff_manager(dev, i),
   15b10:	f8df 8034 	ldr.w	r8, [pc, #52]	; 15b48 <clk_init+0x60>
	struct nrf_clock_control_data *data = dev->data;
   15b14:	6935      	ldr	r5, [r6, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   15b16:	4641      	mov	r1, r8
   15b18:	fb09 5004 	mla	r0, r9, r4, r5
   15b1c:	f004 fc28 	bl	1a370 <onoff_manager_init>
		if (err < 0) {
   15b20:	2800      	cmp	r0, #0
   15b22:	db07      	blt.n	15b34 <clk_init+0x4c>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   15b24:	2301      	movs	r3, #1
   15b26:	fb07 5504 	mla	r5, r7, r4, r5
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   15b2a:	441c      	add	r4, r3
   15b2c:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   15b2e:	67ab      	str	r3, [r5, #120]	; 0x78
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   15b30:	d1f0      	bne.n	15b14 <clk_init+0x2c>
	}

	return 0;
   15b32:	2000      	movs	r0, #0
}
   15b34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
   15b38:	f06f 0004 	mvn.w	r0, #4
   15b3c:	e7fa      	b.n	15b34 <clk_init+0x4c>
   15b3e:	bf00      	nop
   15b40:	00015b81 	.word	0x00015b81
   15b44:	0bad0000 	.word	0x0bad0000
   15b48:	000205b0 	.word	0x000205b0

00015b4c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   15b4c:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   15b4e:	230c      	movs	r3, #12
	sub_data->cb = NULL;
   15b50:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
   15b52:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   15b54:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   15b56:	4808      	ldr	r0, [pc, #32]	; (15b78 <clkstarted_handle.constprop.0+0x2c>)
   15b58:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   15b5a:	3378      	adds	r3, #120	; 0x78
   15b5c:	4418      	add	r0, r3
	void *user_data = sub_data->user_data;
   15b5e:	e9d4 561c 	ldrd	r5, r6, [r4, #112]	; 0x70
	sub_data->cb = NULL;
   15b62:	6722      	str	r2, [r4, #112]	; 0x70
	set_on_state(&sub_data->flags);
   15b64:	f008 f852 	bl	1dc0c <set_on_state>
	if (callback) {
   15b68:	b12d      	cbz	r5, 15b76 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   15b6a:	4632      	mov	r2, r6
   15b6c:	462b      	mov	r3, r5
}
   15b6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   15b72:	4802      	ldr	r0, [pc, #8]	; (15b7c <clkstarted_handle.constprop.0+0x30>)
   15b74:	4718      	bx	r3
}
   15b76:	bd70      	pop	{r4, r5, r6, pc}
   15b78:	20009d9c 	.word	0x20009d9c
   15b7c:	0001f7f0 	.word	0x0001f7f0

00015b80 <clock_event_handler>:
	switch (event) {
   15b80:	2805      	cmp	r0, #5
   15b82:	d811      	bhi.n	15ba8 <clock_event_handler+0x28>
   15b84:	e8df f000 	tbb	[pc, r0]
   15b88:	10100e03 	.word	0x10100e03
   15b8c:	0a0c      	.short	0x0a0c
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   15b8e:	4b07      	ldr	r3, [pc, #28]	; (15bac <clock_event_handler+0x2c>)
   15b90:	6f98      	ldr	r0, [r3, #120]	; 0x78
   15b92:	f010 0007 	ands.w	r0, r0, #7
   15b96:	d107      	bne.n	15ba8 <clock_event_handler+0x28>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   15b98:	f7ff bfd8 	b.w	15b4c <clkstarted_handle.constprop.0>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
   15b9c:	2002      	movs	r0, #2
   15b9e:	e7fb      	b.n	15b98 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
   15ba0:	2003      	movs	r0, #3
   15ba2:	e7f9      	b.n	15b98 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   15ba4:	2001      	movs	r0, #1
   15ba6:	e7f7      	b.n	15b98 <clock_event_handler+0x18>
}
   15ba8:	4770      	bx	lr
   15baa:	bf00      	nop
   15bac:	20009d9c 	.word	0x20009d9c

00015bb0 <generic_hfclk_start>:
{
   15bb0:	b508      	push	{r3, lr}
	__asm__ volatile(
   15bb2:	f04f 0320 	mov.w	r3, #32
   15bb6:	f3ef 8111 	mrs	r1, BASEPRI
   15bba:	f383 8812 	msr	BASEPRI_MAX, r3
   15bbe:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   15bc2:	4a11      	ldr	r2, [pc, #68]	; (15c08 <generic_hfclk_start+0x58>)
   15bc4:	6813      	ldr	r3, [r2, #0]
   15bc6:	f043 0002 	orr.w	r0, r3, #2
   15bca:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   15bcc:	07da      	lsls	r2, r3, #31
   15bce:	d408      	bmi.n	15be2 <generic_hfclk_start+0x32>
	__asm__ volatile(
   15bd0:	f381 8811 	msr	BASEPRI, r1
   15bd4:	f3bf 8f6f 	isb	sy
}
   15bd8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   15bdc:	2001      	movs	r0, #1
   15bde:	f001 bc45 	b.w	1746c <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   15be2:	4b0a      	ldr	r3, [pc, #40]	; (15c0c <generic_hfclk_start+0x5c>)
   15be4:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   15be8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   15bec:	07d3      	lsls	r3, r2, #31
   15bee:	d5ef      	bpl.n	15bd0 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   15bf0:	4807      	ldr	r0, [pc, #28]	; (15c10 <generic_hfclk_start+0x60>)
   15bf2:	f008 f80b 	bl	1dc0c <set_on_state>
   15bf6:	f381 8811 	msr	BASEPRI, r1
   15bfa:	f3bf 8f6f 	isb	sy
}
   15bfe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   15c02:	2000      	movs	r0, #0
   15c04:	f7ff bfa2 	b.w	15b4c <clkstarted_handle.constprop.0>
   15c08:	20009e3c 	.word	0x20009e3c
   15c0c:	40005000 	.word	0x40005000
   15c10:	20009e14 	.word	0x20009e14

00015c14 <api_blocking_start>:
{
   15c14:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   15c16:	2200      	movs	r2, #0
   15c18:	2301      	movs	r3, #1
   15c1a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   15c1e:	ab04      	add	r3, sp, #16
   15c20:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   15c24:	4a09      	ldr	r2, [pc, #36]	; (15c4c <api_blocking_start+0x38>)
   15c26:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   15c28:	f8cd d000 	str.w	sp, [sp]
   15c2c:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   15c30:	f008 f859 	bl	1dce6 <api_start>
	if (err < 0) {
   15c34:	2800      	cmp	r0, #0
   15c36:	db05      	blt.n	15c44 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   15c38:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   15c3c:	2300      	movs	r3, #0
   15c3e:	4668      	mov	r0, sp
   15c40:	f003 f81e 	bl	18c80 <z_impl_k_sem_take>
}
   15c44:	b007      	add	sp, #28
   15c46:	f85d fb04 	ldr.w	pc, [sp], #4
   15c4a:	bf00      	nop
   15c4c:	0001dd2b 	.word	0x0001dd2b

00015c50 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15c50:	4b07      	ldr	r3, [pc, #28]	; (15c70 <generic_hfclk_stop+0x20>)
   15c52:	e8d3 2fef 	ldaex	r2, [r3]
   15c56:	f022 0102 	bic.w	r1, r2, #2
   15c5a:	e8c3 1fe0 	stlex	r0, r1, [r3]
   15c5e:	2800      	cmp	r0, #0
   15c60:	d1f7      	bne.n	15c52 <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   15c62:	07d3      	lsls	r3, r2, #31
   15c64:	d402      	bmi.n	15c6c <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   15c66:	2001      	movs	r0, #1
   15c68:	f008 b9d4 	b.w	1e014 <nrfx_clock_stop>
}
   15c6c:	4770      	bx	lr
   15c6e:	bf00      	nop
   15c70:	20009e3c 	.word	0x20009e3c

00015c74 <z_nrf_clock_control_lf_on>:
{
   15c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   15c78:	2201      	movs	r2, #1
   15c7a:	4607      	mov	r7, r0
   15c7c:	4935      	ldr	r1, [pc, #212]	; (15d54 <z_nrf_clock_control_lf_on+0xe0>)
   15c7e:	e8d1 3fef 	ldaex	r3, [r1]
   15c82:	e8c1 2fe0 	stlex	r0, r2, [r1]
   15c86:	2800      	cmp	r0, #0
   15c88:	d1f9      	bne.n	15c7e <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   15c8a:	b933      	cbnz	r3, 15c9a <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   15c8c:	4932      	ldr	r1, [pc, #200]	; (15d58 <z_nrf_clock_control_lf_on+0xe4>)
		err = onoff_request(mgr, &cli);
   15c8e:	4833      	ldr	r0, [pc, #204]	; (15d5c <z_nrf_clock_control_lf_on+0xe8>)
   15c90:	604b      	str	r3, [r1, #4]
   15c92:	60cb      	str	r3, [r1, #12]
   15c94:	608a      	str	r2, [r1, #8]
   15c96:	f004 fb7e 	bl	1a396 <onoff_request>
	switch (start_mode) {
   15c9a:	1e7b      	subs	r3, r7, #1
   15c9c:	2b01      	cmp	r3, #1
   15c9e:	d828      	bhi.n	15cf2 <z_nrf_clock_control_lf_on+0x7e>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   15ca0:	2f01      	cmp	r7, #1
   15ca2:	d106      	bne.n	15cb2 <z_nrf_clock_control_lf_on+0x3e>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   15ca4:	4b2e      	ldr	r3, [pc, #184]	; (15d60 <z_nrf_clock_control_lf_on+0xec>)
   15ca6:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   15caa:	f003 0303 	and.w	r3, r3, #3
   15cae:	2b02      	cmp	r3, #2
   15cb0:	d01f      	beq.n	15cf2 <z_nrf_clock_control_lf_on+0x7e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   15cb2:	f009 f809 	bl	1ecc8 <k_is_in_isr>
   15cb6:	4605      	mov	r5, r0
   15cb8:	b9e8      	cbnz	r0, 15cf6 <z_nrf_clock_control_lf_on+0x82>
	return !z_sys_post_kernel;
   15cba:	4b2a      	ldr	r3, [pc, #168]	; (15d64 <z_nrf_clock_control_lf_on+0xf0>)
   15cbc:	781b      	ldrb	r3, [r3, #0]
   15cbe:	b1d3      	cbz	r3, 15cf6 <z_nrf_clock_control_lf_on+0x82>
    p_reg->INTENCLR = mask;
   15cc0:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
   15cc2:	4606      	mov	r6, r0
   15cc4:	4b26      	ldr	r3, [pc, #152]	; (15d60 <z_nrf_clock_control_lf_on+0xec>)
   15cc6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   15cca:	4c25      	ldr	r4, [pc, #148]	; (15d60 <z_nrf_clock_control_lf_on+0xec>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   15ccc:	f8df 8098 	ldr.w	r8, [pc, #152]	; 15d68 <z_nrf_clock_control_lf_on+0xf4>
   15cd0:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   15cd4:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   15cd8:	03d2      	lsls	r2, r2, #15
   15cda:	d516      	bpl.n	15d0a <z_nrf_clock_control_lf_on+0x96>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   15cdc:	f003 0303 	and.w	r3, r3, #3
   15ce0:	2b02      	cmp	r3, #2
   15ce2:	d001      	beq.n	15ce8 <z_nrf_clock_control_lf_on+0x74>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   15ce4:	2f01      	cmp	r7, #1
   15ce6:	d110      	bne.n	15d0a <z_nrf_clock_control_lf_on+0x96>
	if (isr_mode) {
   15ce8:	b375      	cbz	r5, 15d48 <z_nrf_clock_control_lf_on+0xd4>
   15cea:	f386 8811 	msr	BASEPRI, r6
   15cee:	f3bf 8f6f 	isb	sy
}
   15cf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   15cf6:	f04f 0320 	mov.w	r3, #32
   15cfa:	f3ef 8611 	mrs	r6, BASEPRI
   15cfe:	f383 8812 	msr	BASEPRI_MAX, r3
   15d02:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   15d06:	2501      	movs	r5, #1
   15d08:	e7df      	b.n	15cca <z_nrf_clock_control_lf_on+0x56>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   15d0a:	b1c5      	cbz	r5, 15d3e <z_nrf_clock_control_lf_on+0xca>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   15d0c:	4630      	mov	r0, r6
   15d0e:	f7f6 fe1d 	bl	c94c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   15d12:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   15d16:	b2db      	uxtb	r3, r3
   15d18:	2b01      	cmp	r3, #1
   15d1a:	d1d9      	bne.n	15cd0 <z_nrf_clock_control_lf_on+0x5c>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   15d1c:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   15d20:	2a00      	cmp	r2, #0
   15d22:	d0d5      	beq.n	15cd0 <z_nrf_clock_control_lf_on+0x5c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15d24:	2200      	movs	r2, #0
   15d26:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   15d2a:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   15d2e:	2202      	movs	r2, #2
   15d30:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
   15d34:	2220      	movs	r2, #32
   15d36:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15d3a:	60a3      	str	r3, [r4, #8]
}
   15d3c:	e7c8      	b.n	15cd0 <z_nrf_clock_control_lf_on+0x5c>
	return z_impl_k_sleep(timeout);
   15d3e:	2100      	movs	r1, #0
   15d40:	2021      	movs	r0, #33	; 0x21
   15d42:	f003 fc9b 	bl	1967c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   15d46:	e7e4      	b.n	15d12 <z_nrf_clock_control_lf_on+0x9e>
    p_reg->INTENSET = mask;
   15d48:	2202      	movs	r2, #2
   15d4a:	4b05      	ldr	r3, [pc, #20]	; (15d60 <z_nrf_clock_control_lf_on+0xec>)
   15d4c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   15d50:	e7cf      	b.n	15cf2 <z_nrf_clock_control_lf_on+0x7e>
   15d52:	bf00      	nop
   15d54:	20009d98 	.word	0x20009d98
   15d58:	20009d88 	.word	0x20009d88
   15d5c:	20009db8 	.word	0x20009db8
   15d60:	40005000 	.word	0x40005000
   15d64:	2000a076 	.word	0x2000a076
   15d68:	e000e100 	.word	0xe000e100

00015d6c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   15d6c:	b508      	push	{r3, lr}
   15d6e:	4807      	ldr	r0, [pc, #28]	; (15d8c <uart_console_init+0x20>)
   15d70:	f008 feea 	bl	1eb48 <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
   15d74:	b138      	cbz	r0, 15d86 <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
   15d76:	4806      	ldr	r0, [pc, #24]	; (15d90 <uart_console_init+0x24>)
   15d78:	f7f7 fd60 	bl	d83c <__stdout_hook_install>
	__printk_hook_install(console_out);
   15d7c:	4804      	ldr	r0, [pc, #16]	; (15d90 <uart_console_init+0x24>)
   15d7e:	f7f4 f8f1 	bl	9f64 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   15d82:	2000      	movs	r0, #0
}
   15d84:	bd08      	pop	{r3, pc}
		return -ENODEV;
   15d86:	f06f 0012 	mvn.w	r0, #18
   15d8a:	e7fb      	b.n	15d84 <uart_console_init+0x18>
   15d8c:	0001f868 	.word	0x0001f868
   15d90:	00015d95 	.word	0x00015d95

00015d94 <console_out>:
	if ('\n' == c) {
   15d94:	280a      	cmp	r0, #10
{
   15d96:	b538      	push	{r3, r4, r5, lr}
   15d98:	4604      	mov	r4, r0
   15d9a:	4d07      	ldr	r5, [pc, #28]	; (15db8 <console_out+0x24>)
	if ('\n' == c) {
   15d9c:	d104      	bne.n	15da8 <console_out+0x14>
   15d9e:	68ab      	ldr	r3, [r5, #8]
   15da0:	210d      	movs	r1, #13
   15da2:	4628      	mov	r0, r5
   15da4:	685b      	ldr	r3, [r3, #4]
   15da6:	4798      	blx	r3
   15da8:	68ab      	ldr	r3, [r5, #8]
   15daa:	4803      	ldr	r0, [pc, #12]	; (15db8 <console_out+0x24>)
   15dac:	685b      	ldr	r3, [r3, #4]
   15dae:	b2e1      	uxtb	r1, r4
   15db0:	4798      	blx	r3
}
   15db2:	4620      	mov	r0, r4
   15db4:	bd38      	pop	{r3, r4, r5, pc}
   15db6:	bf00      	nop
   15db8:	0001f868 	.word	0x0001f868

00015dbc <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   15dbc:	b530      	push	{r4, r5, lr}
	return port->config;
   15dbe:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   15dc0:	f001 041f 	and.w	r4, r1, #31
   15dc4:	7b05      	ldrb	r5, [r0, #12]
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
   15dc6:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   15dca:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   15dcc:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   15dd0:	d105      	bne.n	15dde <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   15dd2:	4620      	mov	r0, r4
   15dd4:	f001 fe52 	bl	17a7c <nrfx_gpiote_trigger_disable>

		return 0;
   15dd8:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
   15dda:	b005      	add	sp, #20
   15ddc:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   15dde:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   15de0:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   15de4:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   15de8:	d114      	bne.n	15e14 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   15dea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   15dee:	bf0c      	ite	eq
   15df0:	2304      	moveq	r3, #4
   15df2:	2305      	movne	r3, #5
   15df4:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   15df8:	2300      	movs	r3, #0
   15dfa:	4620      	mov	r0, r4
   15dfc:	4619      	mov	r1, r3
   15dfe:	aa02      	add	r2, sp, #8
   15e00:	f001 fc7a 	bl	176f8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   15e04:	4b1f      	ldr	r3, [pc, #124]	; (15e84 <gpio_nrfx_pin_interrupt_configure+0xc8>)
   15e06:	4298      	cmp	r0, r3
   15e08:	d138      	bne.n	15e7c <gpio_nrfx_pin_interrupt_configure+0xc0>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   15e0a:	2101      	movs	r1, #1
   15e0c:	4620      	mov	r0, r4
   15e0e:	f001 fdef 	bl	179f0 <nrfx_gpiote_trigger_enable>
	return 0;
   15e12:	e7e1      	b.n	15dd8 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   15e14:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   15e18:	d025      	beq.n	15e66 <gpio_nrfx_pin_interrupt_configure+0xaa>
   15e1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   15e1e:	bf14      	ite	ne
   15e20:	2301      	movne	r3, #1
   15e22:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   15e24:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   15e28:	6883      	ldr	r3, [r0, #8]
   15e2a:	40cb      	lsrs	r3, r1
   15e2c:	07d9      	lsls	r1, r3, #31
   15e2e:	d4e3      	bmi.n	15df8 <gpio_nrfx_pin_interrupt_configure+0x3c>
   15e30:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   15e34:	d1e0      	bne.n	15df8 <gpio_nrfx_pin_interrupt_configure+0x3c>
        /* FALLTHROUGH */
        case 0: return NRF_P0;
#endif
#if defined(P1_FEATURE_PINS_PRESENT)
        /* FALLTHROUGH */
        case 1: return NRF_P1;
   15e36:	4a14      	ldr	r2, [pc, #80]	; (15e88 <gpio_nrfx_pin_interrupt_configure+0xcc>)
   15e38:	4814      	ldr	r0, [pc, #80]	; (15e8c <gpio_nrfx_pin_interrupt_configure+0xd0>)
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   15e3a:	0961      	lsrs	r1, r4, #5
        case 1: return NRF_P1;
   15e3c:	2901      	cmp	r1, #1
   15e3e:	bf08      	it	eq
   15e40:	4602      	moveq	r2, r0
    *p_pin = pin_number & 0x1F;
   15e42:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   15e46:	3380      	adds	r3, #128	; 0x80
   15e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   15e4c:	07db      	lsls	r3, r3, #31
   15e4e:	d4d3      	bmi.n	15df8 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   15e50:	f10d 0507 	add.w	r5, sp, #7
   15e54:	4629      	mov	r1, r5
   15e56:	4620      	mov	r0, r4
   15e58:	f001 fd76 	bl	17948 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   15e5c:	4b0c      	ldr	r3, [pc, #48]	; (15e90 <gpio_nrfx_pin_interrupt_configure+0xd4>)
   15e5e:	4298      	cmp	r0, r3
   15e60:	d003      	beq.n	15e6a <gpio_nrfx_pin_interrupt_configure+0xae>
		trigger_config.p_in_channel = &ch;
   15e62:	9503      	str	r5, [sp, #12]
   15e64:	e7c8      	b.n	15df8 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   15e66:	2303      	movs	r3, #3
   15e68:	e7dc      	b.n	15e24 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
   15e6a:	4628      	mov	r0, r5
   15e6c:	f001 fdba 	bl	179e4 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   15e70:	4b04      	ldr	r3, [pc, #16]	; (15e84 <gpio_nrfx_pin_interrupt_configure+0xc8>)
   15e72:	4298      	cmp	r0, r3
   15e74:	d0f5      	beq.n	15e62 <gpio_nrfx_pin_interrupt_configure+0xa6>
				return -ENOMEM;
   15e76:	f06f 000b 	mvn.w	r0, #11
   15e7a:	e7ae      	b.n	15dda <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   15e7c:	f06f 0015 	mvn.w	r0, #21
   15e80:	e7ab      	b.n	15dda <gpio_nrfx_pin_interrupt_configure+0x1e>
   15e82:	bf00      	nop
   15e84:	0bad0000 	.word	0x0bad0000
   15e88:	40842500 	.word	0x40842500
   15e8c:	40842800 	.word	0x40842800
   15e90:	0bad0004 	.word	0x0bad0004

00015e94 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   15e94:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   15e96:	f001 fd95 	bl	179c4 <nrfx_gpiote_is_init>
   15e9a:	4604      	mov	r4, r0
   15e9c:	b968      	cbnz	r0, 15eba <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   15e9e:	f001 fd69 	bl	17974 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   15ea2:	4b08      	ldr	r3, [pc, #32]	; (15ec4 <gpio_nrfx_init+0x30>)
   15ea4:	4298      	cmp	r0, r3
   15ea6:	d10a      	bne.n	15ebe <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   15ea8:	4621      	mov	r1, r4
   15eaa:	4807      	ldr	r0, [pc, #28]	; (15ec8 <gpio_nrfx_init+0x34>)
   15eac:	f001 fd46 	bl	1793c <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   15eb0:	4622      	mov	r2, r4
   15eb2:	2105      	movs	r1, #5
   15eb4:	202f      	movs	r0, #47	; 0x2f
   15eb6:	f7f6 fdf1 	bl	ca9c <z_arm_irq_priority_set>
		return 0;
   15eba:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   15ebc:	bd10      	pop	{r4, pc}
		return -EIO;
   15ebe:	f06f 0004 	mvn.w	r0, #4
   15ec2:	e7fb      	b.n	15ebc <gpio_nrfx_init+0x28>
   15ec4:	0bad0000 	.word	0x0bad0000
   15ec8:	00015ecd 	.word	0x00015ecd

00015ecc <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   15ecc:	0942      	lsrs	r2, r0, #5
{
   15ece:	4603      	mov	r3, r0
   15ed0:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   15ed2:	d002      	beq.n	15eda <nrfx_gpio_handler+0xe>
   15ed4:	2a01      	cmp	r2, #1
   15ed6:	d017      	beq.n	15f08 <nrfx_gpio_handler+0x3c>
}
   15ed8:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   15eda:	4e0d      	ldr	r6, [pc, #52]	; (15f10 <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
   15edc:	6932      	ldr	r2, [r6, #16]
   15ede:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   15ee0:	2900      	cmp	r1, #0
   15ee2:	d0f9      	beq.n	15ed8 <nrfx_gpio_handler+0xc>
   15ee4:	2501      	movs	r5, #1
    *p_pin = pin_number & 0x1F;
   15ee6:	f003 031f 	and.w	r3, r3, #31
   15eea:	680c      	ldr	r4, [r1, #0]
   15eec:	409d      	lsls	r5, r3
   15eee:	2900      	cmp	r1, #0
   15ef0:	d0f2      	beq.n	15ed8 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
   15ef2:	688a      	ldr	r2, [r1, #8]
   15ef4:	402a      	ands	r2, r5
   15ef6:	d002      	beq.n	15efe <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   15ef8:	4630      	mov	r0, r6
   15efa:	684b      	ldr	r3, [r1, #4]
   15efc:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   15efe:	b12c      	cbz	r4, 15f0c <nrfx_gpio_handler+0x40>
   15f00:	6823      	ldr	r3, [r4, #0]
   15f02:	4621      	mov	r1, r4
   15f04:	461c      	mov	r4, r3
   15f06:	e7f2      	b.n	15eee <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   15f08:	4e02      	ldr	r6, [pc, #8]	; (15f14 <nrfx_gpio_handler+0x48>)
   15f0a:	e7e7      	b.n	15edc <nrfx_gpio_handler+0x10>
   15f0c:	4623      	mov	r3, r4
   15f0e:	e7f8      	b.n	15f02 <nrfx_gpio_handler+0x36>
   15f10:	0001f820 	.word	0x0001f820
   15f14:	0001f808 	.word	0x0001f808

00015f18 <gpio_nrfx_pin_configure>:
{
   15f18:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   15f1c:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   15f1e:	f001 051f 	and.w	r5, r1, #31
   15f22:	7b3b      	ldrb	r3, [r7, #12]
{
   15f24:	4614      	mov	r4, r2
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   15f26:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   15f2a:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   15f2c:	4628      	mov	r0, r5
   15f2e:	f10d 0103 	add.w	r1, sp, #3
   15f32:	f001 fd09 	bl	17948 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   15f36:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   15f3a:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   15f3c:	d10b      	bne.n	15f56 <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   15f3e:	4628      	mov	r0, r5
   15f40:	f001 fdc4 	bl	17acc <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   15f44:	4b3c      	ldr	r3, [pc, #240]	; (16038 <gpio_nrfx_pin_configure+0x120>)
   15f46:	4598      	cmp	r8, r3
   15f48:	d103      	bne.n	15f52 <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
   15f4a:	f89d 0003 	ldrb.w	r0, [sp, #3]
   15f4e:	f001 fd43 	bl	179d8 <nrfx_gpiote_channel_free>
		return 0;
   15f52:	2000      	movs	r0, #0
   15f54:	e00c      	b.n	15f70 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
   15f56:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   15f58:	4628      	mov	r0, r5
   15f5a:	4619      	mov	r1, r3
   15f5c:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
   15f5e:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   15f62:	f001 fbc9 	bl	176f8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   15f66:	4b34      	ldr	r3, [pc, #208]	; (16038 <gpio_nrfx_pin_configure+0x120>)
   15f68:	4298      	cmp	r0, r3
   15f6a:	d004      	beq.n	15f76 <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
   15f6c:	f06f 0015 	mvn.w	r0, #21
}
   15f70:	b004      	add	sp, #16
   15f72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   15f76:	4580      	cmp	r8, r0
   15f78:	d103      	bne.n	15f82 <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
   15f7a:	f89d 0003 	ldrb.w	r0, [sp, #3]
   15f7e:	f001 fd2b 	bl	179d8 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   15f82:	03a3      	lsls	r3, r4, #14
   15f84:	d549      	bpl.n	1601a <gpio_nrfx_pin_configure+0x102>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   15f86:	f240 3306 	movw	r3, #774	; 0x306
   15f8a:	4023      	ands	r3, r4
   15f8c:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   15f90:	d019      	beq.n	15fc6 <gpio_nrfx_pin_configure+0xae>
   15f92:	d80c      	bhi.n	15fae <gpio_nrfx_pin_configure+0x96>
   15f94:	2b06      	cmp	r3, #6
   15f96:	d017      	beq.n	15fc8 <gpio_nrfx_pin_configure+0xb0>
   15f98:	d804      	bhi.n	15fa4 <gpio_nrfx_pin_configure+0x8c>
   15f9a:	b1ab      	cbz	r3, 15fc8 <gpio_nrfx_pin_configure+0xb0>
   15f9c:	2b02      	cmp	r3, #2
   15f9e:	d1e5      	bne.n	15f6c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
   15fa0:	2304      	movs	r3, #4
   15fa2:	e011      	b.n	15fc8 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   15fa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   15fa8:	d1e0      	bne.n	15f6c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
   15faa:	2301      	movs	r3, #1
   15fac:	e00c      	b.n	15fc8 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   15fae:	f240 2202 	movw	r2, #514	; 0x202
   15fb2:	4293      	cmp	r3, r2
   15fb4:	d026      	beq.n	16004 <gpio_nrfx_pin_configure+0xec>
   15fb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   15fba:	d025      	beq.n	16008 <gpio_nrfx_pin_configure+0xf0>
   15fbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   15fc0:	d1d4      	bne.n	15f6c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
   15fc2:	2302      	movs	r3, #2
   15fc4:	e000      	b.n	15fc8 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
   15fc6:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   15fc8:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   15fcc:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   15fd0:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   15fd4:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   15fd6:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
   15fda:	bf4c      	ite	mi
   15fdc:	2303      	movmi	r3, #3
	} else if (flags & GPIO_PULL_DOWN) {
   15fde:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   15fe2:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   15fe4:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   15fe8:	d510      	bpl.n	1600c <gpio_nrfx_pin_configure+0xf4>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   15fea:	2301      	movs	r3, #1
   15fec:	687a      	ldr	r2, [r7, #4]
   15fee:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   15ff0:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   15ff2:	2200      	movs	r2, #0
   15ff4:	4628      	mov	r0, r5
   15ff6:	a901      	add	r1, sp, #4
   15ff8:	f001 fc2c 	bl	17854 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   15ffc:	4b0e      	ldr	r3, [pc, #56]	; (16038 <gpio_nrfx_pin_configure+0x120>)
   15ffe:	4298      	cmp	r0, r3
   16000:	d0a7      	beq.n	15f52 <gpio_nrfx_pin_configure+0x3a>
   16002:	e7b3      	b.n	15f6c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
   16004:	2305      	movs	r3, #5
   16006:	e7df      	b.n	15fc8 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   16008:	2303      	movs	r3, #3
   1600a:	e7dd      	b.n	15fc8 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1600c:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1600e:	bf41      	itttt	mi
   16010:	2301      	movmi	r3, #1
   16012:	687a      	ldrmi	r2, [r7, #4]
   16014:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
   16016:	60d3      	strmi	r3, [r2, #12]
}
   16018:	e7eb      	b.n	15ff2 <gpio_nrfx_pin_configure+0xda>
	if (flags & GPIO_PULL_UP) {
   1601a:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1601c:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   16020:	bf4c      	ite	mi
   16022:	2403      	movmi	r4, #3
	} else if (flags & GPIO_PULL_DOWN) {
   16024:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   16028:	461a      	mov	r2, r3
   1602a:	4628      	mov	r0, r5
   1602c:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
   1602e:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   16032:	f001 fb61 	bl	176f8 <nrfx_gpiote_input_configure>
   16036:	e7e1      	b.n	15ffc <gpio_nrfx_pin_configure+0xe4>
   16038:	0bad0000 	.word	0x0bad0000

0001603c <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   1603c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   1603e:	794b      	ldrb	r3, [r1, #5]
   16040:	2b01      	cmp	r3, #1
   16042:	d029      	beq.n	16098 <uarte_nrfx_configure+0x5c>
   16044:	2b03      	cmp	r3, #3
   16046:	d124      	bne.n	16092 <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   16048:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1604a:	798b      	ldrb	r3, [r1, #6]
   1604c:	2b03      	cmp	r3, #3
   1604e:	d120      	bne.n	16092 <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   16050:	79ce      	ldrb	r6, [r1, #7]
   16052:	b10e      	cbz	r6, 16058 <uarte_nrfx_configure+0x1c>
   16054:	2e01      	cmp	r6, #1
   16056:	d11c      	bne.n	16092 <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   16058:	790a      	ldrb	r2, [r1, #4]
   1605a:	2a01      	cmp	r2, #1
   1605c:	d01e      	beq.n	1609c <uarte_nrfx_configure+0x60>
   1605e:	2a02      	cmp	r2, #2
   16060:	d020      	beq.n	160a4 <uarte_nrfx_configure+0x68>
   16062:	b9b2      	cbnz	r2, 16092 <uarte_nrfx_configure+0x56>
   16064:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   16066:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   16068:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   1606a:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1606e:	f8d5 c000 	ldr.w	ip, [r5]
	switch (baudrate) {
   16072:	d06e      	beq.n	16152 <uarte_nrfx_configure+0x116>
   16074:	d833      	bhi.n	160de <uarte_nrfx_configure+0xa2>
   16076:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1607a:	d06d      	beq.n	16158 <uarte_nrfx_configure+0x11c>
   1607c:	d81c      	bhi.n	160b8 <uarte_nrfx_configure+0x7c>
   1607e:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   16082:	d06b      	beq.n	1615c <uarte_nrfx_configure+0x120>
   16084:	d810      	bhi.n	160a8 <uarte_nrfx_configure+0x6c>
   16086:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1608a:	d06a      	beq.n	16162 <uarte_nrfx_configure+0x126>
   1608c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   16090:	d06a      	beq.n	16168 <uarte_nrfx_configure+0x12c>
		return -ENOTSUP;
   16092:	f06f 0085 	mvn.w	r0, #133	; 0x85
   16096:	e05b      	b.n	16150 <uarte_nrfx_configure+0x114>
	switch (cfg->stop_bits) {
   16098:	2700      	movs	r7, #0
   1609a:	e7d6      	b.n	1604a <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
   1609c:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   160a0:	220e      	movs	r2, #14
   160a2:	e7e0      	b.n	16066 <uarte_nrfx_configure+0x2a>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
   160a4:	2400      	movs	r4, #0
   160a6:	e7fb      	b.n	160a0 <uarte_nrfx_configure+0x64>
	switch (baudrate) {
   160a8:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   160ac:	d05f      	beq.n	1616e <uarte_nrfx_configure+0x132>
   160ae:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   160b2:	d1ee      	bne.n	16092 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   160b4:	4b38      	ldr	r3, [pc, #224]	; (16198 <uarte_nrfx_configure+0x15c>)
   160b6:	e03c      	b.n	16132 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   160b8:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   160bc:	d05a      	beq.n	16174 <uarte_nrfx_configure+0x138>
   160be:	d807      	bhi.n	160d0 <uarte_nrfx_configure+0x94>
   160c0:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   160c4:	d058      	beq.n	16178 <uarte_nrfx_configure+0x13c>
   160c6:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   160ca:	d1e2      	bne.n	16092 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   160cc:	4b33      	ldr	r3, [pc, #204]	; (1619c <uarte_nrfx_configure+0x160>)
   160ce:	e030      	b.n	16132 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   160d0:	f647 2512 	movw	r5, #31250	; 0x7a12
   160d4:	42ab      	cmp	r3, r5
   160d6:	d1dc      	bne.n	16092 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   160d8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   160dc:	e029      	b.n	16132 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   160de:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   160e2:	d04b      	beq.n	1617c <uarte_nrfx_configure+0x140>
   160e4:	d813      	bhi.n	1610e <uarte_nrfx_configure+0xd2>
   160e6:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   160ea:	d04a      	beq.n	16182 <uarte_nrfx_configure+0x146>
   160ec:	d809      	bhi.n	16102 <uarte_nrfx_configure+0xc6>
   160ee:	f64d 25c0 	movw	r5, #56000	; 0xdac0
   160f2:	42ab      	cmp	r3, r5
   160f4:	d047      	beq.n	16186 <uarte_nrfx_configure+0x14a>
   160f6:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   160fa:	d1ca      	bne.n	16092 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   160fc:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   16100:	e017      	b.n	16132 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   16102:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   16106:	d1c4      	bne.n	16092 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   16108:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1610c:	e011      	b.n	16132 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1610e:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   16112:	d03b      	beq.n	1618c <uarte_nrfx_configure+0x150>
   16114:	d808      	bhi.n	16128 <uarte_nrfx_configure+0xec>
   16116:	4d22      	ldr	r5, [pc, #136]	; (161a0 <uarte_nrfx_configure+0x164>)
   16118:	42ab      	cmp	r3, r5
   1611a:	d03a      	beq.n	16192 <uarte_nrfx_configure+0x156>
   1611c:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   16120:	d1b7      	bne.n	16092 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   16122:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   16126:	e004      	b.n	16132 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   16128:	4d1e      	ldr	r5, [pc, #120]	; (161a4 <uarte_nrfx_configure+0x168>)
   1612a:	42ab      	cmp	r3, r5
   1612c:	d1b1      	bne.n	16092 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1612e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   16132:	6905      	ldr	r5, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   16134:	f8cc 3524 	str.w	r3, [ip, #1316]	; 0x524
	return config->uarte_regs;
   16138:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->stop
   1613a:	433a      	orrs	r2, r7
   1613c:	681b      	ldr	r3, [r3, #0]
                    | (uint32_t)p_cfg->hwfc;
   1613e:	4334      	orrs	r4, r6
   16140:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   16142:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   16146:	1d2b      	adds	r3, r5, #4
   16148:	c903      	ldmia	r1, {r0, r1}
   1614a:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1614e:	2000      	movs	r0, #0
}
   16150:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   16152:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   16156:	e7ec      	b.n	16132 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   16158:	4b13      	ldr	r3, [pc, #76]	; (161a8 <uarte_nrfx_configure+0x16c>)
   1615a:	e7ea      	b.n	16132 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1615c:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   16160:	e7e7      	b.n	16132 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = 0x00014000;
   16162:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   16166:	e7e4      	b.n	16132 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   16168:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1616c:	e7e1      	b.n	16132 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1616e:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   16172:	e7de      	b.n	16132 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   16174:	4b0d      	ldr	r3, [pc, #52]	; (161ac <uarte_nrfx_configure+0x170>)
   16176:	e7dc      	b.n	16132 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   16178:	4b0d      	ldr	r3, [pc, #52]	; (161b0 <uarte_nrfx_configure+0x174>)
   1617a:	e7da      	b.n	16132 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1617c:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   16180:	e7d7      	b.n	16132 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   16182:	4b0c      	ldr	r3, [pc, #48]	; (161b4 <uarte_nrfx_configure+0x178>)
   16184:	e7d5      	b.n	16132 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   16186:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1618a:	e7d2      	b.n	16132 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1618c:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   16190:	e7cf      	b.n	16132 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   16192:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   16196:	e7cc      	b.n	16132 <uarte_nrfx_configure+0xf6>
   16198:	0013b000 	.word	0x0013b000
   1619c:	004ea000 	.word	0x004ea000
   161a0:	0003d090 	.word	0x0003d090
   161a4:	000f4240 	.word	0x000f4240
   161a8:	00275000 	.word	0x00275000
   161ac:	0075c000 	.word	0x0075c000
   161b0:	003af000 	.word	0x003af000
   161b4:	013a9000 	.word	0x013a9000

000161b8 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   161b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   161bc:	4681      	mov	r9, r0
   161be:	b082      	sub	sp, #8
   161c0:	2200      	movs	r2, #0
   161c2:	2101      	movs	r1, #1
   161c4:	2008      	movs	r0, #8
   161c6:	af00      	add	r7, sp, #0
   161c8:	f7f6 fc68 	bl	ca9c <z_arm_irq_priority_set>
   161cc:	2008      	movs	r0, #8
   161ce:	f7f6 fc35 	bl	ca3c <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   161d2:	2100      	movs	r1, #0
	const struct uarte_nrfx_config *config = dev->config;
   161d4:	f8d9 8004 	ldr.w	r8, [r9, #4]
	struct uarte_nrfx_data *data = dev->data;
   161d8:	f8d9 6010 	ldr.w	r6, [r9, #16]
	return config->uarte_regs;
   161dc:	f8d8 4000 	ldr.w	r4, [r8]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   161e0:	1d3a      	adds	r2, r7, #4
   161e2:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
   161e6:	f8c6 9000 	str.w	r9, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   161ea:	f8d8 a00c 	ldr.w	sl, [r8, #12]
   161ee:	4650      	mov	r0, sl
   161f0:	f007 fe98 	bl	1df24 <pinctrl_lookup_state>
	if (ret < 0) {
   161f4:	1e05      	subs	r5, r0, #0
   161f6:	db2c      	blt.n	16252 <uarte_0_init+0x9a>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   161f8:	687b      	ldr	r3, [r7, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   161fa:	f8da 2000 	ldr.w	r2, [sl]
   161fe:	7919      	ldrb	r1, [r3, #4]
   16200:	6818      	ldr	r0, [r3, #0]
   16202:	f000 fd5f 	bl	16cc4 <pinctrl_configure_pins>
	if (err < 0) {
   16206:	1e05      	subs	r5, r0, #0
   16208:	db23      	blt.n	16252 <uarte_0_init+0x9a>
	err = uarte_nrfx_configure(dev, &data->uart_config);
   1620a:	4648      	mov	r0, r9
   1620c:	1d31      	adds	r1, r6, #4
   1620e:	f7ff ff15 	bl	1603c <uarte_nrfx_configure>
	if (err) {
   16212:	4605      	mov	r5, r0
   16214:	b9e8      	cbnz	r0, 16252 <uarte_0_init+0x9a>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   16216:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1621a:	0799      	lsls	r1, r3, #30
   1621c:	d52b      	bpl.n	16276 <uarte_0_init+0xbe>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1621e:	f106 0018 	add.w	r0, r6, #24
   16222:	f001 f9d5 	bl	175d0 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   16226:	4b29      	ldr	r3, [pc, #164]	; (162cc <uarte_0_init+0x114>)
   16228:	4298      	cmp	r0, r3
   1622a:	d017      	beq.n	1625c <uarte_0_init+0xa4>
		LOG_ERR("Failed to allocate PPI Channel");
   1622c:	466c      	mov	r4, sp
   1622e:	b088      	sub	sp, #32
   16230:	466a      	mov	r2, sp
   16232:	4b27      	ldr	r3, [pc, #156]	; (162d0 <uarte_0_init+0x118>)
   16234:	6153      	str	r3, [r2, #20]
   16236:	4b27      	ldr	r3, [pc, #156]	; (162d4 <uarte_0_init+0x11c>)
   16238:	6193      	str	r3, [r2, #24]
   1623a:	2303      	movs	r3, #3
   1623c:	f842 3f10 	str.w	r3, [r2, #16]!
   16240:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16244:	462b      	mov	r3, r5
   16246:	4824      	ldr	r0, [pc, #144]	; (162d8 <uarte_0_init+0x120>)
   16248:	f7f5 f98a 	bl	b560 <z_impl_z_log_msg_static_create>
		return -EIO;
   1624c:	f06f 0504 	mvn.w	r5, #4
   16250:	46a5      	mov	sp, r4
UART_NRF_UARTE_DEVICE(0);
   16252:	4628      	mov	r0, r5
   16254:	3708      	adds	r7, #8
   16256:	46bd      	mov	sp, r7
   16258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1625c:	7e33      	ldrb	r3, [r6, #24]
   1625e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   16262:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   16266:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1626a:	2301      	movs	r3, #1
   1626c:	7e32      	ldrb	r2, [r6, #24]
   1626e:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
   16270:	4a1a      	ldr	r2, [pc, #104]	; (162dc <uarte_0_init+0x124>)
   16272:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   16276:	2308      	movs	r3, #8
   16278:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   1627c:	f898 3008 	ldrb.w	r3, [r8, #8]
   16280:	b953      	cbnz	r3, 16298 <uarte_0_init+0xe0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16282:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   16286:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1628a:	6973      	ldr	r3, [r6, #20]
   1628c:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   16290:	2301      	movs	r3, #1
   16292:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16296:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   16298:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1629c:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   1629e:	bf5c      	itt	pl
   162a0:	f44f 7380 	movpl.w	r3, #256	; 0x100
   162a4:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   162a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
   162ac:	06db      	lsls	r3, r3, #27
   162ae:	bf44      	itt	mi
   162b0:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   162b4:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   162b8:	6933      	ldr	r3, [r6, #16]
   162ba:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   162be:	2300      	movs	r3, #0
   162c0:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   162c4:	2301      	movs	r3, #1
   162c6:	60a3      	str	r3, [r4, #8]
   162c8:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   162ca:	e7c2      	b.n	16252 <uarte_0_init+0x9a>
   162cc:	0bad0000 	.word	0x0bad0000
   162d0:	000238d2 	.word	0x000238d2
   162d4:	000238f5 	.word	0x000238f5
   162d8:	0001fd24 	.word	0x0001fd24
   162dc:	40017000 	.word	0x40017000

000162e0 <uarte_nrfx_poll_out>:
{
   162e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   162e2:	4604      	mov	r4, r0
   162e4:	460d      	mov	r5, r1
	struct uarte_nrfx_data *data = dev->data;
   162e6:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   162e8:	f008 fcee 	bl	1ecc8 <k_is_in_isr>
   162ec:	b9b0      	cbnz	r0, 1631c <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
   162ee:	4b2e      	ldr	r3, [pc, #184]	; (163a8 <uarte_nrfx_poll_out+0xc8>)
   162f0:	781b      	ldrb	r3, [r3, #0]
   162f2:	b19b      	cbz	r3, 1631c <uarte_nrfx_poll_out+0x3c>
{
   162f4:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   162f6:	6860      	ldr	r0, [r4, #4]
   162f8:	f007 fd8a 	bl	1de10 <is_tx_ready.isra.0>
   162fc:	bb00      	cbnz	r0, 16340 <uarte_nrfx_poll_out+0x60>
   162fe:	2001      	movs	r0, #1
   16300:	f007 fe86 	bl	1e010 <nrfx_busy_wait>
   16304:	3e01      	subs	r6, #1
   16306:	d1f6      	bne.n	162f6 <uarte_nrfx_poll_out+0x16>
   16308:	2100      	movs	r1, #0
   1630a:	2021      	movs	r0, #33	; 0x21
   1630c:	f003 f9b6 	bl	1967c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   16310:	e7f0      	b.n	162f4 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
   16312:	f386 8811 	msr	BASEPRI, r6
   16316:	f3bf 8f6f 	isb	sy
}
   1631a:	e7f5      	b.n	16308 <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
   1631c:	f04f 0320 	mov.w	r3, #32
   16320:	f3ef 8611 	mrs	r6, BASEPRI
   16324:	f383 8812 	msr	BASEPRI_MAX, r3
   16328:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1632c:	6860      	ldr	r0, [r4, #4]
   1632e:	4631      	mov	r1, r6
   16330:	f007 fd6e 	bl	1de10 <is_tx_ready.isra.0>
   16334:	b990      	cbnz	r0, 1635c <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
   16336:	f386 8811 	msr	BASEPRI, r6
   1633a:	f3bf 8f6f 	isb	sy
}
   1633e:	e7ed      	b.n	1631c <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
   16340:	f04f 0320 	mov.w	r3, #32
   16344:	f3ef 8611 	mrs	r6, BASEPRI
   16348:	f383 8812 	msr	BASEPRI_MAX, r3
   1634c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   16350:	6860      	ldr	r0, [r4, #4]
   16352:	4631      	mov	r1, r6
   16354:	f007 fd5c 	bl	1de10 <is_tx_ready.isra.0>
   16358:	2800      	cmp	r0, #0
   1635a:	d0da      	beq.n	16312 <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
   1635c:	693b      	ldr	r3, [r7, #16]
   1635e:	701d      	strb	r5, [r3, #0]
	const struct uarte_nrfx_config *config = dev->config;
   16360:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   16362:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
   16364:	6813      	ldr	r3, [r2, #0]
   16366:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1636a:	2001      	movs	r0, #1
   1636c:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16370:	2000      	movs	r0, #0
   16372:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   16376:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
   1637a:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1637e:	6852      	ldr	r2, [r2, #4]
   16380:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
   16384:	06d2      	lsls	r2, r2, #27
   16386:	d508      	bpl.n	1639a <uarte_nrfx_poll_out+0xba>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   16388:	2008      	movs	r0, #8
	return config->uarte_regs;
   1638a:	6862      	ldr	r2, [r4, #4]
   1638c:	6812      	ldr	r2, [r2, #0]
   1638e:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
   16392:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   16396:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1639a:	2201      	movs	r2, #1
   1639c:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
   1639e:	f381 8811 	msr	BASEPRI, r1
   163a2:	f3bf 8f6f 	isb	sy
}
   163a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   163a8:	2000a076 	.word	0x2000a076

000163ac <bt_rpmsg_send>:
		LOG_HEXDUMP_DBG(buf->data, buf->len, "RX buf payload:");
	}
}

static int bt_rpmsg_send(struct net_buf *buf)
{
   163ac:	b5b0      	push	{r4, r5, r7, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   163ae:	7d01      	ldrb	r1, [r0, #20]
   163b0:	4604      	mov	r4, r0
	int err;
	uint8_t pkt_indicator;

	BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   163b2:	2902      	cmp	r1, #2
{
   163b4:	af00      	add	r7, sp, #0
	switch (bt_buf_get_type(buf)) {
   163b6:	d01a      	beq.n	163ee <bt_rpmsg_send+0x42>
   163b8:	2904      	cmp	r1, #4
   163ba:	d017      	beq.n	163ec <bt_rpmsg_send+0x40>
   163bc:	b359      	cbz	r1, 16416 <bt_rpmsg_send+0x6a>
		break;
	case BT_BUF_ISO_OUT:
		pkt_indicator = RPMSG_ISO;
		break;
	default:
		BT_ERR("Unknown type %u", bt_buf_get_type(buf));
   163be:	466d      	mov	r5, sp
   163c0:	b088      	sub	sp, #32
   163c2:	466a      	mov	r2, sp
   163c4:	4b15      	ldr	r3, [pc, #84]	; (1641c <bt_rpmsg_send+0x70>)
   163c6:	6153      	str	r3, [r2, #20]
   163c8:	4b15      	ldr	r3, [pc, #84]	; (16420 <bt_rpmsg_send+0x74>)
	switch (bt_buf_get_type(buf)) {
   163ca:	e9c2 3106 	strd	r3, r1, [r2, #24]
	net_buf_push_u8(buf, pkt_indicator);

	LOG_HEXDUMP_DBG(buf->data, buf->len, "Final HCI buffer:");
	err = ipc_service_send(&hci_ept, buf->data, buf->len);
	if (err < 0) {
		BT_ERR("Failed to send (err %d)", err);
   163ce:	2304      	movs	r3, #4
   163d0:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   163d4:	4813      	ldr	r0, [pc, #76]	; (16424 <bt_rpmsg_send+0x78>)
   163d6:	f842 3f10 	str.w	r3, [r2, #16]!
   163da:	f007 fd62 	bl	1dea2 <z_log_msg_static_create.constprop.0>
   163de:	46ad      	mov	sp, r5
	}

done:
	net_buf_unref(buf);
   163e0:	4620      	mov	r0, r4
   163e2:	f7ff f8a3 	bl	1552c <net_buf_unref>
	return 0;
}
   163e6:	2000      	movs	r0, #0
   163e8:	46bd      	mov	sp, r7
   163ea:	bdb0      	pop	{r4, r5, r7, pc}
		pkt_indicator = RPMSG_ISO;
   163ec:	2105      	movs	r1, #5
	net_buf_simple_push_u8(&buf->b, val);
   163ee:	f104 0008 	add.w	r0, r4, #8
   163f2:	f007 fbc2 	bl	1db7a <net_buf_simple_push_u8>
	err = ipc_service_send(&hci_ept, buf->data, buf->len);
   163f6:	89a2      	ldrh	r2, [r4, #12]
   163f8:	68a1      	ldr	r1, [r4, #8]
   163fa:	480b      	ldr	r0, [pc, #44]	; (16428 <bt_rpmsg_send+0x7c>)
   163fc:	f7f5 fc62 	bl	bcc4 <ipc_service_send>
	if (err < 0) {
   16400:	2800      	cmp	r0, #0
   16402:	daed      	bge.n	163e0 <bt_rpmsg_send+0x34>
		BT_ERR("Failed to send (err %d)", err);
   16404:	466d      	mov	r5, sp
   16406:	b088      	sub	sp, #32
   16408:	466a      	mov	r2, sp
   1640a:	4b08      	ldr	r3, [pc, #32]	; (1642c <bt_rpmsg_send+0x80>)
   1640c:	6153      	str	r3, [r2, #20]
   1640e:	4b04      	ldr	r3, [pc, #16]	; (16420 <bt_rpmsg_send+0x74>)
   16410:	e9c2 3006 	strd	r3, r0, [r2, #24]
   16414:	e7db      	b.n	163ce <bt_rpmsg_send+0x22>
	switch (bt_buf_get_type(buf)) {
   16416:	2101      	movs	r1, #1
   16418:	e7e9      	b.n	163ee <bt_rpmsg_send+0x42>
   1641a:	bf00      	nop
   1641c:	00023925 	.word	0x00023925
   16420:	00023be6 	.word	0x00023be6
   16424:	0001fc7c 	.word	0x0001fc7c
   16428:	20009e58 	.word	0x20009e58
   1642c:	00023939 	.word	0x00023939

00016430 <bt_rpmsg_init>:
	.quirks         = BT_QUIRK_NO_AUTO_DLE,
#endif
};

static int bt_rpmsg_init(const struct device *unused)
{
   16430:	b5b0      	push	{r4, r5, r7, lr}
	ARG_UNUSED(unused);

	int err;

	err = bt_hci_driver_register(&drv);
   16432:	480d      	ldr	r0, [pc, #52]	; (16468 <bt_rpmsg_init+0x38>)
{
   16434:	af00      	add	r7, sp, #0
	err = bt_hci_driver_register(&drv);
   16436:	f7f8 fe65 	bl	f104 <bt_hci_driver_register>
	if (err < 0) {
   1643a:	1e04      	subs	r4, r0, #0
   1643c:	da10      	bge.n	16460 <bt_rpmsg_init+0x30>
		BT_ERR("Failed to register BT HIC driver (err %d)", err);
   1643e:	466d      	mov	r5, sp
   16440:	b088      	sub	sp, #32
   16442:	466a      	mov	r2, sp
   16444:	4b09      	ldr	r3, [pc, #36]	; (1646c <bt_rpmsg_init+0x3c>)
   16446:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1644a:	6153      	str	r3, [r2, #20]
   1644c:	4b08      	ldr	r3, [pc, #32]	; (16470 <bt_rpmsg_init+0x40>)
   1644e:	4809      	ldr	r0, [pc, #36]	; (16474 <bt_rpmsg_init+0x44>)
   16450:	e9c2 3406 	strd	r3, r4, [r2, #24]
   16454:	2304      	movs	r3, #4
   16456:	f842 3f10 	str.w	r3, [r2, #16]!
   1645a:	f007 fd22 	bl	1dea2 <z_log_msg_static_create.constprop.0>
   1645e:	46ad      	mov	sp, r5
	}

	return err;
}
   16460:	4620      	mov	r0, r4
   16462:	46bd      	mov	sp, r7
   16464:	bdb0      	pop	{r4, r5, r7, pc}
   16466:	bf00      	nop
   16468:	00020694 	.word	0x00020694
   1646c:	00023955 	.word	0x00023955
   16470:	00023bf4 	.word	0x00023bf4
   16474:	0001fc7c 	.word	0x0001fc7c

00016478 <hci_ept_bound>:
	z_impl_k_sem_give(sem);
   16478:	4801      	ldr	r0, [pc, #4]	; (16480 <hci_ept_bound+0x8>)
   1647a:	f002 bbdb 	b.w	18c34 <z_impl_k_sem_give>
   1647e:	bf00      	nop
   16480:	2000870c 	.word	0x2000870c

00016484 <bt_rpmsg_open>:
{
   16484:	b5b0      	push	{r4, r5, r7, lr}
	err = ipc_service_open_instance(hci_ipc_instance);
   16486:	481b      	ldr	r0, [pc, #108]	; (164f4 <bt_rpmsg_open+0x70>)
{
   16488:	af00      	add	r7, sp, #0
	err = ipc_service_open_instance(hci_ipc_instance);
   1648a:	f7f5 fba3 	bl	bbd4 <ipc_service_open_instance>
	if (err && (err != -EALREADY)) {
   1648e:	4604      	mov	r4, r0
   16490:	b1b0      	cbz	r0, 164c0 <bt_rpmsg_open+0x3c>
   16492:	f110 0f78 	cmn.w	r0, #120	; 0x78
   16496:	d013      	beq.n	164c0 <bt_rpmsg_open+0x3c>
		BT_ERR("IPC service instance initialization failed: %d\n", err);
   16498:	466d      	mov	r5, sp
   1649a:	b088      	sub	sp, #32
   1649c:	466a      	mov	r2, sp
   1649e:	4b16      	ldr	r3, [pc, #88]	; (164f8 <bt_rpmsg_open+0x74>)
		BT_ERR("Endpoint binding failed with %d", err);
   164a0:	6153      	str	r3, [r2, #20]
   164a2:	4b16      	ldr	r3, [pc, #88]	; (164fc <bt_rpmsg_open+0x78>)
   164a4:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   164a8:	e9c2 3406 	strd	r3, r4, [r2, #24]
   164ac:	2304      	movs	r3, #4
   164ae:	4814      	ldr	r0, [pc, #80]	; (16500 <bt_rpmsg_open+0x7c>)
   164b0:	f842 3f10 	str.w	r3, [r2, #16]!
   164b4:	f007 fcf5 	bl	1dea2 <z_log_msg_static_create.constprop.0>
   164b8:	46ad      	mov	sp, r5
}
   164ba:	4620      	mov	r0, r4
   164bc:	46bd      	mov	sp, r7
   164be:	bdb0      	pop	{r4, r5, r7, pc}
	err = ipc_service_register_endpoint(hci_ipc_instance, &hci_ept, &hci_ept_cfg);
   164c0:	4a10      	ldr	r2, [pc, #64]	; (16504 <bt_rpmsg_open+0x80>)
   164c2:	4911      	ldr	r1, [pc, #68]	; (16508 <bt_rpmsg_open+0x84>)
   164c4:	480b      	ldr	r0, [pc, #44]	; (164f4 <bt_rpmsg_open+0x70>)
   164c6:	f7f5 fbbf 	bl	bc48 <ipc_service_register_endpoint>
	if (err) {
   164ca:	4604      	mov	r4, r0
   164cc:	b120      	cbz	r0, 164d8 <bt_rpmsg_open+0x54>
		BT_ERR("Registering endpoint failed with %d", err);
   164ce:	466d      	mov	r5, sp
   164d0:	b088      	sub	sp, #32
   164d2:	466a      	mov	r2, sp
   164d4:	4b0d      	ldr	r3, [pc, #52]	; (1650c <bt_rpmsg_open+0x88>)
   164d6:	e7e3      	b.n	164a0 <bt_rpmsg_open+0x1c>
	return z_impl_k_sem_take(sem, timeout);
   164d8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   164dc:	2300      	movs	r3, #0
   164de:	480c      	ldr	r0, [pc, #48]	; (16510 <bt_rpmsg_open+0x8c>)
   164e0:	f002 fbce 	bl	18c80 <z_impl_k_sem_take>
	if (err) {
   164e4:	4604      	mov	r4, r0
   164e6:	2800      	cmp	r0, #0
   164e8:	d0e7      	beq.n	164ba <bt_rpmsg_open+0x36>
		BT_ERR("Endpoint binding failed with %d", err);
   164ea:	466d      	mov	r5, sp
   164ec:	b088      	sub	sp, #32
   164ee:	466a      	mov	r2, sp
   164f0:	4b08      	ldr	r3, [pc, #32]	; (16514 <bt_rpmsg_open+0x90>)
   164f2:	e7d5      	b.n	164a0 <bt_rpmsg_open+0x1c>
   164f4:	0001f880 	.word	0x0001f880
   164f8:	00023983 	.word	0x00023983
   164fc:	00023bd8 	.word	0x00023bd8
   16500:	0001fc7c 	.word	0x0001fc7c
   16504:	2000848c 	.word	0x2000848c
   16508:	20009e58 	.word	0x20009e58
   1650c:	000239b7 	.word	0x000239b7
   16510:	2000870c 	.word	0x2000870c
   16514:	000239df 	.word	0x000239df

00016518 <hci_ept_recv>:
{
   16518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1651c:	b083      	sub	sp, #12
	pkt_indicator = *data++;
   1651e:	4681      	mov	r9, r0
   16520:	f819 8b01 	ldrb.w	r8, [r9], #1
{
   16524:	4606      	mov	r6, r0
	switch (pkt_indicator) {
   16526:	f1b8 0f04 	cmp.w	r8, #4
{
   1652a:	460c      	mov	r4, r1
   1652c:	af00      	add	r7, sp, #0
	remaining -= sizeof(pkt_indicator);
   1652e:	f101 33ff 	add.w	r3, r1, #4294967295
	switch (pkt_indicator) {
   16532:	d011      	beq.n	16558 <hci_ept_recv+0x40>
   16534:	f1b8 0f05 	cmp.w	r8, #5
   16538:	f000 80cf 	beq.w	166da <hci_ept_recv+0x1c2>
   1653c:	f1b8 0f02 	cmp.w	r8, #2
   16540:	f040 810e 	bne.w	16760 <hci_ept_recv+0x248>
	if (remaining < sizeof(hdr)) {
   16544:	2b03      	cmp	r3, #3
   16546:	f200 8089 	bhi.w	1665c <hci_ept_recv+0x144>
		BT_ERR("Not enough data for ACL header");
   1654a:	466c      	mov	r4, sp
   1654c:	b088      	sub	sp, #32
   1654e:	466a      	mov	r2, sp
   16550:	4b8a      	ldr	r3, [pc, #552]	; (1677c <hci_ept_recv+0x264>)
		BT_ERR("No available ACL buffers!");
   16552:	6153      	str	r3, [r2, #20]
   16554:	4b8a      	ldr	r3, [pc, #552]	; (16780 <hci_ept_recv+0x268>)
   16556:	e007      	b.n	16568 <hci_ept_recv+0x50>
	if (remaining < sizeof(hdr)) {
   16558:	2b01      	cmp	r3, #1
   1655a:	d813      	bhi.n	16584 <hci_ept_recv+0x6c>
		BT_ERR("Not enough data for event header");
   1655c:	466c      	mov	r4, sp
   1655e:	b088      	sub	sp, #32
   16560:	466a      	mov	r2, sp
   16562:	4b88      	ldr	r3, [pc, #544]	; (16784 <hci_ept_recv+0x26c>)
		BT_ERR("Event payload length is not correct");
   16564:	6153      	str	r3, [r2, #20]
   16566:	4b88      	ldr	r3, [pc, #544]	; (16788 <hci_ept_recv+0x270>)
   16568:	6193      	str	r3, [r2, #24]
   1656a:	2303      	movs	r3, #3
   1656c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16570:	f842 3f10 	str.w	r3, [r2, #16]!
   16574:	4885      	ldr	r0, [pc, #532]	; (1678c <hci_ept_recv+0x274>)
   16576:	f007 fc94 	bl	1dea2 <z_log_msg_static_create.constprop.0>
   1657a:	46a5      	mov	sp, r4
}
   1657c:	370c      	adds	r7, #12
   1657e:	46bd      	mov	sp, r7
   16580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (evt_type) {
   16584:	7843      	ldrb	r3, [r0, #1]
   16586:	2b3e      	cmp	r3, #62	; 0x3e
   16588:	d140      	bne.n	1660c <hci_ept_recv+0xf4>
		switch (subevt_type) {
   1658a:	f890 a003 	ldrb.w	sl, [r0, #3]
   1658e:	f1aa 0302 	sub.w	r3, sl, #2
   16592:	f1d3 0a00 	rsbs	sl, r3, #0
   16596:	eb4a 0a03 	adc.w	sl, sl, r3
	memcpy((void *)&hdr, data, sizeof(hdr));
   1659a:	2202      	movs	r2, #2
   1659c:	4649      	mov	r1, r9
   1659e:	1d38      	adds	r0, r7, #4
   165a0:	f005 f997 	bl	1b8d2 <memcpy>
	if (remaining != hdr.len) {
   165a4:	797b      	ldrb	r3, [r7, #5]
	remaining -= sizeof(hdr);
   165a6:	3c03      	subs	r4, #3
	if (remaining != hdr.len) {
   165a8:	429c      	cmp	r4, r3
   165aa:	d135      	bne.n	16618 <hci_ept_recv+0x100>
   165ac:	f1ba 0f00 	cmp.w	sl, #0
   165b0:	d02f      	beq.n	16612 <hci_ept_recv+0xfa>
   165b2:	f04f 0800 	mov.w	r8, #0
   165b6:	f04f 0900 	mov.w	r9, #0
			BT_WARN("Couldn't allocate a buffer after waiting 10 seconds.");
   165ba:	f8df b1d4 	ldr.w	fp, [pc, #468]	; 16790 <hci_ept_recv+0x278>
		buf = bt_buf_get_evt(hdr.evt, discardable, discardable ? K_NO_WAIT : K_SECONDS(10));
   165be:	4642      	mov	r2, r8
   165c0:	464b      	mov	r3, r9
   165c2:	4651      	mov	r1, sl
   165c4:	7938      	ldrb	r0, [r7, #4]
   165c6:	f7f7 fa4f 	bl	da68 <bt_buf_get_evt>
		if (!buf) {
   165ca:	4605      	mov	r5, r0
   165cc:	b348      	cbz	r0, 16622 <hci_ept_recv+0x10a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   165ce:	f100 0808 	add.w	r8, r0, #8
   165d2:	2202      	movs	r2, #2
   165d4:	1d39      	adds	r1, r7, #4
   165d6:	4640      	mov	r0, r8
   165d8:	f007 fab6 	bl	1db48 <net_buf_simple_add_mem>
	return net_buf_simple_tailroom(&buf->b);
   165dc:	4640      	mov	r0, r8
   165de:	f007 faf1 	bl	1dbc4 <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   165e2:	4284      	cmp	r4, r0
   165e4:	d931      	bls.n	1664a <hci_ept_recv+0x132>
		BT_ERR("Not enough space in buffer %zu/%zu",
   165e6:	466e      	mov	r6, sp
   165e8:	b08a      	sub	sp, #40	; 0x28
   165ea:	466a      	mov	r2, sp
   165ec:	4b69      	ldr	r3, [pc, #420]	; (16794 <hci_ept_recv+0x27c>)
   165ee:	6153      	str	r3, [r2, #20]
   165f0:	4b65      	ldr	r3, [pc, #404]	; (16788 <hci_ept_recv+0x270>)
		BT_ERR("Not enough space in buffer %zu/%zu",
   165f2:	e9c2 3406 	strd	r3, r4, [r2, #24]
   165f6:	2305      	movs	r3, #5
   165f8:	6210      	str	r0, [r2, #32]
   165fa:	f842 3f10 	str.w	r3, [r2, #16]!
		BT_ERR("Not enough space in buffer %zu/%zu",
   165fe:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   16602:	4862      	ldr	r0, [pc, #392]	; (1678c <hci_ept_recv+0x274>)
   16604:	f007 fc4d 	bl	1dea2 <z_log_msg_static_create.constprop.0>
   16608:	46b5      	mov	sp, r6
   1660a:	e04e      	b.n	166aa <hci_ept_recv+0x192>
			return false;
   1660c:	f04f 0a00 	mov.w	sl, #0
   16610:	e7c3      	b.n	1659a <hci_ept_recv+0x82>
   16612:	f44f 28a0 	mov.w	r8, #327680	; 0x50000
   16616:	e7ce      	b.n	165b6 <hci_ept_recv+0x9e>
		BT_ERR("Event payload length is not correct");
   16618:	466c      	mov	r4, sp
   1661a:	b088      	sub	sp, #32
   1661c:	466a      	mov	r2, sp
   1661e:	4b5e      	ldr	r3, [pc, #376]	; (16798 <hci_ept_recv+0x280>)
   16620:	e7a0      	b.n	16564 <hci_ept_recv+0x4c>
			if (discardable) {
   16622:	f1ba 0f00 	cmp.w	sl, #0
   16626:	d1a9      	bne.n	1657c <hci_ept_recv+0x64>
			BT_WARN("Couldn't allocate a buffer after waiting 10 seconds.");
   16628:	466d      	mov	r5, sp
   1662a:	b088      	sub	sp, #32
   1662c:	466a      	mov	r2, sp
   1662e:	4b56      	ldr	r3, [pc, #344]	; (16788 <hci_ept_recv+0x270>)
   16630:	f8c2 b014 	str.w	fp, [r2, #20]
   16634:	6193      	str	r3, [r2, #24]
   16636:	2303      	movs	r3, #3
   16638:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1663c:	4853      	ldr	r0, [pc, #332]	; (1678c <hci_ept_recv+0x274>)
   1663e:	f842 3f10 	str.w	r3, [r2, #16]!
   16642:	f007 fc2e 	bl	1dea2 <z_log_msg_static_create.constprop.0>
   16646:	46ad      	mov	sp, r5
	} while (!buf);
   16648:	e7b9      	b.n	165be <hci_ept_recv+0xa6>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1664a:	4622      	mov	r2, r4
   1664c:	1cf1      	adds	r1, r6, #3
   1664e:	4640      	mov	r0, r8
   16650:	f007 fa7a 	bl	1db48 <net_buf_simple_add_mem>
		bt_recv(buf);
   16654:	4628      	mov	r0, r5
   16656:	f7f8 fd1d 	bl	f094 <bt_recv>
}
   1665a:	e78f      	b.n	1657c <hci_ept_recv+0x64>
	buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_NO_WAIT);
   1665c:	2200      	movs	r2, #0
   1665e:	2300      	movs	r3, #0
   16660:	2003      	movs	r0, #3
   16662:	f7f7 f9d1 	bl	da08 <bt_buf_get_rx>
	if (buf) {
   16666:	4605      	mov	r5, r0
   16668:	b318      	cbz	r0, 166b2 <hci_ept_recv+0x19a>
		memcpy((void *)&hdr, data, sizeof(hdr));
   1666a:	2204      	movs	r2, #4
   1666c:	4649      	mov	r1, r9
   1666e:	18b8      	adds	r0, r7, r2
   16670:	f005 f92f 	bl	1b8d2 <memcpy>
   16674:	2204      	movs	r2, #4
   16676:	f105 0808 	add.w	r8, r5, #8
   1667a:	4640      	mov	r0, r8
   1667c:	18b9      	adds	r1, r7, r2
   1667e:	f007 fa63 	bl	1db48 <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
   16682:	88fb      	ldrh	r3, [r7, #6]
		remaining -= sizeof(hdr);
   16684:	3c05      	subs	r4, #5
	if (remaining != sys_le16_to_cpu(hdr.len)) {
   16686:	429c      	cmp	r4, r3
   16688:	d018      	beq.n	166bc <hci_ept_recv+0x1a4>
		BT_ERR("ACL payload length is not correct");
   1668a:	466c      	mov	r4, sp
   1668c:	b088      	sub	sp, #32
   1668e:	466a      	mov	r2, sp
   16690:	4b42      	ldr	r3, [pc, #264]	; (1679c <hci_ept_recv+0x284>)
   16692:	6153      	str	r3, [r2, #20]
   16694:	4b3a      	ldr	r3, [pc, #232]	; (16780 <hci_ept_recv+0x268>)
		BT_ERR("ISO payload length is not correct");
   16696:	6193      	str	r3, [r2, #24]
   16698:	2303      	movs	r3, #3
   1669a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1669e:	483b      	ldr	r0, [pc, #236]	; (1678c <hci_ept_recv+0x274>)
   166a0:	f842 3f10 	str.w	r3, [r2, #16]!
   166a4:	f007 fbfd 	bl	1dea2 <z_log_msg_static_create.constprop.0>
   166a8:	46a5      	mov	sp, r4
		net_buf_unref(buf);
   166aa:	4628      	mov	r0, r5
   166ac:	f7fe ff3e 	bl	1552c <net_buf_unref>
	if (buf) {
   166b0:	e764      	b.n	1657c <hci_ept_recv+0x64>
		BT_ERR("No available ACL buffers!");
   166b2:	466c      	mov	r4, sp
   166b4:	b088      	sub	sp, #32
   166b6:	466a      	mov	r2, sp
   166b8:	4b39      	ldr	r3, [pc, #228]	; (167a0 <hci_ept_recv+0x288>)
   166ba:	e74a      	b.n	16552 <hci_ept_recv+0x3a>
	return net_buf_simple_tailroom(&buf->b);
   166bc:	4640      	mov	r0, r8
   166be:	f007 fa81 	bl	1dbc4 <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   166c2:	4284      	cmp	r4, r0
   166c4:	d906      	bls.n	166d4 <hci_ept_recv+0x1bc>
		BT_ERR("Not enough space in buffer %zu/%zu",
   166c6:	466e      	mov	r6, sp
   166c8:	b08a      	sub	sp, #40	; 0x28
   166ca:	466a      	mov	r2, sp
   166cc:	4b31      	ldr	r3, [pc, #196]	; (16794 <hci_ept_recv+0x27c>)
   166ce:	6153      	str	r3, [r2, #20]
   166d0:	4b2b      	ldr	r3, [pc, #172]	; (16780 <hci_ept_recv+0x268>)
   166d2:	e78e      	b.n	165f2 <hci_ept_recv+0xda>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   166d4:	4622      	mov	r2, r4
   166d6:	1d71      	adds	r1, r6, #5
   166d8:	e7b9      	b.n	1664e <hci_ept_recv+0x136>
	if (remaining < sizeof(hdr)) {
   166da:	2b03      	cmp	r3, #3
   166dc:	d806      	bhi.n	166ec <hci_ept_recv+0x1d4>
		BT_ERR("Not enough data for ISO header");
   166de:	466c      	mov	r4, sp
   166e0:	b088      	sub	sp, #32
   166e2:	466a      	mov	r2, sp
   166e4:	4b2f      	ldr	r3, [pc, #188]	; (167a4 <hci_ept_recv+0x28c>)
		BT_ERR("No available ISO buffers!");
   166e6:	6153      	str	r3, [r2, #20]
   166e8:	4b2f      	ldr	r3, [pc, #188]	; (167a8 <hci_ept_recv+0x290>)
   166ea:	e73d      	b.n	16568 <hci_ept_recv+0x50>
	buf = bt_buf_get_rx(BT_BUF_ISO_IN, K_NO_WAIT);
   166ec:	2200      	movs	r2, #0
   166ee:	2300      	movs	r3, #0
   166f0:	4640      	mov	r0, r8
   166f2:	f7f7 f989 	bl	da08 <bt_buf_get_rx>
	if (buf) {
   166f6:	4605      	mov	r5, r0
   166f8:	b1c0      	cbz	r0, 1672c <hci_ept_recv+0x214>
		memcpy((void *)&hdr, data, sizeof(hdr));
   166fa:	2204      	movs	r2, #4
   166fc:	4649      	mov	r1, r9
   166fe:	18b8      	adds	r0, r7, r2
   16700:	f005 f8e7 	bl	1b8d2 <memcpy>
   16704:	2204      	movs	r2, #4
   16706:	f105 0908 	add.w	r9, r5, #8
   1670a:	4648      	mov	r0, r9
   1670c:	18b9      	adds	r1, r7, r2
   1670e:	f007 fa1b 	bl	1db48 <net_buf_simple_add_mem>
	if (remaining != bt_iso_hdr_len(sys_le16_to_cpu(hdr.len))) {
   16712:	88fb      	ldrh	r3, [r7, #6]
		remaining -= sizeof(hdr);
   16714:	3c05      	subs	r4, #5
	if (remaining != bt_iso_hdr_len(sys_le16_to_cpu(hdr.len))) {
   16716:	f3c3 030d 	ubfx	r3, r3, #0, #14
   1671a:	429c      	cmp	r4, r3
   1671c:	d00b      	beq.n	16736 <hci_ept_recv+0x21e>
		BT_ERR("ISO payload length is not correct");
   1671e:	466c      	mov	r4, sp
   16720:	b088      	sub	sp, #32
   16722:	466a      	mov	r2, sp
   16724:	4b21      	ldr	r3, [pc, #132]	; (167ac <hci_ept_recv+0x294>)
   16726:	6153      	str	r3, [r2, #20]
   16728:	4b1f      	ldr	r3, [pc, #124]	; (167a8 <hci_ept_recv+0x290>)
   1672a:	e7b4      	b.n	16696 <hci_ept_recv+0x17e>
		BT_ERR("No available ISO buffers!");
   1672c:	466c      	mov	r4, sp
   1672e:	b088      	sub	sp, #32
   16730:	466a      	mov	r2, sp
   16732:	4b1f      	ldr	r3, [pc, #124]	; (167b0 <hci_ept_recv+0x298>)
   16734:	e7d7      	b.n	166e6 <hci_ept_recv+0x1ce>
	return net_buf_simple_tailroom(&buf->b);
   16736:	4648      	mov	r0, r9
   16738:	f007 fa44 	bl	1dbc4 <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   1673c:	4284      	cmp	r4, r0
   1673e:	d90b      	bls.n	16758 <hci_ept_recv+0x240>
		BT_ERR("Not enough space in buffer %zu/%zu",
   16740:	466e      	mov	r6, sp
   16742:	b08a      	sub	sp, #40	; 0x28
   16744:	466a      	mov	r2, sp
   16746:	4b13      	ldr	r3, [pc, #76]	; (16794 <hci_ept_recv+0x27c>)
   16748:	6210      	str	r0, [r2, #32]
   1674a:	6153      	str	r3, [r2, #20]
   1674c:	4b16      	ldr	r3, [pc, #88]	; (167a8 <hci_ept_recv+0x290>)
   1674e:	e9c2 3406 	strd	r3, r4, [r2, #24]
   16752:	f842 8f10 	str.w	r8, [r2, #16]!
   16756:	e752      	b.n	165fe <hci_ept_recv+0xe6>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   16758:	4622      	mov	r2, r4
   1675a:	4648      	mov	r0, r9
   1675c:	1d71      	adds	r1, r6, #5
   1675e:	e777      	b.n	16650 <hci_ept_recv+0x138>
		BT_ERR("Unknown HCI type %u", pkt_indicator);
   16760:	466c      	mov	r4, sp
   16762:	b088      	sub	sp, #32
   16764:	466a      	mov	r2, sp
   16766:	4b13      	ldr	r3, [pc, #76]	; (167b4 <hci_ept_recv+0x29c>)
   16768:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1676c:	6153      	str	r3, [r2, #20]
   1676e:	4b12      	ldr	r3, [pc, #72]	; (167b8 <hci_ept_recv+0x2a0>)
	switch (pkt_indicator) {
   16770:	e9c2 3806 	strd	r3, r8, [r2, #24]
		BT_ERR("Unknown HCI type %u", pkt_indicator);
   16774:	2304      	movs	r3, #4
   16776:	f842 3f10 	str.w	r3, [r2, #16]!
   1677a:	e6fb      	b.n	16574 <hci_ept_recv+0x5c>
   1677c:	00023ab0 	.word	0x00023ab0
   16780:	00023ba8 	.word	0x00023ba8
   16784:	00023a03 	.word	0x00023a03
   16788:	00023bba 	.word	0x00023bba
   1678c:	0001fc7c 	.word	0x0001fc7c
   16790:	00023a50 	.word	0x00023a50
   16794:	00023a89 	.word	0x00023a89
   16798:	00023a28 	.word	0x00023a28
   1679c:	00023af1 	.word	0x00023af1
   167a0:	00023ad3 	.word	0x00023ad3
   167a4:	00023b17 	.word	0x00023b17
   167a8:	00023b96 	.word	0x00023b96
   167ac:	00023b58 	.word	0x00023b58
   167b0:	00023b3a 	.word	0x00023b3a
   167b4:	00023b7e 	.word	0x00023b7e
   167b8:	00023bcc 	.word	0x00023bcc

000167bc <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   167bc:	2301      	movs	r3, #1
   167be:	4083      	lsls	r3, r0
{
   167c0:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   167c2:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   167c4:	4a0b      	ldr	r2, [pc, #44]	; (167f4 <compare_int_lock+0x38>)
   167c6:	e8d2 1fef 	ldaex	r1, [r2]
   167ca:	ea01 0504 	and.w	r5, r1, r4
   167ce:	e8c2 5fe6 	stlex	r6, r5, [r2]
   167d2:	2e00      	cmp	r6, #0
   167d4:	d1f7      	bne.n	167c6 <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   167d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   167da:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   167dc:	4806      	ldr	r0, [pc, #24]	; (167f8 <compare_int_lock+0x3c>)
   167de:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
   167e2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   167e6:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   167ea:	420b      	tst	r3, r1
}
   167ec:	bf14      	ite	ne
   167ee:	2001      	movne	r0, #1
   167f0:	2000      	moveq	r0, #0
   167f2:	bd70      	pop	{r4, r5, r6, pc}
   167f4:	20009e68 	.word	0x20009e68
   167f8:	40015000 	.word	0x40015000

000167fc <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   167fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   167fe:	491b      	ldr	r1, [pc, #108]	; (1686c <sys_clock_timeout_handler+0x70>)
{
   16800:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   16802:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   16806:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   16808:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1680c:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   16810:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   16812:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   16816:	d30f      	bcc.n	16838 <sys_clock_timeout_handler+0x3c>
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   16818:	f003 f8a8 	bl	1996c <sys_clock_announce>
    return p_reg->CC[ch];
   1681c:	00a3      	lsls	r3, r4, #2
   1681e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   16822:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   16826:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   1682a:	4295      	cmp	r5, r2
   1682c:	d11d      	bne.n	1686a <sys_clock_timeout_handler+0x6e>
    p_reg->CC[ch] = cc_val;
   1682e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   16832:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
}
   16836:	e012      	b.n	1685e <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   16838:	4b0d      	ldr	r3, [pc, #52]	; (16870 <sys_clock_timeout_handler+0x74>)
   1683a:	681b      	ldr	r3, [r3, #0]
   1683c:	0a1a      	lsrs	r2, r3, #8
   1683e:	061b      	lsls	r3, r3, #24
   16840:	195e      	adds	r6, r3, r5
   16842:	4b0c      	ldr	r3, [pc, #48]	; (16874 <sys_clock_timeout_handler+0x78>)
   16844:	f142 0700 	adc.w	r7, r2, #0
   16848:	e9c3 6700 	strd	r6, r7, [r3]
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1684c:	f003 f88e 	bl	1996c <sys_clock_announce>
    return p_reg->CC[ch];
   16850:	4a09      	ldr	r2, [pc, #36]	; (16878 <sys_clock_timeout_handler+0x7c>)
   16852:	f504 73a8 	add.w	r3, r4, #336	; 0x150
   16856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (cc_value == get_comparator(chan)) {
   1685a:	429d      	cmp	r5, r3
   1685c:	d105      	bne.n	1686a <sys_clock_timeout_handler+0x6e>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1685e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   16862:	4a05      	ldr	r2, [pc, #20]	; (16878 <sys_clock_timeout_handler+0x7c>)
   16864:	40a3      	lsls	r3, r4
   16866:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
		if (!anchor_updated) {
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   1686a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1686c:	200098d8 	.word	0x200098d8
   16870:	20009e6c 	.word	0x20009e6c
   16874:	200098e0 	.word	0x200098e0
   16878:	40015000 	.word	0x40015000

0001687c <compare_int_unlock>:
	if (key) {
   1687c:	b1d9      	cbz	r1, 168b6 <compare_int_unlock+0x3a>
		atomic_or(&int_mask, BIT(chan));
   1687e:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16880:	4a0d      	ldr	r2, [pc, #52]	; (168b8 <compare_int_unlock+0x3c>)
   16882:	4083      	lsls	r3, r0
   16884:	e8d2 cfef 	ldaex	ip, [r2]
   16888:	ea4c 0c03 	orr.w	ip, ip, r3
   1688c:	e8c2 cfe1 	stlex	r1, ip, [r2]
   16890:	2900      	cmp	r1, #0
   16892:	d1f7      	bne.n	16884 <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   16894:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
   16898:	4a08      	ldr	r2, [pc, #32]	; (168bc <compare_int_unlock+0x40>)
   1689a:	4083      	lsls	r3, r0
   1689c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   168a0:	4b07      	ldr	r3, [pc, #28]	; (168c0 <compare_int_unlock+0x44>)
   168a2:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   168a6:	40c3      	lsrs	r3, r0
   168a8:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   168aa:	bf42      	ittt	mi
   168ac:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
   168b0:	4b04      	ldrmi	r3, [pc, #16]	; (168c4 <compare_int_unlock+0x48>)
   168b2:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   168b6:	4770      	bx	lr
   168b8:	20009e68 	.word	0x20009e68
   168bc:	40015000 	.word	0x40015000
   168c0:	20009e60 	.word	0x20009e60
   168c4:	e000e100 	.word	0xe000e100

000168c8 <z_nrf_rtc_timer_compare_evt_address_get>:
    p_reg->EVTENCLR = mask;
}

NRF_STATIC_INLINE nrf_rtc_event_t nrf_rtc_compare_event_get(uint8_t index)
{
    return (nrf_rtc_event_t)NRFX_OFFSETOF(NRF_RTC_Type, EVENTS_COMPARE[index]);
   168c8:	b2c3      	uxtb	r3, r0
}
   168ca:	4802      	ldr	r0, [pc, #8]	; (168d4 <z_nrf_rtc_timer_compare_evt_address_get+0xc>)
   168cc:	009b      	lsls	r3, r3, #2
   168ce:	4418      	add	r0, r3
   168d0:	4770      	bx	lr
   168d2:	bf00      	nop
   168d4:	40015140 	.word	0x40015140

000168d8 <z_nrf_rtc_timer_compare_read>:
    return p_reg->CC[ch];
   168d8:	4b02      	ldr	r3, [pc, #8]	; (168e4 <z_nrf_rtc_timer_compare_read+0xc>)
   168da:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   168de:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
   168e2:	4770      	bx	lr
   168e4:	40015000 	.word	0x40015000

000168e8 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   168e8:	4b0d      	ldr	r3, [pc, #52]	; (16920 <z_nrf_rtc_timer_read+0x38>)
   168ea:	6818      	ldr	r0, [r3, #0]
   168ec:	0a01      	lsrs	r1, r0, #8
   168ee:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   168f0:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   168f4:	4b0b      	ldr	r3, [pc, #44]	; (16924 <z_nrf_rtc_timer_read+0x3c>)
   168f6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   168fa:	1818      	adds	r0, r3, r0
   168fc:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   16900:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   16904:	d20a      	bcs.n	1691c <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   16906:	4b08      	ldr	r3, [pc, #32]	; (16928 <z_nrf_rtc_timer_read+0x40>)
   16908:	e9d3 2300 	ldrd	r2, r3, [r3]
   1690c:	4290      	cmp	r0, r2
   1690e:	eb71 0303 	sbcs.w	r3, r1, r3
   16912:	d203      	bcs.n	1691c <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   16914:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   16918:	f141 0100 	adc.w	r1, r1, #0
}
   1691c:	4770      	bx	lr
   1691e:	bf00      	nop
   16920:	20009e6c 	.word	0x20009e6c
   16924:	40015000 	.word	0x40015000
   16928:	200098e0 	.word	0x200098e0

0001692c <compare_set>:
{
   1692c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16930:	4614      	mov	r4, r2
   16932:	461d      	mov	r5, r3
   16934:	4607      	mov	r7, r0
	key = compare_int_lock(chan);
   16936:	f7ff ff41 	bl	167bc <compare_int_lock>
   1693a:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1693c:	f7ff ffd4 	bl	168e8 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   16940:	42a0      	cmp	r0, r4
   16942:	eb71 0305 	sbcs.w	r3, r1, r5
   16946:	d271      	bcs.n	16a2c <compare_set+0x100>
		if (target_time - curr_time > COUNTER_SPAN) {
   16948:	4b3f      	ldr	r3, [pc, #252]	; (16a48 <compare_set+0x11c>)
   1694a:	1a20      	subs	r0, r4, r0
   1694c:	eb65 0101 	sbc.w	r1, r5, r1
   16950:	4298      	cmp	r0, r3
   16952:	f171 0100 	sbcs.w	r1, r1, #0
   16956:	d274      	bcs.n	16a42 <compare_set+0x116>
		if (target_time != cc_data[chan].target_time) {
   16958:	4b3c      	ldr	r3, [pc, #240]	; (16a4c <compare_set+0x120>)
   1695a:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   1695e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   16962:	429d      	cmp	r5, r3
   16964:	bf08      	it	eq
   16966:	4294      	cmpeq	r4, r2
   16968:	d04b      	beq.n	16a02 <compare_set+0xd6>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1696a:	f44f 3980 	mov.w	r9, #65536	; 0x10000
	return absolute_time & COUNTER_MAX;
   1696e:	f024 4a7f 	bic.w	sl, r4, #4278190080	; 0xff000000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   16972:	4656      	mov	r6, sl
   16974:	00bb      	lsls	r3, r7, #2
   16976:	f103 4880 	add.w	r8, r3, #1073741824	; 0x40000000
   1697a:	f508 38a8 	add.w	r8, r8, #86016	; 0x15000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1697e:	fa09 f307 	lsl.w	r3, r9, r7
    return p_reg->CC[ch];
   16982:	f8d8 0540 	ldr.w	r0, [r8, #1344]	; 0x540
     return p_reg->COUNTER;
   16986:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 16a50 <compare_set+0x124>
   1698a:	9301      	str	r3, [sp, #4]
   1698c:	f8d9 b504 	ldr.w	fp, [r9, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   16990:	eba0 000b 	sub.w	r0, r0, fp
   16994:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   16998:	f02b 437f 	bic.w	r3, fp, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   1699c:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   1699e:	f8c8 3540 	str.w	r3, [r8, #1344]	; 0x540
   169a2:	d102      	bne.n	169aa <compare_set+0x7e>
	z_impl_k_busy_wait(usec_to_wait);
   169a4:	2013      	movs	r0, #19
   169a6:	f008 fcfa 	bl	1f39e <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   169aa:	f10b 0c02 	add.w	ip, fp, #2
	return (a - b) & COUNTER_MAX;
   169ae:	eba6 000c 	sub.w	r0, r6, ip
   169b2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   169b6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   169ba:	bf88      	it	hi
   169bc:	4666      	movhi	r6, ip
		event_clear(chan);
   169be:	4638      	mov	r0, r7
   169c0:	f007 fa95 	bl	1deee <event_clear>
    p_reg->EVTENSET = mask;
   169c4:	9b01      	ldr	r3, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   169c6:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
   169ca:	f8c9 3344 	str.w	r3, [r9, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
   169ce:	f8c8 0540 	str.w	r0, [r8, #1344]	; 0x540
     return p_reg->COUNTER;
   169d2:	f8d9 0504 	ldr.w	r0, [r9, #1284]	; 0x504
	} while ((now2 != now) &&
   169d6:	4583      	cmp	fp, r0
   169d8:	d00a      	beq.n	169f0 <compare_set+0xc4>
	return (a - b) & COUNTER_MAX;
   169da:	f1c0 20ff 	rsb	r0, r0, #4278255360	; 0xff00ff00
   169de:	f500 007f 	add.w	r0, r0, #16711680	; 0xff0000
   169e2:	30fe      	adds	r0, #254	; 0xfe
   169e4:	4430      	add	r0, r6
   169e6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   169ea:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   169ee:	d81b      	bhi.n	16a28 <compare_set+0xfc>
	return (a - b) & COUNTER_MAX;
   169f0:	eba6 060a 	sub.w	r6, r6, sl
   169f4:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   169f8:	1936      	adds	r6, r6, r4
   169fa:	f145 0300 	adc.w	r3, r5, #0
   169fe:	4634      	mov	r4, r6
   16a00:	461d      	mov	r5, r3
	cc_data[chan].target_time = target_time;
   16a02:	4912      	ldr	r1, [pc, #72]	; (16a4c <compare_set+0x120>)
	cc_data[chan].callback = handler;
   16a04:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
   16a06:	eb01 1207 	add.w	r2, r1, r7, lsl #4
   16a0a:	e9c2 4502 	strd	r4, r5, [r2, #8]
	return ret;
   16a0e:	2400      	movs	r4, #0
	cc_data[chan].target_time = target_time;
   16a10:	013b      	lsls	r3, r7, #4
	cc_data[chan].callback = handler;
   16a12:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   16a14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16a16:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
   16a18:	4638      	mov	r0, r7
   16a1a:	9900      	ldr	r1, [sp, #0]
   16a1c:	f7ff ff2e 	bl	1687c <compare_int_unlock>
}
   16a20:	4620      	mov	r0, r4
   16a22:	b003      	add	sp, #12
   16a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a28:	4630      	mov	r0, r6
   16a2a:	e7af      	b.n	1698c <compare_set+0x60>
		atomic_or(&force_isr_mask, BIT(chan));
   16a2c:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16a2e:	4a09      	ldr	r2, [pc, #36]	; (16a54 <compare_set+0x128>)
   16a30:	40bb      	lsls	r3, r7
   16a32:	e8d2 0fef 	ldaex	r0, [r2]
   16a36:	4318      	orrs	r0, r3
   16a38:	e8c2 0fe1 	stlex	r1, r0, [r2]
   16a3c:	2900      	cmp	r1, #0
   16a3e:	d0e0      	beq.n	16a02 <compare_set+0xd6>
   16a40:	e7f7      	b.n	16a32 <compare_set+0x106>
			return -EINVAL;
   16a42:	f06f 0415 	mvn.w	r4, #21
   16a46:	e7e7      	b.n	16a18 <compare_set+0xec>
   16a48:	01000001 	.word	0x01000001
   16a4c:	200098b8 	.word	0x200098b8
   16a50:	40015000 	.word	0x40015000
   16a54:	20009e60 	.word	0x20009e60

00016a58 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   16a58:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->INTENSET = mask;
   16a5a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    p_reg->PRESCALER = val;
   16a5e:	2500      	movs	r5, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   16a60:	f04f 30ff 	mov.w	r0, #4294967295
   16a64:	f04f 31ff 	mov.w	r1, #4294967295
   16a68:	4c19      	ldr	r4, [pc, #100]	; (16ad0 <sys_clock_driver_init+0x78>)
   16a6a:	4b1a      	ldr	r3, [pc, #104]	; (16ad4 <sys_clock_driver_init+0x7c>)
   16a6c:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
   16a70:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   16a74:	f8c4 2304 	str.w	r2, [r4, #772]	; 0x304
   16a78:	e9c3 0106 	strd	r0, r1, [r3, #24]
   16a7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   16a80:	2602      	movs	r6, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   16a82:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   16a86:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   16a8a:	4b13      	ldr	r3, [pc, #76]	; (16ad8 <sys_clock_driver_init+0x80>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   16a8c:	2101      	movs	r1, #1
   16a8e:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
   16a92:	2015      	movs	r0, #21
   16a94:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   16a98:	462a      	mov	r2, r5
   16a9a:	f7f5 ffff 	bl	ca9c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   16a9e:	2015      	movs	r0, #21
   16aa0:	f7f5 ffcc 	bl	ca3c <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   16aa4:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   16aa6:	2203      	movs	r2, #3
   16aa8:	60a3      	str	r3, [r4, #8]
   16aaa:	6023      	str	r3, [r4, #0]
   16aac:	4b0b      	ldr	r3, [pc, #44]	; (16adc <sys_clock_driver_init+0x84>)

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   16aae:	4628      	mov	r0, r5
	int_mask = BIT_MASK(CHAN_COUNT);
   16ab0:	601a      	str	r2, [r3, #0]
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
   16ab2:	4b0b      	ldr	r3, [pc, #44]	; (16ae0 <sys_clock_driver_init+0x88>)
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   16ab4:	4a0b      	ldr	r2, [pc, #44]	; (16ae4 <sys_clock_driver_init+0x8c>)
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
   16ab6:	601e      	str	r6, [r3, #0]
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   16ab8:	4b0b      	ldr	r3, [pc, #44]	; (16ae8 <sys_clock_driver_init+0x90>)
   16aba:	9501      	str	r5, [sp, #4]
   16abc:	9300      	str	r3, [sp, #0]
   16abe:	2300      	movs	r3, #0
   16ac0:	f7ff ff34 	bl	1692c <compare_set>

	z_nrf_clock_control_lf_on(mode);
   16ac4:	4630      	mov	r0, r6
   16ac6:	f7ff f8d5 	bl	15c74 <z_nrf_clock_control_lf_on>

	return 0;
}
   16aca:	4628      	mov	r0, r5
   16acc:	b002      	add	sp, #8
   16ace:	bd70      	pop	{r4, r5, r6, pc}
   16ad0:	40015000 	.word	0x40015000
   16ad4:	200098b8 	.word	0x200098b8
   16ad8:	e000e100 	.word	0xe000e100
   16adc:	20009e68 	.word	0x20009e68
   16ae0:	20009e64 	.word	0x20009e64
   16ae4:	007fffff 	.word	0x007fffff
   16ae8:	000167fd 	.word	0x000167fd

00016aec <rtc_nrf_isr>:
{
   16aec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return p_reg->INTENSET & mask;
   16af0:	4b3c      	ldr	r3, [pc, #240]	; (16be4 <rtc_nrf_isr+0xf8>)
   16af2:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   16af6:	0792      	lsls	r2, r2, #30
   16af8:	d50b      	bpl.n	16b12 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   16afa:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   16afe:	b142      	cbz	r2, 16b12 <rtc_nrf_isr+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   16b00:	2200      	movs	r2, #0
   16b02:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
   16b06:	4a38      	ldr	r2, [pc, #224]	; (16be8 <rtc_nrf_isr+0xfc>)
   16b08:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   16b0c:	6813      	ldr	r3, [r2, #0]
   16b0e:	3301      	adds	r3, #1
   16b10:	6013      	str	r3, [r2, #0]
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   16b12:	4d36      	ldr	r5, [pc, #216]	; (16bec <rtc_nrf_isr+0x100>)
   16b14:	2400      	movs	r4, #0
   16b16:	462f      	mov	r7, r5
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   16b18:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
    return p_reg->INTENSET & mask;
   16b1c:	4e31      	ldr	r6, [pc, #196]	; (16be4 <rtc_nrf_isr+0xf8>)
	__asm__ volatile(
   16b1e:	f04f 0320 	mov.w	r3, #32
   16b22:	f3ef 8111 	mrs	r1, BASEPRI
   16b26:	f383 8812 	msr	BASEPRI_MAX, r3
   16b2a:	f3bf 8f6f 	isb	sy
   16b2e:	f8d6 3304 	ldr.w	r3, [r6, #772]	; 0x304
   16b32:	fa0a f904 	lsl.w	r9, sl, r4
   16b36:	ea19 0f03 	tst.w	r9, r3
   16b3a:	d10a      	bne.n	16b52 <rtc_nrf_isr+0x66>
	__asm__ volatile(
   16b3c:	f381 8811 	msr	BASEPRI, r1
   16b40:	f3bf 8f6f 	isb	sy
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   16b44:	3510      	adds	r5, #16
   16b46:	b114      	cbz	r4, 16b4e <rtc_nrf_isr+0x62>
}
   16b48:	b003      	add	sp, #12
   16b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   16b4e:	2401      	movs	r4, #1
   16b50:	e7e5      	b.n	16b1e <rtc_nrf_isr+0x32>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   16b52:	2301      	movs	r3, #1
   16b54:	40a3      	lsls	r3, r4
   16b56:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16b58:	4a25      	ldr	r2, [pc, #148]	; (16bf0 <rtc_nrf_isr+0x104>)
   16b5a:	e8d2 0fef 	ldaex	r0, [r2]
   16b5e:	ea00 0c03 	and.w	ip, r0, r3
   16b62:	e8c2 cfee 	stlex	lr, ip, [r2]
   16b66:	f1be 0f00 	cmp.w	lr, #0
   16b6a:	d1f6      	bne.n	16b5a <rtc_nrf_isr+0x6e>
   16b6c:	b920      	cbnz	r0, 16b78 <rtc_nrf_isr+0x8c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   16b6e:	4b21      	ldr	r3, [pc, #132]	; (16bf4 <rtc_nrf_isr+0x108>)
   16b70:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   16b74:	2b00      	cmp	r3, #0
   16b76:	d0e1      	beq.n	16b3c <rtc_nrf_isr+0x50>
			event_clear(chan);
   16b78:	4620      	mov	r0, r4
   16b7a:	f007 f9b8 	bl	1deee <event_clear>
   16b7e:	f381 8811 	msr	BASEPRI, r1
   16b82:	f3bf 8f6f 	isb	sy
		curr_time = z_nrf_rtc_timer_read();
   16b86:	f7ff feaf 	bl	168e8 <z_nrf_rtc_timer_read>
	__asm__ volatile(
   16b8a:	f04f 0320 	mov.w	r3, #32
   16b8e:	f3ef 8c11 	mrs	ip, BASEPRI
   16b92:	f383 8812 	msr	BASEPRI_MAX, r3
   16b96:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   16b9a:	eb07 1e04 	add.w	lr, r7, r4, lsl #4
   16b9e:	e9de 2302 	ldrd	r2, r3, [lr, #8]
		if (curr_time >= expire_time) {
   16ba2:	4290      	cmp	r0, r2
   16ba4:	4199      	sbcs	r1, r3
   16ba6:	d204      	bcs.n	16bb2 <rtc_nrf_isr+0xc6>
	__asm__ volatile(
   16ba8:	f38c 8811 	msr	BASEPRI, ip
   16bac:	f3bf 8f6f 	isb	sy
		if (handler) {
   16bb0:	e7c8      	b.n	16b44 <rtc_nrf_isr+0x58>
			cc_data[chan].callback = NULL;
   16bb2:	2100      	movs	r1, #0
			user_context = cc_data[chan].user_context;
   16bb4:	e9d5 8b00 	ldrd	r8, fp, [r5]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   16bb8:	f04f 30ff 	mov.w	r0, #4294967295
			cc_data[chan].callback = NULL;
   16bbc:	6029      	str	r1, [r5, #0]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   16bbe:	f04f 31ff 	mov.w	r1, #4294967295
   16bc2:	e9ce 0102 	strd	r0, r1, [lr, #8]
    p_reg->EVTENCLR = mask;
   16bc6:	4907      	ldr	r1, [pc, #28]	; (16be4 <rtc_nrf_isr+0xf8>)
   16bc8:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
   16bcc:	f38c 8811 	msr	BASEPRI, ip
   16bd0:	f3bf 8f6f 	isb	sy
		if (handler) {
   16bd4:	f1b8 0f00 	cmp.w	r8, #0
   16bd8:	d0b4      	beq.n	16b44 <rtc_nrf_isr+0x58>
			handler(chan, expire_time, user_context);
   16bda:	4620      	mov	r0, r4
   16bdc:	f8cd b000 	str.w	fp, [sp]
   16be0:	47c0      	blx	r8
   16be2:	e7af      	b.n	16b44 <rtc_nrf_isr+0x58>
   16be4:	40015000 	.word	0x40015000
   16be8:	20009e6c 	.word	0x20009e6c
   16bec:	200098b8 	.word	0x200098b8
   16bf0:	20009e60 	.word	0x20009e60
   16bf4:	40015140 	.word	0x40015140

00016bf8 <z_nrf_rtc_timer_chan_alloc>:
{
   16bf8:	b570      	push	{r4, r5, r6, lr}
		prev = atomic_and(&alloc_mask, ~BIT(chan));
   16bfa:	2401      	movs	r4, #1
		chan = alloc_mask ? 31 - __builtin_clz(alloc_mask) : -1;
   16bfc:	4b0c      	ldr	r3, [pc, #48]	; (16c30 <z_nrf_rtc_timer_chan_alloc+0x38>)
   16bfe:	6818      	ldr	r0, [r3, #0]
   16c00:	b190      	cbz	r0, 16c28 <z_nrf_rtc_timer_chan_alloc+0x30>
   16c02:	fab0 f080 	clz	r0, r0
   16c06:	f1c0 001f 	rsb	r0, r0, #31
		prev = atomic_and(&alloc_mask, ~BIT(chan));
   16c0a:	fa04 f100 	lsl.w	r1, r4, r0
   16c0e:	43c9      	mvns	r1, r1
   16c10:	e8d3 2fef 	ldaex	r2, [r3]
   16c14:	ea02 0501 	and.w	r5, r2, r1
   16c18:	e8c3 5fe6 	stlex	r6, r5, [r3]
   16c1c:	2e00      	cmp	r6, #0
   16c1e:	d1f7      	bne.n	16c10 <z_nrf_rtc_timer_chan_alloc+0x18>
	} while (!(prev & BIT(chan)));
   16c20:	40c2      	lsrs	r2, r0
   16c22:	07d2      	lsls	r2, r2, #31
   16c24:	d5eb      	bpl.n	16bfe <z_nrf_rtc_timer_chan_alloc+0x6>
}
   16c26:	bd70      	pop	{r4, r5, r6, pc}
			return -ENOMEM;
   16c28:	f06f 000b 	mvn.w	r0, #11
   16c2c:	e7fb      	b.n	16c26 <z_nrf_rtc_timer_chan_alloc+0x2e>
   16c2e:	bf00      	nop
   16c30:	20009e64 	.word	0x20009e64

00016c34 <z_nrf_rtc_timer_chan_free>:
	atomic_or(&alloc_mask, BIT(chan));
   16c34:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16c36:	4a05      	ldr	r2, [pc, #20]	; (16c4c <z_nrf_rtc_timer_chan_free+0x18>)
   16c38:	4083      	lsls	r3, r0
   16c3a:	e8d2 0fef 	ldaex	r0, [r2]
   16c3e:	4318      	orrs	r0, r3
   16c40:	e8c2 0fe1 	stlex	r1, r0, [r2]
   16c44:	2900      	cmp	r1, #0
   16c46:	d1f8      	bne.n	16c3a <z_nrf_rtc_timer_chan_free+0x6>
}
   16c48:	4770      	bx	lr
   16c4a:	bf00      	nop
   16c4c:	20009e64 	.word	0x20009e64

00016c50 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   16c50:	1c43      	adds	r3, r0, #1
{
   16c52:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   16c54:	d020      	beq.n	16c98 <sys_clock_set_timeout+0x48>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   16c56:	2801      	cmp	r0, #1
   16c58:	dd20      	ble.n	16c9c <sys_clock_set_timeout+0x4c>
   16c5a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   16c5e:	da1f      	bge.n	16ca0 <sys_clock_set_timeout+0x50>
   16c60:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   16c62:	f7ff fe41 	bl	168e8 <z_nrf_rtc_timer_read>
   16c66:	4b0f      	ldr	r3, [pc, #60]	; (16ca4 <sys_clock_set_timeout+0x54>)
   16c68:	e9d3 1300 	ldrd	r1, r3, [r3]
   16c6c:	1a42      	subs	r2, r0, r1
		ticks = 0;
   16c6e:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
   16c72:	bf28      	it	cs
   16c74:	2400      	movcs	r4, #0
	if (cyc > MAX_CYCLES) {
   16c76:	480c      	ldr	r0, [pc, #48]	; (16ca8 <sys_clock_set_timeout+0x58>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   16c78:	3201      	adds	r2, #1
   16c7a:	4422      	add	r2, r4
	if (cyc > MAX_CYCLES) {
   16c7c:	4282      	cmp	r2, r0
   16c7e:	bf28      	it	cs
   16c80:	4602      	movcs	r2, r0
	uint64_t target_time = cyc + last_count;
   16c82:	2000      	movs	r0, #0
   16c84:	1852      	adds	r2, r2, r1
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   16c86:	4909      	ldr	r1, [pc, #36]	; (16cac <sys_clock_set_timeout+0x5c>)
   16c88:	9001      	str	r0, [sp, #4]
   16c8a:	9100      	str	r1, [sp, #0]
   16c8c:	f143 0300 	adc.w	r3, r3, #0
   16c90:	f7ff fe4c 	bl	1692c <compare_set>
}
   16c94:	b002      	add	sp, #8
   16c96:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   16c98:	4803      	ldr	r0, [pc, #12]	; (16ca8 <sys_clock_set_timeout+0x58>)
   16c9a:	e7e1      	b.n	16c60 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   16c9c:	2400      	movs	r4, #0
   16c9e:	e7e0      	b.n	16c62 <sys_clock_set_timeout+0x12>
   16ca0:	4c01      	ldr	r4, [pc, #4]	; (16ca8 <sys_clock_set_timeout+0x58>)
   16ca2:	e7de      	b.n	16c62 <sys_clock_set_timeout+0x12>
   16ca4:	200098d8 	.word	0x200098d8
   16ca8:	007fffff 	.word	0x007fffff
   16cac:	000167fd 	.word	0x000167fd

00016cb0 <sys_clock_elapsed>:
{
   16cb0:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   16cb2:	f7ff fe19 	bl	168e8 <z_nrf_rtc_timer_read>
   16cb6:	4b02      	ldr	r3, [pc, #8]	; (16cc0 <sys_clock_elapsed+0x10>)
   16cb8:	681b      	ldr	r3, [r3, #0]
}
   16cba:	1ac0      	subs	r0, r0, r3
   16cbc:	bd08      	pop	{r3, pc}
   16cbe:	bf00      	nop
   16cc0:	200098d8 	.word	0x200098d8

00016cc4 <pinctrl_configure_pins>:
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   16cc4:	f04f 0c01 	mov.w	ip, #1
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   16cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        case 1: return NRF_P1;
   16ccc:	4e5b      	ldr	r6, [pc, #364]	; (16e3c <pinctrl_configure_pins+0x178>)
   16cce:	4f5c      	ldr	r7, [pc, #368]	; (16e40 <pinctrl_configure_pins+0x17c>)
   16cd0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   16cd4:	4281      	cmp	r1, r0
   16cd6:	d102      	bne.n	16cde <pinctrl_configure_pins+0x1a>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   16cd8:	2000      	movs	r0, #0
}
   16cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   16cde:	6804      	ldr	r4, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   16ce0:	f004 037f 	and.w	r3, r4, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   16ce4:	f3c4 2543 	ubfx	r5, r4, #9, #4
			pin = 0xFFFFFFFFU;
   16ce8:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   16cea:	ea4f 4414 	mov.w	r4, r4, lsr #16
			pin = 0xFFFFFFFFU;
   16cee:	bf08      	it	eq
   16cf0:	f04f 33ff 	moveq.w	r3, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
   16cf4:	2c22      	cmp	r4, #34	; 0x22
   16cf6:	f200 809d 	bhi.w	16e34 <pinctrl_configure_pins+0x170>
   16cfa:	e8df f004 	tbb	[pc, r4]
   16cfe:	2312      	.short	0x2312
   16d00:	3e2b4228 	.word	0x3e2b4228
   16d04:	9b9b9b42 	.word	0x9b9b9b42
   16d08:	9b72459b 	.word	0x9b72459b
   16d0c:	9b9b9b9b 	.word	0x9b9b9b9b
   16d10:	9b9b9b9b 	.word	0x9b9b9b9b
   16d14:	83807d75 	.word	0x83807d75
   16d18:	869b9b9b 	.word	0x869b9b9b
   16d1c:	95928f8c 	.word	0x95928f8c
   16d20:	98          	.byte	0x98
   16d21:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
   16d22:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    return pin_number >> 5;
   16d26:	ea4f 1853 	mov.w	r8, r3, lsr #5
        case 1: return NRF_P1;
   16d2a:	f1b8 0f01 	cmp.w	r8, #1
   16d2e:	bf14      	ite	ne
   16d30:	46b6      	movne	lr, r6
   16d32:	46be      	moveq	lr, r7
    *p_pin = pin_number & 0x1F;
   16d34:	f003 041f 	and.w	r4, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   16d38:	fa0c f404 	lsl.w	r4, ip, r4
    p_reg->OUTSET = set_mask;
   16d3c:	f8ce 4008 	str.w	r4, [lr, #8]
   16d40:	2401      	movs	r4, #1
   16d42:	e002      	b.n	16d4a <pinctrl_configure_pins+0x86>
			NRF_PSEL_UART(reg, RXD) = pin;
   16d44:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   16d48:	2400      	movs	r4, #0
   16d4a:	46a6      	mov	lr, r4
   16d4c:	e023      	b.n	16d96 <pinctrl_configure_pins+0xd2>
			NRF_PSEL_UART(reg, RTS) = pin;
   16d4e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
   16d52:	e7e8      	b.n	16d26 <pinctrl_configure_pins+0x62>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   16d54:	2400      	movs	r4, #0
			NRF_PSEL_SPIM(reg, SCK) = pin;
   16d56:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    return pin_number >> 5;
   16d5a:	ea4f 1953 	mov.w	r9, r3, lsr #5
        case 1: return NRF_P1;
   16d5e:	f1b9 0f01 	cmp.w	r9, #1
   16d62:	bf14      	ite	ne
   16d64:	46b0      	movne	r8, r6
   16d66:	46b8      	moveq	r8, r7
    *p_pin = pin_number & 0x1F;
   16d68:	f003 0e1f 	and.w	lr, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   16d6c:	fa0c fe0e 	lsl.w	lr, ip, lr
    p_reg->OUTCLR = clr_mask;
   16d70:	f8c8 e00c 	str.w	lr, [r8, #12]
   16d74:	f04f 0e01 	mov.w	lr, #1
   16d78:	e00d      	b.n	16d96 <pinctrl_configure_pins+0xd2>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   16d7a:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
   16d7e:	2401      	movs	r4, #1
   16d80:	e7eb      	b.n	16d5a <pinctrl_configure_pins+0x96>
			NRF_PSEL_SPIM(reg, MISO) = pin;
   16d82:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
   16d86:	e7df      	b.n	16d48 <pinctrl_configure_pins+0x84>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   16d88:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   16d8c:	2d00      	cmp	r5, #0
   16d8e:	d1db      	bne.n	16d48 <pinctrl_configure_pins+0x84>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   16d90:	2400      	movs	r4, #0
				drive = NRF_DRIVE_S0D1;
   16d92:	2506      	movs	r5, #6
			dir = NRF_GPIO_PIN_DIR_INPUT;
   16d94:	46a6      	mov	lr, r4
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   16d96:	f850 ab04 	ldr.w	sl, [r0], #4
    *p_pin = pin_number & 0x1F;
   16d9a:	f003 091f 	and.w	r9, r3, #31
   16d9e:	f40a 5800 	and.w	r8, sl, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   16da2:	f1b8 0f00 	cmp.w	r8, #0
    return pin_number >> 5;
   16da6:	ea4f 1353 	mov.w	r3, r3, lsr #5
   16daa:	bf1c      	itt	ne
   16dac:	2401      	movne	r4, #1
   16dae:	f04f 0e00 	movne.w	lr, #0
        case 0: return NRF_P0;
   16db2:	2b01      	cmp	r3, #1
   16db4:	bf0c      	ite	eq
   16db6:	46b8      	moveq	r8, r7
   16db8:	46b0      	movne	r8, r6
   16dba:	eb08 0889 	add.w	r8, r8, r9, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   16dbe:	f8d8 3200 	ldr.w	r3, [r8, #512]	; 0x200
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
   16dc2:	f3ca 1ac1 	ubfx	sl, sl, #7, #2
   16dc6:	f003 49e0 	and.w	r9, r3, #1879048192	; 0x70000000
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   16dca:	022b      	lsls	r3, r5, #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   16dcc:	ea43 038a 	orr.w	r3, r3, sl, lsl #2
   16dd0:	ea43 030e 	orr.w	r3, r3, lr
   16dd4:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   16dd8:	ea43 0309 	orr.w	r3, r3, r9
    reg->PIN_CNF[pin_number] = cnf;
   16ddc:	f8c8 3200 	str.w	r3, [r8, #512]	; 0x200
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   16de0:	e778      	b.n	16cd4 <pinctrl_configure_pins+0x10>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   16de2:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   16de6:	e7d1      	b.n	16d8c <pinctrl_configure_pins+0xc8>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   16de8:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   16dec:	6804      	ldr	r4, [r0, #0]
   16dee:	f3c4 3480 	ubfx	r4, r4, #14, #1
    if (value == 0)
   16df2:	2c00      	cmp	r4, #0
   16df4:	d0c3      	beq.n	16d7e <pinctrl_configure_pins+0xba>
   16df6:	e796      	b.n	16d26 <pinctrl_configure_pins+0x62>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   16df8:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   16dfc:	e7f6      	b.n	16dec <pinctrl_configure_pins+0x128>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   16dfe:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   16e02:	e7f3      	b.n	16dec <pinctrl_configure_pins+0x128>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   16e04:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
   16e08:	e7f0      	b.n	16dec <pinctrl_configure_pins+0x128>
			NRF_PSEL_QSPI(reg, SCK) = pin;
   16e0a:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   16e0e:	2401      	movs	r4, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   16e10:	f04f 0e00 	mov.w	lr, #0
   16e14:	e7bf      	b.n	16d96 <pinctrl_configure_pins+0xd2>
			NRF_PSEL_QSPI(reg, CSN) = pin;
   16e16:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
   16e1a:	e784      	b.n	16d26 <pinctrl_configure_pins+0x62>
			NRF_PSEL_QSPI(reg, IO0) = pin;
   16e1c:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
			if (write != NO_WRITE) {
   16e20:	e7f5      	b.n	16e0e <pinctrl_configure_pins+0x14a>
			NRF_PSEL_QSPI(reg, IO1) = pin;
   16e22:	f8c2 3534 	str.w	r3, [r2, #1332]	; 0x534
   16e26:	e7f2      	b.n	16e0e <pinctrl_configure_pins+0x14a>
			NRF_PSEL_QSPI(reg, IO2) = pin;
   16e28:	f8c2 3538 	str.w	r3, [r2, #1336]	; 0x538
			if (write != NO_WRITE) {
   16e2c:	e7ef      	b.n	16e0e <pinctrl_configure_pins+0x14a>
			NRF_PSEL_QSPI(reg, IO3) = pin;
   16e2e:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
			if (write != NO_WRITE) {
   16e32:	e7ec      	b.n	16e0e <pinctrl_configure_pins+0x14a>
		switch (NRF_GET_FUN(pins[i])) {
   16e34:	f06f 0085 	mvn.w	r0, #133	; 0x85
   16e38:	e74f      	b.n	16cda <pinctrl_configure_pins+0x16>
   16e3a:	bf00      	nop
   16e3c:	40842500 	.word	0x40842500
   16e40:	40842800 	.word	0x40842800

00016e44 <mbox_nrf_init>:

	nrfx_ipc_config_load(&ch_config);
}

static int mbox_nrf_init(const struct device *dev)
{
   16e44:	b5b0      	push	{r4, r5, r7, lr}
   16e46:	b0a2      	sub	sp, #136	; 0x88
   16e48:	4604      	mov	r4, r0
	struct mbox_nrf_data *data = dev->data;
   16e4a:	6902      	ldr	r2, [r0, #16]
{
   16e4c:	af00      	add	r7, sp, #0

	data->dev = dev;
   16e4e:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80

	nrfx_ipc_init(0, mbox_dispatcher, (void *) data);
   16e52:	492d      	ldr	r1, [pc, #180]	; (16f08 <mbox_nrf_init+0xc4>)
   16e54:	2000      	movs	r0, #0
   16e56:	f000 ff39 	bl	17ccc <nrfx_ipc_init>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   16e5a:	2200      	movs	r2, #0
   16e5c:	2101      	movs	r1, #1
   16e5e:	202a      	movs	r0, #42	; 0x2a
   16e60:	f7f5 fe1c 	bl	ca9c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	enable_dt_channels(dev);
   16e64:	6864      	ldr	r4, [r4, #4]
	nrfx_ipc_config_t ch_config = { 0 };
   16e66:	2284      	movs	r2, #132	; 0x84
   16e68:	2100      	movs	r1, #0
   16e6a:	1d38      	adds	r0, r7, #4
   16e6c:	f004 fd3c 	bl	1b8e8 <memset>
	if (conf->tx_mask >= BIT(IPC_CONF_NUM)) {
   16e70:	6863      	ldr	r3, [r4, #4]
   16e72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   16e76:	d310      	bcc.n	16e9a <mbox_nrf_init+0x56>
		LOG_WRN("tx_mask too big (or IPC_CONF_NUM too small)");
   16e78:	466d      	mov	r5, sp
   16e7a:	b088      	sub	sp, #32
   16e7c:	466a      	mov	r2, sp
   16e7e:	4b23      	ldr	r3, [pc, #140]	; (16f0c <mbox_nrf_init+0xc8>)
   16e80:	6153      	str	r3, [r2, #20]
   16e82:	4b23      	ldr	r3, [pc, #140]	; (16f10 <mbox_nrf_init+0xcc>)
   16e84:	6193      	str	r3, [r2, #24]
   16e86:	2303      	movs	r3, #3
   16e88:	f842 3f10 	str.w	r3, [r2, #16]!
   16e8c:	2300      	movs	r3, #0
   16e8e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   16e92:	4820      	ldr	r0, [pc, #128]	; (16f14 <mbox_nrf_init+0xd0>)
   16e94:	f7f4 fb64 	bl	b560 <z_impl_z_log_msg_static_create>
   16e98:	46ad      	mov	sp, r5
	if (conf->rx_mask >= BIT(IPC_CONF_NUM)) {
   16e9a:	6823      	ldr	r3, [r4, #0]
   16e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   16ea0:	d310      	bcc.n	16ec4 <mbox_nrf_init+0x80>
		LOG_WRN("rx_mask too big (or IPC_CONF_NUM too small)");
   16ea2:	466d      	mov	r5, sp
   16ea4:	b088      	sub	sp, #32
   16ea6:	466a      	mov	r2, sp
   16ea8:	4b1b      	ldr	r3, [pc, #108]	; (16f18 <mbox_nrf_init+0xd4>)
   16eaa:	6153      	str	r3, [r2, #20]
   16eac:	4b18      	ldr	r3, [pc, #96]	; (16f10 <mbox_nrf_init+0xcc>)
   16eae:	6193      	str	r3, [r2, #24]
   16eb0:	2303      	movs	r3, #3
   16eb2:	f842 3f10 	str.w	r3, [r2, #16]!
   16eb6:	2300      	movs	r3, #0
   16eb8:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   16ebc:	4815      	ldr	r0, [pc, #84]	; (16f14 <mbox_nrf_init+0xd0>)
   16ebe:	f7f4 fb4f 	bl	b560 <z_impl_z_log_msg_static_create>
   16ec2:	46ad      	mov	sp, r5
	ch_config.receive_events_enabled = 0;
   16ec4:	2300      	movs	r3, #0
			ch_config.send_task_config[ch] = BIT(ch);
   16ec6:	2001      	movs	r0, #1
	ch_config.receive_events_enabled = 0;
   16ec8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   16ecc:	1d3a      	adds	r2, r7, #4
		if (conf->tx_mask & BIT(ch)) {
   16ece:	6861      	ldr	r1, [r4, #4]
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   16ed0:	3204      	adds	r2, #4
		if (conf->tx_mask & BIT(ch)) {
   16ed2:	40d9      	lsrs	r1, r3
   16ed4:	07cd      	lsls	r5, r1, #31
			ch_config.send_task_config[ch] = BIT(ch);
   16ed6:	bf44      	itt	mi
   16ed8:	fa00 f103 	lslmi.w	r1, r0, r3
   16edc:	f842 1c04 	strmi.w	r1, [r2, #-4]
		if (conf->rx_mask & BIT(ch)) {
   16ee0:	6821      	ldr	r1, [r4, #0]
   16ee2:	40d9      	lsrs	r1, r3
   16ee4:	07c9      	lsls	r1, r1, #31
			ch_config.receive_event_config[ch] = BIT(ch);
   16ee6:	bf48      	it	mi
   16ee8:	fa00 f103 	lslmi.w	r1, r0, r3
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   16eec:	f103 0301 	add.w	r3, r3, #1
			ch_config.receive_event_config[ch] = BIT(ch);
   16ef0:	bf48      	it	mi
   16ef2:	63d1      	strmi	r1, [r2, #60]	; 0x3c
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   16ef4:	2b10      	cmp	r3, #16
   16ef6:	d1ea      	bne.n	16ece <mbox_nrf_init+0x8a>
	nrfx_ipc_config_load(&ch_config);
   16ef8:	1d38      	adds	r0, r7, #4
   16efa:	f000 feff 	bl	17cfc <nrfx_ipc_config_load>

	return 0;
}
   16efe:	2000      	movs	r0, #0
   16f00:	3788      	adds	r7, #136	; 0x88
   16f02:	46bd      	mov	sp, r7
   16f04:	bdb0      	pop	{r4, r5, r7, pc}
   16f06:	bf00      	nop
   16f08:	00017031 	.word	0x00017031
   16f0c:	00023c3e 	.word	0x00023c3e
   16f10:	00023d32 	.word	0x00023d32
   16f14:	0001fcec 	.word	0x0001fcec
   16f18:	00023c6e 	.word	0x00023c6e

00016f1c <mbox_nrf_set_enabled>:
{
   16f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   16f1e:	290f      	cmp	r1, #15
{
   16f20:	460c      	mov	r4, r1
	struct mbox_nrf_data *data = dev->data;
   16f22:	6905      	ldr	r5, [r0, #16]
{
   16f24:	af00      	add	r7, sp, #0
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   16f26:	d848      	bhi.n	16fba <mbox_nrf_set_enabled+0x9e>
   16f28:	6843      	ldr	r3, [r0, #4]
   16f2a:	681b      	ldr	r3, [r3, #0]
   16f2c:	40cb      	lsrs	r3, r1
   16f2e:	07db      	lsls	r3, r3, #31
   16f30:	d543      	bpl.n	16fba <mbox_nrf_set_enabled+0x9e>
	if ((enable == 0 && (!(data->enabled_mask & BIT(channel)))) ||
   16f32:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   16f36:	40cb      	lsrs	r3, r1
   16f38:	f003 0301 	and.w	r3, r3, #1
   16f3c:	b91a      	cbnz	r2, 16f46 <mbox_nrf_set_enabled+0x2a>
   16f3e:	bb43      	cbnz	r3, 16f92 <mbox_nrf_set_enabled+0x76>
		return -EALREADY;
   16f40:	f06f 0077 	mvn.w	r0, #119	; 0x77
   16f44:	e037      	b.n	16fb6 <mbox_nrf_set_enabled+0x9a>
	    (enable != 0 &&   (data->enabled_mask & BIT(channel)))) {
   16f46:	2b00      	cmp	r3, #0
   16f48:	d1fa      	bne.n	16f40 <mbox_nrf_set_enabled+0x24>
	if (enable && (data->cb[channel] == NULL)) {
   16f4a:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
   16f4e:	b97b      	cbnz	r3, 16f70 <mbox_nrf_set_enabled+0x54>
		LOG_WRN("Enabling channel without a registered callback\n");
   16f50:	466e      	mov	r6, sp
   16f52:	b088      	sub	sp, #32
   16f54:	466a      	mov	r2, sp
   16f56:	491a      	ldr	r1, [pc, #104]	; (16fc0 <mbox_nrf_set_enabled+0xa4>)
   16f58:	6151      	str	r1, [r2, #20]
   16f5a:	491a      	ldr	r1, [pc, #104]	; (16fc4 <mbox_nrf_set_enabled+0xa8>)
   16f5c:	6191      	str	r1, [r2, #24]
   16f5e:	2103      	movs	r1, #3
   16f60:	f842 1f10 	str.w	r1, [r2, #16]!
   16f64:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   16f68:	4817      	ldr	r0, [pc, #92]	; (16fc8 <mbox_nrf_set_enabled+0xac>)
   16f6a:	f7f4 faf9 	bl	b560 <z_impl_z_log_msg_static_create>
   16f6e:	46b5      	mov	sp, r6
	if (enable && data->enabled_mask == 0) {
   16f70:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   16f74:	b913      	cbnz	r3, 16f7c <mbox_nrf_set_enabled+0x60>
		irq_enable(DT_INST_IRQN(0));
   16f76:	202a      	movs	r0, #42	; 0x2a
   16f78:	f7f5 fd60 	bl	ca3c <arch_irq_enable>
		data->enabled_mask |= BIT(channel);
   16f7c:	2201      	movs	r2, #1
   16f7e:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   16f82:	40a2      	lsls	r2, r4
   16f84:	4313      	orrs	r3, r2
   16f86:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
		nrfx_ipc_receive_event_enable(channel);
   16f8a:	b2e0      	uxtb	r0, r4
   16f8c:	f000 fed6 	bl	17d3c <nrfx_ipc_receive_event_enable>
   16f90:	e00a      	b.n	16fa8 <mbox_nrf_set_enabled+0x8c>
		nrfx_ipc_receive_event_disable(channel);
   16f92:	b2c8      	uxtb	r0, r1
   16f94:	f000 feda 	bl	17d4c <nrfx_ipc_receive_event_disable>
		data->enabled_mask &= ~BIT(channel);
   16f98:	2201      	movs	r2, #1
   16f9a:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   16f9e:	40a2      	lsls	r2, r4
   16fa0:	ea23 0302 	bic.w	r3, r3, r2
   16fa4:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
	if (data->enabled_mask == 0) {
   16fa8:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   16fac:	b913      	cbnz	r3, 16fb4 <mbox_nrf_set_enabled+0x98>
		irq_disable(DT_INST_IRQN(0));
   16fae:	202a      	movs	r0, #42	; 0x2a
   16fb0:	f7f5 fd52 	bl	ca58 <arch_irq_disable>
	return 0;
   16fb4:	2000      	movs	r0, #0
}
   16fb6:	46bd      	mov	sp, r7
   16fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   16fba:	f06f 0015 	mvn.w	r0, #21
   16fbe:	e7fa      	b.n	16fb6 <mbox_nrf_set_enabled+0x9a>
   16fc0:	00023c9e 	.word	0x00023c9e
   16fc4:	00023d63 	.word	0x00023d63
   16fc8:	0001fcec 	.word	0x0001fcec

00016fcc <mbox_nrf_send>:
{
   16fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16fce:	4605      	mov	r5, r0
   16fd0:	460c      	mov	r4, r1
   16fd2:	af00      	add	r7, sp, #0
	if (msg) {
   16fd4:	b182      	cbz	r2, 16ff8 <mbox_nrf_send+0x2c>
		LOG_WRN("Sending data not supported");
   16fd6:	466e      	mov	r6, sp
   16fd8:	b088      	sub	sp, #32
   16fda:	466a      	mov	r2, sp
   16fdc:	4b11      	ldr	r3, [pc, #68]	; (17024 <mbox_nrf_send+0x58>)
   16fde:	6153      	str	r3, [r2, #20]
   16fe0:	4b11      	ldr	r3, [pc, #68]	; (17028 <mbox_nrf_send+0x5c>)
   16fe2:	6193      	str	r3, [r2, #24]
   16fe4:	2303      	movs	r3, #3
   16fe6:	f842 3f10 	str.w	r3, [r2, #16]!
   16fea:	2300      	movs	r3, #0
   16fec:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   16ff0:	480e      	ldr	r0, [pc, #56]	; (1702c <mbox_nrf_send+0x60>)
   16ff2:	f7f4 fab5 	bl	b560 <z_impl_z_log_msg_static_create>
   16ff6:	46b5      	mov	sp, r6
	return ((ch < IPC_CONF_NUM) && (conf->tx_mask & BIT(ch)));
   16ff8:	2c0f      	cmp	r4, #15
   16ffa:	d80f      	bhi.n	1701c <mbox_nrf_send+0x50>
   16ffc:	686b      	ldr	r3, [r5, #4]
   16ffe:	685b      	ldr	r3, [r3, #4]
   17000:	40e3      	lsrs	r3, r4
   17002:	07db      	lsls	r3, r3, #31
   17004:	d50a      	bpl.n	1701c <mbox_nrf_send+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17006:	2301      	movs	r3, #1
	return 0;
   17008:	2000      	movs	r0, #0
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
   1700a:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1700c:	b2e4      	uxtb	r4, r4
   1700e:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   17012:	f504 3428 	add.w	r4, r4, #172032	; 0x2a000
   17016:	6023      	str	r3, [r4, #0]
}
   17018:	46bd      	mov	sp, r7
   1701a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   1701c:	f06f 0015 	mvn.w	r0, #21
   17020:	e7fa      	b.n	17018 <mbox_nrf_send+0x4c>
   17022:	bf00      	nop
   17024:	00023cd2 	.word	0x00023cd2
   17028:	00023d55 	.word	0x00023d55
   1702c:	0001fcec 	.word	0x0001fcec

00017030 <mbox_dispatcher>:
{
   17030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct device *dev = data->dev;
   17034:	f8d1 6080 	ldr.w	r6, [r1, #128]	; 0x80
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   17038:	280f      	cmp	r0, #15
{
   1703a:	4604      	mov	r4, r0
   1703c:	460d      	mov	r5, r1
   1703e:	6873      	ldr	r3, [r6, #4]
   17040:	af00      	add	r7, sp, #0
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   17042:	d803      	bhi.n	1704c <mbox_dispatcher+0x1c>
   17044:	681b      	ldr	r3, [r3, #0]
   17046:	40c3      	lsrs	r3, r0
   17048:	07db      	lsls	r3, r3, #31
   1704a:	d410      	bmi.n	1706e <mbox_dispatcher+0x3e>
		LOG_WRN("RX event on illegal channel");
   1704c:	46e8      	mov	r8, sp
   1704e:	b088      	sub	sp, #32
   17050:	466a      	mov	r2, sp
   17052:	4b18      	ldr	r3, [pc, #96]	; (170b4 <mbox_dispatcher+0x84>)
   17054:	6153      	str	r3, [r2, #20]
   17056:	4b18      	ldr	r3, [pc, #96]	; (170b8 <mbox_dispatcher+0x88>)
   17058:	6193      	str	r3, [r2, #24]
   1705a:	2303      	movs	r3, #3
   1705c:	f842 3f10 	str.w	r3, [r2, #16]!
   17060:	2300      	movs	r3, #0
   17062:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   17066:	4815      	ldr	r0, [pc, #84]	; (170bc <mbox_dispatcher+0x8c>)
   17068:	f7f4 fa7a 	bl	b560 <z_impl_z_log_msg_static_create>
   1706c:	46c5      	mov	sp, r8
	if (!(data->enabled_mask & BIT(channel))) {
   1706e:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   17072:	40e3      	lsrs	r3, r4
   17074:	f013 0301 	ands.w	r3, r3, #1
   17078:	d10f      	bne.n	1709a <mbox_dispatcher+0x6a>
		LOG_WRN("RX event on disabled channel");
   1707a:	46e8      	mov	r8, sp
   1707c:	b088      	sub	sp, #32
   1707e:	466a      	mov	r2, sp
   17080:	490f      	ldr	r1, [pc, #60]	; (170c0 <mbox_dispatcher+0x90>)
   17082:	6151      	str	r1, [r2, #20]
   17084:	490c      	ldr	r1, [pc, #48]	; (170b8 <mbox_dispatcher+0x88>)
   17086:	6191      	str	r1, [r2, #24]
   17088:	2103      	movs	r1, #3
   1708a:	f842 1f10 	str.w	r1, [r2, #16]!
   1708e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   17092:	480a      	ldr	r0, [pc, #40]	; (170bc <mbox_dispatcher+0x8c>)
   17094:	f7f4 fa64 	bl	b560 <z_impl_z_log_msg_static_create>
   17098:	46c5      	mov	sp, r8
	if (data->cb[channel] != NULL) {
   1709a:	eb05 0284 	add.w	r2, r5, r4, lsl #2
   1709e:	f855 5024 	ldr.w	r5, [r5, r4, lsl #2]
   170a2:	b125      	cbz	r5, 170ae <mbox_dispatcher+0x7e>
		data->cb[channel](dev, channel, data->user_data[channel], NULL);
   170a4:	2300      	movs	r3, #0
   170a6:	4621      	mov	r1, r4
   170a8:	4630      	mov	r0, r6
   170aa:	6c12      	ldr	r2, [r2, #64]	; 0x40
   170ac:	47a8      	blx	r5
}
   170ae:	46bd      	mov	sp, r7
   170b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   170b4:	00023cf1 	.word	0x00023cf1
   170b8:	00023d45 	.word	0x00023d45
   170bc:	0001fcec 	.word	0x0001fcec
   170c0:	00023d11 	.word	0x00023d11

000170c4 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   170c4:	b598      	push	{r3, r4, r7, lr}
   170c6:	af00      	add	r7, sp, #0
	z_impl_log_panic();
   170c8:	f7f4 f96a 	bl	b3a0 <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   170cc:	466c      	mov	r4, sp
   170ce:	b088      	sub	sp, #32
   170d0:	466a      	mov	r2, sp
   170d2:	4b08      	ldr	r3, [pc, #32]	; (170f4 <k_sys_fatal_error_handler+0x30>)
   170d4:	6153      	str	r3, [r2, #20]
   170d6:	4b08      	ldr	r3, [pc, #32]	; (170f8 <k_sys_fatal_error_handler+0x34>)
   170d8:	6193      	str	r3, [r2, #24]
   170da:	2303      	movs	r3, #3
   170dc:	f842 3f10 	str.w	r3, [r2, #16]!
   170e0:	4806      	ldr	r0, [pc, #24]	; (170fc <k_sys_fatal_error_handler+0x38>)
   170e2:	2300      	movs	r3, #0
   170e4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   170e8:	f7f4 fa3a 	bl	b560 <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
   170ec:	2000      	movs	r0, #0
   170ee:	46a5      	mov	sp, r4
   170f0:	f7f6 f97c 	bl	d3ec <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   170f4:	00023d91 	.word	0x00023d91
   170f8:	00023da6 	.word	0x00023da6
   170fc:	0001fcbc 	.word	0x0001fcbc

00017100 <tfm_ns_interface_dispatch>:
K_MUTEX_DEFINE(tfm_mutex);

int32_t tfm_ns_interface_dispatch(veneer_fn fn,
				  uint32_t arg0, uint32_t arg1,
				  uint32_t arg2, uint32_t arg3)
{
   17100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17104:	461f      	mov	r7, r3
	return !z_sys_post_kernel;
   17106:	4b15      	ldr	r3, [pc, #84]	; (1715c <tfm_ns_interface_dispatch+0x5c>)
   17108:	4604      	mov	r4, r0
   1710a:	f893 8000 	ldrb.w	r8, [r3]
   1710e:	460d      	mov	r5, r1
   17110:	4616      	mov	r6, r2
   17112:	b0a2      	sub	sp, #136	; 0x88
	int32_t result;
	bool is_pre_kernel = k_is_pre_kernel();

	if (!is_pre_kernel) {
   17114:	f1b8 0f00 	cmp.w	r8, #0
   17118:	d115      	bne.n	17146 <tfm_ns_interface_dispatch+0x46>
#endif
	}

	struct fpu_ctx_full context_buffer;

	z_arm_save_fp_context(&context_buffer);
   1711a:	4668      	mov	r0, sp
   1711c:	f004 fb51 	bl	1b7c2 <z_arm_save_fp_context>

	result = fn(arg0, arg1, arg2, arg3);
   17120:	463a      	mov	r2, r7
   17122:	4631      	mov	r1, r6
   17124:	4628      	mov	r0, r5
   17126:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   17128:	47a0      	blx	r4
   1712a:	4604      	mov	r4, r0

	z_arm_restore_fp_context(&context_buffer);
   1712c:	4668      	mov	r0, sp
   1712e:	f004 fb49 	bl	1b7c4 <z_arm_restore_fp_context>

	if (!is_pre_kernel) {
   17132:	f1b8 0f00 	cmp.w	r8, #0
   17136:	d002      	beq.n	1713e <tfm_ns_interface_dispatch+0x3e>
	return z_impl_k_mutex_unlock(mutex);
   17138:	4809      	ldr	r0, [pc, #36]	; (17160 <tfm_ns_interface_dispatch+0x60>)
   1713a:	f001 fd0b 	bl	18b54 <z_impl_k_mutex_unlock>

		k_mutex_unlock(&tfm_mutex);
	}

	return result;
}
   1713e:	4620      	mov	r0, r4
   17140:	b022      	add	sp, #136	; 0x88
   17142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
   17146:	f04f 32ff 	mov.w	r2, #4294967295
   1714a:	f04f 33ff 	mov.w	r3, #4294967295
   1714e:	4804      	ldr	r0, [pc, #16]	; (17160 <tfm_ns_interface_dispatch+0x60>)
   17150:	f001 fc86 	bl	18a60 <z_impl_k_mutex_lock>
		if (k_mutex_lock(&tfm_mutex, K_FOREVER) != 0) {
   17154:	2800      	cmp	r0, #0
   17156:	d0e0      	beq.n	1711a <tfm_ns_interface_dispatch+0x1a>
			return (int32_t)TFM_ERROR_GENERIC;
   17158:	241f      	movs	r4, #31
   1715a:	e7f0      	b.n	1713e <tfm_ns_interface_dispatch+0x3e>
   1715c:	2000a076 	.word	0x2000a076
   17160:	200086f8 	.word	0x200086f8

00017164 <psa_generate_random>:
    return status;
}

psa_status_t psa_generate_random(uint8_t *output,
                                 size_t output_size)
{
   17164:	b530      	push	{r4, r5, lr}
   17166:	b095      	sub	sp, #84	; 0x54
   17168:	4605      	mov	r5, r0
   1716a:	460c      	mov	r4, r1
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
   1716c:	2230      	movs	r2, #48	; 0x30
   1716e:	2100      	movs	r1, #0
   17170:	a808      	add	r0, sp, #32
   17172:	f004 fbb9 	bl	1b8e8 <memset>
   17176:	233f      	movs	r3, #63	; 0x3f
   17178:	9307      	str	r3, [sp, #28]
        .srv_id = TFM_CRYPTO_GENERATE_RANDOM_SID,
    };

    psa_invec in_vec[] = {
   1717a:	ab07      	add	r3, sp, #28
   1717c:	9303      	str	r3, [sp, #12]
   1717e:	2334      	movs	r3, #52	; 0x34
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };

    psa_outvec out_vec[] = {
   17180:	9406      	str	r4, [sp, #24]
   17182:	e9cd 3504 	strd	r3, r5, [sp, #16]
        {.base = output, .len = output_size},
    };

    if (output_size == 0) {
   17186:	b154      	cbz	r4, 1719e <psa_generate_random+0x3a>
        return PSA_SUCCESS;
    }

    status = API_DISPATCH(tfm_crypto_generate_random,
   17188:	2301      	movs	r3, #1
   1718a:	aa05      	add	r2, sp, #20
   1718c:	9200      	str	r2, [sp, #0]
   1718e:	2100      	movs	r1, #0
   17190:	4804      	ldr	r0, [pc, #16]	; (171a4 <psa_generate_random+0x40>)
   17192:	9301      	str	r3, [sp, #4]
   17194:	aa03      	add	r2, sp, #12
   17196:	f000 f807 	bl	171a8 <psa_call>
                          TFM_CRYPTO_GENERATE_RANDOM);

    return status;
}
   1719a:	b015      	add	sp, #84	; 0x54
   1719c:	bd30      	pop	{r4, r5, pc}
        return PSA_SUCCESS;
   1719e:	4620      	mov	r0, r4
   171a0:	e7fb      	b.n	1719a <psa_generate_random+0x36>
   171a2:	bf00      	nop
   171a4:	40000100 	.word	0x40000100

000171a8 <psa_call>:
psa_status_t psa_call(psa_handle_t handle, int32_t type,
                      const psa_invec *in_vec,
                      size_t in_len,
                      psa_outvec *out_vec,
                      size_t out_len)
{
   171a8:	b430      	push	{r4, r5}
    if ((type > INT16_MAX) ||
   171aa:	f501 4500 	add.w	r5, r1, #32768	; 0x8000
   171ae:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
{
   171b2:	9c03      	ldr	r4, [sp, #12]
    if ((type > INT16_MAX) ||
   171b4:	d20d      	bcs.n	171d2 <psa_call+0x2a>
        (type < INT16_MIN) ||
   171b6:	ea43 0504 	orr.w	r5, r3, r4
   171ba:	2dff      	cmp	r5, #255	; 0xff
   171bc:	d809      	bhi.n	171d2 <psa_call+0x2a>
    }

    return tfm_ns_interface_dispatch(
                                (veneer_fn)tfm_psa_call_veneer,
                                (uint32_t)handle,
                                PARAM_PACK(type, in_len, out_len),
   171be:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    return tfm_ns_interface_dispatch(
   171c2:	4613      	mov	r3, r2
   171c4:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
   171c8:	4601      	mov	r1, r0
                                (uint32_t)in_vec,
                                (uint32_t)out_vec);
}
   171ca:	bc30      	pop	{r4, r5}
    return tfm_ns_interface_dispatch(
   171cc:	4803      	ldr	r0, [pc, #12]	; (171dc <psa_call+0x34>)
   171ce:	f7ff bf97 	b.w	17100 <tfm_ns_interface_dispatch>
}
   171d2:	f06f 0080 	mvn.w	r0, #128	; 0x80
   171d6:	bc30      	pop	{r4, r5}
   171d8:	4770      	bx	lr
   171da:	bf00      	nop
   171dc:	00007c21 	.word	0x00007c21

000171e0 <psa_connect>:

/* Following veneers are only needed by connection-based services */
#if CONFIG_TFM_CONNECTION_BASED_SERVICE_API == 1
psa_handle_t psa_connect(uint32_t sid, uint32_t version)
{
    return tfm_ns_interface_dispatch(
   171e0:	2300      	movs	r3, #0
{
   171e2:	b507      	push	{r0, r1, r2, lr}
   171e4:	460a      	mov	r2, r1
    return tfm_ns_interface_dispatch(
   171e6:	9300      	str	r3, [sp, #0]
   171e8:	4601      	mov	r1, r0
   171ea:	4803      	ldr	r0, [pc, #12]	; (171f8 <psa_connect+0x18>)
   171ec:	f7ff ff88 	bl	17100 <tfm_ns_interface_dispatch>
                                (veneer_fn)tfm_psa_connect_veneer,
                                sid,
                                version,
                                0,
                                0);
}
   171f0:	b003      	add	sp, #12
   171f2:	f85d fb04 	ldr.w	pc, [sp], #4
   171f6:	bf00      	nop
   171f8:	00007c19 	.word	0x00007c19

000171fc <psa_close>:

void psa_close(psa_handle_t handle)
{
    (void)tfm_ns_interface_dispatch(
   171fc:	2300      	movs	r3, #0
{
   171fe:	b507      	push	{r0, r1, r2, lr}
   17200:	4601      	mov	r1, r0
    (void)tfm_ns_interface_dispatch(
   17202:	461a      	mov	r2, r3
   17204:	9300      	str	r3, [sp, #0]
   17206:	4803      	ldr	r0, [pc, #12]	; (17214 <psa_close+0x18>)
   17208:	f7ff ff7a 	bl	17100 <tfm_ns_interface_dispatch>
                         (veneer_fn)tfm_psa_close_veneer,
                         (uint32_t)handle,
                         0,
                         0,
                         0);
}
   1720c:	b003      	add	sp, #12
   1720e:	f85d fb04 	ldr.w	pc, [sp], #4
   17212:	bf00      	nop
   17214:	00007c11 	.word	0x00007c11

00017218 <SystemCoreClockUpdate>:
#endif

void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
   17218:	4b04      	ldr	r3, [pc, #16]	; (1722c <SystemCoreClockUpdate+0x14>)
   1721a:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
   1721e:	4b04      	ldr	r3, [pc, #16]	; (17230 <SystemCoreClockUpdate+0x18>)
   17220:	f002 0203 	and.w	r2, r2, #3
   17224:	40d3      	lsrs	r3, r2
   17226:	4a03      	ldr	r2, [pc, #12]	; (17234 <SystemCoreClockUpdate+0x1c>)
   17228:	6013      	str	r3, [r2, #0]
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#endif
}
   1722a:	4770      	bx	lr
   1722c:	40005000 	.word	0x40005000
   17230:	07a12000 	.word	0x07a12000
   17234:	200084ac 	.word	0x200084ac

00017238 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   17238:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   1723a:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   1723c:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   1723e:	fab2 f382 	clz	r3, r2
   17242:	f1c3 031f 	rsb	r3, r3, #31
   17246:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   17248:	fa05 f403 	lsl.w	r4, r5, r3
   1724c:	ea22 0404 	bic.w	r4, r2, r4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   17250:	e8d0 6fef 	ldaex	r6, [r0]
   17254:	4296      	cmp	r6, r2
   17256:	d104      	bne.n	17262 <nrfx_flag32_alloc+0x2a>
   17258:	e8c0 4fec 	stlex	ip, r4, [r0]
   1725c:	f1bc 0f00 	cmp.w	ip, #0
   17260:	d1f6      	bne.n	17250 <nrfx_flag32_alloc+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   17262:	d1eb      	bne.n	1723c <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   17264:	4801      	ldr	r0, [pc, #4]	; (1726c <nrfx_flag32_alloc+0x34>)
    *p_flag = idx;
   17266:	700b      	strb	r3, [r1, #0]
}
   17268:	bd70      	pop	{r4, r5, r6, pc}
   1726a:	bf00      	nop
   1726c:	0bad0000 	.word	0x0bad0000

00017270 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   17270:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   17272:	6803      	ldr	r3, [r0, #0]
   17274:	40cb      	lsrs	r3, r1
   17276:	07db      	lsls	r3, r3, #31
   17278:	d410      	bmi.n	1729c <nrfx_flag32_free+0x2c>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   1727a:	2301      	movs	r3, #1
   1727c:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   1727e:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   17280:	ea43 0102 	orr.w	r1, r3, r2
   17284:	e8d0 4fef 	ldaex	r4, [r0]
   17288:	4294      	cmp	r4, r2
   1728a:	d104      	bne.n	17296 <nrfx_flag32_free+0x26>
   1728c:	e8c0 1fec 	stlex	ip, r1, [r0]
   17290:	f1bc 0f00 	cmp.w	ip, #0
   17294:	d1f6      	bne.n	17284 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   17296:	d1f2      	bne.n	1727e <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   17298:	4801      	ldr	r0, [pc, #4]	; (172a0 <nrfx_flag32_free+0x30>)
}
   1729a:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1729c:	4801      	ldr	r0, [pc, #4]	; (172a4 <nrfx_flag32_free+0x34>)
   1729e:	e7fc      	b.n	1729a <nrfx_flag32_free+0x2a>
   172a0:	0bad0000 	.word	0x0bad0000
   172a4:	0bad0004 	.word	0x0bad0004

000172a8 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
   172a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    switch (domain)
   172aa:	2803      	cmp	r0, #3
   172ac:	f200 80a0 	bhi.w	173f0 <clock_stop+0x148>
   172b0:	e8df f000 	tbb	[pc, r0]
   172b4:	32251802 	.word	0x32251802
    p_reg->INTENCLR = mask;
   172b8:	2202      	movs	r2, #2
   172ba:	4b59      	ldr	r3, [pc, #356]	; (17420 <clock_stop+0x178>)
   172bc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   172c0:	2200      	movs	r2, #0
   172c2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   172c6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   172ca:	2201      	movs	r2, #1
   172cc:	60da      	str	r2, [r3, #12]
            return;
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   172ce:	2400      	movs	r4, #0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   172d0:	2301      	movs	r3, #1
   172d2:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
   172d6:	2803      	cmp	r0, #3
   172d8:	f200 808a 	bhi.w	173f0 <clock_stop+0x148>
   172dc:	e8df f000 	tbb	[pc, r0]
   172e0:	94736529 	.word	0x94736529
    p_reg->INTENCLR = mask;
   172e4:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   172e6:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
   172e8:	4b4d      	ldr	r3, [pc, #308]	; (17420 <clock_stop+0x178>)
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   172ea:	f10d 0407 	add.w	r4, sp, #7
   172ee:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   172f2:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   172f6:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   172fa:	605a      	str	r2, [r3, #4]
   172fc:	e7e8      	b.n	172d0 <clock_stop+0x28>
    p_reg->INTENCLR = mask;
   172fe:	f44f 7200 	mov.w	r2, #512	; 0x200
   17302:	4b47      	ldr	r3, [pc, #284]	; (17420 <clock_stop+0x178>)
   17304:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17308:	2200      	movs	r2, #0
   1730a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   1730e:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17312:	2201      	movs	r2, #1
   17314:	625a      	str	r2, [r3, #36]	; 0x24
   17316:	e7da      	b.n	172ce <clock_stop+0x26>
    p_reg->INTENCLR = mask;
   17318:	f44f 7280 	mov.w	r2, #256	; 0x100
   1731c:	4b40      	ldr	r3, [pc, #256]	; (17420 <clock_stop+0x178>)
   1731e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17322:	2200      	movs	r2, #0
   17324:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   17328:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1732c:	2201      	movs	r2, #1
   1732e:	61da      	str	r2, [r3, #28]
   17330:	e7cd      	b.n	172ce <clock_stop+0x26>
    switch (domain)
   17332:	f242 7510 	movw	r5, #10000	; 0x2710
   17336:	4e3a      	ldr	r6, [pc, #232]	; (17420 <clock_stop+0x178>)
            if (p_clk_src != NULL)
   17338:	b36c      	cbz	r4, 17396 <clock_stop+0xee>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1733a:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   1733e:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   17342:	7023      	strb	r3, [r4, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   17344:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   17348:	03d9      	lsls	r1, r3, #15
   1734a:	d551      	bpl.n	173f0 <clock_stop+0x148>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   1734c:	f89d 0007 	ldrb.w	r0, [sp, #7]
   17350:	2801      	cmp	r0, #1
   17352:	d14d      	bne.n	173f0 <clock_stop+0x148>
   17354:	f006 fe5c 	bl	1e010 <nrfx_busy_wait>
   17358:	3d01      	subs	r5, #1
   1735a:	d1ed      	bne.n	17338 <clock_stop+0x90>
   1735c:	e048      	b.n	173f0 <clock_stop+0x148>
   1735e:	f89d 0007 	ldrb.w	r0, [sp, #7]
   17362:	2801      	cmp	r0, #1
   17364:	d144      	bne.n	173f0 <clock_stop+0x148>
   17366:	f006 fe53 	bl	1e010 <nrfx_busy_wait>
   1736a:	3d01      	subs	r5, #1
   1736c:	d14f      	bne.n	1740e <clock_stop+0x166>
   1736e:	e03f      	b.n	173f0 <clock_stop+0x148>
   17370:	f89d 0007 	ldrb.w	r0, [sp, #7]
   17374:	2801      	cmp	r0, #1
   17376:	d13b      	bne.n	173f0 <clock_stop+0x148>
   17378:	f006 fe4a 	bl	1e010 <nrfx_busy_wait>
   1737c:	3d01      	subs	r5, #1
   1737e:	d037      	beq.n	173f0 <clock_stop+0x148>
            if (p_clk_src != NULL)
   17380:	b1bc      	cbz	r4, 173b2 <clock_stop+0x10a>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   17382:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   17386:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   1738a:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1738c:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   17390:	03db      	lsls	r3, r3, #15
   17392:	d52d      	bpl.n	173f0 <clock_stop+0x148>
   17394:	e7ec      	b.n	17370 <clock_stop+0xc8>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   17396:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   1739a:	03da      	lsls	r2, r3, #15
   1739c:	d528      	bpl.n	173f0 <clock_stop+0x148>
   1739e:	2001      	movs	r0, #1
   173a0:	f006 fe36 	bl	1e010 <nrfx_busy_wait>
   173a4:	3d01      	subs	r5, #1
   173a6:	d1f6      	bne.n	17396 <clock_stop+0xee>
   173a8:	e022      	b.n	173f0 <clock_stop+0x148>
    switch (domain)
   173aa:	f242 7510 	movw	r5, #10000	; 0x2710
   173ae:	4e1c      	ldr	r6, [pc, #112]	; (17420 <clock_stop+0x178>)
   173b0:	e7e6      	b.n	17380 <clock_stop+0xd8>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   173b2:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   173b6:	03d8      	lsls	r0, r3, #15
   173b8:	d51a      	bpl.n	173f0 <clock_stop+0x148>
   173ba:	2001      	movs	r0, #1
   173bc:	f006 fe28 	bl	1e010 <nrfx_busy_wait>
   173c0:	3d01      	subs	r5, #1
   173c2:	d1f6      	bne.n	173b2 <clock_stop+0x10a>
   173c4:	e014      	b.n	173f0 <clock_stop+0x148>
    switch (domain)
   173c6:	f242 7510 	movw	r5, #10000	; 0x2710
   173ca:	4e15      	ldr	r6, [pc, #84]	; (17420 <clock_stop+0x178>)
            if (p_clk_src != NULL)
   173cc:	b194      	cbz	r4, 173f4 <clock_stop+0x14c>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
   173ce:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   173d2:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   173d6:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   173d8:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   173dc:	03d9      	lsls	r1, r3, #15
   173de:	d507      	bpl.n	173f0 <clock_stop+0x148>
   173e0:	f89d 0007 	ldrb.w	r0, [sp, #7]
   173e4:	2801      	cmp	r0, #1
   173e6:	d103      	bne.n	173f0 <clock_stop+0x148>
   173e8:	f006 fe12 	bl	1e010 <nrfx_busy_wait>
   173ec:	3d01      	subs	r5, #1
   173ee:	d1ed      	bne.n	173cc <clock_stop+0x124>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   173f0:	b002      	add	sp, #8
   173f2:	bd70      	pop	{r4, r5, r6, pc}
   173f4:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   173f8:	03da      	lsls	r2, r3, #15
   173fa:	d5f9      	bpl.n	173f0 <clock_stop+0x148>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   173fc:	2001      	movs	r0, #1
   173fe:	f006 fe07 	bl	1e010 <nrfx_busy_wait>
   17402:	3d01      	subs	r5, #1
   17404:	d1f6      	bne.n	173f4 <clock_stop+0x14c>
   17406:	e7f3      	b.n	173f0 <clock_stop+0x148>
    switch (domain)
   17408:	f242 7510 	movw	r5, #10000	; 0x2710
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
   1740c:	4e04      	ldr	r6, [pc, #16]	; (17420 <clock_stop+0x178>)
   1740e:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
   17412:	03db      	lsls	r3, r3, #15
   17414:	d5ec      	bpl.n	173f0 <clock_stop+0x148>
   17416:	2c00      	cmp	r4, #0
   17418:	d1a1      	bne.n	1735e <clock_stop+0xb6>
   1741a:	2001      	movs	r0, #1
   1741c:	e7a3      	b.n	17366 <clock_stop+0xbe>
   1741e:	bf00      	nop
   17420:	40005000 	.word	0x40005000

00017424 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   17424:	4b04      	ldr	r3, [pc, #16]	; (17438 <nrfx_clock_init+0x14>)
   17426:	791a      	ldrb	r2, [r3, #4]
   17428:	b922      	cbnz	r2, 17434 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   1742a:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   1742c:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   1742e:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   17430:	4802      	ldr	r0, [pc, #8]	; (1743c <nrfx_clock_init+0x18>)
   17432:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   17434:	4802      	ldr	r0, [pc, #8]	; (17440 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   17436:	4770      	bx	lr
   17438:	20009ef8 	.word	0x20009ef8
   1743c:	0bad0000 	.word	0x0bad0000
   17440:	0bad000c 	.word	0x0bad000c

00017444 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   17444:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   17446:	2005      	movs	r0, #5
   17448:	f7f5 fb1a 	bl	ca80 <arch_irq_is_enabled>
   1744c:	b910      	cbnz	r0, 17454 <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   1744e:	2005      	movs	r0, #5
   17450:	f7f5 faf4 	bl	ca3c <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
   17454:	2201      	movs	r2, #1
   17456:	4b04      	ldr	r3, [pc, #16]	; (17468 <nrfx_clock_enable+0x24>)
   17458:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
   1745c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
   17460:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   17464:	bd08      	pop	{r3, pc}
   17466:	bf00      	nop
   17468:	40005000 	.word	0x40005000

0001746c <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   1746c:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   1746e:	2803      	cmp	r0, #3
   17470:	d818      	bhi.n	174a4 <nrfx_clock_start+0x38>
   17472:	e8df f000 	tbb	[pc, r0]
   17476:	3002      	.short	0x3002
   17478:	483b      	.short	0x483b
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1747a:	4a29      	ldr	r2, [pc, #164]	; (17520 <nrfx_clock_start+0xb4>)
   1747c:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   17480:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   17484:	03c9      	lsls	r1, r1, #15
   17486:	d40e      	bmi.n	174a6 <nrfx_clock_start+0x3a>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   17488:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                    // LF clock is already running. Inspect its source.
                    // If LF clock source is inappropriate then it will be stopped and modified.
                    // Ignore return value as LF clock will be started again regardless of the result.
                    (void)clock_lfclksrc_tweak(&lfclksrc);
                }
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   1748c:	07db      	lsls	r3, r3, #31
   1748e:	d513      	bpl.n	174b8 <nrfx_clock_start+0x4c>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   17490:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
   17494:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   17498:	3b01      	subs	r3, #1
   1749a:	2b01      	cmp	r3, #1
   1749c:	d809      	bhi.n	174b2 <nrfx_clock_start+0x46>
    p_reg->INTENSET = mask;
   1749e:	2302      	movs	r3, #2
   174a0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   174a4:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   174a6:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   174aa:	2b02      	cmp	r3, #2
   174ac:	d005      	beq.n	174ba <nrfx_clock_start+0x4e>
   174ae:	2b01      	cmp	r3, #1
   174b0:	d002      	beq.n	174b8 <nrfx_clock_start+0x4c>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   174b2:	2000      	movs	r0, #0
   174b4:	f7ff fef8 	bl	172a8 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   174b8:	2301      	movs	r3, #1
    p_reg->LFCLKSRC = (uint32_t)(source);
   174ba:	4a19      	ldr	r2, [pc, #100]	; (17520 <nrfx_clock_start+0xb4>)
   174bc:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   174c0:	2300      	movs	r3, #0
   174c2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   174c6:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
   174ca:	2302      	movs	r3, #2
   174cc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   174d0:	2301      	movs	r3, #1
   174d2:	6093      	str	r3, [r2, #8]
}
   174d4:	e7e6      	b.n	174a4 <nrfx_clock_start+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   174d6:	2200      	movs	r2, #0
   174d8:	4b11      	ldr	r3, [pc, #68]	; (17520 <nrfx_clock_start+0xb4>)
   174da:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   174de:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   174e2:	2201      	movs	r2, #1
   174e4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   174e8:	601a      	str	r2, [r3, #0]
}
   174ea:	e7db      	b.n	174a4 <nrfx_clock_start+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   174ec:	2200      	movs	r2, #0
   174ee:	4b0c      	ldr	r3, [pc, #48]	; (17520 <nrfx_clock_start+0xb4>)
   174f0:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   174f4:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
   174f8:	f44f 7200 	mov.w	r2, #512	; 0x200
   174fc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17500:	2201      	movs	r2, #1
   17502:	621a      	str	r2, [r3, #32]
}
   17504:	e7ce      	b.n	174a4 <nrfx_clock_start+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17506:	2200      	movs	r2, #0
   17508:	4b05      	ldr	r3, [pc, #20]	; (17520 <nrfx_clock_start+0xb4>)
   1750a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   1750e:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
   17512:	f44f 7280 	mov.w	r2, #256	; 0x100
   17516:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1751a:	2201      	movs	r2, #1
   1751c:	619a      	str	r2, [r3, #24]
}
   1751e:	e7c1      	b.n	174a4 <nrfx_clock_start+0x38>
   17520:	40005000 	.word	0x40005000

00017524 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   17524:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   17526:	4b28      	ldr	r3, [pc, #160]	; (175c8 <nrfx_power_clock_irq_handler+0xa4>)
   17528:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   1752c:	b152      	cbz	r2, 17544 <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1752e:	2000      	movs	r0, #0
   17530:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   17534:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   17538:	2201      	movs	r2, #1
   1753a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1753e:	4b23      	ldr	r3, [pc, #140]	; (175cc <nrfx_power_clock_irq_handler+0xa8>)
   17540:	681b      	ldr	r3, [r3, #0]
   17542:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   17544:	4b20      	ldr	r3, [pc, #128]	; (175c8 <nrfx_power_clock_irq_handler+0xa4>)
   17546:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   1754a:	b18a      	cbz	r2, 17570 <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1754c:	2200      	movs	r2, #0
   1754e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   17552:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   17556:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1755a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   1755e:	f002 0203 	and.w	r2, r2, #3
   17562:	2a01      	cmp	r2, #1
   17564:	f04f 0102 	mov.w	r1, #2
   17568:	d126      	bne.n	175b8 <nrfx_power_clock_irq_handler+0x94>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1756a:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1756e:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   17570:	4b15      	ldr	r3, [pc, #84]	; (175c8 <nrfx_power_clock_irq_handler+0xa4>)
   17572:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
   17576:	b162      	cbz	r2, 17592 <nrfx_power_clock_irq_handler+0x6e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17578:	2200      	movs	r2, #0
   1757a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   1757e:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
   17582:	f44f 7280 	mov.w	r2, #256	; 0x100
   17586:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
   1758a:	4b10      	ldr	r3, [pc, #64]	; (175cc <nrfx_power_clock_irq_handler+0xa8>)
   1758c:	2004      	movs	r0, #4
   1758e:	681b      	ldr	r3, [r3, #0]
   17590:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   17592:	4b0d      	ldr	r3, [pc, #52]	; (175c8 <nrfx_power_clock_irq_handler+0xa4>)
   17594:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
   17598:	b1aa      	cbz	r2, 175c6 <nrfx_power_clock_irq_handler+0xa2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1759a:	2200      	movs	r2, #0
   1759c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   175a0:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
   175a4:	f44f 7200 	mov.w	r2, #512	; 0x200
   175a8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   175ac:	4b07      	ldr	r3, [pc, #28]	; (175cc <nrfx_power_clock_irq_handler+0xa8>)
   175ae:	2005      	movs	r0, #5
    }
#endif
}
   175b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   175b4:	681b      	ldr	r3, [r3, #0]
   175b6:	4718      	bx	r3
   175b8:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   175bc:	4b03      	ldr	r3, [pc, #12]	; (175cc <nrfx_power_clock_irq_handler+0xa8>)
   175be:	2001      	movs	r0, #1
   175c0:	681b      	ldr	r3, [r3, #0]
   175c2:	4798      	blx	r3
   175c4:	e7d4      	b.n	17570 <nrfx_power_clock_irq_handler+0x4c>
}
   175c6:	bd10      	pop	{r4, pc}
   175c8:	40005000 	.word	0x40005000
   175cc:	20009ef8 	.word	0x20009ef8

000175d0 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   175d0:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
   175d2:	4801      	ldr	r0, [pc, #4]	; (175d8 <nrfx_dppi_channel_alloc+0x8>)
   175d4:	f7ff be30 	b.w	17238 <nrfx_flag32_alloc>
   175d8:	200084b0 	.word	0x200084b0

000175dc <nrfx_dppi_channel_free>:
}

nrfx_err_t nrfx_dppi_channel_free(uint8_t channel)
{
    nrf_dppi_channels_disable(NRF_DPPIC, NRFX_BIT(channel));
   175dc:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   175de:	4a04      	ldr	r2, [pc, #16]	; (175f0 <nrfx_dppi_channel_free+0x14>)
   175e0:	4083      	lsls	r3, r0
{
   175e2:	4601      	mov	r1, r0
   175e4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    return nrfx_flag32_free(&m_allocated_channels, channel);
   175e8:	4802      	ldr	r0, [pc, #8]	; (175f4 <nrfx_dppi_channel_free+0x18>)
   175ea:	f7ff be41 	b.w	17270 <nrfx_flag32_free>
   175ee:	bf00      	nop
   175f0:	40017000 	.word	0x40017000
   175f4:	200084b0 	.word	0x200084b0

000175f8 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   175f8:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   175fa:	f003 021f 	and.w	r2, r3, #31
   175fe:	6002      	str	r2, [r0, #0]
}
   17600:	4a03      	ldr	r2, [pc, #12]	; (17610 <nrf_gpio_pin_port_decode+0x18>)
   17602:	4804      	ldr	r0, [pc, #16]	; (17614 <nrf_gpio_pin_port_decode+0x1c>)
    return pin_number >> 5;
   17604:	095b      	lsrs	r3, r3, #5
}
   17606:	2b01      	cmp	r3, #1
   17608:	bf18      	it	ne
   1760a:	4610      	movne	r0, r2
   1760c:	4770      	bx	lr
   1760e:	bf00      	nop
   17610:	40842500 	.word	0x40842500
   17614:	40842800 	.word	0x40842800

00017618 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   17618:	4b03      	ldr	r3, [pc, #12]	; (17628 <pin_in_use_by_te+0x10>)
   1761a:	3008      	adds	r0, #8
   1761c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   17620:	f3c0 1040 	ubfx	r0, r0, #5, #1
   17624:	4770      	bx	lr
   17626:	bf00      	nop
   17628:	200084b4 	.word	0x200084b4

0001762c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   1762c:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1762e:	4c0d      	ldr	r4, [pc, #52]	; (17664 <call_handler+0x38>)
   17630:	f100 0308 	add.w	r3, r0, #8
   17634:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
   17638:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1763a:	05da      	lsls	r2, r3, #23
{
   1763c:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1763e:	d507      	bpl.n	17650 <call_handler+0x24>
   17640:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   17644:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   17648:	6852      	ldr	r2, [r2, #4]
   1764a:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   1764e:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   17650:	68a3      	ldr	r3, [r4, #8]
   17652:	b12b      	cbz	r3, 17660 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   17654:	4631      	mov	r1, r6
   17656:	4628      	mov	r0, r5
   17658:	68e2      	ldr	r2, [r4, #12]
    }
}
   1765a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1765e:	4718      	bx	r3
}
   17660:	bd70      	pop	{r4, r5, r6, pc}
   17662:	bf00      	nop
   17664:	200084b4 	.word	0x200084b4

00017668 <release_handler>:
{
   17668:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1766a:	4a12      	ldr	r2, [pc, #72]	; (176b4 <release_handler+0x4c>)
   1766c:	3008      	adds	r0, #8
   1766e:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   17672:	05d9      	lsls	r1, r3, #23
   17674:	d51b      	bpl.n	176ae <release_handler+0x46>
   17676:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   1767a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1767e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   17682:	2000      	movs	r0, #0
   17684:	f102 040e 	add.w	r4, r2, #14
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   17688:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   1768c:	f413 7f80 	tst.w	r3, #256	; 0x100
   17690:	d003      	beq.n	1769a <release_handler+0x32>
   17692:	f3c3 2343 	ubfx	r3, r3, #9, #4
   17696:	4299      	cmp	r1, r3
   17698:	d009      	beq.n	176ae <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1769a:	3001      	adds	r0, #1
   1769c:	2830      	cmp	r0, #48	; 0x30
   1769e:	d1f3      	bne.n	17688 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   176a0:	2300      	movs	r3, #0
   176a2:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   176a6:	4804      	ldr	r0, [pc, #16]	; (176b8 <release_handler+0x50>)
}
   176a8:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   176aa:	f7ff bde1 	b.w	17270 <nrfx_flag32_free>
}
   176ae:	bc10      	pop	{r4}
   176b0:	4770      	bx	lr
   176b2:	bf00      	nop
   176b4:	200084b4 	.word	0x200084b4
   176b8:	20008528 	.word	0x20008528

000176bc <pin_handler_trigger_uninit>:
{
   176bc:	b538      	push	{r3, r4, r5, lr}
   176be:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   176c0:	f7ff ffaa 	bl	17618 <pin_in_use_by_te>
   176c4:	4c0b      	ldr	r4, [pc, #44]	; (176f4 <pin_handler_trigger_uninit+0x38>)
   176c6:	f102 0508 	add.w	r5, r2, #8
   176ca:	b160      	cbz	r0, 176e6 <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   176cc:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   176ce:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   176d2:	0b5b      	lsrs	r3, r3, #13
   176d4:	009b      	lsls	r3, r3, #2
   176d6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   176da:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   176de:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
   176e2:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
   176e6:	4610      	mov	r0, r2
   176e8:	f7ff ffbe 	bl	17668 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   176ec:	2300      	movs	r3, #0
   176ee:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   176f2:	bd38      	pop	{r3, r4, r5, pc}
   176f4:	200084b4 	.word	0x200084b4

000176f8 <nrfx_gpiote_input_configure>:
{
   176f8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   176fc:	4604      	mov	r4, r0
   176fe:	4690      	mov	r8, r2
   17700:	461d      	mov	r5, r3
    if (p_input_config)
   17702:	b301      	cbz	r1, 17746 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   17704:	4e4f      	ldr	r6, [pc, #316]	; (17844 <nrfx_gpiote_input_configure+0x14c>)
   17706:	f100 0708 	add.w	r7, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   1770a:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   1770e:	079b      	lsls	r3, r3, #30
   17710:	d502      	bpl.n	17718 <nrfx_gpiote_input_configure+0x20>
   17712:	f7ff ff81 	bl	17618 <pin_in_use_by_te>
   17716:	bb28      	cbnz	r0, 17764 <nrfx_gpiote_input_configure+0x6c>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   17718:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1771a:	4620      	mov	r0, r4
   1771c:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   17720:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   17724:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   17728:	f10d 020f 	add.w	r2, sp, #15
   1772c:	460b      	mov	r3, r1
   1772e:	f10d 010e 	add.w	r1, sp, #14
   17732:	f006 fc71 	bl	1e018 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   17736:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   1773a:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1773e:	f043 0301 	orr.w	r3, r3, #1
   17742:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_trigger_config)
   17746:	f1b8 0f00 	cmp.w	r8, #0
   1774a:	d02d      	beq.n	177a8 <nrfx_gpiote_input_configure+0xb0>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1774c:	4e3d      	ldr	r6, [pc, #244]	; (17844 <nrfx_gpiote_input_configure+0x14c>)
   1774e:	f104 0708 	add.w	r7, r4, #8
   17752:	f836 1017 	ldrh.w	r1, [r6, r7, lsl #1]
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   17756:	f898 0000 	ldrb.w	r0, [r8]
        if (pin_is_output(pin))
   1775a:	078a      	lsls	r2, r1, #30
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   1775c:	f8d8 3004 	ldr.w	r3, [r8, #4]
        if (pin_is_output(pin))
   17760:	d502      	bpl.n	17768 <nrfx_gpiote_input_configure+0x70>
            if (use_evt)
   17762:	b1cb      	cbz	r3, 17798 <nrfx_gpiote_input_configure+0xa0>
            return NRFX_ERROR_INVALID_PARAM;
   17764:	4838      	ldr	r0, [pc, #224]	; (17848 <nrfx_gpiote_input_configure+0x150>)
   17766:	e021      	b.n	177ac <nrfx_gpiote_input_configure+0xb4>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   17768:	f021 0120 	bic.w	r1, r1, #32
   1776c:	04c9      	lsls	r1, r1, #19
   1776e:	0cc9      	lsrs	r1, r1, #19
   17770:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
            if (use_evt)
   17774:	b183      	cbz	r3, 17798 <nrfx_gpiote_input_configure+0xa0>
                if (!edge)
   17776:	2803      	cmp	r0, #3
   17778:	d8f4      	bhi.n	17764 <nrfx_gpiote_input_configure+0x6c>
                uint8_t ch = *p_trigger_config->p_in_channel;
   1777a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1777e:	f893 c000 	ldrb.w	ip, [r3]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   17782:	4662      	mov	r2, ip
   17784:	0092      	lsls	r2, r2, #2
   17786:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1778a:	f502 323c 	add.w	r2, r2, #192512	; 0x2f000
   1778e:	b980      	cbnz	r0, 177b2 <nrfx_gpiote_input_configure+0xba>
    p_reg->CONFIG[idx] = 0;
   17790:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
   17794:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   17798:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   1779c:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   177a0:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
   177a4:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_handler_config)
   177a8:	bb1d      	cbnz	r5, 177f2 <nrfx_gpiote_input_configure+0xfa>
        err = NRFX_SUCCESS;
   177aa:	4828      	ldr	r0, [pc, #160]	; (1784c <nrfx_gpiote_input_configure+0x154>)
}
   177ac:	b004      	add	sp, #16
   177ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   177b2:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   177b6:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
   177ba:	f023 0303 	bic.w	r3, r3, #3
   177be:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   177c2:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
   177c6:	f041 0120 	orr.w	r1, r1, #32
   177ca:	f423 334f 	bic.w	r3, r3, #211968	; 0x33c00
   177ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
   177d2:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   177d6:	0223      	lsls	r3, r4, #8
   177d8:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   177dc:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
   177e0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   177e4:	ea43 030e 	orr.w	r3, r3, lr
   177e8:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   177ec:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
   177f0:	e7d2      	b.n	17798 <nrfx_gpiote_input_configure+0xa0>
    release_handler(pin);
   177f2:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   177f4:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   177f8:	f7ff ff36 	bl	17668 <release_handler>
    if (!handler)
   177fc:	2e00      	cmp	r6, #0
   177fe:	d0d4      	beq.n	177aa <nrfx_gpiote_input_configure+0xb2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   17800:	4d10      	ldr	r5, [pc, #64]	; (17844 <nrfx_gpiote_input_configure+0x14c>)
   17802:	e9d5 2300 	ldrd	r2, r3, [r5]
   17806:	4296      	cmp	r6, r2
   17808:	d101      	bne.n	1780e <nrfx_gpiote_input_configure+0x116>
   1780a:	429f      	cmp	r7, r3
   1780c:	d018      	beq.n	17840 <nrfx_gpiote_input_configure+0x148>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   1780e:	4810      	ldr	r0, [pc, #64]	; (17850 <nrfx_gpiote_input_configure+0x158>)
   17810:	f10d 010f 	add.w	r1, sp, #15
   17814:	f7ff fd10 	bl	17238 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   17818:	4b0c      	ldr	r3, [pc, #48]	; (1784c <nrfx_gpiote_input_configure+0x154>)
   1781a:	4298      	cmp	r0, r3
   1781c:	d1c6      	bne.n	177ac <nrfx_gpiote_input_configure+0xb4>
        handler_id = (int32_t)id;
   1781e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].p_context = p_context;
   17822:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   17826:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   17828:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1782a:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
   1782e:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   17832:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   17836:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1783a:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
   1783e:	e7b4      	b.n	177aa <nrfx_gpiote_input_configure+0xb2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   17840:	2200      	movs	r2, #0
   17842:	e7ee      	b.n	17822 <nrfx_gpiote_input_configure+0x12a>
   17844:	200084b4 	.word	0x200084b4
   17848:	0bad0004 	.word	0x0bad0004
   1784c:	0bad0000 	.word	0x0bad0000
   17850:	20008528 	.word	0x20008528

00017854 <nrfx_gpiote_output_configure>:
{
   17854:	b5f0      	push	{r4, r5, r6, r7, lr}
   17856:	4604      	mov	r4, r0
   17858:	4615      	mov	r5, r2
   1785a:	b085      	sub	sp, #20
    if (p_config)
   1785c:	b319      	cbz	r1, 178a6 <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1785e:	4e34      	ldr	r6, [pc, #208]	; (17930 <nrfx_gpiote_output_configure+0xdc>)
   17860:	f100 0708 	add.w	r7, r0, #8
   17864:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   17868:	0793      	lsls	r3, r2, #30
   1786a:	d403      	bmi.n	17874 <nrfx_gpiote_output_configure+0x20>
   1786c:	f7ff fed4 	bl	17618 <pin_in_use_by_te>
   17870:	2800      	cmp	r0, #0
   17872:	d15a      	bne.n	1792a <nrfx_gpiote_output_configure+0xd6>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   17874:	f012 0f1c 	tst.w	r2, #28
   17878:	d002      	beq.n	17880 <nrfx_gpiote_output_configure+0x2c>
   1787a:	784b      	ldrb	r3, [r1, #1]
   1787c:	2b01      	cmp	r3, #1
   1787e:	d054      	beq.n	1792a <nrfx_gpiote_output_configure+0xd6>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   17880:	2301      	movs	r3, #1
   17882:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   17886:	2300      	movs	r3, #0
   17888:	1c4a      	adds	r2, r1, #1
   1788a:	e9cd 1300 	strd	r1, r3, [sp]
   1788e:	4620      	mov	r0, r4
   17890:	1c8b      	adds	r3, r1, #2
   17892:	f10d 010f 	add.w	r1, sp, #15
   17896:	f006 fbbf 	bl	1e018 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   1789a:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   1789e:	f043 0303 	orr.w	r3, r3, #3
   178a2:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
   178a6:	b915      	cbnz	r5, 178ae <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
   178a8:	4822      	ldr	r0, [pc, #136]	; (17934 <nrfx_gpiote_output_configure+0xe0>)
}
   178aa:	b005      	add	sp, #20
   178ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   178ae:	4e20      	ldr	r6, [pc, #128]	; (17930 <nrfx_gpiote_output_configure+0xdc>)
   178b0:	f104 0708 	add.w	r7, r4, #8
   178b4:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   178b8:	0783      	lsls	r3, r0, #30
   178ba:	d536      	bpl.n	1792a <nrfx_gpiote_output_configure+0xd6>
        uint32_t ch = p_task_config->task_ch;
   178bc:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   178c0:	2300      	movs	r3, #0
   178c2:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   178c4:	f020 0020 	bic.w	r0, r0, #32
   178c8:	0089      	lsls	r1, r1, #2
   178ca:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   178ce:	04c0      	lsls	r0, r0, #19
   178d0:	f501 313c 	add.w	r1, r1, #192512	; 0x2f000
   178d4:	0cc0      	lsrs	r0, r0, #19
   178d6:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   178da:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
   178de:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   178e2:	786a      	ldrb	r2, [r5, #1]
   178e4:	2a00      	cmp	r2, #0
   178e6:	d0df      	beq.n	178a8 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   178e8:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   178ec:	78ad      	ldrb	r5, [r5, #2]
   178ee:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   178f2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   178f6:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   178fa:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   178fe:	0223      	lsls	r3, r4, #8
   17900:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   17904:	0412      	lsls	r2, r2, #16
   17906:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1790a:	ea43 030e 	orr.w	r3, r3, lr
   1790e:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   17910:	052a      	lsls	r2, r5, #20
   17912:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   17916:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1791a:	4313      	orrs	r3, r2
   1791c:	f040 0020 	orr.w	r0, r0, #32
   17920:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   17924:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   17928:	e7be      	b.n	178a8 <nrfx_gpiote_output_configure+0x54>
{
   1792a:	4803      	ldr	r0, [pc, #12]	; (17938 <nrfx_gpiote_output_configure+0xe4>)
   1792c:	e7bd      	b.n	178aa <nrfx_gpiote_output_configure+0x56>
   1792e:	bf00      	nop
   17930:	200084b4 	.word	0x200084b4
   17934:	0bad0000 	.word	0x0bad0000
   17938:	0bad0004 	.word	0x0bad0004

0001793c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   1793c:	4b01      	ldr	r3, [pc, #4]	; (17944 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   1793e:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   17942:	4770      	bx	lr
   17944:	200084b4 	.word	0x200084b4

00017948 <nrfx_gpiote_channel_get>:
{
   17948:	b508      	push	{r3, lr}
   1794a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   1794c:	f7ff fe64 	bl	17618 <pin_in_use_by_te>
   17950:	b138      	cbz	r0, 17962 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   17952:	4b05      	ldr	r3, [pc, #20]	; (17968 <nrfx_gpiote_channel_get+0x20>)
   17954:	3208      	adds	r2, #8
   17956:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
   1795a:	4804      	ldr	r0, [pc, #16]	; (1796c <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1795c:	0b5b      	lsrs	r3, r3, #13
   1795e:	700b      	strb	r3, [r1, #0]
}
   17960:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   17962:	4803      	ldr	r0, [pc, #12]	; (17970 <nrfx_gpiote_channel_get+0x28>)
   17964:	e7fc      	b.n	17960 <nrfx_gpiote_channel_get+0x18>
   17966:	bf00      	nop
   17968:	200084b4 	.word	0x200084b4
   1796c:	0bad0000 	.word	0x0bad0000
   17970:	0bad0004 	.word	0x0bad0004

00017974 <nrfx_gpiote_init>:
{
   17974:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   17976:	4c0f      	ldr	r4, [pc, #60]	; (179b4 <nrfx_gpiote_init+0x40>)
   17978:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   1797c:	b9bd      	cbnz	r5, 179ae <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   1797e:	2260      	movs	r2, #96	; 0x60
   17980:	4629      	mov	r1, r5
   17982:	f104 0010 	add.w	r0, r4, #16
   17986:	f003 ffaf 	bl	1b8e8 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   1798a:	202f      	movs	r0, #47	; 0x2f
   1798c:	f7f5 f856 	bl	ca3c <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   17990:	4b09      	ldr	r3, [pc, #36]	; (179b8 <nrfx_gpiote_init+0x44>)
    return err_code;
   17992:	480a      	ldr	r0, [pc, #40]	; (179bc <nrfx_gpiote_init+0x48>)
   17994:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   17998:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   1799c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   179a0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   179a4:	2301      	movs	r3, #1
   179a6:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   179aa:	6763      	str	r3, [r4, #116]	; 0x74
}
   179ac:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   179ae:	4804      	ldr	r0, [pc, #16]	; (179c0 <nrfx_gpiote_init+0x4c>)
   179b0:	e7fc      	b.n	179ac <nrfx_gpiote_init+0x38>
   179b2:	bf00      	nop
   179b4:	200084b4 	.word	0x200084b4
   179b8:	4002f000 	.word	0x4002f000
   179bc:	0bad0000 	.word	0x0bad0000
   179c0:	0bad0005 	.word	0x0bad0005

000179c4 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   179c4:	4b03      	ldr	r3, [pc, #12]	; (179d4 <nrfx_gpiote_is_init+0x10>)
   179c6:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   179ca:	3800      	subs	r0, #0
   179cc:	bf18      	it	ne
   179ce:	2001      	movne	r0, #1
   179d0:	4770      	bx	lr
   179d2:	bf00      	nop
   179d4:	200084b4 	.word	0x200084b4

000179d8 <nrfx_gpiote_channel_free>:
{
   179d8:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   179da:	4801      	ldr	r0, [pc, #4]	; (179e0 <nrfx_gpiote_channel_free+0x8>)
   179dc:	f7ff bc48 	b.w	17270 <nrfx_flag32_free>
   179e0:	20008524 	.word	0x20008524

000179e4 <nrfx_gpiote_channel_alloc>:
{
   179e4:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   179e6:	4801      	ldr	r0, [pc, #4]	; (179ec <nrfx_gpiote_channel_alloc+0x8>)
   179e8:	f7ff bc26 	b.w	17238 <nrfx_flag32_alloc>
   179ec:	20008524 	.word	0x20008524

000179f0 <nrfx_gpiote_trigger_enable>:
{
   179f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   179f2:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   179f4:	f7ff fe10 	bl	17618 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   179f8:	4b1d      	ldr	r3, [pc, #116]	; (17a70 <nrfx_gpiote_trigger_enable+0x80>)
   179fa:	f104 0208 	add.w	r2, r4, #8
   179fe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   17a02:	b1d0      	cbz	r0, 17a3a <nrfx_gpiote_trigger_enable+0x4a>
   17a04:	f013 0502 	ands.w	r5, r3, #2
   17a08:	d117      	bne.n	17a3a <nrfx_gpiote_trigger_enable+0x4a>
    return ((uint32_t)p_reg + event);
   17a0a:	481a      	ldr	r0, [pc, #104]	; (17a74 <nrfx_gpiote_trigger_enable+0x84>)
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   17a0c:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   17a0e:	009a      	lsls	r2, r3, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   17a10:	5085      	str	r5, [r0, r2]
   17a12:	5880      	ldr	r0, [r0, r2]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   17a14:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   17a18:	f502 323c 	add.w	r2, r2, #192512	; 0x2f000
   17a1c:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   17a20:	f040 0001 	orr.w	r0, r0, #1
   17a24:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   17a28:	b129      	cbz	r1, 17a36 <nrfx_gpiote_trigger_enable+0x46>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   17a2a:	2201      	movs	r2, #1
   17a2c:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   17a30:	4a11      	ldr	r2, [pc, #68]	; (17a78 <nrfx_gpiote_trigger_enable+0x88>)
   17a32:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   17a36:	b003      	add	sp, #12
   17a38:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   17a3a:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   17a3e:	2b04      	cmp	r3, #4
   17a40:	d011      	beq.n	17a66 <nrfx_gpiote_trigger_enable+0x76>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   17a42:	2b05      	cmp	r3, #5
   17a44:	d011      	beq.n	17a6a <nrfx_gpiote_trigger_enable+0x7a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   17a46:	a801      	add	r0, sp, #4
   17a48:	9401      	str	r4, [sp, #4]
   17a4a:	f7ff fdd5 	bl	175f8 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   17a4e:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   17a50:	6901      	ldr	r1, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   17a52:	40d9      	lsrs	r1, r3
   17a54:	f001 0101 	and.w	r1, r1, #1
   17a58:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   17a5a:	4620      	mov	r0, r4
}
   17a5c:	b003      	add	sp, #12
   17a5e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   17a62:	f006 bb22 	b.w	1e0aa <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   17a66:	2103      	movs	r1, #3
   17a68:	e7f7      	b.n	17a5a <nrfx_gpiote_trigger_enable+0x6a>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   17a6a:	2102      	movs	r1, #2
   17a6c:	e7f5      	b.n	17a5a <nrfx_gpiote_trigger_enable+0x6a>
   17a6e:	bf00      	nop
   17a70:	200084b4 	.word	0x200084b4
   17a74:	4002f100 	.word	0x4002f100
   17a78:	4002f000 	.word	0x4002f000

00017a7c <nrfx_gpiote_trigger_disable>:
{
   17a7c:	b508      	push	{r3, lr}
   17a7e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   17a80:	f7ff fdca 	bl	17618 <pin_in_use_by_te>
   17a84:	b1c0      	cbz	r0, 17ab8 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   17a86:	4b0f      	ldr	r3, [pc, #60]	; (17ac4 <nrfx_gpiote_trigger_disable+0x48>)
   17a88:	f102 0108 	add.w	r1, r2, #8
   17a8c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   17a90:	0799      	lsls	r1, r3, #30
   17a92:	d411      	bmi.n	17ab8 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   17a94:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   17a96:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   17a98:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   17a9a:	490b      	ldr	r1, [pc, #44]	; (17ac8 <nrfx_gpiote_trigger_disable+0x4c>)
   17a9c:	009b      	lsls	r3, r3, #2
   17a9e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   17aa2:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   17aa6:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   17aaa:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   17aae:	f022 0203 	bic.w	r2, r2, #3
   17ab2:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   17ab6:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   17ab8:	2100      	movs	r1, #0
}
   17aba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   17abe:	4610      	mov	r0, r2
   17ac0:	f006 baf3 	b.w	1e0aa <nrf_gpio_cfg_sense_set>
   17ac4:	200084b4 	.word	0x200084b4
   17ac8:	4002f000 	.word	0x4002f000

00017acc <nrfx_gpiote_pin_uninit>:
{
   17acc:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   17ace:	4b10      	ldr	r3, [pc, #64]	; (17b10 <nrfx_gpiote_pin_uninit+0x44>)
   17ad0:	f100 0208 	add.w	r2, r0, #8
   17ad4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
   17ad8:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   17ada:	07db      	lsls	r3, r3, #31
   17adc:	d516      	bpl.n	17b0c <nrfx_gpiote_pin_uninit+0x40>
    nrfx_gpiote_trigger_disable(pin);
   17ade:	f7ff ffcd 	bl	17a7c <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   17ae2:	4620      	mov	r0, r4
   17ae4:	f7ff fdea 	bl	176bc <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   17ae8:	a801      	add	r0, sp, #4
   17aea:	9401      	str	r4, [sp, #4]
   17aec:	f7ff fd84 	bl	175f8 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   17af0:	9b01      	ldr	r3, [sp, #4]
   17af2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   17af6:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   17afa:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   17afe:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
   17b02:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_gpio_cfg(
   17b06:	4803      	ldr	r0, [pc, #12]	; (17b14 <nrfx_gpiote_pin_uninit+0x48>)
}
   17b08:	b002      	add	sp, #8
   17b0a:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   17b0c:	4802      	ldr	r0, [pc, #8]	; (17b18 <nrfx_gpiote_pin_uninit+0x4c>)
   17b0e:	e7fb      	b.n	17b08 <nrfx_gpiote_pin_uninit+0x3c>
   17b10:	200084b4 	.word	0x200084b4
   17b14:	0bad0000 	.word	0x0bad0000
   17b18:	0bad0004 	.word	0x0bad0004

00017b1c <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   17b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
   17b20:	2600      	movs	r6, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   17b22:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   17b24:	4634      	mov	r4, r6
{
   17b26:	4b63      	ldr	r3, [pc, #396]	; (17cb4 <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
   17b28:	4863      	ldr	r0, [pc, #396]	; (17cb8 <nrfx_gpiote_irq_handler+0x19c>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   17b2a:	4964      	ldr	r1, [pc, #400]	; (17cbc <nrfx_gpiote_irq_handler+0x1a0>)
{
   17b2c:	b087      	sub	sp, #28
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   17b2e:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   17b30:	b135      	cbz	r5, 17b40 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   17b32:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   17b36:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   17b38:	bf1e      	ittt	ne
   17b3a:	601c      	strne	r4, [r3, #0]
   17b3c:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   17b3e:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   17b40:	3304      	adds	r3, #4
   17b42:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   17b44:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   17b48:	d1f1      	bne.n	17b2e <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   17b4a:	f8df a16c 	ldr.w	sl, [pc, #364]	; 17cb8 <nrfx_gpiote_irq_handler+0x19c>
   17b4e:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   17b52:	2b00      	cmp	r3, #0
   17b54:	f000 8091 	beq.w	17c7a <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
   17b58:	f8df 8164 	ldr.w	r8, [pc, #356]	; 17cc0 <nrfx_gpiote_irq_handler+0x1a4>
   17b5c:	f8d8 3020 	ldr.w	r3, [r8, #32]
   17b60:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   17b62:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
   17b66:	4b57      	ldr	r3, [pc, #348]	; (17cc4 <nrfx_gpiote_irq_handler+0x1a8>)
   17b68:	6a1a      	ldr	r2, [r3, #32]
   17b6a:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   17b6c:	621a      	str	r2, [r3, #32]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   17b6e:	f04f 0900 	mov.w	r9, #0
            while (latch[i])
   17b72:	f10d 0b10 	add.w	fp, sp, #16
   17b76:	ea4f 1349 	mov.w	r3, r9, lsl #5
   17b7a:	9300      	str	r3, [sp, #0]
   17b7c:	e048      	b.n	17c10 <nrfx_gpiote_irq_handler+0xf4>
                uint32_t pin = NRF_CTZ(latch[i]);
   17b7e:	fa94 f4a4 	rbit	r4, r4
   17b82:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   17b86:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   17b88:	4a4f      	ldr	r2, [pc, #316]	; (17cc8 <nrfx_gpiote_irq_handler+0x1ac>)
                pin += 32 * i;
   17b8a:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   17b8c:	f104 0308 	add.w	r3, r4, #8
   17b90:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   17b94:	2301      	movs	r3, #1
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   17b96:	08e0      	lsrs	r0, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
   17b98:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   17b9c:	fa03 f202 	lsl.w	r2, r3, r2
   17ba0:	f81b 3000 	ldrb.w	r3, [fp, r0]
   17ba4:	9403      	str	r4, [sp, #12]
   17ba6:	ea23 0302 	bic.w	r3, r3, r2
   17baa:	f80b 3000 	strb.w	r3, [fp, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   17bae:	a803      	add	r0, sp, #12
   17bb0:	f7ff fd22 	bl	175f8 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   17bb4:	9b03      	ldr	r3, [sp, #12]
   17bb6:	08b9      	lsrs	r1, r7, #2
   17bb8:	3380      	adds	r3, #128	; 0x80
   17bba:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   17bbe:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
   17bc2:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   17bc4:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   17bc6:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
   17bca:	d52b      	bpl.n	17c24 <nrfx_gpiote_irq_handler+0x108>
        call_handler(pin, trigger);
   17bcc:	4620      	mov	r0, r4
   17bce:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   17bd0:	b2dd      	uxtb	r5, r3
   17bd2:	f7ff fd2b 	bl	1762c <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   17bd6:	a803      	add	r0, sp, #12
   17bd8:	9403      	str	r4, [sp, #12]
   17bda:	f7ff fd0d 	bl	175f8 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   17bde:	9b03      	ldr	r3, [sp, #12]
   17be0:	3380      	adds	r3, #128	; 0x80
   17be2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   17be6:	f3c3 4301 	ubfx	r3, r3, #16, #2
   17bea:	429d      	cmp	r5, r3
   17bec:	d107      	bne.n	17bfe <nrfx_gpiote_irq_handler+0xe2>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   17bee:	2100      	movs	r1, #0
   17bf0:	4620      	mov	r0, r4
   17bf2:	f006 fa5a 	bl	1e0aa <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   17bf6:	4629      	mov	r1, r5
   17bf8:	4620      	mov	r0, r4
   17bfa:	f006 fa56 	bl	1e0aa <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   17bfe:	a803      	add	r0, sp, #12
   17c00:	9403      	str	r4, [sp, #12]
   17c02:	f7ff fcf9 	bl	175f8 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   17c06:	2201      	movs	r2, #1
   17c08:	9b03      	ldr	r3, [sp, #12]
   17c0a:	fa02 f303 	lsl.w	r3, r2, r3
   17c0e:	6203      	str	r3, [r0, #32]
            while (latch[i])
   17c10:	f85b 4029 	ldr.w	r4, [fp, r9, lsl #2]
   17c14:	2c00      	cmp	r4, #0
   17c16:	d1b2      	bne.n	17b7e <nrfx_gpiote_irq_handler+0x62>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   17c18:	f1b9 0f00 	cmp.w	r9, #0
   17c1c:	d11d      	bne.n	17c5a <nrfx_gpiote_irq_handler+0x13e>
   17c1e:	f04f 0901 	mov.w	r9, #1
   17c22:	e7a8      	b.n	17b76 <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   17c24:	2b02      	cmp	r3, #2
   17c26:	d10c      	bne.n	17c42 <nrfx_gpiote_irq_handler+0x126>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   17c28:	2103      	movs	r1, #3
   17c2a:	4620      	mov	r0, r4
   17c2c:	f006 fa3d 	bl	1e0aa <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   17c30:	f005 0305 	and.w	r3, r5, #5
   17c34:	2b01      	cmp	r3, #1
   17c36:	d1e2      	bne.n	17bfe <nrfx_gpiote_irq_handler+0xe2>
            call_handler(pin, trigger);
   17c38:	4639      	mov	r1, r7
   17c3a:	4620      	mov	r0, r4
   17c3c:	f7ff fcf6 	bl	1762c <call_handler>
   17c40:	e7dd      	b.n	17bfe <nrfx_gpiote_irq_handler+0xe2>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   17c42:	2102      	movs	r1, #2
   17c44:	4620      	mov	r0, r4
   17c46:	9301      	str	r3, [sp, #4]
   17c48:	f006 fa2f 	bl	1e0aa <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   17c4c:	2d03      	cmp	r5, #3
   17c4e:	d0f3      	beq.n	17c38 <nrfx_gpiote_irq_handler+0x11c>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   17c50:	9b01      	ldr	r3, [sp, #4]
   17c52:	2b03      	cmp	r3, #3
   17c54:	d1d3      	bne.n	17bfe <nrfx_gpiote_irq_handler+0xe2>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   17c56:	2d02      	cmp	r5, #2
   17c58:	e7ed      	b.n	17c36 <nrfx_gpiote_irq_handler+0x11a>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   17c5a:	f8ca 417c 	str.w	r4, [sl, #380]	; 0x17c
   17c5e:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   17c62:	f8d8 3020 	ldr.w	r3, [r8, #32]
   17c66:	4917      	ldr	r1, [pc, #92]	; (17cc4 <nrfx_gpiote_irq_handler+0x1a8>)
   17c68:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   17c6a:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
   17c6e:	6a0a      	ldr	r2, [r1, #32]
        if (latch[port_idx])
   17c70:	4313      	orrs	r3, r2
   17c72:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   17c74:	620a      	str	r2, [r1, #32]
   17c76:	f47f af7a 	bne.w	17b6e <nrfx_gpiote_irq_handler+0x52>
        mask &= ~NRFX_BIT(ch);
   17c7a:	2401      	movs	r4, #1
    while (mask)
   17c7c:	b916      	cbnz	r6, 17c84 <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   17c7e:	b007      	add	sp, #28
   17c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   17c84:	fa96 f3a6 	rbit	r3, r6
   17c88:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   17c8c:	fa04 f203 	lsl.w	r2, r4, r3
   17c90:	009b      	lsls	r3, r3, #2
   17c92:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   17c96:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   17c9a:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   17c9e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   17ca2:	f3c0 2005 	ubfx	r0, r0, #8, #6
   17ca6:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
   17caa:	ea26 0602 	bic.w	r6, r6, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   17cae:	f7ff fcbd 	bl	1762c <call_handler>
   17cb2:	e7e3      	b.n	17c7c <nrfx_gpiote_irq_handler+0x160>
   17cb4:	4002f100 	.word	0x4002f100
   17cb8:	4002f000 	.word	0x4002f000
   17cbc:	4002f120 	.word	0x4002f120
   17cc0:	40842500 	.word	0x40842500
   17cc4:	40842800 	.word	0x40842800
   17cc8:	200084b4 	.word	0x200084b4

00017ccc <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   17ccc:	b570      	push	{r4, r5, r6, lr}
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   17cce:	4c08      	ldr	r4, [pc, #32]	; (17cf0 <nrfx_ipc_init+0x24>)
{
   17cd0:	460e      	mov	r6, r1
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   17cd2:	7923      	ldrb	r3, [r4, #4]
{
   17cd4:	4615      	mov	r5, r2
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   17cd6:	b943      	cbnz	r3, 17cea <nrfx_ipc_init+0x1e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   17cd8:	202a      	movs	r0, #42	; 0x2a
   17cda:	f7f4 feaf 	bl	ca3c <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   17cde:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   17ce0:	4804      	ldr	r0, [pc, #16]	; (17cf4 <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   17ce2:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   17ce4:	6026      	str	r6, [r4, #0]
    m_ipc_cb.p_context = p_context;
   17ce6:	60a5      	str	r5, [r4, #8]
}
   17ce8:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   17cea:	4803      	ldr	r0, [pc, #12]	; (17cf8 <nrfx_ipc_init+0x2c>)
   17cec:	e7fc      	b.n	17ce8 <nrfx_ipc_init+0x1c>
   17cee:	bf00      	nop
   17cf0:	20009f00 	.word	0x20009f00
   17cf4:	0bad0000 	.word	0x0bad0000
   17cf8:	0bad000c 	.word	0x0bad000c

00017cfc <nrfx_ipc_config_load>:
{
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
   17cfc:	2300      	movs	r3, #0
{
   17cfe:	b530      	push	{r4, r5, lr}
    p_reg->SEND_CNF[index] = channels_mask;
   17d00:	4a0d      	ldr	r2, [pc, #52]	; (17d38 <nrfx_ipc_config_load+0x3c>)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   17d02:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   17d06:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   17d0a:	3301      	adds	r3, #1
   17d0c:	2b10      	cmp	r3, #16
   17d0e:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   17d12:	d1f6      	bne.n	17d02 <nrfx_ipc_config_load+0x6>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   17d14:	2300      	movs	r3, #0
    p_reg->RECEIVE_CNF[index] = channels_mask;
   17d16:	4a08      	ldr	r2, [pc, #32]	; (17d38 <nrfx_ipc_config_load+0x3c>)
   17d18:	f100 013c 	add.w	r1, r0, #60	; 0x3c
   17d1c:	f503 74b2 	add.w	r4, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   17d20:	f851 5f04 	ldr.w	r5, [r1, #4]!
    for (i = 0; i < IPC_CONF_NUM; ++i)
   17d24:	3301      	adds	r3, #1
   17d26:	2b10      	cmp	r3, #16
   17d28:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   17d2c:	d1f6      	bne.n	17d1c <nrfx_ipc_config_load+0x20>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   17d2e:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
    p_reg->INTENSET = mask;
   17d32:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   17d36:	bd30      	pop	{r4, r5, pc}
   17d38:	4002a000 	.word	0x4002a000

00017d3c <nrfx_ipc_receive_event_enable>:
}

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   17d3c:	2301      	movs	r3, #1
   17d3e:	4a02      	ldr	r2, [pc, #8]	; (17d48 <nrfx_ipc_receive_event_enable+0xc>)
   17d40:	4083      	lsls	r3, r0
   17d42:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   17d46:	4770      	bx	lr
   17d48:	4002a000 	.word	0x4002a000

00017d4c <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   17d4c:	2301      	movs	r3, #1
    p_reg->INTENCLR = mask;
   17d4e:	4a02      	ldr	r2, [pc, #8]	; (17d58 <nrfx_ipc_receive_event_disable+0xc>)
   17d50:	4083      	lsls	r3, r0
   17d52:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   17d56:	4770      	bx	lr
   17d58:	4002a000 	.word	0x4002a000

00017d5c <nrfx_ipc_irq_handler>:
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   17d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t bitmask = events_map;

    while (bitmask)
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
   17d5e:	2601      	movs	r6, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17d60:	2700      	movs	r7, #0
    return p_reg->INTPEND;
   17d62:	4b0b      	ldr	r3, [pc, #44]	; (17d90 <nrfx_ipc_irq_handler+0x34>)
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
#if NRFX_CHECK(NRFX_CONFIG_API_VER_2_10)
        if (m_ipc_cb.handler)
   17d64:	4d0b      	ldr	r5, [pc, #44]	; (17d94 <nrfx_ipc_irq_handler+0x38>)
   17d66:	f8d3 430c 	ldr.w	r4, [r3, #780]	; 0x30c
    while (bitmask)
   17d6a:	b904      	cbnz	r4, 17d6e <nrfx_ipc_irq_handler+0x12>
    if (m_ipc_cb.handler)
    {
        m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
#endif
    }
}
   17d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t event_idx = NRF_CTZ(bitmask);
   17d6e:	fa94 f0a4 	rbit	r0, r4
   17d72:	fab0 f080 	clz	r0, r0
        bitmask &= ~(1UL << event_idx);
   17d76:	fa06 f300 	lsl.w	r3, r6, r0
   17d7a:	ea24 0403 	bic.w	r4, r4, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17d7e:	4b06      	ldr	r3, [pc, #24]	; (17d98 <nrfx_ipc_irq_handler+0x3c>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   17d80:	0082      	lsls	r2, r0, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17d82:	509f      	str	r7, [r3, r2]
        if (m_ipc_cb.handler)
   17d84:	682b      	ldr	r3, [r5, #0]
   17d86:	2b00      	cmp	r3, #0
   17d88:	d0ef      	beq.n	17d6a <nrfx_ipc_irq_handler+0xe>
            m_ipc_cb.handler(event_idx, m_ipc_cb.p_context);
   17d8a:	68a9      	ldr	r1, [r5, #8]
   17d8c:	4798      	blx	r3
   17d8e:	e7ec      	b.n	17d6a <nrfx_ipc_irq_handler+0xe>
   17d90:	4002a000 	.word	0x4002a000
   17d94:	20009f00 	.word	0x20009f00
   17d98:	4002a100 	.word	0x4002a100

00017d9c <metal_generic_dev_open>:
	return 0;
}

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
   17d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17da0:	460e      	mov	r6, r1
   17da2:	4617      	mov	r7, r2
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
   17da4:	4d0c      	ldr	r5, [pc, #48]	; (17dd8 <metal_generic_dev_open+0x3c>)
   17da6:	f855 4f18 	ldr.w	r4, [r5, #24]!
   17daa:	42ac      	cmp	r4, r5
   17dac:	d103      	bne.n	17db6 <metal_generic_dev_open+0x1a>
			return metal_generic_dev_sys_open(dev);
		}
	}

	return -ENODEV;
}
   17dae:	f06f 0012 	mvn.w	r0, #18
   17db2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strcmp(dev->name, dev_name) == 0) {
   17db6:	4631      	mov	r1, r6
   17db8:	f854 0c44 	ldr.w	r0, [r4, #-68]
		dev = metal_container_of(node, struct metal_device, node);
   17dbc:	f1a4 0844 	sub.w	r8, r4, #68	; 0x44
		if (strcmp(dev->name, dev_name) == 0) {
   17dc0:	f003 fd58 	bl	1b874 <strcmp>
   17dc4:	b930      	cbnz	r0, 17dd4 <metal_generic_dev_open+0x38>
			*device = dev;
   17dc6:	f8c7 8000 	str.w	r8, [r7]
			return metal_generic_dev_sys_open(dev);
   17dca:	4640      	mov	r0, r8
}
   17dcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			return metal_generic_dev_sys_open(dev);
   17dd0:	f006 ba79 	b.w	1e2c6 <metal_generic_dev_sys_open>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
   17dd4:	6824      	ldr	r4, [r4, #0]
   17dd6:	e7e8      	b.n	17daa <metal_generic_dev_open+0xe>
   17dd8:	20009f0c 	.word	0x20009f0c

00017ddc <metal_bus_unregister>:
{
   17ddc:	b510      	push	{r4, lr}
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
	node->next->prev = node->prev;
   17dde:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
   17de2:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   17de4:	6a41      	ldr	r1, [r0, #36]	; 0x24
	metal_list_del(&bus->node);
   17de6:	f100 0324 	add.w	r3, r0, #36	; 0x24
   17dea:	6011      	str	r1, [r2, #0]
	node->prev = node;
	node->next = node;
   17dec:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
	if (bus->ops.bus_close)
   17df0:	6843      	ldr	r3, [r0, #4]
{
   17df2:	4604      	mov	r4, r0
	if (bus->ops.bus_close)
   17df4:	b103      	cbz	r3, 17df8 <metal_bus_unregister+0x1c>
		bus->ops.bus_close(bus);
   17df6:	4798      	blx	r3
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
   17df8:	4b05      	ldr	r3, [pc, #20]	; (17e10 <metal_bus_unregister+0x34>)
   17dfa:	781a      	ldrb	r2, [r3, #0]
   17dfc:	2a06      	cmp	r2, #6
   17dfe:	d905      	bls.n	17e0c <metal_bus_unregister+0x30>
   17e00:	685b      	ldr	r3, [r3, #4]
   17e02:	b11b      	cbz	r3, 17e0c <metal_bus_unregister+0x30>
   17e04:	2007      	movs	r0, #7
   17e06:	6822      	ldr	r2, [r4, #0]
   17e08:	4902      	ldr	r1, [pc, #8]	; (17e14 <metal_bus_unregister+0x38>)
   17e0a:	4798      	blx	r3
}
   17e0c:	2000      	movs	r0, #0
   17e0e:	bd10      	pop	{r4, pc}
   17e10:	20009f0c 	.word	0x20009f0c
   17e14:	00023dcc 	.word	0x00023dcc

00017e18 <metal_bus_find>:
{
   17e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17e1c:	4607      	mov	r7, r0
   17e1e:	460d      	mov	r5, r1
	metal_list_for_each(&_metal.common.bus_list, node) {
   17e20:	4e0b      	ldr	r6, [pc, #44]	; (17e50 <metal_bus_find+0x38>)
   17e22:	f856 4f08 	ldr.w	r4, [r6, #8]!
   17e26:	42b4      	cmp	r4, r6
   17e28:	d102      	bne.n	17e30 <metal_bus_find+0x18>
	return -ENOENT;
   17e2a:	f06f 0001 	mvn.w	r0, #1
   17e2e:	e00a      	b.n	17e46 <metal_bus_find+0x2e>
		if (strcmp(bus->name, name) == 0 && result) {
   17e30:	4639      	mov	r1, r7
   17e32:	f854 0c24 	ldr.w	r0, [r4, #-36]
		bus = metal_container_of(node, struct metal_bus, node);
   17e36:	f1a4 0824 	sub.w	r8, r4, #36	; 0x24
		if (strcmp(bus->name, name) == 0 && result) {
   17e3a:	f003 fd1b 	bl	1b874 <strcmp>
   17e3e:	b920      	cbnz	r0, 17e4a <metal_bus_find+0x32>
   17e40:	b11d      	cbz	r5, 17e4a <metal_bus_find+0x32>
			*result = bus;
   17e42:	f8c5 8000 	str.w	r8, [r5]
}
   17e46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	metal_list_for_each(&_metal.common.bus_list, node) {
   17e4a:	6824      	ldr	r4, [r4, #0]
   17e4c:	e7eb      	b.n	17e26 <metal_bus_find+0xe>
   17e4e:	bf00      	nop
   17e50:	20009f0c 	.word	0x20009f0c

00017e54 <metal_bus_register>:
{
   17e54:	b510      	push	{r4, lr}
	if (!bus || !bus->name || !strlen(bus->name))
   17e56:	4604      	mov	r4, r0
   17e58:	b910      	cbnz	r0, 17e60 <metal_bus_register+0xc>
		return -EINVAL;
   17e5a:	f06f 0015 	mvn.w	r0, #21
}
   17e5e:	bd10      	pop	{r4, pc}
	if (!bus || !bus->name || !strlen(bus->name))
   17e60:	6800      	ldr	r0, [r0, #0]
   17e62:	2800      	cmp	r0, #0
   17e64:	d0f9      	beq.n	17e5a <metal_bus_register+0x6>
   17e66:	f003 fcf5 	bl	1b854 <strlen>
   17e6a:	2800      	cmp	r0, #0
   17e6c:	d0f5      	beq.n	17e5a <metal_bus_register+0x6>
	if (metal_bus_find(bus->name, NULL) == 0)
   17e6e:	2100      	movs	r1, #0
   17e70:	6820      	ldr	r0, [r4, #0]
   17e72:	f7ff ffd1 	bl	17e18 <metal_bus_find>
   17e76:	b1c8      	cbz	r0, 17eac <metal_bus_register+0x58>
	metal_list_init(&bus->devices);
   17e78:	f104 031c 	add.w	r3, r4, #28
	list->next = list;
   17e7c:	e9c4 3307 	strd	r3, r3, [r4, #28]
	new_node->prev = node->prev;
   17e80:	4b0c      	ldr	r3, [pc, #48]	; (17eb4 <metal_bus_register+0x60>)
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
   17e82:	f104 0224 	add.w	r2, r4, #36	; 0x24
   17e86:	68d9      	ldr	r1, [r3, #12]
	new_node->next = node;
   17e88:	f103 0008 	add.w	r0, r3, #8
	new_node->next->prev = new_node;
   17e8c:	60da      	str	r2, [r3, #12]
	new_node->prev = node->prev;
   17e8e:	62a1      	str	r1, [r4, #40]	; 0x28
	new_node->next = node;
   17e90:	6260      	str	r0, [r4, #36]	; 0x24
	new_node->prev->next = new_node;
   17e92:	600a      	str	r2, [r1, #0]
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   17e94:	781a      	ldrb	r2, [r3, #0]
   17e96:	2a06      	cmp	r2, #6
   17e98:	d901      	bls.n	17e9e <metal_bus_register+0x4a>
   17e9a:	685b      	ldr	r3, [r3, #4]
   17e9c:	b90b      	cbnz	r3, 17ea2 <metal_bus_register+0x4e>
	return 0;
   17e9e:	2000      	movs	r0, #0
   17ea0:	e7dd      	b.n	17e5e <metal_bus_register+0xa>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   17ea2:	2007      	movs	r0, #7
   17ea4:	6822      	ldr	r2, [r4, #0]
   17ea6:	4904      	ldr	r1, [pc, #16]	; (17eb8 <metal_bus_register+0x64>)
   17ea8:	4798      	blx	r3
   17eaa:	e7f8      	b.n	17e9e <metal_bus_register+0x4a>
		return -EEXIST;
   17eac:	f06f 0010 	mvn.w	r0, #16
   17eb0:	e7d5      	b.n	17e5e <metal_bus_register+0xa>
   17eb2:	bf00      	nop
   17eb4:	20009f0c 	.word	0x20009f0c
   17eb8:	00023dce 	.word	0x00023dce

00017ebc <metal_register_generic_device>:
{
   17ebc:	b510      	push	{r4, lr}
   17ebe:	4604      	mov	r4, r0
	if (!device->name || !strlen(device->name) ||
   17ec0:	6800      	ldr	r0, [r0, #0]
   17ec2:	b910      	cbnz	r0, 17eca <metal_register_generic_device+0xe>
		return -EINVAL;
   17ec4:	f06f 0015 	mvn.w	r0, #21
}
   17ec8:	bd10      	pop	{r4, pc}
	if (!device->name || !strlen(device->name) ||
   17eca:	f003 fcc3 	bl	1b854 <strlen>
   17ece:	2800      	cmp	r0, #0
   17ed0:	d0f8      	beq.n	17ec4 <metal_register_generic_device+0x8>
   17ed2:	68a3      	ldr	r3, [r4, #8]
   17ed4:	2b01      	cmp	r3, #1
   17ed6:	d8f5      	bhi.n	17ec4 <metal_register_generic_device+0x8>
	device->bus = &metal_generic_bus;
   17ed8:	4b06      	ldr	r3, [pc, #24]	; (17ef4 <metal_register_generic_device+0x38>)
	metal_list_add_tail(&_metal.common.generic_device_list,
   17eda:	f104 0144 	add.w	r1, r4, #68	; 0x44
	device->bus = &metal_generic_bus;
   17ede:	6063      	str	r3, [r4, #4]
	new_node->prev = node->prev;
   17ee0:	4b05      	ldr	r3, [pc, #20]	; (17ef8 <metal_register_generic_device+0x3c>)
   17ee2:	69da      	ldr	r2, [r3, #28]
	new_node->next = node;
   17ee4:	f103 0018 	add.w	r0, r3, #24
   17ee8:	6460      	str	r0, [r4, #68]	; 0x44
	new_node->prev = node->prev;
   17eea:	64a2      	str	r2, [r4, #72]	; 0x48
	new_node->next->prev = new_node;
   17eec:	61d9      	str	r1, [r3, #28]
	return 0;
   17eee:	2000      	movs	r0, #0
	new_node->prev->next = new_node;
   17ef0:	6011      	str	r1, [r2, #0]
}
   17ef2:	e7e9      	b.n	17ec8 <metal_register_generic_device+0xc>
   17ef4:	20008530 	.word	0x20008530
   17ef8:	20009f0c 	.word	0x20009f0c

00017efc <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
   17efc:	b538      	push	{r3, r4, r5, lr}
   17efe:	4605      	mov	r5, r0
	int error = 0;

	memset(&_metal, 0, sizeof(_metal));
   17f00:	4c0d      	ldr	r4, [pc, #52]	; (17f38 <metal_init+0x3c>)
   17f02:	2220      	movs	r2, #32
   17f04:	4620      	mov	r0, r4
   17f06:	2100      	movs	r1, #0
   17f08:	f003 fcee 	bl	1b8e8 <memset>

	_metal.common.log_handler   = params->log_handler;
   17f0c:	682b      	ldr	r3, [r5, #0]

	metal_list_init(&_metal.common.bus_list);
	metal_list_init(&_metal.common.generic_shmem_list);
	metal_list_init(&_metal.common.generic_device_list);

	error = metal_sys_init(params);
   17f0e:	4628      	mov	r0, r5
	_metal.common.log_handler   = params->log_handler;
   17f10:	6063      	str	r3, [r4, #4]
	_metal.common.log_level     = params->log_level;
   17f12:	4623      	mov	r3, r4
   17f14:	792a      	ldrb	r2, [r5, #4]
   17f16:	f803 2b08 	strb.w	r2, [r3], #8
	list->next = list;
   17f1a:	e9c4 3302 	strd	r3, r3, [r4, #8]
	list->prev = list;
   17f1e:	f104 0310 	add.w	r3, r4, #16
	list->next = list;
   17f22:	e9c4 3304 	strd	r3, r3, [r4, #16]
	list->prev = list;
   17f26:	f104 0318 	add.w	r3, r4, #24
	list->next = list;
   17f2a:	e9c4 3306 	strd	r3, r3, [r4, #24]
	if (error)
		return error;

	return error;
}
   17f2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	error = metal_sys_init(params);
   17f32:	f000 b80f 	b.w	17f54 <metal_sys_init>
   17f36:	bf00      	nop
   17f38:	20009f0c 	.word	0x20009f0c

00017f3c <metal_finish>:

void metal_finish(void)
{
   17f3c:	b508      	push	{r3, lr}
	metal_sys_finish();
   17f3e:	f000 f811 	bl	17f64 <metal_sys_finish>
	memset(&_metal, 0, sizeof(_metal));
}
   17f42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	memset(&_metal, 0, sizeof(_metal));
   17f46:	2220      	movs	r2, #32
   17f48:	2100      	movs	r1, #0
   17f4a:	4801      	ldr	r0, [pc, #4]	; (17f50 <metal_finish+0x14>)
   17f4c:	f003 bccc 	b.w	1b8e8 <memset>
   17f50:	20009f0c 	.word	0x20009f0c

00017f54 <metal_sys_init>:
#include <metal/utilities.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
   17f54:	b508      	push	{r3, lr}
	metal_bus_register(&metal_generic_bus);
   17f56:	4802      	ldr	r0, [pc, #8]	; (17f60 <metal_sys_init+0xc>)
   17f58:	f7ff ff7c 	bl	17e54 <metal_bus_register>
	return 0;
}
   17f5c:	2000      	movs	r0, #0
   17f5e:	bd08      	pop	{r3, pc}
   17f60:	20008530 	.word	0x20008530

00017f64 <metal_sys_finish>:

void metal_sys_finish(void)
{
	metal_bus_unregister(&metal_generic_bus);
   17f64:	4801      	ldr	r0, [pc, #4]	; (17f6c <metal_sys_finish+0x8>)
   17f66:	f7ff bf39 	b.w	17ddc <metal_bus_unregister>
   17f6a:	bf00      	nop
   17f6c:	20008530 	.word	0x20008530

00017f70 <metal_zephyr_log_handler>:
	"metal: debug:     ",
};

void metal_zephyr_log_handler(enum metal_log_level level,
			      const char *format, ...)
{
   17f70:	b40e      	push	{r1, r2, r3}
	va_list args;

	if (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG)
   17f72:	1e43      	subs	r3, r0, #1
		level = METAL_LOG_EMERGENCY;
   17f74:	2b06      	cmp	r3, #6
{
   17f76:	b533      	push	{r0, r1, r4, r5, lr}
		level = METAL_LOG_EMERGENCY;
   17f78:	bf88      	it	hi
   17f7a:	2000      	movhi	r0, #0
	printk("%s", level_strs[level]);
   17f7c:	4b09      	ldr	r3, [pc, #36]	; (17fa4 <metal_zephyr_log_handler+0x34>)
{
   17f7e:	ac05      	add	r4, sp, #20
   17f80:	f854 5b04 	ldr.w	r5, [r4], #4
	printk("%s", level_strs[level]);
   17f84:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   17f88:	4807      	ldr	r0, [pc, #28]	; (17fa8 <metal_zephyr_log_handler+0x38>)
   17f8a:	f001 ffb8 	bl	19efe <printk>

	va_start(args, format);
	vprintk(format, args);
   17f8e:	4621      	mov	r1, r4
   17f90:	4628      	mov	r0, r5
	va_start(args, format);
   17f92:	9401      	str	r4, [sp, #4]
	vprintk(format, args);
   17f94:	f7f1 ffec 	bl	9f70 <vprintk>
	va_end(args);
}
   17f98:	b002      	add	sp, #8
   17f9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   17f9e:	b003      	add	sp, #12
   17fa0:	4770      	bx	lr
   17fa2:	bf00      	nop
   17fa4:	000206d0 	.word	0x000206d0
   17fa8:	00021bc6 	.word	0x00021bc6

00017fac <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
   17fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17fb0:	469a      	mov	sl, r3
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
	if (nvqs > num_vrings)
   17fb2:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   17fb4:	4606      	mov	r6, r0
	if (nvqs > num_vrings)
   17fb6:	4293      	cmp	r3, r2
{
   17fb8:	4617      	mov	r7, r2
   17fba:	b087      	sub	sp, #28
	if (nvqs > num_vrings)
   17fbc:	d341      	bcc.n	18042 <virtio_create_virtqueues+0x96>
		return ERROR_VQUEUE_INVLD_PARAM;
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
   17fbe:	2500      	movs	r5, #0
		vring_info = &vdev->vrings_info[i];
   17fc0:	f04f 0b18 	mov.w	fp, #24
	for (i = 0; i < nvqs; i++) {
   17fc4:	42bd      	cmp	r5, r7
   17fc6:	d103      	bne.n	17fd0 <virtio_create_virtqueues+0x24>
				       callbacks[i], vdev->func->notify,
				       vring_info->vq);
		if (ret)
			return ret;
	}
	return 0;
   17fc8:	2000      	movs	r0, #0
}
   17fca:	b007      	add	sp, #28
   17fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		vring_info = &vdev->vrings_info[i];
   17fd0:	fb0b f805 	mul.w	r8, fp, r5
   17fd4:	f8d6 902c 	ldr.w	r9, [r6, #44]	; 0x2c
		if (vdev->role == VIRTIO_DEV_DRIVER) {
   17fd8:	69b2      	ldr	r2, [r6, #24]
		vring_info = &vdev->vrings_info[i];
   17fda:	eb09 0408 	add.w	r4, r9, r8
		vring_alloc = &vring_info->info;
   17fde:	1d23      	adds	r3, r4, #4
   17fe0:	9305      	str	r3, [sp, #20]
		if (vdev->role == VIRTIO_DEV_DRIVER) {
   17fe2:	b9ca      	cbnz	r2, 18018 <virtio_create_virtqueues+0x6c>
			struct metal_io_region *io = vring_info->io;
   17fe4:	6960      	ldr	r0, [r4, #20]
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   17fe6:	6861      	ldr	r1, [r4, #4]
   17fe8:	6803      	ldr	r3, [r0, #0]
			metal_io_block_set(io, offset, 0,
   17fea:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
   17fee:	1ac9      	subs	r1, r1, r3
						      vring_alloc->align));
   17ff0:	68a3      	ldr	r3, [r4, #8]
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
   17ff2:	f10c 0e03 	add.w	lr, ip, #3
	size = (size + align - 1) & ~(align - 1);
   17ff6:	1e5c      	subs	r4, r3, #1
   17ff8:	eb04 140c 	add.w	r4, r4, ip, lsl #4
   17ffc:	425b      	negs	r3, r3
   17ffe:	eb04 044e 	add.w	r4, r4, lr, lsl #1
   18002:	401c      	ands	r4, r3
	size += sizeof(struct vring_used) +
   18004:	eb04 03cc 	add.w	r3, r4, ip, lsl #3
			metal_io_block_set(io, offset, 0,
   18008:	6884      	ldr	r4, [r0, #8]
   1800a:	3306      	adds	r3, #6
   1800c:	42a1      	cmp	r1, r4
   1800e:	bf28      	it	cs
   18010:	f04f 31ff 	movcs.w	r1, #4294967295
   18014:	f006 f923 	bl	1e25e <metal_io_block_set>
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   18018:	f859 3008 	ldr.w	r3, [r9, r8]
   1801c:	4630      	mov	r0, r6
   1801e:	9302      	str	r3, [sp, #8]
				       callbacks[i], vdev->func->notify,
   18020:	6a33      	ldr	r3, [r6, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   18022:	b2a9      	uxth	r1, r5
   18024:	6a1b      	ldr	r3, [r3, #32]
   18026:	9301      	str	r3, [sp, #4]
   18028:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1802a:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   1802e:	9300      	str	r3, [sp, #0]
   18030:	f85a 2025 	ldr.w	r2, [sl, r5, lsl #2]
   18034:	9b05      	ldr	r3, [sp, #20]
   18036:	f006 f964 	bl	1e302 <virtqueue_create>
		if (ret)
   1803a:	2800      	cmp	r0, #0
   1803c:	d1c5      	bne.n	17fca <virtio_create_virtqueues+0x1e>
	for (i = 0; i < nvqs; i++) {
   1803e:	3501      	adds	r5, #1
   18040:	e7c0      	b.n	17fc4 <virtio_create_virtqueues+0x18>
		return ERROR_VQUEUE_INVLD_PARAM;
   18042:	4801      	ldr	r0, [pc, #4]	; (18048 <virtio_create_virtqueues+0x9c>)
   18044:	e7c1      	b.n	17fca <virtio_create_virtqueues+0x1e>
   18046:	bf00      	nop
   18048:	fffff440 	.word	0xfffff440

0001804c <virtqueue_free>:
 *
 * @param vq        - Pointer to VirtIO queue control block
 *
 */
void virtqueue_free(struct virtqueue *vq)
{
   1804c:	b510      	push	{r4, lr}
	if (vq) {
   1804e:	4604      	mov	r4, r0
   18050:	b190      	cbz	r0, 18078 <virtqueue_free+0x2c>
		if (vq->vq_free_cnt != vq->vq_nentries) {
   18052:	8c82      	ldrh	r2, [r0, #36]	; 0x24
   18054:	8943      	ldrh	r3, [r0, #10]
   18056:	429a      	cmp	r2, r3
   18058:	d009      	beq.n	1806e <virtqueue_free+0x22>
			metal_log(METAL_LOG_WARNING,
   1805a:	4b08      	ldr	r3, [pc, #32]	; (1807c <virtqueue_free+0x30>)
   1805c:	781a      	ldrb	r2, [r3, #0]
   1805e:	2a03      	cmp	r2, #3
   18060:	d905      	bls.n	1806e <virtqueue_free+0x22>
   18062:	685b      	ldr	r3, [r3, #4]
   18064:	b11b      	cbz	r3, 1806e <virtqueue_free+0x22>
   18066:	6842      	ldr	r2, [r0, #4]
   18068:	4905      	ldr	r1, [pc, #20]	; (18080 <virtqueue_free+0x34>)
   1806a:	2004      	movs	r0, #4
   1806c:	4798      	blx	r3
	return k_malloc(size);
}

static inline void metal_free_memory(void *ptr)
{
	k_free(ptr);
   1806e:	4620      	mov	r0, r4
				  vq->vq_name);
		}

		metal_free_memory(vq);
	}
}
   18070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18074:	f007 bb48 	b.w	1f708 <k_free>
   18078:	bd10      	pop	{r4, pc}
   1807a:	bf00      	nop
   1807c:	20009f0c 	.word	0x20009f0c
   18080:	00023e79 	.word	0x00023e79

00018084 <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
   18084:	b530      	push	{r4, r5, lr}
	struct vring_used_elem *used_desc = NULL;
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
   18086:	8944      	ldrh	r4, [r0, #10]
   18088:	428c      	cmp	r4, r1
   1808a:	d312      	bcc.n	180b2 <virtqueue_add_consumed_buffer+0x2e>
	}

	VQUEUE_BUSY(vq);

	/* CACHE: used is never written by master, so it's safe to directly access it */
	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
   1808c:	6a03      	ldr	r3, [r0, #32]
   1808e:	3c01      	subs	r4, #1
   18090:	885d      	ldrh	r5, [r3, #2]
   18092:	402c      	ands	r4, r5
   18094:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
	used_desc = &vq->vq_ring.used->ring[used_idx];
	used_desc->id = head_idx;
   18098:	6059      	str	r1, [r3, #4]
	used_desc->len = len;
   1809a:	609a      	str	r2, [r3, #8]

	/* We still need to flush it because this is read by master */
	VRING_FLUSH(vq->vq_ring.used->ring[used_idx]);

	atomic_thread_fence(memory_order_seq_cst);
   1809c:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
   180a0:	6a02      	ldr	r2, [r0, #32]
   180a2:	8853      	ldrh	r3, [r2, #2]
   180a4:	3301      	adds	r3, #1
   180a6:	8053      	strh	r3, [r2, #2]

	/* Used.idx is read by master, so we need to flush it */
	VRING_FLUSH(vq->vq_ring.used->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   180a8:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   180aa:	3301      	adds	r3, #1
   180ac:	84c3      	strh	r3, [r0, #38]	; 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
   180ae:	2000      	movs	r0, #0
}
   180b0:	bd30      	pop	{r4, r5, pc}
		return ERROR_VRING_NO_BUFF;
   180b2:	4801      	ldr	r0, [pc, #4]	; (180b8 <virtqueue_add_consumed_buffer+0x34>)
   180b4:	e7fc      	b.n	180b0 <virtqueue_add_consumed_buffer+0x2c>
   180b6:	bf00      	nop
   180b8:	fffff441 	.word	0xfffff441

000180bc <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int len,
			      int wait)
{
   180bc:	b430      	push	{r4, r5}
   180be:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
   180c0:	b148      	cbz	r0, 180d6 <rpmsg_send_offchannel_raw+0x1a>
   180c2:	6a00      	ldr	r0, [r0, #32]
   180c4:	b138      	cbz	r0, 180d6 <rpmsg_send_offchannel_raw+0x1a>
   180c6:	b133      	cbz	r3, 180d6 <rpmsg_send_offchannel_raw+0x1a>
   180c8:	3401      	adds	r4, #1
   180ca:	d004      	beq.n	180d6 <rpmsg_send_offchannel_raw+0x1a>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_raw)
   180cc:	6f44      	ldr	r4, [r0, #116]	; 0x74
   180ce:	b114      	cbz	r4, 180d6 <rpmsg_send_offchannel_raw+0x1a>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   180d0:	46a4      	mov	ip, r4
						     len, wait);

	return RPMSG_ERR_PARAM;
}
   180d2:	bc30      	pop	{r4, r5}
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   180d4:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
   180d6:	4801      	ldr	r0, [pc, #4]	; (180dc <rpmsg_send_offchannel_raw+0x20>)
}
   180d8:	bc30      	pop	{r4, r5}
   180da:	4770      	bx	lr
   180dc:	fffff82d 	.word	0xfffff82d

000180e0 <rpmsg_send_offchannel_nocopy>:
	return NULL;
}

int rpmsg_send_offchannel_nocopy(struct rpmsg_endpoint *ept, uint32_t src,
				 uint32_t dst, const void *data, int len)
{
   180e0:	b430      	push	{r4, r5}
   180e2:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
   180e4:	b150      	cbz	r0, 180fc <rpmsg_send_offchannel_nocopy+0x1c>
   180e6:	6a00      	ldr	r0, [r0, #32]
   180e8:	b140      	cbz	r0, 180fc <rpmsg_send_offchannel_nocopy+0x1c>
   180ea:	b13b      	cbz	r3, 180fc <rpmsg_send_offchannel_nocopy+0x1c>
   180ec:	3401      	adds	r4, #1
   180ee:	d005      	beq.n	180fc <rpmsg_send_offchannel_nocopy+0x1c>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_nocopy)
   180f0:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
   180f4:	b114      	cbz	r4, 180fc <rpmsg_send_offchannel_nocopy+0x1c>
		return rdev->ops.send_offchannel_nocopy(rdev, src, dst,
   180f6:	46a4      	mov	ip, r4
							data, len);

	return RPMSG_ERR_PARAM;
}
   180f8:	bc30      	pop	{r4, r5}
		return rdev->ops.send_offchannel_nocopy(rdev, src, dst,
   180fa:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
   180fc:	4801      	ldr	r0, [pc, #4]	; (18104 <rpmsg_send_offchannel_nocopy+0x24>)
}
   180fe:	bc30      	pop	{r4, r5}
   18100:	4770      	bx	lr
   18102:	bf00      	nop
   18104:	fffff82d 	.word	0xfffff82d

00018108 <rpmsg_register_endpoint>:
			     struct rpmsg_endpoint *ept,
			     const char *name,
			     uint32_t src, uint32_t dest,
			     rpmsg_ept_cb cb,
			     rpmsg_ns_unbind_cb ns_unbind_cb)
{
   18108:	b570      	push	{r4, r5, r6, lr}
   1810a:	460c      	mov	r4, r1
   1810c:	4611      	mov	r1, r2
   1810e:	4605      	mov	r5, r0
   18110:	461e      	mov	r6, r3
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
   18112:	4b0c      	ldr	r3, [pc, #48]	; (18144 <rpmsg_register_endpoint+0x3c>)
   18114:	2220      	movs	r2, #32
   18116:	2900      	cmp	r1, #0
   18118:	bf08      	it	eq
   1811a:	4619      	moveq	r1, r3
   1811c:	4620      	mov	r0, r4
   1811e:	f003 fb85 	bl	1b82c <strncpy>
	ept->addr = src;
	ept->dest_addr = dest;
   18122:	9b04      	ldr	r3, [sp, #16]
	ept->addr = src;
   18124:	6266      	str	r6, [r4, #36]	; 0x24
	ept->dest_addr = dest;
   18126:	62a3      	str	r3, [r4, #40]	; 0x28
	ept->cb = cb;
   18128:	9b05      	ldr	r3, [sp, #20]
	ept->ns_unbind_cb = ns_unbind_cb;
	ept->rdev = rdev;
   1812a:	6225      	str	r5, [r4, #32]
	ept->cb = cb;
   1812c:	62e3      	str	r3, [r4, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
   1812e:	9b06      	ldr	r3, [sp, #24]
   18130:	6323      	str	r3, [r4, #48]	; 0x30
	new_node->prev = node->prev;
   18132:	686a      	ldr	r2, [r5, #4]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
   18134:	f104 0334 	add.w	r3, r4, #52	; 0x34
	new_node->next = node;
   18138:	e9c4 520d 	strd	r5, r2, [r4, #52]	; 0x34
	new_node->next->prev = new_node;
   1813c:	606b      	str	r3, [r5, #4]
	new_node->prev->next = new_node;
   1813e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   18140:	6013      	str	r3, [r2, #0]
}
   18142:	bd70      	pop	{r4, r5, r6, pc}
   18144:	00020926 	.word	0x00020926

00018148 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
   18148:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1814c:	460e      	mov	r6, r1
   1814e:	4691      	mov	r9, r2
   18150:	461f      	mov	r7, r3
	int status = RPMSG_SUCCESS;
	uint32_t addr = src;

	if (!ept)
   18152:	4605      	mov	r5, r0
{
   18154:	b085      	sub	sp, #20
	if (!ept)
   18156:	2800      	cmp	r0, #0
   18158:	d068      	beq.n	1822c <rpmsg_create_ept+0xe4>
		return RPMSG_ERR_PARAM;

	metal_mutex_acquire(&rdev->lock);
   1815a:	f101 0858 	add.w	r8, r1, #88	; 0x58
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
	__metal_mutex_acquire(mutex);
   1815e:	4640      	mov	r0, r8
   18160:	f006 fa68 	bl	1e634 <__metal_mutex_acquire>
	if (src == RPMSG_ADDR_ANY) {
   18164:	1c78      	adds	r0, r7, #1
   18166:	d141      	bne.n	181ec <rpmsg_create_ept+0xa4>
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
   18168:	6cb4      	ldr	r4, [r6, #72]	; 0x48
   1816a:	f106 0348 	add.w	r3, r6, #72	; 0x48
			    unsigned int max)
{
	unsigned int bit;

	for (bit = start;
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   1816e:	f014 0401 	ands.w	r4, r4, #1
   18172:	d00b      	beq.n	1818c <rpmsg_create_ept+0x44>
	for (bit = start;
   18174:	2400      	movs	r4, #0
	     bit++)
   18176:	3401      	adds	r4, #1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   18178:	2c80      	cmp	r4, #128	; 0x80
   1817a:	d055      	beq.n	18228 <rpmsg_create_ept+0xe0>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   1817c:	0962      	lsrs	r2, r4, #5
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   1817e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   18182:	f004 011f 	and.w	r1, r4, #31
   18186:	40ca      	lsrs	r2, r1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   18188:	07d1      	lsls	r1, r2, #31
   1818a:	d4f4      	bmi.n	18176 <rpmsg_create_ept+0x2e>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   1818c:	2101      	movs	r1, #1
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   1818e:	0960      	lsrs	r0, r4, #5
   18190:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
		addr = RPMSG_RESERVED_ADDRESSES + nextbit;
   18194:	f504 6780 	add.w	r7, r4, #1024	; 0x400
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   18198:	f004 041f 	and.w	r4, r4, #31
   1819c:	40a1      	lsls	r1, r4
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   1819e:	430a      	orrs	r2, r1
   181a0:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
		 * 1.Trust the author of predefined service
		 * 2.Simplify the tracking implementation
		 */
	}

	rpmsg_register_endpoint(rdev, ept, name, addr, dest, cb, unbind_cb);
   181a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   181a6:	464a      	mov	r2, r9
   181a8:	9302      	str	r3, [sp, #8]
   181aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   181ac:	4629      	mov	r1, r5
   181ae:	9301      	str	r3, [sp, #4]
   181b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   181b2:	4630      	mov	r0, r6
   181b4:	9300      	str	r3, [sp, #0]
   181b6:	463b      	mov	r3, r7
   181b8:	f7ff ffa6 	bl	18108 <rpmsg_register_endpoint>
	z_impl_k_sem_give(sem);
   181bc:	4640      	mov	r0, r8
   181be:	f000 fd39 	bl	18c34 <z_impl_k_sem_give>
	metal_mutex_release(&rdev->lock);

	/* Send NS announcement to remote processor */
	if (ept->name[0] && rdev->support_ns &&
   181c2:	782c      	ldrb	r4, [r5, #0]
   181c4:	b174      	cbz	r4, 181e4 <rpmsg_create_ept+0x9c>
   181c6:	f896 4088 	ldrb.w	r4, [r6, #136]	; 0x88
   181ca:	b15c      	cbz	r4, 181e4 <rpmsg_create_ept+0x9c>
   181cc:	6aab      	ldr	r3, [r5, #40]	; 0x28
   181ce:	3301      	adds	r3, #1
   181d0:	d12e      	bne.n	18230 <rpmsg_create_ept+0xe8>
	    ept->dest_addr == RPMSG_ADDR_ANY)
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
   181d2:	2100      	movs	r1, #0
   181d4:	4628      	mov	r0, r5
   181d6:	f006 fa5c 	bl	1e692 <rpmsg_send_ns_message>

	if (status)
   181da:	4604      	mov	r4, r0
   181dc:	b110      	cbz	r0, 181e4 <rpmsg_create_ept+0x9c>
		rpmsg_unregister_endpoint(ept);
   181de:	4628      	mov	r0, r5
   181e0:	f006 fa2e 	bl	1e640 <rpmsg_unregister_endpoint>
	return status;

ret_status:
	metal_mutex_release(&rdev->lock);
	return status;
}
   181e4:	4620      	mov	r0, r4
   181e6:	b005      	add	sp, #20
   181e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (src >= RPMSG_RESERVED_ADDRESSES) {
   181ec:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
   181f0:	d3d8      	bcc.n	181a4 <rpmsg_create_ept+0x5c>
	addr -= RPMSG_RESERVED_ADDRESSES;
   181f2:	f5a7 6380 	sub.w	r3, r7, #1024	; 0x400
	if (addr >= 0 && addr < size)
   181f6:	2b7f      	cmp	r3, #127	; 0x7f
		status = rpmsg_is_address_set(rdev->bitmap,
   181f8:	f106 0148 	add.w	r1, r6, #72	; 0x48
	if (addr >= 0 && addr < size)
   181fc:	d80f      	bhi.n	1821e <rpmsg_create_ept+0xd6>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   181fe:	0958      	lsrs	r0, r3, #5
   18200:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   18204:	f003 031f 	and.w	r3, r3, #31
   18208:	fa24 f203 	lsr.w	r2, r4, r3
		if (!status) {
   1820c:	07d2      	lsls	r2, r2, #31
   1820e:	d40b      	bmi.n	18228 <rpmsg_create_ept+0xe0>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   18210:	2201      	movs	r2, #1
   18212:	fa02 f303 	lsl.w	r3, r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   18216:	4323      	orrs	r3, r4
   18218:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
}
   1821c:	e7c2      	b.n	181a4 <rpmsg_create_ept+0x5c>
   1821e:	4c05      	ldr	r4, [pc, #20]	; (18234 <rpmsg_create_ept+0xec>)
   18220:	4640      	mov	r0, r8
   18222:	f000 fd07 	bl	18c34 <z_impl_k_sem_give>
}
   18226:	e7dd      	b.n	181e4 <rpmsg_create_ept+0x9c>
			status = RPMSG_ERR_ADDR;
   18228:	4c03      	ldr	r4, [pc, #12]	; (18238 <rpmsg_create_ept+0xf0>)
   1822a:	e7f9      	b.n	18220 <rpmsg_create_ept+0xd8>
		return RPMSG_ERR_PARAM;
   1822c:	4c01      	ldr	r4, [pc, #4]	; (18234 <rpmsg_create_ept+0xec>)
   1822e:	e7d9      	b.n	181e4 <rpmsg_create_ept+0x9c>
   18230:	2400      	movs	r4, #0
   18232:	e7d7      	b.n	181e4 <rpmsg_create_ept+0x9c>
   18234:	fffff82d 	.word	0xfffff82d
   18238:	fffff829 	.word	0xfffff829

0001823c <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int len, int wait)
{
   1823c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18240:	b085      	sub	sp, #20
   18242:	460f      	mov	r7, r1
   18244:	4690      	mov	r8, r2

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);

	/* Get the payload buffer. */
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
   18246:	a903      	add	r1, sp, #12
   18248:	9a0d      	ldr	r2, [sp, #52]	; 0x34
{
   1824a:	4605      	mov	r5, r0
   1824c:	4699      	mov	r9, r3
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
   1824e:	f006 fc05 	bl	1ea5c <rpmsg_virtio_get_tx_payload_buffer>
	if (!buffer)
   18252:	4604      	mov	r4, r0
   18254:	b1e0      	cbz	r0, 18290 <rpmsg_virtio_send_offchannel_raw+0x54>
		return RPMSG_ERR_NO_BUFF;

	/* Copy data to rpmsg buffer. */
	if (len > (int)buff_len)
   18256:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   18258:	9b03      	ldr	r3, [sp, #12]
		len = buff_len;
	io = rvdev->shbuf_io;
   1825a:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
   1825e:	429e      	cmp	r6, r3
   18260:	bfa8      	it	ge
   18262:	461e      	movge	r6, r3
   18264:	6801      	ldr	r1, [r0, #0]
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   18266:	f8d0 c008 	ldr.w	ip, [r0, #8]
   1826a:	1a61      	subs	r1, r4, r1
   1826c:	4633      	mov	r3, r6
   1826e:	464a      	mov	r2, r9
   18270:	4561      	cmp	r1, ip
   18272:	bf28      	it	cs
   18274:	f04f 31ff 	movcs.w	r1, #4294967295
   18278:	f005 ffb7 	bl	1e1ea <metal_io_block_write>
				      data, len);
	RPMSG_ASSERT(status == len, "failed to write buffer\r\n");

	return rpmsg_virtio_send_offchannel_nocopy(rdev, src, dst, buffer, len);
   1827c:	4623      	mov	r3, r4
   1827e:	4642      	mov	r2, r8
   18280:	4639      	mov	r1, r7
   18282:	4628      	mov	r0, r5
   18284:	9600      	str	r6, [sp, #0]
   18286:	f006 fb8a 	bl	1e99e <rpmsg_virtio_send_offchannel_nocopy>
}
   1828a:	b005      	add	sp, #20
   1828c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return RPMSG_ERR_NO_BUFF;
   18290:	4800      	ldr	r0, [pc, #0]	; (18294 <rpmsg_virtio_send_offchannel_raw+0x58>)
   18292:	e7fa      	b.n	1828a <rpmsg_virtio_send_offchannel_raw+0x4e>
   18294:	fffff82e 	.word	0xfffff82e

00018298 <rpmsg_virtio_get_buffer_size>:

	return RPMSG_SUCCESS;
}

int rpmsg_virtio_get_buffer_size(struct rpmsg_device *rdev)
{
   18298:	b538      	push	{r3, r4, r5, lr}
	int size;
	struct rpmsg_virtio_device *rvdev;

	if (!rdev)
   1829a:	4604      	mov	r4, r0
   1829c:	b1e0      	cbz	r0, 182d8 <rpmsg_virtio_get_buffer_size+0x40>
		return RPMSG_ERR_PARAM;
	metal_mutex_acquire(&rdev->lock);
   1829e:	f100 0558 	add.w	r5, r0, #88	; 0x58
   182a2:	4628      	mov	r0, r5
   182a4:	f006 fa84 	bl	1e7b0 <__metal_mutex_acquire>
}

static inline unsigned int
rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->role;
   182a8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   182ac:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_HOST) {
   182ae:	b953      	cbnz	r3, 182c6 <rpmsg_virtio_get_buffer_size+0x2e>
		length = rvdev->config.h2r_buf_size - sizeof(struct rpmsg_hdr);
   182b0:	f8d4 408c 	ldr.w	r4, [r4, #140]	; 0x8c
   182b4:	3c10      	subs	r4, #16
	if (length <= 0) {
   182b6:	2c00      	cmp	r4, #0
   182b8:	dc00      	bgt.n	182bc <rpmsg_virtio_get_buffer_size+0x24>
		length = RPMSG_ERR_NO_BUFF;
   182ba:	4c08      	ldr	r4, [pc, #32]	; (182dc <rpmsg_virtio_get_buffer_size+0x44>)
	k_sem_take(m, K_FOREVER);
}

static inline void __metal_mutex_release(metal_mutex_t *m)
{
	k_sem_give(m);
   182bc:	4628      	mov	r0, r5
   182be:	f006 fa75 	bl	1e7ac <k_sem_give>
	rvdev = (struct rpmsg_virtio_device *)rdev;
	size = _rpmsg_virtio_get_buffer_size(rvdev);
	metal_mutex_release(&rdev->lock);
	return size;
}
   182c2:	4620      	mov	r0, r4
   182c4:	bd38      	pop	{r3, r4, r5, pc}
	if (role == RPMSG_REMOTE) {
   182c6:	2b01      	cmp	r3, #1
   182c8:	d1f7      	bne.n	182ba <rpmsg_virtio_get_buffer_size+0x22>
		    (int)virtqueue_get_desc_size(rvdev->svq) -
   182ca:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   182ce:	f006 f999 	bl	1e604 <virtqueue_get_desc_size>
   182d2:	f1a0 0410 	sub.w	r4, r0, #16
   182d6:	e7ee      	b.n	182b6 <rpmsg_virtio_get_buffer_size+0x1e>
		return RPMSG_ERR_PARAM;
   182d8:	4c01      	ldr	r4, [pc, #4]	; (182e0 <rpmsg_virtio_get_buffer_size+0x48>)
   182da:	e7f2      	b.n	182c2 <rpmsg_virtio_get_buffer_size+0x2a>
   182dc:	fffff82e 	.word	0xfffff82e
   182e0:	fffff82d 	.word	0xfffff82d

000182e4 <rpmsg_init_vdev_with_config>:
				struct virtio_device *vdev,
				rpmsg_ns_bind_cb ns_bind_cb,
				struct metal_io_region *shm_io,
				struct rpmsg_virtio_shm_pool *shpool,
				const struct rpmsg_virtio_config *config)
{
   182e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   182e8:	460d      	mov	r5, r1
   182ea:	b08a      	sub	sp, #40	; 0x28
   182ec:	4690      	mov	r8, r2
   182ee:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	; 0x48
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
	memset(rdev, 0, sizeof(*rdev));
   182f2:	228c      	movs	r2, #140	; 0x8c
   182f4:	2100      	movs	r1, #0
{
   182f6:	4604      	mov	r4, r0
   182f8:	461e      	mov	r6, r3
	memset(rdev, 0, sizeof(*rdev));
   182fa:	f003 faf5 	bl	1b8e8 <memset>
	return z_impl_k_sem_init(sem, initial_count, limit);
   182fe:	2201      	movs	r2, #1
   18300:	f104 0058 	add.w	r0, r4, #88	; 0x58
   18304:	4611      	mov	r1, r2
   18306:	f006 fdd4 	bl	1eeb2 <z_impl_k_sem_init>
	metal_mutex_init(&rdev->lock);
	rvdev->vdev = vdev;
	rdev->ns_bind_cb = ns_bind_cb;
	vdev->priv = rvdev;
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   1830a:	4b71      	ldr	r3, [pc, #452]	; (184d0 <rpmsg_init_vdev_with_config+0x1ec>)
	rvdev->vdev = vdev;
   1830c:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
	rdev->ns_bind_cb = ns_bind_cb;
   18310:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	vdev->priv = rvdev;
   18314:	626c      	str	r4, [r5, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   18316:	6763      	str	r3, [r4, #116]	; 0x74
	rdev->ops.hold_rx_buffer = rpmsg_virtio_hold_rx_buffer;
   18318:	4b6e      	ldr	r3, [pc, #440]	; (184d4 <rpmsg_init_vdev_with_config+0x1f0>)
   1831a:	67a3      	str	r3, [r4, #120]	; 0x78
	rdev->ops.release_rx_buffer = rpmsg_virtio_release_rx_buffer;
   1831c:	4b6e      	ldr	r3, [pc, #440]	; (184d8 <rpmsg_init_vdev_with_config+0x1f4>)
   1831e:	67e3      	str	r3, [r4, #124]	; 0x7c
	rdev->ops.get_tx_payload_buffer = rpmsg_virtio_get_tx_payload_buffer;
   18320:	4b6e      	ldr	r3, [pc, #440]	; (184dc <rpmsg_init_vdev_with_config+0x1f8>)
   18322:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	rdev->ops.send_offchannel_nocopy = rpmsg_virtio_send_offchannel_nocopy;
   18326:	4b6e      	ldr	r3, [pc, #440]	; (184e0 <rpmsg_init_vdev_with_config+0x1fc>)
   18328:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
   1832c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   18330:	f8d3 8018 	ldr.w	r8, [r3, #24]
	role = rpmsg_virtio_get_role(rvdev);

#ifndef VIRTIO_DEVICE_ONLY
	if (role == RPMSG_HOST) {
   18334:	f1b8 0f00 	cmp.w	r8, #0
   18338:	d165      	bne.n	18406 <rpmsg_init_vdev_with_config+0x122>
		/*
		 * The virtio configuration contains only options applicable to
		 * a virtio driver, implying rpmsg host role.
		 */
		if (config == NULL) {
   1833a:	b927      	cbnz	r7, 18346 <rpmsg_init_vdev_with_config+0x62>
			return RPMSG_ERR_PARAM;
   1833c:	4f69      	ldr	r7, [pc, #420]	; (184e4 <rpmsg_init_vdev_with_config+0x200>)
	if (role == RPMSG_HOST)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_DEVICE_ONLY*/

	return status;
}
   1833e:	4638      	mov	r0, r7
   18340:	b00a      	add	sp, #40	; 0x28
   18342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rvdev->config = *config;
   18346:	f104 038c 	add.w	r3, r4, #140	; 0x8c
   1834a:	e897 0003 	ldmia.w	r7, {r0, r1}
   1834e:	e883 0003 	stmia.w	r3, {r0, r1}
	vdev->features = rpmsg_virtio_get_features(rvdev);
   18352:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
}

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_features(rvdev->vdev);
   18356:	6a03      	ldr	r3, [r0, #32]
   18358:	689b      	ldr	r3, [r3, #8]
   1835a:	4798      	blx	r3
   1835c:	2300      	movs	r3, #0
   1835e:	6128      	str	r0, [r5, #16]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   18360:	f000 0001 	and.w	r0, r0, #1
	vdev->features = rpmsg_virtio_get_features(rvdev);
   18364:	616b      	str	r3, [r5, #20]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   18366:	f884 0088 	strb.w	r0, [r4, #136]	; 0x88
	if (role == RPMSG_HOST) {
   1836a:	f1b8 0f00 	cmp.w	r8, #0
   1836e:	d15e      	bne.n	1842e <rpmsg_init_vdev_with_config+0x14a>
		if (!shpool)
   18370:	f1b9 0f00 	cmp.w	r9, #0
   18374:	d0e2      	beq.n	1833c <rpmsg_init_vdev_with_config+0x58>
		if (!shpool->size)
   18376:	f8d9 3008 	ldr.w	r3, [r9, #8]
   1837a:	2b00      	cmp	r3, #0
   1837c:	f000 80a5 	beq.w	184ca <rpmsg_init_vdev_with_config+0x1e6>
		vq_names[0] = "rx_vq";
   18380:	4b59      	ldr	r3, [pc, #356]	; (184e8 <rpmsg_init_vdev_with_config+0x204>)
		rvdev->shpool = shpool;
   18382:	f8c4 90a4 	str.w	r9, [r4, #164]	; 0xa4
		vq_names[0] = "rx_vq";
   18386:	9304      	str	r3, [sp, #16]
		vq_names[1] = "tx_vq";
   18388:	4b58      	ldr	r3, [pc, #352]	; (184ec <rpmsg_init_vdev_with_config+0x208>)
   1838a:	9305      	str	r3, [sp, #20]
		callback[0] = rpmsg_virtio_rx_callback;
   1838c:	4b58      	ldr	r3, [pc, #352]	; (184f0 <rpmsg_init_vdev_with_config+0x20c>)
   1838e:	9306      	str	r3, [sp, #24]
		callback[1] = rpmsg_virtio_tx_callback;
   18390:	4b58      	ldr	r3, [pc, #352]	; (184f4 <rpmsg_init_vdev_with_config+0x210>)
   18392:	9307      	str	r3, [sp, #28]
		rvdev->rvq  = vdev->vrings_info[0].vq;
   18394:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   18396:	681b      	ldr	r3, [r3, #0]
   18398:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
		rvdev->svq  = vdev->vrings_info[1].vq;
   1839c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1839e:	699b      	ldr	r3, [r3, #24]
		rvdev->svq  = vdev->vrings_info[0].vq;
   183a0:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
   183a4:	ab06      	add	r3, sp, #24
	rvdev->shbuf_io = shm_io;
   183a6:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
   183aa:	9300      	str	r3, [sp, #0]
   183ac:	2202      	movs	r2, #2
   183ae:	2100      	movs	r1, #0
   183b0:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   183b4:	ab04      	add	r3, sp, #16
   183b6:	f7ff fdf9 	bl	17fac <virtio_create_virtqueues>
	if (status != RPMSG_SUCCESS)
   183ba:	4607      	mov	r7, r0
   183bc:	2800      	cmp	r0, #0
   183be:	d1be      	bne.n	1833e <rpmsg_init_vdev_with_config+0x5a>
	virtqueue_disable_cb(rvdev->svq);
   183c0:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   183c4:	f006 f8b9 	bl	1e53a <virtqueue_disable_cb>
		vq = vdev->vrings_info[i].vq;
   183c8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   183ca:	681b      	ldr	r3, [r3, #0]
		vq->shm_io = shm_io;
   183cc:	629e      	str	r6, [r3, #40]	; 0x28
		vq = vdev->vrings_info[i].vq;
   183ce:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   183d0:	699b      	ldr	r3, [r3, #24]
		vq->shm_io = shm_io;
   183d2:	629e      	str	r6, [r3, #40]	; 0x28
	if (role == RPMSG_HOST) {
   183d4:	f1b8 0f00 	cmp.w	r8, #0
   183d8:	d15f      	bne.n	1849a <rpmsg_init_vdev_with_config+0x1b6>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   183da:	46c2      	mov	sl, r8
		vqbuf.len = rvdev->config.r2h_buf_size;
   183dc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   183e0:	9309      	str	r3, [sp, #36]	; 0x24
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   183e2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   183e6:	895b      	ldrh	r3, [r3, #10]
   183e8:	4553      	cmp	r3, sl
   183ea:	d832      	bhi.n	18452 <rpmsg_init_vdev_with_config+0x16e>
	if (rdev->support_ns) {
   183ec:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
	list->next = list;
   183f0:	e9c4 4400 	strd	r4, r4, [r4]
   183f4:	2b00      	cmp	r3, #0
   183f6:	d157      	bne.n	184a8 <rpmsg_init_vdev_with_config+0x1c4>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
   183f8:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   183fc:	2104      	movs	r1, #4
   183fe:	6a03      	ldr	r3, [r0, #32]
   18400:	685b      	ldr	r3, [r3, #4]
   18402:	4798      	blx	r3
}
   18404:	e79b      	b.n	1833e <rpmsg_init_vdev_with_config+0x5a>
	if (role == RPMSG_REMOTE) {
   18406:	f1b8 0f01 	cmp.w	r8, #1
   1840a:	d1a2      	bne.n	18352 <rpmsg_init_vdev_with_config+0x6e>
		status = rpmsg_virtio_get_status(rvdev);
   1840c:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
	return rvdev->vdev->func->get_status(rvdev->vdev);
   18410:	6a03      	ldr	r3, [r0, #32]
   18412:	681b      	ldr	r3, [r3, #0]
   18414:	4798      	blx	r3
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
   18416:	0642      	lsls	r2, r0, #25
   18418:	d506      	bpl.n	18428 <rpmsg_init_vdev_with_config+0x144>
			rpmsg_virtio_set_status(rvdev, 0);
   1841a:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   1841e:	2100      	movs	r1, #0
   18420:	6a03      	ldr	r3, [r0, #32]
   18422:	685b      	ldr	r3, [r3, #4]
   18424:	4798      	blx	r3
}
   18426:	e7f1      	b.n	1840c <rpmsg_init_vdev_with_config+0x128>
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
   18428:	0743      	lsls	r3, r0, #29
   1842a:	d5ef      	bpl.n	1840c <rpmsg_init_vdev_with_config+0x128>
   1842c:	e791      	b.n	18352 <rpmsg_init_vdev_with_config+0x6e>
	if (role == RPMSG_REMOTE) {
   1842e:	f1b8 0f01 	cmp.w	r8, #1
   18432:	d1b7      	bne.n	183a4 <rpmsg_init_vdev_with_config+0xc0>
		vq_names[0] = "tx_vq";
   18434:	4b2d      	ldr	r3, [pc, #180]	; (184ec <rpmsg_init_vdev_with_config+0x208>)
   18436:	9304      	str	r3, [sp, #16]
		vq_names[1] = "rx_vq";
   18438:	4b2b      	ldr	r3, [pc, #172]	; (184e8 <rpmsg_init_vdev_with_config+0x204>)
   1843a:	9305      	str	r3, [sp, #20]
		callback[0] = rpmsg_virtio_tx_callback;
   1843c:	4b2d      	ldr	r3, [pc, #180]	; (184f4 <rpmsg_init_vdev_with_config+0x210>)
   1843e:	9306      	str	r3, [sp, #24]
		callback[1] = rpmsg_virtio_rx_callback;
   18440:	4b2b      	ldr	r3, [pc, #172]	; (184f0 <rpmsg_init_vdev_with_config+0x20c>)
   18442:	9307      	str	r3, [sp, #28]
		rvdev->rvq  = vdev->vrings_info[1].vq;
   18444:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   18446:	699b      	ldr	r3, [r3, #24]
   18448:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
		rvdev->svq  = vdev->vrings_info[0].vq;
   1844c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1844e:	681b      	ldr	r3, [r3, #0]
   18450:	e7a6      	b.n	183a0 <rpmsg_init_vdev_with_config+0xbc>
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
   18452:	4648      	mov	r0, r9
   18454:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
   18458:	f006 faf2 	bl	1ea40 <rpmsg_virtio_shm_pool_get_buffer>
			if (!buffer) {
   1845c:	4605      	mov	r5, r0
   1845e:	b1c8      	cbz	r0, 18494 <rpmsg_init_vdev_with_config+0x1b0>
   18460:	6831      	ldr	r1, [r6, #0]
			vqbuf.buf = buffer;
   18462:	9008      	str	r0, [sp, #32]
   18464:	1a41      	subs	r1, r0, r1

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   18466:	68b0      	ldr	r0, [r6, #8]
			metal_io_block_set(shm_io,
   18468:	2200      	movs	r2, #0
   1846a:	4281      	cmp	r1, r0
   1846c:	bf28      	it	cs
   1846e:	f04f 31ff 	movcs.w	r1, #4294967295
   18472:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   18476:	4630      	mov	r0, r6
   18478:	f005 fef1 	bl	1e25e <metal_io_block_set>
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
   1847c:	9500      	str	r5, [sp, #0]
   1847e:	2301      	movs	r3, #1
   18480:	2200      	movs	r2, #0
   18482:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   18486:	a908      	add	r1, sp, #32
   18488:	f005 ff68 	bl	1e35c <virtqueue_add_buffer>
			if (status != RPMSG_SUCCESS) {
   1848c:	b918      	cbnz	r0, 18496 <rpmsg_init_vdev_with_config+0x1b2>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   1848e:	f10a 0a01 	add.w	sl, sl, #1
   18492:	e7a6      	b.n	183e2 <rpmsg_init_vdev_with_config+0xfe>
				return RPMSG_ERR_NO_BUFF;
   18494:	4818      	ldr	r0, [pc, #96]	; (184f8 <rpmsg_init_vdev_with_config+0x214>)
   18496:	4607      	mov	r7, r0
   18498:	e751      	b.n	1833e <rpmsg_init_vdev_with_config+0x5a>
	if (rdev->support_ns) {
   1849a:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
   1849e:	e9c4 4400 	strd	r4, r4, [r4]
   184a2:	2b00      	cmp	r3, #0
   184a4:	f43f af4b 	beq.w	1833e <rpmsg_init_vdev_with_config+0x5a>
		rpmsg_register_endpoint(rdev, &rdev->ns_ept, "NS",
   184a8:	2300      	movs	r3, #0
   184aa:	9302      	str	r3, [sp, #8]
   184ac:	4b13      	ldr	r3, [pc, #76]	; (184fc <rpmsg_init_vdev_with_config+0x218>)
   184ae:	4620      	mov	r0, r4
   184b0:	9301      	str	r3, [sp, #4]
   184b2:	2335      	movs	r3, #53	; 0x35
   184b4:	4a12      	ldr	r2, [pc, #72]	; (18500 <rpmsg_init_vdev_with_config+0x21c>)
   184b6:	9300      	str	r3, [sp, #0]
   184b8:	f104 0108 	add.w	r1, r4, #8
   184bc:	f7ff fe24 	bl	18108 <rpmsg_register_endpoint>
	if (role == RPMSG_HOST)
   184c0:	f1b8 0f00 	cmp.w	r8, #0
   184c4:	f47f af3b 	bne.w	1833e <rpmsg_init_vdev_with_config+0x5a>
   184c8:	e796      	b.n	183f8 <rpmsg_init_vdev_with_config+0x114>
			return RPMSG_ERR_NO_BUFF;
   184ca:	4f0b      	ldr	r7, [pc, #44]	; (184f8 <rpmsg_init_vdev_with_config+0x214>)
   184cc:	e737      	b.n	1833e <rpmsg_init_vdev_with_config+0x5a>
   184ce:	bf00      	nop
   184d0:	0001823d 	.word	0x0001823d
   184d4:	0001e79d 	.word	0x0001e79d
   184d8:	0001e967 	.word	0x0001e967
   184dc:	0001ea5d 	.word	0x0001ea5d
   184e0:	0001e99f 	.word	0x0001e99f
   184e4:	fffff82d 	.word	0xfffff82d
   184e8:	00023e9b 	.word	0x00023e9b
   184ec:	00023ea1 	.word	0x00023ea1
   184f0:	0001e8b3 	.word	0x0001e8b3
   184f4:	0001e7ab 	.word	0x0001e7ab
   184f8:	fffff82e 	.word	0xfffff82e
   184fc:	0001e7bd 	.word	0x0001e7bd
   18500:	00023ea7 	.word	0x00023ea7

00018504 <rpmsg_init_vdev>:
{
   18504:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   18506:	4605      	mov	r5, r0
   18508:	460e      	mov	r6, r1
			   shpool, RPMSG_VIRTIO_DEFAULT_CONFIG);
   1850a:	4907      	ldr	r1, [pc, #28]	; (18528 <rpmsg_init_vdev+0x24>)
   1850c:	ac02      	add	r4, sp, #8
   1850e:	c903      	ldmia	r1, {r0, r1}
   18510:	e884 0003 	stmia.w	r4, {r0, r1}
	return rpmsg_init_vdev_with_config(rvdev, vdev, ns_bind_cb, shm_io,
   18514:	9908      	ldr	r1, [sp, #32]
   18516:	4628      	mov	r0, r5
   18518:	9100      	str	r1, [sp, #0]
   1851a:	9401      	str	r4, [sp, #4]
   1851c:	4631      	mov	r1, r6
   1851e:	f7ff fee1 	bl	182e4 <rpmsg_init_vdev_with_config>
}
   18522:	b004      	add	sp, #16
   18524:	bd70      	pop	{r4, r5, r6, pc}
   18526:	bf00      	nop
   18528:	0001fdcc 	.word	0x0001fdcc

0001852c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1852c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18530:	4605      	mov	r5, r0
   18532:	460e      	mov	r6, r1
   18534:	af00      	add	r7, sp, #0
	__asm__ volatile(
   18536:	f04f 0320 	mov.w	r3, #32
   1853a:	f3ef 8a11 	mrs	sl, BASEPRI
   1853e:	f383 8812 	msr	BASEPRI_MAX, r3
   18542:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   18546:	f001 f8b3 	bl	196b0 <z_impl_z_current_get>
   1854a:	2d04      	cmp	r5, #4
   1854c:	bf98      	it	ls
   1854e:	4b30      	ldrls	r3, [pc, #192]	; (18610 <z_fatal_error+0xe4>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   18550:	46e9      	mov	r9, sp
   18552:	b08c      	sub	sp, #48	; 0x30
   18554:	4604      	mov	r4, r0
   18556:	466a      	mov	r2, sp
   18558:	bf94      	ite	ls
   1855a:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
   1855e:	4b2d      	ldrhi	r3, [pc, #180]	; (18614 <z_fatal_error+0xe8>)
   18560:	6213      	str	r3, [r2, #32]
   18562:	f240 4302 	movw	r3, #1026	; 0x402
   18566:	f04f 0b00 	mov.w	fp, #0
   1856a:	8513      	strh	r3, [r2, #40]	; 0x28
   1856c:	492a      	ldr	r1, [pc, #168]	; (18618 <z_fatal_error+0xec>)
   1856e:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 1861c <z_fatal_error+0xf0>
   18572:	4b2b      	ldr	r3, [pc, #172]	; (18620 <z_fatal_error+0xf4>)
   18574:	e9c2 8506 	strd	r8, r5, [r2, #24]
   18578:	6151      	str	r1, [r2, #20]
   1857a:	f8c2 b024 	str.w	fp, [r2, #36]	; 0x24
   1857e:	f842 3f10 	str.w	r3, [r2, #16]!
   18582:	f44f 5151 	mov.w	r1, #13376	; 0x3440
   18586:	465b      	mov	r3, fp
   18588:	4826      	ldr	r0, [pc, #152]	; (18624 <z_fatal_error+0xf8>)
   1858a:	f7f2 ffe9 	bl	b560 <z_impl_z_log_msg_static_create>
   1858e:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   18590:	b196      	cbz	r6, 185b8 <z_fatal_error+0x8c>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   18592:	69f3      	ldr	r3, [r6, #28]
   18594:	f3c3 0308 	ubfx	r3, r3, #0, #9
   18598:	b173      	cbz	r3, 185b8 <z_fatal_error+0x8c>
		LOG_ERR("Fault during interrupt handling\n");
   1859a:	b088      	sub	sp, #32
   1859c:	466a      	mov	r2, sp
   1859e:	4b22      	ldr	r3, [pc, #136]	; (18628 <z_fatal_error+0xfc>)
   185a0:	e9c2 3805 	strd	r3, r8, [r2, #20]
   185a4:	2303      	movs	r3, #3
   185a6:	f842 3f10 	str.w	r3, [r2, #16]!
   185aa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   185ae:	465b      	mov	r3, fp
   185b0:	481c      	ldr	r0, [pc, #112]	; (18624 <z_fatal_error+0xf8>)
   185b2:	f7f2 ffd5 	bl	b560 <z_impl_z_log_msg_static_create>
   185b6:	46cd      	mov	sp, r9
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   185b8:	b12c      	cbz	r4, 185c6 <z_fatal_error+0x9a>
   185ba:	4620      	mov	r0, r4
   185bc:	f006 fb8d 	bl	1ecda <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   185c0:	b108      	cbz	r0, 185c6 <z_fatal_error+0x9a>
   185c2:	7803      	ldrb	r3, [r0, #0]
   185c4:	b903      	cbnz	r3, 185c8 <z_fatal_error+0x9c>
		thread_name = "unknown";
   185c6:	4819      	ldr	r0, [pc, #100]	; (1862c <z_fatal_error+0x100>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   185c8:	46e9      	mov	r9, sp
   185ca:	b08a      	sub	sp, #40	; 0x28
   185cc:	466a      	mov	r2, sp
   185ce:	4b18      	ldr	r3, [pc, #96]	; (18630 <z_fatal_error+0x104>)
   185d0:	e9c2 4007 	strd	r4, r0, [r2, #28]
   185d4:	e9c2 3805 	strd	r3, r8, [r2, #20]
   185d8:	f240 4302 	movw	r3, #1026	; 0x402
   185dc:	8493      	strh	r3, [r2, #36]	; 0x24
   185de:	4b15      	ldr	r3, [pc, #84]	; (18634 <z_fatal_error+0x108>)
   185e0:	f842 3f10 	str.w	r3, [r2, #16]!
   185e4:	2300      	movs	r3, #0
   185e6:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   185ea:	480e      	ldr	r0, [pc, #56]	; (18624 <z_fatal_error+0xf8>)
   185ec:	f7f2 ffb8 	bl	b560 <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   185f0:	4631      	mov	r1, r6
   185f2:	46cd      	mov	sp, r9
   185f4:	4628      	mov	r0, r5
   185f6:	f7fe fd65 	bl	170c4 <k_sys_fatal_error_handler>
	__asm__ volatile(
   185fa:	f38a 8811 	msr	BASEPRI, sl
   185fe:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   18602:	4620      	mov	r0, r4
   18604:	f7f4 ff3c 	bl	d480 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   18608:	46bd      	mov	sp, r7
   1860a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1860e:	bf00      	nop
   18610:	000206f4 	.word	0x000206f4
   18614:	00023eaa 	.word	0x00023eaa
   18618:	00023eb8 	.word	0x00023eb8
   1861c:	00023f6f 	.word	0x00023f6f
   18620:	01000006 	.word	0x01000006
   18624:	0001fd04 	.word	0x0001fd04
   18628:	00023ee4 	.word	0x00023ee4
   1862c:	0002162a 	.word	0x0002162a
   18630:	00023f09 	.word	0x00023f09
   18634:	01000005 	.word	0x01000005

00018638 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   18638:	4b0f      	ldr	r3, [pc, #60]	; (18678 <z_sys_init_run_level+0x40>)
{
   1863a:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1863c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   18640:	3001      	adds	r0, #1
   18642:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   18646:	42a6      	cmp	r6, r4
   18648:	d800      	bhi.n	1864c <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   1864a:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   1864c:	e9d4 3500 	ldrd	r3, r5, [r4]
   18650:	4628      	mov	r0, r5
   18652:	4798      	blx	r3
		if (dev != NULL) {
   18654:	b16d      	cbz	r5, 18672 <z_sys_init_run_level+0x3a>
			if (rc != 0) {
   18656:	b138      	cbz	r0, 18668 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   18658:	2800      	cmp	r0, #0
   1865a:	bfb8      	it	lt
   1865c:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
   1865e:	28ff      	cmp	r0, #255	; 0xff
   18660:	bfa8      	it	ge
   18662:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   18664:	68eb      	ldr	r3, [r5, #12]
   18666:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   18668:	68ea      	ldr	r2, [r5, #12]
   1866a:	7853      	ldrb	r3, [r2, #1]
   1866c:	f043 0301 	orr.w	r3, r3, #1
   18670:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   18672:	3408      	adds	r4, #8
   18674:	e7e7      	b.n	18646 <z_sys_init_run_level+0xe>
   18676:	bf00      	nop
   18678:	00020708 	.word	0x00020708

0001867c <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   1867c:	2201      	movs	r2, #1
{
   1867e:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   18680:	4b09      	ldr	r3, [pc, #36]	; (186a8 <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   18682:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   18684:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   18686:	f7ff ffd7 	bl	18638 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   1868a:	f001 fb45 	bl	19d18 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   1868e:	2004      	movs	r0, #4
   18690:	f7ff ffd2 	bl	18638 <z_sys_init_run_level>

	z_init_static_threads();
   18694:	f000 f96c 	bl	18970 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
   18698:	f001 fb6c 	bl	19d74 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1869c:	4a03      	ldr	r2, [pc, #12]	; (186ac <bg_thread_main+0x30>)
   1869e:	7b13      	ldrb	r3, [r2, #12]
   186a0:	f023 0301 	bic.w	r3, r3, #1
   186a4:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   186a6:	bd08      	pop	{r3, pc}
   186a8:	2000a076 	.word	0x2000a076
   186ac:	20009970 	.word	0x20009970

000186b0 <z_bss_zero>:
{
   186b0:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   186b2:	4803      	ldr	r0, [pc, #12]	; (186c0 <z_bss_zero+0x10>)
   186b4:	4a03      	ldr	r2, [pc, #12]	; (186c4 <z_bss_zero+0x14>)
   186b6:	2100      	movs	r1, #0
   186b8:	1a12      	subs	r2, r2, r0
   186ba:	f006 fa50 	bl	1eb5e <z_early_memset>
}
   186be:	bd08      	pop	{r3, pc}
   186c0:	200088b8 	.word	0x200088b8
   186c4:	2000a078 	.word	0x2000a078

000186c8 <z_init_cpu>:

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
	struct k_thread *thread = &z_idle_threads[i];
   186c8:	2388      	movs	r3, #136	; 0x88
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   186ca:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
   186cc:	4e13      	ldr	r6, [pc, #76]	; (1871c <z_init_cpu+0x54>)
	z_setup_new_thread(thread, stack,
   186ce:	2201      	movs	r2, #1
	struct k_thread *thread = &z_idle_threads[i];
   186d0:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
   186d4:	2300      	movs	r3, #0
{
   186d6:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   186d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
   186dc:	220f      	movs	r2, #15
   186de:	9301      	str	r3, [sp, #4]
   186e0:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   186e4:	2318      	movs	r3, #24
	z_setup_new_thread(thread, stack,
   186e6:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   186ea:	4d0d      	ldr	r5, [pc, #52]	; (18720 <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
   186ec:	490d      	ldr	r1, [pc, #52]	; (18724 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   186ee:	fb03 5500 	mla	r5, r3, r0, r5
{
   186f2:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   186f4:	fb02 1100 	mla	r1, r2, r0, r1
   186f8:	4b0b      	ldr	r3, [pc, #44]	; (18728 <z_init_cpu+0x60>)
   186fa:	4630      	mov	r0, r6
   186fc:	9500      	str	r5, [sp, #0]
   186fe:	f000 f8db 	bl	188b8 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   18702:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
   18704:	752c      	strb	r4, [r5, #20]
   18706:	f023 0304 	bic.w	r3, r3, #4
   1870a:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   1870c:	4b07      	ldr	r3, [pc, #28]	; (1872c <z_init_cpu+0x64>)
   1870e:	3401      	adds	r4, #1
   18710:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   18714:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   18716:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   18718:	b006      	add	sp, #24
   1871a:	bd70      	pop	{r4, r5, r6, pc}
   1871c:	200098e8 	.word	0x200098e8
   18720:	20009f2c 	.word	0x20009f2c
   18724:	2000ca28 	.word	0x2000ca28
   18728:	00018a29 	.word	0x00018a29
   1872c:	2000c228 	.word	0x2000c228

00018730 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   18730:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   18732:	2000      	movs	r0, #0
{
   18734:	b0a8      	sub	sp, #160	; 0xa0
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   18736:	f7ff ff7f 	bl	18638 <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   1873a:	4b2f      	ldr	r3, [pc, #188]	; (187f8 <z_cstart+0xc8>)
	uint32_t msp =
   1873c:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   18740:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   18744:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   18748:	2400      	movs	r4, #0
   1874a:	23e0      	movs	r3, #224	; 0xe0
   1874c:	4d2b      	ldr	r5, [pc, #172]	; (187fc <z_cstart+0xcc>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   1874e:	4e2c      	ldr	r6, [pc, #176]	; (18800 <z_cstart+0xd0>)
   18750:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   18754:	77ec      	strb	r4, [r5, #31]
   18756:	762c      	strb	r4, [r5, #24]
   18758:	766c      	strb	r4, [r5, #25]
   1875a:	76ac      	strb	r4, [r5, #26]
   1875c:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   18760:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   18762:	4f28      	ldr	r7, [pc, #160]	; (18804 <z_cstart+0xd4>)
   18764:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   18768:	626b      	str	r3, [r5, #36]	; 0x24
   1876a:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1876e:	f7f4 fdeb 	bl	d348 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   18772:	f7f4 f8d7 	bl	c924 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   18776:	f04f 33ff 	mov.w	r3, #4294967295
   1877a:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1877c:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1877e:	f7f5 f837 	bl	d7f0 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   18782:	f7f4 fe93 	bl	d4ac <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   18786:	f7f2 fd7f 	bl	b288 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   1878a:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
   1878e:	ad06      	add	r5, sp, #24
   18790:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
   18792:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
   18796:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	k_thread_system_pool_assign(dummy_thread);
   1879a:	f001 fa9f 	bl	19cdc <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
   1879e:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   187a0:	f006 f9d1 	bl	1eb46 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   187a4:	2001      	movs	r0, #1
   187a6:	f7ff ff47 	bl	18638 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   187aa:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   187ac:	4d16      	ldr	r5, [pc, #88]	; (18808 <z_cstart+0xd8>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   187ae:	f7ff ff43 	bl	18638 <z_sys_init_run_level>
	z_sched_init();
   187b2:	f000 fed5 	bl	19560 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   187b6:	4b15      	ldr	r3, [pc, #84]	; (1880c <z_cstart+0xdc>)
	_kernel.ready_q.cache = &z_main_thread;
   187b8:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   187ba:	9305      	str	r3, [sp, #20]
   187bc:	2301      	movs	r3, #1
   187be:	4914      	ldr	r1, [pc, #80]	; (18810 <z_cstart+0xe0>)
   187c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
   187c4:	e9cd 4303 	strd	r4, r3, [sp, #12]
   187c8:	4628      	mov	r0, r5
   187ca:	463b      	mov	r3, r7
   187cc:	e9cd 4401 	strd	r4, r4, [sp, #4]
   187d0:	9400      	str	r4, [sp, #0]
   187d2:	f000 f871 	bl	188b8 <z_setup_new_thread>
   187d6:	4606      	mov	r6, r0
   187d8:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
   187da:	4628      	mov	r0, r5
   187dc:	f022 0204 	bic.w	r2, r2, #4
   187e0:	736a      	strb	r2, [r5, #13]
   187e2:	f006 fce4 	bl	1f1ae <z_ready_thread>
	z_init_cpu(0);
   187e6:	4620      	mov	r0, r4
   187e8:	f7ff ff6e 	bl	186c8 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   187ec:	463a      	mov	r2, r7
   187ee:	4631      	mov	r1, r6
   187f0:	4628      	mov	r0, r5
   187f2:	f7f4 fa03 	bl	cbfc <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   187f6:	bf00      	nop
   187f8:	2000c228 	.word	0x2000c228
   187fc:	e000ed00 	.word	0xe000ed00
   18800:	20009f2c 	.word	0x20009f2c
   18804:	0001867d 	.word	0x0001867d
   18808:	20009970 	.word	0x20009970
   1880c:	00023f7d 	.word	0x00023f7d
   18810:	2000cb68 	.word	0x2000cb68

00018814 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   18814:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   18816:	4c06      	ldr	r4, [pc, #24]	; (18830 <statics_init+0x1c>)
   18818:	4d06      	ldr	r5, [pc, #24]	; (18834 <statics_init+0x20>)
   1881a:	42ac      	cmp	r4, r5
   1881c:	d301      	bcc.n	18822 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   1881e:	2000      	movs	r0, #0
   18820:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   18822:	4620      	mov	r0, r4
   18824:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   18828:	f006 f99d 	bl	1eb66 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1882c:	3414      	adds	r4, #20
   1882e:	e7f4      	b.n	1881a <statics_init+0x6>
   18830:	200086e4 	.word	0x200086e4
   18834:	200086f8 	.word	0x200086f8

00018838 <init_mem_slab_module>:
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
	int rc = 0;
   18838:	2000      	movs	r0, #0
{
   1883a:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1883c:	4c05      	ldr	r4, [pc, #20]	; (18854 <init_mem_slab_module+0x1c>)
   1883e:	4d06      	ldr	r5, [pc, #24]	; (18858 <init_mem_slab_module+0x20>)
   18840:	42ac      	cmp	r4, r5
   18842:	d300      	bcc.n	18846 <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
   18844:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
   18846:	4620      	mov	r0, r4
   18848:	f006 f9ff 	bl	1ec4a <create_free_list>
		if (rc < 0) {
   1884c:	2800      	cmp	r0, #0
   1884e:	dbf9      	blt.n	18844 <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   18850:	341c      	adds	r4, #28
   18852:	e7f5      	b.n	18840 <init_mem_slab_module+0x8>
   18854:	20008690 	.word	0x20008690
   18858:	200086e4 	.word	0x200086e4

0001885c <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1885c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1885e:	460c      	mov	r4, r1
	__asm__ volatile(
   18860:	f04f 0520 	mov.w	r5, #32
   18864:	f3ef 8111 	mrs	r1, BASEPRI
   18868:	f385 8812 	msr	BASEPRI_MAX, r5
   1886c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   18870:	6945      	ldr	r5, [r0, #20]
   18872:	b15d      	cbz	r5, 1888c <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   18874:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   18876:	682b      	ldr	r3, [r5, #0]
   18878:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1887a:	6983      	ldr	r3, [r0, #24]
   1887c:	3301      	adds	r3, #1
   1887e:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   18880:	2000      	movs	r0, #0
	__asm__ volatile(
   18882:	f381 8811 	msr	BASEPRI, r1
   18886:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   1888a:	e011      	b.n	188b0 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   1888c:	ea52 0603 	orrs.w	r6, r2, r3
   18890:	d103      	bne.n	1889a <k_mem_slab_alloc+0x3e>
		result = -ENOMEM;
   18892:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
   18896:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   18898:	e7f3      	b.n	18882 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   1889a:	e9cd 2300 	strd	r2, r3, [sp]
   1889e:	4602      	mov	r2, r0
   188a0:	3008      	adds	r0, #8
   188a2:	f000 fd67 	bl	19374 <z_pend_curr>
		if (result == 0) {
   188a6:	b918      	cbnz	r0, 188b0 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   188a8:	4b02      	ldr	r3, [pc, #8]	; (188b4 <k_mem_slab_alloc+0x58>)
   188aa:	689b      	ldr	r3, [r3, #8]
   188ac:	695b      	ldr	r3, [r3, #20]
   188ae:	6023      	str	r3, [r4, #0]
}
   188b0:	b002      	add	sp, #8
   188b2:	bd70      	pop	{r4, r5, r6, pc}
   188b4:	20009f2c 	.word	0x20009f2c

000188b8 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   188b8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   188bc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   188be:	f100 0558 	add.w	r5, r0, #88	; 0x58
   188c2:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   188c4:	2604      	movs	r6, #4
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   188c6:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
   188ca:	2500      	movs	r5, #0
{
   188cc:	4604      	mov	r4, r0
	thread_base->thread_state = (uint8_t)initial_state;
   188ce:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   188d0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   188d2:	e9c0 5506 	strd	r5, r5, [r0, #24]
   188d6:	7386      	strb	r6, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   188d8:	1dd6      	adds	r6, r2, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   188da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   188dc:	f026 0607 	bic.w	r6, r6, #7
	new_thread->stack_info.size = stack_buf_size;
   188e0:	e9c0 161a 	strd	r1, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   188e4:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   188e6:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   188e8:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   188ea:	9202      	str	r2, [sp, #8]
   188ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	stack_ptr = (char *)stack + stack_obj_size;
   188ee:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   188f2:	9201      	str	r2, [sp, #4]
   188f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   188f6:	9200      	str	r2, [sp, #0]
   188f8:	4642      	mov	r2, r8
   188fa:	f7f4 f95f 	bl	cbbc <arch_new_thread>
	if (!_current) {
   188fe:	4b05      	ldr	r3, [pc, #20]	; (18914 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
   18900:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   18902:	689b      	ldr	r3, [r3, #8]
   18904:	b103      	cbz	r3, 18908 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
   18906:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
   18908:	4640      	mov	r0, r8
   1890a:	6763      	str	r3, [r4, #116]	; 0x74
   1890c:	b004      	add	sp, #16
   1890e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18912:	bf00      	nop
   18914:	20009f2c 	.word	0x20009f2c

00018918 <z_impl_k_thread_create>:
{
   18918:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1891a:	2500      	movs	r5, #0
{
   1891c:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1891e:	9505      	str	r5, [sp, #20]
   18920:	9d10      	ldr	r5, [sp, #64]	; 0x40
{
   18922:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   18926:	9504      	str	r5, [sp, #16]
   18928:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
{
   1892a:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1892c:	9503      	str	r5, [sp, #12]
   1892e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   18930:	9502      	str	r5, [sp, #8]
   18932:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   18934:	9501      	str	r5, [sp, #4]
   18936:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   18938:	9500      	str	r5, [sp, #0]
   1893a:	f7ff ffbd 	bl	188b8 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1893e:	f1b6 3fff 	cmp.w	r6, #4294967295
   18942:	bf08      	it	eq
   18944:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   18948:	d005      	beq.n	18956 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1894a:	ea56 0307 	orrs.w	r3, r6, r7
   1894e:	d105      	bne.n	1895c <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   18950:	4620      	mov	r0, r4
   18952:	f000 fd85 	bl	19460 <z_sched_start>
}
   18956:	4620      	mov	r0, r4
   18958:	b007      	add	sp, #28
   1895a:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1895c:	463a      	mov	r2, r7
   1895e:	4633      	mov	r3, r6
   18960:	4902      	ldr	r1, [pc, #8]	; (1896c <z_impl_k_thread_create+0x54>)
   18962:	f104 0018 	add.w	r0, r4, #24
   18966:	f000 ff83 	bl	19870 <z_add_timeout>
   1896a:	e7f4      	b.n	18956 <z_impl_k_thread_create+0x3e>
   1896c:	0001f11b 	.word	0x0001f11b

00018970 <z_init_static_threads>:
{
   18970:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18974:	4c29      	ldr	r4, [pc, #164]	; (18a1c <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   18976:	4d2a      	ldr	r5, [pc, #168]	; (18a20 <z_init_static_threads+0xb0>)
{
   18978:	b087      	sub	sp, #28
   1897a:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   1897c:	42ae      	cmp	r6, r5
   1897e:	f104 0430 	add.w	r4, r4, #48	; 0x30
   18982:	d30f      	bcc.n	189a4 <z_init_static_threads+0x34>
	k_sched_lock();
   18984:	f000 fdbc 	bl	19500 <k_sched_lock>
   18988:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1898c:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
   18990:	4c22      	ldr	r4, [pc, #136]	; (18a1c <z_init_static_threads+0xac>)
   18992:	f8df 9090 	ldr.w	r9, [pc, #144]	; 18a24 <z_init_static_threads+0xb4>
   18996:	42ac      	cmp	r4, r5
   18998:	d320      	bcc.n	189dc <z_init_static_threads+0x6c>
}
   1899a:	b007      	add	sp, #28
   1899c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   189a0:	f000 bdc2 	b.w	19528 <k_sched_unlock>
		z_setup_new_thread(
   189a4:	f854 3c04 	ldr.w	r3, [r4, #-4]
   189a8:	9305      	str	r3, [sp, #20]
   189aa:	f854 3c10 	ldr.w	r3, [r4, #-16]
   189ae:	9304      	str	r3, [sp, #16]
   189b0:	f854 3c14 	ldr.w	r3, [r4, #-20]
   189b4:	9303      	str	r3, [sp, #12]
   189b6:	f854 3c18 	ldr.w	r3, [r4, #-24]
   189ba:	9302      	str	r3, [sp, #8]
   189bc:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   189c0:	9301      	str	r3, [sp, #4]
   189c2:	f854 3c20 	ldr.w	r3, [r4, #-32]
   189c6:	9300      	str	r3, [sp, #0]
   189c8:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   189cc:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   189d0:	f7ff ff72 	bl	188b8 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   189d4:	f854 3c30 	ldr.w	r3, [r4, #-48]
   189d8:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   189da:	e7ce      	b.n	1897a <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   189dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   189de:	1c5a      	adds	r2, r3, #1
   189e0:	d00d      	beq.n	189fe <z_init_static_threads+0x8e>
   189e2:	2100      	movs	r1, #0
   189e4:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
   189e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   189ea:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   189ee:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   189f2:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   189f6:	d104      	bne.n	18a02 <z_init_static_threads+0x92>
	z_sched_start(thread);
   189f8:	4640      	mov	r0, r8
   189fa:	f000 fd31 	bl	19460 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   189fe:	3430      	adds	r4, #48	; 0x30
   18a00:	e7c9      	b.n	18996 <z_init_static_threads+0x26>
   18a02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18a06:	2300      	movs	r3, #0
   18a08:	f7f0 f856 	bl	8ab8 <__aeabi_uldivmod>
   18a0c:	4602      	mov	r2, r0
   18a0e:	460b      	mov	r3, r1
   18a10:	f108 0018 	add.w	r0, r8, #24
   18a14:	4649      	mov	r1, r9
   18a16:	f000 ff2b 	bl	19870 <z_add_timeout>
   18a1a:	e7f0      	b.n	189fe <z_init_static_threads+0x8e>
   18a1c:	0001faf0 	.word	0x0001faf0
   18a20:	0001fb80 	.word	0x0001fb80
   18a24:	0001f11b 	.word	0x0001f11b

00018a28 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   18a28:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   18a2a:	4c0b      	ldr	r4, [pc, #44]	; (18a58 <idle+0x30>)
   18a2c:	4d0b      	ldr	r5, [pc, #44]	; (18a5c <idle+0x34>)
	__asm__ volatile(
   18a2e:	f04f 0220 	mov.w	r2, #32
   18a32:	f3ef 8311 	mrs	r3, BASEPRI
   18a36:	f382 8812 	msr	BASEPRI_MAX, r2
   18a3a:	f3bf 8f6f 	isb	sy
   18a3e:	f006 fc7c 	bl	1f33a <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   18a42:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   18a44:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   18a46:	b913      	cbnz	r3, 18a4e <idle+0x26>
	arch_cpu_idle();
   18a48:	f7f3 ff72 	bl	c930 <arch_cpu_idle>
}
   18a4c:	e7ef      	b.n	18a2e <idle+0x6>
   18a4e:	f7f3 fd2b 	bl	c4a8 <pm_system_suspend>
   18a52:	2800      	cmp	r0, #0
   18a54:	d1eb      	bne.n	18a2e <idle+0x6>
   18a56:	e7f7      	b.n	18a48 <idle+0x20>
   18a58:	20009f2c 	.word	0x20009f2c
   18a5c:	2000a076 	.word	0x2000a076

00018a60 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   18a60:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   18a64:	4604      	mov	r4, r0
   18a66:	4617      	mov	r7, r2
   18a68:	461e      	mov	r6, r3
   18a6a:	f04f 0320 	mov.w	r3, #32
   18a6e:	f3ef 8811 	mrs	r8, BASEPRI
   18a72:	f383 8812 	msr	BASEPRI_MAX, r3
   18a76:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   18a7a:	68c3      	ldr	r3, [r0, #12]
   18a7c:	4a33      	ldr	r2, [pc, #204]	; (18b4c <z_impl_k_mutex_lock+0xec>)
   18a7e:	b17b      	cbz	r3, 18aa0 <z_impl_k_mutex_lock+0x40>
   18a80:	6880      	ldr	r0, [r0, #8]
   18a82:	6891      	ldr	r1, [r2, #8]
   18a84:	4288      	cmp	r0, r1
   18a86:	d019      	beq.n	18abc <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   18a88:	ea57 0306 	orrs.w	r3, r7, r6
   18a8c:	d118      	bne.n	18ac0 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   18a8e:	f388 8811 	msr	BASEPRI, r8
   18a92:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   18a96:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   18a9a:	b002      	add	sp, #8
   18a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   18aa0:	6891      	ldr	r1, [r2, #8]
   18aa2:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   18aa6:	3301      	adds	r3, #1
   18aa8:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   18aaa:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   18aac:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   18aae:	60a3      	str	r3, [r4, #8]
   18ab0:	f388 8811 	msr	BASEPRI, r8
   18ab4:	f3bf 8f6f 	isb	sy
		return 0;
   18ab8:	2000      	movs	r0, #0
   18aba:	e7ee      	b.n	18a9a <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
   18abc:	6921      	ldr	r1, [r4, #16]
   18abe:	e7f2      	b.n	18aa6 <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   18ac0:	f991 100e 	ldrsb.w	r1, [r1, #14]
   18ac4:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   18ac8:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   18acc:	4299      	cmp	r1, r3
   18ace:	bfa8      	it	ge
   18ad0:	4619      	movge	r1, r3
   18ad2:	4291      	cmp	r1, r2
   18ad4:	bfb8      	it	lt
   18ad6:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   18ad8:	428b      	cmp	r3, r1
   18ada:	dd2e      	ble.n	18b3a <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   18adc:	f006 f908 	bl	1ecf0 <adjust_owner_prio.isra.0>
   18ae0:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   18ae2:	4622      	mov	r2, r4
   18ae4:	4641      	mov	r1, r8
   18ae6:	e9cd 7600 	strd	r7, r6, [sp]
   18aea:	4819      	ldr	r0, [pc, #100]	; (18b50 <z_impl_k_mutex_lock+0xf0>)
   18aec:	f000 fc42 	bl	19374 <z_pend_curr>
	if (got_mutex == 0) {
   18af0:	2800      	cmp	r0, #0
   18af2:	d0e1      	beq.n	18ab8 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
   18af4:	f04f 0320 	mov.w	r3, #32
   18af8:	f3ef 8611 	mrs	r6, BASEPRI
   18afc:	f383 8812 	msr	BASEPRI_MAX, r3
   18b00:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
   18b04:	68a0      	ldr	r0, [r4, #8]
   18b06:	b1d0      	cbz	r0, 18b3e <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   18b08:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   18b0a:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18b0c:	429c      	cmp	r4, r3
   18b0e:	d00a      	beq.n	18b26 <z_impl_k_mutex_lock+0xc6>
   18b10:	b14b      	cbz	r3, 18b26 <z_impl_k_mutex_lock+0xc6>
   18b12:	f993 300e 	ldrsb.w	r3, [r3, #14]
   18b16:	4299      	cmp	r1, r3
   18b18:	bfa8      	it	ge
   18b1a:	4619      	movge	r1, r3
   18b1c:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   18b20:	4299      	cmp	r1, r3
   18b22:	bfb8      	it	lt
   18b24:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   18b26:	f006 f8e3 	bl	1ecf0 <adjust_owner_prio.isra.0>
   18b2a:	b140      	cbz	r0, 18b3e <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   18b2c:	4631      	mov	r1, r6
   18b2e:	4808      	ldr	r0, [pc, #32]	; (18b50 <z_impl_k_mutex_lock+0xf0>)
   18b30:	f000 fc84 	bl	1943c <z_reschedule>
	return -EAGAIN;
   18b34:	f06f 000a 	mvn.w	r0, #10
   18b38:	e7af      	b.n	18a9a <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
   18b3a:	2500      	movs	r5, #0
   18b3c:	e7d1      	b.n	18ae2 <z_impl_k_mutex_lock+0x82>
	if (resched) {
   18b3e:	2d00      	cmp	r5, #0
   18b40:	d1f4      	bne.n	18b2c <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   18b42:	f386 8811 	msr	BASEPRI, r6
   18b46:	f3bf 8f6f 	isb	sy
   18b4a:	e7f3      	b.n	18b34 <z_impl_k_mutex_lock+0xd4>
   18b4c:	20009f2c 	.word	0x20009f2c
   18b50:	2000a077 	.word	0x2000a077

00018b54 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   18b54:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   18b56:	6883      	ldr	r3, [r0, #8]
{
   18b58:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   18b5a:	b36b      	cbz	r3, 18bb8 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   18b5c:	4a19      	ldr	r2, [pc, #100]	; (18bc4 <z_impl_k_mutex_unlock+0x70>)
   18b5e:	6892      	ldr	r2, [r2, #8]
   18b60:	4293      	cmp	r3, r2
   18b62:	d12c      	bne.n	18bbe <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   18b64:	68c3      	ldr	r3, [r0, #12]
   18b66:	2b01      	cmp	r3, #1
   18b68:	d903      	bls.n	18b72 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   18b6a:	3b01      	subs	r3, #1
   18b6c:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   18b6e:	2000      	movs	r0, #0
}
   18b70:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   18b72:	f04f 0320 	mov.w	r3, #32
   18b76:	f3ef 8511 	mrs	r5, BASEPRI
   18b7a:	f383 8812 	msr	BASEPRI_MAX, r3
   18b7e:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   18b82:	6901      	ldr	r1, [r0, #16]
   18b84:	6880      	ldr	r0, [r0, #8]
   18b86:	f006 f8b3 	bl	1ecf0 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   18b8a:	4620      	mov	r0, r4
   18b8c:	f006 fb46 	bl	1f21c <z_unpend_first_thread>
	mutex->owner = new_owner;
   18b90:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   18b92:	b158      	cbz	r0, 18bac <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
   18b94:	f990 200e 	ldrsb.w	r2, [r0, #14]
   18b98:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   18b9a:	2200      	movs	r2, #0
   18b9c:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   18b9e:	f006 fb06 	bl	1f1ae <z_ready_thread>
		z_reschedule(&lock, key);
   18ba2:	4629      	mov	r1, r5
   18ba4:	4808      	ldr	r0, [pc, #32]	; (18bc8 <z_impl_k_mutex_unlock+0x74>)
   18ba6:	f000 fc49 	bl	1943c <z_reschedule>
   18baa:	e7e0      	b.n	18b6e <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
   18bac:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   18bae:	f385 8811 	msr	BASEPRI, r5
   18bb2:	f3bf 8f6f 	isb	sy
   18bb6:	e7da      	b.n	18b6e <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
   18bb8:	f06f 0015 	mvn.w	r0, #21
   18bbc:	e7d8      	b.n	18b70 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
   18bbe:	f04f 30ff 	mov.w	r0, #4294967295
   18bc2:	e7d5      	b.n	18b70 <z_impl_k_mutex_unlock+0x1c>
   18bc4:	20009f2c 	.word	0x20009f2c
   18bc8:	2000a077 	.word	0x2000a077

00018bcc <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   18bcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   18bce:	4611      	mov	r1, r2
	__asm__ volatile(
   18bd0:	f04f 0220 	mov.w	r2, #32
   18bd4:	f3ef 8511 	mrs	r5, BASEPRI
   18bd8:	f382 8812 	msr	BASEPRI_MAX, r2
   18bdc:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   18be0:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   18be2:	b19c      	cbz	r4, 18c0c <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   18be4:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   18be6:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   18be8:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   18bec:	4294      	cmp	r4, r2
	list->head = node;
   18bee:	6003      	str	r3, [r0, #0]
	list->tail = node;
   18bf0:	bf08      	it	eq
   18bf2:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   18bf4:	2101      	movs	r1, #1
   18bf6:	4620      	mov	r0, r4
   18bf8:	f006 f8ef 	bl	1edda <z_queue_node_peek>
   18bfc:	4604      	mov	r4, r0
	__asm__ volatile(
   18bfe:	f385 8811 	msr	BASEPRI, r5
   18c02:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   18c06:	4620      	mov	r0, r4
   18c08:	b003      	add	sp, #12
   18c0a:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   18c0c:	ea51 0203 	orrs.w	r2, r1, r3
   18c10:	d0f5      	beq.n	18bfe <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   18c12:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   18c16:	e9cd 1300 	strd	r1, r3, [sp]
   18c1a:	4610      	mov	r0, r2
   18c1c:	4629      	mov	r1, r5
   18c1e:	f000 fba9 	bl	19374 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   18c22:	2800      	cmp	r0, #0
   18c24:	d1ef      	bne.n	18c06 <z_impl_k_queue_get+0x3a>
   18c26:	4b02      	ldr	r3, [pc, #8]	; (18c30 <z_impl_k_queue_get+0x64>)
   18c28:	689b      	ldr	r3, [r3, #8]
   18c2a:	695c      	ldr	r4, [r3, #20]
   18c2c:	e7eb      	b.n	18c06 <z_impl_k_queue_get+0x3a>
   18c2e:	bf00      	nop
   18c30:	20009f2c 	.word	0x20009f2c

00018c34 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   18c34:	b538      	push	{r3, r4, r5, lr}
   18c36:	4604      	mov	r4, r0
	__asm__ volatile(
   18c38:	f04f 0320 	mov.w	r3, #32
   18c3c:	f3ef 8511 	mrs	r5, BASEPRI
   18c40:	f383 8812 	msr	BASEPRI_MAX, r3
   18c44:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   18c48:	f006 fae8 	bl	1f21c <z_unpend_first_thread>

	if (thread != NULL) {
   18c4c:	b148      	cbz	r0, 18c62 <z_impl_k_sem_give+0x2e>
   18c4e:	2200      	movs	r2, #0
   18c50:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   18c52:	f006 faac 	bl	1f1ae <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   18c56:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   18c58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   18c5c:	4807      	ldr	r0, [pc, #28]	; (18c7c <z_impl_k_sem_give+0x48>)
   18c5e:	f000 bbed 	b.w	1943c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   18c62:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   18c66:	429a      	cmp	r2, r3
   18c68:	bf18      	it	ne
   18c6a:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   18c6c:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   18c6e:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   18c70:	f104 0010 	add.w	r0, r4, #16
   18c74:	f006 fd22 	bl	1f6bc <z_handle_obj_poll_events>
}
   18c78:	e7ed      	b.n	18c56 <z_impl_k_sem_give+0x22>
   18c7a:	bf00      	nop
   18c7c:	2000a077 	.word	0x2000a077

00018c80 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   18c80:	b513      	push	{r0, r1, r4, lr}
   18c82:	f04f 0420 	mov.w	r4, #32
   18c86:	f3ef 8111 	mrs	r1, BASEPRI
   18c8a:	f384 8812 	msr	BASEPRI_MAX, r4
   18c8e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   18c92:	6884      	ldr	r4, [r0, #8]
   18c94:	b144      	cbz	r4, 18ca8 <z_impl_k_sem_take+0x28>
		sem->count--;
   18c96:	3c01      	subs	r4, #1
   18c98:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   18c9a:	f381 8811 	msr	BASEPRI, r1
   18c9e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   18ca2:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   18ca4:	b002      	add	sp, #8
   18ca6:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   18ca8:	ea52 0403 	orrs.w	r4, r2, r3
   18cac:	d106      	bne.n	18cbc <z_impl_k_sem_take+0x3c>
   18cae:	f381 8811 	msr	BASEPRI, r1
   18cb2:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   18cb6:	f06f 000f 	mvn.w	r0, #15
   18cba:	e7f3      	b.n	18ca4 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   18cbc:	e9cd 2300 	strd	r2, r3, [sp]
   18cc0:	4602      	mov	r2, r0
   18cc2:	4802      	ldr	r0, [pc, #8]	; (18ccc <z_impl_k_sem_take+0x4c>)
   18cc4:	f000 fb56 	bl	19374 <z_pend_curr>
	return ret;
   18cc8:	e7ec      	b.n	18ca4 <z_impl_k_sem_take+0x24>
   18cca:	bf00      	nop
   18ccc:	2000a077 	.word	0x2000a077

00018cd0 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   18cd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   18cd2:	2400      	movs	r4, #0
   18cd4:	4b08      	ldr	r3, [pc, #32]	; (18cf8 <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   18cd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
	struct k_work_queue_config cfg = {
   18cda:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
   18cdc:	ab02      	add	r3, sp, #8
   18cde:	9300      	str	r3, [sp, #0]
   18ce0:	4906      	ldr	r1, [pc, #24]	; (18cfc <k_sys_work_q_init+0x2c>)
   18ce2:	f04f 33ff 	mov.w	r3, #4294967295
   18ce6:	4806      	ldr	r0, [pc, #24]	; (18d00 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   18ce8:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   18cec:	f000 f924 	bl	18f38 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   18cf0:	4620      	mov	r0, r4
   18cf2:	b004      	add	sp, #16
   18cf4:	bd10      	pop	{r4, pc}
   18cf6:	bf00      	nop
   18cf8:	00023f85 	.word	0x00023f85
   18cfc:	2000cf68 	.word	0x2000cf68
   18d00:	200099f8 	.word	0x200099f8

00018d04 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   18d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18d08:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   18d0a:	f04f 38ff 	mov.w	r8, #4294967295
   18d0e:	f04f 39ff 	mov.w	r9, #4294967295
	return list->head;
   18d12:	4e48      	ldr	r6, [pc, #288]	; (18e34 <work_queue_main+0x130>)
{
   18d14:	b085      	sub	sp, #20
	__asm__ volatile(
   18d16:	f04f 0320 	mov.w	r3, #32
   18d1a:	f3ef 8711 	mrs	r7, BASEPRI
   18d1e:	f383 8812 	msr	BASEPRI_MAX, r3
   18d22:	f3bf 8f6f 	isb	sy
   18d26:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
Z_GENLIST_GET(slist, snode)
   18d2a:	b98d      	cbnz	r5, 18d50 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   18d2c:	2102      	movs	r1, #2
   18d2e:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   18d32:	f006 f8ce 	bl	1eed2 <flag_test_and_clear>
   18d36:	2800      	cmp	r0, #0
   18d38:	d143      	bne.n	18dc2 <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   18d3a:	2300      	movs	r3, #0
   18d3c:	4639      	mov	r1, r7
   18d3e:	e9cd 8900 	strd	r8, r9, [sp]
   18d42:	9302      	str	r3, [sp, #8]
   18d44:	f104 0290 	add.w	r2, r4, #144	; 0x90
   18d48:	483b      	ldr	r0, [pc, #236]	; (18e38 <work_queue_main+0x134>)
   18d4a:	f000 fd17 	bl	1977c <z_sched_wait>
			continue;
   18d4e:	e7e2      	b.n	18d16 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   18d50:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
	return node->next;
   18d54:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   18d56:	4295      	cmp	r5, r2
	list->head = node;
   18d58:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	list->tail = node;
   18d5c:	bf08      	it	eq
   18d5e:	f8c4 308c 	streq.w	r3, [r4, #140]	; 0x8c
	*flagp |= BIT(bit);
   18d62:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   18d66:	f043 0302 	orr.w	r3, r3, #2
   18d6a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	*flagp &= ~BIT(bit);
   18d6e:	68eb      	ldr	r3, [r5, #12]
   18d70:	f023 0304 	bic.w	r3, r3, #4
   18d74:	f043 0301 	orr.w	r3, r3, #1
   18d78:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   18d7a:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   18d7c:	f387 8811 	msr	BASEPRI, r7
   18d80:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   18d84:	4628      	mov	r0, r5
   18d86:	4798      	blx	r3
	__asm__ volatile(
   18d88:	f04f 0320 	mov.w	r3, #32
   18d8c:	f3ef 8b11 	mrs	fp, BASEPRI
   18d90:	f383 8812 	msr	BASEPRI_MAX, r3
   18d94:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   18d98:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   18d9a:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   18d9c:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   18da0:	d419      	bmi.n	18dd6 <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
   18da2:	60ea      	str	r2, [r5, #12]
   18da4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   18da8:	f023 0302 	bic.w	r3, r3, #2
   18dac:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	__asm__ volatile(
   18db0:	f38b 8811 	msr	BASEPRI, fp
   18db4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   18db8:	05db      	lsls	r3, r3, #23
   18dba:	d4ac      	bmi.n	18d16 <work_queue_main+0x12>
	z_impl_k_yield();
   18dbc:	f000 fbdc 	bl	19578 <z_impl_k_yield>
}
   18dc0:	e7a9      	b.n	18d16 <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   18dc2:	f104 0598 	add.w	r5, r4, #152	; 0x98
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   18dc6:	2200      	movs	r2, #0
   18dc8:	2101      	movs	r1, #1
   18dca:	4628      	mov	r0, r5
   18dcc:	f006 fa7c 	bl	1f2c8 <z_sched_wake>
   18dd0:	2800      	cmp	r0, #0
   18dd2:	d1f8      	bne.n	18dc6 <work_queue_main+0xc2>
   18dd4:	e7b1      	b.n	18d3a <work_queue_main+0x36>
	return list->head;
   18dd6:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   18dd8:	f023 0303 	bic.w	r3, r3, #3
   18ddc:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   18dde:	2800      	cmp	r0, #0
   18de0:	d0e0      	beq.n	18da4 <work_queue_main+0xa0>
	return node->next;
   18de2:	2700      	movs	r7, #0
	parent->next = child;
   18de4:	463b      	mov	r3, r7
	return node->next;
   18de6:	f8d0 a000 	ldr.w	sl, [r0]
   18dea:	2800      	cmp	r0, #0
   18dec:	d0da      	beq.n	18da4 <work_queue_main+0xa0>
		if (wc->work == work) {
   18dee:	6842      	ldr	r2, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   18df0:	4601      	mov	r1, r0
		if (wc->work == work) {
   18df2:	4295      	cmp	r5, r2
   18df4:	d10c      	bne.n	18e10 <work_queue_main+0x10c>
   18df6:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   18df8:	b99f      	cbnz	r7, 18e22 <work_queue_main+0x11e>
   18dfa:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   18dfc:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   18dfe:	4282      	cmp	r2, r0
   18e00:	d100      	bne.n	18e04 <work_queue_main+0x100>
	list->tail = node;
   18e02:	6071      	str	r1, [r6, #4]
	parent->next = child;
   18e04:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   18e08:	f7ff ff14 	bl	18c34 <z_impl_k_sem_give>
}
   18e0c:	4639      	mov	r1, r7
   18e0e:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   18e10:	f1ba 0f00 	cmp.w	sl, #0
   18e14:	d00b      	beq.n	18e2e <work_queue_main+0x12a>
	return node->next;
   18e16:	f8da 2000 	ldr.w	r2, [sl]
   18e1a:	4650      	mov	r0, sl
   18e1c:	460f      	mov	r7, r1
   18e1e:	4692      	mov	sl, r2
   18e20:	e7e3      	b.n	18dea <work_queue_main+0xe6>
	parent->next = child;
   18e22:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   18e24:	6872      	ldr	r2, [r6, #4]
   18e26:	4282      	cmp	r2, r0
	list->tail = node;
   18e28:	bf08      	it	eq
   18e2a:	6077      	streq	r7, [r6, #4]
}
   18e2c:	e7ea      	b.n	18e04 <work_queue_main+0x100>
   18e2e:	4652      	mov	r2, sl
   18e30:	e7f3      	b.n	18e1a <work_queue_main+0x116>
   18e32:	bf00      	nop
   18e34:	20009f54 	.word	0x20009f54
   18e38:	2000a077 	.word	0x2000a077

00018e3c <cancel_sync_locked>:
{
   18e3c:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   18e3e:	68c3      	ldr	r3, [r0, #12]
{
   18e40:	4605      	mov	r5, r0
	return (*flagp & BIT(bit)) != 0U;
   18e42:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   18e46:	079b      	lsls	r3, r3, #30
{
   18e48:	460c      	mov	r4, r1
	if (ret) {
   18e4a:	d50d      	bpl.n	18e68 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   18e4c:	2201      	movs	r2, #1
   18e4e:	2100      	movs	r1, #0
   18e50:	f104 0008 	add.w	r0, r4, #8
   18e54:	f006 f82d 	bl	1eeb2 <z_impl_k_sem_init>
	parent->next = child;
   18e58:	2300      	movs	r3, #0
   18e5a:	6023      	str	r3, [r4, #0]
	return list->tail;
   18e5c:	4b05      	ldr	r3, [pc, #20]	; (18e74 <cancel_sync_locked+0x38>)
	canceler->work = work;
   18e5e:	6065      	str	r5, [r4, #4]
   18e60:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   18e62:	b91a      	cbnz	r2, 18e6c <cancel_sync_locked+0x30>
	list->head = node;
   18e64:	e9c3 4400 	strd	r4, r4, [r3]
}
   18e68:	4630      	mov	r0, r6
   18e6a:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   18e6c:	6014      	str	r4, [r2, #0]
	list->tail = node;
   18e6e:	605c      	str	r4, [r3, #4]
}
   18e70:	e7fa      	b.n	18e68 <cancel_sync_locked+0x2c>
   18e72:	bf00      	nop
   18e74:	20009f54 	.word	0x20009f54

00018e78 <submit_to_queue_locked>:
{
   18e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   18e7a:	68c3      	ldr	r3, [r0, #12]
{
   18e7c:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   18e7e:	079a      	lsls	r2, r3, #30
{
   18e80:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   18e82:	f3c3 0640 	ubfx	r6, r3, #1, #1
   18e86:	d42c      	bmi.n	18ee2 <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   18e88:	075b      	lsls	r3, r3, #29
   18e8a:	d41a      	bmi.n	18ec2 <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
   18e8c:	680b      	ldr	r3, [r1, #0]
   18e8e:	b90b      	cbnz	r3, 18e94 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   18e90:	6883      	ldr	r3, [r0, #8]
   18e92:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   18e94:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   18e96:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
   18e98:	bf42      	ittt	mi
   18e9a:	68a3      	ldrmi	r3, [r4, #8]
			ret = 2;
   18e9c:	2602      	movmi	r6, #2
			*queuep = work->queue;
   18e9e:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   18ea0:	683d      	ldr	r5, [r7, #0]
		ret = 1;
   18ea2:	bf58      	it	pl
   18ea4:	2601      	movpl	r6, #1
	if (queue == NULL) {
   18ea6:	2d00      	cmp	r5, #0
   18ea8:	d03a      	beq.n	18f20 <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   18eaa:	4b1f      	ldr	r3, [pc, #124]	; (18f28 <submit_to_queue_locked+0xb0>)
   18eac:	689b      	ldr	r3, [r3, #8]
   18eae:	42ab      	cmp	r3, r5
   18eb0:	d00a      	beq.n	18ec8 <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
   18eb2:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   18eb6:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   18eb8:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   18ebc:	d414      	bmi.n	18ee8 <submit_to_queue_locked+0x70>
		ret = -EBUSY;
   18ebe:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   18ec2:	2300      	movs	r3, #0
   18ec4:	603b      	str	r3, [r7, #0]
	return ret;
   18ec6:	e025      	b.n	18f14 <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   18ec8:	f005 fefe 	bl	1ecc8 <k_is_in_isr>
   18ecc:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
   18ed0:	2800      	cmp	r0, #0
   18ed2:	d1f0      	bne.n	18eb6 <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   18ed4:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   18ed6:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   18eda:	d5f0      	bpl.n	18ebe <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
   18edc:	b152      	cbz	r2, 18ef4 <submit_to_queue_locked+0x7c>
   18ede:	075b      	lsls	r3, r3, #29
   18ee0:	d408      	bmi.n	18ef4 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   18ee2:	f06f 060f 	mvn.w	r6, #15
   18ee6:	e7ec      	b.n	18ec2 <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
   18ee8:	2a00      	cmp	r2, #0
   18eea:	d1fa      	bne.n	18ee2 <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   18eec:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   18ef0:	2b00      	cmp	r3, #0
   18ef2:	d1f6      	bne.n	18ee2 <submit_to_queue_locked+0x6a>
	parent->next = child;
   18ef4:	2300      	movs	r3, #0
   18ef6:	6023      	str	r3, [r4, #0]
	return list->tail;
   18ef8:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
Z_GENLIST_APPEND(slist, snode)
   18efc:	b963      	cbnz	r3, 18f18 <submit_to_queue_locked+0xa0>
	list->head = node;
   18efe:	e9c5 4422 	strd	r4, r4, [r5, #136]	; 0x88
		(void)notify_queue_locked(queue);
   18f02:	4628      	mov	r0, r5
   18f04:	f005 fffe 	bl	1ef04 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   18f08:	68e3      	ldr	r3, [r4, #12]
   18f0a:	f043 0304 	orr.w	r3, r3, #4
   18f0e:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   18f10:	683b      	ldr	r3, [r7, #0]
   18f12:	60a3      	str	r3, [r4, #8]
}
   18f14:	4630      	mov	r0, r6
   18f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   18f18:	601c      	str	r4, [r3, #0]
	list->tail = node;
   18f1a:	f8c5 408c 	str.w	r4, [r5, #140]	; 0x8c
}
   18f1e:	e7f0      	b.n	18f02 <submit_to_queue_locked+0x8a>
		return -EINVAL;
   18f20:	f06f 0615 	mvn.w	r6, #21
   18f24:	e7cd      	b.n	18ec2 <submit_to_queue_locked+0x4a>
   18f26:	bf00      	nop
   18f28:	20009f2c 	.word	0x20009f2c

00018f2c <k_work_submit>:
{
   18f2c:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   18f2e:	4801      	ldr	r0, [pc, #4]	; (18f34 <k_work_submit+0x8>)
   18f30:	f006 b86e 	b.w	1f010 <k_work_submit_to_queue>
   18f34:	200099f8 	.word	0x200099f8

00018f38 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   18f38:	b5f0      	push	{r4, r5, r6, r7, lr}
   18f3a:	4604      	mov	r4, r0
	list->head = NULL;
   18f3c:	2000      	movs	r0, #0
   18f3e:	b089      	sub	sp, #36	; 0x24
	list->tail = NULL;
   18f40:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   18f44:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   18f46:	f104 0090 	add.w	r0, r4, #144	; 0x90
	list->tail = (sys_dnode_t *)list;
   18f4a:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90
   18f4e:	f104 0098 	add.w	r0, r4, #152	; 0x98
   18f52:	e9c4 0026 	strd	r0, r0, [r4, #152]	; 0x98

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   18f56:	b31d      	cbz	r5, 18fa0 <k_work_queue_start+0x68>
   18f58:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   18f5a:	2800      	cmp	r0, #0
   18f5c:	f240 1001 	movw	r0, #257	; 0x101
   18f60:	bf08      	it	eq
   18f62:	2001      	moveq	r0, #1
	*flagp = flags;
   18f64:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   18f68:	2000      	movs	r0, #0
   18f6a:	f04f 36ff 	mov.w	r6, #4294967295
   18f6e:	f04f 37ff 	mov.w	r7, #4294967295
   18f72:	e9cd 3003 	strd	r3, r0, [sp, #12]
   18f76:	e9cd 0001 	strd	r0, r0, [sp, #4]
   18f7a:	e9cd 6706 	strd	r6, r7, [sp, #24]
   18f7e:	4620      	mov	r0, r4
   18f80:	4b08      	ldr	r3, [pc, #32]	; (18fa4 <k_work_queue_start+0x6c>)
   18f82:	9400      	str	r4, [sp, #0]
   18f84:	f7ff fcc8 	bl	18918 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   18f88:	b125      	cbz	r5, 18f94 <k_work_queue_start+0x5c>
   18f8a:	6829      	ldr	r1, [r5, #0]
   18f8c:	b111      	cbz	r1, 18f94 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   18f8e:	4620      	mov	r0, r4
   18f90:	f005 fea0 	bl	1ecd4 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   18f94:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   18f96:	b009      	add	sp, #36	; 0x24
   18f98:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   18f9c:	f005 be9f 	b.w	1ecde <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   18fa0:	2001      	movs	r0, #1
   18fa2:	e7df      	b.n	18f64 <k_work_queue_start+0x2c>
   18fa4:	00018d05 	.word	0x00018d05

00018fa8 <k_work_queue_drain>:

int k_work_queue_drain(struct k_work_q *queue,
		       bool plug)
{
   18fa8:	b530      	push	{r4, r5, lr}
   18faa:	460a      	mov	r2, r1
   18fac:	4604      	mov	r4, r0
   18fae:	b085      	sub	sp, #20
	__asm__ volatile(
   18fb0:	f04f 0320 	mov.w	r3, #32
   18fb4:	f3ef 8511 	mrs	r5, BASEPRI
   18fb8:	f383 8812 	msr	BASEPRI_MAX, r3
   18fbc:	f3bf 8f6f 	isb	sy
	return *flagp;
   18fc0:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work_queue, drain, queue);

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (((flags_get(&queue->flags)
   18fc4:	f013 0f06 	tst.w	r3, #6
   18fc8:	d11d      	bne.n	19006 <k_work_queue_drain+0x5e>
	      & (K_WORK_QUEUE_BUSY | K_WORK_QUEUE_DRAIN)) != 0U)
	    || plug
   18fca:	b1b1      	cbz	r1, 18ffa <k_work_queue_drain+0x52>
	*flagp |= BIT(bit);
   18fcc:	f043 030c 	orr.w	r3, r3, #12
   18fd0:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		flag_set(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
		if (plug) {
			flag_set(&queue->flags, K_WORK_QUEUE_PLUGGED_BIT);
		}

		notify_queue_locked(queue);
   18fd4:	4620      	mov	r0, r4
   18fd6:	f005 ff95 	bl	1ef04 <notify_queue_locked.isra.0>
		ret = z_sched_wait(&lock, key, &queue->drainq,
   18fda:	2300      	movs	r3, #0
   18fdc:	f04f 32ff 	mov.w	r2, #4294967295
   18fe0:	9302      	str	r3, [sp, #8]
   18fe2:	f04f 33ff 	mov.w	r3, #4294967295
   18fe6:	4629      	mov	r1, r5
   18fe8:	e9cd 2300 	strd	r2, r3, [sp]
   18fec:	480c      	ldr	r0, [pc, #48]	; (19020 <k_work_queue_drain+0x78>)
   18fee:	f104 0298 	add.w	r2, r4, #152	; 0x98
   18ff2:	f000 fbc3 	bl	1977c <z_sched_wait>
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, drain, queue, ret);

	return ret;
}
   18ff6:	b005      	add	sp, #20
   18ff8:	bd30      	pop	{r4, r5, pc}
	    || !sys_slist_is_empty(&queue->pending)) {
   18ffa:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
   18ffe:	b148      	cbz	r0, 19014 <k_work_queue_drain+0x6c>
	*flagp |= BIT(bit);
   19000:	f043 0304 	orr.w	r3, r3, #4
   19004:	e7e4      	b.n	18fd0 <k_work_queue_drain+0x28>
   19006:	f043 0104 	orr.w	r1, r3, #4
   1900a:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
		if (plug) {
   1900e:	2a00      	cmp	r2, #0
   19010:	d0e0      	beq.n	18fd4 <k_work_queue_drain+0x2c>
   19012:	e7db      	b.n	18fcc <k_work_queue_drain+0x24>
	__asm__ volatile(
   19014:	f385 8811 	msr	BASEPRI, r5
   19018:	f3bf 8f6f 	isb	sy
	return ret;
   1901c:	e7eb      	b.n	18ff6 <k_work_queue_drain+0x4e>
   1901e:	bf00      	nop
   19020:	2000a077 	.word	0x2000a077

00019024 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   19024:	b537      	push	{r0, r1, r2, r4, r5, lr}
   19026:	9001      	str	r0, [sp, #4]
   19028:	4608      	mov	r0, r1
	__asm__ volatile(
   1902a:	f04f 0120 	mov.w	r1, #32
   1902e:	f3ef 8411 	mrs	r4, BASEPRI
   19032:	f381 8812 	msr	BASEPRI_MAX, r1
   19036:	f3bf 8f6f 	isb	sy
	return *flagp;
   1903a:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   1903c:	f011 0f0e 	tst.w	r1, #14
   19040:	d116      	bne.n	19070 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   19042:	ea53 0502 	orrs.w	r5, r3, r2
   19046:	d108      	bne.n	1905a <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   19048:	a901      	add	r1, sp, #4
   1904a:	f7ff ff15 	bl	18e78 <submit_to_queue_locked>
	__asm__ volatile(
   1904e:	f384 8811 	msr	BASEPRI, r4
   19052:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   19056:	b003      	add	sp, #12
   19058:	bd30      	pop	{r4, r5, pc}
	*flagp |= BIT(bit);
   1905a:	f041 0108 	orr.w	r1, r1, #8
   1905e:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   19060:	9901      	ldr	r1, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   19062:	3010      	adds	r0, #16
	dwork->queue = *queuep;
   19064:	6181      	str	r1, [r0, #24]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   19066:	4903      	ldr	r1, [pc, #12]	; (19074 <k_work_schedule_for_queue+0x50>)
   19068:	f000 fc02 	bl	19870 <z_add_timeout>
	return ret;
   1906c:	2001      	movs	r0, #1
   1906e:	e7ee      	b.n	1904e <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   19070:	2000      	movs	r0, #0
   19072:	e7ec      	b.n	1904e <k_work_schedule_for_queue+0x2a>
   19074:	0001ef79 	.word	0x0001ef79

00019078 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   19078:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   1907a:	4801      	ldr	r0, [pc, #4]	; (19080 <k_work_schedule+0x8>)
   1907c:	f7ff bfd2 	b.w	19024 <k_work_schedule_for_queue>
   19080:	200099f8 	.word	0x200099f8

00019084 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   19084:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   19086:	460c      	mov	r4, r1
   19088:	4616      	mov	r6, r2
   1908a:	461d      	mov	r5, r3
   1908c:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
   1908e:	f04f 0320 	mov.w	r3, #32
   19092:	f3ef 8711 	mrs	r7, BASEPRI
   19096:	f383 8812 	msr	BASEPRI_MAX, r3
   1909a:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   1909e:	4608      	mov	r0, r1
   190a0:	f005 ff22 	bl	1eee8 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   190a4:	ea55 0306 	orrs.w	r3, r5, r6
   190a8:	d109      	bne.n	190be <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   190aa:	4620      	mov	r0, r4
   190ac:	a901      	add	r1, sp, #4
   190ae:	f7ff fee3 	bl	18e78 <submit_to_queue_locked>
	__asm__ volatile(
   190b2:	f387 8811 	msr	BASEPRI, r7
   190b6:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   190ba:	b003      	add	sp, #12
   190bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   190be:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   190c0:	f104 0010 	add.w	r0, r4, #16
	*flagp |= BIT(bit);
   190c4:	f043 0308 	orr.w	r3, r3, #8
   190c8:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   190ca:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   190cc:	4632      	mov	r2, r6
	dwork->queue = *queuep;
   190ce:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   190d0:	4902      	ldr	r1, [pc, #8]	; (190dc <k_work_reschedule_for_queue+0x58>)
   190d2:	462b      	mov	r3, r5
   190d4:	f000 fbcc 	bl	19870 <z_add_timeout>
	return ret;
   190d8:	2001      	movs	r0, #1
   190da:	e7ea      	b.n	190b2 <k_work_reschedule_for_queue+0x2e>
   190dc:	0001ef79 	.word	0x0001ef79

000190e0 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   190e0:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   190e2:	4801      	ldr	r0, [pc, #4]	; (190e8 <k_work_reschedule+0x8>)
   190e4:	f7ff bfce 	b.w	19084 <k_work_reschedule_for_queue>
   190e8:	200099f8 	.word	0x200099f8

000190ec <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   190ec:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   190ee:	4d07      	ldr	r5, [pc, #28]	; (1910c <z_reset_time_slice+0x20>)
   190f0:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   190f2:	b154      	cbz	r4, 1910a <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   190f4:	f7fd fddc 	bl	16cb0 <sys_clock_elapsed>
   190f8:	4b05      	ldr	r3, [pc, #20]	; (19110 <z_reset_time_slice+0x24>)
   190fa:	4404      	add	r4, r0
   190fc:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   190fe:	6828      	ldr	r0, [r5, #0]
   19100:	2100      	movs	r1, #0
	}
}
   19102:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   19106:	f006 b928 	b.w	1f35a <z_set_timeout_expiry>
}
   1910a:	bd38      	pop	{r3, r4, r5, pc}
   1910c:	20009f64 	.word	0x20009f64
   19110:	20009f2c 	.word	0x20009f2c

00019114 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   19114:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   19116:	4d0d      	ldr	r5, [pc, #52]	; (1914c <update_cache+0x38>)
   19118:	462b      	mov	r3, r5
   1911a:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1911e:	429c      	cmp	r4, r3
   19120:	d000      	beq.n	19124 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   19122:	b904      	cbnz	r4, 19126 <update_cache+0x12>
   19124:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   19126:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   19128:	b938      	cbnz	r0, 1913a <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
   1912a:	7b5a      	ldrb	r2, [r3, #13]
   1912c:	06d2      	lsls	r2, r2, #27
   1912e:	d104      	bne.n	1913a <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   19130:	69a2      	ldr	r2, [r4, #24]
   19132:	b912      	cbnz	r2, 1913a <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
   19134:	89da      	ldrh	r2, [r3, #14]
   19136:	2a7f      	cmp	r2, #127	; 0x7f
   19138:	d805      	bhi.n	19146 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   1913a:	429c      	cmp	r4, r3
   1913c:	d002      	beq.n	19144 <update_cache+0x30>
			z_reset_time_slice(thread);
   1913e:	4620      	mov	r0, r4
   19140:	f7ff ffd4 	bl	190ec <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   19144:	4623      	mov	r3, r4
   19146:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   19148:	bd38      	pop	{r3, r4, r5, pc}
   1914a:	bf00      	nop
   1914c:	20009f2c 	.word	0x20009f2c

00019150 <move_thread_to_end_of_prio_q>:
{
   19150:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   19152:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   19156:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   19158:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   1915a:	7b43      	ldrb	r3, [r0, #13]
   1915c:	da04      	bge.n	19168 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1915e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   19162:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   19164:	f005 ffbe 	bl	1f0e4 <sys_dlist_remove>
	return list->head == list;
   19168:	4a15      	ldr	r2, [pc, #84]	; (191c0 <move_thread_to_end_of_prio_q+0x70>)
	thread->base.thread_state |= _THREAD_QUEUED;
   1916a:	7b4b      	ldrb	r3, [r1, #13]
   1916c:	4610      	mov	r0, r2
   1916e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   19172:	734b      	strb	r3, [r1, #13]
   19174:	f850 3f20 	ldr.w	r3, [r0, #32]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   19178:	6a54      	ldr	r4, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1917a:	4283      	cmp	r3, r0
   1917c:	bf08      	it	eq
   1917e:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   19180:	b923      	cbnz	r3, 1918c <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   19182:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
   19186:	6021      	str	r1, [r4, #0]
	list->tail = node;
   19188:	6251      	str	r1, [r2, #36]	; 0x24
}
   1918a:	e00c      	b.n	191a6 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
   1918c:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   19190:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   19194:	42b5      	cmp	r5, r6
   19196:	d00e      	beq.n	191b6 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
   19198:	42ae      	cmp	r6, r5
   1919a:	dd0c      	ble.n	191b6 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   1919c:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   1919e:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   191a2:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   191a4:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   191a6:	6890      	ldr	r0, [r2, #8]
}
   191a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   191ac:	1a43      	subs	r3, r0, r1
   191ae:	4258      	negs	r0, r3
   191b0:	4158      	adcs	r0, r3
   191b2:	f7ff bfaf 	b.w	19114 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   191b6:	429c      	cmp	r4, r3
   191b8:	d0e3      	beq.n	19182 <move_thread_to_end_of_prio_q+0x32>
   191ba:	681b      	ldr	r3, [r3, #0]
   191bc:	e7e0      	b.n	19180 <move_thread_to_end_of_prio_q+0x30>
   191be:	bf00      	nop
   191c0:	20009f2c 	.word	0x20009f2c

000191c4 <ready_thread>:
{
   191c4:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   191c6:	f990 300d 	ldrsb.w	r3, [r0, #13]
   191ca:	7b42      	ldrb	r2, [r0, #13]
   191cc:	2b00      	cmp	r3, #0
   191ce:	db29      	blt.n	19224 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   191d0:	06d3      	lsls	r3, r2, #27
   191d2:	d127      	bne.n	19224 <ready_thread+0x60>
	return node->next != NULL;
   191d4:	6983      	ldr	r3, [r0, #24]
   191d6:	bb2b      	cbnz	r3, 19224 <ready_thread+0x60>
	return list->head == list;
   191d8:	4913      	ldr	r1, [pc, #76]	; (19228 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
   191da:	f062 027f 	orn	r2, r2, #127	; 0x7f
   191de:	7342      	strb	r2, [r0, #13]
   191e0:	460a      	mov	r2, r1
   191e2:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   191e6:	4294      	cmp	r4, r2
   191e8:	bf18      	it	ne
   191ea:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
   191ec:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   191ee:	b923      	cbnz	r3, 191fa <ready_thread+0x36>
	node->prev = tail;
   191f0:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
   191f4:	6020      	str	r0, [r4, #0]
	list->tail = node;
   191f6:	6248      	str	r0, [r1, #36]	; 0x24
}
   191f8:	e00c      	b.n	19214 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
   191fa:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   191fe:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   19202:	42b5      	cmp	r5, r6
   19204:	d00a      	beq.n	1921c <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
   19206:	42ae      	cmp	r6, r5
   19208:	dd08      	ble.n	1921c <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
   1920a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1920c:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   19210:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   19212:	6058      	str	r0, [r3, #4]
		update_cache(0);
   19214:	2000      	movs	r0, #0
}
   19216:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   19218:	f7ff bf7c 	b.w	19114 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1921c:	42a3      	cmp	r3, r4
   1921e:	d0e7      	beq.n	191f0 <ready_thread+0x2c>
   19220:	681b      	ldr	r3, [r3, #0]
   19222:	e7e4      	b.n	191ee <ready_thread+0x2a>
}
   19224:	bc70      	pop	{r4, r5, r6}
   19226:	4770      	bx	lr
   19228:	20009f2c 	.word	0x20009f2c

0001922c <unready_thread>:
{
   1922c:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1922e:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   19232:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   19234:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   19236:	7b43      	ldrb	r3, [r0, #13]
   19238:	da04      	bge.n	19244 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1923a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1923e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   19240:	f005 ff50 	bl	1f0e4 <sys_dlist_remove>
	update_cache(thread == _current);
   19244:	4b04      	ldr	r3, [pc, #16]	; (19258 <unready_thread+0x2c>)
   19246:	6898      	ldr	r0, [r3, #8]
   19248:	1a43      	subs	r3, r0, r1
   1924a:	4258      	negs	r0, r3
   1924c:	4158      	adcs	r0, r3
}
   1924e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   19252:	f7ff bf5f 	b.w	19114 <update_cache>
   19256:	bf00      	nop
   19258:	20009f2c 	.word	0x20009f2c

0001925c <pend_locked>:
{
   1925c:	b570      	push	{r4, r5, r6, lr}
   1925e:	4615      	mov	r5, r2
   19260:	461c      	mov	r4, r3
   19262:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   19264:	f005 ff7b 	bl	1f15e <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   19268:	f1b4 3fff 	cmp.w	r4, #4294967295
   1926c:	bf08      	it	eq
   1926e:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   19272:	d008      	beq.n	19286 <pend_locked+0x2a>
   19274:	462a      	mov	r2, r5
   19276:	4623      	mov	r3, r4
   19278:	f106 0018 	add.w	r0, r6, #24
   1927c:	4902      	ldr	r1, [pc, #8]	; (19288 <pend_locked+0x2c>)
}
   1927e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   19282:	f000 baf5 	b.w	19870 <z_add_timeout>
   19286:	bd70      	pop	{r4, r5, r6, pc}
   19288:	0001f11b 	.word	0x0001f11b

0001928c <k_sched_time_slice_set>:
{
   1928c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1928e:	4604      	mov	r4, r0
   19290:	460d      	mov	r5, r1
	__asm__ volatile(
   19292:	f04f 0320 	mov.w	r3, #32
   19296:	f3ef 8711 	mrs	r7, BASEPRI
   1929a:	f383 8812 	msr	BASEPRI_MAX, r3
   1929e:	f3bf 8f6f 	isb	sy
			return (uint32_t)((t * to_hz + off) / from_hz);
   192a2:	2600      	movs	r6, #0
   192a4:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   192a8:	f240 30e7 	movw	r0, #999	; 0x3e7
   192ac:	4631      	mov	r1, r6
   192ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   192b2:	2300      	movs	r3, #0
   192b4:	fbe4 010c 	umlal	r0, r1, r4, ip
   192b8:	f7ef fbfe 	bl	8ab8 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   192bc:	42b4      	cmp	r4, r6
   192be:	dd02      	ble.n	192c6 <k_sched_time_slice_set+0x3a>
			slice_ticks = MAX(2, slice_ticks);
   192c0:	2802      	cmp	r0, #2
   192c2:	bfb8      	it	lt
   192c4:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   192c6:	4a07      	ldr	r2, [pc, #28]	; (192e4 <k_sched_time_slice_set+0x58>)
		_current_cpu->slice_ticks = 0;
   192c8:	4b07      	ldr	r3, [pc, #28]	; (192e8 <k_sched_time_slice_set+0x5c>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   192ca:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
   192cc:	4a07      	ldr	r2, [pc, #28]	; (192ec <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
   192ce:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
   192d0:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
   192d2:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
   192d4:	f7ff ff0a 	bl	190ec <z_reset_time_slice>
	__asm__ volatile(
   192d8:	f387 8811 	msr	BASEPRI, r7
   192dc:	f3bf 8f6f 	isb	sy
}
   192e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   192e2:	bf00      	nop
   192e4:	20009f64 	.word	0x20009f64
   192e8:	20009f2c 	.word	0x20009f2c
   192ec:	20009f60 	.word	0x20009f60

000192f0 <z_time_slice>:
{
   192f0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   192f2:	f04f 0320 	mov.w	r3, #32
   192f6:	f3ef 8511 	mrs	r5, BASEPRI
   192fa:	f383 8812 	msr	BASEPRI_MAX, r3
   192fe:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   19302:	4b17      	ldr	r3, [pc, #92]	; (19360 <z_time_slice+0x70>)
   19304:	4a17      	ldr	r2, [pc, #92]	; (19364 <z_time_slice+0x74>)
   19306:	689c      	ldr	r4, [r3, #8]
   19308:	6811      	ldr	r1, [r2, #0]
   1930a:	428c      	cmp	r4, r1
   1930c:	d107      	bne.n	1931e <z_time_slice+0x2e>
	z_reset_time_slice(curr);
   1930e:	4620      	mov	r0, r4
   19310:	f7ff feec 	bl	190ec <z_reset_time_slice>
	__asm__ volatile(
   19314:	f385 8811 	msr	BASEPRI, r5
   19318:	f3bf 8f6f 	isb	sy
}
   1931c:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   1931e:	2100      	movs	r1, #0
   19320:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   19322:	4a11      	ldr	r2, [pc, #68]	; (19368 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
   19324:	6812      	ldr	r2, [r2, #0]
   19326:	b1c2      	cbz	r2, 1935a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   19328:	89e2      	ldrh	r2, [r4, #14]
   1932a:	2a7f      	cmp	r2, #127	; 0x7f
   1932c:	d815      	bhi.n	1935a <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   1932e:	7b62      	ldrb	r2, [r4, #13]
   19330:	06d2      	lsls	r2, r2, #27
   19332:	d112      	bne.n	1935a <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   19334:	4a0d      	ldr	r2, [pc, #52]	; (1936c <z_time_slice+0x7c>)
   19336:	f994 100e 	ldrsb.w	r1, [r4, #14]
   1933a:	6812      	ldr	r2, [r2, #0]
   1933c:	4291      	cmp	r1, r2
   1933e:	db0c      	blt.n	1935a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   19340:	4a0b      	ldr	r2, [pc, #44]	; (19370 <z_time_slice+0x80>)
   19342:	4294      	cmp	r4, r2
   19344:	d009      	beq.n	1935a <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   19346:	691a      	ldr	r2, [r3, #16]
   19348:	4282      	cmp	r2, r0
   1934a:	dc03      	bgt.n	19354 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
   1934c:	4620      	mov	r0, r4
   1934e:	f7ff feff 	bl	19150 <move_thread_to_end_of_prio_q>
   19352:	e7dc      	b.n	1930e <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
   19354:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
   19356:	611a      	str	r2, [r3, #16]
   19358:	e7dc      	b.n	19314 <z_time_slice+0x24>
   1935a:	2200      	movs	r2, #0
   1935c:	e7fb      	b.n	19356 <z_time_slice+0x66>
   1935e:	bf00      	nop
   19360:	20009f2c 	.word	0x20009f2c
   19364:	20009f5c 	.word	0x20009f5c
   19368:	20009f64 	.word	0x20009f64
   1936c:	20009f60 	.word	0x20009f60
   19370:	200098e8 	.word	0x200098e8

00019374 <z_pend_curr>:
{
   19374:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
   19376:	480c      	ldr	r0, [pc, #48]	; (193a8 <z_pend_curr+0x34>)
   19378:	4d0c      	ldr	r5, [pc, #48]	; (193ac <z_pend_curr+0x38>)
   1937a:	6886      	ldr	r6, [r0, #8]
{
   1937c:	460c      	mov	r4, r1
	pending_current = _current;
   1937e:	602e      	str	r6, [r5, #0]
{
   19380:	4611      	mov	r1, r2
   19382:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
   19386:	f04f 0620 	mov.w	r6, #32
   1938a:	f3ef 8511 	mrs	r5, BASEPRI
   1938e:	f386 8812 	msr	BASEPRI_MAX, r6
   19392:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
   19396:	6880      	ldr	r0, [r0, #8]
   19398:	f7ff ff60 	bl	1925c <pend_locked>
	ret = arch_swap(key);
   1939c:	4620      	mov	r0, r4
}
   1939e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   193a2:	f7f3 bbb1 	b.w	cb08 <arch_swap>
   193a6:	bf00      	nop
   193a8:	20009f2c 	.word	0x20009f2c
   193ac:	20009f5c 	.word	0x20009f5c

000193b0 <z_set_prio>:
{
   193b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   193b2:	4604      	mov	r4, r0
   193b4:	f04f 0320 	mov.w	r3, #32
   193b8:	f3ef 8611 	mrs	r6, BASEPRI
   193bc:	f383 8812 	msr	BASEPRI_MAX, r3
   193c0:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   193c4:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
   193c6:	b249      	sxtb	r1, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   193c8:	06da      	lsls	r2, r3, #27
   193ca:	d119      	bne.n	19400 <z_set_prio+0x50>
	return node->next != NULL;
   193cc:	6985      	ldr	r5, [r0, #24]
   193ce:	b9bd      	cbnz	r5, 19400 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   193d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   193d4:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   193d6:	f005 fe85 	bl	1f0e4 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   193da:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   193dc:	4a16      	ldr	r2, [pc, #88]	; (19438 <z_set_prio+0x88>)
   193de:	f063 037f 	orn	r3, r3, #127	; 0x7f
   193e2:	7343      	strb	r3, [r0, #13]
   193e4:	4613      	mov	r3, r2
				thread->base.prio = prio;
   193e6:	7381      	strb	r1, [r0, #14]
   193e8:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   193ec:	4298      	cmp	r0, r3
   193ee:	bf18      	it	ne
   193f0:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
   193f2:	6a50      	ldr	r0, [r2, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   193f4:	b95d      	cbnz	r5, 1940e <z_set_prio+0x5e>
	node->prev = tail;
   193f6:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
   193fa:	6004      	str	r4, [r0, #0]
	list->tail = node;
   193fc:	6254      	str	r4, [r2, #36]	; 0x24
}
   193fe:	e011      	b.n	19424 <z_set_prio+0x74>
   19400:	2000      	movs	r0, #0
			thread->base.prio = prio;
   19402:	73a1      	strb	r1, [r4, #14]
	__asm__ volatile(
   19404:	f386 8811 	msr	BASEPRI, r6
   19408:	f3bf 8f6f 	isb	sy
}
   1940c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
   1940e:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
   19412:	42b9      	cmp	r1, r7
   19414:	d00b      	beq.n	1942e <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   19416:	428f      	cmp	r7, r1
   19418:	dd09      	ble.n	1942e <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
   1941a:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   1941c:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   19420:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   19422:	606c      	str	r4, [r5, #4]
			update_cache(1);
   19424:	2001      	movs	r0, #1
   19426:	f7ff fe75 	bl	19114 <update_cache>
   1942a:	2001      	movs	r0, #1
   1942c:	e7ea      	b.n	19404 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
   1942e:	42a8      	cmp	r0, r5
   19430:	d0e1      	beq.n	193f6 <z_set_prio+0x46>
   19432:	682d      	ldr	r5, [r5, #0]
   19434:	e7de      	b.n	193f4 <z_set_prio+0x44>
   19436:	bf00      	nop
   19438:	20009f2c 	.word	0x20009f2c

0001943c <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1943c:	b949      	cbnz	r1, 19452 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1943e:	f3ef 8005 	mrs	r0, IPSR
   19442:	b930      	cbnz	r0, 19452 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   19444:	4b05      	ldr	r3, [pc, #20]	; (1945c <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   19446:	69da      	ldr	r2, [r3, #28]
   19448:	689b      	ldr	r3, [r3, #8]
   1944a:	429a      	cmp	r2, r3
   1944c:	d001      	beq.n	19452 <z_reschedule+0x16>
   1944e:	f7f3 bb5b 	b.w	cb08 <arch_swap>
   19452:	f381 8811 	msr	BASEPRI, r1
   19456:	f3bf 8f6f 	isb	sy
}
   1945a:	4770      	bx	lr
   1945c:	20009f2c 	.word	0x20009f2c

00019460 <z_sched_start>:
{
   19460:	b510      	push	{r4, lr}
	__asm__ volatile(
   19462:	f04f 0220 	mov.w	r2, #32
   19466:	f3ef 8411 	mrs	r4, BASEPRI
   1946a:	f382 8812 	msr	BASEPRI_MAX, r2
   1946e:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   19472:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   19474:	0751      	lsls	r1, r2, #29
   19476:	d404      	bmi.n	19482 <z_sched_start+0x22>
	__asm__ volatile(
   19478:	f384 8811 	msr	BASEPRI, r4
   1947c:	f3bf 8f6f 	isb	sy
}
   19480:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   19482:	f022 0204 	bic.w	r2, r2, #4
   19486:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   19488:	f7ff fe9c 	bl	191c4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1948c:	4621      	mov	r1, r4
}
   1948e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   19492:	4801      	ldr	r0, [pc, #4]	; (19498 <z_sched_start+0x38>)
   19494:	f7ff bfd2 	b.w	1943c <z_reschedule>
   19498:	2000a077 	.word	0x2000a077

0001949c <z_impl_k_thread_suspend>:
{
   1949c:	b570      	push	{r4, r5, r6, lr}
   1949e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   194a0:	3018      	adds	r0, #24
   194a2:	f005 ff34 	bl	1f30e <z_abort_timeout>
	__asm__ volatile(
   194a6:	f04f 0320 	mov.w	r3, #32
   194aa:	f3ef 8611 	mrs	r6, BASEPRI
   194ae:	f383 8812 	msr	BASEPRI_MAX, r3
   194b2:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   194b6:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   194ba:	7b63      	ldrb	r3, [r4, #13]
   194bc:	2a00      	cmp	r2, #0
   194be:	da05      	bge.n	194cc <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   194c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
   194c4:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
   194c6:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   194c8:	f005 fe0c 	bl	1f0e4 <sys_dlist_remove>
		update_cache(thread == _current);
   194cc:	4d0b      	ldr	r5, [pc, #44]	; (194fc <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   194ce:	7b63      	ldrb	r3, [r4, #13]
   194d0:	68a8      	ldr	r0, [r5, #8]
   194d2:	f043 0310 	orr.w	r3, r3, #16
   194d6:	7363      	strb	r3, [r4, #13]
   194d8:	1b03      	subs	r3, r0, r4
   194da:	4258      	negs	r0, r3
   194dc:	4158      	adcs	r0, r3
   194de:	f7ff fe19 	bl	19114 <update_cache>
	__asm__ volatile(
   194e2:	f386 8811 	msr	BASEPRI, r6
   194e6:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   194ea:	68ab      	ldr	r3, [r5, #8]
   194ec:	42a3      	cmp	r3, r4
   194ee:	d103      	bne.n	194f8 <z_impl_k_thread_suspend+0x5c>
}
   194f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   194f4:	f005 bece 	b.w	1f294 <z_reschedule_unlocked>
}
   194f8:	bd70      	pop	{r4, r5, r6, pc}
   194fa:	bf00      	nop
   194fc:	20009f2c 	.word	0x20009f2c

00019500 <k_sched_lock>:
	__asm__ volatile(
   19500:	f04f 0320 	mov.w	r3, #32
   19504:	f3ef 8111 	mrs	r1, BASEPRI
   19508:	f383 8812 	msr	BASEPRI_MAX, r3
   1950c:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   19510:	4b04      	ldr	r3, [pc, #16]	; (19524 <k_sched_lock+0x24>)
   19512:	689a      	ldr	r2, [r3, #8]
   19514:	7bd3      	ldrb	r3, [r2, #15]
   19516:	3b01      	subs	r3, #1
   19518:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1951a:	f381 8811 	msr	BASEPRI, r1
   1951e:	f3bf 8f6f 	isb	sy
}
   19522:	4770      	bx	lr
   19524:	20009f2c 	.word	0x20009f2c

00019528 <k_sched_unlock>:
{
   19528:	b510      	push	{r4, lr}
	__asm__ volatile(
   1952a:	f04f 0320 	mov.w	r3, #32
   1952e:	f3ef 8411 	mrs	r4, BASEPRI
   19532:	f383 8812 	msr	BASEPRI_MAX, r3
   19536:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1953a:	4b08      	ldr	r3, [pc, #32]	; (1955c <k_sched_unlock+0x34>)
		update_cache(0);
   1953c:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   1953e:	689a      	ldr	r2, [r3, #8]
   19540:	7bd3      	ldrb	r3, [r2, #15]
   19542:	3301      	adds	r3, #1
   19544:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   19546:	f7ff fde5 	bl	19114 <update_cache>
	__asm__ volatile(
   1954a:	f384 8811 	msr	BASEPRI, r4
   1954e:	f3bf 8f6f 	isb	sy
}
   19552:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   19556:	f005 be9d 	b.w	1f294 <z_reschedule_unlocked>
   1955a:	bf00      	nop
   1955c:	20009f2c 	.word	0x20009f2c

00019560 <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   19560:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   19562:	4b04      	ldr	r3, [pc, #16]	; (19574 <z_sched_init+0x14>)
   19564:	4608      	mov	r0, r1
   19566:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   1956a:	e9c3 2208 	strd	r2, r2, [r3, #32]
   1956e:	f7ff be8d 	b.w	1928c <k_sched_time_slice_set>
   19572:	bf00      	nop
   19574:	20009f2c 	.word	0x20009f2c

00019578 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   19578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   1957a:	f04f 0320 	mov.w	r3, #32
   1957e:	f3ef 8511 	mrs	r5, BASEPRI
   19582:	f383 8812 	msr	BASEPRI_MAX, r3
   19586:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   1958a:	4919      	ldr	r1, [pc, #100]	; (195f0 <z_impl_k_yield+0x78>)
   1958c:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1958e:	7b43      	ldrb	r3, [r0, #13]
   19590:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   19594:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   19596:	f005 fda5 	bl	1f0e4 <sys_dlist_remove>
	return list->head == list;
   1959a:	4608      	mov	r0, r1
	}
	queue_thread(_current);
   1959c:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   1959e:	7b5a      	ldrb	r2, [r3, #13]
   195a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
   195a4:	735a      	strb	r2, [r3, #13]
   195a6:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return (node == list->tail) ? NULL : node->next;
   195aa:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   195ac:	4282      	cmp	r2, r0
   195ae:	bf08      	it	eq
   195b0:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   195b2:	b922      	cbnz	r2, 195be <z_impl_k_yield+0x46>
	node->prev = tail;
   195b4:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
   195b8:	6023      	str	r3, [r4, #0]
	list->tail = node;
   195ba:	624b      	str	r3, [r1, #36]	; 0x24
}
   195bc:	e00c      	b.n	195d8 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
   195be:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   195c2:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   195c6:	42be      	cmp	r6, r7
   195c8:	d00e      	beq.n	195e8 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
   195ca:	42b7      	cmp	r7, r6
   195cc:	dd0c      	ble.n	195e8 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
   195ce:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   195d0:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   195d4:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   195d6:	6053      	str	r3, [r2, #4]
	update_cache(1);
   195d8:	2001      	movs	r0, #1
   195da:	f7ff fd9b 	bl	19114 <update_cache>
   195de:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   195e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   195e4:	f7f3 ba90 	b.w	cb08 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   195e8:	42a2      	cmp	r2, r4
   195ea:	d0e3      	beq.n	195b4 <z_impl_k_yield+0x3c>
   195ec:	6812      	ldr	r2, [r2, #0]
   195ee:	e7e0      	b.n	195b2 <z_impl_k_yield+0x3a>
   195f0:	20009f2c 	.word	0x20009f2c

000195f4 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   195f4:	ea50 0301 	orrs.w	r3, r0, r1
{
   195f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   195fc:	4605      	mov	r5, r0
   195fe:	460e      	mov	r6, r1
	if (ticks == 0) {
   19600:	d103      	bne.n	1960a <z_tick_sleep+0x16>
	z_impl_k_yield();
   19602:	f7ff ffb9 	bl	19578 <z_impl_k_yield>
		k_yield();
		return 0;
   19606:	2000      	movs	r0, #0
   19608:	e02c      	b.n	19664 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
   1960a:	1c83      	adds	r3, r0, #2
   1960c:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   19610:	db2a      	blt.n	19668 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   19612:	f005 febe 	bl	1f392 <sys_clock_tick_get_32>
   19616:	1944      	adds	r4, r0, r5
   19618:	f04f 0320 	mov.w	r3, #32
   1961c:	f3ef 8811 	mrs	r8, BASEPRI
   19620:	f383 8812 	msr	BASEPRI_MAX, r3
   19624:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   19628:	4f11      	ldr	r7, [pc, #68]	; (19670 <z_tick_sleep+0x7c>)
   1962a:	4b12      	ldr	r3, [pc, #72]	; (19674 <z_tick_sleep+0x80>)
   1962c:	68b8      	ldr	r0, [r7, #8]
   1962e:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   19630:	f7ff fdfc 	bl	1922c <unready_thread>
	z_add_thread_timeout(_current, timeout);
   19634:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   19636:	4910      	ldr	r1, [pc, #64]	; (19678 <z_tick_sleep+0x84>)
   19638:	462a      	mov	r2, r5
   1963a:	4633      	mov	r3, r6
   1963c:	3018      	adds	r0, #24
   1963e:	f000 f917 	bl	19870 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   19642:	68ba      	ldr	r2, [r7, #8]
   19644:	4640      	mov	r0, r8
	thread->base.thread_state |= _THREAD_SUSPENDED;
   19646:	7b53      	ldrb	r3, [r2, #13]
   19648:	f043 0310 	orr.w	r3, r3, #16
   1964c:	7353      	strb	r3, [r2, #13]
   1964e:	f7f3 fa5b 	bl	cb08 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   19652:	f005 fe9e 	bl	1f392 <sys_clock_tick_get_32>
   19656:	1a20      	subs	r0, r4, r0
   19658:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   1965c:	2801      	cmp	r0, #1
   1965e:	f173 0300 	sbcs.w	r3, r3, #0
   19662:	dbd0      	blt.n	19606 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
   19664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   19668:	f06f 0401 	mvn.w	r4, #1
   1966c:	1a24      	subs	r4, r4, r0
   1966e:	e7d3      	b.n	19618 <z_tick_sleep+0x24>
   19670:	20009f2c 	.word	0x20009f2c
   19674:	20009f5c 	.word	0x20009f5c
   19678:	0001f11b 	.word	0x0001f11b

0001967c <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1967c:	f1b1 3fff 	cmp.w	r1, #4294967295
   19680:	bf08      	it	eq
   19682:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   19686:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   19688:	d106      	bne.n	19698 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   1968a:	4b08      	ldr	r3, [pc, #32]	; (196ac <z_impl_k_sleep+0x30>)
   1968c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1968e:	f7ff ff05 	bl	1949c <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   19692:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   19696:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   19698:	f7ff ffac 	bl	195f4 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   1969c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   196a0:	fb80 0303 	smull	r0, r3, r0, r3
   196a4:	0bc0      	lsrs	r0, r0, #15
   196a6:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   196aa:	e7f4      	b.n	19696 <z_impl_k_sleep+0x1a>
   196ac:	20009f2c 	.word	0x20009f2c

000196b0 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   196b0:	4b01      	ldr	r3, [pc, #4]	; (196b8 <z_impl_z_current_get+0x8>)
   196b2:	6898      	ldr	r0, [r3, #8]
   196b4:	4770      	bx	lr
   196b6:	bf00      	nop
   196b8:	20009f2c 	.word	0x20009f2c

000196bc <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   196bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   196c0:	4604      	mov	r4, r0
   196c2:	f04f 0320 	mov.w	r3, #32
   196c6:	f3ef 8611 	mrs	r6, BASEPRI
   196ca:	f383 8812 	msr	BASEPRI_MAX, r3
   196ce:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   196d2:	7b03      	ldrb	r3, [r0, #12]
   196d4:	07d9      	lsls	r1, r3, #31
   196d6:	d50b      	bpl.n	196f0 <z_thread_abort+0x34>
	__asm__ volatile(
   196d8:	f386 8811 	msr	BASEPRI, r6
   196dc:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
   196e0:	4040      	eors	r0, r0
   196e2:	f380 8811 	msr	BASEPRI, r0
   196e6:	f04f 0004 	mov.w	r0, #4
   196ea:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   196ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   196f0:	7b43      	ldrb	r3, [r0, #13]
   196f2:	071a      	lsls	r2, r3, #28
   196f4:	d504      	bpl.n	19700 <z_thread_abort+0x44>
   196f6:	f386 8811 	msr	BASEPRI, r6
   196fa:	f3bf 8f6f 	isb	sy
   196fe:	e7f5      	b.n	196ec <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   19700:	f023 0220 	bic.w	r2, r3, #32
   19704:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   19708:	09d2      	lsrs	r2, r2, #7
   1970a:	d120      	bne.n	1974e <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1970c:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   1970e:	68a3      	ldr	r3, [r4, #8]
   19710:	b113      	cbz	r3, 19718 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
   19712:	4620      	mov	r0, r4
   19714:	f005 fcee 	bl	1f0f4 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   19718:	f104 0018 	add.w	r0, r4, #24
   1971c:	f005 fdf7 	bl	1f30e <z_abort_timeout>
   19720:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   19724:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   19728:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1972a:	42bd      	cmp	r5, r7
   1972c:	d000      	beq.n	19730 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1972e:	b9b5      	cbnz	r5, 1975e <z_thread_abort+0xa2>
		update_cache(1);
   19730:	2001      	movs	r0, #1
   19732:	f7ff fcef 	bl	19114 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   19736:	4b10      	ldr	r3, [pc, #64]	; (19778 <z_thread_abort+0xbc>)
   19738:	689b      	ldr	r3, [r3, #8]
   1973a:	42a3      	cmp	r3, r4
   1973c:	d1db      	bne.n	196f6 <z_thread_abort+0x3a>
   1973e:	f3ef 8305 	mrs	r3, IPSR
   19742:	2b00      	cmp	r3, #0
   19744:	d1d7      	bne.n	196f6 <z_thread_abort+0x3a>
   19746:	4630      	mov	r0, r6
   19748:	f7f3 f9de 	bl	cb08 <arch_swap>
	return ret;
   1974c:	e7d3      	b.n	196f6 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1974e:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   19752:	f043 0308 	orr.w	r3, r3, #8
   19756:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   19758:	f005 fcc4 	bl	1f0e4 <sys_dlist_remove>
}
   1975c:	e7d7      	b.n	1970e <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
   1975e:	4628      	mov	r0, r5
   19760:	f005 fcc8 	bl	1f0f4 <unpend_thread_no_timeout>
   19764:	f105 0018 	add.w	r0, r5, #24
   19768:	f005 fdd1 	bl	1f30e <z_abort_timeout>
		ready_thread(thread);
   1976c:	4628      	mov	r0, r5
   1976e:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
   19772:	f7ff fd27 	bl	191c4 <ready_thread>
   19776:	e7d7      	b.n	19728 <z_thread_abort+0x6c>
   19778:	20009f2c 	.word	0x20009f2c

0001977c <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   1977c:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1977e:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   19782:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   19784:	e9cd 6700 	strd	r6, r7, [sp]
   19788:	f7ff fdf4 	bl	19374 <z_pend_curr>

	if (data != NULL) {
   1978c:	b11c      	cbz	r4, 19796 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   1978e:	4b03      	ldr	r3, [pc, #12]	; (1979c <z_sched_wait+0x20>)
   19790:	689b      	ldr	r3, [r3, #8]
   19792:	695b      	ldr	r3, [r3, #20]
   19794:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   19796:	b002      	add	sp, #8
   19798:	bdd0      	pop	{r4, r6, r7, pc}
   1979a:	bf00      	nop
   1979c:	20009f2c 	.word	0x20009f2c

000197a0 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   197a0:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   197a2:	4806      	ldr	r0, [pc, #24]	; (197bc <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   197a4:	4a06      	ldr	r2, [pc, #24]	; (197c0 <z_data_copy+0x20>)
   197a6:	4907      	ldr	r1, [pc, #28]	; (197c4 <z_data_copy+0x24>)
   197a8:	1a12      	subs	r2, r2, r0
   197aa:	f005 f9da 	bl	1eb62 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   197ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   197b2:	4a05      	ldr	r2, [pc, #20]	; (197c8 <z_data_copy+0x28>)
   197b4:	4905      	ldr	r1, [pc, #20]	; (197cc <z_data_copy+0x2c>)
   197b6:	4806      	ldr	r0, [pc, #24]	; (197d0 <z_data_copy+0x30>)
   197b8:	f005 b9d3 	b.w	1eb62 <z_early_memcpy>
   197bc:	20008000 	.word	0x20008000
   197c0:	200088b8 	.word	0x200088b8
   197c4:	00023fbc 	.word	0x00023fbc
   197c8:	00000000 	.word	0x00000000
   197cc:	00023fbc 	.word	0x00023fbc
   197d0:	20008000 	.word	0x20008000

000197d4 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   197d4:	4b03      	ldr	r3, [pc, #12]	; (197e4 <elapsed+0x10>)
   197d6:	681b      	ldr	r3, [r3, #0]
   197d8:	b90b      	cbnz	r3, 197de <elapsed+0xa>
   197da:	f7fd ba69 	b.w	16cb0 <sys_clock_elapsed>
}
   197de:	2000      	movs	r0, #0
   197e0:	4770      	bx	lr
   197e2:	bf00      	nop
   197e4:	20009f68 	.word	0x20009f68

000197e8 <next_timeout>:

static int32_t next_timeout(void)
{
   197e8:	b510      	push	{r4, lr}
	return list->head == list;
   197ea:	4b11      	ldr	r3, [pc, #68]	; (19830 <next_timeout+0x48>)
   197ec:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   197ee:	429c      	cmp	r4, r3
   197f0:	d10a      	bne.n	19808 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   197f2:	f7ff ffef 	bl	197d4 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   197f6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   197fa:	4b0e      	ldr	r3, [pc, #56]	; (19834 <next_timeout+0x4c>)
   197fc:	691b      	ldr	r3, [r3, #16]
   197fe:	b113      	cbz	r3, 19806 <next_timeout+0x1e>
   19800:	4298      	cmp	r0, r3
   19802:	bfa8      	it	ge
   19804:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   19806:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   19808:	f7ff ffe4 	bl	197d4 <elapsed>
	if ((to == NULL) ||
   1980c:	2c00      	cmp	r4, #0
   1980e:	d0f2      	beq.n	197f6 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   19810:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   19814:	1a1b      	subs	r3, r3, r0
   19816:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   1981a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1981e:	f172 0100 	sbcs.w	r1, r2, #0
   19822:	dae8      	bge.n	197f6 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   19824:	2a00      	cmp	r2, #0
   19826:	bfac      	ite	ge
   19828:	4618      	movge	r0, r3
   1982a:	2000      	movlt	r0, #0
   1982c:	e7e5      	b.n	197fa <next_timeout+0x12>
   1982e:	bf00      	nop
   19830:	2000855c 	.word	0x2000855c
   19834:	20009f2c 	.word	0x20009f2c

00019838 <remove_timeout>:
{
   19838:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1983a:	b170      	cbz	r0, 1985a <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   1983c:	4b0b      	ldr	r3, [pc, #44]	; (1986c <remove_timeout+0x34>)
   1983e:	685b      	ldr	r3, [r3, #4]
   19840:	4298      	cmp	r0, r3
   19842:	d00a      	beq.n	1985a <remove_timeout+0x22>
   19844:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   19846:	b143      	cbz	r3, 1985a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   19848:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1984c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   19850:	1912      	adds	r2, r2, r4
   19852:	eb41 0105 	adc.w	r1, r1, r5
   19856:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   1985a:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
   1985e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   19860:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   19862:	2300      	movs	r3, #0
	node->prev = NULL;
   19864:	e9c0 3300 	strd	r3, r3, [r0]
}
   19868:	bd30      	pop	{r4, r5, pc}
   1986a:	bf00      	nop
   1986c:	2000855c 	.word	0x2000855c

00019870 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   19870:	f1b3 3fff 	cmp.w	r3, #4294967295
   19874:	bf08      	it	eq
   19876:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   1987a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1987c:	4604      	mov	r4, r0
   1987e:	461d      	mov	r5, r3
   19880:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   19882:	d061      	beq.n	19948 <z_add_timeout+0xd8>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   19884:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   19886:	f04f 0320 	mov.w	r3, #32
   1988a:	f3ef 8711 	mrs	r7, BASEPRI
   1988e:	f383 8812 	msr	BASEPRI_MAX, r3
   19892:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   19896:	3201      	adds	r2, #1
   19898:	f175 33ff 	sbcs.w	r3, r5, #4294967295
   1989c:	da24      	bge.n	198e8 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   1989e:	f06f 0301 	mvn.w	r3, #1
   198a2:	492f      	ldr	r1, [pc, #188]	; (19960 <z_add_timeout+0xf0>)
   198a4:	e9d1 2000 	ldrd	r2, r0, [r1]
   198a8:	1a9b      	subs	r3, r3, r2
   198aa:	f04f 32ff 	mov.w	r2, #4294967295
   198ae:	eb62 0000 	sbc.w	r0, r2, r0
   198b2:	1b9e      	subs	r6, r3, r6
   198b4:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   198b8:	2e01      	cmp	r6, #1
   198ba:	f170 0300 	sbcs.w	r3, r0, #0
   198be:	da01      	bge.n	198c4 <z_add_timeout+0x54>
   198c0:	2601      	movs	r6, #1
   198c2:	2000      	movs	r0, #0
   198c4:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
   198c8:	4e26      	ldr	r6, [pc, #152]	; (19964 <z_add_timeout+0xf4>)
   198ca:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
   198ce:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   198d0:	45b4      	cmp	ip, r6
   198d2:	bf08      	it	eq
   198d4:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   198d8:	f1bc 0f00 	cmp.w	ip, #0
   198dc:	d10d      	bne.n	198fa <z_add_timeout+0x8a>
	node->prev = tail;
   198de:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
   198e2:	602c      	str	r4, [r5, #0]
	list->tail = node;
   198e4:	6074      	str	r4, [r6, #4]
}
   198e6:	e01c      	b.n	19922 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
   198e8:	f7ff ff74 	bl	197d4 <elapsed>
   198ec:	3601      	adds	r6, #1
   198ee:	f145 0500 	adc.w	r5, r5, #0
   198f2:	1836      	adds	r6, r6, r0
   198f4:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   198f8:	e7e4      	b.n	198c4 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
   198fa:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
   198fe:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
   19902:	4293      	cmp	r3, r2
   19904:	eb71 0e00 	sbcs.w	lr, r1, r0
   19908:	da1f      	bge.n	1994a <z_add_timeout+0xda>
				t->dticks -= to->dticks;
   1990a:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
   1990c:	f8dc 3004 	ldr.w	r3, [ip, #4]
   19910:	eb60 0001 	sbc.w	r0, r0, r1
   19914:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
   19918:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
   1991c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1991e:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
   19922:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19924:	42b3      	cmp	r3, r6
   19926:	d00b      	beq.n	19940 <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   19928:	429c      	cmp	r4, r3
   1992a:	d109      	bne.n	19940 <z_add_timeout+0xd0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   1992c:	f7ff ff5c 	bl	197e8 <next_timeout>

			if (next_time == 0 ||
   19930:	b118      	cbz	r0, 1993a <z_add_timeout+0xca>
			    _current_cpu->slice_ticks != next_time) {
   19932:	4b0d      	ldr	r3, [pc, #52]	; (19968 <z_add_timeout+0xf8>)
			if (next_time == 0 ||
   19934:	691b      	ldr	r3, [r3, #16]
   19936:	4283      	cmp	r3, r0
   19938:	d002      	beq.n	19940 <z_add_timeout+0xd0>
				sys_clock_set_timeout(next_time, false);
   1993a:	2100      	movs	r1, #0
   1993c:	f7fd f988 	bl	16c50 <sys_clock_set_timeout>
	__asm__ volatile(
   19940:	f387 8811 	msr	BASEPRI, r7
   19944:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   19948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
   1994a:	1a9b      	subs	r3, r3, r2
   1994c:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   19950:	45ac      	cmp	ip, r5
   19952:	e9c4 3104 	strd	r3, r1, [r4, #16]
   19956:	d0c2      	beq.n	198de <z_add_timeout+0x6e>
   19958:	f8dc c000 	ldr.w	ip, [ip]
   1995c:	e7bc      	b.n	198d8 <z_add_timeout+0x68>
   1995e:	bf00      	nop
   19960:	20009aa0 	.word	0x20009aa0
   19964:	2000855c 	.word	0x2000855c
   19968:	20009f2c 	.word	0x20009f2c

0001996c <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   1996c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19970:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   19972:	f7ff fcbd 	bl	192f0 <z_time_slice>
	__asm__ volatile(
   19976:	f04f 0320 	mov.w	r3, #32
   1997a:	f3ef 8611 	mrs	r6, BASEPRI
   1997e:	f383 8812 	msr	BASEPRI_MAX, r3
   19982:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   19986:	4f24      	ldr	r7, [pc, #144]	; (19a18 <sys_clock_announce+0xac>)
	return list->head == list;
   19988:	f8df 8090 	ldr.w	r8, [pc, #144]	; 19a1c <sys_clock_announce+0xb0>
   1998c:	f8d8 0000 	ldr.w	r0, [r8]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   19990:	4a23      	ldr	r2, [pc, #140]	; (19a20 <sys_clock_announce+0xb4>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19992:	4540      	cmp	r0, r8
	announce_remaining = ticks;
   19994:	603c      	str	r4, [r7, #0]
	return list->head == list;
   19996:	ea4f 71e4 	mov.w	r1, r4, asr #31
		curr_tick += dt;
   1999a:	e9d2 3e00 	ldrd	r3, lr, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1999e:	d00b      	beq.n	199b8 <sys_clock_announce+0x4c>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   199a0:	b150      	cbz	r0, 199b8 <sys_clock_announce+0x4c>
   199a2:	e9d0 5c04 	ldrd	r5, ip, [r0, #16]
   199a6:	42ac      	cmp	r4, r5
   199a8:	eb71 090c 	sbcs.w	r9, r1, ip
   199ac:	da17      	bge.n	199de <sys_clock_announce+0x72>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   199ae:	1b2d      	subs	r5, r5, r4
   199b0:	eb6c 0c01 	sbc.w	ip, ip, r1
   199b4:	e9c0 5c04 	strd	r5, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   199b8:	18e3      	adds	r3, r4, r3
	announce_remaining = 0;
   199ba:	f04f 0400 	mov.w	r4, #0
	curr_tick += announce_remaining;
   199be:	eb4e 0101 	adc.w	r1, lr, r1
   199c2:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
   199c6:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
   199c8:	f7ff ff0e 	bl	197e8 <next_timeout>
   199cc:	4621      	mov	r1, r4
   199ce:	f7fd f93f 	bl	16c50 <sys_clock_set_timeout>
	__asm__ volatile(
   199d2:	f386 8811 	msr	BASEPRI, r6
   199d6:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   199da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   199de:	18eb      	adds	r3, r5, r3
   199e0:	eb4e 71e5 	adc.w	r1, lr, r5, asr #31
   199e4:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
   199e8:	2200      	movs	r2, #0
   199ea:	2300      	movs	r3, #0
   199ec:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
   199f0:	f7ff ff22 	bl	19838 <remove_timeout>
   199f4:	f386 8811 	msr	BASEPRI, r6
   199f8:	f3bf 8f6f 	isb	sy
		t->fn(t);
   199fc:	6883      	ldr	r3, [r0, #8]
   199fe:	4798      	blx	r3
	__asm__ volatile(
   19a00:	f04f 0320 	mov.w	r3, #32
   19a04:	f3ef 8611 	mrs	r6, BASEPRI
   19a08:	f383 8812 	msr	BASEPRI_MAX, r3
   19a0c:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
   19a10:	683c      	ldr	r4, [r7, #0]
   19a12:	1b64      	subs	r4, r4, r5
   19a14:	e7ba      	b.n	1998c <sys_clock_announce+0x20>
   19a16:	bf00      	nop
   19a18:	20009f68 	.word	0x20009f68
   19a1c:	2000855c 	.word	0x2000855c
   19a20:	20009aa0 	.word	0x20009aa0

00019a24 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   19a24:	b510      	push	{r4, lr}
   19a26:	f04f 0320 	mov.w	r3, #32
   19a2a:	f3ef 8411 	mrs	r4, BASEPRI
   19a2e:	f383 8812 	msr	BASEPRI_MAX, r3
   19a32:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   19a36:	f7ff fecd 	bl	197d4 <elapsed>
   19a3a:	4603      	mov	r3, r0
   19a3c:	4a05      	ldr	r2, [pc, #20]	; (19a54 <sys_clock_tick_get+0x30>)
   19a3e:	e9d2 0100 	ldrd	r0, r1, [r2]
   19a42:	1818      	adds	r0, r3, r0
   19a44:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
   19a48:	f384 8811 	msr	BASEPRI, r4
   19a4c:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   19a50:	bd10      	pop	{r4, pc}
   19a52:	bf00      	nop
   19a54:	20009aa0 	.word	0x20009aa0

00019a58 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   19a58:	b570      	push	{r4, r5, r6, lr}
   19a5a:	4604      	mov	r4, r0
	__asm__ volatile(
   19a5c:	f04f 0320 	mov.w	r3, #32
   19a60:	f3ef 8511 	mrs	r5, BASEPRI
   19a64:	f383 8812 	msr	BASEPRI_MAX, r3
   19a68:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   19a6c:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
   19a70:	3301      	adds	r3, #1
   19a72:	f142 0200 	adc.w	r2, r2, #0
   19a76:	2b02      	cmp	r3, #2
   19a78:	f172 0200 	sbcs.w	r2, r2, #0
   19a7c:	d322      	bcc.n	19ac4 <z_timer_expiration_handler+0x6c>
	return z_impl_k_uptime_ticks();
   19a7e:	f005 fc8c 	bl	1f39a <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   19a82:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   19a86:	3001      	adds	r0, #1
   19a88:	f141 0100 	adc.w	r1, r1, #0
   19a8c:	18c0      	adds	r0, r0, r3
   19a8e:	eb41 0102 	adc.w	r1, r1, r2
   19a92:	2801      	cmp	r0, #1
   19a94:	f171 0100 	sbcs.w	r1, r1, #0
   19a98:	db32      	blt.n	19b00 <z_timer_expiration_handler+0xa8>
   19a9a:	f005 fc7e 	bl	1f39a <z_impl_k_uptime_ticks>
   19a9e:	3001      	adds	r0, #1
   19aa0:	f141 0300 	adc.w	r3, r1, #0
   19aa4:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
   19aa8:	1880      	adds	r0, r0, r2
   19aaa:	f06f 0201 	mvn.w	r2, #1
   19aae:	eb43 0301 	adc.w	r3, r3, r1
   19ab2:	f04f 31ff 	mov.w	r1, #4294967295
   19ab6:	1a12      	subs	r2, r2, r0
   19ab8:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   19abc:	4620      	mov	r0, r4
   19abe:	491a      	ldr	r1, [pc, #104]	; (19b28 <z_timer_expiration_handler+0xd0>)
   19ac0:	f7ff fed6 	bl	19870 <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   19ac4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   19ac6:	3301      	adds	r3, #1
   19ac8:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   19aca:	6a23      	ldr	r3, [r4, #32]
   19acc:	b173      	cbz	r3, 19aec <z_timer_expiration_handler+0x94>
	__asm__ volatile(
   19ace:	f385 8811 	msr	BASEPRI, r5
   19ad2:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   19ad6:	4620      	mov	r0, r4
   19ad8:	6a23      	ldr	r3, [r4, #32]
   19ada:	4798      	blx	r3
	__asm__ volatile(
   19adc:	f04f 0320 	mov.w	r3, #32
   19ae0:	f3ef 8511 	mrs	r5, BASEPRI
   19ae4:	f383 8812 	msr	BASEPRI_MAX, r3
   19ae8:	f3bf 8f6f 	isb	sy
	return list->head == list;
   19aec:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19af0:	42a6      	cmp	r6, r4
   19af2:	d000      	beq.n	19af6 <z_timer_expiration_handler+0x9e>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   19af4:	b94e      	cbnz	r6, 19b0a <z_timer_expiration_handler+0xb2>
	__asm__ volatile(
   19af6:	f385 8811 	msr	BASEPRI, r5
   19afa:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   19afe:	bd70      	pop	{r4, r5, r6, pc}
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   19b00:	f06f 0201 	mvn.w	r2, #1
   19b04:	f04f 33ff 	mov.w	r3, #4294967295
   19b08:	e7d8      	b.n	19abc <z_timer_expiration_handler+0x64>
	z_unpend_thread_no_timeout(thread);
   19b0a:	4630      	mov	r0, r6
   19b0c:	f005 fb5f 	bl	1f1ce <z_unpend_thread_no_timeout>
   19b10:	2300      	movs	r3, #0
   19b12:	67f3      	str	r3, [r6, #124]	; 0x7c
   19b14:	f385 8811 	msr	BASEPRI, r5
   19b18:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   19b1c:	4630      	mov	r0, r6
}
   19b1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   19b22:	f005 bb44 	b.w	1f1ae <z_ready_thread>
   19b26:	bf00      	nop
   19b28:	00019a59 	.word	0x00019a59

00019b2c <z_impl_k_timer_start>:
void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   19b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
   19b30:	bf08      	it	eq
   19b32:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   19b36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19b3a:	4619      	mov	r1, r3
   19b3c:	4605      	mov	r5, r0
   19b3e:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
   19b42:	4614      	mov	r4, r2
   19b44:	4691      	mov	r9, r2
   19b46:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   19b48:	d037      	beq.n	19bba <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   19b4a:	f1b0 3fff 	cmp.w	r0, #4294967295
   19b4e:	bf08      	it	eq
   19b50:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   19b54:	4637      	mov	r7, r6
   19b56:	4682      	mov	sl, r0
   19b58:	d011      	beq.n	19b7e <z_impl_k_timer_start+0x52>
   19b5a:	ea50 0306 	orrs.w	r3, r0, r6
   19b5e:	d00e      	beq.n	19b7e <z_impl_k_timer_start+0x52>
   19b60:	1c72      	adds	r2, r6, #1
   19b62:	f170 33ff 	sbcs.w	r3, r0, #4294967295
   19b66:	db0a      	blt.n	19b7e <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
   19b68:	2e02      	cmp	r6, #2
   19b6a:	4684      	mov	ip, r0
   19b6c:	f170 0000 	sbcs.w	r0, r0, #0
   19b70:	bfbc      	itt	lt
   19b72:	2702      	movlt	r7, #2
   19b74:	f04f 0c00 	movlt.w	ip, #0
   19b78:	3f01      	subs	r7, #1
   19b7a:	f14c 3aff 	adc.w	sl, ip, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   19b7e:	1c63      	adds	r3, r4, #1
   19b80:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   19b84:	db0a      	blt.n	19b9c <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
   19b86:	2c01      	cmp	r4, #1
   19b88:	f171 0300 	sbcs.w	r3, r1, #0
   19b8c:	4622      	mov	r2, r4
   19b8e:	bfbc      	itt	lt
   19b90:	2201      	movlt	r2, #1
   19b92:	2100      	movlt	r1, #0
   19b94:	f112 39ff 	adds.w	r9, r2, #4294967295
   19b98:	f141 38ff 	adc.w	r8, r1, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
   19b9c:	4628      	mov	r0, r5
   19b9e:	f005 fbb6 	bl	1f30e <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   19ba2:	2300      	movs	r3, #0
	timer->period = period;
   19ba4:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28
	timer->status = 0U;
   19ba8:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   19baa:	464a      	mov	r2, r9
   19bac:	4643      	mov	r3, r8
   19bae:	4628      	mov	r0, r5
		     duration);
}
   19bb0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   19bb4:	4902      	ldr	r1, [pc, #8]	; (19bc0 <z_impl_k_timer_start+0x94>)
   19bb6:	f7ff be5b 	b.w	19870 <z_add_timeout>
}
   19bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19bbe:	bf00      	nop
   19bc0:	00019a59 	.word	0x00019a59

00019bc4 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   19bc4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   19bc8:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   19bca:	4b29      	ldr	r3, [pc, #164]	; (19c70 <z_impl_k_poll+0xac>)
{
   19bcc:	4616      	mov	r6, r2
	struct z_poller *poller = &_current->poller;
   19bce:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   19bd0:	2301      	movs	r3, #1
   19bd2:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   19bd6:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   19bda:	ea52 0305 	orrs.w	r3, r2, r5
   19bde:	bf0c      	ite	eq
   19be0:	2301      	moveq	r3, #1
   19be2:	2300      	movne	r3, #0
   19be4:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   19be8:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   19bea:	f005 fc58 	bl	1f49e <register_events>
   19bee:	4681      	mov	r9, r0
	__asm__ volatile(
   19bf0:	f04f 0320 	mov.w	r3, #32
   19bf4:	f3ef 8a11 	mrs	sl, BASEPRI
   19bf8:	f383 8812 	msr	BASEPRI_MAX, r3
   19bfc:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   19c00:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   19c04:	b964      	cbnz	r4, 19c20 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   19c06:	4601      	mov	r1, r0
   19c08:	4652      	mov	r2, sl
   19c0a:	4640      	mov	r0, r8
   19c0c:	f005 fd18 	bl	1f640 <clear_event_registrations>
	__asm__ volatile(
   19c10:	f38a 8811 	msr	BASEPRI, sl
   19c14:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   19c18:	4620      	mov	r0, r4
   19c1a:	b002      	add	sp, #8
   19c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   19c20:	2300      	movs	r3, #0
   19c22:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   19c26:	ea56 0305 	orrs.w	r3, r6, r5
   19c2a:	d106      	bne.n	19c3a <z_impl_k_poll+0x76>
   19c2c:	f38a 8811 	msr	BASEPRI, sl
   19c30:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   19c34:	f06f 040a 	mvn.w	r4, #10
   19c38:	e7ee      	b.n	19c18 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   19c3a:	4651      	mov	r1, sl
   19c3c:	e9cd 6500 	strd	r6, r5, [sp]
   19c40:	4a0c      	ldr	r2, [pc, #48]	; (19c74 <z_impl_k_poll+0xb0>)
   19c42:	480d      	ldr	r0, [pc, #52]	; (19c78 <z_impl_k_poll+0xb4>)
   19c44:	f7ff fb96 	bl	19374 <z_pend_curr>
   19c48:	4604      	mov	r4, r0
	__asm__ volatile(
   19c4a:	f04f 0320 	mov.w	r3, #32
   19c4e:	f3ef 8511 	mrs	r5, BASEPRI
   19c52:	f383 8812 	msr	BASEPRI_MAX, r3
   19c56:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   19c5a:	462a      	mov	r2, r5
   19c5c:	4649      	mov	r1, r9
   19c5e:	4640      	mov	r0, r8
   19c60:	f005 fcee 	bl	1f640 <clear_event_registrations>
	__asm__ volatile(
   19c64:	f385 8811 	msr	BASEPRI, r5
   19c68:	f3bf 8f6f 	isb	sy
	return swap_rc;
   19c6c:	e7d4      	b.n	19c18 <z_impl_k_poll+0x54>
   19c6e:	bf00      	nop
   19c70:	20009f2c 	.word	0x20009f2c
   19c74:	20008564 	.word	0x20008564
   19c78:	2000a077 	.word	0x2000a077

00019c7c <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   19c7c:	b538      	push	{r3, r4, r5, lr}
   19c7e:	4603      	mov	r3, r0
	__asm__ volatile(
   19c80:	f04f 0220 	mov.w	r2, #32
   19c84:	f3ef 8511 	mrs	r5, BASEPRI
   19c88:	f382 8812 	msr	BASEPRI_MAX, r2
   19c8c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   19c90:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   19c92:	2101      	movs	r1, #1
   19c94:	6081      	str	r1, [r0, #8]
	return list->head == list;
   19c96:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   19c98:	4283      	cmp	r3, r0
   19c9a:	d106      	bne.n	19caa <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   19c9c:	f385 8811 	msr	BASEPRI, r5
   19ca0:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   19ca4:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   19ca6:	4620      	mov	r0, r4
   19ca8:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   19caa:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   19cae:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   19cb0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   19cb2:	2300      	movs	r3, #0
	node->prev = NULL;
   19cb4:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   19cb8:	f005 fc68 	bl	1f58c <signal_poll_event>
	z_reschedule(&lock, key);
   19cbc:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   19cbe:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   19cc0:	4801      	ldr	r0, [pc, #4]	; (19cc8 <z_impl_k_poll_signal_raise+0x4c>)
   19cc2:	f7ff fbbb 	bl	1943c <z_reschedule>
	return rc;
   19cc6:	e7ee      	b.n	19ca6 <z_impl_k_poll_signal_raise+0x2a>
   19cc8:	2000a077 	.word	0x2000a077

00019ccc <k_aligned_alloc>:

K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
   19ccc:	460a      	mov	r2, r1
	__ASSERT((align & (align - 1)) == 0,
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   19cce:	4601      	mov	r1, r0
   19cd0:	4801      	ldr	r0, [pc, #4]	; (19cd8 <k_aligned_alloc+0xc>)
   19cd2:	f005 bd06 	b.w	1f6e2 <z_heap_aligned_alloc>
   19cd6:	bf00      	nop
   19cd8:	200086e4 	.word	0x200086e4

00019cdc <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   19cdc:	4b01      	ldr	r3, [pc, #4]	; (19ce4 <k_thread_system_pool_assign+0x8>)
   19cde:	6743      	str	r3, [r0, #116]	; 0x74
}
   19ce0:	4770      	bx	lr
   19ce2:	bf00      	nop
   19ce4:	200086e4 	.word	0x200086e4

00019ce8 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   19ce8:	b538      	push	{r3, r4, r5, lr}
   19cea:	4604      	mov	r4, r0
   19cec:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   19cee:	f004 ffeb 	bl	1ecc8 <k_is_in_isr>
   19cf2:	b920      	cbnz	r0, 19cfe <z_thread_aligned_alloc+0x16>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   19cf4:	4b06      	ldr	r3, [pc, #24]	; (19d10 <z_thread_aligned_alloc+0x28>)
   19cf6:	689b      	ldr	r3, [r3, #8]
   19cf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   19cfa:	b90b      	cbnz	r3, 19d00 <z_thread_aligned_alloc+0x18>
	} else {
		ret = NULL;
	}

	return ret;
}
   19cfc:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   19cfe:	4b05      	ldr	r3, [pc, #20]	; (19d14 <z_thread_aligned_alloc+0x2c>)
		ret = z_heap_aligned_alloc(heap, align, size);
   19d00:	462a      	mov	r2, r5
   19d02:	4621      	mov	r1, r4
   19d04:	4618      	mov	r0, r3
}
   19d06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   19d0a:	f005 bcea 	b.w	1f6e2 <z_heap_aligned_alloc>
   19d0e:	bf00      	nop
   19d10:	20009f2c 	.word	0x20009f2c
   19d14:	200086e4 	.word	0x200086e4

00019d18 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   19d18:	4801      	ldr	r0, [pc, #4]	; (19d20 <boot_banner+0x8>)
   19d1a:	f000 b8f0 	b.w	19efe <printk>
   19d1e:	bf00      	nop
   19d20:	00023f8e 	.word	0x00023f8e

00019d24 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   19d24:	4770      	bx	lr

00019d26 <perip_thread>:
		k_sleep(K_MSEC(50));
		
  }
}

void perip_thread(void){
   19d26:	b508      	push	{r3, lr}
	while(1){
		set_heart_rate_value();
   19d28:	f7ef fcf8 	bl	971c <set_heart_rate_value>
		set_battery_perc();
   19d2c:	f7ef fd14 	bl	9758 <set_battery_perc>
	return z_impl_k_sleep(timeout);
   19d30:	2100      	movs	r1, #0
   19d32:	f640 40cd 	movw	r0, #3277	; 0xccd
   19d36:	f7ff fca1 	bl	1967c <z_impl_k_sleep>
	while(1){
   19d3a:	e7f5      	b.n	19d28 <perip_thread+0x2>

00019d3c <bt_thread>:
void bt_thread(void){
   19d3c:	b508      	push	{r3, lr}
		bt_hrs_set();
   19d3e:	f7ef fccd 	bl	96dc <bt_hrs_set>
		bt_bas_set();
   19d42:	f7ef fcab 	bl	969c <bt_bas_set>
   19d46:	2100      	movs	r1, #0
   19d48:	f44f 3020 	mov.w	r0, #163840	; 0x28000
   19d4c:	f7ff fc96 	bl	1967c <z_impl_k_sleep>
	while(1){
   19d50:	e7f5      	b.n	19d3e <bt_thread+0x2>

00019d52 <bt_event_thread>:
void bt_event_thread(void){
   19d52:	b508      	push	{r3, lr}
		if(is_button1_pressed()){
   19d54:	f7ef fc82 	bl	965c <is_button1_pressed>
   19d58:	b108      	cbz	r0, 19d5e <bt_event_thread+0xc>
			bt_hrs_set();
   19d5a:	f7ef fcbf 	bl	96dc <bt_hrs_set>
		if(is_button2_pressed()){
   19d5e:	f7ef fc8d 	bl	967c <is_button2_pressed>
   19d62:	b108      	cbz	r0, 19d68 <bt_event_thread+0x16>
			bt_bas_set();
   19d64:	f7ef fc9a 	bl	969c <bt_bas_set>
   19d68:	2100      	movs	r1, #0
   19d6a:	f240 6067 	movw	r0, #1639	; 0x667
   19d6e:	f7ff fc85 	bl	1967c <z_impl_k_sleep>
	while(1){
   19d72:	e7ef      	b.n	19d54 <bt_event_thread+0x2>

00019d74 <main>:
	peripheral_init();
   19d74:	f7ef bc1c 	b.w	95b0 <peripheral_init>

00019d78 <k_uptime_get_32>:
{
   19d78:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
   19d7a:	f005 fb0e 	bl	1f39a <z_impl_k_uptime_ticks>
   19d7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   19d82:	fba0 0302 	umull	r0, r3, r0, r2
   19d86:	fb02 3301 	mla	r3, r2, r1, r3
   19d8a:	0bc0      	lsrs	r0, r0, #15
}
   19d8c:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   19d90:	bd08      	pop	{r3, pc}

00019d92 <gpio_enable_interrupt>:
	gt[channel].g_int.active = enable;
   19d92:	232c      	movs	r3, #44	; 0x2c
   19d94:	fb01 0003 	mla	r0, r1, r3, r0
   19d98:	7602      	strb	r2, [r0, #24]
}
   19d9a:	4770      	bx	lr

00019d9c <gpio_enable>:
	gt[channel].active = enable;
   19d9c:	232c      	movs	r3, #44	; 0x2c
   19d9e:	434b      	muls	r3, r1
   19da0:	54c2      	strb	r2, [r0, r3]
}
   19da2:	4770      	bx	lr

00019da4 <get_gpio_pin_interrupt_config>:
	for (int i = 0; i < size; i++) {
   19da4:	2200      	movs	r2, #0
   19da6:	4603      	mov	r3, r0
uint32_t get_gpio_pin_interrupt_config(Gpio_t* gt, uint8_t size){
   19da8:	b530      	push	{r4, r5, lr}
	uint32_t pin_list = 0;
   19daa:	4610      	mov	r0, r2
			pin_list |= BIT(gt[i].pin);
   19dac:	2501      	movs	r5, #1
	for (int i = 0; i < size; i++) {
   19dae:	4291      	cmp	r1, r2
   19db0:	dc00      	bgt.n	19db4 <get_gpio_pin_interrupt_config+0x10>
}
   19db2:	bd30      	pop	{r4, r5, pc}
		if (gt[i].active && gt[i].g_int.active) {
   19db4:	781c      	ldrb	r4, [r3, #0]
   19db6:	b12c      	cbz	r4, 19dc4 <get_gpio_pin_interrupt_config+0x20>
   19db8:	7e1c      	ldrb	r4, [r3, #24]
   19dba:	b11c      	cbz	r4, 19dc4 <get_gpio_pin_interrupt_config+0x20>
			pin_list |= BIT(gt[i].pin);
   19dbc:	7a1c      	ldrb	r4, [r3, #8]
   19dbe:	fa05 f404 	lsl.w	r4, r5, r4
   19dc2:	4320      	orrs	r0, r4
	for (int i = 0; i < size; i++) {
   19dc4:	3201      	adds	r2, #1
   19dc6:	332c      	adds	r3, #44	; 0x2c
   19dc8:	e7f1      	b.n	19dae <get_gpio_pin_interrupt_config+0xa>

00019dca <reset_gpio_interrupt>:

void reset_gpio_interrupt(Gpio_t* gt, uint8_t channel){
	if (gt[channel].active && gt[channel].g_int.active){
   19dca:	232c      	movs	r3, #44	; 0x2c
   19dcc:	4359      	muls	r1, r3
   19dce:	5c42      	ldrb	r2, [r0, r1]
   19dd0:	1843      	adds	r3, r0, r1
   19dd2:	b122      	cbz	r2, 19dde <reset_gpio_interrupt+0x14>
   19dd4:	7e1a      	ldrb	r2, [r3, #24]
   19dd6:	b112      	cbz	r2, 19dde <reset_gpio_interrupt+0x14>
		gt[channel].g_int.status = false;
   19dd8:	2200      	movs	r2, #0
   19dda:	f883 2020 	strb.w	r2, [r3, #32]
	}
}
   19dde:	4770      	bx	lr

00019de0 <get_gpio_interrupt_status>:

bool get_gpio_interrupt_status(Gpio_t* gt, uint8_t channel){
	if (gt[channel].active && gt[channel].g_int.active){
   19de0:	232c      	movs	r3, #44	; 0x2c
   19de2:	4359      	muls	r1, r3
   19de4:	1843      	adds	r3, r0, r1
   19de6:	5c40      	ldrb	r0, [r0, r1]
   19de8:	b118      	cbz	r0, 19df2 <get_gpio_interrupt_status+0x12>
   19dea:	7e18      	ldrb	r0, [r3, #24]
   19dec:	b108      	cbz	r0, 19df2 <get_gpio_interrupt_status+0x12>
		return gt[channel].g_int.status;
   19dee:	f893 0020 	ldrb.w	r0, [r3, #32]
	}else{
		return false;
	}
   19df2:	4770      	bx	lr

00019df4 <k_uptime_get_32>:
{
   19df4:	b508      	push	{r3, lr}
   19df6:	f005 fad0 	bl	1f39a <z_impl_k_uptime_ticks>
   19dfa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   19dfe:	fba0 0302 	umull	r0, r3, r0, r2
   19e02:	fb02 3301 	mla	r3, r2, r1, r3
   19e06:	0bc0      	lsrs	r0, r0, #15
}
   19e08:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   19e0c:	bd08      	pop	{r3, pc}

00019e0e <k_uptime_get_32>:
{
   19e0e:	b508      	push	{r3, lr}
   19e10:	f005 fac3 	bl	1f39a <z_impl_k_uptime_ticks>
   19e14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   19e18:	fba0 0302 	umull	r0, r3, r0, r2
   19e1c:	fb02 3301 	mla	r3, r2, r1, r3
   19e20:	0bc0      	lsrs	r0, r0, #15
}
   19e22:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   19e26:	bd08      	pop	{r3, pc}

00019e28 <cbpprintf_external>:
{
   19e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19e2c:	4606      	mov	r6, r0
   19e2e:	460d      	mov	r5, r1
   19e30:	4617      	mov	r7, r2
	if (buf == NULL) {
   19e32:	4698      	mov	r8, r3
   19e34:	b32b      	cbz	r3, 19e82 <cbpprintf_external+0x5a>
	for (i = 0; i < s_nbr; i++) {
   19e36:	f04f 0a00 	mov.w	sl, #0
	args_size = hdr->hdr.desc.len * sizeof(int);
   19e3a:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
   19e3e:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   19e42:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
   19e44:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   19e46:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   19e4a:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   19e4e:	441c      	add	r4, r3
   19e50:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
   19e52:	45ca      	cmp	sl, r9
   19e54:	d309      	bcc.n	19e6a <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
   19e56:	4639      	mov	r1, r7
   19e58:	4630      	mov	r0, r6
   19e5a:	46ac      	mov	ip, r5
   19e5c:	f8d8 2004 	ldr.w	r2, [r8, #4]
   19e60:	f108 0308 	add.w	r3, r8, #8
}
   19e64:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   19e68:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   19e6a:	f814 3b01 	ldrb.w	r3, [r4], #1
	for (i = 0; i < s_nbr; i++) {
   19e6e:	f10a 0a01 	add.w	sl, sl, #1
		s += strlen(s) + 1;
   19e72:	4620      	mov	r0, r4
		*ps = s;
   19e74:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
   19e78:	f001 fcec 	bl	1b854 <strlen>
   19e7c:	3001      	adds	r0, #1
   19e7e:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   19e80:	e7e7      	b.n	19e52 <cbpprintf_external+0x2a>
}
   19e82:	f06f 0015 	mvn.w	r0, #21
   19e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00019e8a <is_ptr>:
{
   19e8a:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
   19e8c:	2500      	movs	r5, #0
{
   19e8e:	4602      	mov	r2, r0
	bool mod = false;
   19e90:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
   19e92:	4614      	mov	r4, r2
   19e94:	f814 3b01 	ldrb.w	r3, [r4], #1
   19e98:	b90b      	cbnz	r3, 19e9e <is_ptr+0x14>
					return false;
   19e9a:	4618      	mov	r0, r3
   19e9c:	e009      	b.n	19eb2 <is_ptr+0x28>
		if (mod) {
   19e9e:	b198      	cbz	r0, 19ec8 <is_ptr+0x3e>
			if (cnt == n) {
   19ea0:	428d      	cmp	r5, r1
   19ea2:	d107      	bne.n	19eb4 <is_ptr+0x2a>
				if (c == 'p') {
   19ea4:	2b70      	cmp	r3, #112	; 0x70
   19ea6:	d004      	beq.n	19eb2 <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
   19ea8:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
   19eac:	2a3a      	cmp	r2, #58	; 0x3a
   19eae:	d80b      	bhi.n	19ec8 <is_ptr+0x3e>
					return false;
   19eb0:	2000      	movs	r0, #0
}
   19eb2:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
   19eb4:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
   19eb8:	2e3a      	cmp	r6, #58	; 0x3a
   19eba:	d805      	bhi.n	19ec8 <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
   19ebc:	7853      	ldrb	r3, [r2, #1]
				cnt++;
   19ebe:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
   19ec0:	1c94      	adds	r4, r2, #2
   19ec2:	2b00      	cmp	r3, #0
   19ec4:	d0e9      	beq.n	19e9a <is_ptr+0x10>
   19ec6:	2000      	movs	r0, #0
		if (c == '%') {
   19ec8:	2b25      	cmp	r3, #37	; 0x25
	while ((c = *fmt++) != '\0') {
   19eca:	4622      	mov	r2, r4
			mod = !mod;
   19ecc:	bf08      	it	eq
   19ece:	f080 0001 	eoreq.w	r0, r0, #1
   19ed2:	e7de      	b.n	19e92 <is_ptr+0x8>

00019ed4 <arch_printk_char_out>:
}
   19ed4:	2000      	movs	r0, #0
   19ed6:	4770      	bx	lr

00019ed8 <str_out>:
{
   19ed8:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   19eda:	688a      	ldr	r2, [r1, #8]
   19edc:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   19ede:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   19ee0:	b114      	cbz	r4, 19ee8 <str_out+0x10>
   19ee2:	684b      	ldr	r3, [r1, #4]
   19ee4:	4293      	cmp	r3, r2
   19ee6:	dc01      	bgt.n	19eec <str_out+0x14>
		ctx->count++;
   19ee8:	608d      	str	r5, [r1, #8]
}
   19eea:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   19eec:	3b01      	subs	r3, #1
   19eee:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   19ef0:	bf08      	it	eq
   19ef2:	2200      	moveq	r2, #0
   19ef4:	608d      	str	r5, [r1, #8]
   19ef6:	bf0c      	ite	eq
   19ef8:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   19efa:	54a0      	strbne	r0, [r4, r2]
   19efc:	e7f5      	b.n	19eea <str_out+0x12>

00019efe <printk>:
{
   19efe:	b40f      	push	{r0, r1, r2, r3}
   19f00:	b507      	push	{r0, r1, r2, lr}
   19f02:	a904      	add	r1, sp, #16
   19f04:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   19f08:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   19f0a:	f7f0 f831 	bl	9f70 <vprintk>
}
   19f0e:	b003      	add	sp, #12
   19f10:	f85d eb04 	ldr.w	lr, [sp], #4
   19f14:	b004      	add	sp, #16
   19f16:	4770      	bx	lr

00019f18 <snprintk>:
{
   19f18:	b40c      	push	{r2, r3}
   19f1a:	b507      	push	{r0, r1, r2, lr}
   19f1c:	ab04      	add	r3, sp, #16
   19f1e:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   19f22:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   19f24:	f7f0 f832 	bl	9f8c <vsnprintk>
}
   19f28:	b003      	add	sp, #12
   19f2a:	f85d eb04 	ldr.w	lr, [sp], #4
   19f2e:	b002      	add	sp, #8
   19f30:	4770      	bx	lr

00019f32 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   19f32:	4604      	mov	r4, r0
   19f34:	b508      	push	{r3, lr}
   19f36:	4608      	mov	r0, r1
   19f38:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   19f3a:	461a      	mov	r2, r3
   19f3c:	47a0      	blx	r4
	return z_impl_z_current_get();
   19f3e:	f7ff fbb7 	bl	196b0 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   19f42:	f7f3 fa9d 	bl	d480 <z_impl_k_thread_abort>

00019f46 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   19f46:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   19f4a:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   19f4c:	0840      	lsrs	r0, r0, #1
   19f4e:	4770      	bx	lr

00019f50 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   19f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19f52:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   19f54:	f7ff fff7 	bl	19f46 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   19f58:	fab0 f080 	clz	r0, r0
   19f5c:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   19f60:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   19f64:	f8dc 6010 	ldr.w	r6, [ip, #16]
	void *cmem = &buf[c];
   19f68:	00ca      	lsls	r2, r1, #3
		((uint16_t *)cmem)[f] = val;
   19f6a:	1d17      	adds	r7, r2, #4
{
   19f6c:	460c      	mov	r4, r1
   19f6e:	3206      	adds	r2, #6
   19f70:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   19f72:	b956      	cbnz	r6, 19f8a <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   19f74:	2101      	movs	r1, #1
   19f76:	fa01 f000 	lsl.w	r0, r1, r0
   19f7a:	68d9      	ldr	r1, [r3, #12]
   19f7c:	4301      	orrs	r1, r0
   19f7e:	60d9      	str	r1, [r3, #12]
		b->next = c;
   19f80:	f8cc 4010 	str.w	r4, [ip, #16]
   19f84:	53dd      	strh	r5, [r3, r7]
   19f86:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   19f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   19f8a:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   19f8c:	3104      	adds	r1, #4
   19f8e:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   19f90:	53d8      	strh	r0, [r3, r7]
   19f92:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   19f96:	529e      	strh	r6, [r3, r2]
   19f98:	80c5      	strh	r5, [r0, #6]
   19f9a:	525d      	strh	r5, [r3, r1]
   19f9c:	e7f4      	b.n	19f88 <free_list_add+0x38>

00019f9e <free_list_remove_bidx>:
{
   19f9e:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   19fa0:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   19fa4:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   19fa6:	4299      	cmp	r1, r3
   19fa8:	f102 0104 	add.w	r1, r2, #4
   19fac:	d10a      	bne.n	19fc4 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   19fae:	2301      	movs	r3, #1
   19fb0:	fa03 f202 	lsl.w	r2, r3, r2
   19fb4:	68c3      	ldr	r3, [r0, #12]
   19fb6:	ea23 0302 	bic.w	r3, r3, r2
   19fba:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   19fbc:	2300      	movs	r3, #0
   19fbe:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   19fc2:	bd10      	pop	{r4, pc}
   19fc4:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   19fc6:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   19fca:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   19fce:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   19fd2:	80cb      	strh	r3, [r1, #6]
   19fd4:	8082      	strh	r2, [r0, #4]
}
   19fd6:	e7f4      	b.n	19fc2 <free_list_remove_bidx+0x24>

00019fd8 <free_list_remove>:
{
   19fd8:	b508      	push	{r3, lr}
   19fda:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   19fdc:	f7ff ffb3 	bl	19f46 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   19fe0:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   19fe4:	4618      	mov	r0, r3
}
   19fe6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   19fea:	f1c2 021f 	rsb	r2, r2, #31
   19fee:	f7ff bfd6 	b.w	19f9e <free_list_remove_bidx>

00019ff2 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   19ff2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19ff6:	fab1 f581 	clz	r5, r1
   19ffa:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   19ffe:	eb00 0889 	add.w	r8, r0, r9, lsl #2
   1a002:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   1a006:	4603      	mov	r3, r0
   1a008:	460e      	mov	r6, r1
	if (b->next) {
   1a00a:	b1c2      	cbz	r2, 1a03e <alloc_chunk+0x4c>
   1a00c:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   1a00e:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   1a012:	4618      	mov	r0, r3
   1a014:	4621      	mov	r1, r4
   1a016:	f7ff ff96 	bl	19f46 <chunk_size>
   1a01a:	42b0      	cmp	r0, r6
   1a01c:	d306      	bcc.n	1a02c <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   1a01e:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   1a020:	4618      	mov	r0, r3
   1a022:	f7ff ffbc 	bl	19f9e <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   1a026:	4620      	mov	r0, r4
   1a028:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   1a02c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   1a030:	88e0      	ldrh	r0, [r4, #6]
		} while (--i && b->next != first);
   1a032:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   1a034:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   1a038:	d001      	beq.n	1a03e <alloc_chunk+0x4c>
   1a03a:	4282      	cmp	r2, r0
   1a03c:	d1e7      	bne.n	1a00e <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   1a03e:	f04f 34ff 	mov.w	r4, #4294967295
   1a042:	f1c5 0220 	rsb	r2, r5, #32
   1a046:	4094      	lsls	r4, r2
   1a048:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   1a04a:	4014      	ands	r4, r2
   1a04c:	d0eb      	beq.n	1a026 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   1a04e:	fa94 f2a4 	rbit	r2, r4
   1a052:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1a056:	1d11      	adds	r1, r2, #4
   1a058:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   1a05c:	4621      	mov	r1, r4
   1a05e:	e7df      	b.n	1a020 <alloc_chunk+0x2e>

0001a060 <merge_chunks>:
{
   1a060:	b538      	push	{r3, r4, r5, lr}
   1a062:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1a064:	f7ff ff6f 	bl	19f46 <chunk_size>
{
   1a068:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1a06a:	4604      	mov	r4, r0
   1a06c:	4611      	mov	r1, r2
   1a06e:	4618      	mov	r0, r3
   1a070:	f7ff ff69 	bl	19f46 <chunk_size>
   1a074:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1a076:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   1a078:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   1a07c:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   1a07e:	4618      	mov	r0, r3
   1a080:	f7ff ff61 	bl	19f46 <chunk_size>
	void *cmem = &buf[c];
   1a084:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   1a086:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   1a08a:	bd38      	pop	{r3, r4, r5, pc}

0001a08c <split_chunks>:
{
   1a08c:	b538      	push	{r3, r4, r5, lr}
   1a08e:	460c      	mov	r4, r1
   1a090:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   1a092:	f7ff ff58 	bl	19f46 <chunk_size>
	chunksz_t rsz = sz0 - lsz;
   1a096:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   1a098:	1a51      	subs	r1, r2, r1
	chunksz_t rsz = sz0 - lsz;
   1a09a:	4405      	add	r5, r0
   1a09c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1a0a0:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   1a0a2:	8060      	strh	r0, [r4, #2]
   1a0a4:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1a0a8:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   1a0aa:	8044      	strh	r4, [r0, #2]
   1a0ac:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   1a0b0:	4618      	mov	r0, r3
   1a0b2:	4611      	mov	r1, r2
   1a0b4:	f7ff ff47 	bl	19f46 <chunk_size>
	void *cmem = &buf[c];
   1a0b8:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   1a0ba:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   1a0be:	bd38      	pop	{r3, r4, r5, pc}

0001a0c0 <free_chunk>:
{
   1a0c0:	b538      	push	{r3, r4, r5, lr}
   1a0c2:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   1a0c4:	f7ff ff3f 	bl	19f46 <chunk_size>
   1a0c8:	460c      	mov	r4, r1
   1a0ca:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   1a0cc:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1a0d0:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   1a0d2:	07da      	lsls	r2, r3, #31
   1a0d4:	d40a      	bmi.n	1a0ec <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   1a0d6:	4628      	mov	r0, r5
   1a0d8:	f7ff ff7e 	bl	19fd8 <free_list_remove>
	return c + chunk_size(h, c);
   1a0dc:	4621      	mov	r1, r4
   1a0de:	4628      	mov	r0, r5
   1a0e0:	f7ff ff31 	bl	19f46 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1a0e4:	1822      	adds	r2, r4, r0
   1a0e6:	4628      	mov	r0, r5
   1a0e8:	f7ff ffba 	bl	1a060 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   1a0ec:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   1a0f0:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   1a0f2:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1a0f6:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   1a0f8:	07db      	lsls	r3, r3, #31
   1a0fa:	d40c      	bmi.n	1a116 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   1a0fc:	4628      	mov	r0, r5
   1a0fe:	f7ff ff6b 	bl	19fd8 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   1a102:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   1a106:	4622      	mov	r2, r4
   1a108:	1a61      	subs	r1, r4, r1
   1a10a:	4628      	mov	r0, r5
   1a10c:	f7ff ffa8 	bl	1a060 <merge_chunks>
   1a110:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   1a114:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   1a116:	4621      	mov	r1, r4
   1a118:	4628      	mov	r0, r5
}
   1a11a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   1a11e:	f7ff bf17 	b.w	19f50 <free_list_add>

0001a122 <sys_heap_free>:
	if (mem == NULL) {
   1a122:	b161      	cbz	r1, 1a13e <sys_heap_free+0x1c>
   1a124:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1a126:	3904      	subs	r1, #4
   1a128:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   1a12a:	f021 0307 	bic.w	r3, r1, #7
   1a12e:	4403      	add	r3, r0
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1a130:	885a      	ldrh	r2, [r3, #2]
	free_chunk(h, c);
   1a132:	08c9      	lsrs	r1, r1, #3
   1a134:	f022 0201 	bic.w	r2, r2, #1
   1a138:	805a      	strh	r2, [r3, #2]
   1a13a:	f7ff bfc1 	b.w	1a0c0 <free_chunk>
}
   1a13e:	4770      	bx	lr

0001a140 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   1a140:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   1a142:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   1a144:	b909      	cbnz	r1, 1a14a <sys_heap_alloc+0xa>
		return NULL;
   1a146:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   1a148:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   1a14a:	68ab      	ldr	r3, [r5, #8]
   1a14c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1a150:	d9f9      	bls.n	1a146 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1a152:	310b      	adds	r1, #11
   1a154:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1a156:	4621      	mov	r1, r4
   1a158:	4628      	mov	r0, r5
   1a15a:	f7ff ff4a 	bl	19ff2 <alloc_chunk>
	if (c == 0U) {
   1a15e:	4606      	mov	r6, r0
   1a160:	2800      	cmp	r0, #0
   1a162:	d0f0      	beq.n	1a146 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   1a164:	4601      	mov	r1, r0
   1a166:	4628      	mov	r0, r5
   1a168:	f7ff feed 	bl	19f46 <chunk_size>
   1a16c:	42a0      	cmp	r0, r4
   1a16e:	d907      	bls.n	1a180 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   1a170:	4628      	mov	r0, r5
   1a172:	1932      	adds	r2, r6, r4
   1a174:	f7ff ff8a 	bl	1a08c <split_chunks>
		free_list_add(h, c + chunk_sz);
   1a178:	4611      	mov	r1, r2
   1a17a:	4628      	mov	r0, r5
   1a17c:	f7ff fee8 	bl	19f50 <free_list_add>
	void *cmem = &buf[c];
   1a180:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1a184:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1a186:	8853      	ldrh	r3, [r2, #2]
   1a188:	3004      	adds	r0, #4
   1a18a:	f043 0301 	orr.w	r3, r3, #1
   1a18e:	8053      	strh	r3, [r2, #2]
	return mem;
   1a190:	e7da      	b.n	1a148 <sys_heap_alloc+0x8>

0001a192 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   1a192:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a196:	f101 39ff 	add.w	r9, r1, #4294967295
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
   1a19a:	ea19 0901 	ands.w	r9, r9, r1
{
   1a19e:	460f      	mov	r7, r1
   1a1a0:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
   1a1a2:	6806      	ldr	r6, [r0, #0]
	if (align != rew) {
   1a1a4:	d00c      	beq.n	1a1c0 <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
   1a1a6:	424b      	negs	r3, r1
   1a1a8:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   1a1aa:	2b04      	cmp	r3, #4
   1a1ac:	461a      	mov	r2, r3
   1a1ae:	464f      	mov	r7, r9
   1a1b0:	bf28      	it	cs
   1a1b2:	2204      	movcs	r2, #4
	rew = align & -align;
   1a1b4:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   1a1b6:	b964      	cbnz	r4, 1a1d2 <sys_heap_aligned_alloc+0x40>
		return NULL;
   1a1b8:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   1a1ba:	4628      	mov	r0, r5
   1a1bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   1a1c0:	2904      	cmp	r1, #4
   1a1c2:	d804      	bhi.n	1a1ce <sys_heap_aligned_alloc+0x3c>
}
   1a1c4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   1a1c8:	4611      	mov	r1, r2
   1a1ca:	f7ff bfb9 	b.w	1a140 <sys_heap_alloc>
		gap = chunk_header_bytes(h);
   1a1ce:	2204      	movs	r2, #4
   1a1d0:	e7f1      	b.n	1a1b6 <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
   1a1d2:	68b3      	ldr	r3, [r6, #8]
   1a1d4:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   1a1d8:	d9ee      	bls.n	1a1b8 <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1a1da:	f104 010b 	add.w	r1, r4, #11
   1a1de:	4439      	add	r1, r7
   1a1e0:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   1a1e2:	4630      	mov	r0, r6
   1a1e4:	08c9      	lsrs	r1, r1, #3
   1a1e6:	f7ff ff04 	bl	19ff2 <alloc_chunk>
	if (c0 == 0) {
   1a1ea:	4680      	mov	r8, r0
   1a1ec:	2800      	cmp	r0, #0
   1a1ee:	d0e3      	beq.n	1a1b8 <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   1a1f0:	f109 0504 	add.w	r5, r9, #4
   1a1f4:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   1a1f8:	1e7b      	subs	r3, r7, #1
   1a1fa:	4435      	add	r5, r6
   1a1fc:	441d      	add	r5, r3
   1a1fe:	427f      	negs	r7, r7
   1a200:	403d      	ands	r5, r7
   1a202:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1a206:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1a208:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1a20a:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1a20c:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1a20e:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   1a212:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   1a214:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1a218:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   1a21c:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   1a220:	d208      	bcs.n	1a234 <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
   1a222:	4601      	mov	r1, r0
   1a224:	463a      	mov	r2, r7
   1a226:	4630      	mov	r0, r6
   1a228:	f7ff ff30 	bl	1a08c <split_chunks>
		free_list_add(h, c0);
   1a22c:	4641      	mov	r1, r8
   1a22e:	4630      	mov	r0, r6
   1a230:	f7ff fe8e 	bl	19f50 <free_list_add>
	return c + chunk_size(h, c);
   1a234:	4639      	mov	r1, r7
   1a236:	4630      	mov	r0, r6
   1a238:	f7ff fe85 	bl	19f46 <chunk_size>
   1a23c:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   1a23e:	4284      	cmp	r4, r0
   1a240:	d207      	bcs.n	1a252 <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
   1a242:	4630      	mov	r0, r6
   1a244:	4622      	mov	r2, r4
   1a246:	f7ff ff21 	bl	1a08c <split_chunks>
		free_list_add(h, c_end);
   1a24a:	4621      	mov	r1, r4
   1a24c:	4630      	mov	r0, r6
   1a24e:	f7ff fe7f 	bl	19f50 <free_list_add>
	void *cmem = &buf[c];
   1a252:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1a256:	8873      	ldrh	r3, [r6, #2]
   1a258:	f043 0301 	orr.w	r3, r3, #1
   1a25c:	8073      	strh	r3, [r6, #2]
   1a25e:	e7ac      	b.n	1a1ba <sys_heap_aligned_alloc+0x28>

0001a260 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   1a260:	b4f0      	push	{r4, r5, r6, r7}
   1a262:	4604      	mov	r4, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   1a264:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1a266:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1a268:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1a26a:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1a26e:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1a272:	1a0e      	subs	r6, r1, r0
   1a274:	08f3      	lsrs	r3, r6, #3
	return 31 - __builtin_clz(usable_sz);
   1a276:	fab3 f283 	clz	r2, r3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   1a27a:	6020      	str	r0, [r4, #0]
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   1a27c:	2700      	movs	r7, #0
   1a27e:	4604      	mov	r4, r0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1a280:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
   1a284:	00ad      	lsls	r5, r5, #2
	h->end_chunk = heap_sz;
   1a286:	6083      	str	r3, [r0, #8]
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1a288:	3507      	adds	r5, #7
	h->avail_buckets = 0;
   1a28a:	f844 7f0c 	str.w	r7, [r4, #12]!
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1a28e:	f1c2 0220 	rsb	r2, r2, #32
   1a292:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   1a294:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
   1a298:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
   1a29c:	4294      	cmp	r4, r2
   1a29e:	d1fb      	bne.n	1a298 <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1a2a0:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1a2a2:	f042 0201 	orr.w	r2, r2, #1
   1a2a6:	8042      	strh	r2, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1a2a8:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1a2aa:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
   1a2ac:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   1a2b0:	8007      	strh	r7, [r0, #0]
   1a2b2:	8065      	strh	r5, [r4, #2]
   1a2b4:	1984      	adds	r4, r0, r6
   1a2b6:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
   1a2ba:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
   1a2be:	8067      	strh	r7, [r4, #2]
   1a2c0:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1a2c2:	885a      	ldrh	r2, [r3, #2]
   1a2c4:	f042 0201 	orr.w	r2, r2, #1
   1a2c8:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   1a2ca:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   1a2cc:	f7ff be40 	b.w	19f50 <free_list_add>

0001a2d0 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1a2d0:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   1a2d2:	f013 0307 	ands.w	r3, r3, #7
   1a2d6:	d105      	bne.n	1a2e4 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1a2d8:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   1a2da:	2b00      	cmp	r3, #0
   1a2dc:	bf0c      	ite	eq
   1a2de:	2000      	moveq	r0, #0
   1a2e0:	2003      	movne	r0, #3
   1a2e2:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1a2e4:	2b02      	cmp	r3, #2
   1a2e6:	d105      	bne.n	1a2f4 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1a2e8:	8b40      	ldrh	r0, [r0, #26]
   1a2ea:	fab0 f080 	clz	r0, r0
   1a2ee:	0940      	lsrs	r0, r0, #5
   1a2f0:	0080      	lsls	r0, r0, #2
   1a2f2:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1a2f4:	2b01      	cmp	r3, #1
   1a2f6:	d105      	bne.n	1a304 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1a2f8:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   1a2fa:	2b00      	cmp	r3, #0
   1a2fc:	bf0c      	ite	eq
   1a2fe:	2000      	moveq	r0, #0
   1a300:	2005      	movne	r0, #5
   1a302:	4770      	bx	lr
	int evt = EVT_NOP;
   1a304:	2000      	movs	r0, #0
}
   1a306:	4770      	bx	lr

0001a308 <validate_args>:
{
   1a308:	b510      	push	{r4, lr}
   1a30a:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1a30c:	b100      	cbz	r0, 1a310 <validate_args+0x8>
   1a30e:	b911      	cbnz	r1, 1a316 <validate_args+0xe>
		return -EINVAL;
   1a310:	f06f 0015 	mvn.w	r0, #21
}
   1a314:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   1a316:	1d08      	adds	r0, r1, #4
   1a318:	f000 f895 	bl	1a446 <sys_notify_validate>
	if ((rv == 0)
   1a31c:	2800      	cmp	r0, #0
   1a31e:	d1f9      	bne.n	1a314 <validate_args+0xc>
	    && ((cli->notify.flags
   1a320:	68a3      	ldr	r3, [r4, #8]
   1a322:	2b03      	cmp	r3, #3
   1a324:	d9f6      	bls.n	1a314 <validate_args+0xc>
   1a326:	e7f3      	b.n	1a310 <validate_args+0x8>

0001a328 <notify_one>:
{
   1a328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a32c:	460d      	mov	r5, r1
   1a32e:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1a330:	4619      	mov	r1, r3
   1a332:	1d28      	adds	r0, r5, #4
{
   1a334:	4690      	mov	r8, r2
   1a336:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1a338:	f000 f899 	bl	1a46e <sys_notify_finalize>
	if (cb) {
   1a33c:	4604      	mov	r4, r0
   1a33e:	b138      	cbz	r0, 1a350 <notify_one+0x28>
		cb(mgr, cli, state, res);
   1a340:	4633      	mov	r3, r6
   1a342:	4642      	mov	r2, r8
   1a344:	4629      	mov	r1, r5
   1a346:	4638      	mov	r0, r7
   1a348:	46a4      	mov	ip, r4
}
   1a34a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1a34e:	4760      	bx	ip
}
   1a350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001a354 <transition_complete>:
{
   1a354:	b410      	push	{r4}
	__asm__ volatile(
   1a356:	f04f 0420 	mov.w	r4, #32
   1a35a:	f3ef 8211 	mrs	r2, BASEPRI
   1a35e:	f384 8812 	msr	BASEPRI_MAX, r4
   1a362:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   1a366:	6141      	str	r1, [r0, #20]
}
   1a368:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   1a36a:	2101      	movs	r1, #1
   1a36c:	f7ef be24 	b.w	9fb8 <process_event>

0001a370 <onoff_manager_init>:
{
   1a370:	b538      	push	{r3, r4, r5, lr}
   1a372:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1a374:	4605      	mov	r5, r0
   1a376:	b158      	cbz	r0, 1a390 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1a378:	b151      	cbz	r1, 1a390 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1a37a:	680b      	ldr	r3, [r1, #0]
   1a37c:	b143      	cbz	r3, 1a390 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1a37e:	684b      	ldr	r3, [r1, #4]
   1a380:	b133      	cbz	r3, 1a390 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1a382:	221c      	movs	r2, #28
   1a384:	2100      	movs	r1, #0
   1a386:	f001 faaf 	bl	1b8e8 <memset>
	return 0;
   1a38a:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1a38c:	612c      	str	r4, [r5, #16]
}
   1a38e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1a390:	f06f 0015 	mvn.w	r0, #21
   1a394:	e7fb      	b.n	1a38e <onoff_manager_init+0x1e>

0001a396 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1a396:	b570      	push	{r4, r5, r6, lr}
   1a398:	4605      	mov	r5, r0
   1a39a:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1a39c:	f7ff ffb4 	bl	1a308 <validate_args>

	if (rv < 0) {
   1a3a0:	1e04      	subs	r4, r0, #0
   1a3a2:	db15      	blt.n	1a3d0 <onoff_request+0x3a>
   1a3a4:	f04f 0320 	mov.w	r3, #32
   1a3a8:	f3ef 8211 	mrs	r2, BASEPRI
   1a3ac:	f383 8812 	msr	BASEPRI_MAX, r3
   1a3b0:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1a3b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1a3b8:	8b6b      	ldrh	r3, [r5, #26]
   1a3ba:	8b2c      	ldrh	r4, [r5, #24]
   1a3bc:	428b      	cmp	r3, r1
   1a3be:	f004 0407 	and.w	r4, r4, #7
   1a3c2:	d107      	bne.n	1a3d4 <onoff_request+0x3e>
	__asm__ volatile(
   1a3c4:	f382 8811 	msr	BASEPRI, r2
   1a3c8:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
   1a3cc:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   1a3d0:	4620      	mov	r0, r4
   1a3d2:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   1a3d4:	2c02      	cmp	r4, #2
   1a3d6:	d10c      	bne.n	1a3f2 <onoff_request+0x5c>
		mgr->refs += 1U;
   1a3d8:	3301      	adds	r3, #1
   1a3da:	836b      	strh	r3, [r5, #26]
   1a3dc:	f382 8811 	msr	BASEPRI, r2
   1a3e0:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
   1a3e4:	2300      	movs	r3, #0
   1a3e6:	4622      	mov	r2, r4
   1a3e8:	4631      	mov	r1, r6
   1a3ea:	4628      	mov	r0, r5
   1a3ec:	f7ff ff9c 	bl	1a328 <notify_one>
   1a3f0:	e7ee      	b.n	1a3d0 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
   1a3f2:	2c06      	cmp	r4, #6
   1a3f4:	d814      	bhi.n	1a420 <onoff_request+0x8a>
   1a3f6:	e8df f004 	tbb	[pc, r4]
   1a3fa:	1304      	.short	0x1304
   1a3fc:	1a041313 	.word	0x1a041313
   1a400:	04          	.byte	0x04
   1a401:	00          	.byte	0x00
	parent->next = child;
   1a402:	2300      	movs	r3, #0
   1a404:	6033      	str	r3, [r6, #0]
	return list->tail;
   1a406:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   1a408:	b93b      	cbnz	r3, 1a41a <onoff_request+0x84>
	list->head = node;
   1a40a:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
   1a40e:	b9ac      	cbnz	r4, 1a43c <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
   1a410:	2102      	movs	r1, #2
   1a412:	4628      	mov	r0, r5
   1a414:	f7ef fdd0 	bl	9fb8 <process_event>
   1a418:	e7da      	b.n	1a3d0 <onoff_request+0x3a>
	parent->next = child;
   1a41a:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1a41c:	606e      	str	r6, [r5, #4]
}
   1a41e:	e7f6      	b.n	1a40e <onoff_request+0x78>
   1a420:	f382 8811 	msr	BASEPRI, r2
   1a424:	f3bf 8f6f 	isb	sy
		rv = -EIO;
   1a428:	f06f 0404 	mvn.w	r4, #4
   1a42c:	e7d0      	b.n	1a3d0 <onoff_request+0x3a>
   1a42e:	f382 8811 	msr	BASEPRI, r2
   1a432:	f3bf 8f6f 	isb	sy
   1a436:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1a43a:	e7c9      	b.n	1a3d0 <onoff_request+0x3a>
   1a43c:	f382 8811 	msr	BASEPRI, r2
   1a440:	f3bf 8f6f 	isb	sy
		if (notify) {
   1a444:	e7c4      	b.n	1a3d0 <onoff_request+0x3a>

0001a446 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   1a446:	4603      	mov	r3, r0
   1a448:	b140      	cbz	r0, 1a45c <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1a44a:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1a44c:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   1a450:	2a02      	cmp	r2, #2
   1a452:	d006      	beq.n	1a462 <sys_notify_validate+0x1c>
   1a454:	2a03      	cmp	r2, #3
   1a456:	d004      	beq.n	1a462 <sys_notify_validate+0x1c>
   1a458:	2a01      	cmp	r2, #1
   1a45a:	d005      	beq.n	1a468 <sys_notify_validate+0x22>
   1a45c:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   1a460:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1a462:	681a      	ldr	r2, [r3, #0]
   1a464:	2a00      	cmp	r2, #0
   1a466:	d0f9      	beq.n	1a45c <sys_notify_validate+0x16>
		notify->result = 0;
   1a468:	2000      	movs	r0, #0
   1a46a:	6098      	str	r0, [r3, #8]
   1a46c:	4770      	bx	lr

0001a46e <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   1a46e:	b510      	push	{r4, lr}
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1a470:	6842      	ldr	r2, [r0, #4]
   1a472:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
   1a474:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   1a478:	2a02      	cmp	r2, #2
   1a47a:	f04f 0400 	mov.w	r4, #0
	notify->result = res;
   1a47e:	6081      	str	r1, [r0, #8]
	switch (method) {
   1a480:	d007      	beq.n	1a492 <sys_notify_finalize+0x24>
   1a482:	2a03      	cmp	r2, #3
   1a484:	d002      	beq.n	1a48c <sys_notify_finalize+0x1e>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1a486:	605c      	str	r4, [r3, #4]
	sys_notify_generic_callback rv = NULL;
   1a488:	2000      	movs	r0, #0
   1a48a:	e001      	b.n	1a490 <sys_notify_finalize+0x22>
		rv = notify->method.callback;
   1a48c:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1a48e:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1a490:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   1a492:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1a494:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   1a496:	2800      	cmp	r0, #0
   1a498:	d0f6      	beq.n	1a488 <sys_notify_finalize+0x1a>
	return z_impl_k_poll_signal_raise(sig, result);
   1a49a:	f7ff fbef 	bl	19c7c <z_impl_k_poll_signal_raise>
   1a49e:	e7f3      	b.n	1a488 <sys_notify_finalize+0x1a>

0001a4a0 <_ldiv5>:
	uint32_t v_lo = *v;
   1a4a0:	e9d0 2100 	ldrd	r2, r1, [r0]
{
   1a4a4:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
   1a4a6:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
   1a4aa:	fba2 2403 	umull	r2, r4, r2, r3
   1a4ae:	18d5      	adds	r5, r2, r3
   1a4b0:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
   1a4b4:	fba1 1303 	umull	r1, r3, r1, r3
   1a4b8:	1852      	adds	r2, r2, r1
   1a4ba:	eb44 0403 	adc.w	r4, r4, r3
   1a4be:	1952      	adds	r2, r2, r5
   1a4c0:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
   1a4c4:	1889      	adds	r1, r1, r2
   1a4c6:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
   1a4ca:	e9c0 1300 	strd	r1, r3, [r0]
}
   1a4ce:	bd30      	pop	{r4, r5, pc}

0001a4d0 <_get_digit>:
{
   1a4d0:	b510      	push	{r4, lr}
	if (*digit_count > 0) {
   1a4d2:	680a      	ldr	r2, [r1, #0]
{
   1a4d4:	4603      	mov	r3, r0
	if (*digit_count > 0) {
   1a4d6:	2a00      	cmp	r2, #0
   1a4d8:	dd0f      	ble.n	1a4fa <_get_digit+0x2a>
		--*digit_count;
   1a4da:	3a01      	subs	r2, #1
   1a4dc:	600a      	str	r2, [r1, #0]
		*fr *= 10U;
   1a4de:	6844      	ldr	r4, [r0, #4]
   1a4e0:	200a      	movs	r0, #10
   1a4e2:	681a      	ldr	r2, [r3, #0]
   1a4e4:	fba2 1200 	umull	r1, r2, r2, r0
   1a4e8:	fb00 2204 	mla	r2, r0, r4, r2
		rval = ((*fr >> 60) & 0xF) + '0';
   1a4ec:	0f10      	lsrs	r0, r2, #28
		*fr &= (BIT64(60) - 1U);
   1a4ee:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
   1a4f2:	e9c3 1200 	strd	r1, r2, [r3]
		rval = ((*fr >> 60) & 0xF) + '0';
   1a4f6:	3030      	adds	r0, #48	; 0x30
}
   1a4f8:	bd10      	pop	{r4, pc}
		rval = '0';
   1a4fa:	2030      	movs	r0, #48	; 0x30
   1a4fc:	e7fc      	b.n	1a4f8 <_get_digit+0x28>

0001a4fe <encode_uint>:
{
   1a4fe:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a502:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   1a504:	78d3      	ldrb	r3, [r2, #3]
{
   1a506:	4680      	mov	r8, r0
	switch (specifier) {
   1a508:	2b6f      	cmp	r3, #111	; 0x6f
{
   1a50a:	460f      	mov	r7, r1
   1a50c:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1a50e:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   1a512:	d029      	beq.n	1a568 <encode_uint+0x6a>
   1a514:	d824      	bhi.n	1a560 <encode_uint+0x62>
		return 10;
   1a516:	2b58      	cmp	r3, #88	; 0x58
   1a518:	bf0c      	ite	eq
   1a51a:	2610      	moveq	r6, #16
   1a51c:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
   1a51e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   1a522:	4632      	mov	r2, r6
   1a524:	2300      	movs	r3, #0
   1a526:	4640      	mov	r0, r8
   1a528:	4639      	mov	r1, r7
   1a52a:	f7ee fac5 	bl	8ab8 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1a52e:	2a09      	cmp	r2, #9
   1a530:	b2d4      	uxtb	r4, r2
   1a532:	d81e      	bhi.n	1a572 <encode_uint+0x74>
   1a534:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   1a536:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1a538:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   1a53a:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1a53e:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   1a542:	d301      	bcc.n	1a548 <encode_uint+0x4a>
   1a544:	45d1      	cmp	r9, sl
   1a546:	d811      	bhi.n	1a56c <encode_uint+0x6e>
	if (conv->flag_hash) {
   1a548:	782b      	ldrb	r3, [r5, #0]
   1a54a:	069b      	lsls	r3, r3, #26
   1a54c:	d505      	bpl.n	1a55a <encode_uint+0x5c>
		if (radix == 8) {
   1a54e:	2e08      	cmp	r6, #8
   1a550:	d115      	bne.n	1a57e <encode_uint+0x80>
			conv->altform_0 = true;
   1a552:	78ab      	ldrb	r3, [r5, #2]
   1a554:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   1a558:	70ab      	strb	r3, [r5, #2]
}
   1a55a:	4648      	mov	r0, r9
   1a55c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   1a560:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
   1a564:	2b70      	cmp	r3, #112	; 0x70
   1a566:	e7d7      	b.n	1a518 <encode_uint+0x1a>
	switch (specifier) {
   1a568:	2608      	movs	r6, #8
   1a56a:	e7d8      	b.n	1a51e <encode_uint+0x20>
		value /= radix;
   1a56c:	4680      	mov	r8, r0
   1a56e:	460f      	mov	r7, r1
   1a570:	e7d7      	b.n	1a522 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1a572:	f1bb 0f19 	cmp.w	fp, #25
   1a576:	bf94      	ite	ls
   1a578:	3437      	addls	r4, #55	; 0x37
   1a57a:	3457      	addhi	r4, #87	; 0x57
   1a57c:	e7db      	b.n	1a536 <encode_uint+0x38>
		} else if (radix == 16) {
   1a57e:	2e10      	cmp	r6, #16
   1a580:	d1eb      	bne.n	1a55a <encode_uint+0x5c>
			conv->altform_0c = true;
   1a582:	78ab      	ldrb	r3, [r5, #2]
   1a584:	f043 0310 	orr.w	r3, r3, #16
   1a588:	e7e6      	b.n	1a558 <encode_uint+0x5a>

0001a58a <outs>:
{
   1a58a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a58e:	4607      	mov	r7, r0
   1a590:	4688      	mov	r8, r1
   1a592:	4615      	mov	r5, r2
   1a594:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1a596:	4614      	mov	r4, r2
   1a598:	42b4      	cmp	r4, r6
   1a59a:	d305      	bcc.n	1a5a8 <outs+0x1e>
   1a59c:	b10e      	cbz	r6, 1a5a2 <outs+0x18>
	return (int)count;
   1a59e:	1b60      	subs	r0, r4, r5
   1a5a0:	e008      	b.n	1a5b4 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1a5a2:	7823      	ldrb	r3, [r4, #0]
   1a5a4:	2b00      	cmp	r3, #0
   1a5a6:	d0fa      	beq.n	1a59e <outs+0x14>
		int rc = out((int)*sp++, ctx);
   1a5a8:	4641      	mov	r1, r8
   1a5aa:	f814 0b01 	ldrb.w	r0, [r4], #1
   1a5ae:	47b8      	blx	r7
		if (rc < 0) {
   1a5b0:	2800      	cmp	r0, #0
   1a5b2:	daf1      	bge.n	1a598 <outs+0xe>
}
   1a5b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001a5b8 <assert_print>:

	k_panic();
}

void assert_print(const char *fmt, ...)
{
   1a5b8:	b40f      	push	{r0, r1, r2, r3}
   1a5ba:	b507      	push	{r0, r1, r2, lr}
   1a5bc:	a904      	add	r1, sp, #16
   1a5be:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   1a5c2:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   1a5c4:	f7ef fcd4 	bl	9f70 <vprintk>

	va_end(ap);
}
   1a5c8:	b003      	add	sp, #12
   1a5ca:	f85d eb04 	ldr.w	lr, [sp], #4
   1a5ce:	b004      	add	sp, #16
   1a5d0:	4770      	bx	lr

0001a5d2 <free_space>:
	ARG_UNUSED(err);
}

static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   1a5d2:	68c3      	ldr	r3, [r0, #12]
   1a5d4:	6802      	ldr	r2, [r0, #0]
   1a5d6:	4293      	cmp	r3, r2
   1a5d8:	d904      	bls.n	1a5e4 <free_space+0x12>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
   1a5da:	3b01      	subs	r3, #1
   1a5dc:	1a9a      	subs	r2, r3, r2

		return false;
   1a5de:	2000      	movs	r0, #0
	} else if (!buffer->rd_idx) {
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   1a5e0:	600a      	str	r2, [r1, #0]
	}

	*res = buffer->size - buffer->tmp_wr_idx;

	return true;
}
   1a5e2:	4770      	bx	lr
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   1a5e4:	6a00      	ldr	r0, [r0, #32]
	} else if (!buffer->rd_idx) {
   1a5e6:	b913      	cbnz	r3, 1a5ee <free_space+0x1c>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   1a5e8:	3801      	subs	r0, #1
   1a5ea:	1a82      	subs	r2, r0, r2
		return false;
   1a5ec:	e7f7      	b.n	1a5de <free_space+0xc>
	*res = buffer->size - buffer->tmp_wr_idx;
   1a5ee:	1a82      	subs	r2, r0, r2
	return true;
   1a5f0:	2001      	movs	r0, #1
   1a5f2:	e7f5      	b.n	1a5e0 <free_space+0xe>

0001a5f4 <get_usage>:

	return true;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
   1a5f4:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
   1a5f6:	a901      	add	r1, sp, #4
{
   1a5f8:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
   1a5fa:	f7ff ffea 	bl	1a5d2 <free_space>
   1a5fe:	b120      	cbz	r0, 1a60a <get_usage+0x16>
		f += (buffer->rd_idx - 1);
   1a600:	9b01      	ldr	r3, [sp, #4]
   1a602:	68e2      	ldr	r2, [r4, #12]
   1a604:	3b01      	subs	r3, #1
   1a606:	4413      	add	r3, r2
   1a608:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
   1a60a:	6a20      	ldr	r0, [r4, #32]
   1a60c:	9b01      	ldr	r3, [sp, #4]
   1a60e:	1ac0      	subs	r0, r0, r3
}
   1a610:	3801      	subs	r0, #1
   1a612:	b002      	add	sp, #8
   1a614:	bd10      	pop	{r4, pc}

0001a616 <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, uint32_t val)
{
   1a616:	b510      	push	{r4, lr}
   1a618:	4604      	mov	r4, r0
	uint32_t i = idx + val;
   1a61a:	1888      	adds	r0, r1, r2

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   1a61c:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
   1a61e:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   1a620:	07d2      	lsls	r2, r2, #31
   1a622:	d502      	bpl.n	1a62a <idx_inc+0x14>
		return i & (buffer->size - 1);
   1a624:	3b01      	subs	r3, #1
   1a626:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
   1a628:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
   1a62a:	4298      	cmp	r0, r3
   1a62c:	bf28      	it	cs
   1a62e:	1ac0      	subcs	r0, r0, r3
   1a630:	e7fa      	b.n	1a628 <idx_inc+0x12>

0001a632 <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
   1a632:	b538      	push	{r3, r4, r5, lr}
   1a634:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   1a636:	69c2      	ldr	r2, [r0, #28]
	union mpsc_pbuf_generic skip = {
   1a638:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   1a63a:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
   1a63c:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   1a640:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   1a644:	6801      	ldr	r1, [r0, #0]
   1a646:	462a      	mov	r2, r5
{
   1a648:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   1a64a:	f7ff ffe4 	bl	1a616 <idx_inc>
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   1a64e:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   1a650:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   1a652:	462a      	mov	r2, r5
   1a654:	4620      	mov	r0, r4
   1a656:	f7ff ffde 	bl	1a616 <idx_inc>
   1a65a:	6060      	str	r0, [r4, #4]
}
   1a65c:	bd38      	pop	{r3, r4, r5, pc}

0001a65e <max_utilization_update>:
{
   1a65e:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   1a660:	6903      	ldr	r3, [r0, #16]
{
   1a662:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   1a664:	075b      	lsls	r3, r3, #29
   1a666:	d506      	bpl.n	1a676 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   1a668:	6a45      	ldr	r5, [r0, #36]	; 0x24
   1a66a:	f7ff ffc3 	bl	1a5f4 <get_usage>
   1a66e:	4285      	cmp	r5, r0
   1a670:	bf2c      	ite	cs
   1a672:	6265      	strcs	r5, [r4, #36]	; 0x24
   1a674:	6260      	strcc	r0, [r4, #36]	; 0x24
}
   1a676:	bd38      	pop	{r3, r4, r5, pc}

0001a678 <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
   1a678:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a67c:	461f      	mov	r7, r3
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
   1a67e:	2300      	movs	r3, #0
   1a680:	703b      	strb	r3, [r7, #0]
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   1a682:	f8d0 a00c 	ldr.w	sl, [r0, #12]
   1a686:	f8d0 901c 	ldr.w	r9, [r0, #28]
{
   1a68a:	4604      	mov	r4, r0
	if (item->hdr.busy && !item->hdr.valid) {
   1a68c:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
{
   1a690:	468b      	mov	fp, r1
	if (item->hdr.busy && !item->hdr.valid) {
   1a692:	f003 0303 	and.w	r3, r3, #3
   1a696:	2b02      	cmp	r3, #2
{
   1a698:	4690      	mov	r8, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   1a69a:	eb09 068a 	add.w	r6, r9, sl, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   1a69e:	d103      	bne.n	1a6a8 <drop_item_locked+0x30>
		return item->skip.len;
   1a6a0:	f859 502a 	ldr.w	r5, [r9, sl, lsl #2]
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
   1a6a4:	08ad      	lsrs	r5, r5, #2
   1a6a6:	d12e      	bne.n	1a706 <drop_item_locked+0x8e>
   1a6a8:	4630      	mov	r0, r6
   1a6aa:	69a3      	ldr	r3, [r4, #24]
   1a6ac:	4798      	blx	r3
   1a6ae:	4605      	mov	r5, r0
	if (skip_wlen) {
		allow_drop = true;
	} else if (allow_drop) {
   1a6b0:	f1b8 0f00 	cmp.w	r8, #0
   1a6b4:	d038      	beq.n	1a728 <drop_item_locked+0xb0>
		if (item->hdr.busy) {
   1a6b6:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
   1a6ba:	079b      	lsls	r3, r3, #30
   1a6bc:	d531      	bpl.n	1a722 <drop_item_locked+0xaa>
			/* item is currently processed and cannot be overwritten. */
			add_skip_item(buffer, free_wlen + 1);
   1a6be:	4620      	mov	r0, r4
   1a6c0:	f10b 0101 	add.w	r1, fp, #1
   1a6c4:	f7ff ffb5 	bl	1a632 <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   1a6c8:	6861      	ldr	r1, [r4, #4]
   1a6ca:	462a      	mov	r2, r5
   1a6cc:	4620      	mov	r0, r4
   1a6ce:	f7ff ffa2 	bl	1a616 <idx_inc>
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   1a6d2:	6821      	ldr	r1, [r4, #0]
   1a6d4:	462a      	mov	r2, r5
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   1a6d6:	6060      	str	r0, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   1a6d8:	4620      	mov	r0, r4
   1a6da:	f7ff ff9c 	bl	1a616 <idx_inc>

			/* Get next itme followed the busy one. */
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   1a6de:	462a      	mov	r2, r5
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   1a6e0:	6020      	str	r0, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   1a6e2:	68e1      	ldr	r1, [r4, #12]
   1a6e4:	4620      	mov	r0, r4
   1a6e6:	f7ff ff96 	bl	1a616 <idx_inc>

			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   1a6ea:	69e3      	ldr	r3, [r4, #28]
	if (item->hdr.busy && !item->hdr.valid) {
   1a6ec:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   1a6f0:	eb03 0680 	add.w	r6, r3, r0, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   1a6f4:	f002 0203 	and.w	r2, r2, #3
   1a6f8:	2a02      	cmp	r2, #2
   1a6fa:	d10e      	bne.n	1a71a <drop_item_locked+0xa2>
		return item->skip.len;
   1a6fc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			skip_wlen = get_skip(item);
			if (skip_wlen) {
   1a700:	089b      	lsrs	r3, r3, #2
   1a702:	d00a      	beq.n	1a71a <drop_item_locked+0xa2>
				rd_wlen += skip_wlen;
   1a704:	441d      	add	r5, r3
	} else {
		item = NULL;
	}

	if (allow_drop) {
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   1a706:	68e1      	ldr	r1, [r4, #12]
   1a708:	462a      	mov	r2, r5
   1a70a:	4620      	mov	r0, r4
   1a70c:	f7ff ff83 	bl	1a616 <idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   1a710:	e9c4 0002 	strd	r0, r0, [r4, #8]
	}

	return item;
}
   1a714:	4630      	mov	r0, r6
   1a716:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				rd_wlen += buffer->get_wlen(item);
   1a71a:	4630      	mov	r0, r6
   1a71c:	69a3      	ldr	r3, [r4, #24]
   1a71e:	4798      	blx	r3
   1a720:	4405      	add	r5, r0
			*user_packet = true;
   1a722:	2301      	movs	r3, #1
   1a724:	703b      	strb	r3, [r7, #0]
	if (allow_drop) {
   1a726:	e7ee      	b.n	1a706 <drop_item_locked+0x8e>
		item = NULL;
   1a728:	4646      	mov	r6, r8
	return item;
   1a72a:	e7f3      	b.n	1a714 <drop_item_locked+0x9c>

0001a72c <mpsc_pbuf_init>:
{
   1a72c:	b538      	push	{r3, r4, r5, lr}
   1a72e:	460d      	mov	r5, r1
   1a730:	4604      	mov	r4, r0
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
   1a732:	221c      	movs	r2, #28
   1a734:	2100      	movs	r1, #0
   1a736:	f001 f8d7 	bl	1b8e8 <memset>
	buffer->max_usage = 0;
   1a73a:	2200      	movs	r2, #0
	buffer->get_wlen = cfg->get_wlen;
   1a73c:	68eb      	ldr	r3, [r5, #12]
   1a73e:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
   1a740:	68ab      	ldr	r3, [r5, #8]
   1a742:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
   1a744:	682b      	ldr	r3, [r5, #0]
   1a746:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
   1a748:	686b      	ldr	r3, [r5, #4]
	buffer->max_usage = 0;
   1a74a:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->size = cfg->size;
   1a74c:	6223      	str	r3, [r4, #32]
	buffer->flags = cfg->flags;
   1a74e:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
   1a750:	b123      	cbz	r3, 1a75c <mpsc_pbuf_init+0x30>
   1a752:	1e59      	subs	r1, r3, #1
   1a754:	4219      	tst	r1, r3
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
   1a756:	bf08      	it	eq
   1a758:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
   1a75c:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1a75e:	2201      	movs	r2, #1
   1a760:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1a764:	2100      	movs	r1, #0
}
   1a766:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1a76a:	f004 bba2 	b.w	1eeb2 <z_impl_k_sem_init>

0001a76e <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
   1a76e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1a772:	4698      	mov	r8, r3
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
   1a774:	6a03      	ldr	r3, [r0, #32]
{
   1a776:	4604      	mov	r4, r0
	if (wlen > (buffer->size - 1)) {
   1a778:	3b01      	subs	r3, #1
   1a77a:	428b      	cmp	r3, r1
{
   1a77c:	460e      	mov	r6, r1
   1a77e:	4617      	mov	r7, r2
	if (wlen > (buffer->size - 1)) {
   1a780:	d351      	bcc.n	1a826 <mpsc_pbuf_alloc+0xb8>
	union mpsc_pbuf_generic *dropped_item = NULL;
   1a782:	2500      	movs	r5, #0
	__asm__ volatile(
   1a784:	f04f 0320 	mov.w	r3, #32
   1a788:	f3ef 8911 	mrs	r9, BASEPRI
   1a78c:	f383 8812 	msr	BASEPRI_MAX, r3
   1a790:	f3bf 8f6f 	isb	sy
		k_spinlock_key_t key;
		bool wrap;

		cont = false;
		key = k_spin_lock(&buffer->lock);
		wrap = free_space(buffer, &free_wlen);
   1a794:	4620      	mov	r0, r4
   1a796:	a901      	add	r1, sp, #4
   1a798:	f7ff ff1b 	bl	1a5d2 <free_space>

		if (free_wlen >= wlen) {
   1a79c:	f8dd a004 	ldr.w	sl, [sp, #4]
   1a7a0:	45b2      	cmp	sl, r6
   1a7a2:	d317      	bcc.n	1a7d4 <mpsc_pbuf_alloc+0x66>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
   1a7a4:	6822      	ldr	r2, [r4, #0]
			item =
   1a7a6:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
			item->hdr.busy = 0;
			buffer->tmp_wr_idx = idx_inc(buffer,
   1a7a8:	4620      	mov	r0, r4
			item->hdr.valid = 0;
   1a7aa:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
			item =
   1a7ae:	eb03 0582 	add.w	r5, r3, r2, lsl #2
			item->hdr.valid = 0;
   1a7b2:	f021 0103 	bic.w	r1, r1, #3
   1a7b6:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
   1a7ba:	6821      	ldr	r1, [r4, #0]
   1a7bc:	4632      	mov	r2, r6
   1a7be:	f7ff ff2a 	bl	1a616 <idx_inc>
   1a7c2:	6020      	str	r0, [r4, #0]
	__asm__ volatile(
   1a7c4:	f389 8811 	msr	BASEPRI, r9
   1a7c8:	f3bf 8f6f 	isb	sy
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
   1a7cc:	4628      	mov	r0, r5
   1a7ce:	b002      	add	sp, #8
   1a7d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (wrap) {
   1a7d4:	b150      	cbz	r0, 1a7ec <mpsc_pbuf_alloc+0x7e>
			add_skip_item(buffer, free_wlen);
   1a7d6:	4651      	mov	r1, sl
   1a7d8:	4620      	mov	r0, r4
   1a7da:	f7ff ff2a 	bl	1a632 <add_skip_item>
   1a7de:	f389 8811 	msr	BASEPRI, r9
   1a7e2:	f3bf 8f6f 	isb	sy
		if (cont && dropped_item && valid_drop) {
   1a7e6:	2d00      	cmp	r5, #0
   1a7e8:	d0cb      	beq.n	1a782 <mpsc_pbuf_alloc+0x14>
   1a7ea:	e033      	b.n	1a854 <mpsc_pbuf_alloc+0xe6>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1a7ec:	ea57 0308 	orrs.w	r3, r7, r8
   1a7f0:	d020      	beq.n	1a834 <mpsc_pbuf_alloc+0xc6>
			   !k_is_in_isr()) {
   1a7f2:	f004 fa69 	bl	1ecc8 <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1a7f6:	b9e8      	cbnz	r0, 1a834 <mpsc_pbuf_alloc+0xc6>
   1a7f8:	f389 8811 	msr	BASEPRI, r9
   1a7fc:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
   1a800:	463a      	mov	r2, r7
   1a802:	4643      	mov	r3, r8
   1a804:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1a808:	f7fe fa3a 	bl	18c80 <z_impl_k_sem_take>
	__asm__ volatile(
   1a80c:	f04f 0220 	mov.w	r2, #32
   1a810:	f3ef 8311 	mrs	r3, BASEPRI
   1a814:	f382 8812 	msr	BASEPRI_MAX, r2
   1a818:	f3bf 8f6f 	isb	sy
			if (err == 0) {
   1a81c:	b128      	cbz	r0, 1a82a <mpsc_pbuf_alloc+0xbc>
	__asm__ volatile(
   1a81e:	f383 8811 	msr	BASEPRI, r3
   1a822:	f3bf 8f6f 	isb	sy
		return NULL;
   1a826:	2500      	movs	r5, #0
   1a828:	e7d0      	b.n	1a7cc <mpsc_pbuf_alloc+0x5e>
   1a82a:	f383 8811 	msr	BASEPRI, r3
   1a82e:	f3bf 8f6f 	isb	sy
		if (cont && dropped_item && valid_drop) {
   1a832:	e7d8      	b.n	1a7e6 <mpsc_pbuf_alloc+0x78>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
   1a834:	6922      	ldr	r2, [r4, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
   1a836:	4651      	mov	r1, sl
   1a838:	4620      	mov	r0, r4
   1a83a:	f10d 0303 	add.w	r3, sp, #3
   1a83e:	f3c2 0240 	ubfx	r2, r2, #1, #1
   1a842:	f7ff ff19 	bl	1a678 <drop_item_locked>
   1a846:	4605      	mov	r5, r0
   1a848:	f389 8811 	msr	BASEPRI, r9
   1a84c:	f3bf 8f6f 	isb	sy
		if (cont && dropped_item && valid_drop) {
   1a850:	2800      	cmp	r0, #0
   1a852:	d0e8      	beq.n	1a826 <mpsc_pbuf_alloc+0xb8>
   1a854:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1a858:	2b00      	cmp	r3, #0
   1a85a:	d093      	beq.n	1a784 <mpsc_pbuf_alloc+0x16>
			if (buffer->notify_drop) {
   1a85c:	6963      	ldr	r3, [r4, #20]
   1a85e:	2b00      	cmp	r3, #0
   1a860:	d08f      	beq.n	1a782 <mpsc_pbuf_alloc+0x14>
				buffer->notify_drop(buffer, dropped_item);
   1a862:	4629      	mov	r1, r5
   1a864:	4620      	mov	r0, r4
   1a866:	4798      	blx	r3
   1a868:	e78b      	b.n	1a782 <mpsc_pbuf_alloc+0x14>

0001a86a <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
   1a86a:	b570      	push	{r4, r5, r6, lr}
   1a86c:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   1a86e:	6983      	ldr	r3, [r0, #24]
   1a870:	4608      	mov	r0, r1
{
   1a872:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   1a874:	4798      	blx	r3
   1a876:	4602      	mov	r2, r0
	__asm__ volatile(
   1a878:	f04f 0320 	mov.w	r3, #32
   1a87c:	f3ef 8611 	mrs	r6, BASEPRI
   1a880:	f383 8812 	msr	BASEPRI_MAX, r3
   1a884:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
   1a888:	782b      	ldrb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   1a88a:	4620      	mov	r0, r4
	item->hdr.valid = 1;
   1a88c:	f043 0301 	orr.w	r3, r3, #1
   1a890:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   1a892:	6861      	ldr	r1, [r4, #4]
   1a894:	f7ff febf 	bl	1a616 <idx_inc>
   1a898:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
   1a89a:	4620      	mov	r0, r4
   1a89c:	f7ff fedf 	bl	1a65e <max_utilization_update>
	__asm__ volatile(
   1a8a0:	f386 8811 	msr	BASEPRI, r6
   1a8a4:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
   1a8a8:	bd70      	pop	{r4, r5, r6, pc}

0001a8aa <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
   1a8aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a8ac:	4604      	mov	r4, r0
	__asm__ volatile(
   1a8ae:	f04f 0320 	mov.w	r3, #32
   1a8b2:	f3ef 8611 	mrs	r6, BASEPRI
   1a8b6:	f383 8812 	msr	BASEPRI_MAX, r3
   1a8ba:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   1a8be:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1a8c2:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
   1a8c4:	bf88      	it	hi
   1a8c6:	6a22      	ldrhi	r2, [r4, #32]

		cont = false;
		key = k_spin_lock(&buffer->lock);
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];
   1a8c8:	69e1      	ldr	r1, [r4, #28]
	*res = buffer->size - buffer->tmp_rd_idx;
   1a8ca:	1ad2      	subs	r2, r2, r3

		if (!a || is_invalid(item)) {
   1a8cc:	b132      	cbz	r2, 1a8dc <mpsc_pbuf_claim+0x32>
	return !item->hdr.valid && !item->hdr.busy;
   1a8ce:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
		item = (union mpsc_pbuf_generic *)
   1a8d2:	eb01 0783 	add.w	r7, r1, r3, lsl #2
		if (!a || is_invalid(item)) {
   1a8d6:	f012 0003 	ands.w	r0, r2, #3
   1a8da:	d105      	bne.n	1a8e8 <mpsc_pbuf_claim+0x3e>
	__asm__ volatile(
   1a8dc:	f386 8811 	msr	BASEPRI, r6
   1a8e0:	f3bf 8f6f 	isb	sy
			item = NULL;
   1a8e4:	2700      	movs	r7, #0
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);

	return item;
   1a8e6:	e02e      	b.n	1a946 <mpsc_pbuf_claim+0x9c>
	if (item->hdr.busy && !item->hdr.valid) {
   1a8e8:	2802      	cmp	r0, #2
   1a8ea:	d103      	bne.n	1a8f4 <mpsc_pbuf_claim+0x4a>
		return item->skip.len;
   1a8ec:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
			if (skip || !is_valid(item)) {
   1a8f0:	08ad      	lsrs	r5, r5, #2
   1a8f2:	d105      	bne.n	1a900 <mpsc_pbuf_claim+0x56>
   1a8f4:	07d0      	lsls	r0, r2, #31
   1a8f6:	d414      	bmi.n	1a922 <mpsc_pbuf_claim+0x78>
					skip ? skip : buffer->get_wlen(item);
   1a8f8:	4638      	mov	r0, r7
   1a8fa:	69a3      	ldr	r3, [r4, #24]
   1a8fc:	4798      	blx	r3
   1a8fe:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
   1a900:	68a1      	ldr	r1, [r4, #8]
   1a902:	462a      	mov	r2, r5
   1a904:	4620      	mov	r0, r4
   1a906:	f7ff fe86 	bl	1a616 <idx_inc>
					idx_inc(buffer, buffer->rd_idx, inc);
   1a90a:	68e1      	ldr	r1, [r4, #12]
				buffer->tmp_rd_idx =
   1a90c:	60a0      	str	r0, [r4, #8]
					idx_inc(buffer, buffer->rd_idx, inc);
   1a90e:	462a      	mov	r2, r5
   1a910:	4620      	mov	r0, r4
   1a912:	f7ff fe80 	bl	1a616 <idx_inc>
				buffer->rd_idx =
   1a916:	60e0      	str	r0, [r4, #12]
   1a918:	f386 8811 	msr	BASEPRI, r6
   1a91c:	f3bf 8f6f 	isb	sy
	} while (cont);
   1a920:	e7c5      	b.n	1a8ae <mpsc_pbuf_claim+0x4>
				item->hdr.busy = 1;
   1a922:	f042 0202 	orr.w	r2, r2, #2
   1a926:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
					idx_inc(buffer, buffer->tmp_rd_idx,
   1a92a:	69a3      	ldr	r3, [r4, #24]
   1a92c:	4638      	mov	r0, r7
   1a92e:	68a5      	ldr	r5, [r4, #8]
   1a930:	4798      	blx	r3
   1a932:	4629      	mov	r1, r5
   1a934:	4602      	mov	r2, r0
   1a936:	4620      	mov	r0, r4
   1a938:	f7ff fe6d 	bl	1a616 <idx_inc>
				buffer->tmp_rd_idx =
   1a93c:	60a0      	str	r0, [r4, #8]
   1a93e:	f386 8811 	msr	BASEPRI, r6
   1a942:	f3bf 8f6f 	isb	sy
}
   1a946:	4638      	mov	r0, r7
   1a948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001a94a <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
   1a94a:	b570      	push	{r4, r5, r6, lr}
   1a94c:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   1a94e:	6983      	ldr	r3, [r0, #24]
   1a950:	4608      	mov	r0, r1
{
   1a952:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   1a954:	4798      	blx	r3
   1a956:	4602      	mov	r2, r0
	__asm__ volatile(
   1a958:	f04f 0320 	mov.w	r3, #32
   1a95c:	f3ef 8611 	mrs	r6, BASEPRI
   1a960:	f383 8812 	msr	BASEPRI_MAX, r3
   1a964:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
   1a968:	782b      	ldrb	r3, [r5, #0]
   1a96a:	f36f 0300 	bfc	r3, #0, #1
   1a96e:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   1a970:	6923      	ldr	r3, [r4, #16]
   1a972:	079b      	lsls	r3, r3, #30
   1a974:	d505      	bpl.n	1a982 <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
   1a976:	68e1      	ldr	r1, [r4, #12]
   1a978:	69e3      	ldr	r3, [r4, #28]
   1a97a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   1a97e:	429d      	cmp	r5, r3
   1a980:	d112      	bne.n	1a9a8 <mpsc_pbuf_free+0x5e>
		witem->hdr.busy = 0;
   1a982:	782b      	ldrb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   1a984:	4620      	mov	r0, r4
		witem->hdr.busy = 0;
   1a986:	f36f 0341 	bfc	r3, #1, #1
   1a98a:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   1a98c:	68e1      	ldr	r1, [r4, #12]
   1a98e:	f7ff fe42 	bl	1a616 <idx_inc>
   1a992:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1a994:	f386 8811 	msr	BASEPRI, r6
   1a998:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   1a99c:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
   1a9a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1a9a4:	f7fe b946 	b.w	18c34 <z_impl_k_sem_give>
		witem->skip.len = wlen;
   1a9a8:	682b      	ldr	r3, [r5, #0]
   1a9aa:	f360 039f 	bfi	r3, r0, #2, #30
   1a9ae:	602b      	str	r3, [r5, #0]
   1a9b0:	e7f0      	b.n	1a994 <mpsc_pbuf_free+0x4a>

0001a9b2 <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   1a9b2:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   1a9b6:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
   1a9b8:	bf88      	it	hi
   1a9ba:	6a02      	ldrhi	r2, [r0, #32]
   1a9bc:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   1a9be:	1e18      	subs	r0, r3, #0
   1a9c0:	bf18      	it	ne
   1a9c2:	2001      	movne	r0, #1
   1a9c4:	4770      	bx	lr

0001a9c6 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1a9c6:	4770      	bx	lr

0001a9c8 <nordicsemi_nrf53_init>:
{
   1a9c8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1a9ca:	f04f 0320 	mov.w	r3, #32
   1a9ce:	f3ef 8511 	mrs	r5, BASEPRI
   1a9d2:	f383 8812 	msr	BASEPRI_MAX, r3
   1a9d6:	f3bf 8f6f 	isb	sy
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
   1a9da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
   1a9de:	2401      	movs	r4, #1
   1a9e0:	2202      	movs	r2, #2
		soc_secure_gpio_pin_mcu_select(forwarded_psels[i], NRF_GPIO_PIN_SEL_NETWORK);
   1a9e2:	4621      	mov	r1, r4
   1a9e4:	f8c3 26d0 	str.w	r2, [r3, #1744]	; 0x6d0
   1a9e8:	2021      	movs	r0, #33	; 0x21
   1a9ea:	f8c3 4704 	str.w	r4, [r3, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
   1a9ee:	f8c3 4904 	str.w	r4, [r3, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
   1a9f2:	f8c3 4b00 	str.w	r4, [r3, #2816]	; 0xb00
   1a9f6:	f000 f824 	bl	1aa42 <soc_secure_gpio_pin_mcu_select>
   1a9fa:	4621      	mov	r1, r4
   1a9fc:	2020      	movs	r0, #32
   1a9fe:	f000 f820 	bl	1aa42 <soc_secure_gpio_pin_mcu_select>
   1aa02:	4621      	mov	r1, r4
   1aa04:	200b      	movs	r0, #11
   1aa06:	f000 f81c 	bl	1aa42 <soc_secure_gpio_pin_mcu_select>
   1aa0a:	4621      	mov	r1, r4
   1aa0c:	200a      	movs	r0, #10
   1aa0e:	f000 f818 	bl	1aa42 <soc_secure_gpio_pin_mcu_select>
	__asm__ volatile(
   1aa12:	f385 8811 	msr	BASEPRI, r5
   1aa16:	f3bf 8f6f 	isb	sy
}
   1aa1a:	2000      	movs	r0, #0
   1aa1c:	bd38      	pop	{r3, r4, r5, pc}

0001aa1e <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   1aa1e:	2806      	cmp	r0, #6
   1aa20:	d108      	bne.n	1aa34 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   1aa22:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   1aa26:	2201      	movs	r2, #1
   1aa28:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   1aa2c:	f3bf 8f4f 	dsb	sy
        __WFE();
   1aa30:	bf20      	wfe
    while (true)
   1aa32:	e7fd      	b.n	1aa30 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   1aa34:	4770      	bx	lr

0001aa36 <pm_state_exit_post_ops>:
   1aa36:	2300      	movs	r3, #0
   1aa38:	f383 8811 	msr	BASEPRI, r3
   1aa3c:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   1aa40:	4770      	bx	lr

0001aa42 <soc_secure_gpio_pin_mcu_select>:
#include "tfm_platform_api.h"
#include "tfm_ioctl_api.h"

#if NRF_GPIO_HAS_SEL
void soc_secure_gpio_pin_mcu_select(uint32_t pin_number, nrf_gpio_pin_sel_t mcu)
{
   1aa42:	b507      	push	{r0, r1, r2, lr}
	uint32_t result;
	enum tfm_platform_err_t err;

	err = tfm_platform_gpio_pin_mcu_select(pin_number, mcu, &result);
   1aa44:	aa01      	add	r2, sp, #4
   1aa46:	f003 fac7 	bl	1dfd8 <tfm_platform_gpio_pin_mcu_select>
	__ASSERT(err == TFM_PLATFORM_ERR_SUCCESS, "TFM platform error (%d)", err);
	__ASSERT(result == 0, "GPIO service error (%d)", result);
}
   1aa4a:	b003      	add	sp, #12
   1aa4c:	f85d fb04 	ldr.w	pc, [sp], #4

0001aa50 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
   1aa50:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   1aa52:	075b      	lsls	r3, r3, #29
   1aa54:	d40b      	bmi.n	1aa6e <log_msg_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   1aa56:	6803      	ldr	r3, [r0, #0]
   1aa58:	8842      	ldrh	r2, [r0, #2]
   1aa5a:	f3c3 2349 	ubfx	r3, r3, #9, #10
   1aa5e:	f3c2 02cb 	ubfx	r2, r2, #3, #12
   1aa62:	1898      	adds	r0, r3, r2
   1aa64:	3017      	adds	r0, #23
   1aa66:	f020 0007 	bic.w	r0, r0, #7
   1aa6a:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
   1aa6c:	4770      	bx	lr
	return 0;
   1aa6e:	2000      	movs	r0, #0
}
   1aa70:	4770      	bx	lr

0001aa72 <dummy_timestamp>:
}
   1aa72:	2000      	movs	r0, #0
   1aa74:	4770      	bx	lr

0001aa76 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   1aa76:	f003 ba51 	b.w	1df1c <sys_clock_cycle_get_32>

0001aa7a <atomic_inc>:
{
   1aa7a:	4603      	mov	r3, r0
}
   1aa7c:	e8d3 0fef 	ldaex	r0, [r3]
   1aa80:	1c42      	adds	r2, r0, #1
   1aa82:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1aa86:	2900      	cmp	r1, #0
   1aa88:	d1f8      	bne.n	1aa7c <atomic_inc+0x2>
   1aa8a:	4770      	bx	lr

0001aa8c <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
   1aa8c:	2001      	movs	r0, #1
   1aa8e:	f7f0 bbb3 	b.w	b1f8 <z_log_dropped>

0001aa92 <z_log_get_tag>:
}
   1aa92:	2000      	movs	r0, #0
   1aa94:	4770      	bx	lr

0001aa96 <z_cbprintf_cpy>:
{
   1aa96:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
   1aa98:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
   1aa9c:	1b9b      	subs	r3, r3, r6
   1aa9e:	428b      	cmp	r3, r1
{
   1aaa0:	460c      	mov	r4, r1
   1aaa2:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
   1aaa4:	d30a      	bcc.n	1aabc <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
   1aaa6:	6813      	ldr	r3, [r2, #0]
   1aaa8:	460a      	mov	r2, r1
   1aaaa:	4601      	mov	r1, r0
   1aaac:	1998      	adds	r0, r3, r6
   1aaae:	f000 ff10 	bl	1b8d2 <memcpy>
	return len;
   1aab2:	4620      	mov	r0, r4
	desc->off += len;
   1aab4:	68ab      	ldr	r3, [r5, #8]
   1aab6:	4423      	add	r3, r4
   1aab8:	60ab      	str	r3, [r5, #8]
}
   1aaba:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
   1aabc:	f06f 001b 	mvn.w	r0, #27
   1aac0:	e7fb      	b.n	1aaba <z_cbprintf_cpy+0x24>

0001aac2 <z_log_msg_finalize>:
{
   1aac2:	b570      	push	{r4, r5, r6, lr}
   1aac4:	460e      	mov	r6, r1
   1aac6:	4615      	mov	r5, r2
   1aac8:	4619      	mov	r1, r3
	if (!msg) {
   1aaca:	4604      	mov	r4, r0
   1aacc:	b918      	cbnz	r0, 1aad6 <z_log_msg_finalize+0x14>
}
   1aace:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   1aad2:	f7f0 bb91 	b.w	b1f8 <z_log_dropped>
	if (data) {
   1aad6:	b13b      	cbz	r3, 1aae8 <z_log_msg_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
   1aad8:	f3c2 2349 	ubfx	r3, r2, #9, #10
   1aadc:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
   1aade:	f3c2 42cb 	ubfx	r2, r2, #19, #12
   1aae2:	4418      	add	r0, r3
   1aae4:	f000 fef5 	bl	1b8d2 <memcpy>
	msg->hdr.source = source;
   1aae8:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
   1aaec:	4620      	mov	r0, r4
}
   1aaee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
   1aaf2:	f7f0 bd01 	b.w	b4f8 <z_log_msg_commit>

0001aaf6 <buffer_write>:
{
   1aaf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1aaf8:	4606      	mov	r6, r0
   1aafa:	460d      	mov	r5, r1
   1aafc:	4614      	mov	r4, r2
   1aafe:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   1ab00:	4621      	mov	r1, r4
   1ab02:	4628      	mov	r0, r5
   1ab04:	463a      	mov	r2, r7
   1ab06:	47b0      	blx	r6
	} while (len != 0);
   1ab08:	1a24      	subs	r4, r4, r0
		buf += processed;
   1ab0a:	4405      	add	r5, r0
	} while (len != 0);
   1ab0c:	d1f8      	bne.n	1ab00 <buffer_write+0xa>
}
   1ab0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001ab10 <cbvprintf>:
{
   1ab10:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   1ab12:	2400      	movs	r4, #0
   1ab14:	9400      	str	r4, [sp, #0]
   1ab16:	f7ef fb5d 	bl	a1d4 <z_cbvprintf_impl>
}
   1ab1a:	b002      	add	sp, #8
   1ab1c:	bd10      	pop	{r4, pc}

0001ab1e <log_output_flush>:
{
   1ab1e:	b510      	push	{r4, lr}
		     output->control_block->offset,
   1ab20:	6842      	ldr	r2, [r0, #4]
{
   1ab22:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   1ab24:	e9d2 2300 	ldrd	r2, r3, [r2]
   1ab28:	6881      	ldr	r1, [r0, #8]
   1ab2a:	6800      	ldr	r0, [r0, #0]
   1ab2c:	f7ff ffe3 	bl	1aaf6 <buffer_write>
	output->control_block->offset = 0;
   1ab30:	2200      	movs	r2, #0
   1ab32:	6863      	ldr	r3, [r4, #4]
   1ab34:	601a      	str	r2, [r3, #0]
}
   1ab36:	bd10      	pop	{r4, pc}

0001ab38 <out_func>:
{
   1ab38:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   1ab3a:	684b      	ldr	r3, [r1, #4]
{
   1ab3c:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
   1ab3e:	681a      	ldr	r2, [r3, #0]
   1ab40:	68cb      	ldr	r3, [r1, #12]
{
   1ab42:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   1ab44:	429a      	cmp	r2, r3
   1ab46:	d102      	bne.n	1ab4e <out_func+0x16>
		log_output_flush(out_ctx);
   1ab48:	4608      	mov	r0, r1
   1ab4a:	f7ff ffe8 	bl	1ab1e <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1ab4e:	6863      	ldr	r3, [r4, #4]
   1ab50:	e8d3 2fef 	ldaex	r2, [r3]
   1ab54:	1c51      	adds	r1, r2, #1
   1ab56:	e8c3 1fe0 	stlex	r0, r1, [r3]
   1ab5a:	2800      	cmp	r0, #0
   1ab5c:	d1f8      	bne.n	1ab50 <out_func+0x18>
	out_ctx->buf[idx] = (uint8_t)c;
   1ab5e:	68a3      	ldr	r3, [r4, #8]
}
   1ab60:	2000      	movs	r0, #0
	out_ctx->buf[idx] = (uint8_t)c;
   1ab62:	549d      	strb	r5, [r3, r2]
}
   1ab64:	bd38      	pop	{r3, r4, r5, pc}

0001ab66 <cr_out_func>:
	if (c == '\n') {
   1ab66:	280a      	cmp	r0, #10
{
   1ab68:	b538      	push	{r3, r4, r5, lr}
   1ab6a:	4604      	mov	r4, r0
   1ab6c:	460d      	mov	r5, r1
	if (c == '\n') {
   1ab6e:	d102      	bne.n	1ab76 <cr_out_func+0x10>
		out_func((int)'\r', ctx);
   1ab70:	200d      	movs	r0, #13
   1ab72:	f7ff ffe1 	bl	1ab38 <out_func>
	out_func(c, ctx);
   1ab76:	4629      	mov	r1, r5
   1ab78:	4620      	mov	r0, r4
   1ab7a:	f7ff ffdd 	bl	1ab38 <out_func>
}
   1ab7e:	2000      	movs	r0, #0
   1ab80:	bd38      	pop	{r3, r4, r5, pc}

0001ab82 <log_backend_uart_init>:
}
   1ab82:	4770      	bx	lr

0001ab84 <read_str>:
#endif /* CONFIG_BT_DIS_SETTINGS */

static ssize_t read_str(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  uint16_t len, uint16_t offset)
{
   1ab84:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   1ab88:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   1ab8c:	4605      	mov	r5, r0
				 strlen(attr->user_data));
   1ab8e:	4640      	mov	r0, r8
{
   1ab90:	461f      	mov	r7, r3
   1ab92:	460c      	mov	r4, r1
   1ab94:	4616      	mov	r6, r2
				 strlen(attr->user_data));
   1ab96:	f000 fe5d 	bl	1b854 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   1ab9a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1ab9e:	b280      	uxth	r0, r0
   1aba0:	e9cd 8001 	strd	r8, r0, [sp, #4]
   1aba4:	9300      	str	r3, [sp, #0]
   1aba6:	4632      	mov	r2, r6
   1aba8:	463b      	mov	r3, r7
   1abaa:	4621      	mov	r1, r4
   1abac:	4628      	mov	r0, r5
   1abae:	f002 fa21 	bl	1cff4 <bt_gatt_attr_read>
}
   1abb2:	b004      	add	sp, #16
   1abb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001abb8 <bas_init>:
}
   1abb8:	2000      	movs	r0, #0
   1abba:	4770      	bx	lr

0001abbc <z_log_msg_static_create.constprop.0>:
   1abbc:	2300      	movs	r3, #0
   1abbe:	f7f0 bccf 	b.w	b560 <z_impl_z_log_msg_static_create>

0001abc2 <get_tx_buffer_size>:
	return data->tx_buffer_size;
   1abc2:	6903      	ldr	r3, [r0, #16]
}
   1abc4:	f8d3 0358 	ldr.w	r0, [r3, #856]	; 0x358
   1abc8:	4770      	bx	lr

0001abca <drop_tx_buffer>:
}
   1abca:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1abce:	4770      	bx	lr

0001abd0 <release_rx_buffer>:
{
   1abd0:	4608      	mov	r0, r1
   1abd2:	b508      	push	{r3, lr}
   1abd4:	4611      	mov	r1, r2
	if (!rpmsg_ept) {
   1abd6:	b118      	cbz	r0, 1abe0 <release_rx_buffer+0x10>
	rpmsg_release_rx_buffer(&rpmsg_ept->ep, data);
   1abd8:	f003 fd7c 	bl	1e6d4 <rpmsg_release_rx_buffer>
	return 0;
   1abdc:	2000      	movs	r0, #0
}
   1abde:	bd08      	pop	{r3, pc}
		return -ENOENT;
   1abe0:	f06f 0001 	mvn.w	r0, #1
   1abe4:	e7fb      	b.n	1abde <release_rx_buffer+0xe>

0001abe6 <hold_rx_buffer>:
{
   1abe6:	4608      	mov	r0, r1
   1abe8:	b508      	push	{r3, lr}
   1abea:	4611      	mov	r1, r2
	if (!rpmsg_ept) {
   1abec:	b118      	cbz	r0, 1abf6 <hold_rx_buffer+0x10>
	rpmsg_hold_rx_buffer(&rpmsg_ept->ep, data);
   1abee:	f003 fd69 	bl	1e6c4 <rpmsg_hold_rx_buffer>
	return 0;
   1abf2:	2000      	movs	r0, #0
}
   1abf4:	bd08      	pop	{r3, pc}
		return -ENOENT;
   1abf6:	f06f 0001 	mvn.w	r0, #1
   1abfa:	e7fb      	b.n	1abf4 <hold_rx_buffer+0xe>

0001abfc <send_nocopy>:
{
   1abfc:	b513      	push	{r0, r1, r4, lr}
   1abfe:	4604      	mov	r4, r0
   1ac00:	4608      	mov	r0, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ac02:	6921      	ldr	r1, [r4, #16]
   1ac04:	f501 7155 	add.w	r1, r1, #852	; 0x354
   1ac08:	e8d1 1faf 	lda	r1, [r1]
	if (atomic_get(&data->state) != STATE_INITED) {
   1ac0c:	2902      	cmp	r1, #2
   1ac0e:	d109      	bne.n	1ac24 <send_nocopy+0x28>
	if (len == 0) {
   1ac10:	b15b      	cbz	r3, 1ac2a <send_nocopy+0x2e>
	if (!rpmsg_ept) {
   1ac12:	b168      	cbz	r0, 1ac30 <send_nocopy+0x34>
 * @see rpmsg_sendto_nocopy
 */
static inline int rpmsg_send_nocopy(struct rpmsg_endpoint *ept,
				    const void *data, int len)
{
	return rpmsg_send_offchannel_nocopy(ept, ept->addr,
   1ac14:	9300      	str	r3, [sp, #0]
   1ac16:	4613      	mov	r3, r2
   1ac18:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
   1ac1c:	f7fd fa60 	bl	180e0 <rpmsg_send_offchannel_nocopy>
}
   1ac20:	b002      	add	sp, #8
   1ac22:	bd10      	pop	{r4, pc}
		return -EBUSY;
   1ac24:	f06f 000f 	mvn.w	r0, #15
   1ac28:	e7fa      	b.n	1ac20 <send_nocopy+0x24>
		return -EBADMSG;
   1ac2a:	f06f 004c 	mvn.w	r0, #76	; 0x4c
   1ac2e:	e7f7      	b.n	1ac20 <send_nocopy+0x24>
		return -ENOENT;
   1ac30:	f06f 0001 	mvn.w	r0, #1
   1ac34:	e7f4      	b.n	1ac20 <send_nocopy+0x24>

0001ac36 <get_tx_buffer>:
{
   1ac36:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ac3a:	461c      	mov	r4, r3
   1ac3c:	e9dd 5308 	ldrd	r5, r3, [sp, #32]
   1ac40:	4616      	mov	r6, r2
   1ac42:	4698      	mov	r8, r3
	if (!rpmsg_ept) {
   1ac44:	460f      	mov	r7, r1
	struct backend_data_t *data = instance->data;
   1ac46:	6900      	ldr	r0, [r0, #16]
	if (!rpmsg_ept) {
   1ac48:	b339      	cbz	r1, 1ac9a <get_tx_buffer+0x64>
	if (!r_data || !size) {
   1ac4a:	b34a      	cbz	r2, 1aca0 <get_tx_buffer+0x6a>
   1ac4c:	b344      	cbz	r4, 1aca0 <get_tx_buffer+0x6a>
	if (!K_TIMEOUT_EQ(wait, K_FOREVER) && !K_TIMEOUT_EQ(wait, K_NO_WAIT)) {
   1ac4e:	1c6a      	adds	r2, r5, #1
   1ac50:	f143 0300 	adc.w	r3, r3, #0
   1ac54:	2a02      	cmp	r2, #2
   1ac56:	f173 0300 	sbcs.w	r3, r3, #0
   1ac5a:	d224      	bcs.n	1aca6 <get_tx_buffer+0x70>
	if ((*size) && (*size > data->tx_buffer_size)) {
   1ac5c:	6822      	ldr	r2, [r4, #0]
   1ac5e:	b142      	cbz	r2, 1ac72 <get_tx_buffer+0x3c>
   1ac60:	f8d0 3358 	ldr.w	r3, [r0, #856]	; 0x358
   1ac64:	429a      	cmp	r2, r3
   1ac66:	d904      	bls.n	1ac72 <get_tx_buffer+0x3c>
		return -ENOMEM;
   1ac68:	f06f 000b 	mvn.w	r0, #11
		*size = data->tx_buffer_size;
   1ac6c:	6023      	str	r3, [r4, #0]
}
   1ac6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		payload = rpmsg_get_tx_payload_buffer(&rpmsg_ept->ep, size,
   1ac72:	ea05 0908 	and.w	r9, r5, r8
   1ac76:	f109 0301 	add.w	r3, r9, #1
   1ac7a:	425a      	negs	r2, r3
   1ac7c:	415a      	adcs	r2, r3
   1ac7e:	4621      	mov	r1, r4
   1ac80:	4638      	mov	r0, r7
   1ac82:	f003 fd2f 	bl	1e6e4 <rpmsg_get_tx_payload_buffer>
	} while ((!payload) && K_TIMEOUT_EQ(wait, K_FOREVER));
   1ac86:	b988      	cbnz	r0, 1acac <get_tx_buffer+0x76>
   1ac88:	f1b8 3fff 	cmp.w	r8, #4294967295
   1ac8c:	bf08      	it	eq
   1ac8e:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   1ac92:	d0f0      	beq.n	1ac76 <get_tx_buffer+0x40>
		return -ENOBUFS;
   1ac94:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1ac98:	e7e9      	b.n	1ac6e <get_tx_buffer+0x38>
		return -ENOENT;
   1ac9a:	f06f 0001 	mvn.w	r0, #1
   1ac9e:	e7e6      	b.n	1ac6e <get_tx_buffer+0x38>
		return -EINVAL;
   1aca0:	f06f 0015 	mvn.w	r0, #21
   1aca4:	e7e3      	b.n	1ac6e <get_tx_buffer+0x38>
		return -ENOTSUP;
   1aca6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1acaa:	e7e0      	b.n	1ac6e <get_tx_buffer+0x38>
	(*r_data) = payload;
   1acac:	6030      	str	r0, [r6, #0]
	return 0;
   1acae:	2000      	movs	r0, #0
   1acb0:	e7dd      	b.n	1ac6e <get_tx_buffer+0x38>

0001acb2 <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   1acb2:	f003 bd5c 	b.w	1e76e <rpmsg_destroy_ept>

0001acb6 <get_ept_slot_with_name>:
{
   1acb6:	b538      	push	{r3, r4, r5, lr}
   1acb8:	460d      	mov	r5, r1
   1acba:	4604      	mov	r4, r0
		if (strcmp(name, rpmsg_ept->name) == 0) {
   1acbc:	f100 0140 	add.w	r1, r0, #64	; 0x40
   1acc0:	4628      	mov	r0, r5
   1acc2:	f000 fdd7 	bl	1b874 <strcmp>
   1acc6:	b130      	cbz	r0, 1acd6 <get_ept_slot_with_name+0x20>
   1acc8:	4628      	mov	r0, r5
   1acca:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   1acce:	f000 fdd1 	bl	1b874 <strcmp>
   1acd2:	b920      	cbnz	r0, 1acde <get_ept_slot_with_name+0x28>
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
   1acd4:	2001      	movs	r0, #1
			return &rpmsg_inst->endpoint[i];
   1acd6:	2370      	movs	r3, #112	; 0x70
   1acd8:	fb03 4000 	mla	r0, r3, r0, r4
}
   1acdc:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
   1acde:	2000      	movs	r0, #0
   1ace0:	e7fc      	b.n	1acdc <get_ept_slot_with_name+0x26>

0001ace2 <mbox_callback>:
	k_work_submit_to_queue(&data->mbox_wq, &data->mbox_work);
   1ace2:	f502 7126 	add.w	r1, r2, #664	; 0x298
   1ace6:	f502 702a 	add.w	r0, r2, #680	; 0x2a8
   1acea:	f004 b991 	b.w	1f010 <k_work_submit_to_queue>

0001acee <mbox_callback_process>:
	vq_id = (data->role == ROLE_HOST) ? VIRTQUEUE_ID_HOST : VIRTQUEUE_ID_REMOTE;
   1acee:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
	virtqueue_notification(data->vr.vq[vq_id]);
   1acf2:	f5a0 7026 	sub.w	r0, r0, #664	; 0x298
	vq_id = (data->role == ROLE_HOST) ? VIRTQUEUE_ID_HOST : VIRTQUEUE_ID_REMOTE;
   1acf6:	3b00      	subs	r3, #0
   1acf8:	bf18      	it	ne
   1acfa:	2301      	movne	r3, #1
	virtqueue_notification(data->vr.vq[vq_id]);
   1acfc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1ad00:	f8d0 0284 	ldr.w	r0, [r0, #644]	; 0x284
   1ad04:	f003 bc90 	b.w	1e628 <virtqueue_notification>

0001ad08 <ept_cb>:
{
   1ad08:	b510      	push	{r4, lr}
   1ad0a:	4608      	mov	r0, r1
   1ad0c:	9b02      	ldr	r3, [sp, #8]
	if (len == 0) {
   1ad0e:	4611      	mov	r1, r2
   1ad10:	b952      	cbnz	r2, 1ad28 <ept_cb+0x20>
		if (!ept->bound) {
   1ad12:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
   1ad16:	b92a      	cbnz	r2, 1ad24 <ept_cb+0x1c>
			ept->bound = true;
   1ad18:	2201      	movs	r2, #1
			bound_cb(ept);
   1ad1a:	4618      	mov	r0, r3
			ept->bound = true;
   1ad1c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			bound_cb(ept);
   1ad20:	f7f1 f82e 	bl	bd80 <bound_cb>
}
   1ad24:	2000      	movs	r0, #0
   1ad26:	bd10      	pop	{r4, pc}
	if (ept->cb->received) {
   1ad28:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   1ad2a:	6854      	ldr	r4, [r2, #4]
   1ad2c:	2c00      	cmp	r4, #0
   1ad2e:	d0f9      	beq.n	1ad24 <ept_cb+0x1c>
		ept->cb->received(data, len, ept->priv);
   1ad30:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   1ad32:	47a0      	blx	r4
   1ad34:	e7f6      	b.n	1ad24 <ept_cb+0x1c>

0001ad36 <virtio_notify_cb>:
	if (conf->mbox_tx.dev) {
   1ad36:	68cb      	ldr	r3, [r1, #12]
   1ad38:	b133      	cbz	r3, 1ad48 <virtio_notify_cb+0x12>
		(const struct mbox_driver_api *)channel->dev->api;
   1ad3a:	68c8      	ldr	r0, [r1, #12]
	if (api->send == NULL) {
   1ad3c:	6883      	ldr	r3, [r0, #8]
   1ad3e:	681b      	ldr	r3, [r3, #0]
   1ad40:	b113      	cbz	r3, 1ad48 <virtio_notify_cb+0x12>
	return api->send(channel->dev, channel->id, msg);
   1ad42:	2200      	movs	r2, #0
   1ad44:	6909      	ldr	r1, [r1, #16]
   1ad46:	4718      	bx	r3
}
   1ad48:	4770      	bx	lr

0001ad4a <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   1ad4a:	f7fd bf03 	b.w	18b54 <z_impl_k_mutex_unlock>

0001ad4e <atomic_set.isra.0>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1ad4e:	e8d0 3fef 	ldaex	r3, [r0]
   1ad52:	e8c0 1fe2 	stlex	r2, r1, [r0]
   1ad56:	2a00      	cmp	r2, #0
   1ad58:	d1f9      	bne.n	1ad4e <atomic_set.isra.0>
}
   1ad5a:	4770      	bx	lr

0001ad5c <backend_init>:
{
   1ad5c:	b510      	push	{r4, lr}
	data->role = conf->role;
   1ad5e:	6843      	ldr	r3, [r0, #4]
	struct backend_data_t *data = instance->data;
   1ad60:	6904      	ldr	r4, [r0, #16]
	data->role = conf->role;
   1ad62:	681b      	ldr	r3, [r3, #0]
   1ad64:	f8c4 3350 	str.w	r3, [r4, #848]	; 0x350
	return z_impl_k_mutex_init(mutex);
   1ad68:	f504 70ce 	add.w	r0, r4, #412	; 0x19c
   1ad6c:	f003 ffc8 	bl	1ed00 <z_impl_k_mutex_init>
	atomic_set(&data->state, STATE_READY);
   1ad70:	2100      	movs	r1, #0
   1ad72:	f504 7055 	add.w	r0, r4, #852	; 0x354
   1ad76:	f7ff ffea 	bl	1ad4e <atomic_set.isra.0>
}
   1ad7a:	4608      	mov	r0, r1
   1ad7c:	bd10      	pop	{r4, pc}

0001ad7e <ns_bind_cb>:
{
   1ad7e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1ad82:	4617      	mov	r7, r2
	if (name == NULL || name[0] == '\0') {
   1ad84:	460d      	mov	r5, r1
   1ad86:	b379      	cbz	r1, 1ade8 <ns_bind_cb+0x6a>
   1ad88:	780b      	ldrb	r3, [r1, #0]
   1ad8a:	b36b      	cbz	r3, 1ade8 <ns_bind_cb+0x6a>
	rpmsg_inst = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);
   1ad8c:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
   1ad90:	f5a4 78c4 	sub.w	r8, r4, #392	; 0x188
	k_mutex_lock(&rpmsg_inst->mtx, K_FOREVER);
   1ad94:	3414      	adds	r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   1ad96:	f04f 32ff 	mov.w	r2, #4294967295
   1ad9a:	f04f 33ff 	mov.w	r3, #4294967295
   1ad9e:	4620      	mov	r0, r4
   1ada0:	f7fd fe5e 	bl	18a60 <z_impl_k_mutex_lock>
	ept_cached = get_ept(rpmsg_inst, &rpmsg_ept, name);
   1ada4:	462a      	mov	r2, r5
   1ada6:	4640      	mov	r0, r8
   1ada8:	a901      	add	r1, sp, #4
   1adaa:	f7f1 f823 	bl	bdf4 <get_ept>
	if (rpmsg_ept == NULL) {
   1adae:	9e01      	ldr	r6, [sp, #4]
   1adb0:	b92e      	cbnz	r6, 1adbe <ns_bind_cb+0x40>
		k_mutex_unlock(&rpmsg_inst->mtx);
   1adb2:	4620      	mov	r0, r4
}
   1adb4:	b002      	add	sp, #8
   1adb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_mutex_unlock(&rpmsg_inst->mtx);
   1adba:	f7ff bfc6 	b.w	1ad4a <k_mutex_unlock.isra.0>
	if (ept_cached) {
   1adbe:	b158      	cbz	r0, 1add8 <ns_bind_cb+0x5a>
		k_mutex_unlock(&rpmsg_inst->mtx);
   1adc0:	4620      	mov	r0, r4
   1adc2:	f7ff ffc2 	bl	1ad4a <k_mutex_unlock.isra.0>
		advertise_ept(rpmsg_inst, rpmsg_ept, name, dest);
   1adc6:	463b      	mov	r3, r7
   1adc8:	462a      	mov	r2, r5
   1adca:	4631      	mov	r1, r6
   1adcc:	4640      	mov	r0, r8
}
   1adce:	b002      	add	sp, #8
   1add0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		advertise_ept(rpmsg_inst, rpmsg_ept, name, dest);
   1add4:	f7f0 bfec 	b.w	bdb0 <advertise_ept>
		strncpy(rpmsg_ept->name, name, sizeof(rpmsg_ept->name));
   1add8:	2220      	movs	r2, #32
   1adda:	4629      	mov	r1, r5
   1addc:	f106 0040 	add.w	r0, r6, #64	; 0x40
   1ade0:	f000 fd24 	bl	1b82c <strncpy>
		rpmsg_ept->dest = dest;
   1ade4:	6637      	str	r7, [r6, #96]	; 0x60
   1ade6:	e7e4      	b.n	1adb2 <ns_bind_cb+0x34>
}
   1ade8:	b002      	add	sp, #8
   1adea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001adee <deregister_ept>:
{
   1adee:	b510      	push	{r4, lr}
   1adf0:	460c      	mov	r4, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1adf2:	6903      	ldr	r3, [r0, #16]
   1adf4:	f503 7355 	add.w	r3, r3, #852	; 0x354
   1adf8:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&data->state) != STATE_INITED) {
   1adfc:	2b02      	cmp	r3, #2
   1adfe:	d10a      	bne.n	1ae16 <deregister_ept+0x28>
	if (!rpmsg_ept) {
   1ae00:	b161      	cbz	r1, 1ae1c <deregister_ept+0x2e>
	rpmsg_destroy_ept(&rpmsg_ept->ep);
   1ae02:	4608      	mov	r0, r1
   1ae04:	f003 fcb3 	bl	1e76e <rpmsg_destroy_ept>
	memset(rpmsg_ept, 0, sizeof(struct ipc_rpmsg_ept));
   1ae08:	2270      	movs	r2, #112	; 0x70
   1ae0a:	2100      	movs	r1, #0
   1ae0c:	4620      	mov	r0, r4
   1ae0e:	f000 fd6b 	bl	1b8e8 <memset>
	return 0;
   1ae12:	2000      	movs	r0, #0
}
   1ae14:	bd10      	pop	{r4, pc}
		return -EBUSY;
   1ae16:	f06f 000f 	mvn.w	r0, #15
   1ae1a:	e7fb      	b.n	1ae14 <deregister_ept+0x26>
		return -ENOENT;
   1ae1c:	f06f 0001 	mvn.w	r0, #1
   1ae20:	e7f8      	b.n	1ae14 <deregister_ept+0x26>

0001ae22 <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   1ae22:	f003 bca4 	b.w	1e76e <rpmsg_destroy_ept>

0001ae26 <ipc_rpmsg_deinit>:

int ipc_rpmsg_deinit(struct ipc_rpmsg_instance *instance,
		   unsigned int role)
{
   1ae26:	b538      	push	{r3, r4, r5, lr}
   1ae28:	460d      	mov	r5, r1
	if (!instance) {
   1ae2a:	4604      	mov	r4, r0
   1ae2c:	b160      	cbz	r0, 1ae48 <ipc_rpmsg_deinit+0x22>
		return -EINVAL;
	}

	rpmsg_deinit_vdev(&instance->rvdev);
   1ae2e:	30e0      	adds	r0, #224	; 0xe0
   1ae30:	f003 fe7c 	bl	1eb2c <rpmsg_deinit_vdev>

	if (role == RPMSG_HOST) {
   1ae34:	b10d      	cbz	r5, 1ae3a <ipc_rpmsg_deinit+0x14>
		memset(&instance->shm_pool, 0, sizeof(struct rpmsg_virtio_shm_pool));
	}

	return 0;
   1ae36:	2000      	movs	r0, #0
}
   1ae38:	bd38      	pop	{r3, r4, r5, pc}
		memset(&instance->shm_pool, 0, sizeof(struct rpmsg_virtio_shm_pool));
   1ae3a:	220c      	movs	r2, #12
   1ae3c:	4629      	mov	r1, r5
   1ae3e:	f504 70c4 	add.w	r0, r4, #392	; 0x188
   1ae42:	f000 fd51 	bl	1b8e8 <memset>
   1ae46:	e7f6      	b.n	1ae36 <ipc_rpmsg_deinit+0x10>
		return -EINVAL;
   1ae48:	f06f 0015 	mvn.w	r0, #21
   1ae4c:	e7f4      	b.n	1ae38 <ipc_rpmsg_deinit+0x12>

0001ae4e <virtio_notify>:
	vr = CONTAINER_OF(vq->vq_dev, struct ipc_static_vrings, vdev);
   1ae4e:	6802      	ldr	r2, [r0, #0]
	if (vr->notify_cb) {
   1ae50:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   1ae54:	b113      	cbz	r3, 1ae5c <virtio_notify+0xe>
		vr->notify_cb(vq, vr->priv);
   1ae56:	f8d2 10dc 	ldr.w	r1, [r2, #220]	; 0xdc
   1ae5a:	4718      	bx	r3
}
   1ae5c:	4770      	bx	lr

0001ae5e <virtio_set_features>:
}
   1ae5e:	4770      	bx	lr

0001ae60 <virtio_set_status>:
	if (p_vdev->role != VIRTIO_DEV_DRIVER) {
   1ae60:	6983      	ldr	r3, [r0, #24]
   1ae62:	b913      	cbnz	r3, 1ae6a <virtio_set_status+0xa>
	return *(volatile uint8_t *)addr;
}

static ALWAYS_INLINE void sys_write8(uint8_t data, mem_addr_t addr)
{
	*(volatile uint8_t *)addr = data;
   1ae64:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
   1ae68:	7019      	strb	r1, [r3, #0]
}
   1ae6a:	4770      	bx	lr

0001ae6c <virtio_get_features>:
}
   1ae6c:	2001      	movs	r0, #1
   1ae6e:	4770      	bx	lr

0001ae70 <virtio_get_status>:
	if (p_vdev->role == VIRTIO_DEV_DEVICE) {
   1ae70:	6983      	ldr	r3, [r0, #24]
   1ae72:	2b01      	cmp	r3, #1
   1ae74:	d104      	bne.n	1ae80 <virtio_get_status+0x10>
	return *(volatile uint8_t *)addr;
   1ae76:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
   1ae7a:	7818      	ldrb	r0, [r3, #0]
   1ae7c:	b2c0      	uxtb	r0, r0
   1ae7e:	4770      	bx	lr
	ret = VIRTIO_CONFIG_STATUS_DRIVER_OK;
   1ae80:	2004      	movs	r0, #4
}
   1ae82:	4770      	bx	lr

0001ae84 <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
   1ae84:	b538      	push	{r3, r4, r5, lr}
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);
   1ae86:	00c4      	lsls	r4, r0, #3
	uint32_t vq_size = sizeof(struct virtqueue) +
   1ae88:	3434      	adds	r4, #52	; 0x34
	return k_malloc(size);
   1ae8a:	4620      	mov	r0, r4
   1ae8c:	f004 fc43 	bl	1f716 <k_malloc>

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
	if (vqs) {
   1ae90:	4605      	mov	r5, r0
   1ae92:	b118      	cbz	r0, 1ae9c <virtqueue_allocate+0x18>
		memset(vqs, 0x00, vq_size);
   1ae94:	4622      	mov	r2, r4
   1ae96:	2100      	movs	r1, #0
   1ae98:	f000 fd26 	bl	1b8e8 <memset>
	}

	return vqs;
}
   1ae9c:	4628      	mov	r0, r5
   1ae9e:	bd38      	pop	{r3, r4, r5, pc}

0001aea0 <ipc_static_vrings_deinit>:

int ipc_static_vrings_deinit(struct ipc_static_vrings *vr, unsigned int role)
{
   1aea0:	b538      	push	{r3, r4, r5, lr}
   1aea2:	4604      	mov	r4, r0
	memset(&vr->vdev, 0, sizeof(struct virtio_device));
   1aea4:	2230      	movs	r2, #48	; 0x30
   1aea6:	2100      	movs	r1, #0
   1aea8:	f000 fd1e 	bl	1b8e8 <memset>
	memset(&(vr->rvrings[RPMSG_VQ_1]), 0, sizeof(struct virtio_vring_info));
   1aeac:	2218      	movs	r2, #24
   1aeae:	2100      	movs	r1, #0
   1aeb0:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   1aeb4:	f000 fd18 	bl	1b8e8 <memset>
	memset(&(vr->rvrings[RPMSG_VQ_0]), 0, sizeof(struct virtio_vring_info));
   1aeb8:	2218      	movs	r2, #24
   1aeba:	2100      	movs	r1, #0
   1aebc:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
   1aec0:	f000 fd12 	bl	1b8e8 <memset>
	virtqueue_free(vr->vq[RPMSG_VQ_1]);
   1aec4:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
   1aec8:	f7fd f8c0 	bl	1804c <virtqueue_free>
	virtqueue_free(vr->vq[RPMSG_VQ_0]);
   1aecc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   1aed0:	f7fd f8bc 	bl	1804c <virtqueue_free>
	vr->shm_io = 0;
   1aed4:	2300      	movs	r3, #0
	metal_device_close(&vr->shm_device);
   1aed6:	f104 0034 	add.w	r0, r4, #52	; 0x34
	vr->shm_io = 0;
   1aeda:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	metal_device_close(&vr->shm_device);
   1aede:	f003 f91b 	bl	1e118 <metal_device_close>
	metal_finish();
   1aee2:	f7fd f82b 	bl	17f3c <metal_finish>
	if (io->ops.close)
   1aee6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	err = libmetal_teardown(vr);
	if (err != 0) {
		return err;
	}

	metal_io_finish(vr->shm_device.regions);
   1aee8:	f104 0540 	add.w	r5, r4, #64	; 0x40
   1aeec:	b10b      	cbz	r3, 1aef2 <ipc_static_vrings_deinit+0x52>
		(*io->ops.close)(io);
   1aeee:	4628      	mov	r0, r5
   1aef0:	4798      	blx	r3
	memset(io, 0, sizeof(*io));
   1aef2:	2238      	movs	r2, #56	; 0x38
   1aef4:	2100      	movs	r1, #0
   1aef6:	4628      	mov	r0, r5
   1aef8:	f000 fcf6 	bl	1b8e8 <memset>

	return 0;
}
   1aefc:	2000      	movs	r0, #0
   1aefe:	bd38      	pop	{r3, r4, r5, pc}

0001af00 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   1af00:	b538      	push	{r3, r4, r5, lr}
   1af02:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   1af04:	42ab      	cmp	r3, r5
{
   1af06:	4611      	mov	r1, r2
   1af08:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   1af0a:	d804      	bhi.n	1af16 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   1af0c:	461a      	mov	r2, r3
   1af0e:	f000 fce0 	bl	1b8d2 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   1af12:	4620      	mov	r0, r4
   1af14:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   1af16:	2400      	movs	r4, #0
   1af18:	e7fb      	b.n	1af12 <_copy+0x12>

0001af1a <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   1af1a:	f000 bce5 	b.w	1b8e8 <memset>

0001af1e <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   1af1e:	09c3      	lsrs	r3, r0, #7
   1af20:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1af24:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1af28:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   1af2c:	b2c0      	uxtb	r0, r0
   1af2e:	4770      	bx	lr

0001af30 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   1af30:	78cb      	ldrb	r3, [r1, #3]
   1af32:	7802      	ldrb	r2, [r0, #0]
   1af34:	4053      	eors	r3, r2
   1af36:	7003      	strb	r3, [r0, #0]
   1af38:	884b      	ldrh	r3, [r1, #2]
   1af3a:	7842      	ldrb	r2, [r0, #1]
   1af3c:	4053      	eors	r3, r2
   1af3e:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   1af40:	680a      	ldr	r2, [r1, #0]
   1af42:	7883      	ldrb	r3, [r0, #2]
   1af44:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1af48:	7083      	strb	r3, [r0, #2]
   1af4a:	680a      	ldr	r2, [r1, #0]
   1af4c:	78c3      	ldrb	r3, [r0, #3]
   1af4e:	4053      	eors	r3, r2
   1af50:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1af52:	79cb      	ldrb	r3, [r1, #7]
   1af54:	7902      	ldrb	r2, [r0, #4]
   1af56:	4053      	eors	r3, r2
   1af58:	7103      	strb	r3, [r0, #4]
   1af5a:	88cb      	ldrh	r3, [r1, #6]
   1af5c:	7942      	ldrb	r2, [r0, #5]
   1af5e:	4053      	eors	r3, r2
   1af60:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   1af62:	684a      	ldr	r2, [r1, #4]
   1af64:	7983      	ldrb	r3, [r0, #6]
   1af66:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1af6a:	7183      	strb	r3, [r0, #6]
   1af6c:	684a      	ldr	r2, [r1, #4]
   1af6e:	79c3      	ldrb	r3, [r0, #7]
   1af70:	4053      	eors	r3, r2
   1af72:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   1af74:	7acb      	ldrb	r3, [r1, #11]
   1af76:	7a02      	ldrb	r2, [r0, #8]
   1af78:	4053      	eors	r3, r2
   1af7a:	7203      	strb	r3, [r0, #8]
   1af7c:	7a42      	ldrb	r2, [r0, #9]
   1af7e:	894b      	ldrh	r3, [r1, #10]
   1af80:	4053      	eors	r3, r2
   1af82:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   1af84:	688a      	ldr	r2, [r1, #8]
   1af86:	7a83      	ldrb	r3, [r0, #10]
   1af88:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1af8c:	7283      	strb	r3, [r0, #10]
   1af8e:	688a      	ldr	r2, [r1, #8]
   1af90:	7ac3      	ldrb	r3, [r0, #11]
   1af92:	4053      	eors	r3, r2
   1af94:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1af96:	7bcb      	ldrb	r3, [r1, #15]
   1af98:	7b02      	ldrb	r2, [r0, #12]
   1af9a:	4053      	eors	r3, r2
   1af9c:	7303      	strb	r3, [r0, #12]
   1af9e:	89cb      	ldrh	r3, [r1, #14]
   1afa0:	7b42      	ldrb	r2, [r0, #13]
   1afa2:	4053      	eors	r3, r2
   1afa4:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1afa6:	68ca      	ldr	r2, [r1, #12]
   1afa8:	7b83      	ldrb	r3, [r0, #14]
   1afaa:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1afae:	7383      	strb	r3, [r0, #14]
   1afb0:	68ca      	ldr	r2, [r1, #12]
   1afb2:	7bc3      	ldrb	r3, [r0, #15]
   1afb4:	4053      	eors	r3, r2
   1afb6:	73c3      	strb	r3, [r0, #15]
}
   1afb8:	4770      	bx	lr

0001afba <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   1afba:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1afbc:	7802      	ldrb	r2, [r0, #0]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1afbe:	7ac3      	ldrb	r3, [r0, #11]
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1afc0:	f88d 2000 	strb.w	r2, [sp]
   1afc4:	7942      	ldrb	r2, [r0, #5]
   1afc6:	f88d 2001 	strb.w	r2, [sp, #1]
   1afca:	7a82      	ldrb	r2, [r0, #10]
   1afcc:	f88d 2002 	strb.w	r2, [sp, #2]
   1afd0:	7bc2      	ldrb	r2, [r0, #15]
   1afd2:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   1afd6:	7902      	ldrb	r2, [r0, #4]
   1afd8:	f88d 2004 	strb.w	r2, [sp, #4]
   1afdc:	7a42      	ldrb	r2, [r0, #9]
   1afde:	f88d 2005 	strb.w	r2, [sp, #5]
   1afe2:	7b82      	ldrb	r2, [r0, #14]
   1afe4:	f88d 2006 	strb.w	r2, [sp, #6]
   1afe8:	78c2      	ldrb	r2, [r0, #3]
   1afea:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   1afee:	7a02      	ldrb	r2, [r0, #8]
   1aff0:	f88d 2008 	strb.w	r2, [sp, #8]
   1aff4:	7b42      	ldrb	r2, [r0, #13]
   1aff6:	f88d 2009 	strb.w	r2, [sp, #9]
   1affa:	7882      	ldrb	r2, [r0, #2]
   1affc:	f88d 200a 	strb.w	r2, [sp, #10]
   1b000:	79c2      	ldrb	r2, [r0, #7]
   1b002:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1b006:	7b02      	ldrb	r2, [r0, #12]
   1b008:	f88d 200c 	strb.w	r2, [sp, #12]
   1b00c:	7842      	ldrb	r2, [r0, #1]
   1b00e:	f88d 200d 	strb.w	r2, [sp, #13]
   1b012:	7982      	ldrb	r2, [r0, #6]
   1b014:	f88d 200e 	strb.w	r2, [sp, #14]
   1b018:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1b01c:	2310      	movs	r3, #16
   1b01e:	466a      	mov	r2, sp
   1b020:	4619      	mov	r1, r3
   1b022:	f7ff ff6d 	bl	1af00 <_copy>
}
   1b026:	b005      	add	sp, #20
   1b028:	f85d fb04 	ldr.w	pc, [sp], #4

0001b02c <mult_row_column>:
{
   1b02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b02e:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1b030:	7808      	ldrb	r0, [r1, #0]
{
   1b032:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1b034:	f7ff ff73 	bl	1af1e <_double_byte>
   1b038:	4605      	mov	r5, r0
   1b03a:	7860      	ldrb	r0, [r4, #1]
   1b03c:	f7ff ff6f 	bl	1af1e <_double_byte>
   1b040:	78a2      	ldrb	r2, [r4, #2]
   1b042:	7863      	ldrb	r3, [r4, #1]
   1b044:	4053      	eors	r3, r2
   1b046:	78e2      	ldrb	r2, [r4, #3]
   1b048:	4053      	eors	r3, r2
   1b04a:	405d      	eors	r5, r3
   1b04c:	4068      	eors	r0, r5
   1b04e:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   1b050:	7860      	ldrb	r0, [r4, #1]
   1b052:	7827      	ldrb	r7, [r4, #0]
   1b054:	f7ff ff63 	bl	1af1e <_double_byte>
   1b058:	4605      	mov	r5, r0
   1b05a:	78a0      	ldrb	r0, [r4, #2]
   1b05c:	f7ff ff5f 	bl	1af1e <_double_byte>
   1b060:	78a3      	ldrb	r3, [r4, #2]
   1b062:	405f      	eors	r7, r3
   1b064:	78e3      	ldrb	r3, [r4, #3]
   1b066:	405f      	eors	r7, r3
   1b068:	407d      	eors	r5, r7
   1b06a:	4068      	eors	r0, r5
   1b06c:	7070      	strb	r0, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   1b06e:	7863      	ldrb	r3, [r4, #1]
   1b070:	7827      	ldrb	r7, [r4, #0]
   1b072:	78a0      	ldrb	r0, [r4, #2]
   1b074:	405f      	eors	r7, r3
   1b076:	f7ff ff52 	bl	1af1e <_double_byte>
   1b07a:	4605      	mov	r5, r0
   1b07c:	78e0      	ldrb	r0, [r4, #3]
   1b07e:	f7ff ff4e 	bl	1af1e <_double_byte>
   1b082:	78e3      	ldrb	r3, [r4, #3]
   1b084:	405f      	eors	r7, r3
   1b086:	407d      	eors	r5, r7
   1b088:	4068      	eors	r0, r5
   1b08a:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1b08c:	7820      	ldrb	r0, [r4, #0]
   1b08e:	f7ff ff46 	bl	1af1e <_double_byte>
   1b092:	7862      	ldrb	r2, [r4, #1]
   1b094:	7823      	ldrb	r3, [r4, #0]
   1b096:	4053      	eors	r3, r2
   1b098:	78a2      	ldrb	r2, [r4, #2]
   1b09a:	4053      	eors	r3, r2
   1b09c:	ea80 0503 	eor.w	r5, r0, r3
   1b0a0:	78e0      	ldrb	r0, [r4, #3]
   1b0a2:	f7ff ff3c 	bl	1af1e <_double_byte>
   1b0a6:	b2ed      	uxtb	r5, r5
   1b0a8:	4045      	eors	r5, r0
   1b0aa:	70f5      	strb	r5, [r6, #3]
}
   1b0ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001b0ae <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   1b0ae:	b570      	push	{r4, r5, r6, lr}
   1b0b0:	4614      	mov	r4, r2
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   1b0b2:	4605      	mov	r5, r0
{
   1b0b4:	b088      	sub	sp, #32
	if (out == (uint8_t *) 0) {
   1b0b6:	2800      	cmp	r0, #0
   1b0b8:	d049      	beq.n	1b14e <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   1b0ba:	2900      	cmp	r1, #0
   1b0bc:	d049      	beq.n	1b152 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   1b0be:	2a00      	cmp	r2, #0
   1b0c0:	d049      	beq.n	1b156 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   1b0c2:	2310      	movs	r3, #16
   1b0c4:	460a      	mov	r2, r1
   1b0c6:	4668      	mov	r0, sp
   1b0c8:	4619      	mov	r1, r3
   1b0ca:	f7ff ff19 	bl	1af00 <_copy>
	add_round_key(state, s->words);
   1b0ce:	4621      	mov	r1, r4
   1b0d0:	4668      	mov	r0, sp
   1b0d2:	f7ff ff2d 	bl	1af30 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   1b0d6:	3410      	adds	r4, #16
   1b0d8:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   1b0dc:	4668      	mov	r0, sp
   1b0de:	f7f1 faab 	bl	c638 <sub_bytes>
		shift_rows(state);
   1b0e2:	4668      	mov	r0, sp
   1b0e4:	f7ff ff69 	bl	1afba <shift_rows>
	mult_row_column(t, s);
   1b0e8:	4669      	mov	r1, sp
   1b0ea:	a804      	add	r0, sp, #16
   1b0ec:	f7ff ff9e 	bl	1b02c <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   1b0f0:	a901      	add	r1, sp, #4
   1b0f2:	a805      	add	r0, sp, #20
   1b0f4:	f7ff ff9a 	bl	1b02c <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   1b0f8:	a902      	add	r1, sp, #8
   1b0fa:	a806      	add	r0, sp, #24
   1b0fc:	f7ff ff96 	bl	1b02c <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   1b100:	a903      	add	r1, sp, #12
   1b102:	a807      	add	r0, sp, #28
   1b104:	f7ff ff92 	bl	1b02c <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1b108:	2310      	movs	r3, #16
   1b10a:	4668      	mov	r0, sp
   1b10c:	4619      	mov	r1, r3
   1b10e:	eb0d 0203 	add.w	r2, sp, r3
   1b112:	f7ff fef5 	bl	1af00 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   1b116:	4621      	mov	r1, r4
   1b118:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   1b11a:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   1b11c:	f7ff ff08 	bl	1af30 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   1b120:	42b4      	cmp	r4, r6
   1b122:	d1db      	bne.n	1b0dc <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   1b124:	f7f1 fa88 	bl	c638 <sub_bytes>
	shift_rows(state);
   1b128:	4668      	mov	r0, sp
   1b12a:	f7ff ff46 	bl	1afba <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   1b12e:	4621      	mov	r1, r4
   1b130:	4668      	mov	r0, sp
   1b132:	f7ff fefd 	bl	1af30 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   1b136:	2310      	movs	r3, #16
   1b138:	466a      	mov	r2, sp
   1b13a:	4619      	mov	r1, r3
   1b13c:	4628      	mov	r0, r5
   1b13e:	f7ff fedf 	bl	1af00 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   1b142:	4668      	mov	r0, sp
   1b144:	2210      	movs	r2, #16
   1b146:	2100      	movs	r1, #0
   1b148:	f7ff fee7 	bl	1af1a <_set>

	return TC_CRYPTO_SUCCESS;
   1b14c:	2001      	movs	r0, #1
}
   1b14e:	b008      	add	sp, #32
   1b150:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1b152:	4608      	mov	r0, r1
   1b154:	e7fb      	b.n	1b14e <tc_aes_encrypt+0xa0>
   1b156:	4610      	mov	r0, r2
   1b158:	e7f9      	b.n	1b14e <tc_aes_encrypt+0xa0>

0001b15a <gf_double>:

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1b15a:	460a      	mov	r2, r1
{
   1b15c:	b510      	push	{r4, lr}
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1b15e:	f912 3b10 	ldrsb.w	r3, [r2], #16

	out += (TC_AES_BLOCK_SIZE - 1);
   1b162:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1b164:	2b00      	cmp	r3, #0
   1b166:	bfac      	ite	ge
   1b168:	2300      	movge	r3, #0
   1b16a:	2387      	movlt	r3, #135	; 0x87
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   1b16c:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1b170:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   1b174:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
   1b176:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   1b17a:	d002      	beq.n	1b182 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   1b17c:	7813      	ldrb	r3, [r2, #0]
   1b17e:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   1b180:	e7f4      	b.n	1b16c <gf_double+0x12>
	}
}
   1b182:	bd10      	pop	{r4, pc}

0001b184 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   1b184:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   1b186:	b120      	cbz	r0, 1b192 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   1b188:	2258      	movs	r2, #88	; 0x58
   1b18a:	2100      	movs	r1, #0
   1b18c:	f7ff fec5 	bl	1af1a <_set>
   1b190:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1b192:	bd08      	pop	{r3, pc}

0001b194 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   1b194:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1b196:	4604      	mov	r4, r0
   1b198:	b188      	cbz	r0, 1b1be <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1b19a:	2210      	movs	r2, #16
   1b19c:	2100      	movs	r1, #0
   1b19e:	f7ff febc 	bl	1af1a <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   1b1a2:	2210      	movs	r2, #16
   1b1a4:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1b1a8:	2100      	movs	r1, #0
   1b1aa:	f7ff feb6 	bl	1af1a <_set>
	s->leftover_offset = 0;
   1b1ae:	2300      	movs	r3, #0

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   1b1b0:	2200      	movs	r2, #0
	s->leftover_offset = 0;
   1b1b2:	6463      	str	r3, [r4, #68]	; 0x44
	s->countdown = MAX_CALLS;
   1b1b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1b1b8:	2001      	movs	r0, #1
   1b1ba:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
}
   1b1be:	bd10      	pop	{r4, pc}

0001b1c0 <tc_cmac_setup>:
{
   1b1c0:	b570      	push	{r4, r5, r6, lr}
   1b1c2:	4604      	mov	r4, r0
   1b1c4:	460d      	mov	r5, r1
   1b1c6:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   1b1c8:	b310      	cbz	r0, 1b210 <tc_cmac_setup+0x50>
   1b1ca:	b311      	cbz	r1, 1b212 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   1b1cc:	2258      	movs	r2, #88	; 0x58
   1b1ce:	2100      	movs	r1, #0
   1b1d0:	f7ff fea3 	bl	1af1a <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   1b1d4:	4629      	mov	r1, r5
   1b1d6:	4630      	mov	r0, r6
	s->sched = sched;
   1b1d8:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   1b1da:	f7f1 fa39 	bl	c650 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1b1de:	2210      	movs	r2, #16
   1b1e0:	2100      	movs	r1, #0
   1b1e2:	4620      	mov	r0, r4
   1b1e4:	f7ff fe99 	bl	1af1a <_set>
	gf_double (s->K1, s->iv);
   1b1e8:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   1b1ec:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1b1ee:	4621      	mov	r1, r4
   1b1f0:	4620      	mov	r0, r4
   1b1f2:	f7ff ff5c 	bl	1b0ae <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   1b1f6:	4621      	mov	r1, r4
   1b1f8:	4628      	mov	r0, r5
   1b1fa:	f7ff ffae 	bl	1b15a <gf_double>
	gf_double (s->K2, s->K1);
   1b1fe:	4629      	mov	r1, r5
   1b200:	f104 0020 	add.w	r0, r4, #32
   1b204:	f7ff ffa9 	bl	1b15a <gf_double>
	tc_cmac_init(s);
   1b208:	4620      	mov	r0, r4
   1b20a:	f7ff ffc3 	bl	1b194 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   1b20e:	2001      	movs	r0, #1
}
   1b210:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1b212:	4608      	mov	r0, r1
   1b214:	e7fc      	b.n	1b210 <tc_cmac_setup+0x50>

0001b216 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   1b216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b21a:	460e      	mov	r6, r1
   1b21c:	4615      	mov	r5, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1b21e:	4604      	mov	r4, r0
   1b220:	2800      	cmp	r0, #0
   1b222:	d060      	beq.n	1b2e6 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   1b224:	b1fa      	cbz	r2, 1b266 <tc_cmac_update+0x50>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   1b226:	2900      	cmp	r1, #0
   1b228:	d05d      	beq.n	1b2e6 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   1b22a:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   1b22e:	ea53 0102 	orrs.w	r1, r3, r2
   1b232:	d058      	beq.n	1b2e6 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   1b234:	3b01      	subs	r3, #1

	if (s->leftover_offset > 0) {
   1b236:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   1b23a:	f142 32ff 	adc.w	r2, r2, #4294967295
   1b23e:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   1b242:	f1b8 0f00 	cmp.w	r8, #0
   1b246:	d02c      	beq.n	1b2a2 <tc_cmac_update+0x8c>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   1b248:	f1c8 0710 	rsb	r7, r8, #16

		if (data_length < remaining_space) {
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1b24c:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   1b250:	42bd      	cmp	r5, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1b252:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   1b254:	d20a      	bcs.n	1b26c <tc_cmac_update+0x56>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1b256:	462b      	mov	r3, r5
   1b258:	4632      	mov	r2, r6
   1b25a:	4629      	mov	r1, r5
   1b25c:	f7ff fe50 	bl	1af00 <_copy>
			s->leftover_offset += data_length;
   1b260:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1b262:	442b      	add	r3, r5
   1b264:	6463      	str	r3, [r4, #68]	; 0x44
		return  TC_CRYPTO_SUCCESS;
   1b266:	2001      	movs	r0, #1
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
}
   1b268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_copy(&s->leftover[s->leftover_offset],
   1b26c:	463b      	mov	r3, r7
   1b26e:	4632      	mov	r2, r6
   1b270:	4639      	mov	r1, r7
   1b272:	f7ff fe45 	bl	1af00 <_copy>
		s->leftover_offset = 0;
   1b276:	2300      	movs	r3, #0
   1b278:	3d10      	subs	r5, #16
   1b27a:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   1b27c:	4445      	add	r5, r8
		data += remaining_space;
   1b27e:	443e      	add	r6, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b280:	1e63      	subs	r3, r4, #1
   1b282:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   1b286:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1b28a:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b28e:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   1b290:	ea82 0200 	eor.w	r2, r2, r0
   1b294:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b296:	d1f6      	bne.n	1b286 <tc_cmac_update+0x70>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1b298:	4621      	mov	r1, r4
   1b29a:	4620      	mov	r0, r4
   1b29c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1b29e:	f7ff ff06 	bl	1b0ae <tc_aes_encrypt>
   1b2a2:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   1b2a6:	2d10      	cmp	r5, #16
   1b2a8:	d80a      	bhi.n	1b2c0 <tc_cmac_update+0xaa>
	if (data_length > 0) {
   1b2aa:	2d00      	cmp	r5, #0
   1b2ac:	d0db      	beq.n	1b266 <tc_cmac_update+0x50>
		_copy(s->leftover, data_length, data, data_length);
   1b2ae:	462b      	mov	r3, r5
   1b2b0:	4632      	mov	r2, r6
   1b2b2:	4629      	mov	r1, r5
   1b2b4:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1b2b8:	f7ff fe22 	bl	1af00 <_copy>
		s->leftover_offset = data_length;
   1b2bc:	6465      	str	r5, [r4, #68]	; 0x44
   1b2be:	e7d2      	b.n	1b266 <tc_cmac_update+0x50>
   1b2c0:	1e63      	subs	r3, r4, #1
   1b2c2:	1e71      	subs	r1, r6, #1
			s->iv[i] ^= data[i];
   1b2c4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1b2c8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b2cc:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   1b2ce:	ea82 0200 	eor.w	r2, r2, r0
   1b2d2:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b2d4:	d1f6      	bne.n	1b2c4 <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1b2d6:	4621      	mov	r1, r4
   1b2d8:	4620      	mov	r0, r4
   1b2da:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1b2dc:	f7ff fee7 	bl	1b0ae <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   1b2e0:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   1b2e2:	3d10      	subs	r5, #16
   1b2e4:	e7df      	b.n	1b2a6 <tc_cmac_update+0x90>
		return TC_CRYPTO_FAIL;
   1b2e6:	2000      	movs	r0, #0
   1b2e8:	e7be      	b.n	1b268 <tc_cmac_update+0x52>

0001b2ea <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   1b2ea:	b570      	push	{r4, r5, r6, lr}
   1b2ec:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1b2ee:	4605      	mov	r5, r0
   1b2f0:	b1f0      	cbz	r0, 1b330 <tc_cmac_final+0x46>
   1b2f2:	b371      	cbz	r1, 1b352 <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   1b2f4:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   1b2f6:	2a10      	cmp	r2, #16
   1b2f8:	d11b      	bne.n	1b332 <tc_cmac_final+0x48>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   1b2fa:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b2fc:	1e63      	subs	r3, r4, #1
   1b2fe:	3901      	subs	r1, #1
   1b300:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1b304:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1b308:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b30c:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1b30e:	ea82 0206 	eor.w	r2, r2, r6
   1b312:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   1b316:	ea82 0206 	eor.w	r2, r2, r6
   1b31a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b31c:	d1f2      	bne.n	1b304 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   1b31e:	4621      	mov	r1, r4
   1b320:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1b322:	4628      	mov	r0, r5
   1b324:	f7ff fec3 	bl	1b0ae <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   1b328:	4620      	mov	r0, r4
   1b32a:	f7ff ff2b 	bl	1b184 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   1b32e:	2001      	movs	r0, #1
}
   1b330:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   1b332:	f102 0030 	add.w	r0, r2, #48	; 0x30
   1b336:	2100      	movs	r1, #0
   1b338:	f1c2 0210 	rsb	r2, r2, #16
   1b33c:	4420      	add	r0, r4
   1b33e:	f7ff fdec 	bl	1af1a <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1b342:	2280      	movs	r2, #128	; 0x80
   1b344:	6c63      	ldr	r3, [r4, #68]	; 0x44
		k = (uint8_t *) s->K2;
   1b346:	f104 0120 	add.w	r1, r4, #32
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1b34a:	4423      	add	r3, r4
   1b34c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   1b350:	e7d4      	b.n	1b2fc <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   1b352:	4608      	mov	r0, r1
   1b354:	e7ec      	b.n	1b330 <tc_cmac_final+0x46>

0001b356 <tc_sha256_update>:
{
   1b356:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b358:	460c      	mov	r4, r1
	if (s == (TCSha256State_t) 0 ||
   1b35a:	b110      	cbz	r0, 1b362 <tc_sha256_update+0xc>
   1b35c:	b1f9      	cbz	r1, 1b39e <tc_sha256_update+0x48>
	} else if (datalen == 0) {
   1b35e:	b90a      	cbnz	r2, 1b364 <tc_sha256_update+0xe>
		return TC_CRYPTO_SUCCESS;
   1b360:	2001      	movs	r0, #1
}
   1b362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			s->leftover_offset = 0;
   1b364:	2700      	movs	r7, #0
   1b366:	188d      	adds	r5, r1, r2
			compress(s->iv, s->leftover);
   1b368:	f100 0628 	add.w	r6, r0, #40	; 0x28
		s->leftover[s->leftover_offset++] = *(data++);
   1b36c:	6e83      	ldr	r3, [r0, #104]	; 0x68
   1b36e:	1c5a      	adds	r2, r3, #1
   1b370:	6682      	str	r2, [r0, #104]	; 0x68
   1b372:	f814 1b01 	ldrb.w	r1, [r4], #1
   1b376:	4403      	add	r3, r0
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   1b378:	2a3f      	cmp	r2, #63	; 0x3f
		s->leftover[s->leftover_offset++] = *(data++);
   1b37a:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   1b37e:	d90b      	bls.n	1b398 <tc_sha256_update+0x42>
			compress(s->iv, s->leftover);
   1b380:	4631      	mov	r1, r6
   1b382:	f7f1 f9b9 	bl	c6f8 <compress>
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   1b386:	e9d0 3208 	ldrd	r3, r2, [r0, #32]
   1b38a:	f513 7300 	adds.w	r3, r3, #512	; 0x200
   1b38e:	f142 0200 	adc.w	r2, r2, #0
   1b392:	e9c0 3208 	strd	r3, r2, [r0, #32]
			s->leftover_offset = 0;
   1b396:	6687      	str	r7, [r0, #104]	; 0x68
	while (datalen-- > 0) {
   1b398:	42a5      	cmp	r5, r4
   1b39a:	d1e7      	bne.n	1b36c <tc_sha256_update+0x16>
   1b39c:	e7e0      	b.n	1b360 <tc_sha256_update+0xa>
		return TC_CRYPTO_FAIL;
   1b39e:	4608      	mov	r0, r1
   1b3a0:	e7df      	b.n	1b362 <tc_sha256_update+0xc>

0001b3a2 <tc_sha256_final>:
{
   1b3a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b3a4:	460c      	mov	r4, r1
	if (digest == (uint8_t *) 0 ||
   1b3a6:	4605      	mov	r5, r0
   1b3a8:	2800      	cmp	r0, #0
   1b3aa:	d054      	beq.n	1b456 <tc_sha256_final+0xb4>
   1b3ac:	2900      	cmp	r1, #0
   1b3ae:	d053      	beq.n	1b458 <tc_sha256_final+0xb6>
	s->bits_hashed += (s->leftover_offset << 3);
   1b3b0:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   1b3b2:	e9d1 2108 	ldrd	r2, r1, [r1, #32]
   1b3b6:	00d8      	lsls	r0, r3, #3
   1b3b8:	1812      	adds	r2, r2, r0
   1b3ba:	f141 0100 	adc.w	r1, r1, #0
   1b3be:	e9c4 2108 	strd	r2, r1, [r4, #32]
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   1b3c2:	2280      	movs	r2, #128	; 0x80
   1b3c4:	1c58      	adds	r0, r3, #1
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   1b3c6:	2838      	cmp	r0, #56	; 0x38
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   1b3c8:	4423      	add	r3, r4
   1b3ca:	66a0      	str	r0, [r4, #104]	; 0x68
	s->bits_hashed += (s->leftover_offset << 3);
   1b3cc:	f04f 0700 	mov.w	r7, #0
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   1b3d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		_set(s->leftover + s->leftover_offset, 0x00,
   1b3d4:	f104 0628 	add.w	r6, r4, #40	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   1b3d8:	d90a      	bls.n	1b3f0 <tc_sha256_final+0x4e>
		_set(s->leftover + s->leftover_offset, 0x00,
   1b3da:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   1b3de:	4639      	mov	r1, r7
   1b3e0:	4430      	add	r0, r6
   1b3e2:	f7ff fd9a 	bl	1af1a <_set>
		compress(s->iv, s->leftover);
   1b3e6:	4631      	mov	r1, r6
   1b3e8:	4620      	mov	r0, r4
   1b3ea:	f7f1 f985 	bl	c6f8 <compress>
		s->leftover_offset = 0;
   1b3ee:	66a7      	str	r7, [r4, #104]	; 0x68
	_set(s->leftover + s->leftover_offset, 0x00,
   1b3f0:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   1b3f2:	2100      	movs	r1, #0
   1b3f4:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   1b3f8:	4430      	add	r0, r6
   1b3fa:	f7ff fd8e 	bl	1af1a <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   1b3fe:	6a23      	ldr	r3, [r4, #32]
	compress(s->iv, s->leftover);
   1b400:	4631      	mov	r1, r6
   1b402:	ba1a      	rev	r2, r3
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   1b404:	6a63      	ldr	r3, [r4, #36]	; 0x24
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
   1b406:	6662      	str	r2, [r4, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   1b408:	0a1a      	lsrs	r2, r3, #8
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
   1b40a:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   1b40e:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   1b412:	0c1a      	lsrs	r2, r3, #16
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   1b414:	0e1b      	lsrs	r3, r3, #24
   1b416:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	compress(s->iv, s->leftover);
   1b41a:	4620      	mov	r0, r4
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   1b41c:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	compress(s->iv, s->leftover);
   1b420:	f7f1 f96a 	bl	c6f8 <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   1b424:	1d2b      	adds	r3, r5, #4
   1b426:	1f21      	subs	r1, r4, #4
   1b428:	3524      	adds	r5, #36	; 0x24
		unsigned int t = *((unsigned int *) &s->iv[i]);
   1b42a:	f851 2f04 	ldr.w	r2, [r1, #4]!
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   1b42e:	3304      	adds	r3, #4
		*digest++ = (uint8_t)(t >> 24);
   1b430:	0e10      	lsrs	r0, r2, #24
   1b432:	f803 0c08 	strb.w	r0, [r3, #-8]
		*digest++ = (uint8_t)(t >> 16);
   1b436:	0c10      	lsrs	r0, r2, #16
   1b438:	f803 0c07 	strb.w	r0, [r3, #-7]
		*digest++ = (uint8_t)(t >> 8);
   1b43c:	0a10      	lsrs	r0, r2, #8
   1b43e:	f803 0c06 	strb.w	r0, [r3, #-6]
		*digest++ = (uint8_t)(t);
   1b442:	f803 2c05 	strb.w	r2, [r3, #-5]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   1b446:	42ab      	cmp	r3, r5
   1b448:	d1ef      	bne.n	1b42a <tc_sha256_final+0x88>
	_set(s, 0, sizeof(*s));
   1b44a:	4620      	mov	r0, r4
   1b44c:	2270      	movs	r2, #112	; 0x70
   1b44e:	2100      	movs	r1, #0
   1b450:	f7ff fd63 	bl	1af1a <_set>
	return TC_CRYPTO_SUCCESS;
   1b454:	2001      	movs	r0, #1
}
   1b456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   1b458:	4608      	mov	r0, r1
   1b45a:	e7fc      	b.n	1b456 <tc_sha256_final+0xb4>

0001b45c <rekey>:
#include <tinycrypt/hmac.h>
#include <tinycrypt/constants.h>
#include <tinycrypt/utils.h>

static void rekey(uint8_t *key, const uint8_t *new_key, unsigned int key_size)
{
   1b45c:	b530      	push	{r4, r5, lr}
   1b45e:	1e43      	subs	r3, r0, #1
   1b460:	188d      	adds	r5, r1, r2
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
   1b462:	42a9      	cmp	r1, r5
   1b464:	d106      	bne.n	1b474 <rekey+0x18>
		key[i] = inner_pad ^ new_key[i];
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   1b466:	2136      	movs	r1, #54	; 0x36
   1b468:	245c      	movs	r4, #92	; 0x5c
   1b46a:	4402      	add	r2, r0
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   1b46c:	1a13      	subs	r3, r2, r0
   1b46e:	2b3f      	cmp	r3, #63	; 0x3f
   1b470:	d90c      	bls.n	1b48c <rekey+0x30>
	}
}
   1b472:	bd30      	pop	{r4, r5, pc}
		key[i] = inner_pad ^ new_key[i];
   1b474:	780c      	ldrb	r4, [r1, #0]
   1b476:	f084 0436 	eor.w	r4, r4, #54	; 0x36
   1b47a:	f803 4f01 	strb.w	r4, [r3, #1]!
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
   1b47e:	f811 4b01 	ldrb.w	r4, [r1], #1
   1b482:	f084 045c 	eor.w	r4, r4, #92	; 0x5c
   1b486:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
	for (i = 0; i < key_size; ++i) {
   1b48a:	e7ea      	b.n	1b462 <rekey+0x6>
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   1b48c:	f802 1b01 	strb.w	r1, [r2], #1
   1b490:	f882 403f 	strb.w	r4, [r2, #63]	; 0x3f
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   1b494:	e7ea      	b.n	1b46c <rekey+0x10>

0001b496 <tc_hmac_set_key>:

int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{
   1b496:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b498:	460e      	mov	r6, r1
   1b49a:	4614      	mov	r4, r2
	/* Input sanity check */
	if (ctx == (TCHmacState_t) 0 ||
   1b49c:	4605      	mov	r5, r0
{
   1b49e:	b0cd      	sub	sp, #308	; 0x134
	if (ctx == (TCHmacState_t) 0 ||
   1b4a0:	b1b8      	cbz	r0, 1b4d2 <tc_hmac_set_key+0x3c>
   1b4a2:	b341      	cbz	r1, 1b4f6 <tc_hmac_set_key+0x60>
	    key == (const uint8_t *) 0 ||
   1b4a4:	b34a      	cbz	r2, 1b4fa <tc_hmac_set_key+0x64>
	}

	const uint8_t dummy_key[TC_SHA256_BLOCK_SIZE];
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   1b4a6:	2a40      	cmp	r2, #64	; 0x40
				       key_size);
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
   1b4a8:	f100 0770 	add.w	r7, r0, #112	; 0x70
	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   1b4ac:	d813      	bhi.n	1b4d6 <tc_hmac_set_key+0x40>
		(void)tc_sha256_init(&dummy_state.hash_state);
   1b4ae:	a810      	add	r0, sp, #64	; 0x40
   1b4b0:	f7f1 fa0c 	bl	c8cc <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
   1b4b4:	4622      	mov	r2, r4
   1b4b6:	4669      	mov	r1, sp
   1b4b8:	a810      	add	r0, sp, #64	; 0x40
   1b4ba:	f7ff ff4c 	bl	1b356 <tc_sha256_update>
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
   1b4be:	a910      	add	r1, sp, #64	; 0x40
   1b4c0:	a834      	add	r0, sp, #208	; 0xd0
   1b4c2:	f7ff ff6e 	bl	1b3a2 <tc_sha256_final>
		rekey(ctx->key, key, key_size);
   1b4c6:	4622      	mov	r2, r4
   1b4c8:	4631      	mov	r1, r6
	} else {
		(void)tc_sha256_init(&ctx->hash_state);
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
				      &ctx->hash_state);
		rekey(ctx->key,
   1b4ca:	4638      	mov	r0, r7
   1b4cc:	f7ff ffc6 	bl	1b45c <rekey>
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
   1b4d0:	2001      	movs	r0, #1
}
   1b4d2:	b04d      	add	sp, #308	; 0x134
   1b4d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)tc_sha256_init(&ctx->hash_state);
   1b4d6:	f7f1 f9f9 	bl	c8cc <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   1b4da:	4622      	mov	r2, r4
   1b4dc:	4631      	mov	r1, r6
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   1b4de:	f105 0490 	add.w	r4, r5, #144	; 0x90
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   1b4e2:	4628      	mov	r0, r5
   1b4e4:	f7ff ff37 	bl	1b356 <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   1b4e8:	4629      	mov	r1, r5
   1b4ea:	4620      	mov	r0, r4
   1b4ec:	f7ff ff59 	bl	1b3a2 <tc_sha256_final>
		rekey(ctx->key,
   1b4f0:	2220      	movs	r2, #32
   1b4f2:	4621      	mov	r1, r4
   1b4f4:	e7e9      	b.n	1b4ca <tc_hmac_set_key+0x34>
		return TC_CRYPTO_FAIL;
   1b4f6:	4608      	mov	r0, r1
   1b4f8:	e7eb      	b.n	1b4d2 <tc_hmac_set_key+0x3c>
   1b4fa:	4610      	mov	r0, r2
   1b4fc:	e7e9      	b.n	1b4d2 <tc_hmac_set_key+0x3c>

0001b4fe <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{
   1b4fe:	b510      	push	{r4, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   1b500:	4604      	mov	r4, r0
   1b502:	b140      	cbz	r0, 1b516 <tc_hmac_init+0x18>
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
   1b504:	f7f1 f9e2 	bl	c8cc <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
   1b508:	2240      	movs	r2, #64	; 0x40
   1b50a:	4620      	mov	r0, r4
   1b50c:	f104 0170 	add.w	r1, r4, #112	; 0x70
   1b510:	f7ff ff21 	bl	1b356 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   1b514:	2001      	movs	r0, #1
}
   1b516:	bd10      	pop	{r4, pc}

0001b518 <tc_hmac_update>:

int tc_hmac_update(TCHmacState_t ctx,
		   const void *data,
		   unsigned int data_length)
{
   1b518:	b508      	push	{r3, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   1b51a:	b110      	cbz	r0, 1b522 <tc_hmac_update+0xa>
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
   1b51c:	f7ff ff1b 	bl	1b356 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   1b520:	2001      	movs	r0, #1
}
   1b522:	bd08      	pop	{r3, pc}

0001b524 <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{
   1b524:	b570      	push	{r4, r5, r6, lr}
   1b526:	460e      	mov	r6, r1
   1b528:	4614      	mov	r4, r2

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1b52a:	4605      	mov	r5, r0
   1b52c:	b1f0      	cbz	r0, 1b56c <tc_hmac_final+0x48>
   1b52e:	2920      	cmp	r1, #32
   1b530:	d11c      	bne.n	1b56c <tc_hmac_final+0x48>
	    taglen != TC_SHA256_DIGEST_SIZE ||
   1b532:	b1ea      	cbz	r2, 1b570 <tc_hmac_final+0x4c>
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	(void) tc_sha256_final(tag, &ctx->hash_state);
   1b534:	4611      	mov	r1, r2
   1b536:	f7ff ff34 	bl	1b3a2 <tc_sha256_final>

	(void)tc_sha256_init(&ctx->hash_state);
   1b53a:	4620      	mov	r0, r4
   1b53c:	f7f1 f9c6 	bl	c8cc <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
   1b540:	2240      	movs	r2, #64	; 0x40
   1b542:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   1b546:	4620      	mov	r0, r4
   1b548:	f7ff ff05 	bl	1b356 <tc_sha256_update>
			       &ctx->key[TC_SHA256_BLOCK_SIZE],
				TC_SHA256_BLOCK_SIZE);
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
   1b54c:	4632      	mov	r2, r6
   1b54e:	4629      	mov	r1, r5
   1b550:	4620      	mov	r0, r4
   1b552:	f7ff ff00 	bl	1b356 <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
   1b556:	4621      	mov	r1, r4
   1b558:	4628      	mov	r0, r5
   1b55a:	f7ff ff22 	bl	1b3a2 <tc_sha256_final>

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));
   1b55e:	4620      	mov	r0, r4
   1b560:	22f0      	movs	r2, #240	; 0xf0
   1b562:	2100      	movs	r1, #0
   1b564:	f7ff fcd9 	bl	1af1a <_set>

	return TC_CRYPTO_SUCCESS;
   1b568:	2001      	movs	r0, #1
}
   1b56a:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1b56c:	2000      	movs	r0, #0
   1b56e:	e7fc      	b.n	1b56a <tc_hmac_final+0x46>
   1b570:	4610      	mov	r0, r2
   1b572:	e7fa      	b.n	1b56a <tc_hmac_final+0x46>

0001b574 <update>:

/*
 * Assumes: prng != NULL
 */
static void update(TCHmacPrng_t prng, const uint8_t *data, unsigned int datalen, const uint8_t *additional_data, unsigned int additional_datalen)
{
   1b574:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b578:	4604      	mov	r4, r0
	const uint8_t separator0 = 0x00;
	const uint8_t separator1 = 0x01;
   1b57a:	f04f 0b01 	mov.w	fp, #1
{
   1b57e:	461f      	mov	r7, r3
	const uint8_t separator0 = 0x00;
   1b580:	2300      	movs	r3, #0
{
   1b582:	4688      	mov	r8, r1

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1b584:	f100 06f0 	add.w	r6, r0, #240	; 0xf0
   1b588:	4631      	mov	r1, r6
{
   1b58a:	4691      	mov	r9, r2
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1b58c:	2220      	movs	r2, #32
	const uint8_t separator0 = 0x00;
   1b58e:	f88d 3006 	strb.w	r3, [sp, #6]
{
   1b592:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
	const uint8_t separator1 = 0x01;
   1b596:	f88d b007 	strb.w	fp, [sp, #7]

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1b59a:	f504 7588 	add.w	r5, r4, #272	; 0x110
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1b59e:	f7ff ff7a 	bl	1b496 <tc_hmac_set_key>
	(void)tc_hmac_init(&prng->h);
   1b5a2:	4620      	mov	r0, r4
   1b5a4:	f7ff ffab 	bl	1b4fe <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1b5a8:	2220      	movs	r2, #32
   1b5aa:	4629      	mov	r1, r5
   1b5ac:	4620      	mov	r0, r4
   1b5ae:	f7ff ffb3 	bl	1b518 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
   1b5b2:	465a      	mov	r2, fp
   1b5b4:	4620      	mov	r0, r4
   1b5b6:	f10d 0106 	add.w	r1, sp, #6
   1b5ba:	f7ff ffad 	bl	1b518 <tc_hmac_update>

	if (data && datalen)
   1b5be:	f1b8 0f00 	cmp.w	r8, #0
   1b5c2:	d007      	beq.n	1b5d4 <update+0x60>
   1b5c4:	f1b9 0f00 	cmp.w	r9, #0
   1b5c8:	d004      	beq.n	1b5d4 <update+0x60>
		(void)tc_hmac_update(&prng->h, data, datalen);
   1b5ca:	464a      	mov	r2, r9
   1b5cc:	4641      	mov	r1, r8
   1b5ce:	4620      	mov	r0, r4
   1b5d0:	f7ff ffa2 	bl	1b518 <tc_hmac_update>
	if (additional_data && additional_datalen)
   1b5d4:	b13f      	cbz	r7, 1b5e6 <update+0x72>
   1b5d6:	f1ba 0f00 	cmp.w	sl, #0
   1b5da:	d004      	beq.n	1b5e6 <update+0x72>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   1b5dc:	4652      	mov	r2, sl
   1b5de:	4639      	mov	r1, r7
   1b5e0:	4620      	mov	r0, r4
   1b5e2:	f7ff ff99 	bl	1b518 <tc_hmac_update>

	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   1b5e6:	4622      	mov	r2, r4
   1b5e8:	2120      	movs	r1, #32
   1b5ea:	4630      	mov	r0, r6
   1b5ec:	f7ff ff9a 	bl	1b524 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1b5f0:	2220      	movs	r2, #32
   1b5f2:	4631      	mov	r1, r6
   1b5f4:	4620      	mov	r0, r4
   1b5f6:	f7ff ff4e 	bl	1b496 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   1b5fa:	4620      	mov	r0, r4
   1b5fc:	f7ff ff7f 	bl	1b4fe <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1b600:	2220      	movs	r2, #32
   1b602:	4629      	mov	r1, r5
   1b604:	4620      	mov	r0, r4
   1b606:	f7ff ff87 	bl	1b518 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   1b60a:	4622      	mov	r2, r4
   1b60c:	2120      	movs	r1, #32
   1b60e:	4628      	mov	r0, r5
   1b610:	f7ff ff88 	bl	1b524 <tc_hmac_final>

	if (data == 0 || datalen == 0)
   1b614:	f1b8 0f00 	cmp.w	r8, #0
   1b618:	d03a      	beq.n	1b690 <update+0x11c>
   1b61a:	f1b9 0f00 	cmp.w	r9, #0
   1b61e:	d037      	beq.n	1b690 <update+0x11c>
		return;

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1b620:	2220      	movs	r2, #32
   1b622:	4631      	mov	r1, r6
   1b624:	4620      	mov	r0, r4
   1b626:	f7ff ff36 	bl	1b496 <tc_hmac_set_key>

	/* use current state, e and separator 1 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
   1b62a:	4620      	mov	r0, r4
   1b62c:	f7ff ff67 	bl	1b4fe <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1b630:	2220      	movs	r2, #32
   1b632:	4629      	mov	r1, r5
   1b634:	4620      	mov	r0, r4
   1b636:	f7ff ff6f 	bl	1b518 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
   1b63a:	2201      	movs	r2, #1
   1b63c:	f10d 0107 	add.w	r1, sp, #7
   1b640:	4620      	mov	r0, r4
   1b642:	f7ff ff69 	bl	1b518 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, data, datalen);
   1b646:	464a      	mov	r2, r9
   1b648:	4641      	mov	r1, r8
   1b64a:	4620      	mov	r0, r4
   1b64c:	f7ff ff64 	bl	1b518 <tc_hmac_update>
	if (additional_data && additional_datalen)
   1b650:	b13f      	cbz	r7, 1b662 <update+0xee>
   1b652:	f1ba 0f00 	cmp.w	sl, #0
   1b656:	d004      	beq.n	1b662 <update+0xee>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   1b658:	4652      	mov	r2, sl
   1b65a:	4639      	mov	r1, r7
   1b65c:	4620      	mov	r0, r4
   1b65e:	f7ff ff5b 	bl	1b518 <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   1b662:	4622      	mov	r2, r4
   1b664:	2120      	movs	r1, #32
   1b666:	4630      	mov	r0, r6
   1b668:	f7ff ff5c 	bl	1b524 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1b66c:	2220      	movs	r2, #32
   1b66e:	4631      	mov	r1, r6
   1b670:	4620      	mov	r0, r4
   1b672:	f7ff ff10 	bl	1b496 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   1b676:	4620      	mov	r0, r4
   1b678:	f7ff ff41 	bl	1b4fe <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1b67c:	2220      	movs	r2, #32
   1b67e:	4629      	mov	r1, r5
   1b680:	4620      	mov	r0, r4
   1b682:	f7ff ff49 	bl	1b518 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   1b686:	4622      	mov	r2, r4
   1b688:	2120      	movs	r1, #32
   1b68a:	4628      	mov	r0, r5
   1b68c:	f7ff ff4a 	bl	1b524 <tc_hmac_final>
}
   1b690:	b003      	add	sp, #12
   1b692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001b696 <tc_hmac_prng_init>:

int tc_hmac_prng_init(TCHmacPrng_t prng,
		      const uint8_t *personalization,
		      unsigned int plen)
{
   1b696:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1b698:	460c      	mov	r4, r1
   1b69a:	4617      	mov	r7, r2

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   1b69c:	4605      	mov	r5, r0
   1b69e:	b1b0      	cbz	r0, 1b6ce <tc_hmac_prng_init+0x38>
	    personalization == (uint8_t *) 0 ||
   1b6a0:	b1b9      	cbz	r1, 1b6d2 <tc_hmac_prng_init+0x3c>

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
	_set(prng->v, 0x01, sizeof(prng->v));

	update(prng, personalization, plen, 0, 0);
   1b6a2:	2600      	movs	r6, #0
	_set(prng->key, 0x00, sizeof(prng->key));
   1b6a4:	2220      	movs	r2, #32
   1b6a6:	2100      	movs	r1, #0
   1b6a8:	30f0      	adds	r0, #240	; 0xf0
   1b6aa:	f7ff fc36 	bl	1af1a <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
   1b6ae:	2220      	movs	r2, #32
   1b6b0:	2101      	movs	r1, #1
   1b6b2:	f505 7088 	add.w	r0, r5, #272	; 0x110
   1b6b6:	f7ff fc30 	bl	1af1a <_set>
	update(prng, personalization, plen, 0, 0);
   1b6ba:	4628      	mov	r0, r5
   1b6bc:	4633      	mov	r3, r6
   1b6be:	463a      	mov	r2, r7
   1b6c0:	4621      	mov	r1, r4
   1b6c2:	9600      	str	r6, [sp, #0]
   1b6c4:	f7ff ff56 	bl	1b574 <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;

	return TC_CRYPTO_SUCCESS;
   1b6c8:	2001      	movs	r0, #1
	prng->countdown = 0;
   1b6ca:	f8c5 6130 	str.w	r6, [r5, #304]	; 0x130
}
   1b6ce:	b003      	add	sp, #12
   1b6d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   1b6d2:	4608      	mov	r0, r1
   1b6d4:	e7fb      	b.n	1b6ce <tc_hmac_prng_init+0x38>

0001b6d6 <tc_hmac_prng_reseed>:
int tc_hmac_prng_reseed(TCHmacPrng_t prng,
			const uint8_t *seed,
			unsigned int seedlen,
			const uint8_t *additional_input,
			unsigned int additionallen)
{
   1b6d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1b6d8:	9c08      	ldr	r4, [sp, #32]

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   1b6da:	4605      	mov	r5, r0
   1b6dc:	b180      	cbz	r0, 1b700 <tc_hmac_prng_reseed+0x2a>
   1b6de:	b179      	cbz	r1, 1b700 <tc_hmac_prng_reseed+0x2a>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
   1b6e0:	2a1f      	cmp	r2, #31
   1b6e2:	d90d      	bls.n	1b700 <tc_hmac_prng_reseed+0x2a>
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
   1b6e4:	b153      	cbz	r3, 1b6fc <tc_hmac_prng_reseed+0x26>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
   1b6e6:	b16c      	cbz	r4, 1b704 <tc_hmac_prng_reseed+0x2e>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
		} else {
			/* call update for the seed and additional_input */
			update(prng, seed, seedlen, additional_input, additionallen);
   1b6e8:	9400      	str	r4, [sp, #0]
		}
	} else {
		/* call update only for the seed */
		update(prng, seed, seedlen, 0, 0);
   1b6ea:	f7ff ff43 	bl	1b574 <update>
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
   1b6ee:	f04f 33ff 	mov.w	r3, #4294967295

	return TC_CRYPTO_SUCCESS;
   1b6f2:	2001      	movs	r0, #1
	prng->countdown = MAX_GENS;
   1b6f4:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
}
   1b6f8:	b003      	add	sp, #12
   1b6fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		update(prng, seed, seedlen, 0, 0);
   1b6fc:	9300      	str	r3, [sp, #0]
   1b6fe:	e7f4      	b.n	1b6ea <tc_hmac_prng_reseed+0x14>
		return TC_CRYPTO_FAIL;
   1b700:	2000      	movs	r0, #0
   1b702:	e7f9      	b.n	1b6f8 <tc_hmac_prng_reseed+0x22>
   1b704:	4620      	mov	r0, r4
   1b706:	e7f7      	b.n	1b6f8 <tc_hmac_prng_reseed+0x22>

0001b708 <tc_hmac_prng_generate>:

int tc_hmac_prng_generate(uint8_t *out, unsigned int outlen, TCHmacPrng_t prng)
{
   1b708:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1b70c:	460d      	mov	r5, r1
   1b70e:	4614      	mov	r4, r2
	unsigned int bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
   1b710:	4680      	mov	r8, r0
   1b712:	b3d8      	cbz	r0, 1b78c <tc_hmac_prng_generate+0x84>
   1b714:	b3d2      	cbz	r2, 1b78c <tc_hmac_prng_generate+0x84>
	    prng == (TCHmacPrng_t) 0 ||
   1b716:	1e4b      	subs	r3, r1, #1
   1b718:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
   1b71c:	d236      	bcs.n	1b78c <tc_hmac_prng_generate+0x84>
	    outlen == 0 ||
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
   1b71e:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   1b722:	b3ab      	cbz	r3, 1b790 <tc_hmac_prng_generate+0x88>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
   1b724:	3b01      	subs	r3, #1
   1b726:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
		/* configure the new prng key into the prng's instance of hmac */
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1b72a:	f102 09f0 	add.w	r9, r2, #240	; 0xf0

		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1b72e:	f502 7788 	add.w	r7, r2, #272	; 0x110
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1b732:	2220      	movs	r2, #32
   1b734:	4649      	mov	r1, r9
   1b736:	4620      	mov	r0, r4
   1b738:	f7ff fead 	bl	1b496 <tc_hmac_set_key>
		(void)tc_hmac_init(&prng->h);
   1b73c:	4620      	mov	r0, r4
   1b73e:	f7ff fede 	bl	1b4fe <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1b742:	2220      	movs	r2, #32
   1b744:	4639      	mov	r1, r7
   1b746:	4620      	mov	r0, r4
   1b748:	f7ff fee6 	bl	1b518 <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   1b74c:	4622      	mov	r2, r4
   1b74e:	2120      	movs	r1, #32
   1b750:	4638      	mov	r0, r7
   1b752:	f7ff fee7 	bl	1b524 <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
   1b756:	2d20      	cmp	r5, #32
   1b758:	462e      	mov	r6, r5
   1b75a:	bf28      	it	cs
   1b75c:	2620      	movcs	r6, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
   1b75e:	4640      	mov	r0, r8
   1b760:	4633      	mov	r3, r6
   1b762:	463a      	mov	r2, r7
   1b764:	4631      	mov	r1, r6
   1b766:	f7ff fbcb 	bl	1af00 <_copy>

		out += bufferlen;
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
   1b76a:	2d20      	cmp	r5, #32
   1b76c:	bf38      	it	cc
   1b76e:	2520      	movcc	r5, #32
	while (outlen != 0) {
   1b770:	3d20      	subs	r5, #32
		out += bufferlen;
   1b772:	44b0      	add	r8, r6
	while (outlen != 0) {
   1b774:	d1dd      	bne.n	1b732 <tc_hmac_prng_generate+0x2a>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, 0, 0, 0, 0);
   1b776:	4620      	mov	r0, r4
   1b778:	462b      	mov	r3, r5
   1b77a:	462a      	mov	r2, r5
   1b77c:	4629      	mov	r1, r5
   1b77e:	9500      	str	r5, [sp, #0]
   1b780:	f7ff fef8 	bl	1b574 <update>

	return TC_CRYPTO_SUCCESS;
   1b784:	2001      	movs	r0, #1
}
   1b786:	b003      	add	sp, #12
   1b788:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   1b78c:	2000      	movs	r0, #0
   1b78e:	e7fa      	b.n	1b786 <tc_hmac_prng_generate+0x7e>
		return TC_HMAC_PRNG_RESEED_REQ;
   1b790:	f04f 30ff 	mov.w	r0, #4294967295
   1b794:	e7f7      	b.n	1b786 <tc_hmac_prng_generate+0x7e>

0001b796 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   1b796:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   1b798:	6800      	ldr	r0, [r0, #0]
   1b79a:	f7f1 b8e1 	b.w	c960 <z_arm_fatal_error>

0001b79e <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1b79e:	2100      	movs	r1, #0
   1b7a0:	2001      	movs	r0, #1
   1b7a2:	f7f1 b8dd 	b.w	c960 <z_arm_fatal_error>

0001b7a6 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   1b7a6:	b508      	push	{r3, lr}
	handler();
   1b7a8:	f7f1 f98e 	bl	cac8 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1b7ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1b7b0:	f7f1 ba58 	b.w	cc64 <z_arm_exc_exit>

0001b7b4 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   1b7b4:	6e83      	ldr	r3, [r0, #104]	; 0x68
   1b7b6:	f383 880b 	msr	PSPLIM, r3
}
   1b7ba:	4770      	bx	lr

0001b7bc <z_log_msg_static_create.constprop.0>:
   1b7bc:	2300      	movs	r3, #0
   1b7be:	f7ef becf 	b.w	b560 <z_impl_z_log_msg_static_create>

0001b7c2 <z_arm_save_fp_context>:
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   1b7c2:	4770      	bx	lr

0001b7c4 <z_arm_restore_fp_context>:

void z_arm_restore_fp_context(const struct fpu_ctx_full *buffer)
   1b7c4:	4770      	bx	lr

0001b7c6 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   1b7c6:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   1b7ca:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1b7ce:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
   1b7d0:	bf08      	it	eq
   1b7d2:	f06f 0015 	mvneq.w	r0, #21
   1b7d6:	4770      	bx	lr

0001b7d8 <mpu_configure_region>:
{
   1b7d8:	b530      	push	{r4, r5, lr}
	p_attr->rbar = attr->rbar &
   1b7da:	890a      	ldrh	r2, [r1, #8]
   1b7dc:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
   1b7de:	680b      	ldr	r3, [r1, #0]
		&new_region->attr, new_region->start, new_region->size);
   1b7e0:	684c      	ldr	r4, [r1, #4]
   1b7e2:	f002 021f 	and.w	r2, r2, #31
{
   1b7e6:	b085      	sub	sp, #20
   1b7e8:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	region_conf.base = new_region->start;
   1b7ec:	9300      	str	r3, [sp, #0]
   1b7ee:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1b7f2:	f023 031f 	bic.w	r3, r3, #31
   1b7f6:	1e62      	subs	r2, r4, #1
   1b7f8:	4413      	add	r3, r2
   1b7fa:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   1b7fe:	2807      	cmp	r0, #7
   1b800:	9303      	str	r3, [sp, #12]
   1b802:	d904      	bls.n	1b80e <mpu_configure_region+0x36>
}
   1b804:	b005      	add	sp, #20
   1b806:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1b80a:	f7f1 be85 	b.w	d518 <region_allocate_and_init.part.0>
	region_init(index, region_conf);
   1b80e:	4669      	mov	r1, sp
   1b810:	f7f1 fe68 	bl	d4e4 <region_init>
}
   1b814:	b005      	add	sp, #20
   1b816:	bd30      	pop	{r4, r5, pc}

0001b818 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   1b818:	4603      	mov	r3, r0
   1b81a:	3901      	subs	r1, #1
   1b81c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1b820:	b90a      	cbnz	r2, 1b826 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   1b822:	701a      	strb	r2, [r3, #0]

	return dest;
}
   1b824:	4770      	bx	lr
		*d = *s;
   1b826:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   1b82a:	e7f7      	b.n	1b81c <strcpy+0x4>

0001b82c <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   1b82c:	4603      	mov	r3, r0
{
   1b82e:	b510      	push	{r4, lr}
   1b830:	3901      	subs	r1, #1
	while ((n > 0) && *s != '\0') {
   1b832:	b922      	cbnz	r2, 1b83e <strncpy+0x12>
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   1b834:	2100      	movs	r1, #0
   1b836:	441a      	add	r2, r3
	while (n > 0) {
   1b838:	4293      	cmp	r3, r2
   1b83a:	d108      	bne.n	1b84e <strncpy+0x22>
		d++;
		n--;
	}

	return dest;
}
   1b83c:	bd10      	pop	{r4, pc}
	while ((n > 0) && *s != '\0') {
   1b83e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1b842:	2c00      	cmp	r4, #0
   1b844:	d0f6      	beq.n	1b834 <strncpy+0x8>
		*d = *s;
   1b846:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
   1b84a:	3a01      	subs	r2, #1
   1b84c:	e7f1      	b.n	1b832 <strncpy+0x6>
		*d = '\0';
   1b84e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1b852:	e7f1      	b.n	1b838 <strncpy+0xc>

0001b854 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   1b854:	4603      	mov	r3, r0
	size_t n = 0;
   1b856:	2000      	movs	r0, #0

	while (*s != '\0') {
   1b858:	5c1a      	ldrb	r2, [r3, r0]
   1b85a:	b902      	cbnz	r2, 1b85e <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1b85c:	4770      	bx	lr
		n++;
   1b85e:	3001      	adds	r0, #1
   1b860:	e7fa      	b.n	1b858 <strlen+0x4>

0001b862 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   1b862:	4603      	mov	r3, r0
	size_t n = 0;
   1b864:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   1b866:	5c1a      	ldrb	r2, [r3, r0]
   1b868:	b10a      	cbz	r2, 1b86e <strnlen+0xc>
   1b86a:	4288      	cmp	r0, r1
   1b86c:	d100      	bne.n	1b870 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   1b86e:	4770      	bx	lr
		n++;
   1b870:	3001      	adds	r0, #1
   1b872:	e7f8      	b.n	1b866 <strnlen+0x4>

0001b874 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1b874:	1e43      	subs	r3, r0, #1
   1b876:	3901      	subs	r1, #1
   1b878:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1b87c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   1b880:	4282      	cmp	r2, r0
   1b882:	d101      	bne.n	1b888 <strcmp+0x14>
   1b884:	2a00      	cmp	r2, #0
   1b886:	d1f7      	bne.n	1b878 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1b888:	1a10      	subs	r0, r2, r0
   1b88a:	4770      	bx	lr

0001b88c <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   1b88c:	b570      	push	{r4, r5, r6, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   1b88e:	460b      	mov	r3, r1
   1b890:	4605      	mov	r5, r0
   1b892:	b162      	cbz	r2, 1b8ae <strncmp+0x22>
   1b894:	f810 6b01 	ldrb.w	r6, [r0], #1
   1b898:	781c      	ldrb	r4, [r3, #0]
   1b89a:	3101      	adds	r1, #1
   1b89c:	42b4      	cmp	r4, r6
   1b89e:	d100      	bne.n	1b8a2 <strncmp+0x16>
   1b8a0:	b91c      	cbnz	r4, 1b8aa <strncmp+0x1e>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   1b8a2:	782a      	ldrb	r2, [r5, #0]
   1b8a4:	781b      	ldrb	r3, [r3, #0]
   1b8a6:	1ad0      	subs	r0, r2, r3
   1b8a8:	e002      	b.n	1b8b0 <strncmp+0x24>
		n--;
   1b8aa:	3a01      	subs	r2, #1
   1b8ac:	e7ef      	b.n	1b88e <strncmp+0x2>
	return (n == 0) ? 0 : (*s1 - *s2);
   1b8ae:	4610      	mov	r0, r2
}
   1b8b0:	bd70      	pop	{r4, r5, r6, pc}

0001b8b2 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1b8b2:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1b8b4:	b15a      	cbz	r2, 1b8ce <memcmp+0x1c>
   1b8b6:	3901      	subs	r1, #1
   1b8b8:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1b8ba:	f810 2b01 	ldrb.w	r2, [r0], #1
   1b8be:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1b8c2:	42a0      	cmp	r0, r4
   1b8c4:	d001      	beq.n	1b8ca <memcmp+0x18>
   1b8c6:	429a      	cmp	r2, r3
   1b8c8:	d0f7      	beq.n	1b8ba <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1b8ca:	1ad0      	subs	r0, r2, r3
}
   1b8cc:	bd10      	pop	{r4, pc}
		return 0;
   1b8ce:	4610      	mov	r0, r2
   1b8d0:	e7fc      	b.n	1b8cc <memcmp+0x1a>

0001b8d2 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   1b8d2:	b510      	push	{r4, lr}
   1b8d4:	1e43      	subs	r3, r0, #1
   1b8d6:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   1b8d8:	4291      	cmp	r1, r2
   1b8da:	d100      	bne.n	1b8de <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1b8dc:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   1b8de:	f811 4b01 	ldrb.w	r4, [r1], #1
   1b8e2:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1b8e6:	e7f7      	b.n	1b8d8 <memcpy+0x6>

0001b8e8 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   1b8e8:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;
   1b8ea:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   1b8ec:	4402      	add	r2, r0
   1b8ee:	4293      	cmp	r3, r2
   1b8f0:	d100      	bne.n	1b8f4 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1b8f2:	4770      	bx	lr
		*(d_byte++) = c_byte;
   1b8f4:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1b8f8:	e7f9      	b.n	1b8ee <memset+0x6>

0001b8fa <_stdout_hook_default>:
}
   1b8fa:	f04f 30ff 	mov.w	r0, #4294967295
   1b8fe:	4770      	bx	lr

0001b900 <fputc>:
		union { uintptr_t x; FILE * val; } parm1 = { .val = stream };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_FPUTC);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_fputc(c, stream);
   1b900:	f7f1 bfa2 	b.w	d848 <z_impl_zephyr_fputc>

0001b904 <bt_rpa_irk_matches>:

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   1b904:	2203      	movs	r2, #3
	return 0;
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   1b906:	b530      	push	{r4, r5, lr}
   1b908:	4605      	mov	r5, r0
   1b90a:	b087      	sub	sp, #28
   1b90c:	460c      	mov	r4, r1
	memcpy(res, r, 3);
   1b90e:	a802      	add	r0, sp, #8
   1b910:	4411      	add	r1, r2
   1b912:	f7ff ffde 	bl	1b8d2 <memcpy>
	(void)memset(res + 3, 0, 13);
   1b916:	220d      	movs	r2, #13
   1b918:	2100      	movs	r1, #0
   1b91a:	f10d 000b 	add.w	r0, sp, #11
   1b91e:	f7ff ffe3 	bl	1b8e8 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   1b922:	aa02      	add	r2, sp, #8
   1b924:	4611      	mov	r1, r2
   1b926:	4628      	mov	r0, r5
   1b928:	f000 fb36 	bl	1bf98 <bt_encrypt_le>
	if (err) {
   1b92c:	b110      	cbz	r0, 1b934 <bt_rpa_irk_matches+0x30>

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
	if (err) {
		return false;
   1b92e:	2000      	movs	r0, #0
	}

	return !memcmp(addr->val, hash, 3);
}
   1b930:	b007      	add	sp, #28
   1b932:	bd30      	pop	{r4, r5, pc}
	memcpy(out, res, 3);
   1b934:	2203      	movs	r2, #3
   1b936:	a902      	add	r1, sp, #8
   1b938:	a801      	add	r0, sp, #4
   1b93a:	f7ff ffca 	bl	1b8d2 <memcpy>
	return !memcmp(addr->val, hash, 3);
   1b93e:	2203      	movs	r2, #3
   1b940:	4620      	mov	r0, r4
   1b942:	a901      	add	r1, sp, #4
   1b944:	f7ff ffb5 	bl	1b8b2 <memcmp>
   1b948:	fab0 f080 	clz	r0, r0
   1b94c:	0940      	lsrs	r0, r0, #5
   1b94e:	e7ef      	b.n	1b930 <bt_rpa_irk_matches+0x2c>

0001b950 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   1b950:	b510      	push	{r4, lr}
   1b952:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   1b954:	7801      	ldrb	r1, [r0, #0]
   1b956:	7822      	ldrb	r2, [r4, #0]
{
   1b958:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   1b95a:	428a      	cmp	r2, r1
   1b95c:	d00f      	beq.n	1b97e <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   1b95e:	4669      	mov	r1, sp
   1b960:	f7f2 f81c 	bl	d99c <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   1b964:	4620      	mov	r0, r4
   1b966:	a905      	add	r1, sp, #20
   1b968:	f7f2 f818 	bl	d99c <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   1b96c:	2210      	movs	r2, #16
   1b96e:	f10d 0115 	add.w	r1, sp, #21
   1b972:	f10d 0001 	add.w	r0, sp, #1
   1b976:	f7ff ff9c 	bl	1b8b2 <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   1b97a:	b00a      	add	sp, #40	; 0x28
   1b97c:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   1b97e:	2a01      	cmp	r2, #1
   1b980:	d006      	beq.n	1b990 <bt_uuid_cmp+0x40>
   1b982:	2a02      	cmp	r2, #2
   1b984:	d007      	beq.n	1b996 <bt_uuid_cmp+0x46>
   1b986:	b972      	cbnz	r2, 1b9a6 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   1b988:	8840      	ldrh	r0, [r0, #2]
   1b98a:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1b98c:	1ac0      	subs	r0, r0, r3
   1b98e:	e7f4      	b.n	1b97a <bt_uuid_cmp+0x2a>
   1b990:	6840      	ldr	r0, [r0, #4]
   1b992:	6863      	ldr	r3, [r4, #4]
   1b994:	e7fa      	b.n	1b98c <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1b996:	2210      	movs	r2, #16
   1b998:	1c61      	adds	r1, r4, #1
   1b99a:	3001      	adds	r0, #1
}
   1b99c:	b00a      	add	sp, #40	; 0x28
   1b99e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1b9a2:	f7ff bf86 	b.w	1b8b2 <memcmp>
	switch (u1->type) {
   1b9a6:	f06f 0015 	mvn.w	r0, #21
   1b9aa:	e7e6      	b.n	1b97a <bt_uuid_cmp+0x2a>

0001b9ac <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   1b9ac:	2a04      	cmp	r2, #4
{
   1b9ae:	b510      	push	{r4, lr}
	switch (data_len) {
   1b9b0:	d00a      	beq.n	1b9c8 <bt_uuid_create+0x1c>
   1b9b2:	2a10      	cmp	r2, #16
   1b9b4:	d00d      	beq.n	1b9d2 <bt_uuid_create+0x26>
   1b9b6:	2a02      	cmp	r2, #2
   1b9b8:	f04f 0300 	mov.w	r3, #0
   1b9bc:	d10f      	bne.n	1b9de <bt_uuid_create+0x32>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   1b9be:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   1b9c0:	880b      	ldrh	r3, [r1, #0]
   1b9c2:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   1b9c4:	2001      	movs	r0, #1
}
   1b9c6:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   1b9c8:	2301      	movs	r3, #1
   1b9ca:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1b9cc:	680b      	ldr	r3, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   1b9ce:	6043      	str	r3, [r0, #4]
		break;
   1b9d0:	e7f8      	b.n	1b9c4 <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   1b9d2:	2302      	movs	r3, #2
   1b9d4:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   1b9d8:	f7ff ff7b 	bl	1b8d2 <memcpy>
		break;
   1b9dc:	e7f2      	b.n	1b9c4 <bt_uuid_create+0x18>
	switch (data_len) {
   1b9de:	4618      	mov	r0, r3
   1b9e0:	e7f1      	b.n	1b9c6 <bt_uuid_create+0x1a>

0001b9e2 <bt_addr_le_create_static>:
#include <zephyr/bluetooth/addr.h>
#include <zephyr/bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   1b9e2:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   1b9e4:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   1b9e6:	2106      	movs	r1, #6
{
   1b9e8:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   1b9ea:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   1b9ee:	f7f4 fcb5 	bl	1035c <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   1b9f2:	b918      	cbnz	r0, 1b9fc <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   1b9f4:	79a3      	ldrb	r3, [r4, #6]
   1b9f6:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1b9fa:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   1b9fc:	bd10      	pop	{r4, pc}

0001b9fe <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   1b9fe:	280f      	cmp	r0, #15
   1ba00:	d807      	bhi.n	1ba12 <bt_hci_evt_get_flags+0x14>
   1ba02:	280d      	cmp	r0, #13
   1ba04:	d80b      	bhi.n	1ba1e <bt_hci_evt_get_flags+0x20>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   1ba06:	2805      	cmp	r0, #5
   1ba08:	bf08      	it	eq
   1ba0a:	2003      	moveq	r0, #3
   1ba0c:	bf18      	it	ne
   1ba0e:	2002      	movne	r0, #2
   1ba10:	4770      	bx	lr
	switch (evt) {
   1ba12:	2813      	cmp	r0, #19
   1ba14:	d003      	beq.n	1ba1e <bt_hci_evt_get_flags+0x20>
		return BT_HCI_EVT_FLAG_RECV;
   1ba16:	281a      	cmp	r0, #26
   1ba18:	bf08      	it	eq
   1ba1a:	2001      	moveq	r0, #1
   1ba1c:	e7f6      	b.n	1ba0c <bt_hci_evt_get_flags+0xe>
	switch (evt) {
   1ba1e:	2001      	movs	r0, #1
	}
}
   1ba20:	4770      	bx	lr

0001ba22 <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   1ba22:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
   1ba26:	b183      	cbz	r3, 1ba4a <update_sec_level+0x28>
   1ba28:	7b5a      	ldrb	r2, [r3, #13]
   1ba2a:	07d1      	lsls	r1, r2, #31
   1ba2c:	d50d      	bpl.n	1ba4a <update_sec_level+0x28>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   1ba2e:	06d2      	lsls	r2, r2, #27
   1ba30:	d50d      	bpl.n	1ba4e <update_sec_level+0x2c>
   1ba32:	7b1b      	ldrb	r3, [r3, #12]
   1ba34:	2b10      	cmp	r3, #16
   1ba36:	bf14      	ite	ne
   1ba38:	2303      	movne	r3, #3
   1ba3a:	2304      	moveq	r3, #4
			conn->sec_level = BT_SECURITY_L3;
   1ba3c:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   1ba3e:	7a80      	ldrb	r0, [r0, #10]
}
   1ba40:	4298      	cmp	r0, r3
   1ba42:	bf8c      	ite	hi
   1ba44:	2000      	movhi	r0, #0
   1ba46:	2001      	movls	r0, #1
   1ba48:	4770      	bx	lr
   1ba4a:	2302      	movs	r3, #2
   1ba4c:	e7f6      	b.n	1ba3c <update_sec_level+0x1a>
   1ba4e:	2303      	movs	r3, #3
   1ba50:	e7f4      	b.n	1ba3c <update_sec_level+0x1a>

0001ba52 <hci_vendor_event>:
}
   1ba52:	4770      	bx	lr

0001ba54 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1ba54:	2207      	movs	r2, #7
   1ba56:	f7ff bf3c 	b.w	1b8d2 <memcpy>

0001ba5a <atomic_or>:
{
   1ba5a:	4603      	mov	r3, r0
   1ba5c:	b510      	push	{r4, lr}
}
   1ba5e:	e8d3 0fef 	ldaex	r0, [r3]
   1ba62:	ea40 0201 	orr.w	r2, r0, r1
   1ba66:	e8c3 2fe4 	stlex	r4, r2, [r3]
   1ba6a:	2c00      	cmp	r4, #0
   1ba6c:	d1f7      	bne.n	1ba5e <atomic_or+0x4>
   1ba6e:	bd10      	pop	{r4, pc}

0001ba70 <z_log_msg_static_create.constprop.0>:
   1ba70:	2300      	movs	r3, #0
   1ba72:	f7ef bd75 	b.w	b560 <z_impl_z_log_msg_static_create>

0001ba76 <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1ba76:	e8d0 3fef 	ldaex	r3, [r0]
   1ba7a:	400b      	ands	r3, r1
   1ba7c:	e8c0 3fe2 	stlex	r2, r3, [r0]
   1ba80:	2a00      	cmp	r2, #0
   1ba82:	d1f8      	bne.n	1ba76 <atomic_and.isra.0>
}
   1ba84:	4770      	bx	lr

0001ba86 <sys_put_le64>:
	dst[1] = val >> 8;
   1ba86:	f3c0 2307 	ubfx	r3, r0, #8, #8
   1ba8a:	7053      	strb	r3, [r2, #1]
	dst[0] = val;
   1ba8c:	2300      	movs	r3, #0
   1ba8e:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   1ba90:	0e00      	lsrs	r0, r0, #24
   1ba92:	70d0      	strb	r0, [r2, #3]
   1ba94:	f3c1 2007 	ubfx	r0, r1, #8, #8
   1ba98:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   1ba9a:	7093      	strb	r3, [r2, #2]
   1ba9c:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   1ba9e:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   1baa0:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   1baa2:	71d1      	strb	r1, [r2, #7]
}
   1baa4:	4770      	bx	lr

0001baa6 <bt_hci_disconnect>:
{
   1baa6:	b570      	push	{r4, r5, r6, lr}
   1baa8:	4606      	mov	r6, r0
   1baaa:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   1baac:	f240 4006 	movw	r0, #1030	; 0x406
   1bab0:	2103      	movs	r1, #3
   1bab2:	f7f2 fc83 	bl	e3bc <bt_hci_cmd_create>
	if (!buf) {
   1bab6:	4604      	mov	r4, r0
   1bab8:	b168      	cbz	r0, 1bad6 <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   1baba:	2103      	movs	r1, #3
   1babc:	3008      	adds	r0, #8
   1babe:	f002 f83d 	bl	1db3c <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   1bac2:	8006      	strh	r6, [r0, #0]
	disconn->reason = reason;
   1bac4:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1bac6:	4621      	mov	r1, r4
}
   1bac8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1bacc:	2200      	movs	r2, #0
   1bace:	f240 4006 	movw	r0, #1030	; 0x406
   1bad2:	f7f2 bcad 	b.w	e430 <bt_hci_cmd_send_sync>
}
   1bad6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1bada:	bd70      	pop	{r4, r5, r6, pc}

0001badc <bt_le_set_data_len>:
{
   1badc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bade:	4607      	mov	r7, r0
   1bae0:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1bae2:	f242 0022 	movw	r0, #8226	; 0x2022
   1bae6:	2106      	movs	r1, #6
{
   1bae8:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1baea:	f7f2 fc67 	bl	e3bc <bt_hci_cmd_create>
	if (!buf) {
   1baee:	4604      	mov	r4, r0
   1baf0:	b178      	cbz	r0, 1bb12 <bt_le_set_data_len+0x36>
   1baf2:	2106      	movs	r1, #6
   1baf4:	3008      	adds	r0, #8
   1baf6:	f002 f821 	bl	1db3c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1bafa:	883b      	ldrh	r3, [r7, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   1bafc:	8046      	strh	r6, [r0, #2]
	cp->handle = sys_cpu_to_le16(conn->handle);
   1bafe:	8003      	strh	r3, [r0, #0]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   1bb00:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   1bb02:	4621      	mov	r1, r4
}
   1bb04:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   1bb08:	2200      	movs	r2, #0
   1bb0a:	f242 0022 	movw	r0, #8226	; 0x2022
   1bb0e:	f7f2 bc8f 	b.w	e430 <bt_hci_cmd_send_sync>
}
   1bb12:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1bb16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001bb18 <bt_le_set_phy>:
{
   1bb18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1bb1c:	4681      	mov	r9, r0
   1bb1e:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1bb20:	f242 0032 	movw	r0, #8242	; 0x2032
   1bb24:	2107      	movs	r1, #7
{
   1bb26:	4617      	mov	r7, r2
   1bb28:	461e      	mov	r6, r3
   1bb2a:	f89d a020 	ldrb.w	sl, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1bb2e:	f7f2 fc45 	bl	e3bc <bt_hci_cmd_create>
	if (!buf) {
   1bb32:	4605      	mov	r5, r0
   1bb34:	b1a0      	cbz	r0, 1bb60 <bt_le_set_phy+0x48>
   1bb36:	2107      	movs	r1, #7
   1bb38:	3008      	adds	r0, #8
   1bb3a:	f001 ffff 	bl	1db3c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1bb3e:	f8b9 3000 	ldrh.w	r3, [r9]
	cp->all_phys = all_phys;
   1bb42:	f880 8002 	strb.w	r8, [r0, #2]
	cp->handle = sys_cpu_to_le16(conn->handle);
   1bb46:	8003      	strh	r3, [r0, #0]
	cp->tx_phys = pref_tx_phy;
   1bb48:	70c7      	strb	r7, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   1bb4a:	7106      	strb	r6, [r0, #4]
	cp->phy_opts = phy_opts;
   1bb4c:	f8a0 a005 	strh.w	sl, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   1bb50:	4629      	mov	r1, r5
}
   1bb52:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   1bb56:	2200      	movs	r2, #0
   1bb58:	f242 0032 	movw	r0, #8242	; 0x2032
   1bb5c:	f7f2 bc68 	b.w	e430 <bt_hci_cmd_send_sync>
}
   1bb60:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1bb64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001bb68 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   1bb68:	6880      	ldr	r0, [r0, #8]
   1bb6a:	f7f2 bd3f 	b.w	e5ec <bt_hci_le_enh_conn_complete>

0001bb6e <bt_le_conn_params_valid>:
{
   1bb6e:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   1bb70:	8803      	ldrh	r3, [r0, #0]
   1bb72:	8842      	ldrh	r2, [r0, #2]
   1bb74:	4293      	cmp	r3, r2
   1bb76:	d819      	bhi.n	1bbac <bt_le_conn_params_valid+0x3e>
   1bb78:	2b05      	cmp	r3, #5
   1bb7a:	d917      	bls.n	1bbac <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   1bb7c:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   1bb80:	d814      	bhi.n	1bbac <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   1bb82:	8883      	ldrh	r3, [r0, #4]
   1bb84:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   1bb88:	d210      	bcs.n	1bbac <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   1bb8a:	f640 4476 	movw	r4, #3190	; 0xc76
   1bb8e:	88c0      	ldrh	r0, [r0, #6]
   1bb90:	f1a0 010a 	sub.w	r1, r0, #10
   1bb94:	b289      	uxth	r1, r1
   1bb96:	42a1      	cmp	r1, r4
   1bb98:	d808      	bhi.n	1bbac <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   1bb9a:	3301      	adds	r3, #1
   1bb9c:	b29b      	uxth	r3, r3
   1bb9e:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   1bba0:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   1bba4:	bf34      	ite	cc
   1bba6:	2001      	movcc	r0, #1
   1bba8:	2000      	movcs	r0, #0
}
   1bbaa:	bd10      	pop	{r4, pc}
		return false;
   1bbac:	2000      	movs	r0, #0
   1bbae:	e7fc      	b.n	1bbaa <bt_le_conn_params_valid+0x3c>

0001bbb0 <le_conn_param_neg_reply>:
{
   1bbb0:	b570      	push	{r4, r5, r6, lr}
   1bbb2:	4606      	mov	r6, r0
   1bbb4:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   1bbb6:	f242 0021 	movw	r0, #8225	; 0x2021
   1bbba:	2103      	movs	r1, #3
   1bbbc:	f7f2 fbfe 	bl	e3bc <bt_hci_cmd_create>
	if (!buf) {
   1bbc0:	4604      	mov	r4, r0
   1bbc2:	b918      	cbnz	r0, 1bbcc <le_conn_param_neg_reply+0x1c>
}
   1bbc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1bbc8:	f7f1 bfe6 	b.w	db98 <le_conn_param_neg_reply.part.0>
   1bbcc:	2103      	movs	r1, #3
   1bbce:	3008      	adds	r0, #8
   1bbd0:	f001 ffb4 	bl	1db3c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   1bbd4:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   1bbd6:	7085      	strb	r5, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1bbd8:	4621      	mov	r1, r4
}
   1bbda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1bbde:	f242 0021 	movw	r0, #8225	; 0x2021
   1bbe2:	f7f2 bf91 	b.w	eb08 <bt_hci_cmd_send>

0001bbe6 <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   1bbe6:	f240 3041 	movw	r0, #833	; 0x341
   1bbea:	4770      	bx	lr

0001bbec <bt_addr_le_is_bonded>:
	return 0;
}
#endif

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   1bbec:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   1bbee:	f7f9 fbcb 	bl	15388 <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   1bbf2:	b118      	cbz	r0, 1bbfc <bt_addr_le_is_bonded+0x10>
   1bbf4:	89c0      	ldrh	r0, [r0, #14]
   1bbf6:	3800      	subs	r0, #0
   1bbf8:	bf18      	it	ne
   1bbfa:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
   1bbfc:	bd08      	pop	{r3, pc}

0001bbfe <bt_addr_le_eq>:
	return memcmp(a, b, sizeof(*a));
   1bbfe:	2207      	movs	r2, #7
{
   1bc00:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   1bc02:	f7ff fe56 	bl	1b8b2 <memcmp>
}
   1bc06:	fab0 f080 	clz	r0, r0
   1bc0a:	0940      	lsrs	r0, r0, #5
   1bc0c:	bd08      	pop	{r3, pc}

0001bc0e <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1bc0e:	2207      	movs	r2, #7
   1bc10:	f7ff be5f 	b.w	1b8d2 <memcpy>

0001bc14 <hci_id_add>:
{
   1bc14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bc18:	4688      	mov	r8, r1
   1bc1a:	4617      	mov	r7, r2
	if (id >= CONFIG_BT_ID_MAX) {
   1bc1c:	4605      	mov	r5, r0
   1bc1e:	bb08      	cbnz	r0, 1bc64 <hci_id_add+0x50>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   1bc20:	2127      	movs	r1, #39	; 0x27
   1bc22:	f242 0027 	movw	r0, #8231	; 0x2027
   1bc26:	f7f2 fbc9 	bl	e3bc <bt_hci_cmd_create>
	if (!buf) {
   1bc2a:	4604      	mov	r4, r0
   1bc2c:	b1f0      	cbz	r0, 1bc6c <hci_id_add+0x58>
   1bc2e:	2127      	movs	r1, #39	; 0x27
   1bc30:	3008      	adds	r0, #8
   1bc32:	f001 ff83 	bl	1db3c <net_buf_simple_add>
   1bc36:	4606      	mov	r6, r0
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   1bc38:	4641      	mov	r1, r8
   1bc3a:	f7ff ffe8 	bl	1bc0e <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
   1bc3e:	4639      	mov	r1, r7
   1bc40:	2210      	movs	r2, #16
   1bc42:	1df0      	adds	r0, r6, #7
   1bc44:	f7ff fe45 	bl	1b8d2 <memcpy>
	(void)memset(cp->local_irk, 0, 16);
   1bc48:	4629      	mov	r1, r5
   1bc4a:	2210      	movs	r2, #16
   1bc4c:	f106 0017 	add.w	r0, r6, #23
   1bc50:	f7ff fe4a 	bl	1b8e8 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   1bc54:	462a      	mov	r2, r5
   1bc56:	4621      	mov	r1, r4
}
   1bc58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   1bc5c:	f242 0027 	movw	r0, #8231	; 0x2027
   1bc60:	f7f2 bbe6 	b.w	e430 <bt_hci_cmd_send_sync>
		return -EINVAL;
   1bc64:	f06f 0015 	mvn.w	r0, #21
}
   1bc68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOBUFS;
   1bc6c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1bc70:	e7fa      	b.n	1bc68 <hci_id_add+0x54>

0001bc72 <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   1bc72:	7a03      	ldrb	r3, [r0, #8]
{
   1bc74:	4602      	mov	r2, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   1bc76:	075b      	lsls	r3, r3, #29
   1bc78:	d505      	bpl.n	1bc86 <keys_add_id+0x14>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   1bc7a:	4601      	mov	r1, r0
   1bc7c:	322a      	adds	r2, #42	; 0x2a
   1bc7e:	f811 0b01 	ldrb.w	r0, [r1], #1
   1bc82:	f7ff bfc7 	b.w	1bc14 <hci_id_add>
}
   1bc86:	4770      	bx	lr

0001bc88 <z_log_msg_static_create.constprop.0>:
   1bc88:	2300      	movs	r3, #0
   1bc8a:	f7ef bc69 	b.w	b560 <z_impl_z_log_msg_static_create>

0001bc8e <addr_res_enable>:
{
   1bc8e:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   1bc90:	2101      	movs	r1, #1
{
   1bc92:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   1bc94:	f242 002d 	movw	r0, #8237	; 0x202d
   1bc98:	f7f2 fb90 	bl	e3bc <bt_hci_cmd_create>
	if (!buf) {
   1bc9c:	4604      	mov	r4, r0
   1bc9e:	b158      	cbz	r0, 1bcb8 <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   1bca0:	4629      	mov	r1, r5
   1bca2:	3008      	adds	r0, #8
   1bca4:	f001 ff59 	bl	1db5a <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   1bca8:	4621      	mov	r1, r4
}
   1bcaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   1bcae:	2200      	movs	r2, #0
   1bcb0:	f242 002d 	movw	r0, #8237	; 0x202d
   1bcb4:	f7f2 bbbc 	b.w	e430 <bt_hci_cmd_send_sync>
}
   1bcb8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1bcbc:	bd38      	pop	{r3, r4, r5, pc}

0001bcbe <adv_unpause_enabled>:
{
   1bcbe:	b410      	push	{r4}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1bcc0:	f100 0310 	add.w	r3, r0, #16
   1bcc4:	e8d3 2fef 	ldaex	r2, [r3]
   1bcc8:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
   1bccc:	e8c3 1fe4 	stlex	r4, r1, [r3]
   1bcd0:	2c00      	cmp	r4, #0
   1bcd2:	d1f7      	bne.n	1bcc4 <adv_unpause_enabled+0x6>
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   1bcd4:	0413      	lsls	r3, r2, #16
   1bcd6:	d503      	bpl.n	1bce0 <adv_unpause_enabled+0x22>
		bt_le_adv_set_enable(adv, true);
   1bcd8:	2101      	movs	r1, #1
}
   1bcda:	bc10      	pop	{r4}
		bt_le_adv_set_enable(adv, true);
   1bcdc:	f000 b957 	b.w	1bf8e <bt_le_adv_set_enable>
}
   1bce0:	bc10      	pop	{r4}
   1bce2:	4770      	bx	lr

0001bce4 <find_rl_conflict>:
{
   1bce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conflict->found) {
   1bce8:	684f      	ldr	r7, [r1, #4]
{
   1bcea:	4605      	mov	r5, r0
   1bcec:	460c      	mov	r4, r1
   1bcee:	b086      	sub	sp, #24
	if (conflict->found) {
   1bcf0:	b9c7      	cbnz	r7, 1bd24 <find_rl_conflict+0x40>
	if ((resident->state & BT_KEYS_ID_ADDED) == 0) {
   1bcf2:	7a03      	ldrb	r3, [r0, #8]
   1bcf4:	075b      	lsls	r3, r3, #29
   1bcf6:	d515      	bpl.n	1bd24 <find_rl_conflict+0x40>
	addr_conflict = bt_addr_le_eq(&conflict->candidate->addr, &resident->addr);
   1bcf8:	6808      	ldr	r0, [r1, #0]
   1bcfa:	1c69      	adds	r1, r5, #1
   1bcfc:	3001      	adds	r0, #1
   1bcfe:	f7ff ff7e 	bl	1bbfe <bt_addr_le_eq>
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   1bd02:	f8d4 8000 	ldr.w	r8, [r4]
   1bd06:	2216      	movs	r2, #22
   1bd08:	4639      	mov	r1, r7
	addr_conflict = bt_addr_le_eq(&conflict->candidate->addr, &resident->addr);
   1bd0a:	4606      	mov	r6, r0
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   1bd0c:	4668      	mov	r0, sp
   1bd0e:	f7ff fdeb 	bl	1b8e8 <memset>
	bt_addr_t               rpa;
};

static inline bool bt_irk_eq(struct bt_irk const *a, struct bt_irk const *b)
{
	return (memcmp(a->val, b->val, sizeof(a->val)) == 0);
   1bd12:	2210      	movs	r2, #16
   1bd14:	4669      	mov	r1, sp
   1bd16:	f108 002a 	add.w	r0, r8, #42	; 0x2a
   1bd1a:	f7ff fdca 	bl	1b8b2 <memcmp>
   1bd1e:	b920      	cbnz	r0, 1bd2a <find_rl_conflict+0x46>
	if (addr_conflict || irk_conflict) {
   1bd20:	b106      	cbz	r6, 1bd24 <find_rl_conflict+0x40>
		conflict->found = resident;
   1bd22:	6065      	str	r5, [r4, #4]
}
   1bd24:	b006      	add	sp, #24
   1bd26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bd2a:	6820      	ldr	r0, [r4, #0]
   1bd2c:	2210      	movs	r2, #16
   1bd2e:	f105 012a 	add.w	r1, r5, #42	; 0x2a
   1bd32:	302a      	adds	r0, #42	; 0x2a
   1bd34:	f7ff fdbd 	bl	1b8b2 <memcmp>
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   1bd38:	2800      	cmp	r0, #0
   1bd3a:	d0f2      	beq.n	1bd22 <find_rl_conflict+0x3e>
   1bd3c:	e7f0      	b.n	1bd20 <find_rl_conflict+0x3c>

0001bd3e <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1bd3e:	f100 0310 	add.w	r3, r0, #16
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1bd42:	e8d3 2faf 	lda	r2, [r3]
   1bd46:	0612      	lsls	r2, r2, #24
   1bd48:	d50a      	bpl.n	1bd60 <adv_pause_enabled+0x22>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1bd4a:	e8d3 1fef 	ldaex	r1, [r3]
   1bd4e:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
   1bd52:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1bd56:	2a00      	cmp	r2, #0
   1bd58:	d1f7      	bne.n	1bd4a <adv_pause_enabled+0xc>
		bt_le_adv_set_enable(adv, false);
   1bd5a:	2100      	movs	r1, #0
   1bd5c:	f000 b917 	b.w	1bf8e <bt_le_adv_set_enable>
}
   1bd60:	4770      	bx	lr

0001bd62 <bt_lookup_id_addr>:
{
   1bd62:	b510      	push	{r4, lr}
   1bd64:	460c      	mov	r4, r1
	CHECKIF(id >= CONFIG_BT_ID_MAX || addr == NULL) {
   1bd66:	b930      	cbnz	r0, 1bd76 <bt_lookup_id_addr+0x14>
   1bd68:	b119      	cbz	r1, 1bd72 <bt_lookup_id_addr+0x10>
		keys = bt_keys_find_irk(id, addr);
   1bd6a:	f7f9 fac9 	bl	15300 <bt_keys_find_irk>
		if (keys) {
   1bd6e:	b100      	cbz	r0, 1bd72 <bt_lookup_id_addr+0x10>
			return &keys->addr;
   1bd70:	1c44      	adds	r4, r0, #1
}
   1bd72:	4620      	mov	r0, r4
   1bd74:	bd10      	pop	{r4, pc}
		return NULL;
   1bd76:	2400      	movs	r4, #0
   1bd78:	e7fb      	b.n	1bd72 <bt_lookup_id_addr+0x10>

0001bd7a <bt_id_set_adv_random_addr>:
	CHECKIF(adv == NULL || addr == NULL) {
   1bd7a:	b118      	cbz	r0, 1bd84 <bt_id_set_adv_random_addr+0xa>
   1bd7c:	b111      	cbz	r1, 1bd84 <bt_id_set_adv_random_addr+0xa>
		return set_random_address(addr);
   1bd7e:	4608      	mov	r0, r1
   1bd80:	f7f3 bc5e 	b.w	f640 <set_random_address>
}
   1bd84:	f06f 0015 	mvn.w	r0, #21
   1bd88:	4770      	bx	lr

0001bd8a <bt_id_set_adv_private_addr>:
{
   1bd8a:	b513      	push	{r0, r1, r4, lr}
	CHECKIF(adv == NULL) {
   1bd8c:	4604      	mov	r4, r0
   1bd8e:	b180      	cbz	r0, 1bdb2 <bt_id_set_adv_private_addr+0x28>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   1bd90:	2106      	movs	r1, #6
   1bd92:	4668      	mov	r0, sp
   1bd94:	f7f4 fae2 	bl	1035c <bt_rand>
	if (err) {
   1bd98:	b948      	cbnz	r0, 1bdae <bt_id_set_adv_private_addr+0x24>
	BT_ADDR_SET_NRPA(&nrpa);
   1bd9a:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   1bd9e:	4669      	mov	r1, sp
	BT_ADDR_SET_NRPA(&nrpa);
   1bda0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   1bda4:	4620      	mov	r0, r4
	BT_ADDR_SET_NRPA(&nrpa);
   1bda6:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   1bdaa:	f7ff ffe6 	bl	1bd7a <bt_id_set_adv_random_addr>
}
   1bdae:	b002      	add	sp, #8
   1bdb0:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1bdb2:	f06f 0015 	mvn.w	r0, #21
   1bdb6:	e7fa      	b.n	1bdae <bt_id_set_adv_private_addr+0x24>

0001bdb8 <bt_id_adv_random_addr_check>:
}
   1bdb8:	3800      	subs	r0, #0
   1bdba:	bf18      	it	ne
   1bdbc:	2001      	movne	r0, #1
   1bdbe:	4770      	bx	lr

0001bdc0 <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   1bdc0:	7a03      	ldrb	r3, [r0, #8]
   1bdc2:	07d9      	lsls	r1, r3, #31
   1bdc4:	d504      	bpl.n	1bdd0 <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   1bdc6:	f023 0301 	bic.w	r3, r3, #1
   1bdca:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   1bdcc:	f7f3 bd22 	b.w	f814 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   1bdd0:	0799      	lsls	r1, r3, #30
   1bdd2:	d504      	bpl.n	1bdde <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   1bdd4:	f023 0302 	bic.w	r3, r3, #2
   1bdd8:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   1bdda:	f7f3 bd35 	b.w	f848 <bt_id_del>
}
   1bdde:	4770      	bx	lr

0001bde0 <get_adv_channel_map>:
{
   1bde0:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   1bde2:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   1bde6:	bf0c      	ite	eq
   1bde8:	2007      	moveq	r0, #7
   1bdea:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   1bdec:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   1bdee:	bf48      	it	mi
   1bdf0:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   1bdf4:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   1bdf6:	bf48      	it	mi
   1bdf8:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   1bdfc:	4770      	bx	lr

0001bdfe <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1bdfe:	e8d0 0faf 	lda	r0, [r0]
}
   1be02:	4770      	bx	lr

0001be04 <atomic_and>:
{
   1be04:	4603      	mov	r3, r0
   1be06:	b510      	push	{r4, lr}
}
   1be08:	e8d3 0fef 	ldaex	r0, [r3]
   1be0c:	ea00 0201 	and.w	r2, r0, r1
   1be10:	e8c3 2fe4 	stlex	r4, r2, [r3]
   1be14:	2c00      	cmp	r4, #0
   1be16:	d1f7      	bne.n	1be08 <atomic_and+0x4>
   1be18:	bd10      	pop	{r4, pc}

0001be1a <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1be1a:	2301      	movs	r3, #1
{
   1be1c:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1be1e:	fa03 f101 	lsl.w	r1, r3, r1
{
   1be22:	4604      	mov	r4, r0
	if (val) {
   1be24:	b142      	cbz	r2, 1be38 <atomic_set_bit_to+0x1e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1be26:	e8d4 3fef 	ldaex	r3, [r4]
   1be2a:	430b      	orrs	r3, r1
   1be2c:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1be30:	2a00      	cmp	r2, #0
   1be32:	d1f8      	bne.n	1be26 <atomic_set_bit_to+0xc>
	}
}
   1be34:	bc10      	pop	{r4}
   1be36:	4770      	bx	lr
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1be38:	43c9      	mvns	r1, r1
}
   1be3a:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1be3c:	f7ff bfe2 	b.w	1be04 <atomic_and>

0001be40 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   1be40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1be44:	b087      	sub	sp, #28
   1be46:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   1be4a:	4605      	mov	r5, r0
   1be4c:	460c      	mov	r4, r1
   1be4e:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   1be50:	2100      	movs	r1, #0
   1be52:	2210      	movs	r2, #16
   1be54:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   1be56:	461f      	mov	r7, r3
   1be58:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   1be5c:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
	struct bt_ad d[2] = {};
   1be60:	f7ff fd42 	bl	1b8e8 <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   1be64:	b9ce      	cbnz	r6, 1be9a <le_adv_update.constprop.0+0x5a>
		d[0].len = ad_len;
   1be66:	e9cd 4802 	strd	r4, r8, [sp, #8]
		d_len = 1;
   1be6a:	2201      	movs	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   1be6c:	f242 0008 	movw	r0, #8200	; 0x2008
   1be70:	a902      	add	r1, sp, #8
   1be72:	f7f3 feeb 	bl	fc4c <hci_set_ad>
		if (err) {
   1be76:	4604      	mov	r4, r0
   1be78:	b958      	cbnz	r0, 1be92 <le_adv_update.constprop.0+0x52>
	if (scannable) {
   1be7a:	f1ba 0f00 	cmp.w	sl, #0
   1be7e:	d13a      	bne.n	1bef6 <le_adv_update.constprop.0+0xb6>
   1be80:	3510      	adds	r5, #16
   1be82:	e8d5 3fef 	ldaex	r3, [r5]
   1be86:	f043 0304 	orr.w	r3, r3, #4
   1be8a:	e8c5 3fe2 	stlex	r2, r3, [r5]
   1be8e:	2a00      	cmp	r2, #0
   1be90:	d1f7      	bne.n	1be82 <le_adv_update.constprop.0+0x42>
}
   1be92:	4620      	mov	r0, r4
   1be94:	b007      	add	sp, #28
   1be96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   1be9a:	f7f3 faa7 	bl	f3ec <bt_get_name>
   1be9e:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   1bea0:	b9e4      	cbnz	r4, 1bedc <le_adv_update.constprop.0+0x9c>
   1bea2:	bb37      	cbnz	r7, 1bef2 <le_adv_update.constprop.0+0xb2>
		data = (struct bt_data)BT_DATA(
   1bea4:	4658      	mov	r0, fp
   1bea6:	f7ff fcd5 	bl	1b854 <strlen>
   1beaa:	2309      	movs	r3, #9
		if (name_type == ADV_NAME_TYPE_AD) {
   1beac:	2e01      	cmp	r6, #1
		d[0].data = ad;
   1beae:	e9cd b401 	strd	fp, r4, [sp, #4]
		data = (struct bt_data)BT_DATA(
   1beb2:	f88d 3000 	strb.w	r3, [sp]
   1beb6:	f88d 0001 	strb.w	r0, [sp, #1]
		d[0].len = ad_len;
   1beba:	f8cd 800c 	str.w	r8, [sp, #12]
		if (name_type == ADV_NAME_TYPE_AD) {
   1bebe:	d1d4      	bne.n	1be6a <le_adv_update.constprop.0+0x2a>
			d_len = 2;
   1bec0:	2202      	movs	r2, #2
			d[1].data = &data;
   1bec2:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   1bec6:	9605      	str	r6, [sp, #20]
			d_len = 2;
   1bec8:	e7d0      	b.n	1be6c <le_adv_update.constprop.0+0x2c>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   1beca:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   1bece:	3a08      	subs	r2, #8
   1bed0:	2a01      	cmp	r2, #1
   1bed2:	d924      	bls.n	1bf1e <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
   1bed4:	3301      	adds	r3, #1
   1bed6:	4598      	cmp	r8, r3
   1bed8:	d1f7      	bne.n	1beca <le_adv_update.constprop.0+0x8a>
   1beda:	e7e2      	b.n	1bea2 <le_adv_update.constprop.0+0x62>
   1bedc:	2300      	movs	r3, #0
   1bede:	e7fa      	b.n	1bed6 <le_adv_update.constprop.0+0x96>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   1bee0:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   1bee4:	3a08      	subs	r2, #8
   1bee6:	2a01      	cmp	r2, #1
   1bee8:	d919      	bls.n	1bf1e <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
   1beea:	3301      	adds	r3, #1
   1beec:	4599      	cmp	r9, r3
   1beee:	d1f7      	bne.n	1bee0 <le_adv_update.constprop.0+0xa0>
   1bef0:	e7d8      	b.n	1bea4 <le_adv_update.constprop.0+0x64>
   1bef2:	2300      	movs	r3, #0
   1bef4:	e7fa      	b.n	1beec <le_adv_update.constprop.0+0xac>
		d[0].data = sd;
   1bef6:	2201      	movs	r2, #1
		if (name_type == ADV_NAME_TYPE_SD) {
   1bef8:	2e02      	cmp	r6, #2
			d[1].len = 1;
   1befa:	bf08      	it	eq
   1befc:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   1befe:	f242 0009 	movw	r0, #8201	; 0x2009
			d_len = 2;
   1bf02:	bf08      	it	eq
   1bf04:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   1bf06:	a902      	add	r1, sp, #8
			d[1].data = &data;
   1bf08:	bf08      	it	eq
   1bf0a:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   1bf0e:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   1bf12:	f7f3 fe9b 	bl	fc4c <hci_set_ad>
		if (err) {
   1bf16:	2800      	cmp	r0, #0
   1bf18:	d0b2      	beq.n	1be80 <le_adv_update.constprop.0+0x40>
   1bf1a:	4604      	mov	r4, r0
   1bf1c:	e7b9      	b.n	1be92 <le_adv_update.constprop.0+0x52>
			return -EINVAL;
   1bf1e:	f06f 0415 	mvn.w	r4, #21
   1bf22:	e7b6      	b.n	1be92 <le_adv_update.constprop.0+0x52>

0001bf24 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   1bf24:	6843      	ldr	r3, [r0, #4]
   1bf26:	f013 0008 	ands.w	r0, r3, #8
   1bf2a:	d00a      	beq.n	1bf42 <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   1bf2c:	035a      	lsls	r2, r3, #13
   1bf2e:	d407      	bmi.n	1bf40 <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   1bf30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			return ADV_NAME_TYPE_AD;
   1bf34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1bf38:	bf14      	ite	ne
   1bf3a:	2002      	movne	r0, #2
   1bf3c:	2001      	moveq	r0, #1
   1bf3e:	4770      	bx	lr
   1bf40:	2001      	movs	r0, #1
}
   1bf42:	4770      	bx	lr

0001bf44 <bt_le_adv_set_enable_legacy>:
{
   1bf44:	b570      	push	{r4, r5, r6, lr}
   1bf46:	4606      	mov	r6, r0
   1bf48:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   1bf4a:	f242 000a 	movw	r0, #8202	; 0x200a
   1bf4e:	2101      	movs	r1, #1
{
   1bf50:	b086      	sub	sp, #24
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   1bf52:	f7f2 fa33 	bl	e3bc <bt_hci_cmd_create>
	if (!buf) {
   1bf56:	4604      	mov	r4, r0
   1bf58:	b1b0      	cbz	r0, 1bf88 <bt_le_adv_set_enable_legacy+0x44>
   1bf5a:	3008      	adds	r0, #8
	if (enable) {
   1bf5c:	b195      	cbz	r5, 1bf84 <bt_le_adv_set_enable_legacy+0x40>
   1bf5e:	2101      	movs	r1, #1
   1bf60:	f001 fdfb 	bl	1db5a <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   1bf64:	4620      	mov	r0, r4
   1bf66:	f106 0210 	add.w	r2, r6, #16
   1bf6a:	a903      	add	r1, sp, #12
   1bf6c:	2307      	movs	r3, #7
   1bf6e:	9500      	str	r5, [sp, #0]
   1bf70:	f7f2 fa12 	bl	e398 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   1bf74:	2200      	movs	r2, #0
   1bf76:	4621      	mov	r1, r4
   1bf78:	f242 000a 	movw	r0, #8202	; 0x200a
   1bf7c:	f7f2 fa58 	bl	e430 <bt_hci_cmd_send_sync>
}
   1bf80:	b006      	add	sp, #24
   1bf82:	bd70      	pop	{r4, r5, r6, pc}
   1bf84:	4629      	mov	r1, r5
   1bf86:	e7eb      	b.n	1bf60 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   1bf88:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1bf8c:	e7f8      	b.n	1bf80 <bt_le_adv_set_enable_legacy+0x3c>

0001bf8e <bt_le_adv_set_enable>:
	return bt_le_adv_set_enable_legacy(adv, enable);
   1bf8e:	f7ff bfd9 	b.w	1bf44 <bt_le_adv_set_enable_legacy>

0001bf92 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   1bf92:	3018      	adds	r0, #24
   1bf94:	f003 b861 	b.w	1f05a <k_work_cancel_delayable>

0001bf98 <bt_encrypt_le>:
}
#endif /* CONFIG_BT_HOST_CRYPTO_PRNG */

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   1bf98:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bf9a:	460d      	mov	r5, r1
   1bf9c:	4614      	mov	r4, r2
   1bf9e:	b0b1      	sub	sp, #196	; 0xc4
	struct tc_aes_key_sched_struct s;
	uint8_t tmp[16];

	CHECKIF(key == NULL || plaintext == NULL || enc_data == NULL) {
   1bfa0:	b370      	cbz	r0, 1c000 <bt_encrypt_le+0x68>
   1bfa2:	b369      	cbz	r1, 1c000 <bt_encrypt_le+0x68>
   1bfa4:	b362      	cbz	r2, 1c000 <bt_encrypt_le+0x68>
	for (; length > 0; length--) {
   1bfa6:	466e      	mov	r6, sp
   1bfa8:	4632      	mov	r2, r6
   1bfaa:	4637      	mov	r7, r6
   1bfac:	f100 0310 	add.w	r3, r0, #16
		*pdst++ = *psrc--;
   1bfb0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
	for (; length > 0; length--) {
   1bfb4:	4283      	cmp	r3, r0
		*pdst++ = *psrc--;
   1bfb6:	f802 1b01 	strb.w	r1, [r2], #1
	for (; length > 0; length--) {
   1bfba:	d1f9      	bne.n	1bfb0 <bt_encrypt_le+0x18>
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	sys_memcpy_swap(tmp, key, 16);

	if (tc_aes128_set_encrypt_key(&s, tmp) == TC_CRYPTO_FAIL) {
   1bfbc:	4631      	mov	r1, r6
   1bfbe:	a804      	add	r0, sp, #16
   1bfc0:	f7f0 fb46 	bl	c650 <tc_aes128_set_encrypt_key>
   1bfc4:	b1e0      	cbz	r0, 1c000 <bt_encrypt_le+0x68>
   1bfc6:	f105 0310 	add.w	r3, r5, #16
		*pdst++ = *psrc--;
   1bfca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
	for (; length > 0; length--) {
   1bfce:	42ab      	cmp	r3, r5
		*pdst++ = *psrc--;
   1bfd0:	f806 2b01 	strb.w	r2, [r6], #1
	for (; length > 0; length--) {
   1bfd4:	d1f9      	bne.n	1bfca <bt_encrypt_le+0x32>
		return -EINVAL;
	}

	sys_memcpy_swap(tmp, plaintext, 16);

	if (tc_aes_encrypt(enc_data, tmp, &s) == TC_CRYPTO_FAIL) {
   1bfd6:	4639      	mov	r1, r7
   1bfd8:	4620      	mov	r0, r4
   1bfda:	aa04      	add	r2, sp, #16
   1bfdc:	f7ff f867 	bl	1b0ae <tc_aes_encrypt>
   1bfe0:	b170      	cbz	r0, 1c000 <bt_encrypt_le+0x68>
   1bfe2:	1e63      	subs	r3, r4, #1
   1bfe4:	f104 0210 	add.w	r2, r4, #16
   1bfe8:	3407      	adds	r4, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   1bfea:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1bfee:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   1bff2:	429c      	cmp	r4, r3
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1bff4:	7018      	strb	r0, [r3, #0]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1bff6:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   1bff8:	d1f7      	bne.n	1bfea <bt_encrypt_le+0x52>

	sys_mem_swap(enc_data, 16);

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
   1bffa:	2000      	movs	r0, #0
}
   1bffc:	b031      	add	sp, #196	; 0xc4
   1bffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
   1c000:	f06f 0015 	mvn.w	r0, #21
   1c004:	e7fa      	b.n	1bffc <bt_encrypt_le+0x64>

0001c006 <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c006:	2200      	movs	r2, #0
	return list->head;
   1c008:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c00a:	b90b      	cbnz	r3, 1c010 <sys_slist_find_and_remove+0xa>
   1c00c:	4618      	mov	r0, r3
   1c00e:	4770      	bx	lr
   1c010:	428b      	cmp	r3, r1
   1c012:	d110      	bne.n	1c036 <sys_slist_find_and_remove+0x30>
	return node->next;
   1c014:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   1c016:	b942      	cbnz	r2, 1c02a <sys_slist_find_and_remove+0x24>
   1c018:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   1c01a:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1c01c:	4291      	cmp	r1, r2
   1c01e:	d100      	bne.n	1c022 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   1c020:	6043      	str	r3, [r0, #4]
	parent->next = child;
   1c022:	2300      	movs	r3, #0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c024:	2001      	movs	r0, #1
	parent->next = child;
   1c026:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   1c028:	4770      	bx	lr
	parent->next = child;
   1c02a:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1c02c:	6843      	ldr	r3, [r0, #4]
   1c02e:	4299      	cmp	r1, r3
	list->tail = node;
   1c030:	bf08      	it	eq
   1c032:	6042      	streq	r2, [r0, #4]
}
   1c034:	e7f5      	b.n	1c022 <sys_slist_find_and_remove+0x1c>
	return node->next;
   1c036:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c038:	681b      	ldr	r3, [r3, #0]
   1c03a:	e7e6      	b.n	1c00a <sys_slist_find_and_remove+0x4>

0001c03c <atomic_and>:
{
   1c03c:	4603      	mov	r3, r0
   1c03e:	b510      	push	{r4, lr}
}
   1c040:	e8d3 0fef 	ldaex	r0, [r3]
   1c044:	ea00 0201 	and.w	r2, r0, r1
   1c048:	e8c3 2fe4 	stlex	r4, r2, [r3]
   1c04c:	2c00      	cmp	r4, #0
   1c04e:	d1f7      	bne.n	1c040 <atomic_and+0x4>
   1c050:	bd10      	pop	{r4, pc}

0001c052 <z_log_msg_static_create.constprop.0>:
   1c052:	2300      	movs	r3, #0
   1c054:	f7ef ba84 	b.w	b560 <z_impl_z_log_msg_static_create>

0001c058 <tx_complete_work>:
	tx_notify(conn);
   1c058:	3828      	subs	r0, #40	; 0x28
   1c05a:	f7f4 bb2d 	b.w	106b8 <tx_notify>

0001c05e <bt_conn_reset_rx_state>:
{
   1c05e:	b510      	push	{r4, lr}
   1c060:	4604      	mov	r4, r0
	if (!conn->rx) {
   1c062:	6900      	ldr	r0, [r0, #16]
   1c064:	b118      	cbz	r0, 1c06e <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   1c066:	f7f9 fa61 	bl	1552c <net_buf_unref>
	conn->rx = NULL;
   1c06a:	2300      	movs	r3, #0
   1c06c:	6123      	str	r3, [r4, #16]
}
   1c06e:	bd10      	pop	{r4, pc}

0001c070 <conn_cleanup>:
{
   1c070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c074:	4604      	mov	r4, r0
		tx_data(buf)->tx = NULL;
   1c076:	2700      	movs	r7, #0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   1c078:	f104 0638 	add.w	r6, r4, #56	; 0x38
   1c07c:	2300      	movs	r3, #0
   1c07e:	2200      	movs	r2, #0
   1c080:	4630      	mov	r0, r6
   1c082:	f001 fcc0 	bl	1da06 <net_buf_get>
   1c086:	4603      	mov	r3, r0
   1c088:	b950      	cbnz	r0, 1c0a0 <conn_cleanup+0x30>
	bt_conn_reset_rx_state(conn);
   1c08a:	4620      	mov	r0, r4
   1c08c:	f7ff ffe7 	bl	1c05e <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   1c090:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1c094:	2200      	movs	r2, #0
}
   1c096:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   1c09a:	2300      	movs	r3, #0
   1c09c:	f7fd b820 	b.w	190e0 <k_work_reschedule>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   1c0a0:	695d      	ldr	r5, [r3, #20]
		tx_data(buf)->tx = NULL;
   1c0a2:	615f      	str	r7, [r3, #20]
		net_buf_unref(buf);
   1c0a4:	f7f9 fa42 	bl	1552c <net_buf_unref>
		if (tx) {
   1c0a8:	2d00      	cmp	r5, #0
   1c0aa:	d0e7      	beq.n	1c07c <conn_cleanup+0xc>
			conn_tx_destroy(conn, tx);
   1c0ac:	4629      	mov	r1, r5
   1c0ae:	4620      	mov	r0, r4
   1c0b0:	f7f4 fb32 	bl	10718 <conn_tx_destroy>
   1c0b4:	e7e0      	b.n	1c078 <conn_cleanup+0x8>

0001c0b6 <bt_conn_ref>:
{
   1c0b6:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   1c0b8:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c0bc:	e8d2 3faf 	lda	r3, [r2]
		if (!old) {
   1c0c0:	b15b      	cbz	r3, 1c0da <bt_conn_ref+0x24>
	} while (!atomic_cas(&conn->ref, old, old + 1));
   1c0c2:	1c59      	adds	r1, r3, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1c0c4:	e8d2 4fef 	ldaex	r4, [r2]
   1c0c8:	429c      	cmp	r4, r3
   1c0ca:	d104      	bne.n	1c0d6 <bt_conn_ref+0x20>
   1c0cc:	e8c2 1fec 	stlex	ip, r1, [r2]
   1c0d0:	f1bc 0f00 	cmp.w	ip, #0
   1c0d4:	d1f6      	bne.n	1c0c4 <bt_conn_ref+0xe>
   1c0d6:	d1f1      	bne.n	1c0bc <bt_conn_ref+0x6>
}
   1c0d8:	bd10      	pop	{r4, pc}
			return NULL;
   1c0da:	4618      	mov	r0, r3
   1c0dc:	e7fc      	b.n	1c0d8 <bt_conn_ref+0x22>

0001c0de <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   1c0de:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1c0e2:	e8d3 2fef 	ldaex	r2, [r3]
   1c0e6:	3a01      	subs	r2, #1
   1c0e8:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1c0ec:	2900      	cmp	r1, #0
   1c0ee:	d1f8      	bne.n	1c0e2 <bt_conn_unref+0x4>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   1c0f0:	f240 1201 	movw	r2, #257	; 0x101
   1c0f4:	8841      	ldrh	r1, [r0, #2]
   1c0f6:	4291      	cmp	r1, r2
   1c0f8:	d104      	bne.n	1c104 <bt_conn_unref+0x26>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c0fa:	e8d3 3faf 	lda	r3, [r3]
	    conn->role == BT_CONN_ROLE_PERIPHERAL && atomic_get(&conn->ref) == 0) {
   1c0fe:	b90b      	cbnz	r3, 1c104 <bt_conn_unref+0x26>
		bt_le_adv_resume();
   1c100:	f7f4 b878 	b.w	101f4 <bt_le_adv_resume>
}
   1c104:	4770      	bx	lr

0001c106 <conn_lookup_handle>:
{
   1c106:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c10a:	4607      	mov	r7, r0
   1c10c:	460e      	mov	r6, r1
   1c10e:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   1c110:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1c112:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   1c116:	42b4      	cmp	r4, r6
   1c118:	d103      	bne.n	1c122 <conn_lookup_handle+0x1c>
	return NULL;
   1c11a:	2300      	movs	r3, #0
}
   1c11c:	4618      	mov	r0, r3
   1c11e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1c122:	fb09 7004 	mla	r0, r9, r4, r7
   1c126:	f7ff ffc6 	bl	1c0b6 <bt_conn_ref>
   1c12a:	4603      	mov	r3, r0
		if (!conn) {
   1c12c:	b158      	cbz	r0, 1c146 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   1c12e:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   1c130:	2d01      	cmp	r5, #1
   1c132:	d002      	beq.n	1c13a <conn_lookup_handle+0x34>
   1c134:	3d07      	subs	r5, #7
   1c136:	2d01      	cmp	r5, #1
   1c138:	d803      	bhi.n	1c142 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   1c13a:	881a      	ldrh	r2, [r3, #0]
   1c13c:	4542      	cmp	r2, r8
   1c13e:	d0ed      	beq.n	1c11c <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   1c140:	4618      	mov	r0, r3
   1c142:	f7ff ffcc 	bl	1c0de <bt_conn_unref>
	for (i = 0; i < size; i++) {
   1c146:	3401      	adds	r4, #1
   1c148:	e7e5      	b.n	1c116 <conn_lookup_handle+0x10>

0001c14a <bt_conn_connected>:
{
   1c14a:	b510      	push	{r4, lr}
   1c14c:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   1c14e:	f7f5 f961 	bl	11414 <bt_l2cap_connected>
	notify_connected(conn);
   1c152:	4620      	mov	r0, r4
}
   1c154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   1c158:	f7f4 ba76 	b.w	10648 <notify_connected>

0001c15c <bt_conn_disconnect>:
{
   1c15c:	b510      	push	{r4, lr}
	switch (conn->state) {
   1c15e:	7b43      	ldrb	r3, [r0, #13]
{
   1c160:	4604      	mov	r4, r0
	switch (conn->state) {
   1c162:	3b02      	subs	r3, #2
   1c164:	2b06      	cmp	r3, #6
   1c166:	d816      	bhi.n	1c196 <bt_conn_disconnect+0x3a>
   1c168:	e8df f003 	tbb	[pc, r3]
   1c16c:	15151504 	.word	0x15151504
   1c170:	0b09      	.short	0x0b09
   1c172:	09          	.byte	0x09
   1c173:	00          	.byte	0x00
		conn->err = reason;
   1c174:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1c176:	2100      	movs	r1, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   1c178:	4620      	mov	r0, r4
   1c17a:	f7f4 fd25 	bl	10bc8 <bt_conn_set_state>
{
   1c17e:	2000      	movs	r0, #0
}
   1c180:	bd10      	pop	{r4, pc}
	err = bt_hci_disconnect(conn->handle, reason);
   1c182:	8800      	ldrh	r0, [r0, #0]
   1c184:	f7ff fc8f 	bl	1baa6 <bt_hci_disconnect>
	if (err) {
   1c188:	2800      	cmp	r0, #0
   1c18a:	d1f9      	bne.n	1c180 <bt_conn_disconnect+0x24>
	if (conn->state == BT_CONN_CONNECTED) {
   1c18c:	7b63      	ldrb	r3, [r4, #13]
   1c18e:	2b07      	cmp	r3, #7
   1c190:	d1f5      	bne.n	1c17e <bt_conn_disconnect+0x22>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   1c192:	2108      	movs	r1, #8
   1c194:	e7f0      	b.n	1c178 <bt_conn_disconnect+0x1c>
		return -ENOTCONN;
   1c196:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1c19a:	e7f1      	b.n	1c180 <bt_conn_disconnect+0x24>

0001c19c <bt_conn_set_security>:
{
   1c19c:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1c19e:	7b43      	ldrb	r3, [r0, #13]
{
   1c1a0:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   1c1a2:	2b07      	cmp	r3, #7
{
   1c1a4:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   1c1a6:	d122      	bne.n	1c1ee <bt_conn_set_security+0x52>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   1c1a8:	7a43      	ldrb	r3, [r0, #9]
   1c1aa:	428b      	cmp	r3, r1
   1c1ac:	d215      	bcs.n	1c1da <bt_conn_set_security+0x3e>
   1c1ae:	7a83      	ldrb	r3, [r0, #10]
   1c1b0:	428b      	cmp	r3, r1
   1c1b2:	d212      	bcs.n	1c1da <bt_conn_set_security+0x3e>
	if (val) {
   1c1b4:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   1c1b6:	f100 0004 	add.w	r0, r0, #4
   1c1ba:	d510      	bpl.n	1c1de <bt_conn_set_security+0x42>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1c1bc:	e8d0 3fef 	ldaex	r3, [r0]
   1c1c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1c1c4:	e8c0 3fe2 	stlex	r2, r3, [r0]
   1c1c8:	2a00      	cmp	r2, #0
   1c1ca:	d1f7      	bne.n	1c1bc <bt_conn_set_security+0x20>
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   1c1cc:	f005 057f 	and.w	r5, r5, #127	; 0x7f
		return bt_smp_start_security(conn);
   1c1d0:	4620      	mov	r0, r4
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   1c1d2:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   1c1d4:	f7f8 fa36 	bl	14644 <bt_smp_start_security>
	if (err) {
   1c1d8:	b930      	cbnz	r0, 1c1e8 <bt_conn_set_security+0x4c>
		return -ENOTCONN;
   1c1da:	2000      	movs	r0, #0
}
   1c1dc:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1c1de:	f46f 6180 	mvn.w	r1, #1024	; 0x400
   1c1e2:	f7ff ff2b 	bl	1c03c <atomic_and>
   1c1e6:	e7f1      	b.n	1c1cc <bt_conn_set_security+0x30>
		conn->required_sec_level = conn->sec_level;
   1c1e8:	7a63      	ldrb	r3, [r4, #9]
   1c1ea:	72a3      	strb	r3, [r4, #10]
   1c1ec:	e7f6      	b.n	1c1dc <bt_conn_set_security+0x40>
		return -ENOTCONN;
   1c1ee:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1c1f2:	e7f3      	b.n	1c1dc <bt_conn_set_security+0x40>

0001c1f4 <bt_conn_get_security>:
}
   1c1f4:	7a40      	ldrb	r0, [r0, #9]
   1c1f6:	4770      	bx	lr

0001c1f8 <bt_conn_is_peer_addr_le>:
{
   1c1f8:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   1c1fa:	7a03      	ldrb	r3, [r0, #8]
{
   1c1fc:	4604      	mov	r4, r0
	if (id != conn->id) {
   1c1fe:	428b      	cmp	r3, r1
{
   1c200:	4615      	mov	r5, r2
	if (id != conn->id) {
   1c202:	d115      	bne.n	1c230 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   1c204:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1c208:	2207      	movs	r2, #7
   1c20a:	4628      	mov	r0, r5
   1c20c:	f7ff fb51 	bl	1b8b2 <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   1c210:	b180      	cbz	r0, 1c234 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1c212:	78e3      	ldrb	r3, [r4, #3]
   1c214:	2207      	movs	r2, #7
   1c216:	b943      	cbnz	r3, 1c22a <bt_conn_is_peer_addr_le+0x32>
   1c218:	f104 0196 	add.w	r1, r4, #150	; 0x96
   1c21c:	4628      	mov	r0, r5
   1c21e:	f7ff fb48 	bl	1b8b2 <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   1c222:	fab0 f080 	clz	r0, r0
   1c226:	0940      	lsrs	r0, r0, #5
}
   1c228:	bd38      	pop	{r3, r4, r5, pc}
	return memcmp(a, b, sizeof(*a));
   1c22a:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   1c22e:	e7f5      	b.n	1c21c <bt_conn_is_peer_addr_le+0x24>
		return false;
   1c230:	2000      	movs	r0, #0
   1c232:	e7f9      	b.n	1c228 <bt_conn_is_peer_addr_le+0x30>
		return true;
   1c234:	2001      	movs	r0, #1
   1c236:	e7f7      	b.n	1c228 <bt_conn_is_peer_addr_le+0x30>

0001c238 <bt_conn_get_dst>:
}
   1c238:	3088      	adds	r0, #136	; 0x88
   1c23a:	4770      	bx	lr

0001c23c <bt_conn_le_conn_update>:
{
   1c23c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c23e:	4607      	mov	r7, r0
   1c240:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   1c242:	f242 0013 	movw	r0, #8211	; 0x2013
   1c246:	210e      	movs	r1, #14
   1c248:	f7f2 f8b8 	bl	e3bc <bt_hci_cmd_create>
	if (!buf) {
   1c24c:	4606      	mov	r6, r0
   1c24e:	b1d0      	cbz	r0, 1c286 <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   1c250:	210e      	movs	r1, #14
   1c252:	3008      	adds	r0, #8
   1c254:	f001 fc72 	bl	1db3c <net_buf_simple_add>
   1c258:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   1c25a:	220e      	movs	r2, #14
   1c25c:	2100      	movs	r1, #0
   1c25e:	f7ff fb43 	bl	1b8e8 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1c262:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1c264:	4631      	mov	r1, r6
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1c266:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1c268:	882b      	ldrh	r3, [r5, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1c26a:	2200      	movs	r2, #0
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1c26c:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1c26e:	886b      	ldrh	r3, [r5, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1c270:	f242 0013 	movw	r0, #8211	; 0x2013
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1c274:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   1c276:	88ab      	ldrh	r3, [r5, #4]
   1c278:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   1c27a:	88eb      	ldrh	r3, [r5, #6]
   1c27c:	8123      	strh	r3, [r4, #8]
}
   1c27e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1c282:	f7f2 b8d5 	b.w	e430 <bt_hci_cmd_send_sync>
}
   1c286:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1c28a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001c28c <l2cap_connected>:
}
   1c28c:	4770      	bx	lr

0001c28e <z_log_msg_static_create.constprop.0>:
   1c28e:	2300      	movs	r3, #0
   1c290:	f7ef b966 	b.w	b560 <z_impl_z_log_msg_static_create>

0001c294 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   1c294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c296:	4605      	mov	r5, r0
   1c298:	460f      	mov	r7, r1
   1c29a:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   1c29c:	2300      	movs	r3, #0
   1c29e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1c2a2:	2104      	movs	r1, #4
   1c2a4:	2000      	movs	r0, #0
   1c2a6:	f7f4 fd91 	bl	10dcc <bt_conn_create_pdu_timeout>
	if (!buf) {
   1c2aa:	4604      	mov	r4, r0
   1c2ac:	b920      	cbnz	r0, 1c2b8 <l2cap_create_le_sig_pdu.constprop.0+0x24>
   1c2ae:	4628      	mov	r0, r5
}
   1c2b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1c2b4:	f7f5 b86a 	b.w	1138c <l2cap_create_le_sig_pdu.part.0>
   1c2b8:	2104      	movs	r1, #4
   1c2ba:	3008      	adds	r0, #8
   1c2bc:	f001 fc3e 	bl	1db3c <net_buf_simple_add>
	hdr->code = code;
   1c2c0:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   1c2c2:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   1c2c4:	8046      	strh	r6, [r0, #2]
}
   1c2c6:	4620      	mov	r0, r4
   1c2c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001c2ca <l2cap_disconnected>:
static void l2cap_disconnected(struct bt_l2cap_chan *chan)
   1c2ca:	4770      	bx	lr

0001c2cc <bt_l2cap_chan_del>:
{
   1c2cc:	b570      	push	{r4, r5, r6, lr}
   1c2ce:	4604      	mov	r4, r0
	if (!chan->conn) {
   1c2d0:	e9d0 3500 	ldrd	r3, r5, [r0]
   1c2d4:	b123      	cbz	r3, 1c2e0 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   1c2d6:	686b      	ldr	r3, [r5, #4]
   1c2d8:	b103      	cbz	r3, 1c2dc <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   1c2da:	4798      	blx	r3
	chan->conn = NULL;
   1c2dc:	2300      	movs	r3, #0
   1c2de:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   1c2e0:	68e3      	ldr	r3, [r4, #12]
   1c2e2:	b10b      	cbz	r3, 1c2e8 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   1c2e4:	4620      	mov	r0, r4
   1c2e6:	4798      	blx	r3
	if (ops->released) {
   1c2e8:	6a2b      	ldr	r3, [r5, #32]
   1c2ea:	b11b      	cbz	r3, 1c2f4 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   1c2ec:	4620      	mov	r0, r4
}
   1c2ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   1c2f2:	4718      	bx	r3
}
   1c2f4:	bd70      	pop	{r4, r5, r6, pc}

0001c2f6 <bt_l2cap_disconnected>:
{
   1c2f6:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   1c2f8:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1c2fa:	b130      	cbz	r0, 1c30a <bt_l2cap_disconnected+0x14>
	return node->next;
   1c2fc:	f850 4908 	ldr.w	r4, [r0], #-8
   1c300:	b104      	cbz	r4, 1c304 <bt_l2cap_disconnected+0xe>
   1c302:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   1c304:	f7ff ffe2 	bl	1c2cc <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1c308:	b904      	cbnz	r4, 1c30c <bt_l2cap_disconnected+0x16>
}
   1c30a:	bd38      	pop	{r3, r4, r5, pc}
   1c30c:	68a5      	ldr	r5, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1c30e:	b12d      	cbz	r5, 1c31c <bt_l2cap_disconnected+0x26>
		bt_l2cap_chan_del(chan);
   1c310:	4620      	mov	r0, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1c312:	3d08      	subs	r5, #8
		bt_l2cap_chan_del(chan);
   1c314:	f7ff ffda 	bl	1c2cc <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1c318:	462c      	mov	r4, r5
   1c31a:	e7f7      	b.n	1c30c <bt_l2cap_disconnected+0x16>
		bt_l2cap_chan_del(chan);
   1c31c:	4620      	mov	r0, r4
}
   1c31e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_l2cap_chan_del(chan);
   1c322:	f7ff bfd3 	b.w	1c2cc <bt_l2cap_chan_del>

0001c326 <bt_l2cap_security_changed>:
{
   1c326:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   1c328:	6d03      	ldr	r3, [r0, #80]	; 0x50
   1c32a:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1c32c:	b1bb      	cbz	r3, 1c35e <bt_l2cap_security_changed+0x38>
   1c32e:	4618      	mov	r0, r3
	return node->next;
   1c330:	f850 4908 	ldr.w	r4, [r0], #-8
   1c334:	b104      	cbz	r4, 1c338 <bt_l2cap_security_changed+0x12>
   1c336:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   1c338:	f853 3c04 	ldr.w	r3, [r3, #-4]
   1c33c:	689b      	ldr	r3, [r3, #8]
   1c33e:	b10b      	cbz	r3, 1c344 <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   1c340:	4629      	mov	r1, r5
   1c342:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1c344:	b15c      	cbz	r4, 1c35e <bt_l2cap_security_changed+0x38>
   1c346:	4620      	mov	r0, r4
   1c348:	68a4      	ldr	r4, [r4, #8]
   1c34a:	6843      	ldr	r3, [r0, #4]
   1c34c:	b124      	cbz	r4, 1c358 <bt_l2cap_security_changed+0x32>
		if (chan->ops->encrypt_change) {
   1c34e:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1c350:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   1c352:	2b00      	cmp	r3, #0
   1c354:	d1f4      	bne.n	1c340 <bt_l2cap_security_changed+0x1a>
   1c356:	e7f6      	b.n	1c346 <bt_l2cap_security_changed+0x20>
   1c358:	689b      	ldr	r3, [r3, #8]
   1c35a:	2b00      	cmp	r3, #0
   1c35c:	d1f0      	bne.n	1c340 <bt_l2cap_security_changed+0x1a>
}
   1c35e:	bd38      	pop	{r3, r4, r5, pc}

0001c360 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   1c360:	3104      	adds	r1, #4
   1c362:	f7f4 bd33 	b.w	10dcc <bt_conn_create_pdu_timeout>

0001c366 <bt_l2cap_send_cb>:
{
   1c366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c36a:	4614      	mov	r4, r2
   1c36c:	4605      	mov	r5, r0
   1c36e:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   1c370:	f102 0008 	add.w	r0, r2, #8
   1c374:	2104      	movs	r1, #4
   1c376:	461e      	mov	r6, r3
   1c378:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1c37c:	f001 fbf5 	bl	1db6a <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1c380:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   1c382:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1c384:	3a04      	subs	r2, #4
   1c386:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1c388:	4643      	mov	r3, r8
   1c38a:	4632      	mov	r2, r6
   1c38c:	4621      	mov	r1, r4
   1c38e:	4628      	mov	r0, r5
}
   1c390:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1c394:	f7f4 bb5a 	b.w	10a4c <bt_conn_send_cb>

0001c398 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   1c398:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1c39a:	b128      	cbz	r0, 1c3a8 <bt_l2cap_le_lookup_tx_cid+0x10>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   1c39c:	8b83      	ldrh	r3, [r0, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1c39e:	3808      	subs	r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   1c3a0:	428b      	cmp	r3, r1
   1c3a2:	d001      	beq.n	1c3a8 <bt_l2cap_le_lookup_tx_cid+0x10>
	return node->next;
   1c3a4:	6880      	ldr	r0, [r0, #8]
   1c3a6:	e7f8      	b.n	1c39a <bt_l2cap_le_lookup_tx_cid+0x2>
}
   1c3a8:	4770      	bx	lr

0001c3aa <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   1c3aa:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1c3ac:	b128      	cbz	r0, 1c3ba <bt_l2cap_le_lookup_rx_cid+0x10>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1c3ae:	8983      	ldrh	r3, [r0, #12]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1c3b0:	3808      	subs	r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1c3b2:	428b      	cmp	r3, r1
   1c3b4:	d001      	beq.n	1c3ba <bt_l2cap_le_lookup_rx_cid+0x10>
	return node->next;
   1c3b6:	6880      	ldr	r0, [r0, #8]
   1c3b8:	e7f8      	b.n	1c3ac <bt_l2cap_le_lookup_rx_cid+0x2>
}
   1c3ba:	4770      	bx	lr

0001c3bc <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   1c3bc:	4770      	bx	lr

0001c3be <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   1c3be:	4603      	mov	r3, r0
	return list->head;
   1c3c0:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   1c3c2:	b128      	cbz	r0, 1c3d0 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c3c4:	6859      	ldr	r1, [r3, #4]
	return node->next;
   1c3c6:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c3c8:	4288      	cmp	r0, r1
	list->head = node;
   1c3ca:	601a      	str	r2, [r3, #0]
	list->tail = node;
   1c3cc:	bf08      	it	eq
   1c3ce:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   1c3d0:	4770      	bx	lr

0001c3d2 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   1c3d2:	4603      	mov	r3, r0
	size_t bytes = 0;
   1c3d4:	2000      	movs	r0, #0

	while (buf) {
   1c3d6:	b903      	cbnz	r3, 1c3da <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   1c3d8:	4770      	bx	lr
		bytes += buf->len;
   1c3da:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   1c3dc:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   1c3de:	4410      	add	r0, r2
		buf = buf->frags;
   1c3e0:	e7f9      	b.n	1c3d6 <net_buf_frags_len+0x4>

0001c3e2 <attr_read_type_cb>:
{
   1c3e2:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   1c3e4:	68d4      	ldr	r4, [r2, #12]
   1c3e6:	3102      	adds	r1, #2
   1c3e8:	7823      	ldrb	r3, [r4, #0]
   1c3ea:	b913      	cbnz	r3, 1c3f2 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   1c3ec:	7021      	strb	r1, [r4, #0]
	return true;
   1c3ee:	2001      	movs	r0, #1
}
   1c3f0:	bd10      	pop	{r4, pc}
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   1c3f2:	428b      	cmp	r3, r1
   1c3f4:	d0fb      	beq.n	1c3ee <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   1c3f6:	8983      	ldrh	r3, [r0, #12]
   1c3f8:	3b02      	subs	r3, #2
   1c3fa:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   1c3fc:	2000      	movs	r0, #0
   1c3fe:	6110      	str	r0, [r2, #16]
		return false;
   1c400:	e7f6      	b.n	1c3f0 <attr_read_type_cb+0xe>

0001c402 <att_prepare_write_req>:
}
   1c402:	2006      	movs	r0, #6
   1c404:	4770      	bx	lr

0001c406 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c406:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1c40a:	4108      	asrs	r0, r1
}
   1c40c:	f000 0001 	and.w	r0, r0, #1
   1c410:	4770      	bx	lr

0001c412 <write_cb>:
{
   1c412:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1c414:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   1c416:	4601      	mov	r1, r0
{
   1c418:	4605      	mov	r5, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   1c41a:	f44f 7295 	mov.w	r2, #298	; 0x12a
   1c41e:	6820      	ldr	r0, [r4, #0]
   1c420:	f000 fe5a 	bl	1d0d8 <bt_gatt_check_perm>
   1c424:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1c426:	bb00      	cbnz	r0, 1c46a <write_cb+0x58>
	if (!data->req) {
   1c428:	7a23      	ldrb	r3, [r4, #8]
   1c42a:	b1b3      	cbz	r3, 1c45a <write_cb+0x48>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   1c42c:	f1a3 0218 	sub.w	r2, r3, #24
   1c430:	4253      	negs	r3, r2
   1c432:	4153      	adcs	r3, r2
   1c434:	009b      	lsls	r3, r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   1c436:	9301      	str	r3, [sp, #4]
   1c438:	8a63      	ldrh	r3, [r4, #18]
   1c43a:	4629      	mov	r1, r5
   1c43c:	9300      	str	r3, [sp, #0]
   1c43e:	68ae      	ldr	r6, [r5, #8]
   1c440:	8a23      	ldrh	r3, [r4, #16]
   1c442:	68e2      	ldr	r2, [r4, #12]
   1c444:	6820      	ldr	r0, [r4, #0]
   1c446:	47b0      	blx	r6
	if (write < 0 || write != data->len) {
   1c448:	2800      	cmp	r0, #0
   1c44a:	db08      	blt.n	1c45e <write_cb+0x4c>
   1c44c:	8a23      	ldrh	r3, [r4, #16]
   1c44e:	4298      	cmp	r0, r3
   1c450:	d10e      	bne.n	1c470 <write_cb+0x5e>
	data->err = 0U;
   1c452:	2300      	movs	r3, #0
	return BT_GATT_ITER_CONTINUE;
   1c454:	2001      	movs	r0, #1
	data->err = 0U;
   1c456:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   1c458:	e008      	b.n	1c46c <write_cb+0x5a>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   1c45a:	2302      	movs	r3, #2
   1c45c:	e7eb      	b.n	1c436 <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   1c45e:	f110 0fff 	cmn.w	r0, #255	; 0xff
   1c462:	d305      	bcc.n	1c470 <write_cb+0x5e>
		return -err;
   1c464:	4240      	negs	r0, r0
   1c466:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   1c468:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   1c46a:	2000      	movs	r0, #0
}
   1c46c:	b002      	add	sp, #8
   1c46e:	bd70      	pop	{r4, r5, r6, pc}
	return BT_ATT_ERR_UNLIKELY;
   1c470:	200e      	movs	r0, #14
   1c472:	e7f9      	b.n	1c468 <write_cb+0x56>

0001c474 <bt_gatt_foreach_attr>:
{
   1c474:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1c476:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1c47a:	2300      	movs	r3, #0
   1c47c:	461a      	mov	r2, r3
   1c47e:	9300      	str	r3, [sp, #0]
   1c480:	f7f6 fc42 	bl	12d08 <bt_gatt_foreach_attr_type>
}
   1c484:	b005      	add	sp, #20
   1c486:	f85d fb04 	ldr.w	pc, [sp], #4

0001c48a <find_info_cb>:
{
   1c48a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   1c48c:	6893      	ldr	r3, [r2, #8]
{
   1c48e:	4605      	mov	r5, r0
   1c490:	460e      	mov	r6, r1
   1c492:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1c494:	6817      	ldr	r7, [r2, #0]
	if (!data->rsp) {
   1c496:	b963      	cbnz	r3, 1c4b2 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   1c498:	6850      	ldr	r0, [r2, #4]
   1c49a:	2101      	movs	r1, #1
   1c49c:	3008      	adds	r0, #8
   1c49e:	f001 fb4d 	bl	1db3c <net_buf_simple_add>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1c4a2:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1c4a4:	682b      	ldr	r3, [r5, #0]
   1c4a6:	781b      	ldrb	r3, [r3, #0]
   1c4a8:	2b00      	cmp	r3, #0
   1c4aa:	bf14      	ite	ne
   1c4ac:	2302      	movne	r3, #2
   1c4ae:	2301      	moveq	r3, #1
   1c4b0:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   1c4b2:	68a3      	ldr	r3, [r4, #8]
   1c4b4:	781b      	ldrb	r3, [r3, #0]
   1c4b6:	2b01      	cmp	r3, #1
   1c4b8:	d003      	beq.n	1c4c2 <find_info_cb+0x38>
   1c4ba:	2b02      	cmp	r3, #2
   1c4bc:	d019      	beq.n	1c4f2 <find_info_cb+0x68>
   1c4be:	2000      	movs	r0, #0
   1c4c0:	e016      	b.n	1c4f0 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   1c4c2:	682b      	ldr	r3, [r5, #0]
   1c4c4:	781b      	ldrb	r3, [r3, #0]
   1c4c6:	2b00      	cmp	r3, #0
   1c4c8:	d1f9      	bne.n	1c4be <find_info_cb+0x34>
   1c4ca:	6860      	ldr	r0, [r4, #4]
   1c4cc:	2104      	movs	r1, #4
   1c4ce:	3008      	adds	r0, #8
   1c4d0:	f001 fb34 	bl	1db3c <net_buf_simple_add>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1c4d4:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   1c4d6:	8006      	strh	r6, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1c4d8:	682a      	ldr	r2, [r5, #0]
   1c4da:	68e3      	ldr	r3, [r4, #12]
   1c4dc:	8852      	ldrh	r2, [r2, #2]
   1c4de:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   1c4e0:	6863      	ldr	r3, [r4, #4]
   1c4e2:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   1c4e4:	899b      	ldrh	r3, [r3, #12]
   1c4e6:	1ac0      	subs	r0, r0, r3
   1c4e8:	2804      	cmp	r0, #4
		if (chan->chan.tx.mtu - data->buf->len >
   1c4ea:	bf94      	ite	ls
   1c4ec:	2000      	movls	r0, #0
   1c4ee:	2001      	movhi	r0, #1
}
   1c4f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   1c4f2:	682b      	ldr	r3, [r5, #0]
   1c4f4:	781b      	ldrb	r3, [r3, #0]
   1c4f6:	2b02      	cmp	r3, #2
   1c4f8:	d1e1      	bne.n	1c4be <find_info_cb+0x34>
   1c4fa:	6860      	ldr	r0, [r4, #4]
   1c4fc:	2112      	movs	r1, #18
   1c4fe:	3008      	adds	r0, #8
   1c500:	f001 fb1c 	bl	1db3c <net_buf_simple_add>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   1c504:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   1c506:	8006      	strh	r6, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1c508:	6829      	ldr	r1, [r5, #0]
   1c50a:	68e0      	ldr	r0, [r4, #12]
   1c50c:	2210      	movs	r2, #16
   1c50e:	3101      	adds	r1, #1
   1c510:	3002      	adds	r0, #2
   1c512:	f7ff f9de 	bl	1b8d2 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   1c516:	6863      	ldr	r3, [r4, #4]
   1c518:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   1c51a:	899b      	ldrh	r3, [r3, #12]
   1c51c:	1ac0      	subs	r0, r0, r3
   1c51e:	2812      	cmp	r0, #18
   1c520:	e7e3      	b.n	1c4ea <find_info_cb+0x60>

0001c522 <att_chan_mtu_updated>:
{
   1c522:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   1c524:	6805      	ldr	r5, [r0, #0]
	return list->head;
   1c526:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1c528:	b352      	cbz	r2, 1c580 <att_chan_mtu_updated+0x5e>
	return node->next;
   1c52a:	6813      	ldr	r3, [r2, #0]
   1c52c:	b103      	cbz	r3, 1c530 <att_chan_mtu_updated+0xe>
   1c52e:	3be0      	subs	r3, #224	; 0xe0
   1c530:	f1a2 04e0 	sub.w	r4, r2, #224	; 0xe0
   1c534:	2200      	movs	r2, #0
   1c536:	4611      	mov	r1, r2
   1c538:	e000      	b.n	1c53c <att_chan_mtu_updated+0x1a>
   1c53a:	3be0      	subs	r3, #224	; 0xe0
		if (chan == updated_chan) {
   1c53c:	4284      	cmp	r4, r0
   1c53e:	d007      	beq.n	1c550 <att_chan_mtu_updated+0x2e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   1c540:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   1c542:	8b64      	ldrh	r4, [r4, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   1c544:	42b1      	cmp	r1, r6
   1c546:	bf38      	it	cc
   1c548:	4631      	movcc	r1, r6
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   1c54a:	42a2      	cmp	r2, r4
   1c54c:	bf38      	it	cc
   1c54e:	4622      	movcc	r2, r4
   1c550:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1c552:	b12b      	cbz	r3, 1c560 <att_chan_mtu_updated+0x3e>
   1c554:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   1c558:	2b00      	cmp	r3, #0
   1c55a:	d1ee      	bne.n	1c53a <att_chan_mtu_updated+0x18>
		if (chan == updated_chan) {
   1c55c:	4284      	cmp	r4, r0
   1c55e:	d1ef      	bne.n	1c540 <att_chan_mtu_updated+0x1e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   1c560:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   1c562:	8b40      	ldrh	r0, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   1c564:	428b      	cmp	r3, r1
   1c566:	d801      	bhi.n	1c56c <att_chan_mtu_updated+0x4a>
   1c568:	4290      	cmp	r0, r2
   1c56a:	d90b      	bls.n	1c584 <att_chan_mtu_updated+0x62>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   1c56c:	4282      	cmp	r2, r0
   1c56e:	bf38      	it	cc
   1c570:	4602      	movcc	r2, r0
   1c572:	4299      	cmp	r1, r3
   1c574:	6828      	ldr	r0, [r5, #0]
   1c576:	bf38      	it	cc
   1c578:	4619      	movcc	r1, r3
}
   1c57a:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   1c57c:	f7f7 b87a 	b.w	13674 <bt_gatt_att_max_mtu_changed>
   1c580:	4611      	mov	r1, r2
   1c582:	e7ed      	b.n	1c560 <att_chan_mtu_updated+0x3e>
}
   1c584:	bc70      	pop	{r4, r5, r6}
   1c586:	4770      	bx	lr

0001c588 <attr_read_group_cb>:
	if (!data->rsp->len) {
   1c588:	68d0      	ldr	r0, [r2, #12]
   1c58a:	3104      	adds	r1, #4
   1c58c:	7803      	ldrb	r3, [r0, #0]
   1c58e:	b913      	cbnz	r3, 1c596 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   1c590:	7001      	strb	r1, [r0, #0]
	return true;
   1c592:	2001      	movs	r0, #1
   1c594:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   1c596:	428b      	cmp	r3, r1
   1c598:	d0fb      	beq.n	1c592 <attr_read_group_cb+0xa>
		data->group = NULL;
   1c59a:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   1c59c:	6891      	ldr	r1, [r2, #8]
   1c59e:	898b      	ldrh	r3, [r1, #12]
   1c5a0:	3b04      	subs	r3, #4
   1c5a2:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   1c5a4:	6110      	str	r0, [r2, #16]
}
   1c5a6:	4770      	bx	lr

0001c5a8 <z_log_msg_static_create.constprop.0>:
   1c5a8:	2300      	movs	r3, #0
   1c5aa:	f7ee bfd9 	b.w	b560 <z_impl_z_log_msg_static_create>

0001c5ae <chan_req_send>:
{
   1c5ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c5b0:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1c5b2:	6888      	ldr	r0, [r1, #8]
   1c5b4:	f7ff ff0d 	bl	1c3d2 <net_buf_frags_len>
   1c5b8:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
{
   1c5ba:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1c5bc:	4283      	cmp	r3, r0
   1c5be:	d30d      	bcc.n	1c5dc <chan_req_send+0x2e>
	req->buf = NULL;
   1c5c0:	2600      	movs	r6, #0
	chan->req = req;
   1c5c2:	f8c5 1094 	str.w	r1, [r5, #148]	; 0x94
	buf = req->buf;
   1c5c6:	688f      	ldr	r7, [r1, #8]
	return chan_send(chan, buf);
   1c5c8:	4628      	mov	r0, r5
	req->buf = NULL;
   1c5ca:	608e      	str	r6, [r1, #8]
	return chan_send(chan, buf);
   1c5cc:	4639      	mov	r1, r7
   1c5ce:	f7f5 f97d 	bl	118cc <chan_send>
	if (err) {
   1c5d2:	b110      	cbz	r0, 1c5da <chan_req_send+0x2c>
		req->buf = buf;
   1c5d4:	60a7      	str	r7, [r4, #8]
		chan->req = NULL;
   1c5d6:	f8c5 6094 	str.w	r6, [r5, #148]	; 0x94
}
   1c5da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   1c5dc:	f06f 0079 	mvn.w	r0, #121	; 0x79
   1c5e0:	e7fb      	b.n	1c5da <chan_req_send+0x2c>

0001c5e2 <process_queue>:
{
   1c5e2:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   1c5e4:	2200      	movs	r2, #0
{
   1c5e6:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   1c5e8:	2300      	movs	r3, #0
   1c5ea:	4608      	mov	r0, r1
{
   1c5ec:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   1c5ee:	f001 fa0a 	bl	1da06 <net_buf_get>
	if (buf) {
   1c5f2:	4605      	mov	r5, r0
   1c5f4:	b158      	cbz	r0, 1c60e <process_queue+0x2c>
	return chan_send(chan, buf);
   1c5f6:	4601      	mov	r1, r0
   1c5f8:	4620      	mov	r0, r4
   1c5fa:	f7f5 f967 	bl	118cc <chan_send>
		if (err) {
   1c5fe:	4604      	mov	r4, r0
   1c600:	b118      	cbz	r0, 1c60a <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   1c602:	4629      	mov	r1, r5
   1c604:	4630      	mov	r0, r6
   1c606:	f002 fc0b 	bl	1ee20 <k_queue_prepend>
}
   1c60a:	4620      	mov	r0, r4
   1c60c:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   1c60e:	f06f 0401 	mvn.w	r4, #1
   1c612:	e7fa      	b.n	1c60a <process_queue+0x28>

0001c614 <bt_att_chan_send_rsp>:
{
   1c614:	b538      	push	{r3, r4, r5, lr}
   1c616:	4604      	mov	r4, r0
   1c618:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   1c61a:	f7f5 f957 	bl	118cc <chan_send>
	if (err) {
   1c61e:	b130      	cbz	r0, 1c62e <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   1c620:	4629      	mov	r1, r5
   1c622:	f104 0098 	add.w	r0, r4, #152	; 0x98
}
   1c626:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   1c62a:	f001 ba54 	b.w	1dad6 <net_buf_put>
}
   1c62e:	bd38      	pop	{r3, r4, r5, pc}

0001c630 <att_chan_read>:
{
   1c630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c634:	4680      	mov	r8, r0
   1c636:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1c638:	4610      	mov	r0, r2
{
   1c63a:	4699      	mov	r9, r3
   1c63c:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1c63e:	f7ff fec8 	bl	1c3d2 <net_buf_frags_len>
   1c642:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
{
   1c646:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1c648:	4283      	cmp	r3, r0
   1c64a:	d97a      	bls.n	1c742 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   1c64c:	f8d8 3004 	ldr.w	r3, [r8, #4]
	frag = net_buf_frag_last(buf);
   1c650:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->chan.chan.conn;
   1c652:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   1c654:	f001 fa50 	bl	1daf8 <net_buf_frag_last>
	size_t len, total = 0;
   1c658:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   1c65c:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1c65e:	4630      	mov	r0, r6
   1c660:	f7ff feb7 	bl	1c3d2 <net_buf_frags_len>
   1c664:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   1c668:	f105 0708 	add.w	r7, r5, #8
   1c66c:	1a24      	subs	r4, r4, r0
   1c66e:	4638      	mov	r0, r7
   1c670:	f001 faa8 	bl	1dbc4 <net_buf_simple_tailroom>
   1c674:	4284      	cmp	r4, r0
   1c676:	d211      	bcs.n	1c69c <att_chan_read+0x6c>
   1c678:	4630      	mov	r0, r6
   1c67a:	f7ff feaa 	bl	1c3d2 <net_buf_frags_len>
   1c67e:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   1c682:	1a24      	subs	r4, r4, r0
		if (!len) {
   1c684:	bb34      	cbnz	r4, 1c6d4 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   1c686:	79b0      	ldrb	r0, [r6, #6]
   1c688:	f7f8 fe8e 	bl	153a8 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1c68c:	2200      	movs	r2, #0
   1c68e:	2300      	movs	r3, #0
   1c690:	f001 f9b4 	bl	1d9fc <net_buf_alloc_fixed>
			if (!frag) {
   1c694:	4605      	mov	r5, r0
   1c696:	b930      	cbnz	r0, 1c6a6 <att_chan_read+0x76>
	return total;
   1c698:	4657      	mov	r7, sl
   1c69a:	e02c      	b.n	1c6f6 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   1c69c:	4638      	mov	r0, r7
   1c69e:	f001 fa91 	bl	1dbc4 <net_buf_simple_tailroom>
   1c6a2:	4604      	mov	r4, r0
   1c6a4:	e7ee      	b.n	1c684 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   1c6a6:	4601      	mov	r1, r0
   1c6a8:	4630      	mov	r0, r6
   1c6aa:	f001 fa36 	bl	1db1a <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1c6ae:	4630      	mov	r0, r6
   1c6b0:	f7ff fe8f 	bl	1c3d2 <net_buf_frags_len>
   1c6b4:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   1c6b8:	f105 0708 	add.w	r7, r5, #8
   1c6bc:	1a24      	subs	r4, r4, r0
   1c6be:	4638      	mov	r0, r7
   1c6c0:	f001 fa80 	bl	1dbc4 <net_buf_simple_tailroom>
   1c6c4:	4284      	cmp	r4, r0
   1c6c6:	d21a      	bcs.n	1c6fe <att_chan_read+0xce>
   1c6c8:	4630      	mov	r0, r6
   1c6ca:	f7ff fe82 	bl	1c3d2 <net_buf_frags_len>
   1c6ce:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   1c6d2:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   1c6d4:	68a9      	ldr	r1, [r5, #8]
   1c6d6:	89aa      	ldrh	r2, [r5, #12]
   1c6d8:	f8cd 9000 	str.w	r9, [sp]
   1c6dc:	f8db 7004 	ldr.w	r7, [fp, #4]
   1c6e0:	440a      	add	r2, r1
   1c6e2:	9803      	ldr	r0, [sp, #12]
   1c6e4:	4659      	mov	r1, fp
   1c6e6:	b2a3      	uxth	r3, r4
   1c6e8:	47b8      	blx	r7
		if (read < 0) {
   1c6ea:	1e07      	subs	r7, r0, #0
   1c6ec:	da0c      	bge.n	1c708 <att_chan_read+0xd8>
				return total;
   1c6ee:	f1ba 0f00 	cmp.w	sl, #0
   1c6f2:	bf18      	it	ne
   1c6f4:	4657      	movne	r7, sl
}
   1c6f6:	4638      	mov	r0, r7
   1c6f8:	b005      	add	sp, #20
   1c6fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c6fe:	4638      	mov	r0, r7
   1c700:	f001 fa60 	bl	1dbc4 <net_buf_simple_tailroom>
   1c704:	4604      	mov	r4, r0
   1c706:	e7e5      	b.n	1c6d4 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   1c708:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1c70a:	b993      	cbnz	r3, 1c732 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   1c70c:	4639      	mov	r1, r7
   1c70e:	f105 0008 	add.w	r0, r5, #8
   1c712:	f001 fa13 	bl	1db3c <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1c716:	4630      	mov	r0, r6
   1c718:	f7ff fe5b 	bl	1c3d2 <net_buf_frags_len>
   1c71c:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   1c720:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1c722:	4283      	cmp	r3, r0
		total += read;
   1c724:	44ba      	add	sl, r7
		offset += read;
   1c726:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1c72a:	d9b5      	bls.n	1c698 <att_chan_read+0x68>
   1c72c:	42a7      	cmp	r7, r4
   1c72e:	d096      	beq.n	1c65e <att_chan_read+0x2e>
   1c730:	e7b2      	b.n	1c698 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   1c732:	4639      	mov	r1, r7
   1c734:	4628      	mov	r0, r5
   1c736:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1c738:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1c73a:	4798      	blx	r3
   1c73c:	2800      	cmp	r0, #0
   1c73e:	d1e5      	bne.n	1c70c <att_chan_read+0xdc>
   1c740:	e7aa      	b.n	1c698 <att_chan_read+0x68>
		return 0;
   1c742:	2700      	movs	r7, #0
   1c744:	e7d7      	b.n	1c6f6 <att_chan_read+0xc6>

0001c746 <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c746:	2200      	movs	r2, #0
	return list->head;
   1c748:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c74a:	b903      	cbnz	r3, 1c74e <sys_slist_find_and_remove.isra.0+0x8>
   1c74c:	4770      	bx	lr
   1c74e:	428b      	cmp	r3, r1
   1c750:	d10f      	bne.n	1c772 <sys_slist_find_and_remove.isra.0+0x2c>
	return node->next;
   1c752:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   1c754:	b93a      	cbnz	r2, 1c766 <sys_slist_find_and_remove.isra.0+0x20>
   1c756:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   1c758:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1c75a:	4291      	cmp	r1, r2
   1c75c:	d100      	bne.n	1c760 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   1c75e:	6043      	str	r3, [r0, #4]
	parent->next = child;
   1c760:	2300      	movs	r3, #0
   1c762:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   1c764:	4770      	bx	lr
	parent->next = child;
   1c766:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1c768:	6843      	ldr	r3, [r0, #4]
   1c76a:	4299      	cmp	r1, r3
	list->tail = node;
   1c76c:	bf08      	it	eq
   1c76e:	6042      	streq	r2, [r0, #4]
}
   1c770:	e7f6      	b.n	1c760 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   1c772:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c774:	681b      	ldr	r3, [r3, #0]
   1c776:	e7e8      	b.n	1c74a <sys_slist_find_and_remove.isra.0+0x4>

0001c778 <att_exec_write_req>:
static uint8_t att_exec_write_req(struct bt_att_chan *chan, struct net_buf *buf)
   1c778:	2006      	movs	r0, #6
   1c77a:	4770      	bx	lr

0001c77c <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1c77c:	2301      	movs	r3, #1
{
   1c77e:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1c780:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1c784:	e8d0 3fef 	ldaex	r3, [r0]
   1c788:	ea43 0201 	orr.w	r2, r3, r1
   1c78c:	e8c0 2fe4 	stlex	r4, r2, [r0]
   1c790:	2c00      	cmp	r4, #0
   1c792:	d1f7      	bne.n	1c784 <atomic_test_and_set_bit+0x8>
	return (old & mask) != 0;
   1c794:	4219      	tst	r1, r3
}
   1c796:	bf14      	ite	ne
   1c798:	2001      	movne	r0, #1
   1c79a:	2000      	moveq	r0, #0
   1c79c:	bd10      	pop	{r4, pc}

0001c79e <read_cb>:
{
   1c79e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	data->err = 0x00;
   1c7a0:	2300      	movs	r3, #0
{
   1c7a2:	4605      	mov	r5, r0
	struct bt_att_chan *chan = data->chan;
   1c7a4:	6816      	ldr	r6, [r2, #0]
{
   1c7a6:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   1c7a8:	6870      	ldr	r0, [r6, #4]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1c7aa:	4629      	mov	r1, r5
	data->err = 0x00;
   1c7ac:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1c7ae:	2295      	movs	r2, #149	; 0x95
   1c7b0:	f000 fc92 	bl	1d0d8 <bt_gatt_check_perm>
   1c7b4:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   1c7b6:	b980      	cbnz	r0, 1c7da <read_cb+0x3c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1c7b8:	e9cd 0000 	strd	r0, r0, [sp]
   1c7bc:	4629      	mov	r1, r5
   1c7be:	4630      	mov	r0, r6
   1c7c0:	88a3      	ldrh	r3, [r4, #4]
   1c7c2:	68a2      	ldr	r2, [r4, #8]
   1c7c4:	f7ff ff34 	bl	1c630 <att_chan_read>
	if (ret < 0) {
   1c7c8:	2800      	cmp	r0, #0
   1c7ca:	da09      	bge.n	1c7e0 <read_cb+0x42>
	if (err < 0 && err >= -0xff) {
   1c7cc:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   1c7d0:	bf32      	itee	cc
   1c7d2:	200e      	movcc	r0, #14
		return -err;
   1c7d4:	4240      	negcs	r0, r0
   1c7d6:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(ret);
   1c7d8:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   1c7da:	2000      	movs	r0, #0
}
   1c7dc:	b002      	add	sp, #8
   1c7de:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_CONTINUE;
   1c7e0:	2001      	movs	r0, #1
   1c7e2:	e7fb      	b.n	1c7dc <read_cb+0x3e>

0001c7e4 <read_vl_cb>:
{
   1c7e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	data->err = 0x00;
   1c7e8:	2300      	movs	r3, #0
{
   1c7ea:	4606      	mov	r6, r0
	struct bt_att_chan *chan = data->chan;
   1c7ec:	f8d2 8000 	ldr.w	r8, [r2]
{
   1c7f0:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   1c7f2:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1c7f6:	4631      	mov	r1, r6
	data->err = 0x00;
   1c7f8:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1c7fa:	2295      	movs	r2, #149	; 0x95
   1c7fc:	f000 fc6c 	bl	1d0d8 <bt_gatt_check_perm>
   1c800:	4605      	mov	r5, r0
   1c802:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   1c804:	b9e0      	cbnz	r0, 1c840 <read_vl_cb+0x5c>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   1c806:	68a0      	ldr	r0, [r4, #8]
   1c808:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   1c80c:	8982      	ldrh	r2, [r0, #12]
   1c80e:	1a9b      	subs	r3, r3, r2
   1c810:	2b01      	cmp	r3, #1
   1c812:	dd15      	ble.n	1c840 <read_vl_cb+0x5c>
   1c814:	2102      	movs	r1, #2
   1c816:	3008      	adds	r0, #8
   1c818:	f001 f990 	bl	1db3c <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1c81c:	e9cd 5500 	strd	r5, r5, [sp]
   1c820:	4607      	mov	r7, r0
   1c822:	88a3      	ldrh	r3, [r4, #4]
   1c824:	4631      	mov	r1, r6
   1c826:	4640      	mov	r0, r8
   1c828:	68a2      	ldr	r2, [r4, #8]
   1c82a:	f7ff ff01 	bl	1c630 <att_chan_read>
	if (read < 0) {
   1c82e:	1e03      	subs	r3, r0, #0
   1c830:	da0a      	bge.n	1c848 <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   1c832:	f113 0fff 	cmn.w	r3, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   1c836:	bf32      	itee	cc
   1c838:	230e      	movcc	r3, #14
		return -err;
   1c83a:	425b      	negcs	r3, r3
   1c83c:	b2db      	uxtbcs	r3, r3
		data->err = err_to_att(read);
   1c83e:	7323      	strb	r3, [r4, #12]
		return BT_GATT_ITER_STOP;
   1c840:	2000      	movs	r0, #0
}
   1c842:	b002      	add	sp, #8
   1c844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return BT_GATT_ITER_CONTINUE;
   1c848:	2001      	movs	r0, #1
	rsp->len = read;
   1c84a:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   1c84c:	e7f9      	b.n	1c842 <read_vl_cb+0x5e>

0001c84e <bt_att_sent>:
{
   1c84e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c850:	4605      	mov	r5, r0
	struct bt_att *att = chan->att;
   1c852:	f850 4c04 	ldr.w	r4, [r0, #-4]
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1c856:	1f07      	subs	r7, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c858:	f100 038c 	add.w	r3, r0, #140	; 0x8c
   1c85c:	e8d3 1fef 	ldaex	r1, [r3]
   1c860:	f021 0110 	bic.w	r1, r1, #16
   1c864:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1c868:	2a00      	cmp	r2, #0
   1c86a:	d1f7      	bne.n	1c85c <bt_att_sent+0xe>
	if (!att) {
   1c86c:	b30c      	cbz	r4, 1c8b2 <_flash_used+0x3a>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   1c86e:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   1c872:	b98b      	cbnz	r3, 1c898 <_flash_used+0x20>
   1c874:	6863      	ldr	r3, [r4, #4]
   1c876:	b17b      	cbz	r3, 1c898 <_flash_used+0x20>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1c878:	1d20      	adds	r0, r4, #4
   1c87a:	f7ff fda0 	bl	1c3be <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1c87e:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1c880:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1c882:	4638      	mov	r0, r7
   1c884:	f7ff fe93 	bl	1c5ae <chan_req_send>
   1c888:	2800      	cmp	r0, #0
   1c88a:	da12      	bge.n	1c8b2 <_flash_used+0x3a>
	return list->head;
   1c88c:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   1c88e:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1c890:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   1c892:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   1c894:	b903      	cbnz	r3, 1c898 <_flash_used+0x20>
	list->tail = node;
   1c896:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   1c898:	4638      	mov	r0, r7
   1c89a:	f105 0194 	add.w	r1, r5, #148	; 0x94
   1c89e:	f7ff fea0 	bl	1c5e2 <process_queue>
	if (!err) {
   1c8a2:	b130      	cbz	r0, 1c8b2 <_flash_used+0x3a>
	(void)process_queue(chan, &att->tx_queue);
   1c8a4:	4638      	mov	r0, r7
   1c8a6:	f104 010c 	add.w	r1, r4, #12
}
   1c8aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   1c8ae:	f7ff be98 	b.w	1c5e2 <process_queue>
}
   1c8b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001c8b4 <att_req_send_process>:
{
   1c8b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   1c8b8:	6a44      	ldr	r4, [r0, #36]	; 0x24
   1c8ba:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1c8bc:	2c00      	cmp	r4, #0
   1c8be:	d03b      	beq.n	1c938 <att_req_send_process+0x84>
	return node->next;
   1c8c0:	f854 69e0 	ldr.w	r6, [r4], #-224
   1c8c4:	b106      	cbz	r6, 1c8c8 <att_req_send_process+0x14>
   1c8c6:	3ee0      	subs	r6, #224	; 0xe0
{
   1c8c8:	2300      	movs	r3, #0
		req = get_first_req_matching_chan(&att->reqs, chan);
   1c8ca:	f108 0704 	add.w	r7, r8, #4
{
   1c8ce:	461d      	mov	r5, r3
   1c8d0:	e013      	b.n	1c8fa <att_req_send_process+0x46>
		if (!req && prev &&
   1c8d2:	b1c3      	cbz	r3, 1c906 <att_req_send_process+0x52>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   1c8d4:	2103      	movs	r1, #3
   1c8d6:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1c8da:	f7ff fd94 	bl	1c406 <atomic_test_bit>
   1c8de:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   1c8e0:	f103 0090 	add.w	r0, r3, #144	; 0x90
   1c8e4:	f7ff fd8f 	bl	1c406 <atomic_test_bit>
		if (!req && prev &&
   1c8e8:	4282      	cmp	r2, r0
   1c8ea:	d10c      	bne.n	1c906 <att_req_send_process+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1c8ec:	b326      	cbz	r6, 1c938 <att_req_send_process+0x84>
   1c8ee:	f8d6 20e0 	ldr.w	r2, [r6, #224]	; 0xe0
   1c8f2:	b102      	cbz	r2, 1c8f6 <att_req_send_process+0x42>
   1c8f4:	3ae0      	subs	r2, #224	; 0xe0
{
   1c8f6:	4634      	mov	r4, r6
   1c8f8:	4616      	mov	r6, r2
		if (chan->req) {
   1c8fa:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   1c8fe:	2a00      	cmp	r2, #0
   1c900:	d1f4      	bne.n	1c8ec <att_req_send_process+0x38>
		if (!req && prev &&
   1c902:	2d00      	cmp	r5, #0
   1c904:	d0e5      	beq.n	1c8d2 <att_req_send_process+0x1e>
	sys_snode_t *node = sys_slist_get(reqs);
   1c906:	4638      	mov	r0, r7
   1c908:	f7ff fd59 	bl	1c3be <sys_slist_get>
	if (node) {
   1c90c:	4605      	mov	r5, r0
   1c90e:	b908      	cbnz	r0, 1c914 <att_req_send_process+0x60>
   1c910:	4623      	mov	r3, r4
   1c912:	e7eb      	b.n	1c8ec <att_req_send_process+0x38>
	return chan_req_send(chan, req);
   1c914:	4601      	mov	r1, r0
   1c916:	4620      	mov	r0, r4
   1c918:	f7ff fe49 	bl	1c5ae <chan_req_send>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   1c91c:	2800      	cmp	r0, #0
   1c91e:	da0b      	bge.n	1c938 <att_req_send_process+0x84>
	return list->head;
   1c920:	f8d8 3004 	ldr.w	r3, [r8, #4]
	parent->next = child;
   1c924:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   1c926:	f8d8 3008 	ldr.w	r3, [r8, #8]
	list->head = node;
   1c92a:	f8c8 5004 	str.w	r5, [r8, #4]
Z_GENLIST_PREPEND(slist, snode)
   1c92e:	2b00      	cmp	r3, #0
   1c930:	d1ee      	bne.n	1c910 <att_req_send_process+0x5c>
	list->tail = node;
   1c932:	f8c8 5008 	str.w	r5, [r8, #8]
}
   1c936:	e7eb      	b.n	1c910 <att_req_send_process+0x5c>
}
   1c938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001c93c <bt_att_status>:
{
   1c93c:	b538      	push	{r3, r4, r5, lr}
   1c93e:	4605      	mov	r5, r0
   1c940:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1c942:	2100      	movs	r1, #0
   1c944:	f7ff fd5f 	bl	1c406 <atomic_test_bit>
   1c948:	b1c0      	cbz	r0, 1c97c <bt_att_status+0x40>
	if (!chan->att) {
   1c94a:	f855 0c04 	ldr.w	r0, [r5, #-4]
   1c94e:	b1a8      	cbz	r0, 1c97c <bt_att_status+0x40>
	if (chan->req) {
   1c950:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   1c954:	b993      	cbnz	r3, 1c97c <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
   1c956:	3004      	adds	r0, #4
   1c958:	f7ff fd31 	bl	1c3be <sys_slist_get>
	if (!node) {
   1c95c:	4604      	mov	r4, r0
   1c95e:	b168      	cbz	r0, 1c97c <bt_att_status+0x40>
	return chan_req_send(chan, req);
   1c960:	4601      	mov	r1, r0
   1c962:	1f28      	subs	r0, r5, #4
   1c964:	f7ff fe23 	bl	1c5ae <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1c968:	2800      	cmp	r0, #0
   1c96a:	da07      	bge.n	1c97c <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
   1c96c:	f855 3c04 	ldr.w	r3, [r5, #-4]
	return list->head;
   1c970:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1c972:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1c974:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1c976:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1c978:	b902      	cbnz	r2, 1c97c <bt_att_status+0x40>
	list->tail = node;
   1c97a:	609c      	str	r4, [r3, #8]
}
   1c97c:	bd38      	pop	{r3, r4, r5, pc}

0001c97e <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   1c97e:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   1c980:	6883      	ldr	r3, [r0, #8]
   1c982:	699b      	ldr	r3, [r3, #24]
   1c984:	b10b      	cbz	r3, 1c98a <att_sent+0xc>
		chan->ops->sent(chan);
   1c986:	3004      	adds	r0, #4
   1c988:	4718      	bx	r3
}
   1c98a:	4770      	bx	lr

0001c98c <att_unknown>:
{
   1c98c:	b510      	push	{r4, lr}
   1c98e:	460c      	mov	r4, r1
	if (!err) {
   1c990:	b90a      	cbnz	r2, 1c996 <att_unknown+0xa>
		att_sent(conn, user_data);
   1c992:	f7ff fff4 	bl	1c97e <att_sent>
	tx_meta_data_free(user_data);
   1c996:	4620      	mov	r0, r4
}
   1c998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   1c99c:	f7f4 bec2 	b.w	11724 <tx_meta_data_free>

0001c9a0 <att_tx_complete>:
{
   1c9a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c9a4:	4606      	mov	r6, r0
   1c9a6:	460d      	mov	r5, r1
	if (!err) {
   1c9a8:	4614      	mov	r4, r2
   1c9aa:	b122      	cbz	r2, 1c9b6 <att_tx_complete+0x16>
}
   1c9ac:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	tx_meta_data_free(data);
   1c9b0:	4608      	mov	r0, r1
   1c9b2:	f7f4 beb7 	b.w	11724 <tx_meta_data_free>
		att_sent(conn, user_data);
   1c9b6:	f7ff ffe2 	bl	1c97e <att_sent>
	bt_gatt_complete_func_t func = data->func;
   1c9ba:	68af      	ldr	r7, [r5, #8]
	tx_meta_data_free(data);
   1c9bc:	4628      	mov	r0, r5
	uint16_t attr_count = data->attr_count;
   1c9be:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   1c9c2:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   1c9c6:	f7f4 fead 	bl	11724 <tx_meta_data_free>
	if (!err && func) {
   1c9ca:	b92f      	cbnz	r7, 1c9d8 <att_tx_complete+0x38>
}
   1c9cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   1c9d0:	4649      	mov	r1, r9
   1c9d2:	4630      	mov	r0, r6
   1c9d4:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   1c9d6:	3401      	adds	r4, #1
   1c9d8:	b2a3      	uxth	r3, r4
   1c9da:	4543      	cmp	r3, r8
   1c9dc:	d3f8      	bcc.n	1c9d0 <att_tx_complete+0x30>
   1c9de:	e7f5      	b.n	1c9cc <att_tx_complete+0x2c>

0001c9e0 <att_req_sent>:
{
   1c9e0:	b510      	push	{r4, lr}
   1c9e2:	460c      	mov	r4, r1
	if (!err) {
   1c9e4:	b90a      	cbnz	r2, 1c9ea <att_req_sent+0xa>
		att_sent(conn, user_data);
   1c9e6:	f7ff ffca 	bl	1c97e <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   1c9ea:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   1c9ec:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   1c9f0:	b12b      	cbz	r3, 1c9fe <att_req_sent+0x1e>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   1c9f2:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1c9f6:	2300      	movs	r3, #0
   1c9f8:	30b0      	adds	r0, #176	; 0xb0
   1c9fa:	f7fc fb71 	bl	190e0 <k_work_reschedule>
	tx_meta_data_free(user_data);
   1c9fe:	4620      	mov	r0, r4
}
   1ca00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   1ca04:	f7f4 be8e 	b.w	11724 <tx_meta_data_free>

0001ca08 <att_cfm_sent>:
{
   1ca08:	b510      	push	{r4, lr}
   1ca0a:	460c      	mov	r4, r1
	if (!err) {
   1ca0c:	b90a      	cbnz	r2, 1ca12 <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   1ca0e:	f7ff ffb6 	bl	1c97e <att_sent>
   1ca12:	6823      	ldr	r3, [r4, #0]
   1ca14:	3390      	adds	r3, #144	; 0x90
   1ca16:	e8d3 1fef 	ldaex	r1, [r3]
   1ca1a:	f021 0102 	bic.w	r1, r1, #2
   1ca1e:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1ca22:	2a00      	cmp	r2, #0
   1ca24:	d1f7      	bne.n	1ca16 <att_cfm_sent+0xe>
	tx_meta_data_free(data);
   1ca26:	4620      	mov	r0, r4
}
   1ca28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   1ca2c:	f7f4 be7a 	b.w	11724 <tx_meta_data_free>

0001ca30 <att_rsp_sent>:
{
   1ca30:	b510      	push	{r4, lr}
   1ca32:	460c      	mov	r4, r1
	if (!err) {
   1ca34:	b90a      	cbnz	r2, 1ca3a <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   1ca36:	f7ff ffa2 	bl	1c97e <att_sent>
   1ca3a:	6823      	ldr	r3, [r4, #0]
   1ca3c:	3390      	adds	r3, #144	; 0x90
   1ca3e:	e8d3 1fef 	ldaex	r1, [r3]
   1ca42:	f021 0101 	bic.w	r1, r1, #1
   1ca46:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1ca4a:	2a00      	cmp	r2, #0
   1ca4c:	d1f7      	bne.n	1ca3e <att_rsp_sent+0xe>
	tx_meta_data_free(data);
   1ca4e:	4620      	mov	r0, r4
}
   1ca50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   1ca54:	f7f4 be66 	b.w	11724 <tx_meta_data_free>

0001ca58 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1ca58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ca5c:	4688      	mov	r8, r1
   1ca5e:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1ca60:	2101      	movs	r1, #1
   1ca62:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1ca64:	4605      	mov	r5, r0
   1ca66:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1ca68:	f7f5 f920 	bl	11cac <bt_att_chan_create_pdu>
	if (!buf) {
   1ca6c:	4604      	mov	r4, r0
   1ca6e:	b170      	cbz	r0, 1ca8e <send_err_rsp.part.0+0x36>
   1ca70:	2104      	movs	r1, #4
   1ca72:	3008      	adds	r0, #8
   1ca74:	f001 f862 	bl	1db3c <net_buf_simple_add>
	rsp->request = req;
   1ca78:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
   1ca7c:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
   1ca80:	70c6      	strb	r6, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   1ca82:	4621      	mov	r1, r4
   1ca84:	4628      	mov	r0, r5
}
   1ca86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   1ca8a:	f7ff bdc3 	b.w	1c614 <bt_att_chan_send_rsp>
}
   1ca8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001ca92 <att_write_req>:
{
   1ca92:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1ca94:	460c      	mov	r4, r1
   1ca96:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   1ca98:	f101 0008 	add.w	r0, r1, #8
   1ca9c:	f001 f886 	bl	1dbac <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   1caa0:	89a2      	ldrh	r2, [r4, #12]
   1caa2:	4603      	mov	r3, r0
   1caa4:	9201      	str	r2, [sp, #4]
   1caa6:	68a2      	ldr	r2, [r4, #8]
   1caa8:	2112      	movs	r1, #18
   1caaa:	9200      	str	r2, [sp, #0]
   1caac:	4628      	mov	r0, r5
   1caae:	2213      	movs	r2, #19
   1cab0:	f7f5 fa30 	bl	11f14 <att_write_rsp.constprop.0>
}
   1cab4:	b003      	add	sp, #12
   1cab6:	bd30      	pop	{r4, r5, pc}

0001cab8 <att_write_cmd>:
{
   1cab8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1caba:	460c      	mov	r4, r1
   1cabc:	4605      	mov	r5, r0
   1cabe:	f101 0008 	add.w	r0, r1, #8
   1cac2:	f001 f873 	bl	1dbac <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   1cac6:	89a2      	ldrh	r2, [r4, #12]
   1cac8:	4603      	mov	r3, r0
   1caca:	9201      	str	r2, [sp, #4]
   1cacc:	68a2      	ldr	r2, [r4, #8]
   1cace:	4628      	mov	r0, r5
   1cad0:	9200      	str	r2, [sp, #0]
   1cad2:	2200      	movs	r2, #0
   1cad4:	4611      	mov	r1, r2
   1cad6:	f7f5 fa1d 	bl	11f14 <att_write_rsp.constprop.0>
}
   1cada:	b003      	add	sp, #12
   1cadc:	bd30      	pop	{r4, r5, pc}

0001cade <att_read_blob_req>:
{
   1cade:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   1cae0:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   1cae2:	210c      	movs	r1, #12
   1cae4:	8813      	ldrh	r3, [r2, #0]
   1cae6:	8852      	ldrh	r2, [r2, #2]
   1cae8:	9200      	str	r2, [sp, #0]
   1caea:	220d      	movs	r2, #13
   1caec:	f7f5 fbda 	bl	122a4 <att_read_rsp>
}
   1caf0:	b003      	add	sp, #12
   1caf2:	f85d fb04 	ldr.w	pc, [sp], #4

0001caf6 <att_read_req>:
{
   1caf6:	b507      	push	{r0, r1, r2, lr}
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1caf8:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(req->handle);
   1cafa:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1cafc:	210a      	movs	r1, #10
   1cafe:	881b      	ldrh	r3, [r3, #0]
   1cb00:	9200      	str	r2, [sp, #0]
   1cb02:	220b      	movs	r2, #11
   1cb04:	f7f5 fbce 	bl	122a4 <att_read_rsp>
}
   1cb08:	b003      	add	sp, #12
   1cb0a:	f85d fb04 	ldr.w	pc, [sp], #4

0001cb0e <att_mtu_req>:
{
   1cb0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cb10:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   1cb12:	f850 2b90 	ldr.w	r2, [r0], #144
{
   1cb16:	460b      	mov	r3, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   1cb18:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   1cb1a:	6817      	ldr	r7, [r2, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   1cb1c:	f7ff fc73 	bl	1c406 <atomic_test_bit>
   1cb20:	4604      	mov	r4, r0
   1cb22:	b9f0      	cbnz	r0, 1cb62 <att_mtu_req+0x54>
	mtu_client = sys_le16_to_cpu(req->mtu);
   1cb24:	689b      	ldr	r3, [r3, #8]
   1cb26:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   1cb28:	2e16      	cmp	r6, #22
   1cb2a:	d91c      	bls.n	1cb66 <att_mtu_req+0x58>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   1cb2c:	4638      	mov	r0, r7
   1cb2e:	2202      	movs	r2, #2
   1cb30:	f7f5 fa54 	bl	11fdc <bt_att_create_pdu>
	if (!pdu) {
   1cb34:	4607      	mov	r7, r0
   1cb36:	b1c0      	cbz	r0, 1cb6a <att_mtu_req+0x5c>
	return net_buf_simple_add(&buf->b, len);
   1cb38:	2102      	movs	r1, #2
   1cb3a:	3008      	adds	r0, #8
   1cb3c:	f000 fffe 	bl	1db3c <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   1cb40:	2341      	movs	r3, #65	; 0x41
	bt_att_chan_send_rsp(chan, pdu);
   1cb42:	4639      	mov	r1, r7
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   1cb44:	7003      	strb	r3, [r0, #0]
   1cb46:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   1cb48:	4628      	mov	r0, r5
   1cb4a:	f7ff fd63 	bl	1c614 <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   1cb4e:	2e41      	cmp	r6, #65	; 0x41
   1cb50:	bf28      	it	cs
   1cb52:	2641      	movcs	r6, #65	; 0x41
	att_chan_mtu_updated(chan);
   1cb54:	4628      	mov	r0, r5
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   1cb56:	836e      	strh	r6, [r5, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   1cb58:	856e      	strh	r6, [r5, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   1cb5a:	f7ff fce2 	bl	1c522 <att_chan_mtu_updated>
	return 0;
   1cb5e:	4620      	mov	r0, r4
}
   1cb60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   1cb62:	2006      	movs	r0, #6
   1cb64:	e7fc      	b.n	1cb60 <att_mtu_req+0x52>
		return BT_ATT_ERR_INVALID_PDU;
   1cb66:	2004      	movs	r0, #4
   1cb68:	e7fa      	b.n	1cb60 <att_mtu_req+0x52>
		return BT_ATT_ERR_UNLIKELY;
   1cb6a:	200e      	movs	r0, #14
   1cb6c:	e7f8      	b.n	1cb60 <att_mtu_req+0x52>

0001cb6e <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   1cb6e:	898a      	ldrh	r2, [r1, #12]
   1cb70:	2300      	movs	r3, #0
   1cb72:	6889      	ldr	r1, [r1, #8]
   1cb74:	f7f5 bd42 	b.w	125fc <att_handle_rsp>

0001cb78 <bt_att_encrypt_change>:
{
   1cb78:	b570      	push	{r4, r5, r6, lr}
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   1cb7a:	4606      	mov	r6, r0
	if (!att_chan->att) {
   1cb7c:	f850 3c04 	ldr.w	r3, [r0, #-4]
{
   1cb80:	4604      	mov	r4, r0
	struct bt_conn *conn = le_chan->chan.conn;
   1cb82:	f856 5904 	ldr.w	r5, [r6], #-4
	if (!att_chan->att) {
   1cb86:	2b00      	cmp	r3, #0
   1cb88:	d038      	beq.n	1cbfc <bt_att_encrypt_change+0x84>
	if (hci_status) {
   1cb8a:	b141      	cbz	r1, 1cb9e <bt_att_encrypt_change+0x26>
		if (att_chan->req && att_chan->req->retrying) {
   1cb8c:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
   1cb90:	2b00      	cmp	r3, #0
   1cb92:	d033      	beq.n	1cbfc <bt_att_encrypt_change+0x84>
   1cb94:	7c1b      	ldrb	r3, [r3, #16]
   1cb96:	07da      	lsls	r2, r3, #31
   1cb98:	d530      	bpl.n	1cbfc <bt_att_encrypt_change+0x84>
		return BT_ATT_ERR_AUTHENTICATION;
   1cb9a:	2305      	movs	r3, #5
   1cb9c:	e021      	b.n	1cbe2 <bt_att_encrypt_change+0x6a>
	bt_gatt_encrypt_change(conn);
   1cb9e:	4628      	mov	r0, r5
   1cba0:	f7f6 fd7c 	bl	1369c <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   1cba4:	7a6b      	ldrb	r3, [r5, #9]
   1cba6:	2b01      	cmp	r3, #1
   1cba8:	d028      	beq.n	1cbfc <bt_att_encrypt_change+0x84>
	if (!(att_chan->req && att_chan->req->retrying)) {
   1cbaa:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
   1cbae:	b32d      	cbz	r5, 1cbfc <bt_att_encrypt_change+0x84>
   1cbb0:	7c2b      	ldrb	r3, [r5, #16]
   1cbb2:	07db      	lsls	r3, r3, #31
   1cbb4:	d522      	bpl.n	1cbfc <bt_att_encrypt_change+0x84>
	if (!req->encode) {
   1cbb6:	68eb      	ldr	r3, [r5, #12]
   1cbb8:	2b00      	cmp	r3, #0
   1cbba:	d0ee      	beq.n	1cb9a <bt_att_encrypt_change+0x22>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   1cbbc:	4630      	mov	r0, r6
   1cbbe:	696a      	ldr	r2, [r5, #20]
   1cbc0:	7c69      	ldrb	r1, [r5, #17]
   1cbc2:	f7f5 f873 	bl	11cac <bt_att_chan_create_pdu>
	if (!buf) {
   1cbc6:	4604      	mov	r4, r0
   1cbc8:	b150      	cbz	r0, 1cbe0 <bt_att_encrypt_change+0x68>
	if (req->encode(buf, req->len, req->user_data)) {
   1cbca:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
   1cbce:	68eb      	ldr	r3, [r5, #12]
   1cbd0:	4798      	blx	r3
   1cbd2:	b168      	cbz	r0, 1cbf0 <bt_att_encrypt_change+0x78>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1cbd4:	6960      	ldr	r0, [r4, #20]
   1cbd6:	f7f4 fda5 	bl	11724 <tx_meta_data_free>
		net_buf_unref(buf);
   1cbda:	4620      	mov	r0, r4
   1cbdc:	f7f8 fca6 	bl	1552c <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   1cbe0:	230e      	movs	r3, #14
		att_handle_rsp(att_chan, NULL, 0, err);
   1cbe2:	2200      	movs	r2, #0
   1cbe4:	4630      	mov	r0, r6
}
   1cbe6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   1cbea:	4611      	mov	r1, r2
   1cbec:	f7f5 bd06 	b.w	125fc <att_handle_rsp>
	if (chan_send(att_chan, buf)) {
   1cbf0:	4621      	mov	r1, r4
   1cbf2:	4630      	mov	r0, r6
   1cbf4:	f7f4 fe6a 	bl	118cc <chan_send>
   1cbf8:	2800      	cmp	r0, #0
   1cbfa:	d1eb      	bne.n	1cbd4 <bt_att_encrypt_change+0x5c>
}
   1cbfc:	bd70      	pop	{r4, r5, r6, pc}

0001cbfe <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   1cbfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cc00:	460d      	mov	r5, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   1cc02:	f7f4 fecb 	bl	1199c <att_get>
	if (!att) {
   1cc06:	4604      	mov	r4, r0
   1cc08:	b940      	cbnz	r0, 1cc1c <bt_att_send+0x1e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1cc0a:	6968      	ldr	r0, [r5, #20]
   1cc0c:	f7f4 fd8a 	bl	11724 <tx_meta_data_free>
		net_buf_unref(buf);
   1cc10:	4628      	mov	r0, r5
   1cc12:	f7f8 fc8b 	bl	1552c <net_buf_unref>
		return -ENOTCONN;
   1cc16:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   1cc1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&att->tx_queue, buf);
   1cc1c:	f100 060c 	add.w	r6, r0, #12
   1cc20:	4629      	mov	r1, r5
   1cc22:	4630      	mov	r0, r6
   1cc24:	f000 ff57 	bl	1dad6 <net_buf_put>
	return list->head;
   1cc28:	6a65      	ldr	r5, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1cc2a:	b14d      	cbz	r5, 1cc40 <bt_att_send+0x42>
	return node->next;
   1cc2c:	f855 49e0 	ldr.w	r4, [r5], #-224
   1cc30:	b104      	cbz	r4, 1cc34 <bt_att_send+0x36>
   1cc32:	3ce0      	subs	r4, #224	; 0xe0
		err = process_queue(chan, &att->tx_queue);
   1cc34:	4631      	mov	r1, r6
   1cc36:	4628      	mov	r0, r5
   1cc38:	f7ff fcd3 	bl	1c5e2 <process_queue>
		if (!err) {
   1cc3c:	4603      	mov	r3, r0
   1cc3e:	b980      	cbnz	r0, 1cc62 <bt_att_send+0x64>
	return 0;
   1cc40:	2000      	movs	r0, #0
   1cc42:	e7ea      	b.n	1cc1a <bt_att_send+0x1c>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   1cc44:	2103      	movs	r1, #3
   1cc46:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1cc4a:	f7ff fbdc 	bl	1c406 <atomic_test_bit>
   1cc4e:	4607      	mov	r7, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   1cc50:	f105 0090 	add.w	r0, r5, #144	; 0x90
   1cc54:	f7ff fbd7 	bl	1c406 <atomic_test_bit>
		if (err == -ENOENT && prev &&
   1cc58:	4287      	cmp	r7, r0
   1cc5a:	f06f 0301 	mvn.w	r3, #1
   1cc5e:	d107      	bne.n	1cc70 <bt_att_send+0x72>
   1cc60:	4614      	mov	r4, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1cc62:	2c00      	cmp	r4, #0
   1cc64:	d0ec      	beq.n	1cc40 <bt_att_send+0x42>
   1cc66:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
   1cc6a:	b922      	cbnz	r2, 1cc76 <bt_att_send+0x78>
		if (err == -ENOENT && prev &&
   1cc6c:	3302      	adds	r3, #2
   1cc6e:	d0e9      	beq.n	1cc44 <bt_att_send+0x46>
{
   1cc70:	4625      	mov	r5, r4
   1cc72:	4614      	mov	r4, r2
   1cc74:	e7de      	b.n	1cc34 <bt_att_send+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1cc76:	3ae0      	subs	r2, #224	; 0xe0
   1cc78:	e7f8      	b.n	1cc6c <bt_att_send+0x6e>

0001cc7a <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   1cc7a:	b510      	push	{r4, lr}
   1cc7c:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   1cc7e:	f7f4 fe8d 	bl	1199c <att_get>
	if (!att) {
   1cc82:	b160      	cbz	r0, 1cc9e <bt_att_req_send+0x24>
	parent->next = child;
   1cc84:	2300      	movs	r3, #0
   1cc86:	6023      	str	r3, [r4, #0]
	return list->tail;
   1cc88:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   1cc8a:	b92b      	cbnz	r3, 1cc98 <bt_att_req_send+0x1e>
	list->head = node;
   1cc8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   1cc90:	f7ff fe10 	bl	1c8b4 <att_req_send_process>

	return 0;
   1cc94:	2000      	movs	r0, #0
}
   1cc96:	bd10      	pop	{r4, pc}
	parent->next = child;
   1cc98:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1cc9a:	6084      	str	r4, [r0, #8]
}
   1cc9c:	e7f8      	b.n	1cc90 <bt_att_req_send+0x16>
		return -ENOTCONN;
   1cc9e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1cca2:	e7f8      	b.n	1cc96 <bt_att_req_send+0x1c>

0001cca4 <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   1cca4:	2001      	movs	r0, #1
   1cca6:	4770      	bx	lr

0001cca8 <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   1cca8:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
   1ccaa:	f7f4 fe77 	bl	1199c <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   1ccae:	b178      	cbz	r0, 1ccd0 <bt_att_clear_out_of_sync_sent+0x28>
	return list->head;
   1ccb0:	6a43      	ldr	r3, [r0, #36]	; 0x24
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1ccb2:	b16b      	cbz	r3, 1ccd0 <bt_att_clear_out_of_sync_sent+0x28>
   1ccb4:	3be0      	subs	r3, #224	; 0xe0
   1ccb6:	f103 0290 	add.w	r2, r3, #144	; 0x90
   1ccba:	e8d2 0fef 	ldaex	r0, [r2]
   1ccbe:	f020 0020 	bic.w	r0, r0, #32
   1ccc2:	e8c2 0fe1 	stlex	r1, r0, [r2]
   1ccc6:	2900      	cmp	r1, #0
   1ccc8:	d1f7      	bne.n	1ccba <bt_att_clear_out_of_sync_sent+0x12>
	return node->next;
   1ccca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   1ccce:	e7f0      	b.n	1ccb2 <bt_att_clear_out_of_sync_sent+0xa>
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
	}
}
   1ccd0:	bd08      	pop	{r3, pc}

0001ccd2 <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   1ccd2:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1ccd4:	2104      	movs	r1, #4
   1ccd6:	f7ff fb68 	bl	1c3aa <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   1ccda:	b128      	cbz	r0, 1cce8 <bt_att_out_of_sync_sent_on_fixed+0x16>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   1ccdc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   1cce0:	2105      	movs	r1, #5
   1cce2:	308c      	adds	r0, #140	; 0x8c
   1cce4:	f7ff bb8f 	b.w	1c406 <atomic_test_bit>
}
   1cce8:	bd08      	pop	{r3, pc}

0001ccea <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   1ccea:	6940      	ldr	r0, [r0, #20]

	data->func = func;
	data->user_data = user_data;
   1ccec:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   1ccf0:	2201      	movs	r2, #1
	data->chan_opt = chan_opt;
   1ccf2:	7403      	strb	r3, [r0, #16]
	data->attr_count = 1;
   1ccf4:	8082      	strh	r2, [r0, #4]
}
   1ccf6:	4770      	bx	lr

0001ccf8 <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   1ccf8:	6010      	str	r0, [r2, #0]
}
   1ccfa:	2000      	movs	r0, #0
   1ccfc:	4770      	bx	lr

0001ccfe <gatt_ccc_changed>:
{
   1ccfe:	460b      	mov	r3, r1
   1cd00:	8909      	ldrh	r1, [r1, #8]
   1cd02:	8a5a      	ldrh	r2, [r3, #18]
   1cd04:	4291      	cmp	r1, r2
   1cd06:	bf38      	it	cc
   1cd08:	4611      	movcc	r1, r2
	if (value != ccc->value) {
   1cd0a:	8a9a      	ldrh	r2, [r3, #20]
   1cd0c:	428a      	cmp	r2, r1
   1cd0e:	d003      	beq.n	1cd18 <gatt_ccc_changed+0x1a>
		ccc->value = value;
   1cd10:	8299      	strh	r1, [r3, #20]
		if (ccc->cfg_changed) {
   1cd12:	699b      	ldr	r3, [r3, #24]
   1cd14:	b103      	cbz	r3, 1cd18 <gatt_ccc_changed+0x1a>
			ccc->cfg_changed(attr, value);
   1cd16:	4718      	bx	r3
}
   1cd18:	4770      	bx	lr

0001cd1a <gatt_indicate_rsp>:
{
   1cd1a:	b510      	push	{r4, lr}
   1cd1c:	9c02      	ldr	r4, [sp, #8]
   1cd1e:	460a      	mov	r2, r1
	if (params->func) {
   1cd20:	68a3      	ldr	r3, [r4, #8]
   1cd22:	b10b      	cbz	r3, 1cd28 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   1cd24:	4621      	mov	r1, r4
   1cd26:	4798      	blx	r3
	params->_ref--;
   1cd28:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   1cd2a:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   1cd2c:	3b01      	subs	r3, #1
   1cd2e:	b2db      	uxtb	r3, r3
   1cd30:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   1cd32:	b122      	cbz	r2, 1cd3e <gatt_indicate_rsp+0x24>
   1cd34:	b91b      	cbnz	r3, 1cd3e <gatt_indicate_rsp+0x24>
		params->destroy(params);
   1cd36:	4620      	mov	r0, r4
}
   1cd38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   1cd3c:	4710      	bx	r2
}
   1cd3e:	bd10      	pop	{r4, pc}

0001cd40 <match_uuid>:
	data->attr = attr;
   1cd40:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   1cd42:	8091      	strh	r1, [r2, #4]
}
   1cd44:	2000      	movs	r0, #0
   1cd46:	4770      	bx	lr

0001cd48 <gen_hash_m>:
{
   1cd48:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1cd4a:	6807      	ldr	r7, [r0, #0]
{
   1cd4c:	4606      	mov	r6, r0
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1cd4e:	783d      	ldrb	r5, [r7, #0]
{
   1cd50:	4614      	mov	r4, r2
   1cd52:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1cd54:	b9dd      	cbnz	r5, 1cd8e <gen_hash_m+0x46>
	switch (u16->val) {
   1cd56:	887b      	ldrh	r3, [r7, #2]
   1cd58:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   1cd5c:	d004      	beq.n	1cd68 <gen_hash_m+0x20>
   1cd5e:	d810      	bhi.n	1cd82 <gen_hash_m+0x3a>
   1cd60:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   1cd64:	2b03      	cmp	r3, #3
   1cd66:	d812      	bhi.n	1cd8e <gen_hash_m+0x46>
		value = sys_cpu_to_le16(handle);
   1cd68:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1cd6c:	2202      	movs	r2, #2
   1cd6e:	4620      	mov	r0, r4
   1cd70:	f10d 010a 	add.w	r1, sp, #10
   1cd74:	f7fe fa4f 	bl	1b216 <tc_cmac_update>
   1cd78:	b968      	cbnz	r0, 1cd96 <gen_hash_m+0x4e>
			return BT_GATT_ITER_STOP;
   1cd7a:	f06f 0215 	mvn.w	r2, #21
			state->err = -EINVAL;
   1cd7e:	65a2      	str	r2, [r4, #88]	; 0x58
   1cd80:	e006      	b.n	1cd90 <gen_hash_m+0x48>
	switch (u16->val) {
   1cd82:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   1cd86:	33ff      	adds	r3, #255	; 0xff
   1cd88:	b29b      	uxth	r3, r3
   1cd8a:	2b04      	cmp	r3, #4
   1cd8c:	d91e      	bls.n	1cdcc <gen_hash_m+0x84>
			return BT_GATT_ITER_STOP;
   1cd8e:	2501      	movs	r5, #1
}
   1cd90:	4628      	mov	r0, r5
   1cd92:	b009      	add	sp, #36	; 0x24
   1cd94:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = sys_cpu_to_le16(u16->val);
   1cd96:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1cd98:	2202      	movs	r2, #2
   1cd9a:	4620      	mov	r0, r4
   1cd9c:	f10d 010a 	add.w	r1, sp, #10
		value = sys_cpu_to_le16(u16->val);
   1cda0:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1cda4:	f7fe fa37 	bl	1b216 <tc_cmac_update>
   1cda8:	2800      	cmp	r0, #0
   1cdaa:	d0e6      	beq.n	1cd7a <gen_hash_m+0x32>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   1cdac:	2000      	movs	r0, #0
   1cdae:	9000      	str	r0, [sp, #0]
   1cdb0:	aa03      	add	r2, sp, #12
   1cdb2:	2313      	movs	r3, #19
   1cdb4:	4631      	mov	r1, r6
   1cdb6:	6877      	ldr	r7, [r6, #4]
   1cdb8:	47b8      	blx	r7
		if (len < 0) {
   1cdba:	1e02      	subs	r2, r0, #0
   1cdbc:	dbdf      	blt.n	1cd7e <gen_hash_m+0x36>
		if (tc_cmac_update(&state->state, data, len) ==
   1cdbe:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1cdc0:	4620      	mov	r0, r4
   1cdc2:	f7fe fa28 	bl	1b216 <tc_cmac_update>
   1cdc6:	2800      	cmp	r0, #0
   1cdc8:	d1e1      	bne.n	1cd8e <gen_hash_m+0x46>
   1cdca:	e7d6      	b.n	1cd7a <gen_hash_m+0x32>
		value = sys_cpu_to_le16(handle);
   1cdcc:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1cdd0:	2202      	movs	r2, #2
   1cdd2:	4620      	mov	r0, r4
   1cdd4:	f10d 010a 	add.w	r1, sp, #10
   1cdd8:	f7fe fa1d 	bl	1b216 <tc_cmac_update>
   1cddc:	2800      	cmp	r0, #0
   1cdde:	d0cc      	beq.n	1cd7a <gen_hash_m+0x32>
		value = sys_cpu_to_le16(u16->val);
   1cde0:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1cde2:	2202      	movs	r2, #2
		value = sys_cpu_to_le16(u16->val);
   1cde4:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1cde8:	f10d 010a 	add.w	r1, sp, #10
   1cdec:	e7e8      	b.n	1cdc0 <gen_hash_m+0x78>

0001cdee <bt_addr_le_eq>:
   1cdee:	2207      	movs	r2, #7
{
   1cdf0:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   1cdf2:	f7fe fd5e 	bl	1b8b2 <memcmp>
}
   1cdf6:	fab0 f080 	clz	r0, r0
   1cdfa:	0940      	lsrs	r0, r0, #5
   1cdfc:	bd08      	pop	{r3, pc}

0001cdfe <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1cdfe:	2207      	movs	r2, #7
   1ce00:	f7fe bd67 	b.w	1b8d2 <memcpy>

0001ce04 <z_log_msg_static_create.constprop.0>:
   1ce04:	2300      	movs	r3, #0
   1ce06:	f7ee bbab 	b.w	b560 <z_impl_z_log_msg_static_create>

0001ce0a <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1ce0a:	2301      	movs	r3, #1
   1ce0c:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1ce0e:	e8d0 2fef 	ldaex	r2, [r0]
   1ce12:	431a      	orrs	r2, r3
   1ce14:	e8c0 2fe1 	stlex	r1, r2, [r0]
   1ce18:	2900      	cmp	r1, #0
   1ce1a:	d1f8      	bne.n	1ce0e <atomic_set_bit+0x4>
}
   1ce1c:	4770      	bx	lr

0001ce1e <sc_restore_rsp>:
{
   1ce1e:	b538      	push	{r3, r4, r5, lr}
   1ce20:	4604      	mov	r4, r0
   1ce22:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   1ce24:	f7ff ff3e 	bl	1cca4 <bt_att_fixed_chan_only>
   1ce28:	b150      	cbz	r0, 1ce40 <sc_restore_rsp+0x22>
		cfg = find_cf_cfg(conn);
   1ce2a:	4620      	mov	r0, r4
   1ce2c:	f7f5 fcbc 	bl	127a8 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   1ce30:	b130      	cbz	r0, 1ce40 <sc_restore_rsp+0x22>
   1ce32:	7a03      	ldrb	r3, [r0, #8]
   1ce34:	07db      	lsls	r3, r3, #31
   1ce36:	d503      	bpl.n	1ce40 <sc_restore_rsp+0x22>
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1ce38:	2100      	movs	r1, #0
   1ce3a:	300c      	adds	r0, #12
   1ce3c:	f7ff ffe5 	bl	1ce0a <atomic_set_bit>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   1ce40:	b965      	cbnz	r5, 1ce5c <sc_restore_rsp+0x3e>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1ce42:	7a20      	ldrb	r0, [r4, #8]
   1ce44:	f104 0188 	add.w	r1, r4, #136	; 0x88
   1ce48:	f7f5 fcdc 	bl	12804 <find_sc_cfg>
		if (sc_cfg) {
   1ce4c:	b130      	cbz	r0, 1ce5c <sc_restore_rsp+0x3e>
	memset(&cfg->data, 0, sizeof(cfg->data));
   1ce4e:	4629      	mov	r1, r5
}
   1ce50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memset(&cfg->data, 0, sizeof(cfg->data));
   1ce54:	2204      	movs	r2, #4
   1ce56:	3008      	adds	r0, #8
   1ce58:	f7fe bd46 	b.w	1b8e8 <memset>
}
   1ce5c:	bd38      	pop	{r3, r4, r5, pc}

0001ce5e <sc_clear>:
{
   1ce5e:	b570      	push	{r4, r5, r6, lr}
   1ce60:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1ce62:	f100 0688 	add.w	r6, r0, #136	; 0x88
   1ce66:	4631      	mov	r1, r6
   1ce68:	7a00      	ldrb	r0, [r0, #8]
   1ce6a:	f7fe febf 	bl	1bbec <bt_addr_le_is_bonded>
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   1ce6e:	4631      	mov	r1, r6
   1ce70:	7a20      	ldrb	r0, [r4, #8]
   1ce72:	f7f5 fcc7 	bl	12804 <find_sc_cfg>
	if (!cfg) {
   1ce76:	b128      	cbz	r0, 1ce84 <sc_clear+0x26>
}
   1ce78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   1ce7c:	220c      	movs	r2, #12
   1ce7e:	2100      	movs	r1, #0
   1ce80:	f7fe bd32 	b.w	1b8e8 <memset>
}
   1ce84:	bd70      	pop	{r4, r5, r6, pc}

0001ce86 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   1ce86:	2a02      	cmp	r2, #2
{
   1ce88:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   1ce8a:	d108      	bne.n	1ce9e <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   1ce8c:	2300      	movs	r3, #0
   1ce8e:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1ce92:	461a      	mov	r2, r3
   1ce94:	7a00      	ldrb	r0, [r0, #8]
   1ce96:	f7f5 fd7f 	bl	12998 <sc_save>
}
   1ce9a:	2002      	movs	r0, #2
   1ce9c:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   1ce9e:	f7ff ffde 	bl	1ce5e <sc_clear>
   1cea2:	e7fa      	b.n	1ce9a <sc_ccc_cfg_write+0x14>

0001cea4 <read_appearance>:
{
   1cea4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1cea6:	4615      	mov	r5, r2
   1cea8:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   1ceac:	461f      	mov	r7, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   1ceae:	f7fe fe9a 	bl	1bbe6 <bt_get_appearance>
	if (offset > value_len) {
   1ceb2:	2e02      	cmp	r6, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   1ceb4:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   1ceb8:	d80e      	bhi.n	1ced8 <read_appearance+0x34>
	len = MIN(buf_len, value_len - offset);
   1ceba:	f1c6 0402 	rsb	r4, r6, #2
   1cebe:	42bc      	cmp	r4, r7
   1cec0:	bfa8      	it	ge
   1cec2:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1cec4:	f10d 0306 	add.w	r3, sp, #6
   1cec8:	4622      	mov	r2, r4
   1ceca:	4628      	mov	r0, r5
   1cecc:	1999      	adds	r1, r3, r6
   1cece:	f7fe fd00 	bl	1b8d2 <memcpy>
}
   1ced2:	4620      	mov	r0, r4
   1ced4:	b003      	add	sp, #12
   1ced6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1ced8:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   1cedc:	e7f9      	b.n	1ced2 <read_appearance+0x2e>

0001cede <read_name>:
{
   1cede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cee2:	4698      	mov	r8, r3
   1cee4:	4615      	mov	r5, r2
   1cee6:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	const char *name = bt_get_name();
   1ceea:	f7f2 fa7f 	bl	f3ec <bt_get_name>
   1ceee:	4607      	mov	r7, r0
				 strlen(name));
   1cef0:	f7fe fcb0 	bl	1b854 <strlen>
	if (offset > value_len) {
   1cef4:	b283      	uxth	r3, r0
   1cef6:	42b3      	cmp	r3, r6
   1cef8:	d30c      	bcc.n	1cf14 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   1cefa:	1b9c      	subs	r4, r3, r6
   1cefc:	4544      	cmp	r4, r8
   1cefe:	bfa8      	it	ge
   1cf00:	4644      	movge	r4, r8
   1cf02:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   1cf04:	4622      	mov	r2, r4
   1cf06:	4628      	mov	r0, r5
   1cf08:	19b9      	adds	r1, r7, r6
   1cf0a:	f7fe fce2 	bl	1b8d2 <memcpy>
}
   1cf0e:	4620      	mov	r0, r4
   1cf10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1cf14:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   1cf18:	e7f9      	b.n	1cf0e <read_name+0x30>

0001cf1a <cf_read>:
{
   1cf1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1cf1c:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   1cf1e:	2300      	movs	r3, #0
{
   1cf20:	4615      	mov	r5, r2
   1cf22:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   1cf26:	f88d 3004 	strb.w	r3, [sp, #4]
	cfg = find_cf_cfg(conn);
   1cf2a:	f7f5 fc3d 	bl	127a8 <find_cf_cfg>
	if (cfg) {
   1cf2e:	b128      	cbz	r0, 1cf3c <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   1cf30:	f100 0108 	add.w	r1, r0, #8
   1cf34:	2201      	movs	r2, #1
   1cf36:	a801      	add	r0, sp, #4
   1cf38:	f7fe fccb 	bl	1b8d2 <memcpy>
	if (offset > value_len) {
   1cf3c:	2e01      	cmp	r6, #1
   1cf3e:	d80d      	bhi.n	1cf5c <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   1cf40:	f1c6 0401 	rsb	r4, r6, #1
   1cf44:	42bc      	cmp	r4, r7
   1cf46:	bfa8      	it	ge
   1cf48:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1cf4a:	ab01      	add	r3, sp, #4
   1cf4c:	4622      	mov	r2, r4
   1cf4e:	4628      	mov	r0, r5
   1cf50:	1999      	adds	r1, r3, r6
   1cf52:	f7fe fcbe 	bl	1b8d2 <memcpy>
}
   1cf56:	4620      	mov	r0, r4
   1cf58:	b003      	add	sp, #12
   1cf5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1cf5c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   1cf60:	e7f9      	b.n	1cf56 <cf_read+0x3c>

0001cf62 <bt_gatt_attr_read_service>:
{
   1cf62:	b513      	push	{r0, r1, r4, lr}
	struct bt_uuid *uuid = attr->user_data;
   1cf64:	68c9      	ldr	r1, [r1, #12]
{
   1cf66:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   1cf68:	780a      	ldrb	r2, [r1, #0]
{
   1cf6a:	461c      	mov	r4, r3
   1cf6c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	if (uuid->type == BT_UUID_TYPE_16) {
   1cf70:	b992      	cbnz	r2, 1cf98 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1cf72:	884a      	ldrh	r2, [r1, #2]
	if (offset > value_len) {
   1cf74:	2b02      	cmp	r3, #2
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1cf76:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1cf7a:	d818      	bhi.n	1cfae <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   1cf7c:	f1c3 0202 	rsb	r2, r3, #2
   1cf80:	4294      	cmp	r4, r2
   1cf82:	bfa8      	it	ge
   1cf84:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1cf86:	4622      	mov	r2, r4
   1cf88:	f10d 0106 	add.w	r1, sp, #6
   1cf8c:	4419      	add	r1, r3
   1cf8e:	f7fe fca0 	bl	1b8d2 <memcpy>
}
   1cf92:	4620      	mov	r0, r4
   1cf94:	b002      	add	sp, #8
   1cf96:	bd10      	pop	{r4, pc}
	if (offset > value_len) {
   1cf98:	2b10      	cmp	r3, #16
				 BT_UUID_128(uuid)->val, 16);
   1cf9a:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   1cf9e:	d806      	bhi.n	1cfae <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   1cfa0:	f1c3 0210 	rsb	r2, r3, #16
   1cfa4:	4294      	cmp	r4, r2
   1cfa6:	bfa8      	it	ge
   1cfa8:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1cfaa:	4622      	mov	r2, r4
   1cfac:	e7ee      	b.n	1cf8c <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1cfae:	f06f 0406 	mvn.w	r4, #6
   1cfb2:	e7ee      	b.n	1cf92 <bt_gatt_attr_read_service+0x30>

0001cfb4 <bt_gatt_attr_read_ccc>:
{
   1cfb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   1cfb6:	68c9      	ldr	r1, [r1, #12]
{
   1cfb8:	4615      	mov	r5, r2
   1cfba:	461f      	mov	r7, r3
   1cfbc:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	cfg = find_ccc_cfg(conn, ccc);
   1cfc0:	f7f5 fc42 	bl	12848 <find_ccc_cfg>
	if (cfg) {
   1cfc4:	b100      	cbz	r0, 1cfc8 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   1cfc6:	8900      	ldrh	r0, [r0, #8]
	if (offset > value_len) {
   1cfc8:	2e02      	cmp	r6, #2
   1cfca:	f8ad 0006 	strh.w	r0, [sp, #6]
   1cfce:	d80e      	bhi.n	1cfee <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   1cfd0:	f1c6 0402 	rsb	r4, r6, #2
   1cfd4:	42bc      	cmp	r4, r7
   1cfd6:	bfa8      	it	ge
   1cfd8:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1cfda:	f10d 0306 	add.w	r3, sp, #6
   1cfde:	4622      	mov	r2, r4
   1cfe0:	4628      	mov	r0, r5
   1cfe2:	1999      	adds	r1, r3, r6
   1cfe4:	f7fe fc75 	bl	1b8d2 <memcpy>
}
   1cfe8:	4620      	mov	r0, r4
   1cfea:	b003      	add	sp, #12
   1cfec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1cfee:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   1cff2:	e7f9      	b.n	1cfe8 <bt_gatt_attr_read_ccc+0x34>

0001cff4 <bt_gatt_attr_read>:
{
   1cff4:	b510      	push	{r4, lr}
   1cff6:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   1cffa:	f8bd 4010 	ldrh.w	r4, [sp, #16]
   1cffe:	4610      	mov	r0, r2
	if (offset > value_len) {
   1d000:	42a1      	cmp	r1, r4
   1d002:	d80b      	bhi.n	1d01c <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   1d004:	1a64      	subs	r4, r4, r1
   1d006:	429c      	cmp	r4, r3
   1d008:	bfa8      	it	ge
   1d00a:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1d00c:	9b03      	ldr	r3, [sp, #12]
   1d00e:	b2a4      	uxth	r4, r4
   1d010:	4622      	mov	r2, r4
   1d012:	4419      	add	r1, r3
   1d014:	f7fe fc5d 	bl	1b8d2 <memcpy>
}
   1d018:	4620      	mov	r0, r4
   1d01a:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1d01c:	f06f 0406 	mvn.w	r4, #6
   1d020:	e7fa      	b.n	1d018 <bt_gatt_attr_read+0x24>

0001d022 <bt_gatt_attr_value_handle>:
{
   1d022:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1d024:	4604      	mov	r4, r0
   1d026:	b910      	cbnz	r0, 1d02e <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   1d028:	2000      	movs	r0, #0
}
   1d02a:	b002      	add	sp, #8
   1d02c:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1d02e:	2300      	movs	r3, #0
   1d030:	f88d 3004 	strb.w	r3, [sp, #4]
   1d034:	f642 0303 	movw	r3, #10243	; 0x2803
   1d038:	6800      	ldr	r0, [r0, #0]
   1d03a:	a901      	add	r1, sp, #4
   1d03c:	f8ad 3006 	strh.w	r3, [sp, #6]
   1d040:	f7fe fc86 	bl	1b950 <bt_uuid_cmp>
   1d044:	2800      	cmp	r0, #0
   1d046:	d1ef      	bne.n	1d028 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   1d048:	68e3      	ldr	r3, [r4, #12]
   1d04a:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   1d04c:	2800      	cmp	r0, #0
   1d04e:	d1ec      	bne.n	1d02a <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   1d050:	4620      	mov	r0, r4
   1d052:	f7f5 fe29 	bl	12ca8 <bt_gatt_attr_get_handle>
   1d056:	3001      	adds	r0, #1
   1d058:	b280      	uxth	r0, r0
	return handle;
   1d05a:	e7e6      	b.n	1d02a <bt_gatt_attr_value_handle+0x8>

0001d05c <bt_gatt_attr_read_chrc>:
{
   1d05c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   1d05e:	68cc      	ldr	r4, [r1, #12]
{
   1d060:	461f      	mov	r7, r3
	pdu.properties = chrc->properties;
   1d062:	79a3      	ldrb	r3, [r4, #6]
{
   1d064:	b087      	sub	sp, #28
   1d066:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
   1d068:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1d06c:	4615      	mov	r5, r2
   1d06e:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1d072:	f7ff ffd6 	bl	1d022 <bt_gatt_attr_value_handle>
   1d076:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1d07a:	6821      	ldr	r1, [r4, #0]
   1d07c:	780b      	ldrb	r3, [r1, #0]
   1d07e:	b99b      	cbnz	r3, 1d0a8 <bt_gatt_attr_read_chrc+0x4c>
		value_len += 2U;
   1d080:	2405      	movs	r4, #5
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1d082:	884b      	ldrh	r3, [r1, #2]
   1d084:	f8ad 3007 	strh.w	r3, [sp, #7]
	if (offset > value_len) {
   1d088:	42b4      	cmp	r4, r6
   1d08a:	d315      	bcc.n	1d0b8 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   1d08c:	1ba4      	subs	r4, r4, r6
   1d08e:	42bc      	cmp	r4, r7
   1d090:	bfa8      	it	ge
   1d092:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1d094:	ab01      	add	r3, sp, #4
   1d096:	b2a4      	uxth	r4, r4
   1d098:	4622      	mov	r2, r4
   1d09a:	4628      	mov	r0, r5
   1d09c:	1999      	adds	r1, r3, r6
   1d09e:	f7fe fc18 	bl	1b8d2 <memcpy>
}
   1d0a2:	4620      	mov	r0, r4
   1d0a4:	b007      	add	sp, #28
   1d0a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   1d0a8:	2210      	movs	r2, #16
   1d0aa:	3101      	adds	r1, #1
   1d0ac:	f10d 0007 	add.w	r0, sp, #7
   1d0b0:	f7fe fc0f 	bl	1b8d2 <memcpy>
		value_len += 16U;
   1d0b4:	2413      	movs	r4, #19
   1d0b6:	e7e7      	b.n	1d088 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1d0b8:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   1d0bc:	e7f1      	b.n	1d0a2 <bt_gatt_attr_read_chrc+0x46>

0001d0be <bt_gatt_foreach_attr>:
{
   1d0be:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1d0c0:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1d0c4:	2300      	movs	r3, #0
   1d0c6:	461a      	mov	r2, r3
   1d0c8:	9300      	str	r3, [sp, #0]
   1d0ca:	f7f5 fe1d 	bl	12d08 <bt_gatt_foreach_attr_type>
}
   1d0ce:	b005      	add	sp, #20
   1d0d0:	f85d fb04 	ldr.w	pc, [sp], #4

0001d0d4 <db_hash_process>:
	db_hash_gen(true);
   1d0d4:	f7f5 be72 	b.w	12dbc <db_hash_gen.constprop.0>

0001d0d8 <bt_gatt_check_perm>:
{
   1d0d8:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   1d0da:	07d4      	lsls	r4, r2, #31
{
   1d0dc:	4605      	mov	r5, r0
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1d0de:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   1d0e0:	d504      	bpl.n	1d0ec <bt_gatt_check_perm+0x14>
   1d0e2:	f013 0f95 	tst.w	r3, #149	; 0x95
   1d0e6:	d027      	beq.n	1d138 <bt_gatt_check_perm+0x60>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1d0e8:	6848      	ldr	r0, [r1, #4]
   1d0ea:	b328      	cbz	r0, 1d138 <bt_gatt_check_perm+0x60>
	if ((mask & BT_GATT_PERM_WRITE) &&
   1d0ec:	0790      	lsls	r0, r2, #30
   1d0ee:	d504      	bpl.n	1d0fa <bt_gatt_check_perm+0x22>
   1d0f0:	f413 7f95 	tst.w	r3, #298	; 0x12a
   1d0f4:	d022      	beq.n	1d13c <bt_gatt_check_perm+0x64>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   1d0f6:	6889      	ldr	r1, [r1, #8]
   1d0f8:	b301      	cbz	r1, 1d13c <bt_gatt_check_perm+0x64>
	mask &= attr->perm;
   1d0fa:	ea02 0403 	and.w	r4, r2, r3
	if (mask & BT_GATT_PERM_LESC_MASK) {
   1d0fe:	f414 7fc0 	tst.w	r4, #384	; 0x180
   1d102:	d007      	beq.n	1d114 <bt_gatt_check_perm+0x3c>
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   1d104:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   1d108:	b90b      	cbnz	r3, 1d10e <bt_gatt_check_perm+0x36>
			return BT_ATT_ERR_AUTHENTICATION;
   1d10a:	2005      	movs	r0, #5
}
   1d10c:	bd38      	pop	{r3, r4, r5, pc}
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   1d10e:	7b5b      	ldrb	r3, [r3, #13]
   1d110:	06db      	lsls	r3, r3, #27
   1d112:	d5fa      	bpl.n	1d10a <bt_gatt_check_perm+0x32>
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   1d114:	f014 0f30 	tst.w	r4, #48	; 0x30
   1d118:	d108      	bne.n	1d12c <bt_gatt_check_perm+0x54>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   1d11a:	f014 000c 	ands.w	r0, r4, #12
   1d11e:	d0f5      	beq.n	1d10c <bt_gatt_check_perm+0x34>
		if (!conn->encrypt) {
   1d120:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   1d122:	2b00      	cmp	r3, #0
   1d124:	bf14      	ite	ne
   1d126:	2000      	movne	r0, #0
   1d128:	200f      	moveq	r0, #15
   1d12a:	e7ef      	b.n	1d10c <bt_gatt_check_perm+0x34>
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   1d12c:	4628      	mov	r0, r5
   1d12e:	f7ff f861 	bl	1c1f4 <bt_conn_get_security>
   1d132:	2802      	cmp	r0, #2
   1d134:	d8f1      	bhi.n	1d11a <bt_gatt_check_perm+0x42>
   1d136:	e7e8      	b.n	1d10a <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   1d138:	2002      	movs	r0, #2
   1d13a:	e7e7      	b.n	1d10c <bt_gatt_check_perm+0x34>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   1d13c:	2003      	movs	r0, #3
   1d13e:	e7e5      	b.n	1d10c <bt_gatt_check_perm+0x34>

0001d140 <bt_gatt_is_subscribed>:
{
   1d140:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1d144:	7b43      	ldrb	r3, [r0, #13]
{
   1d146:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   1d148:	2b07      	cmp	r3, #7
{
   1d14a:	460c      	mov	r4, r1
   1d14c:	4616      	mov	r6, r2
	if (conn->state != BT_CONN_CONNECTED) {
   1d14e:	d110      	bne.n	1d172 <bt_gatt_is_subscribed+0x32>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   1d150:	2300      	movs	r3, #0
   1d152:	f88d 300c 	strb.w	r3, [sp, #12]
   1d156:	f642 0303 	movw	r3, #10243	; 0x2803
   1d15a:	6820      	ldr	r0, [r4, #0]
   1d15c:	a903      	add	r1, sp, #12
   1d15e:	f8ad 300e 	strh.w	r3, [sp, #14]
   1d162:	f7fe fbf5 	bl	1b950 <bt_uuid_cmp>
   1d166:	b960      	cbnz	r0, 1d182 <bt_gatt_is_subscribed+0x42>
		if (!(chrc->properties &
   1d168:	68e3      	ldr	r3, [r4, #12]
   1d16a:	799b      	ldrb	r3, [r3, #6]
   1d16c:	f013 0f30 	tst.w	r3, #48	; 0x30
   1d170:	d103      	bne.n	1d17a <bt_gatt_is_subscribed+0x3a>
		return false;
   1d172:	2000      	movs	r0, #0
}
   1d174:	b004      	add	sp, #16
   1d176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		attr = bt_gatt_attr_next(attr);
   1d17a:	4620      	mov	r0, r4
   1d17c:	f7f5 feb4 	bl	12ee8 <bt_gatt_attr_next>
   1d180:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   1d182:	2300      	movs	r3, #0
   1d184:	6820      	ldr	r0, [r4, #0]
   1d186:	f88d 300c 	strb.w	r3, [sp, #12]
   1d18a:	f642 1302 	movw	r3, #10498	; 0x2902
   1d18e:	a903      	add	r1, sp, #12
   1d190:	f8ad 300e 	strh.w	r3, [sp, #14]
   1d194:	f7fe fbdc 	bl	1b950 <bt_uuid_cmp>
   1d198:	b118      	cbz	r0, 1d1a2 <bt_gatt_is_subscribed+0x62>
		attr = bt_gatt_attr_next(attr);
   1d19a:	4620      	mov	r0, r4
   1d19c:	f7f5 fea4 	bl	12ee8 <bt_gatt_attr_next>
   1d1a0:	4604      	mov	r4, r0
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   1d1a2:	2700      	movs	r7, #0
   1d1a4:	f642 1802 	movw	r8, #10498	; 0x2902
   1d1a8:	6820      	ldr	r0, [r4, #0]
   1d1aa:	4669      	mov	r1, sp
   1d1ac:	f88d 7000 	strb.w	r7, [sp]
   1d1b0:	f8ad 8002 	strh.w	r8, [sp, #2]
   1d1b4:	f7fe fbcc 	bl	1b950 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1d1b8:	bb20      	cbnz	r0, 1d204 <bt_gatt_is_subscribed+0xc4>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   1d1ba:	2300      	movs	r3, #0
   1d1bc:	6820      	ldr	r0, [r4, #0]
   1d1be:	f88d 300c 	strb.w	r3, [sp, #12]
   1d1c2:	f642 1302 	movw	r3, #10498	; 0x2902
   1d1c6:	a903      	add	r1, sp, #12
   1d1c8:	f8ad 300e 	strh.w	r3, [sp, #14]
   1d1cc:	f7fe fbc0 	bl	1b950 <bt_uuid_cmp>
   1d1d0:	2800      	cmp	r0, #0
   1d1d2:	d1ce      	bne.n	1d172 <bt_gatt_is_subscribed+0x32>
	ccc = attr->user_data;
   1d1d4:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   1d1d6:	4628      	mov	r0, r5
   1d1d8:	4622      	mov	r2, r4
   1d1da:	f812 1b01 	ldrb.w	r1, [r2], #1
   1d1de:	f7ff f80b 	bl	1c1f8 <bt_conn_is_peer_addr_le>
   1d1e2:	b110      	cbz	r0, 1d1ea <bt_gatt_is_subscribed+0xaa>
   1d1e4:	8923      	ldrh	r3, [r4, #8]
   1d1e6:	421e      	tst	r6, r3
   1d1e8:	d10a      	bne.n	1d200 <bt_gatt_is_subscribed+0xc0>
   1d1ea:	4628      	mov	r0, r5
   1d1ec:	7aa1      	ldrb	r1, [r4, #10]
   1d1ee:	f104 020b 	add.w	r2, r4, #11
   1d1f2:	f7ff f801 	bl	1c1f8 <bt_conn_is_peer_addr_le>
   1d1f6:	2800      	cmp	r0, #0
   1d1f8:	d0bb      	beq.n	1d172 <bt_gatt_is_subscribed+0x32>
   1d1fa:	8a63      	ldrh	r3, [r4, #18]
   1d1fc:	421e      	tst	r6, r3
   1d1fe:	d0b8      	beq.n	1d172 <bt_gatt_is_subscribed+0x32>
			return true;
   1d200:	2001      	movs	r0, #1
   1d202:	e7b7      	b.n	1d174 <bt_gatt_is_subscribed+0x34>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   1d204:	f642 0303 	movw	r3, #10243	; 0x2803
   1d208:	6820      	ldr	r0, [r4, #0]
   1d20a:	a901      	add	r1, sp, #4
   1d20c:	f88d 7004 	strb.w	r7, [sp, #4]
   1d210:	f8ad 3006 	strh.w	r3, [sp, #6]
   1d214:	f7fe fb9c 	bl	1b950 <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   1d218:	2800      	cmp	r0, #0
   1d21a:	d0ce      	beq.n	1d1ba <bt_gatt_is_subscribed+0x7a>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1d21c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1d220:	6820      	ldr	r0, [r4, #0]
   1d222:	a902      	add	r1, sp, #8
   1d224:	f88d 7008 	strb.w	r7, [sp, #8]
   1d228:	f8ad 300a 	strh.w	r3, [sp, #10]
   1d22c:	f7fe fb90 	bl	1b950 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   1d230:	2800      	cmp	r0, #0
   1d232:	d0c2      	beq.n	1d1ba <bt_gatt_is_subscribed+0x7a>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1d234:	f642 0301 	movw	r3, #10241	; 0x2801
   1d238:	6820      	ldr	r0, [r4, #0]
   1d23a:	a903      	add	r1, sp, #12
   1d23c:	f88d 700c 	strb.w	r7, [sp, #12]
   1d240:	f8ad 300e 	strh.w	r3, [sp, #14]
   1d244:	f7fe fb84 	bl	1b950 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1d248:	2800      	cmp	r0, #0
   1d24a:	d0b6      	beq.n	1d1ba <bt_gatt_is_subscribed+0x7a>
		attr = bt_gatt_attr_next(attr);
   1d24c:	4620      	mov	r0, r4
   1d24e:	f7f5 fe4b 	bl	12ee8 <bt_gatt_attr_next>
		if (!attr) {
   1d252:	4604      	mov	r4, r0
   1d254:	2800      	cmp	r0, #0
   1d256:	d1a7      	bne.n	1d1a8 <bt_gatt_is_subscribed+0x68>
   1d258:	e78b      	b.n	1d172 <bt_gatt_is_subscribed+0x32>

0001d25a <bt_gatt_change_aware>:
{
   1d25a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d25c:	4606      	mov	r6, r0
   1d25e:	460f      	mov	r7, r1
	cfg = find_cf_cfg(conn);
   1d260:	f7f5 faa2 	bl	127a8 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1d264:	b1e0      	cbz	r0, 1d2a0 <bt_gatt_change_aware+0x46>
   1d266:	7a03      	ldrb	r3, [r0, #8]
   1d268:	07db      	lsls	r3, r3, #31
   1d26a:	d519      	bpl.n	1d2a0 <bt_gatt_change_aware+0x46>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1d26c:	f100 040c 	add.w	r4, r0, #12
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d270:	e8d4 5faf 	lda	r5, [r4]
   1d274:	f015 0501 	ands.w	r5, r5, #1
   1d278:	d112      	bne.n	1d2a0 <bt_gatt_change_aware+0x46>
	if (!req) {
   1d27a:	b197      	cbz	r7, 1d2a2 <bt_gatt_change_aware+0x48>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d27c:	e8d4 1fef 	ldaex	r1, [r4]
   1d280:	f021 0302 	bic.w	r3, r1, #2
   1d284:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1d288:	2a00      	cmp	r2, #0
   1d28a:	d1f7      	bne.n	1d27c <bt_gatt_change_aware+0x22>
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   1d28c:	f011 0702 	ands.w	r7, r1, #2
		bt_att_clear_out_of_sync_sent(conn);
   1d290:	4630      	mov	r0, r6
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   1d292:	d008      	beq.n	1d2a6 <bt_gatt_change_aware+0x4c>
		bt_att_clear_out_of_sync_sent(conn);
   1d294:	f7ff fd08 	bl	1cca8 <bt_att_clear_out_of_sync_sent>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1d298:	4629      	mov	r1, r5
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1d29a:	4620      	mov	r0, r4
   1d29c:	f7ff fdb5 	bl	1ce0a <atomic_set_bit>
		return true;
   1d2a0:	2501      	movs	r5, #1
}
   1d2a2:	4628      	mov	r0, r5
   1d2a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   1d2a6:	f7ff fcfd 	bl	1cca4 <bt_att_fixed_chan_only>
   1d2aa:	2800      	cmp	r0, #0
   1d2ac:	d0f9      	beq.n	1d2a2 <bt_gatt_change_aware+0x48>
   1d2ae:	4630      	mov	r0, r6
   1d2b0:	f7ff fd0f 	bl	1ccd2 <bt_att_out_of_sync_sent_on_fixed>
   1d2b4:	2800      	cmp	r0, #0
   1d2b6:	d0f4      	beq.n	1d2a2 <bt_gatt_change_aware+0x48>
   1d2b8:	e8d4 3fef 	ldaex	r3, [r4]
   1d2bc:	f023 0302 	bic.w	r3, r3, #2
   1d2c0:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1d2c4:	2a00      	cmp	r2, #0
   1d2c6:	d1f7      	bne.n	1d2b8 <bt_gatt_change_aware+0x5e>
		bt_att_clear_out_of_sync_sent(conn);
   1d2c8:	4630      	mov	r0, r6
   1d2ca:	f7ff fced 	bl	1cca8 <bt_att_clear_out_of_sync_sent>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1d2ce:	4639      	mov	r1, r7
   1d2d0:	e7e3      	b.n	1d29a <bt_gatt_change_aware+0x40>

0001d2d2 <sys_memcpy_swap>:
	psrc += length - 1;
   1d2d2:	1e53      	subs	r3, r2, #1
   1d2d4:	4419      	add	r1, r3
	for (; length > 0; length--) {
   1d2d6:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   1d2d8:	f811 3901 	ldrb.w	r3, [r1], #-1
   1d2dc:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   1d2e0:	4290      	cmp	r0, r2
   1d2e2:	d1f9      	bne.n	1d2d8 <sys_memcpy_swap+0x6>
}
   1d2e4:	4770      	bx	lr

0001d2e6 <smp_pairing_rsp>:
}
   1d2e6:	2007      	movs	r0, #7
   1d2e8:	4770      	bx	lr

0001d2ea <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d2ea:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1d2ee:	4108      	asrs	r0, r1
}
   1d2f0:	f000 0001 	and.w	r0, r0, #1
   1d2f4:	4770      	bx	lr

0001d2f6 <update_keys_check>:
{
   1d2f6:	4603      	mov	r3, r0
   1d2f8:	b510      	push	{r4, lr}
	if (!keys ||
   1d2fa:	b1d9      	cbz	r1, 1d334 <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   1d2fc:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   1d2fe:	f010 0f24 	tst.w	r0, #36	; 0x24
   1d302:	d017      	beq.n	1d334 <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   1d304:	7d1a      	ldrb	r2, [r3, #20]
   1d306:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   1d308:	7b09      	ldrb	r1, [r1, #12]
   1d30a:	42a2      	cmp	r2, r4
   1d30c:	bf28      	it	cs
   1d30e:	4622      	movcs	r2, r4
   1d310:	4291      	cmp	r1, r2
   1d312:	d901      	bls.n	1d318 <update_keys_check+0x22>
			return false;
   1d314:	2000      	movs	r0, #0
}
   1d316:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   1d318:	0682      	lsls	r2, r0, #26
   1d31a:	d404      	bmi.n	1d326 <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   1d31c:	7a18      	ldrb	r0, [r3, #8]
   1d31e:	3800      	subs	r0, #0
   1d320:	bf18      	it	ne
   1d322:	2001      	movne	r0, #1
   1d324:	e7f7      	b.n	1d316 <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1d326:	2105      	movs	r1, #5
   1d328:	1d18      	adds	r0, r3, #4
   1d32a:	f7ff ffde 	bl	1d2ea <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   1d32e:	2800      	cmp	r0, #0
   1d330:	d1f4      	bne.n	1d31c <update_keys_check+0x26>
   1d332:	e7ef      	b.n	1d314 <update_keys_check+0x1e>
	return true;
   1d334:	2001      	movs	r0, #1
   1d336:	e7ee      	b.n	1d316 <update_keys_check+0x20>

0001d338 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1d338:	2301      	movs	r3, #1
   1d33a:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1d33c:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d33e:	e8d0 2fef 	ldaex	r2, [r0]
   1d342:	401a      	ands	r2, r3
   1d344:	e8c0 2fe1 	stlex	r1, r2, [r0]
   1d348:	2900      	cmp	r1, #0
   1d34a:	d1f8      	bne.n	1d33e <atomic_clear_bit+0x6>
}
   1d34c:	4770      	bx	lr

0001d34e <bt_smp_aes_cmac>:
{
   1d34e:	b570      	push	{r4, r5, r6, lr}
   1d350:	b0c2      	sub	sp, #264	; 0x108
   1d352:	460d      	mov	r5, r1
   1d354:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   1d356:	4601      	mov	r1, r0
   1d358:	aa16      	add	r2, sp, #88	; 0x58
   1d35a:	4668      	mov	r0, sp
{
   1d35c:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   1d35e:	f7fd ff2f 	bl	1b1c0 <tc_cmac_setup>
   1d362:	b918      	cbnz	r0, 1d36c <bt_smp_aes_cmac+0x1e>
		return -EIO;
   1d364:	f06f 0004 	mvn.w	r0, #4
}
   1d368:	b042      	add	sp, #264	; 0x108
   1d36a:	bd70      	pop	{r4, r5, r6, pc}
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   1d36c:	4632      	mov	r2, r6
   1d36e:	4629      	mov	r1, r5
   1d370:	4668      	mov	r0, sp
   1d372:	f7fd ff50 	bl	1b216 <tc_cmac_update>
   1d376:	2800      	cmp	r0, #0
   1d378:	d0f4      	beq.n	1d364 <bt_smp_aes_cmac+0x16>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   1d37a:	4669      	mov	r1, sp
   1d37c:	4620      	mov	r0, r4
   1d37e:	f7fd ffb4 	bl	1b2ea <tc_cmac_final>
   1d382:	2800      	cmp	r0, #0
   1d384:	d0ee      	beq.n	1d364 <bt_smp_aes_cmac+0x16>
	return 0;
   1d386:	2000      	movs	r0, #0
   1d388:	e7ee      	b.n	1d368 <bt_smp_aes_cmac+0x1a>

0001d38a <smp_security_request>:
static uint8_t smp_security_request(struct bt_smp *smp, struct net_buf *buf)
   1d38a:	2007      	movs	r0, #7
   1d38c:	4770      	bx	lr

0001d38e <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   1d38e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1d390:	4613      	mov	r3, r2
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   1d392:	2200      	movs	r2, #0
   1d394:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   1d396:	4604      	mov	r4, r0
   1d398:	460d      	mov	r5, r1
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   1d39a:	460a      	mov	r2, r1
   1d39c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   1d3a0:	2106      	movs	r1, #6
   1d3a2:	f7fe ffe0 	bl	1c366 <bt_l2cap_send_cb>
   1d3a6:	b128      	cbz	r0, 1d3b4 <smp_send.constprop.0+0x26>
		net_buf_unref(buf);
   1d3a8:	4628      	mov	r0, r5
}
   1d3aa:	b003      	add	sp, #12
   1d3ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   1d3b0:	f7f8 b8bc 	b.w	1552c <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   1d3b4:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1d3b8:	2300      	movs	r3, #0
   1d3ba:	f504 70bc 	add.w	r0, r4, #376	; 0x178
}
   1d3be:	b003      	add	sp, #12
   1d3c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   1d3c4:	f7fb be8c 	b.w	190e0 <k_work_reschedule>

0001d3c8 <z_log_msg_static_create.constprop.0>:
   1d3c8:	2300      	movs	r3, #0
   1d3ca:	f7ee b8c9 	b.w	b560 <z_impl_z_log_msg_static_create>

0001d3ce <smp_chan_get>:
{
   1d3ce:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   1d3d0:	2106      	movs	r1, #6
   1d3d2:	f7fe ffea 	bl	1c3aa <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1d3d6:	b918      	cbnz	r0, 1d3e0 <smp_chan_get+0x12>
}
   1d3d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1d3dc:	f7f6 ba12 	b.w	13804 <smp_chan_get.part.0>
   1d3e0:	38ec      	subs	r0, #236	; 0xec
   1d3e2:	bd08      	pop	{r3, pc}

0001d3e4 <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   1d3e4:	b510      	push	{r4, lr}
   1d3e6:	1e43      	subs	r3, r0, #1
   1d3e8:	f100 0210 	add.w	r2, r0, #16
   1d3ec:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   1d3ee:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1d3f2:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   1d3f6:	4283      	cmp	r3, r0
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1d3f8:	701c      	strb	r4, [r3, #0]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1d3fa:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   1d3fc:	d1f7      	bne.n	1d3ee <sys_mem_swap.constprop.0+0xa>
	}
}
   1d3fe:	bd10      	pop	{r4, pc}

0001d400 <smp_f6>:
{
   1d400:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d402:	4616      	mov	r6, r2
   1d404:	461c      	mov	r4, r3
   1d406:	4605      	mov	r5, r0
   1d408:	b097      	sub	sp, #92	; 0x5c
	sys_memcpy_swap(m, n1, 16);
   1d40a:	2210      	movs	r2, #16
   1d40c:	a805      	add	r0, sp, #20
{
   1d40e:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   1d410:	f7ff ff5f 	bl	1d2d2 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   1d414:	2210      	movs	r2, #16
   1d416:	4631      	mov	r1, r6
   1d418:	a809      	add	r0, sp, #36	; 0x24
   1d41a:	f7ff ff5a 	bl	1d2d2 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   1d41e:	4621      	mov	r1, r4
   1d420:	2210      	movs	r2, #16
   1d422:	a80d      	add	r0, sp, #52	; 0x34
   1d424:	f7ff ff55 	bl	1d2d2 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   1d428:	2203      	movs	r2, #3
   1d42a:	991c      	ldr	r1, [sp, #112]	; 0x70
   1d42c:	a811      	add	r0, sp, #68	; 0x44
   1d42e:	f7ff ff50 	bl	1d2d2 <sys_memcpy_swap>
	m[51] = a1->type;
   1d432:	9c1d      	ldr	r4, [sp, #116]	; 0x74
	memcpy(m + 52, a1->a.val, 6);
   1d434:	2206      	movs	r2, #6
	m[51] = a1->type;
   1d436:	f814 3b01 	ldrb.w	r3, [r4], #1
	memcpy(m + 52, a1->a.val, 6);
   1d43a:	a812      	add	r0, sp, #72	; 0x48
   1d43c:	4621      	mov	r1, r4
	m[51] = a1->type;
   1d43e:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   1d442:	f7fe fa46 	bl	1b8d2 <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   1d446:	4621      	mov	r1, r4
   1d448:	2206      	movs	r2, #6
   1d44a:	a812      	add	r0, sp, #72	; 0x48
   1d44c:	f7ff ff41 	bl	1d2d2 <sys_memcpy_swap>
	m[58] = a2->type;
   1d450:	9c1e      	ldr	r4, [sp, #120]	; 0x78
	memcpy(m + 59, a2->a.val, 6);
   1d452:	2206      	movs	r2, #6
	m[58] = a2->type;
   1d454:	f814 3b01 	ldrb.w	r3, [r4], #1
	memcpy(m + 59, a2->a.val, 6);
   1d458:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   1d45c:	4621      	mov	r1, r4
	m[58] = a2->type;
   1d45e:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   1d462:	f7fe fa36 	bl	1b8d2 <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   1d466:	4621      	mov	r1, r4
   1d468:	2206      	movs	r2, #6
   1d46a:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   1d46e:	f7ff ff30 	bl	1d2d2 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   1d472:	2210      	movs	r2, #16
   1d474:	4629      	mov	r1, r5
   1d476:	a801      	add	r0, sp, #4
   1d478:	f7ff ff2b 	bl	1d2d2 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   1d47c:	463b      	mov	r3, r7
   1d47e:	2241      	movs	r2, #65	; 0x41
   1d480:	a905      	add	r1, sp, #20
   1d482:	a801      	add	r0, sp, #4
   1d484:	f7ff ff63 	bl	1d34e <bt_smp_aes_cmac>
	if (err) {
   1d488:	4604      	mov	r4, r0
   1d48a:	b910      	cbnz	r0, 1d492 <smp_f6+0x92>
	sys_mem_swap(check, 16);
   1d48c:	4638      	mov	r0, r7
   1d48e:	f7ff ffa9 	bl	1d3e4 <sys_mem_swap.constprop.0>
}
   1d492:	4620      	mov	r0, r4
   1d494:	b017      	add	sp, #92	; 0x5c
   1d496:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001d498 <smp_f4>:
{
   1d498:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d49a:	460e      	mov	r6, r1
   1d49c:	4614      	mov	r4, r2
   1d49e:	461d      	mov	r5, r3
   1d4a0:	b097      	sub	sp, #92	; 0x5c
	sys_memcpy_swap(m, u, 32);
   1d4a2:	4601      	mov	r1, r0
   1d4a4:	2220      	movs	r2, #32
   1d4a6:	a805      	add	r0, sp, #20
{
   1d4a8:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   1d4aa:	f7ff ff12 	bl	1d2d2 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   1d4ae:	2220      	movs	r2, #32
   1d4b0:	4631      	mov	r1, r6
   1d4b2:	a80d      	add	r0, sp, #52	; 0x34
   1d4b4:	f7ff ff0d 	bl	1d2d2 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   1d4b8:	4621      	mov	r1, r4
   1d4ba:	2210      	movs	r2, #16
   1d4bc:	a801      	add	r0, sp, #4
	m[64] = z;
   1d4be:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   1d4c2:	f7ff ff06 	bl	1d2d2 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   1d4c6:	463b      	mov	r3, r7
   1d4c8:	2241      	movs	r2, #65	; 0x41
   1d4ca:	a905      	add	r1, sp, #20
   1d4cc:	a801      	add	r0, sp, #4
   1d4ce:	f7ff ff3e 	bl	1d34e <bt_smp_aes_cmac>
	if (err) {
   1d4d2:	4604      	mov	r4, r0
   1d4d4:	b910      	cbnz	r0, 1d4dc <smp_f4+0x44>
	sys_mem_swap(res, 16);
   1d4d6:	4638      	mov	r0, r7
   1d4d8:	f7ff ff84 	bl	1d3e4 <sys_mem_swap.constprop.0>
}
   1d4dc:	4620      	mov	r0, r4
   1d4de:	b017      	add	sp, #92	; 0x5c
   1d4e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001d4e2 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1d4e2:	2301      	movs	r3, #1
   1d4e4:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d4e6:	e8d0 2fef 	ldaex	r2, [r0]
   1d4ea:	431a      	orrs	r2, r3
   1d4ec:	e8c0 2fe1 	stlex	r1, r2, [r0]
   1d4f0:	2900      	cmp	r1, #0
   1d4f2:	d1f8      	bne.n	1d4e6 <atomic_set_bit+0x4>
}
   1d4f4:	4770      	bx	lr

0001d4f6 <smp_keypress_notif>:
{
   1d4f6:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1d4f8:	210e      	movs	r1, #14
   1d4fa:	f7ff fff2 	bl	1d4e2 <atomic_set_bit>
}
   1d4fe:	2000      	movs	r0, #0
   1d500:	bd08      	pop	{r3, pc}

0001d502 <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   1d502:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1d504:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   1d506:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1d508:	4628      	mov	r0, r5
   1d50a:	2104      	movs	r1, #4
   1d50c:	f7ff feed 	bl	1d2ea <atomic_test_bit>
   1d510:	b168      	cbz	r0, 1d52e <smp_create_pdu.constprop.0+0x2c>
		timeout = K_NO_WAIT;
   1d512:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   1d514:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   1d516:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   1d518:	4608      	mov	r0, r1
   1d51a:	f7fe ff21 	bl	1c360 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   1d51e:	4604      	mov	r4, r0
   1d520:	b940      	cbnz	r0, 1d534 <smp_create_pdu.constprop.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1d522:	2104      	movs	r1, #4
   1d524:	4628      	mov	r0, r5
   1d526:	f7ff ffdc 	bl	1d4e2 <atomic_set_bit>
}
   1d52a:	4620      	mov	r0, r4
   1d52c:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   1d52e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1d532:	e7ef      	b.n	1d514 <smp_create_pdu.constprop.0+0x12>
   1d534:	2101      	movs	r1, #1
   1d536:	3008      	adds	r0, #8
   1d538:	f000 fb00 	bl	1db3c <net_buf_simple_add>
	hdr->code = op;
   1d53c:	7006      	strb	r6, [r0, #0]
	return buf;
   1d53e:	e7f4      	b.n	1d52a <smp_create_pdu.constprop.0+0x28>

0001d540 <send_pairing_rsp>:
{
   1d540:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   1d542:	2102      	movs	r1, #2
{
   1d544:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   1d546:	f7ff ffdc 	bl	1d502 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   1d54a:	4604      	mov	r4, r0
   1d54c:	b178      	cbz	r0, 1d56e <send_pairing_rsp+0x2e>
   1d54e:	2106      	movs	r1, #6
   1d550:	3008      	adds	r0, #8
   1d552:	f000 faf3 	bl	1db3c <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
   1d556:	2206      	movs	r2, #6
   1d558:	f105 0111 	add.w	r1, r5, #17
   1d55c:	f7fe f9b9 	bl	1b8d2 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   1d560:	4628      	mov	r0, r5
   1d562:	2200      	movs	r2, #0
   1d564:	4621      	mov	r1, r4
   1d566:	f7ff ff12 	bl	1d38e <smp_send.constprop.0>
	return 0;
   1d56a:	2000      	movs	r0, #0
}
   1d56c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1d56e:	2008      	movs	r0, #8
   1d570:	e7fc      	b.n	1d56c <send_pairing_rsp+0x2c>

0001d572 <smp_send_pairing_random>:
{
   1d572:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   1d574:	2104      	movs	r1, #4
{
   1d576:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   1d578:	f7ff ffc3 	bl	1d502 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   1d57c:	4604      	mov	r4, r0
   1d57e:	b178      	cbz	r0, 1d5a0 <smp_send_pairing_random+0x2e>
   1d580:	2110      	movs	r1, #16
   1d582:	3008      	adds	r0, #8
   1d584:	f000 fada 	bl	1db3c <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   1d588:	2210      	movs	r2, #16
   1d58a:	f105 0127 	add.w	r1, r5, #39	; 0x27
   1d58e:	f7fe f9a0 	bl	1b8d2 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   1d592:	4628      	mov	r0, r5
   1d594:	2200      	movs	r2, #0
   1d596:	4621      	mov	r1, r4
   1d598:	f7ff fef9 	bl	1d38e <smp_send.constprop.0>
	return 0;
   1d59c:	2000      	movs	r0, #0
}
   1d59e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1d5a0:	2008      	movs	r0, #8
   1d5a2:	e7fc      	b.n	1d59e <smp_send_pairing_random+0x2c>

0001d5a4 <smp_dhkey_check>:
{
   1d5a4:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   1d5a6:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
{
   1d5aa:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   1d5ac:	78db      	ldrb	r3, [r3, #3]
   1d5ae:	2b01      	cmp	r3, #1
   1d5b0:	d114      	bne.n	1d5dc <smp_dhkey_check+0x38>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   1d5b2:	688e      	ldr	r6, [r1, #8]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1d5b4:	1d05      	adds	r5, r0, #4
   1d5b6:	2110      	movs	r1, #16
   1d5b8:	4628      	mov	r0, r5
   1d5ba:	f7ff febd 	bl	1d338 <atomic_clear_bit>
		memcpy(smp->e, req->e, sizeof(smp->e));
   1d5be:	4631      	mov	r1, r6
   1d5c0:	2210      	movs	r2, #16
   1d5c2:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   1d5c6:	f7fe f984 	bl	1b8d2 <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   1d5ca:	2107      	movs	r1, #7
   1d5cc:	4628      	mov	r0, r5
   1d5ce:	f7ff fe8c 	bl	1d2ea <atomic_test_bit>
   1d5d2:	b128      	cbz	r0, 1d5e0 <smp_dhkey_check+0x3c>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1d5d4:	2109      	movs	r1, #9
   1d5d6:	4628      	mov	r0, r5
   1d5d8:	f7ff ff83 	bl	1d4e2 <atomic_set_bit>
}
   1d5dc:	2000      	movs	r0, #0
   1d5de:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1d5e0:	210a      	movs	r1, #10
   1d5e2:	4628      	mov	r0, r5
   1d5e4:	f7ff fe81 	bl	1d2ea <atomic_test_bit>
   1d5e8:	2800      	cmp	r0, #0
   1d5ea:	d1f3      	bne.n	1d5d4 <smp_dhkey_check+0x30>
		return compute_and_check_and_send_periph_dhcheck(smp);
   1d5ec:	4620      	mov	r0, r4
}
   1d5ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_periph_dhcheck(smp);
   1d5f2:	f7f6 bd5b 	b.w	140ac <compute_and_check_and_send_periph_dhcheck>

0001d5f6 <smp_signing_info>:
static uint8_t smp_signing_info(struct bt_smp *smp, struct net_buf *buf)
   1d5f6:	2007      	movs	r0, #7
   1d5f8:	4770      	bx	lr

0001d5fa <atomic_test_and_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1d5fa:	2301      	movs	r3, #1
   1d5fc:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1d600:	43ca      	mvns	r2, r1
{
   1d602:	b530      	push	{r4, r5, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d604:	e8d0 3fef 	ldaex	r3, [r0]
   1d608:	ea03 0402 	and.w	r4, r3, r2
   1d60c:	e8c0 4fe5 	stlex	r5, r4, [r0]
   1d610:	2d00      	cmp	r5, #0
   1d612:	d1f7      	bne.n	1d604 <atomic_test_and_clear_bit+0xa>
	return (old & mask) != 0;
   1d614:	4219      	tst	r1, r3
}
   1d616:	bf14      	ite	ne
   1d618:	2001      	movne	r0, #1
   1d61a:	2000      	moveq	r0, #0
   1d61c:	bd30      	pop	{r4, r5, pc}

0001d61e <smp_reset>:
{
   1d61e:	b538      	push	{r3, r4, r5, lr}
   1d620:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1d622:	2500      	movs	r5, #0
   1d624:	1d03      	adds	r3, r0, #4
   1d626:	e8d3 2fef 	ldaex	r2, [r3]
   1d62a:	e8c3 5fe1 	stlex	r1, r5, [r3]
   1d62e:	2900      	cmp	r1, #0
   1d630:	d1f9      	bne.n	1d626 <smp_reset+0x8>
	(void)k_work_cancel_delayable(&smp->work);
   1d632:	f504 70bc 	add.w	r0, r4, #376	; 0x178
   1d636:	f001 fd10 	bl	1f05a <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   1d63a:	7225      	strb	r5, [r4, #8]
   1d63c:	e8d4 3fef 	ldaex	r3, [r4]
   1d640:	e8c4 5fe2 	stlex	r2, r5, [r4]
   1d644:	2a00      	cmp	r2, #0
   1d646:	d1f9      	bne.n	1d63c <smp_reset+0x1e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   1d648:	4620      	mov	r0, r4
}
   1d64a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   1d64e:	2101      	movs	r1, #1
   1d650:	f7ff bf47 	b.w	1d4e2 <atomic_set_bit>

0001d654 <smp_c1>:
{
   1d654:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d658:	4699      	mov	r9, r3
   1d65a:	b089      	sub	sp, #36	; 0x24
   1d65c:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
	p1[0] = ia->type;
   1d660:	783b      	ldrb	r3, [r7, #0]
{
   1d662:	460c      	mov	r4, r1
	p1[0] = ia->type;
   1d664:	f88d 3000 	strb.w	r3, [sp]
	p1[1] = ra->type;
   1d668:	f898 3000 	ldrb.w	r3, [r8]
{
   1d66c:	4611      	mov	r1, r2
   1d66e:	9d12      	ldr	r5, [sp, #72]	; 0x48
	memcpy(p1 + 2, preq, 7);
   1d670:	2207      	movs	r2, #7
{
   1d672:	4606      	mov	r6, r0
	memcpy(p1 + 2, preq, 7);
   1d674:	f10d 0002 	add.w	r0, sp, #2
	p1[1] = ra->type;
   1d678:	f88d 3001 	strb.w	r3, [sp, #1]
	memcpy(p1 + 2, preq, 7);
   1d67c:	f7fe f929 	bl	1b8d2 <memcpy>
	memcpy(p1 + 9, pres, 7);
   1d680:	2207      	movs	r2, #7
   1d682:	4649      	mov	r1, r9
   1d684:	f10d 0009 	add.w	r0, sp, #9
   1d688:	f7fe f923 	bl	1b8d2 <memcpy>
   1d68c:	462a      	mov	r2, r5
   1d68e:	4669      	mov	r1, sp
   1d690:	f104 0010 	add.w	r0, r4, #16
		*r++ = *p++ ^ *q++;
   1d694:	f814 3b01 	ldrb.w	r3, [r4], #1
   1d698:	f811 cb01 	ldrb.w	ip, [r1], #1
	while (len--) {
   1d69c:	4284      	cmp	r4, r0
		*r++ = *p++ ^ *q++;
   1d69e:	ea83 030c 	eor.w	r3, r3, ip
   1d6a2:	f802 3b01 	strb.w	r3, [r2], #1
	while (len--) {
   1d6a6:	d1f5      	bne.n	1d694 <smp_c1+0x40>
	err = bt_encrypt_le(k, enc_data, enc_data);
   1d6a8:	462a      	mov	r2, r5
   1d6aa:	4629      	mov	r1, r5
   1d6ac:	4630      	mov	r0, r6
   1d6ae:	f7fe fc73 	bl	1bf98 <bt_encrypt_le>
	if (err) {
   1d6b2:	4604      	mov	r4, r0
   1d6b4:	bb20      	cbnz	r0, 1d700 <smp_c1+0xac>
	memcpy(p2, ra->a.val, 6);
   1d6b6:	2206      	movs	r2, #6
   1d6b8:	f108 0101 	add.w	r1, r8, #1
   1d6bc:	a804      	add	r0, sp, #16
   1d6be:	f7fe f908 	bl	1b8d2 <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   1d6c2:	2206      	movs	r2, #6
   1d6c4:	1c79      	adds	r1, r7, #1
   1d6c6:	f10d 0016 	add.w	r0, sp, #22
   1d6ca:	f7fe f902 	bl	1b8d2 <memcpy>
	(void)memset(p2 + 12, 0, 4);
   1d6ce:	2204      	movs	r2, #4
   1d6d0:	4621      	mov	r1, r4
   1d6d2:	a807      	add	r0, sp, #28
   1d6d4:	f7fe f908 	bl	1b8e8 <memset>
   1d6d8:	462a      	mov	r2, r5
   1d6da:	f105 0010 	add.w	r0, r5, #16
   1d6de:	ab04      	add	r3, sp, #16
		*r++ = *p++ ^ *q++;
   1d6e0:	f812 1b01 	ldrb.w	r1, [r2], #1
   1d6e4:	f813 4b01 	ldrb.w	r4, [r3], #1
	while (len--) {
   1d6e8:	4282      	cmp	r2, r0
		*r++ = *p++ ^ *q++;
   1d6ea:	ea81 0104 	eor.w	r1, r1, r4
   1d6ee:	f802 1c01 	strb.w	r1, [r2, #-1]
	while (len--) {
   1d6f2:	d1f5      	bne.n	1d6e0 <smp_c1+0x8c>
	return bt_encrypt_le(k, enc_data, enc_data);
   1d6f4:	462a      	mov	r2, r5
   1d6f6:	4629      	mov	r1, r5
   1d6f8:	4630      	mov	r0, r6
   1d6fa:	f7fe fc4d 	bl	1bf98 <bt_encrypt_le>
   1d6fe:	4604      	mov	r4, r0
}
   1d700:	4620      	mov	r0, r4
   1d702:	b009      	add	sp, #36	; 0x24
   1d704:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001d708 <legacy_pairing_confirm>:
{
   1d708:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1d70a:	1d07      	adds	r7, r0, #4
{
   1d70c:	4604      	mov	r4, r0
   1d70e:	b085      	sub	sp, #20
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1d710:	210a      	movs	r1, #10
   1d712:	4638      	mov	r0, r7
   1d714:	f7ff fde9 	bl	1d2ea <atomic_test_bit>
   1d718:	bb88      	cbnz	r0, 1d77e <legacy_pairing_confirm+0x76>
			atomic_set_bit(smp->allowed_cmds,
   1d71a:	2104      	movs	r1, #4
   1d71c:	4620      	mov	r0, r4
   1d71e:	f7ff fee0 	bl	1d4e2 <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   1d722:	2103      	movs	r1, #3
	struct bt_conn *conn = smp->chan.chan.conn;
   1d724:	f8d4 60ec 	ldr.w	r6, [r4, #236]	; 0xec
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   1d728:	f7ff feeb 	bl	1d502 <smp_create_pdu.constprop.0>
	if (!buf) {
   1d72c:	4605      	mov	r5, r0
   1d72e:	b1c0      	cbz	r0, 1d762 <legacy_pairing_confirm+0x5a>
   1d730:	2110      	movs	r1, #16
   1d732:	3008      	adds	r0, #8
   1d734:	f000 fa02 	bl	1db3c <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   1d738:	f106 0396 	add.w	r3, r6, #150	; 0x96
   1d73c:	368f      	adds	r6, #143	; 0x8f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   1d73e:	9002      	str	r0, [sp, #8]
   1d740:	9301      	str	r3, [sp, #4]
   1d742:	9600      	str	r6, [sp, #0]
   1d744:	f104 0310 	add.w	r3, r4, #16
   1d748:	f104 0209 	add.w	r2, r4, #9
   1d74c:	f104 0127 	add.w	r1, r4, #39	; 0x27
   1d750:	f104 0047 	add.w	r0, r4, #71	; 0x47
   1d754:	f7ff ff7e 	bl	1d654 <smp_c1>
   1d758:	4606      	mov	r6, r0
   1d75a:	b128      	cbz	r0, 1d768 <legacy_pairing_confirm+0x60>
		net_buf_unref(buf);
   1d75c:	4628      	mov	r0, r5
   1d75e:	f7f7 fee5 	bl	1552c <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   1d762:	2008      	movs	r0, #8
}
   1d764:	b005      	add	sp, #20
   1d766:	bdf0      	pop	{r4, r5, r6, r7, pc}
	smp_send(smp, buf, NULL, NULL);
   1d768:	4602      	mov	r2, r0
   1d76a:	4629      	mov	r1, r5
   1d76c:	4620      	mov	r0, r4
   1d76e:	f7ff fe0e 	bl	1d38e <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1d772:	4631      	mov	r1, r6
   1d774:	4638      	mov	r0, r7
   1d776:	f7ff fddf 	bl	1d338 <atomic_clear_bit>
	return 0;
   1d77a:	2000      	movs	r0, #0
   1d77c:	e7f2      	b.n	1d764 <legacy_pairing_confirm+0x5c>
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1d77e:	2100      	movs	r1, #0
   1d780:	4638      	mov	r0, r7
   1d782:	f7ff feae 	bl	1d4e2 <atomic_set_bit>
	return 0;
   1d786:	e7f8      	b.n	1d77a <legacy_pairing_confirm+0x72>

0001d788 <bt_smp_request_ltk>:
{
   1d788:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1d78c:	9f09      	ldr	r7, [sp, #36]	; 0x24
   1d78e:	4604      	mov	r4, r0
   1d790:	e9cd 2300 	strd	r2, r3, [sp]
	smp = smp_chan_get(conn);
   1d794:	f7ff fe1b 	bl	1d3ce <smp_chan_get>
	if (!smp) {
   1d798:	4605      	mov	r5, r0
   1d79a:	2800      	cmp	r0, #0
   1d79c:	d07c      	beq.n	1d898 <bt_smp_request_ltk+0x110>
	if (ediv == 0U && rand == 0U &&
   1d79e:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   1d7a2:	1d06      	adds	r6, r0, #4
	if (ediv == 0U && rand == 0U &&
   1d7a4:	f1b8 0f00 	cmp.w	r8, #0
   1d7a8:	d128      	bne.n	1d7fc <bt_smp_request_ltk+0x74>
   1d7aa:	e9dd 3200 	ldrd	r3, r2, [sp]
   1d7ae:	4313      	orrs	r3, r2
   1d7b0:	d124      	bne.n	1d7fc <bt_smp_request_ltk+0x74>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   1d7b2:	2103      	movs	r1, #3
   1d7b4:	4630      	mov	r0, r6
   1d7b6:	f7ff fd98 	bl	1d2ea <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   1d7ba:	b1f8      	cbz	r0, 1d7fc <bt_smp_request_ltk+0x74>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1d7bc:	2101      	movs	r1, #1
   1d7be:	4630      	mov	r0, r6
   1d7c0:	f7ff fd93 	bl	1d2ea <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   1d7c4:	b1d0      	cbz	r0, 1d7fc <bt_smp_request_ltk+0x74>
	return MIN(req->max_key_size, rsp->max_key_size);
   1d7c6:	7d2c      	ldrb	r4, [r5, #20]
   1d7c8:	7b6b      	ldrb	r3, [r5, #13]
		memcpy(ltk, smp->tk, enc_size);
   1d7ca:	f105 0147 	add.w	r1, r5, #71	; 0x47
	return MIN(req->max_key_size, rsp->max_key_size);
   1d7ce:	429c      	cmp	r4, r3
   1d7d0:	bf28      	it	cs
   1d7d2:	461c      	movcs	r4, r3
		memcpy(ltk, smp->tk, enc_size);
   1d7d4:	4622      	mov	r2, r4
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   1d7d6:	4638      	mov	r0, r7
   1d7d8:	f7fe f87b 	bl	1b8d2 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   1d7dc:	2c0f      	cmp	r4, #15
   1d7de:	d805      	bhi.n	1d7ec <bt_smp_request_ltk+0x64>
			(void)memset(ltk + enc_size, 0,
   1d7e0:	4641      	mov	r1, r8
   1d7e2:	f1c4 0210 	rsb	r2, r4, #16
   1d7e6:	1938      	adds	r0, r7, r4
   1d7e8:	f7fe f87e 	bl	1b8e8 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1d7ec:	4630      	mov	r0, r6
   1d7ee:	2101      	movs	r1, #1
   1d7f0:	f7ff fe77 	bl	1d4e2 <atomic_set_bit>
		return true;
   1d7f4:	2001      	movs	r0, #1
}
   1d7f6:	b002      	add	sp, #8
   1d7f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!conn->le.keys) {
   1d7fc:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   1d800:	b983      	cbnz	r3, 1d824 <bt_smp_request_ltk+0x9c>
					     &conn->le.dst);
   1d802:	f104 0888 	add.w	r8, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   1d806:	4642      	mov	r2, r8
   1d808:	2020      	movs	r0, #32
   1d80a:	7a21      	ldrb	r1, [r4, #8]
   1d80c:	f7f7 fd54 	bl	152b8 <bt_keys_find>
   1d810:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   1d814:	b930      	cbnz	r0, 1d824 <bt_smp_request_ltk+0x9c>
			conn->le.keys = bt_keys_find(BT_KEYS_PERIPH_LTK,
   1d816:	4642      	mov	r2, r8
   1d818:	2001      	movs	r0, #1
   1d81a:	7a21      	ldrb	r1, [r4, #8]
   1d81c:	f7f7 fd4c 	bl	152b8 <bt_keys_find>
   1d820:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   1d824:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   1d828:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   1d82c:	f1b8 0f00 	cmp.w	r8, #0
   1d830:	d10c      	bne.n	1d84c <bt_smp_request_ltk+0xc4>
   1d832:	e9dd 3200 	ldrd	r3, r2, [sp]
   1d836:	4313      	orrs	r3, r2
   1d838:	d108      	bne.n	1d84c <bt_smp_request_ltk+0xc4>
   1d83a:	b300      	cbz	r0, 1d87e <bt_smp_request_ltk+0xf6>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   1d83c:	89c3      	ldrh	r3, [r0, #14]
   1d83e:	069a      	lsls	r2, r3, #26
   1d840:	d505      	bpl.n	1d84e <bt_smp_request_ltk+0xc6>
		enc_size = conn->le.keys->enc_size;
   1d842:	7b04      	ldrb	r4, [r0, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   1d844:	f100 011a 	add.w	r1, r0, #26
   1d848:	4622      	mov	r2, r4
   1d84a:	e7c4      	b.n	1d7d6 <bt_smp_request_ltk+0x4e>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   1d84c:	b1b8      	cbz	r0, 1d87e <bt_smp_request_ltk+0xf6>
   1d84e:	89c3      	ldrh	r3, [r0, #14]
   1d850:	07db      	lsls	r3, r3, #31
   1d852:	d514      	bpl.n	1d87e <bt_smp_request_ltk+0xf6>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   1d854:	2208      	movs	r2, #8
   1d856:	4669      	mov	r1, sp
   1d858:	3040      	adds	r0, #64	; 0x40
   1d85a:	f7fe f82a 	bl	1b8b2 <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   1d85e:	b970      	cbnz	r0, 1d87e <bt_smp_request_ltk+0xf6>
	    !memcmp(conn->le.keys->periph_ltk.ediv, &ediv, 2)) {
   1d860:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1d864:	2202      	movs	r2, #2
   1d866:	a908      	add	r1, sp, #32
   1d868:	3048      	adds	r0, #72	; 0x48
   1d86a:	f7fe f822 	bl	1b8b2 <memcmp>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   1d86e:	4680      	mov	r8, r0
   1d870:	b928      	cbnz	r0, 1d87e <bt_smp_request_ltk+0xf6>
		enc_size = conn->le.keys->enc_size;
   1d872:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   1d876:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->periph_ltk.val, enc_size);
   1d878:	314a      	adds	r1, #74	; 0x4a
   1d87a:	4622      	mov	r2, r4
   1d87c:	e7ab      	b.n	1d7d6 <bt_smp_request_ltk+0x4e>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1d87e:	210f      	movs	r1, #15
   1d880:	4630      	mov	r0, r6
   1d882:	f7ff fd32 	bl	1d2ea <atomic_test_bit>
   1d886:	b120      	cbz	r0, 1d892 <bt_smp_request_ltk+0x10a>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   1d888:	2202      	movs	r2, #2
   1d88a:	2106      	movs	r1, #6
   1d88c:	4620      	mov	r0, r4
   1d88e:	f7f3 fb5b 	bl	10f48 <bt_conn_security_changed>
	smp_reset(smp);
   1d892:	4628      	mov	r0, r5
   1d894:	f7ff fec3 	bl	1d61e <smp_reset>
		return false;
   1d898:	2000      	movs	r0, #0
   1d89a:	e7ac      	b.n	1d7f6 <bt_smp_request_ltk+0x6e>

0001d89c <bt_smp_sign>:
int bt_smp_sign(struct bt_conn *conn, struct net_buf *buf)
   1d89c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1d8a0:	4770      	bx	lr

0001d8a2 <bt_smp_dhkey_ready>:
{
   1d8a2:	b570      	push	{r4, r5, r6, lr}
   1d8a4:	4606      	mov	r6, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   1d8a6:	2008      	movs	r0, #8
   1d8a8:	f7f5 ff2c 	bl	13704 <smp_find>
	if (smp) {
   1d8ac:	4604      	mov	r4, r0
   1d8ae:	b1b8      	cbz	r0, 1d8e0 <bt_smp_dhkey_ready+0x3e>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1d8b0:	1d05      	adds	r5, r0, #4
   1d8b2:	2108      	movs	r1, #8
   1d8b4:	4628      	mov	r0, r5
   1d8b6:	f7ff fd3f 	bl	1d338 <atomic_clear_bit>
	if (!dhkey) {
   1d8ba:	b38e      	cbz	r6, 1d920 <bt_smp_dhkey_ready+0x7e>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   1d8bc:	2107      	movs	r1, #7
   1d8be:	f7ff fd3b 	bl	1d338 <atomic_clear_bit>
	memcpy(smp->dhkey, dhkey, BT_DH_KEY_LEN);
   1d8c2:	4631      	mov	r1, r6
   1d8c4:	2220      	movs	r2, #32
   1d8c6:	f104 0097 	add.w	r0, r4, #151	; 0x97
   1d8ca:	f7fe f802 	bl	1b8d2 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1d8ce:	210a      	movs	r1, #10
   1d8d0:	4628      	mov	r0, r5
   1d8d2:	f7ff fd0a 	bl	1d2ea <atomic_test_bit>
   1d8d6:	b168      	cbz	r0, 1d8f4 <bt_smp_dhkey_ready+0x52>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1d8d8:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1d8da:	4628      	mov	r0, r5
   1d8dc:	f7ff fe01 	bl	1d4e2 <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   1d8e0:	2007      	movs	r0, #7
   1d8e2:	f7f5 ff0f 	bl	13704 <smp_find>
		if (smp) {
   1d8e6:	4604      	mov	r4, r0
   1d8e8:	b118      	cbz	r0, 1d8f2 <bt_smp_dhkey_ready+0x50>
			err = smp_dhkey_generate(smp);
   1d8ea:	f7f5 ffed 	bl	138c8 <smp_dhkey_generate>
			if (err) {
   1d8ee:	4601      	mov	r1, r0
   1d8f0:	b990      	cbnz	r0, 1d918 <bt_smp_dhkey_ready+0x76>
}
   1d8f2:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   1d8f4:	2110      	movs	r1, #16
   1d8f6:	4628      	mov	r0, r5
   1d8f8:	f7ff fcf7 	bl	1d2ea <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1d8fc:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   1d8fe:	2800      	cmp	r0, #0
   1d900:	d1eb      	bne.n	1d8da <bt_smp_dhkey_ready+0x38>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   1d902:	4628      	mov	r0, r5
   1d904:	f7ff fcf1 	bl	1d2ea <atomic_test_bit>
   1d908:	2800      	cmp	r0, #0
   1d90a:	d0e9      	beq.n	1d8e0 <bt_smp_dhkey_ready+0x3e>
		return  compute_and_check_and_send_periph_dhcheck(smp);
   1d90c:	4620      	mov	r0, r4
   1d90e:	f7f6 fbcd 	bl	140ac <compute_and_check_and_send_periph_dhcheck>
		if (err) {
   1d912:	4601      	mov	r1, r0
   1d914:	2800      	cmp	r0, #0
   1d916:	d0e3      	beq.n	1d8e0 <bt_smp_dhkey_ready+0x3e>
			smp_error(smp, err);
   1d918:	4620      	mov	r0, r4
   1d91a:	f7f6 ffd7 	bl	148cc <smp_error>
   1d91e:	e7df      	b.n	1d8e0 <bt_smp_dhkey_ready+0x3e>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   1d920:	210b      	movs	r1, #11
   1d922:	e7f9      	b.n	1d918 <bt_smp_dhkey_ready+0x76>

0001d924 <bt_smp_disconnected>:
{
   1d924:	b570      	push	{r4, r5, r6, lr}
   1d926:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   1d928:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   1d92c:	f850 3b8c 	ldr.w	r3, [r0], #140
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1d930:	3ce8      	subs	r4, #232	; 0xe8
	struct bt_keys *keys = chan->conn->le.keys;
   1d932:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
	(void)k_work_cancel_delayable(&smp->work);
   1d936:	f001 fb90 	bl	1f05a <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1d93a:	2103      	movs	r1, #3
   1d93c:	4620      	mov	r0, r4
   1d93e:	f7ff fcd4 	bl	1d2ea <atomic_test_bit>
   1d942:	b1a0      	cbz	r0, 1d96e <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   1d944:	2108      	movs	r1, #8
   1d946:	4630      	mov	r0, r6
   1d948:	f7f6 ff42 	bl	147d0 <smp_pairing_complete>
	if (keys) {
   1d94c:	b13d      	cbz	r5, 1d95e <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   1d94e:	89eb      	ldrh	r3, [r5, #14]
   1d950:	b113      	cbz	r3, 1d958 <bt_smp_disconnected+0x34>
   1d952:	7b6b      	ldrb	r3, [r5, #13]
   1d954:	079b      	lsls	r3, r3, #30
   1d956:	d502      	bpl.n	1d95e <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   1d958:	4628      	mov	r0, r5
   1d95a:	f000 f840 	bl	1d9de <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   1d95e:	4630      	mov	r0, r6
}
   1d960:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(smp, 0, sizeof(*smp));
   1d964:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
   1d968:	2100      	movs	r1, #0
   1d96a:	f7fd bfbd 	b.w	1b8e8 <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   1d96e:	2101      	movs	r1, #1
   1d970:	4620      	mov	r0, r4
   1d972:	f7ff fcba 	bl	1d2ea <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1d976:	2800      	cmp	r0, #0
   1d978:	d1e4      	bne.n	1d944 <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1d97a:	210f      	movs	r1, #15
   1d97c:	4620      	mov	r0, r4
   1d97e:	f7ff fcb4 	bl	1d2ea <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   1d982:	2800      	cmp	r0, #0
   1d984:	d1de      	bne.n	1d944 <bt_smp_disconnected+0x20>
   1d986:	e7e1      	b.n	1d94c <bt_smp_disconnected+0x28>

0001d988 <smp_ident_sent>:
{
   1d988:	b508      	push	{r3, lr}
	if (!err) {
   1d98a:	b99a      	cbnz	r2, 1d9b4 <smp_ident_sent+0x2c>
	if (conn->type == BT_CONN_TYPE_LE) {
   1d98c:	7883      	ldrb	r3, [r0, #2]
   1d98e:	2b01      	cmp	r3, #1
   1d990:	d110      	bne.n	1d9b4 <smp_ident_sent+0x2c>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   1d992:	2106      	movs	r1, #6
   1d994:	f7fe fd00 	bl	1c398 <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
   1d998:	f810 3c04 	ldrb.w	r3, [r0, #-4]
   1d99c:	f023 0301 	bic.w	r3, r3, #1
   1d9a0:	f800 3c04 	strb.w	r3, [r0, #-4]
		if (!smp->local_dist && !smp->remote_dist) {
   1d9a4:	f830 1c04 	ldrh.w	r1, [r0, #-4]
   1d9a8:	b921      	cbnz	r1, 1d9b4 <smp_ident_sent+0x2c>
}
   1d9aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			smp_pairing_complete(smp, 0);
   1d9ae:	38ec      	subs	r0, #236	; 0xec
   1d9b0:	f7f6 bf0e 	b.w	147d0 <smp_pairing_complete>
}
   1d9b4:	bd08      	pop	{r3, pc}

0001d9b6 <bt_keys_get_type>:
{
   1d9b6:	b570      	push	{r4, r5, r6, lr}
   1d9b8:	4604      	mov	r4, r0
   1d9ba:	460d      	mov	r5, r1
   1d9bc:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   1d9be:	f7f7 fc7b 	bl	152b8 <bt_keys_find>
	if (keys) {
   1d9c2:	b938      	cbnz	r0, 1d9d4 <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   1d9c4:	4631      	mov	r1, r6
   1d9c6:	4628      	mov	r0, r5
   1d9c8:	f7f7 fc42 	bl	15250 <bt_keys_get_addr>
	if (!keys) {
   1d9cc:	b110      	cbz	r0, 1d9d4 <bt_keys_get_type+0x1e>

void bt_keys_add_type(struct bt_keys *keys, enum bt_keys_type type)
{
	__ASSERT_NO_MSG(keys != NULL);

	keys->keys |= type;
   1d9ce:	89c3      	ldrh	r3, [r0, #14]
   1d9d0:	431c      	orrs	r4, r3
   1d9d2:	81c4      	strh	r4, [r0, #14]
}
   1d9d4:	bd70      	pop	{r4, r5, r6, pc}

0001d9d6 <bt_keys_add_type>:
	keys->keys |= type;
   1d9d6:	89c3      	ldrh	r3, [r0, #14]
   1d9d8:	4319      	orrs	r1, r3
   1d9da:	81c1      	strh	r1, [r0, #14]
}
   1d9dc:	4770      	bx	lr

0001d9de <bt_keys_clear>:

void bt_keys_clear(struct bt_keys *keys)
{
   1d9de:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(keys != NULL);

	BT_DBG("%s (keys 0x%04x)", bt_addr_le_str(&keys->addr), keys->keys);

	if (keys->state & BT_KEYS_ID_ADDED) {
   1d9e0:	7a03      	ldrb	r3, [r0, #8]
{
   1d9e2:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   1d9e4:	075b      	lsls	r3, r3, #29
   1d9e6:	d501      	bpl.n	1d9ec <bt_keys_clear+0xe>
		bt_id_del(keys);
   1d9e8:	f7f1 ff2e 	bl	f848 <bt_id_del>

		BT_DBG("Deleting key %s", key);
		settings_delete(key);
	}

	(void)memset(keys, 0, sizeof(*keys));
   1d9ec:	4620      	mov	r0, r4
}
   1d9ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)memset(keys, 0, sizeof(*keys));
   1d9f2:	225c      	movs	r2, #92	; 0x5c
   1d9f4:	2100      	movs	r1, #0
   1d9f6:	f7fd bf77 	b.w	1b8e8 <memset>

0001d9fa <fixed_data_unref>:
}
   1d9fa:	4770      	bx	lr

0001d9fc <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1d9fc:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1d9fe:	6849      	ldr	r1, [r1, #4]
   1da00:	6809      	ldr	r1, [r1, #0]
   1da02:	f7f7 bd01 	b.w	15408 <net_buf_alloc_len>

0001da06 <net_buf_get>:
{
   1da06:	b570      	push	{r4, r5, r6, lr}
   1da08:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   1da0a:	f7fb f8df 	bl	18bcc <z_impl_k_queue_get>
	if (!buf) {
   1da0e:	4605      	mov	r5, r0
   1da10:	b128      	cbz	r0, 1da1e <net_buf_get+0x18>
   1da12:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1da14:	7963      	ldrb	r3, [r4, #5]
   1da16:	f013 0301 	ands.w	r3, r3, #1
   1da1a:	d102      	bne.n	1da22 <net_buf_get+0x1c>
	frag->frags = NULL;
   1da1c:	6023      	str	r3, [r4, #0]
}
   1da1e:	4628      	mov	r0, r5
   1da20:	bd70      	pop	{r4, r5, r6, pc}
   1da22:	2300      	movs	r3, #0
   1da24:	2200      	movs	r2, #0
   1da26:	4630      	mov	r0, r6
   1da28:	f7fb f8d0 	bl	18bcc <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   1da2c:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1da2e:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   1da30:	f023 0301 	bic.w	r3, r3, #1
   1da34:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1da36:	4604      	mov	r4, r0
   1da38:	e7ec      	b.n	1da14 <net_buf_get+0xe>

0001da3a <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   1da3a:	6883      	ldr	r3, [r0, #8]
   1da3c:	440b      	add	r3, r1
   1da3e:	6003      	str	r3, [r0, #0]
}
   1da40:	4770      	bx	lr

0001da42 <net_buf_slist_put>:
	for (tail = buf; tail->frags; tail = tail->frags) {
   1da42:	460b      	mov	r3, r1
{
   1da44:	b510      	push	{r4, lr}
	for (tail = buf; tail->frags; tail = tail->frags) {
   1da46:	681c      	ldr	r4, [r3, #0]
   1da48:	b98c      	cbnz	r4, 1da6e <net_buf_slist_put+0x2c>
	__asm__ volatile(
   1da4a:	f04f 0220 	mov.w	r2, #32
   1da4e:	f3ef 8411 	mrs	r4, BASEPRI
   1da52:	f382 8812 	msr	BASEPRI_MAX, r2
   1da56:	f3bf 8f6f 	isb	sy
Z_GENLIST_APPEND_LIST(slist, snode)
   1da5a:	b119      	cbz	r1, 1da64 <net_buf_slist_put+0x22>
	return list->tail;
   1da5c:	6842      	ldr	r2, [r0, #4]
Z_GENLIST_APPEND_LIST(slist, snode)
   1da5e:	b962      	cbnz	r2, 1da7a <net_buf_slist_put+0x38>
	list->head = node;
   1da60:	6001      	str	r1, [r0, #0]
	list->tail = node;
   1da62:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   1da64:	f384 8811 	msr	BASEPRI, r4
   1da68:	f3bf 8f6f 	isb	sy
}
   1da6c:	bd10      	pop	{r4, pc}
		tail->flags |= NET_BUF_FRAGS;
   1da6e:	795a      	ldrb	r2, [r3, #5]
   1da70:	f042 0201 	orr.w	r2, r2, #1
   1da74:	715a      	strb	r2, [r3, #5]
   1da76:	4623      	mov	r3, r4
   1da78:	e7e5      	b.n	1da46 <net_buf_slist_put+0x4>
	parent->next = child;
   1da7a:	6011      	str	r1, [r2, #0]
}
   1da7c:	e7f1      	b.n	1da62 <net_buf_slist_put+0x20>

0001da7e <net_buf_slist_get>:
{
   1da7e:	4603      	mov	r3, r0
   1da80:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
   1da82:	f04f 0220 	mov.w	r2, #32
   1da86:	f3ef 8511 	mrs	r5, BASEPRI
   1da8a:	f382 8812 	msr	BASEPRI_MAX, r2
   1da8e:	f3bf 8f6f 	isb	sy
	return list->head;
   1da92:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   1da94:	b158      	cbz	r0, 1daae <net_buf_slist_get+0x30>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1da96:	6859      	ldr	r1, [r3, #4]
	return node->next;
   1da98:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1da9a:	4288      	cmp	r0, r1
	list->head = node;
   1da9c:	601a      	str	r2, [r3, #0]
	list->tail = node;
   1da9e:	bf08      	it	eq
   1daa0:	605a      	streq	r2, [r3, #4]
   1daa2:	4602      	mov	r2, r0
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1daa4:	7951      	ldrb	r1, [r2, #5]
   1daa6:	f011 0101 	ands.w	r1, r1, #1
   1daaa:	d105      	bne.n	1dab8 <net_buf_slist_get+0x3a>
		frag->frags = NULL;
   1daac:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
   1daae:	f385 8811 	msr	BASEPRI, r5
   1dab2:	f3bf 8f6f 	isb	sy
}
   1dab6:	bd70      	pop	{r4, r5, r6, pc}
	return list->head;
   1dab8:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_GET(slist, snode)
   1daba:	b129      	cbz	r1, 1dac8 <net_buf_slist_get+0x4a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1dabc:	685e      	ldr	r6, [r3, #4]
	return node->next;
   1dabe:	680c      	ldr	r4, [r1, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1dac0:	42b1      	cmp	r1, r6
	list->head = node;
   1dac2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1dac4:	bf08      	it	eq
   1dac6:	605c      	streq	r4, [r3, #4]
			frag->flags &= ~NET_BUF_FRAGS;
   1dac8:	7954      	ldrb	r4, [r2, #5]
			frag->frags = (void *)sys_slist_get(list);
   1daca:	6011      	str	r1, [r2, #0]
			frag->flags &= ~NET_BUF_FRAGS;
   1dacc:	f024 0401 	bic.w	r4, r4, #1
   1dad0:	7154      	strb	r4, [r2, #5]
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1dad2:	460a      	mov	r2, r1
   1dad4:	e7e6      	b.n	1daa4 <net_buf_slist_get+0x26>

0001dad6 <net_buf_put>:
	for (tail = buf; tail->frags; tail = tail->frags) {
   1dad6:	460a      	mov	r2, r1
{
   1dad8:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   1dada:	6814      	ldr	r4, [r2, #0]
   1dadc:	b914      	cbnz	r4, 1dae4 <net_buf_put+0xe>
}
   1dade:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   1dae0:	f001 b9a8 	b.w	1ee34 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   1dae4:	7953      	ldrb	r3, [r2, #5]
   1dae6:	f043 0301 	orr.w	r3, r3, #1
   1daea:	7153      	strb	r3, [r2, #5]
   1daec:	4622      	mov	r2, r4
   1daee:	e7f4      	b.n	1dada <net_buf_put+0x4>

0001daf0 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1daf0:	7902      	ldrb	r2, [r0, #4]
   1daf2:	3201      	adds	r2, #1
   1daf4:	7102      	strb	r2, [r0, #4]
	return buf;
}
   1daf6:	4770      	bx	lr

0001daf8 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1daf8:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   1dafa:	4618      	mov	r0, r3
   1dafc:	681b      	ldr	r3, [r3, #0]
   1dafe:	2b00      	cmp	r3, #0
   1db00:	d1fb      	bne.n	1dafa <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   1db02:	4770      	bx	lr

0001db04 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   1db04:	6802      	ldr	r2, [r0, #0]
{
   1db06:	b510      	push	{r4, lr}
	if (parent->frags) {
   1db08:	b12a      	cbz	r2, 1db16 <net_buf_frag_insert+0x12>
   1db0a:	460b      	mov	r3, r1
	while (buf->frags) {
   1db0c:	461c      	mov	r4, r3
   1db0e:	681b      	ldr	r3, [r3, #0]
   1db10:	2b00      	cmp	r3, #0
   1db12:	d1fb      	bne.n	1db0c <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   1db14:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1db16:	6001      	str	r1, [r0, #0]
}
   1db18:	bd10      	pop	{r4, pc}

0001db1a <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1db1a:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   1db1c:	4604      	mov	r4, r0
   1db1e:	b920      	cbnz	r0, 1db2a <net_buf_frag_add+0x10>
		return net_buf_ref(frag);
   1db20:	4608      	mov	r0, r1
	buf->ref++;
   1db22:	790b      	ldrb	r3, [r1, #4]
   1db24:	3301      	adds	r3, #1
   1db26:	710b      	strb	r3, [r1, #4]
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   1db28:	bd10      	pop	{r4, pc}
   1db2a:	4603      	mov	r3, r0
	while (buf->frags) {
   1db2c:	4618      	mov	r0, r3
   1db2e:	681b      	ldr	r3, [r3, #0]
   1db30:	2b00      	cmp	r3, #0
   1db32:	d1fb      	bne.n	1db2c <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1db34:	f7ff ffe6 	bl	1db04 <net_buf_frag_insert>
   1db38:	4620      	mov	r0, r4
   1db3a:	e7f5      	b.n	1db28 <net_buf_frag_add+0xe>

0001db3c <net_buf_simple_add>:
	return buf->data + buf->len;
   1db3c:	8883      	ldrh	r3, [r0, #4]
   1db3e:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   1db40:	4419      	add	r1, r3
   1db42:	8081      	strh	r1, [r0, #4]
	return tail;
}
   1db44:	18d0      	adds	r0, r2, r3
   1db46:	4770      	bx	lr

0001db48 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   1db48:	b430      	push	{r4, r5}
   1db4a:	8884      	ldrh	r4, [r0, #4]
   1db4c:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   1db4e:	18a3      	adds	r3, r4, r2
   1db50:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1db52:	1928      	adds	r0, r5, r4
}
   1db54:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1db56:	f7fd bebc 	b.w	1b8d2 <memcpy>

0001db5a <net_buf_simple_add_u8>:

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   1db5a:	b510      	push	{r4, lr}
   1db5c:	8883      	ldrh	r3, [r0, #4]
   1db5e:	6802      	ldr	r2, [r0, #0]
	buf->len += len;
   1db60:	1c5c      	adds	r4, r3, #1
   1db62:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   1db64:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   1db66:	18d0      	adds	r0, r2, r3
   1db68:	bd10      	pop	{r4, pc}

0001db6a <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   1db6a:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   1db6c:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   1db6e:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   1db70:	1a40      	subs	r0, r0, r1
	buf->len += len;
   1db72:	4411      	add	r1, r2
	buf->data -= len;
   1db74:	6018      	str	r0, [r3, #0]
	buf->len += len;
   1db76:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   1db78:	4770      	bx	lr

0001db7a <net_buf_simple_push_u8>:
	buf->data -= len;
   1db7a:	6802      	ldr	r2, [r0, #0]
   1db7c:	1e53      	subs	r3, r2, #1
   1db7e:	6003      	str	r3, [r0, #0]
	buf->len += len;
   1db80:	8883      	ldrh	r3, [r0, #4]
   1db82:	3301      	adds	r3, #1
   1db84:	8083      	strh	r3, [r0, #4]

void net_buf_simple_push_u8(struct net_buf_simple *buf, uint8_t val)
{
	uint8_t *data = net_buf_simple_push(buf, 1);

	*data = val;
   1db86:	f802 1c01 	strb.w	r1, [r2, #-1]
}
   1db8a:	4770      	bx	lr

0001db8c <net_buf_simple_pull>:

	sys_put_be64(val, net_buf_simple_push(buf, sizeof(val)));
}

void *net_buf_simple_pull(struct net_buf_simple *buf, size_t len)
{
   1db8c:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1db8e:	8882      	ldrh	r2, [r0, #4]
   1db90:	1a52      	subs	r2, r2, r1
   1db92:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   1db94:	6800      	ldr	r0, [r0, #0]
   1db96:	4408      	add	r0, r1
   1db98:	6018      	str	r0, [r3, #0]
}
   1db9a:	4770      	bx	lr

0001db9c <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   1db9c:	4603      	mov	r3, r0
	void *data = buf->data;
   1db9e:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1dba0:	889a      	ldrh	r2, [r3, #4]
   1dba2:	1a52      	subs	r2, r2, r1
	buf->data += len;
   1dba4:	4401      	add	r1, r0
	buf->len -= len;
   1dba6:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   1dba8:	6019      	str	r1, [r3, #0]

	return data;
}
   1dbaa:	4770      	bx	lr

0001dbac <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   1dbac:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   1dbae:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1dbb0:	2102      	movs	r1, #2
	val = UNALIGNED_GET((uint16_t *)buf->data);
   1dbb2:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1dbb4:	f7ff ffea 	bl	1db8c <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   1dbb8:	4620      	mov	r0, r4
   1dbba:	bd10      	pop	{r4, pc}

0001dbbc <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1dbbc:	6802      	ldr	r2, [r0, #0]
   1dbbe:	6880      	ldr	r0, [r0, #8]
}
   1dbc0:	1a10      	subs	r0, r2, r0
   1dbc2:	4770      	bx	lr

0001dbc4 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1dbc4:	8883      	ldrh	r3, [r0, #4]
   1dbc6:	88c2      	ldrh	r2, [r0, #6]
	return buf->data - buf->__buf;
   1dbc8:	6881      	ldr	r1, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1dbca:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   1dbcc:	6803      	ldr	r3, [r0, #0]
   1dbce:	1a5b      	subs	r3, r3, r1
}
   1dbd0:	1ad0      	subs	r0, r2, r3
   1dbd2:	4770      	bx	lr

0001dbd4 <adc_context_on_timer_expired>:
{
   1dbd4:	b410      	push	{r4}
   1dbd6:	4603      	mov	r3, r0
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1dbd8:	3808      	subs	r0, #8
   1dbda:	e8d0 2fef 	ldaex	r2, [r0]
   1dbde:	1c51      	adds	r1, r2, #1
   1dbe0:	e8c0 1fe4 	stlex	r4, r1, [r0]
   1dbe4:	2c00      	cmp	r4, #0
   1dbe6:	d1f8      	bne.n	1dbda <adc_context_on_timer_expired+0x6>
	if (atomic_inc(&ctx->sampling_requested) == 0) {
   1dbe8:	b912      	cbnz	r2, 1dbf0 <adc_context_on_timer_expired+0x1c>
}
   1dbea:	bc10      	pop	{r4}
		adc_context_start_sampling(ctx);
   1dbec:	f7f7 bcf2 	b.w	155d4 <adc_context_start_sampling>
		ctx->status = -EBUSY;
   1dbf0:	f06f 020f 	mvn.w	r2, #15
}
   1dbf4:	bc10      	pop	{r4}
		ctx->status = -EBUSY;
   1dbf6:	669a      	str	r2, [r3, #104]	; 0x68
}
   1dbf8:	4770      	bx	lr

0001dbfa <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1dbfa:	220c      	movs	r2, #12
   1dbfc:	6903      	ldr	r3, [r0, #16]
   1dbfe:	b2c9      	uxtb	r1, r1
   1dc00:	fb01 3302 	mla	r3, r1, r2, r3
   1dc04:	6f98      	ldr	r0, [r3, #120]	; 0x78
}
   1dc06:	f000 0007 	and.w	r0, r0, #7
   1dc0a:	4770      	bx	lr

0001dc0c <set_on_state>:
	__asm__ volatile(
   1dc0c:	f04f 0320 	mov.w	r3, #32
   1dc10:	f3ef 8211 	mrs	r2, BASEPRI
   1dc14:	f383 8812 	msr	BASEPRI_MAX, r3
   1dc18:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1dc1c:	6803      	ldr	r3, [r0, #0]
   1dc1e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1dc22:	f043 0302 	orr.w	r3, r3, #2
   1dc26:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1dc28:	f382 8811 	msr	BASEPRI, r2
   1dc2c:	f3bf 8f6f 	isb	sy
}
   1dc30:	4770      	bx	lr

0001dc32 <stop>:
{
   1dc32:	b570      	push	{r4, r5, r6, lr}
   1dc34:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
   1dc36:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
   1dc38:	f04f 0420 	mov.w	r4, #32
   1dc3c:	f3ef 8511 	mrs	r5, BASEPRI
   1dc40:	f384 8812 	msr	BASEPRI_MAX, r4
   1dc44:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1dc48:	260c      	movs	r6, #12
   1dc4a:	fb06 3401 	mla	r4, r6, r1, r3
   1dc4e:	6fa4      	ldr	r4, [r4, #120]	; 0x78
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1dc50:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   1dc54:	d008      	beq.n	1dc68 <stop+0x36>
   1dc56:	42a2      	cmp	r2, r4
   1dc58:	d006      	beq.n	1dc68 <stop+0x36>
	__asm__ volatile(
   1dc5a:	f385 8811 	msr	BASEPRI, r5
   1dc5e:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   1dc62:	f04f 30ff 	mov.w	r0, #4294967295
}
   1dc66:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1dc68:	2201      	movs	r2, #1
   1dc6a:	4371      	muls	r1, r6
   1dc6c:	440b      	add	r3, r1
   1dc6e:	679a      	str	r2, [r3, #120]	; 0x78
   1dc70:	f385 8811 	msr	BASEPRI, r5
   1dc74:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   1dc78:	6843      	ldr	r3, [r0, #4]
   1dc7a:	440b      	add	r3, r1
   1dc7c:	685b      	ldr	r3, [r3, #4]
   1dc7e:	4798      	blx	r3
	return 0;
   1dc80:	2000      	movs	r0, #0
   1dc82:	e7f0      	b.n	1dc66 <stop+0x34>

0001dc84 <api_stop>:
	return stop(dev, subsys, CTX_API);
   1dc84:	2280      	movs	r2, #128	; 0x80
   1dc86:	f7ff bfd4 	b.w	1dc32 <stop>

0001dc8a <async_start>:
{
   1dc8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1dc8c:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   1dc8e:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   1dc90:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   1dc92:	f04f 0520 	mov.w	r5, #32
   1dc96:	f3ef 8611 	mrs	r6, BASEPRI
   1dc9a:	f385 8812 	msr	BASEPRI_MAX, r5
   1dc9e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1dca2:	250c      	movs	r5, #12
   1dca4:	4369      	muls	r1, r5
   1dca6:	440c      	add	r4, r1
   1dca8:	6fa5      	ldr	r5, [r4, #120]	; 0x78
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1dcaa:	f005 0c07 	and.w	ip, r5, #7
   1dcae:	f1bc 0f01 	cmp.w	ip, #1
   1dcb2:	d10b      	bne.n	1dccc <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1dcb4:	67a7      	str	r7, [r4, #120]	; 0x78
	__asm__ volatile(
   1dcb6:	f386 8811 	msr	BASEPRI, r6
   1dcba:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   1dcbe:	e9c4 231c 	strd	r2, r3, [r4, #112]	; 0x70
	 get_sub_config(dev, type)->start();
   1dcc2:	6843      	ldr	r3, [r0, #4]
   1dcc4:	585b      	ldr	r3, [r3, r1]
   1dcc6:	4798      	blx	r3
	return 0;
   1dcc8:	2000      	movs	r0, #0
}
   1dcca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1dccc:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   1dcd0:	42af      	cmp	r7, r5
   1dcd2:	f386 8811 	msr	BASEPRI, r6
   1dcd6:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   1dcda:	bf0c      	ite	eq
   1dcdc:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   1dce0:	f04f 30ff 	movne.w	r0, #4294967295
   1dce4:	e7f1      	b.n	1dcca <async_start+0x40>

0001dce6 <api_start>:
{
   1dce6:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   1dce8:	2480      	movs	r4, #128	; 0x80
   1dcea:	9400      	str	r4, [sp, #0]
   1dcec:	f7ff ffcd 	bl	1dc8a <async_start>
}
   1dcf0:	b002      	add	sp, #8
   1dcf2:	bd10      	pop	{r4, pc}

0001dcf4 <onoff_started_callback>:
{
   1dcf4:	b410      	push	{r4}
	notify(mgr, 0);
   1dcf6:	241c      	movs	r4, #28
	return &data->mgr[type];
   1dcf8:	6900      	ldr	r0, [r0, #16]
   1dcfa:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1dcfc:	fb03 0004 	mla	r0, r3, r4, r0
   1dd00:	2100      	movs	r1, #0
}
   1dd02:	bc10      	pop	{r4}
	notify(mgr, 0);
   1dd04:	4710      	bx	r2

0001dd06 <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   1dd06:	2003      	movs	r0, #3
   1dd08:	f7f9 bbb0 	b.w	1746c <nrfx_clock_start>

0001dd0c <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
   1dd0c:	2002      	movs	r0, #2
   1dd0e:	f7f9 bbad 	b.w	1746c <nrfx_clock_start>

0001dd12 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1dd12:	2000      	movs	r0, #0
   1dd14:	f7f9 bbaa 	b.w	1746c <nrfx_clock_start>

0001dd18 <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   1dd18:	2003      	movs	r0, #3
   1dd1a:	f000 b97b 	b.w	1e014 <nrfx_clock_stop>

0001dd1e <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
   1dd1e:	2002      	movs	r0, #2
   1dd20:	f000 b978 	b.w	1e014 <nrfx_clock_stop>

0001dd24 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1dd24:	2000      	movs	r0, #0
   1dd26:	f000 b975 	b.w	1e014 <nrfx_clock_stop>

0001dd2a <blocking_start_callback>:
{
   1dd2a:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1dd2c:	f7fa bf82 	b.w	18c34 <z_impl_k_sem_give>

0001dd30 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1dd30:	6843      	ldr	r3, [r0, #4]
}
   1dd32:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1dd34:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1dd36:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   1dd38:	600b      	str	r3, [r1, #0]
}
   1dd3a:	4770      	bx	lr

0001dd3c <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1dd3c:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
   1dd3e:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1dd42:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
   1dd44:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   1dd48:	6098      	str	r0, [r3, #8]
}
   1dd4a:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   1dd4c:	60d9      	str	r1, [r3, #12]
   1dd4e:	4770      	bx	lr

0001dd50 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1dd50:	6843      	ldr	r3, [r0, #4]
}
   1dd52:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1dd54:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   1dd56:	6099      	str	r1, [r3, #8]
}
   1dd58:	4770      	bx	lr

0001dd5a <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1dd5a:	6843      	ldr	r3, [r0, #4]
}
   1dd5c:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1dd5e:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   1dd60:	60d9      	str	r1, [r3, #12]
}
   1dd62:	4770      	bx	lr

0001dd64 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1dd64:	6843      	ldr	r3, [r0, #4]
   1dd66:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1dd68:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
   1dd6a:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   1dd6e:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   1dd70:	6090      	str	r0, [r2, #8]
}
   1dd72:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   1dd74:	60d3      	str	r3, [r2, #12]
   1dd76:	4770      	bx	lr

0001dd78 <gpio_nrfx_manage_callback>:
{
   1dd78:	b510      	push	{r4, lr}
	return port->data;
   1dd7a:	6903      	ldr	r3, [r0, #16]
	return list->head;
   1dd7c:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   1dd7e:	b1f8      	cbz	r0, 1ddc0 <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1dd80:	4288      	cmp	r0, r1
   1dd82:	d119      	bne.n	1ddb8 <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
   1dd84:	689c      	ldr	r4, [r3, #8]
	return node->next;
   1dd86:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   1dd88:	42a1      	cmp	r1, r4
	list->head = node;
   1dd8a:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1dd8c:	d100      	bne.n	1dd90 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   1dd8e:	6098      	str	r0, [r3, #8]
	parent->next = child;
   1dd90:	2000      	movs	r0, #0
   1dd92:	6008      	str	r0, [r1, #0]
	if (set) {
   1dd94:	b12a      	cbz	r2, 1dda2 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
   1dd96:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1dd98:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1dd9a:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1dd9c:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1dd9e:	b902      	cbnz	r2, 1dda2 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
   1dda0:	6099      	str	r1, [r3, #8]
	return 0;
   1dda2:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1dda4:	e010      	b.n	1ddc8 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1dda6:	4281      	cmp	r1, r0
   1dda8:	d106      	bne.n	1ddb8 <gpio_nrfx_manage_callback+0x40>
	return node->next;
   1ddaa:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   1ddac:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1ddae:	6898      	ldr	r0, [r3, #8]
   1ddb0:	4281      	cmp	r1, r0
   1ddb2:	d1ed      	bne.n	1dd90 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   1ddb4:	609c      	str	r4, [r3, #8]
}
   1ddb6:	e7eb      	b.n	1dd90 <gpio_nrfx_manage_callback+0x18>
	return node->next;
   1ddb8:	4604      	mov	r4, r0
   1ddba:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1ddbc:	2800      	cmp	r0, #0
   1ddbe:	d1f2      	bne.n	1dda6 <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
   1ddc0:	2a00      	cmp	r2, #0
   1ddc2:	d1e8      	bne.n	1dd96 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
   1ddc4:	f06f 0015 	mvn.w	r0, #21
}
   1ddc8:	bd10      	pop	{r4, pc}

0001ddca <uarte_nrfx_config_get>:
{
   1ddca:	460b      	mov	r3, r1
	struct uarte_nrfx_data *data = dev->data;
   1ddcc:	6902      	ldr	r2, [r0, #16]
	*cfg = data->uart_config;
   1ddce:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   1ddd2:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1ddd6:	2000      	movs	r0, #0
   1ddd8:	4770      	bx	lr

0001ddda <uarte_nrfx_err_check>:
	return config->uarte_regs;
   1ddda:	6843      	ldr	r3, [r0, #4]
   1dddc:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1ddde:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1dde2:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1dde6:	4770      	bx	lr

0001dde8 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   1dde8:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   1ddea:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   1ddec:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ddee:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1ddf2:	b150      	cbz	r0, 1de0a <uarte_nrfx_poll_in+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ddf4:	2000      	movs	r0, #0
	*c = *data->rx_data;
   1ddf6:	6952      	ldr	r2, [r2, #20]
   1ddf8:	7812      	ldrb	r2, [r2, #0]
   1ddfa:	700a      	strb	r2, [r1, #0]
   1ddfc:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1de00:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1de04:	2201      	movs	r2, #1
   1de06:	601a      	str	r2, [r3, #0]
	return 0;
   1de08:	4770      	bx	lr
		return -1;
   1de0a:	f04f 30ff 	mov.w	r0, #4294967295
}
   1de0e:	4770      	bx	lr

0001de10 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   1de10:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   1de12:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1de14:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1de18:	b940      	cbnz	r0, 1de2c <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   1de1a:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1de1c:	079b      	lsls	r3, r3, #30
   1de1e:	d406      	bmi.n	1de2e <is_tx_ready.isra.0+0x1e>
   1de20:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   1de24:	3800      	subs	r0, #0
   1de26:	bf18      	it	ne
   1de28:	2001      	movne	r0, #1
   1de2a:	4770      	bx	lr
   1de2c:	2001      	movs	r0, #1
}
   1de2e:	4770      	bx	lr

0001de30 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   1de30:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   1de32:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   1de34:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   1de38:	05c9      	lsls	r1, r1, #23
   1de3a:	d518      	bpl.n	1de6e <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1de3c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   1de40:	b1a9      	cbz	r1, 1de6e <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   1de42:	f04f 0020 	mov.w	r0, #32
   1de46:	f3ef 8111 	mrs	r1, BASEPRI
   1de4a:	f380 8812 	msr	BASEPRI_MAX, r0
   1de4e:	f3bf 8f6f 	isb	sy
   1de52:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1de56:	b130      	cbz	r0, 1de66 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1de58:	2000      	movs	r0, #0
   1de5a:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   1de5e:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1de62:	2001      	movs	r0, #1
   1de64:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
   1de66:	f381 8811 	msr	BASEPRI, r1
   1de6a:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1de6e:	6852      	ldr	r2, [r2, #4]
   1de70:	06d2      	lsls	r2, r2, #27
   1de72:	d515      	bpl.n	1dea0 <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
   1de74:	f04f 0120 	mov.w	r1, #32
   1de78:	f3ef 8211 	mrs	r2, BASEPRI
   1de7c:	f381 8812 	msr	BASEPRI_MAX, r1
   1de80:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1de84:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   1de88:	b111      	cbz	r1, 1de90 <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1de8a:	2100      	movs	r1, #0
   1de8c:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   1de90:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   1de94:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   1de98:	f382 8811 	msr	BASEPRI, r2
   1de9c:	f3bf 8f6f 	isb	sy
}
   1dea0:	4770      	bx	lr

0001dea2 <z_log_msg_static_create.constprop.0>:
   1dea2:	2300      	movs	r3, #0
   1dea4:	f7ed bb5c 	b.w	b560 <z_impl_z_log_msg_static_create>

0001dea8 <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   1dea8:	2000      	movs	r0, #0
   1deaa:	4770      	bx	lr

0001deac <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   1deac:	b538      	push	{r3, r4, r5, lr}
   1deae:	460c      	mov	r4, r1
   1deb0:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   1deb2:	f7f1 fa93 	bl	f3dc <bt_is_ready>
   1deb6:	b128      	cbz	r0, 1dec4 <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   1deb8:	4629      	mov	r1, r5
   1deba:	4620      	mov	r0, r4
}
   1debc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   1dec0:	f7f0 bb68 	b.w	e594 <bt_hci_le_rand>
}
   1dec4:	f06f 000a 	mvn.w	r0, #10
   1dec8:	bd38      	pop	{r3, r4, r5, pc}

0001deca <entropy_cc3xx_rng_get_entropy>:

#define CTR_DRBG_MAX_REQUEST 1024

static int entropy_cc3xx_rng_get_entropy(const struct device *dev,
					 uint8_t *buffer, uint16_t length)
{
   1deca:	4608      	mov	r0, r1
   1decc:	b508      	push	{r3, lr}
	int err = EINVAL;

#if defined(CONFIG_BUILD_WITH_TFM)
	psa_status_t status = PSA_ERROR_GENERIC_ERROR;

	status = psa_generate_random(buffer, length);
   1dece:	4611      	mov	r1, r2
   1ded0:	f7f9 f948 	bl	17164 <psa_generate_random>
	int err = EINVAL;
   1ded4:	2800      	cmp	r0, #0
		err = 0;
	}

	return err;
#endif /* defined(CONFIG_BUILD_WITH_TFM) */
}
   1ded6:	bf18      	it	ne
   1ded8:	2016      	movne	r0, #22
   1deda:	bd08      	pop	{r3, pc}

0001dedc <entropy_cc3xx_rng_init>:

static int entropy_cc3xx_rng_init(const struct device *dev)
{
   1dedc:	b508      	push	{r3, lr}
	(void)dev;

#if defined(CONFIG_BUILD_WITH_TFM)
	psa_status_t status;

	status = psa_crypto_init();
   1dede:	f000 f879 	bl	1dfd4 <psa_crypto_init>
	if (status != PSA_SUCCESS) {
		return -EINVAL;
   1dee2:	2800      	cmp	r0, #0
		return -EINVAL;
	}
#endif

	return 0;
}
   1dee4:	bf18      	it	ne
   1dee6:	f06f 0015 	mvnne.w	r0, #21
   1deea:	bd08      	pop	{r3, pc}

0001deec <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   1deec:	4770      	bx	lr

0001deee <event_clear>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1deee:	2200      	movs	r2, #0
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1def0:	f100 0350 	add.w	r3, r0, #80	; 0x50
   1def4:	009b      	lsls	r3, r3, #2
   1def6:	b29b      	uxth	r3, r3
   1def8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1defc:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   1df00:	601a      	str	r2, [r3, #0]
   1df02:	681b      	ldr	r3, [r3, #0]
}
   1df04:	4770      	bx	lr

0001df06 <z_nrf_rtc_timer_capture_task_address_get>:
	if (chan == 0) {
   1df06:	b130      	cbz	r0, 1df16 <z_nrf_rtc_timer_capture_task_address_get+0x10>
	nrf_rtc_task_t task = offsetof(NRF_RTC_Type, TASKS_CAPTURE[chan]);
   1df08:	3010      	adds	r0, #16
   1df0a:	0080      	lsls	r0, r0, #2
    return (uint32_t)p_reg + task;
   1df0c:	b2c0      	uxtb	r0, r0
   1df0e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   1df12:	f500 30a8 	add.w	r0, r0, #86016	; 0x15000
}
   1df16:	4770      	bx	lr

0001df18 <z_nrf_rtc_timer_set>:
	return compare_set(chan, target_time, handler, user_data);
   1df18:	f7f8 bd08 	b.w	1692c <compare_set>

0001df1c <sys_clock_cycle_get_32>:
{
   1df1c:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   1df1e:	f7f8 fce3 	bl	168e8 <z_nrf_rtc_timer_read>
}
   1df22:	bd08      	pop	{r3, pc}

0001df24 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   1df24:	b570      	push	{r4, r5, r6, lr}
	*state = &config->states[0];
	while (*state <= &config->states[config->state_cnt - 1U]) {
   1df26:	f06f 4660 	mvn.w	r6, #3758096384	; 0xe0000000
	*state = &config->states[0];
   1df2a:	6843      	ldr	r3, [r0, #4]
   1df2c:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   1df2e:	7a05      	ldrb	r5, [r0, #8]
   1df30:	6844      	ldr	r4, [r0, #4]
   1df32:	4435      	add	r5, r6
   1df34:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   1df38:	42a3      	cmp	r3, r4
   1df3a:	d902      	bls.n	1df42 <pinctrl_lookup_state+0x1e>
		}

		(*state)++;
	}

	return -ENOENT;
   1df3c:	f06f 0001 	mvn.w	r0, #1
}
   1df40:	bd70      	pop	{r4, r5, r6, pc}
		if (id == (*state)->id) {
   1df42:	795c      	ldrb	r4, [r3, #5]
   1df44:	428c      	cmp	r4, r1
   1df46:	d001      	beq.n	1df4c <pinctrl_lookup_state+0x28>
		(*state)++;
   1df48:	3308      	adds	r3, #8
   1df4a:	e7ef      	b.n	1df2c <pinctrl_lookup_state+0x8>
			return 0;
   1df4c:	2000      	movs	r0, #0
   1df4e:	e7f7      	b.n	1df40 <pinctrl_lookup_state+0x1c>

0001df50 <mbox_nrf_register_callback>:
{
   1df50:	b510      	push	{r4, lr}
	struct mbox_nrf_data *data = dev->data;
   1df52:	6900      	ldr	r0, [r0, #16]
	if (channel >= IPC_CONF_NUM) {
   1df54:	290f      	cmp	r1, #15
	data->cb[channel] = cb;
   1df56:	bf9f      	itttt	ls
   1df58:	eb00 0481 	addls.w	r4, r0, r1, lsl #2
   1df5c:	f840 2021 	strls.w	r2, [r0, r1, lsl #2]
	data->user_data[channel] = user_data;
   1df60:	6423      	strls	r3, [r4, #64]	; 0x40
	return 0;
   1df62:	2000      	movls	r0, #0
		return -EINVAL;
   1df64:	bf88      	it	hi
   1df66:	f06f 0015 	mvnhi.w	r0, #21
}
   1df6a:	bd10      	pop	{r4, pc}

0001df6c <mbox_nrf_mtu_get>:
}
   1df6c:	2000      	movs	r0, #0
   1df6e:	4770      	bx	lr

0001df70 <mbox_nrf_max_channels_get>:
}
   1df70:	2010      	movs	r0, #16
   1df72:	4770      	bx	lr

0001df74 <ns_interface_init>:

	__ASSERT(tfm_ns_interface_init() == TFM_SUCCESS,
		"TF-M NS interface init failed");

	return 0;
}
   1df74:	2000      	movs	r0, #0
   1df76:	4770      	bx	lr

0001df78 <tfm_platform_ioctl>:
enum tfm_platform_err_t
tfm_platform_ioctl(tfm_platform_ioctl_req_t request,
                   psa_invec *input, psa_outvec *output)
{
    tfm_platform_ioctl_req_t req = request;
    struct psa_invec in_vec[2] = { {0} };
   1df78:	2300      	movs	r3, #0
{
   1df7a:	b570      	push	{r4, r5, r6, lr}
   1df7c:	b088      	sub	sp, #32
    struct psa_invec in_vec[2] = { {0} };
   1df7e:	e9cd 3306 	strd	r3, r3, [sp, #24]
    size_t inlen, outlen;
    psa_status_t status = PSA_ERROR_CONNECTION_REFUSED;
    psa_handle_t handle = PSA_NULL_HANDLE;

    in_vec[0].base = &req;
   1df82:	ab03      	add	r3, sp, #12
   1df84:	9304      	str	r3, [sp, #16]
    in_vec[0].len = sizeof(req);
   1df86:	2304      	movs	r3, #4
{
   1df88:	4614      	mov	r4, r2
    tfm_platform_ioctl_req_t req = request;
   1df8a:	9003      	str	r0, [sp, #12]
    in_vec[0].len = sizeof(req);
   1df8c:	9305      	str	r3, [sp, #20]
    if (input != NULL) {
   1df8e:	b169      	cbz	r1, 1dfac <tfm_platform_ioctl+0x34>
        in_vec[1].base = input->base;
        in_vec[1].len = input->len;
        inlen = 2;
   1df90:	2602      	movs	r6, #2
        in_vec[1].base = input->base;
   1df92:	680b      	ldr	r3, [r1, #0]
   1df94:	9306      	str	r3, [sp, #24]
        in_vec[1].len = input->len;
   1df96:	684b      	ldr	r3, [r1, #4]
   1df98:	9307      	str	r3, [sp, #28]
        outlen = 1;
    } else {
        outlen = 0;
    }

    handle = psa_connect(TFM_SP_PLATFORM_IOCTL_SID,
   1df9a:	2101      	movs	r1, #1
   1df9c:	2041      	movs	r0, #65	; 0x41
   1df9e:	f7f9 f91f 	bl	171e0 <psa_connect>
                         TFM_SP_PLATFORM_IOCTL_VERSION);
    if (handle <= 0) {
   1dfa2:	1e05      	subs	r5, r0, #0
   1dfa4:	dc04      	bgt.n	1dfb0 <tfm_platform_ioctl+0x38>
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
   1dfa6:	2001      	movs	r0, #1
    if (status < PSA_SUCCESS) {
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
    } else {
        return (enum tfm_platform_err_t) status;
    }
}
   1dfa8:	b008      	add	sp, #32
   1dfaa:	bd70      	pop	{r4, r5, r6, pc}
        inlen = 1;
   1dfac:	2601      	movs	r6, #1
   1dfae:	e7f4      	b.n	1df9a <tfm_platform_ioctl+0x22>
    if (output != NULL) {
   1dfb0:	1e23      	subs	r3, r4, #0
   1dfb2:	bf18      	it	ne
   1dfb4:	2301      	movne	r3, #1
    status = psa_call(handle, PSA_IPC_CALL,
   1dfb6:	2100      	movs	r1, #0
   1dfb8:	e9cd 4300 	strd	r4, r3, [sp]
   1dfbc:	aa04      	add	r2, sp, #16
   1dfbe:	4633      	mov	r3, r6
   1dfc0:	f7f9 f8f2 	bl	171a8 <psa_call>
   1dfc4:	4604      	mov	r4, r0
    psa_close(handle);
   1dfc6:	4628      	mov	r0, r5
   1dfc8:	f7f9 f918 	bl	171fc <psa_close>
    if (status < PSA_SUCCESS) {
   1dfcc:	2c00      	cmp	r4, #0
   1dfce:	dbea      	blt.n	1dfa6 <tfm_platform_ioctl+0x2e>
        return (enum tfm_platform_err_t) status;
   1dfd0:	4620      	mov	r0, r4
   1dfd2:	e7e9      	b.n	1dfa8 <tfm_platform_ioctl+0x30>

0001dfd4 <psa_crypto_init>:
}
   1dfd4:	2000      	movs	r0, #0
   1dfd6:	4770      	bx	lr

0001dfd8 <tfm_platform_gpio_pin_mcu_select>:
	psa_invec in_vec;
	psa_outvec out_vec;
	struct tfm_gpio_service_args args;
	struct tfm_gpio_service_out out;

	args.type = TFM_GPIO_SERVICE_TYPE_PIN_MCU_SELECT;
   1dfd8:	2300      	movs	r3, #0
{
   1dfda:	b510      	push	{r4, lr}
   1dfdc:	b088      	sub	sp, #32
	args.mcu_select.pin_number = pin_number;
   1dfde:	e9cd 3005 	strd	r3, r0, [sp, #20]
	args.mcu_select.mcu = mcu;

	in_vec.base = (const void *)&args;
   1dfe2:	ab05      	add	r3, sp, #20
   1dfe4:	9301      	str	r3, [sp, #4]
	in_vec.len = sizeof(args);
   1dfe6:	230c      	movs	r3, #12
   1dfe8:	9302      	str	r3, [sp, #8]

	out_vec.base = (void *)&out;
	out_vec.len = sizeof(out);
   1dfea:	2304      	movs	r3, #4
{
   1dfec:	4614      	mov	r4, r2
	args.mcu_select.mcu = mcu;
   1dfee:	9107      	str	r1, [sp, #28]

	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_GPIO_SERVICE, &in_vec,
   1dff0:	aa03      	add	r2, sp, #12
   1dff2:	eb0d 0103 	add.w	r1, sp, r3
   1dff6:	2001      	movs	r0, #1
	out_vec.len = sizeof(out);
   1dff8:	9304      	str	r3, [sp, #16]
	out_vec.base = (void *)&out;
   1dffa:	f8cd d00c 	str.w	sp, [sp, #12]
	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_GPIO_SERVICE, &in_vec,
   1dffe:	f7ff ffbb 	bl	1df78 <tfm_platform_ioctl>
				 &out_vec);

	*result = out.result;
   1e002:	9b00      	ldr	r3, [sp, #0]
   1e004:	6023      	str	r3, [r4, #0]

	return ret;
#else
	return TFM_PLATFORM_ERR_NOT_SUPPORTED;
#endif
}
   1e006:	b008      	add	sp, #32
   1e008:	bd10      	pop	{r4, pc}

0001e00a <SystemInit>:
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
   1e00a:	f7f9 b905 	b.w	17218 <SystemCoreClockUpdate>

0001e00e <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1e00e:	4700      	bx	r0

0001e010 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   1e010:	f001 b9c5 	b.w	1f39e <z_impl_k_busy_wait>

0001e014 <nrfx_clock_stop>:
    clock_stop(domain);
   1e014:	f7f9 b948 	b.w	172a8 <clock_stop>

0001e018 <nrf_gpio_reconfigure>:
{
   1e018:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1e01a:	4616      	mov	r6, r2
   1e01c:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
   1e020:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e022:	a801      	add	r0, sp, #4
{
   1e024:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e026:	f7f9 fae7 	bl	175f8 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1e02a:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   1e02c:	f1b6 0c00 	subs.w	ip, r6, #0
   1e030:	bf18      	it	ne
   1e032:	f04f 0c01 	movne.w	ip, #1
   1e036:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   1e03a:	1e0b      	subs	r3, r1, #0
   1e03c:	bf18      	it	ne
   1e03e:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1e040:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   1e042:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1e046:	bf14      	ite	ne
   1e048:	f04f 0c0c 	movne.w	ip, #12
   1e04c:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   1e050:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   1e052:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   1e056:	bf14      	ite	ne
   1e058:	f44f 6c70 	movne.w	ip, #3840	; 0xf00
   1e05c:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   1e060:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1e062:	ea43 030c 	orr.w	r3, r3, ip
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   1e066:	bf14      	ite	ne
   1e068:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   1e06c:	f04f 0c00 	moveq.w	ip, #0
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1e070:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   1e074:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   1e078:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1e07c:	b101      	cbz	r1, 1e080 <nrf_gpio_reconfigure+0x68>
   1e07e:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   1e080:	b10e      	cbz	r6, 1e086 <nrf_gpio_reconfigure+0x6e>
   1e082:	7836      	ldrb	r6, [r6, #0]
   1e084:	0076      	lsls	r6, r6, #1
   1e086:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   1e088:	b10d      	cbz	r5, 1e08e <nrf_gpio_reconfigure+0x76>
   1e08a:	782d      	ldrb	r5, [r5, #0]
   1e08c:	00ad      	lsls	r5, r5, #2
   1e08e:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   1e090:	b10c      	cbz	r4, 1e096 <nrf_gpio_reconfigure+0x7e>
   1e092:	7824      	ldrb	r4, [r4, #0]
   1e094:	0224      	lsls	r4, r4, #8
   1e096:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   1e098:	b10f      	cbz	r7, 1e09e <nrf_gpio_reconfigure+0x86>
   1e09a:	783f      	ldrb	r7, [r7, #0]
   1e09c:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1e09e:	430c      	orrs	r4, r1
   1e0a0:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
   1e0a2:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
}
   1e0a6:	b003      	add	sp, #12
   1e0a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001e0aa <nrf_gpio_cfg_sense_set>:
{
   1e0aa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   1e0ac:	f10d 030f 	add.w	r3, sp, #15
   1e0b0:	9301      	str	r3, [sp, #4]
   1e0b2:	2300      	movs	r3, #0
{
   1e0b4:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   1e0b8:	461a      	mov	r2, r3
   1e0ba:	4619      	mov	r1, r3
   1e0bc:	9300      	str	r3, [sp, #0]
   1e0be:	f7ff ffab 	bl	1e018 <nrf_gpio_reconfigure>
}
   1e0c2:	b005      	add	sp, #20
   1e0c4:	f85d fb04 	ldr.w	pc, [sp], #4

0001e0c8 <metal_device_open>:
{
   1e0c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1e0ca:	460c      	mov	r4, r1
   1e0cc:	4615      	mov	r5, r2
	if (!bus_name || !strlen(bus_name) ||
   1e0ce:	4606      	mov	r6, r0
   1e0d0:	b918      	cbnz	r0, 1e0da <metal_device_open+0x12>
		return -EINVAL;
   1e0d2:	f06f 0015 	mvn.w	r0, #21
}
   1e0d6:	b002      	add	sp, #8
   1e0d8:	bd70      	pop	{r4, r5, r6, pc}
	if (!bus_name || !strlen(bus_name) ||
   1e0da:	f7fd fbbb 	bl	1b854 <strlen>
   1e0de:	2800      	cmp	r0, #0
   1e0e0:	d0f7      	beq.n	1e0d2 <metal_device_open+0xa>
   1e0e2:	2c00      	cmp	r4, #0
   1e0e4:	d0f5      	beq.n	1e0d2 <metal_device_open+0xa>
	    !dev_name || !strlen(dev_name) ||
   1e0e6:	4620      	mov	r0, r4
   1e0e8:	f7fd fbb4 	bl	1b854 <strlen>
   1e0ec:	2800      	cmp	r0, #0
   1e0ee:	d0f0      	beq.n	1e0d2 <metal_device_open+0xa>
   1e0f0:	2d00      	cmp	r5, #0
   1e0f2:	d0ee      	beq.n	1e0d2 <metal_device_open+0xa>
	error = metal_bus_find(bus_name, &bus);
   1e0f4:	4630      	mov	r0, r6
   1e0f6:	a901      	add	r1, sp, #4
   1e0f8:	f7f9 fe8e 	bl	17e18 <metal_bus_find>
	if (error)
   1e0fc:	2800      	cmp	r0, #0
   1e0fe:	d1ea      	bne.n	1e0d6 <metal_device_open+0xe>
	if (!bus->ops.dev_open)
   1e100:	9801      	ldr	r0, [sp, #4]
   1e102:	6883      	ldr	r3, [r0, #8]
   1e104:	b12b      	cbz	r3, 1e112 <metal_device_open+0x4a>
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   1e106:	462a      	mov	r2, r5
   1e108:	4621      	mov	r1, r4
}
   1e10a:	b002      	add	sp, #8
   1e10c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   1e110:	4718      	bx	r3
		return -ENODEV;
   1e112:	f06f 0012 	mvn.w	r0, #18
   1e116:	e7de      	b.n	1e0d6 <metal_device_open+0xe>

0001e118 <metal_device_close>:
{
   1e118:	4601      	mov	r1, r0
	if (device->bus->ops.dev_close)
   1e11a:	6840      	ldr	r0, [r0, #4]
   1e11c:	68c3      	ldr	r3, [r0, #12]
   1e11e:	b103      	cbz	r3, 1e122 <metal_device_close+0xa>
		device->bus->ops.dev_close(device->bus, device);
   1e120:	4718      	bx	r3
}
   1e122:	4770      	bx	lr

0001e124 <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned int page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
   1e124:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e128:	b089      	sub	sp, #36	; 0x24
   1e12a:	9e10      	ldr	r6, [sp, #64]	; 0x40
   1e12c:	4604      	mov	r4, r0
   1e12e:	4689      	mov	r9, r1
   1e130:	4690      	mov	r8, r2
	const struct metal_io_ops nops = {
   1e132:	2100      	movs	r1, #0
   1e134:	2220      	movs	r2, #32
   1e136:	4668      	mov	r0, sp
{
   1e138:	461f      	mov	r7, r3
   1e13a:	9d12      	ldr	r5, [sp, #72]	; 0x48
	const struct metal_io_ops nops = {
   1e13c:	f7fd fbd4 	bl	1b8e8 <memset>

	io->virt = virt;
	io->physmap = physmap;
	io->size = size;
	io->page_shift = page_shift;
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
   1e140:	2e1f      	cmp	r6, #31
		/* avoid overflow */
		io->page_mask = -1UL;
	else
		io->page_mask = (1UL << page_shift) - 1UL;
   1e142:	bf97      	itett	ls
   1e144:	2301      	movls	r3, #1
		io->page_mask = -1UL;
   1e146:	f04f 33ff 	movhi.w	r3, #4294967295
		io->page_mask = (1UL << page_shift) - 1UL;
   1e14a:	40b3      	lslls	r3, r6
   1e14c:	f103 33ff 	addls.w	r3, r3, #4294967295
   1e150:	6123      	str	r3, [r4, #16]
	io->mem_flags = mem_flags;
   1e152:	9b11      	ldr	r3, [sp, #68]	; 0x44
	io->physmap = physmap;
   1e154:	e9c4 9800 	strd	r9, r8, [r4]
	io->page_shift = page_shift;
   1e158:	e9c4 7602 	strd	r7, r6, [r4, #8]
	io->mem_flags = mem_flags;
   1e15c:	6163      	str	r3, [r4, #20]
	io->ops = ops ? *ops : nops;
   1e15e:	3418      	adds	r4, #24
   1e160:	b145      	cbz	r5, 1e174 <metal_io_init+0x50>
   1e162:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1e164:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1e166:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1e16a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	metal_sys_io_mem_map(io);
}
   1e16e:	b009      	add	sp, #36	; 0x24
   1e170:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	io->ops = ops ? *ops : nops;
   1e174:	466d      	mov	r5, sp
   1e176:	e7f4      	b.n	1e162 <metal_io_init+0x3e>

0001e178 <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
   1e178:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   1e17a:	6804      	ldr	r4, [r0, #0]
		: NULL);
   1e17c:	1c66      	adds	r6, r4, #1
   1e17e:	d031      	beq.n	1e1e4 <metal_io_block_read+0x6c>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1e180:	6885      	ldr	r5, [r0, #8]
   1e182:	42a9      	cmp	r1, r5
   1e184:	d22e      	bcs.n	1e1e4 <metal_io_block_read+0x6c>
	unsigned char *ptr = metal_io_virt(io, offset);
	unsigned char *dest = dst;
	int retlen;

	if (!ptr)
   1e186:	1864      	adds	r4, r4, r1
   1e188:	d02c      	beq.n	1e1e4 <metal_io_block_read+0x6c>
		return -ERANGE;
	if ((offset + len) > io->size)
   1e18a:	185e      	adds	r6, r3, r1
   1e18c:	42ae      	cmp	r6, r5
		len = io->size - offset;
   1e18e:	bf88      	it	hi
   1e190:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_read) {
   1e192:	6a05      	ldr	r5, [r0, #32]
   1e194:	b135      	cbz	r5, 1e1a4 <metal_io_block_read+0x2c>
		retlen = (*io->ops.block_read)(
   1e196:	9300      	str	r3, [sp, #0]
   1e198:	2305      	movs	r3, #5
   1e19a:	47a8      	blx	r5
   1e19c:	4603      	mov	r3, r0
		for (; len != 0; dest++, ptr++, len--)
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
	}
	return retlen;
}
   1e19e:	4618      	mov	r0, r3
   1e1a0:	b002      	add	sp, #8
   1e1a2:	bd70      	pop	{r4, r5, r6, pc}
		atomic_thread_fence(memory_order_seq_cst);
   1e1a4:	f3bf 8f5b 	dmb	ish
		while ( len && (
   1e1a8:	4619      	mov	r1, r3
   1e1aa:	1aa4      	subs	r4, r4, r2
   1e1ac:	1910      	adds	r0, r2, r4
   1e1ae:	b119      	cbz	r1, 1e1b8 <metal_io_block_read+0x40>
			((uintptr_t)dest % sizeof(int)) ||
   1e1b0:	ea40 0502 	orr.w	r5, r0, r2
   1e1b4:	07ad      	lsls	r5, r5, #30
   1e1b6:	d10a      	bne.n	1e1ce <metal_io_block_read+0x56>
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   1e1b8:	2903      	cmp	r1, #3
   1e1ba:	dc0d      	bgt.n	1e1d8 <metal_io_block_read+0x60>
   1e1bc:	3801      	subs	r0, #1
   1e1be:	4411      	add	r1, r2
		for (; len != 0; dest++, ptr++, len--)
   1e1c0:	428a      	cmp	r2, r1
   1e1c2:	d0ec      	beq.n	1e19e <metal_io_block_read+0x26>
				*(const unsigned char *)ptr;
   1e1c4:	f810 4f01 	ldrb.w	r4, [r0, #1]!
			*(unsigned char *)dest =
   1e1c8:	f802 4b01 	strb.w	r4, [r2], #1
		for (; len != 0; dest++, ptr++, len--)
   1e1cc:	e7f8      	b.n	1e1c0 <metal_io_block_read+0x48>
				*(const unsigned char *)ptr;
   1e1ce:	7800      	ldrb	r0, [r0, #0]
			len--;
   1e1d0:	3901      	subs	r1, #1
			*(unsigned char *)dest =
   1e1d2:	f802 0b01 	strb.w	r0, [r2], #1
			len--;
   1e1d6:	e7e9      	b.n	1e1ac <metal_io_block_read+0x34>
			*(unsigned int *)dest = *(const unsigned int *)ptr;
   1e1d8:	f850 4b04 	ldr.w	r4, [r0], #4
   1e1dc:	3904      	subs	r1, #4
   1e1de:	f842 4b04 	str.w	r4, [r2], #4
					ptr += sizeof(int),
   1e1e2:	e7e9      	b.n	1e1b8 <metal_io_block_read+0x40>
		return -ERANGE;
   1e1e4:	f06f 0321 	mvn.w	r3, #33	; 0x21
   1e1e8:	e7d9      	b.n	1e19e <metal_io_block_read+0x26>

0001e1ea <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
   1e1ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1e1ec:	6804      	ldr	r4, [r0, #0]
		: NULL);
   1e1ee:	1c65      	adds	r5, r4, #1
   1e1f0:	d032      	beq.n	1e258 <metal_io_block_write+0x6e>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1e1f2:	6885      	ldr	r5, [r0, #8]
   1e1f4:	42a9      	cmp	r1, r5
   1e1f6:	d22f      	bcs.n	1e258 <metal_io_block_write+0x6e>
	unsigned char *ptr = metal_io_virt(io, offset);
	const unsigned char *source = src;
	int retlen;

	if (!ptr)
   1e1f8:	1864      	adds	r4, r4, r1
   1e1fa:	d02d      	beq.n	1e258 <metal_io_block_write+0x6e>
		return -ERANGE;
	if ((offset + len) > io->size)
   1e1fc:	185e      	adds	r6, r3, r1
   1e1fe:	42ae      	cmp	r6, r5
		len = io->size - offset;
   1e200:	bf88      	it	hi
   1e202:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_write) {
   1e204:	6a45      	ldr	r5, [r0, #36]	; 0x24
   1e206:	b1cd      	cbz	r5, 1e23c <metal_io_block_write+0x52>
		retlen = (*io->ops.block_write)(
   1e208:	9300      	str	r3, [sp, #0]
   1e20a:	2305      	movs	r3, #5
   1e20c:	47a8      	blx	r5
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
}
   1e20e:	b002      	add	sp, #8
   1e210:	bd70      	pop	{r4, r5, r6, pc}
				*(const unsigned char *)source;
   1e212:	f812 5b01 	ldrb.w	r5, [r2], #1
			len--;
   1e216:	3901      	subs	r1, #1
			*(unsigned char *)ptr =
   1e218:	7005      	strb	r5, [r0, #0]
			len--;
   1e21a:	4615      	mov	r5, r2
   1e21c:	18a0      	adds	r0, r4, r2
		while ( len && (
   1e21e:	b119      	cbz	r1, 1e228 <metal_io_block_write+0x3e>
			((uintptr_t)ptr % sizeof(int)) ||
   1e220:	ea40 0602 	orr.w	r6, r0, r2
   1e224:	07b6      	lsls	r6, r6, #30
   1e226:	d1f4      	bne.n	1e212 <metal_io_block_write+0x28>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1e228:	2903      	cmp	r1, #3
   1e22a:	dc0a      	bgt.n	1e242 <metal_io_block_write+0x58>
   1e22c:	3d01      	subs	r5, #1
   1e22e:	4401      	add	r1, r0
		for (; len != 0; ptr++, source++, len--)
   1e230:	4288      	cmp	r0, r1
   1e232:	d10c      	bne.n	1e24e <metal_io_block_write+0x64>
		atomic_thread_fence(memory_order_seq_cst);
   1e234:	f3bf 8f5b 	dmb	ish
	retlen = len;
   1e238:	4618      	mov	r0, r3
   1e23a:	e7e8      	b.n	1e20e <metal_io_block_write+0x24>
   1e23c:	4619      	mov	r1, r3
   1e23e:	1aa4      	subs	r4, r4, r2
   1e240:	e7eb      	b.n	1e21a <metal_io_block_write+0x30>
			*(unsigned int *)ptr = *(const unsigned int *)source;
   1e242:	f855 2b04 	ldr.w	r2, [r5], #4
   1e246:	3904      	subs	r1, #4
   1e248:	f840 2b04 	str.w	r2, [r0], #4
					source += sizeof(int),
   1e24c:	e7ec      	b.n	1e228 <metal_io_block_write+0x3e>
				*(const unsigned char *)source;
   1e24e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
			*(unsigned char *)ptr =
   1e252:	f800 2b01 	strb.w	r2, [r0], #1
		for (; len != 0; ptr++, source++, len--)
   1e256:	e7eb      	b.n	1e230 <metal_io_block_write+0x46>
		return -ERANGE;
   1e258:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1e25c:	e7d7      	b.n	1e20e <metal_io_block_write+0x24>

0001e25e <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
   1e25e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1e260:	6804      	ldr	r4, [r0, #0]
   1e262:	461d      	mov	r5, r3
		: NULL);
   1e264:	1c66      	adds	r6, r4, #1
   1e266:	d02b      	beq.n	1e2c0 <metal_io_block_set+0x62>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1e268:	6883      	ldr	r3, [r0, #8]
   1e26a:	4299      	cmp	r1, r3
   1e26c:	d228      	bcs.n	1e2c0 <metal_io_block_set+0x62>
	unsigned char *ptr = metal_io_virt(io, offset);
	int retlen = len;

	if (!ptr)
   1e26e:	1864      	adds	r4, r4, r1
   1e270:	d026      	beq.n	1e2c0 <metal_io_block_set+0x62>
		return -ERANGE;
	if ((offset + len) > io->size)
   1e272:	186e      	adds	r6, r5, r1
   1e274:	429e      	cmp	r6, r3
		len = io->size - offset;
	retlen = len;
	if (io->ops.block_set) {
   1e276:	6a86      	ldr	r6, [r0, #40]	; 0x28
		len = io->size - offset;
   1e278:	bf88      	it	hi
   1e27a:	1a5d      	subhi	r5, r3, r1
	if (io->ops.block_set) {
   1e27c:	b12e      	cbz	r6, 1e28a <metal_io_block_set+0x2c>
		(*io->ops.block_set)(
   1e27e:	2305      	movs	r3, #5
   1e280:	9500      	str	r5, [sp, #0]
   1e282:	47b0      	blx	r6
			*(unsigned int *)ptr = cint;
		for (; len != 0; ptr++, len--)
			*(unsigned char *)ptr = (unsigned char) value;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
   1e284:	4628      	mov	r0, r5
}
   1e286:	b002      	add	sp, #8
   1e288:	bd70      	pop	{r4, r5, r6, pc}
		: NULL);
   1e28a:	4621      	mov	r1, r4
   1e28c:	462b      	mov	r3, r5
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   1e28e:	b94b      	cbnz	r3, 1e2a4 <metal_io_block_set+0x46>
   1e290:	440b      	add	r3, r1
		for (; len != 0; ptr++, len--)
   1e292:	4299      	cmp	r1, r3
   1e294:	d111      	bne.n	1e2ba <metal_io_block_set+0x5c>
		atomic_thread_fence(memory_order_seq_cst);
   1e296:	f3bf 8f5b 	dmb	ish
   1e29a:	e7f3      	b.n	1e284 <metal_io_block_set+0x26>
			*(unsigned char *)ptr = (unsigned char) value;
   1e29c:	f801 2b01 	strb.w	r2, [r1], #1
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   1e2a0:	3b01      	subs	r3, #1
   1e2a2:	e7f4      	b.n	1e28e <metal_io_block_set+0x30>
   1e2a4:	0788      	lsls	r0, r1, #30
   1e2a6:	d1f9      	bne.n	1e29c <metal_io_block_set+0x3e>
			cint |= ((unsigned int)value << (CHAR_BIT * i));
   1e2a8:	f04f 3001 	mov.w	r0, #16843009	; 0x1010101
   1e2ac:	4350      	muls	r0, r2
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1e2ae:	2b03      	cmp	r3, #3
   1e2b0:	ddee      	ble.n	1e290 <metal_io_block_set+0x32>
			*(unsigned int *)ptr = cint;
   1e2b2:	f841 0b04 	str.w	r0, [r1], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1e2b6:	3b04      	subs	r3, #4
   1e2b8:	e7f9      	b.n	1e2ae <metal_io_block_set+0x50>
			*(unsigned char *)ptr = (unsigned char) value;
   1e2ba:	f801 2b01 	strb.w	r2, [r1], #1
		for (; len != 0; ptr++, len--)
   1e2be:	e7e8      	b.n	1e292 <metal_io_block_set+0x34>
		return -ERANGE;
   1e2c0:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1e2c4:	e7df      	b.n	1e286 <metal_io_block_set+0x28>

0001e2c6 <metal_generic_dev_sys_open>:

	/* Since Zephyr runs bare-metal there is no mapping that needs to be
	 * done of IO regions
	 */
	return 0;
}
   1e2c6:	2000      	movs	r0, #0
   1e2c8:	4770      	bx	lr

0001e2ca <metal_io_phys>:
 * @return	METAL_BAD_PHYS if offset is out of range, or physical address
 *		of offset.
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
   1e2ca:	b410      	push	{r4}
	if (!io->ops.offset_to_phys) {
   1e2cc:	6b04      	ldr	r4, [r0, #48]	; 0x30
{
   1e2ce:	4602      	mov	r2, r0
   1e2d0:	460b      	mov	r3, r1
	if (!io->ops.offset_to_phys) {
   1e2d2:	b984      	cbnz	r4, 1e2f6 <metal_io_phys+0x2c>
		unsigned long page = (io->page_shift >=
   1e2d4:	68c1      	ldr	r1, [r0, #12]
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
   1e2d6:	291f      	cmp	r1, #31
   1e2d8:	bf98      	it	ls
   1e2da:	fa23 f401 	lsrls.w	r4, r3, r1
		return (io->physmap && offset < io->size
   1e2de:	6841      	ldr	r1, [r0, #4]
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
   1e2e0:	b161      	cbz	r1, 1e2fc <metal_io_phys+0x32>
		return (io->physmap && offset < io->size
   1e2e2:	6880      	ldr	r0, [r0, #8]
   1e2e4:	4283      	cmp	r3, r0
   1e2e6:	d209      	bcs.n	1e2fc <metal_io_phys+0x32>
			? io->physmap[page] + (offset & io->page_mask)
   1e2e8:	6910      	ldr	r0, [r2, #16]
   1e2ea:	4018      	ands	r0, r3
			: METAL_BAD_PHYS);
   1e2ec:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
   1e2f0:	4418      	add	r0, r3
	}

	return io->ops.offset_to_phys(io, offset);
}
   1e2f2:	bc10      	pop	{r4}
   1e2f4:	4770      	bx	lr
	return io->ops.offset_to_phys(io, offset);
   1e2f6:	4623      	mov	r3, r4
}
   1e2f8:	bc10      	pop	{r4}
	return io->ops.offset_to_phys(io, offset);
   1e2fa:	4718      	bx	r3
			: METAL_BAD_PHYS);
   1e2fc:	f04f 30ff 	mov.w	r0, #4294967295
   1e300:	e7f7      	b.n	1e2f2 <metal_io_phys+0x28>

0001e302 <virtqueue_create>:
{
   1e302:	b530      	push	{r4, r5, lr}
   1e304:	9c05      	ldr	r4, [sp, #20]
		vq->vq_name = name;
   1e306:	e9c4 0200 	strd	r0, r2, [r4]
		vq->callback = callback;
   1e30a:	9a03      	ldr	r2, [sp, #12]
		vq->vq_queue_index = id;
   1e30c:	8121      	strh	r1, [r4, #8]
		vq->vq_nentries = ring->num_descs;
   1e30e:	8919      	ldrh	r1, [r3, #8]
		vq->callback = callback;
   1e310:	60e2      	str	r2, [r4, #12]
		vq->notify = notify;
   1e312:	9a04      	ldr	r2, [sp, #16]
		vq->vq_nentries = ring->num_descs;
   1e314:	8161      	strh	r1, [r4, #10]
		vq->vq_free_cnt = vq->vq_nentries;
   1e316:	84a1      	strh	r1, [r4, #36]	; 0x24
		vq->notify = notify;
   1e318:	6122      	str	r2, [r4, #16]
		vq_ring_init(vq, ring->vaddr, ring->align);
   1e31a:	e9d3 2500 	ldrd	r2, r5, [r3]
static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
	vr->num = num;
	vr->desc = (struct vring_desc *)p;
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   1e31e:	eb02 1301 	add.w	r3, r2, r1, lsl #4
	vr->desc = (struct vring_desc *)p;
   1e322:	e9c4 1205 	strd	r1, r2, [r4, #20]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   1e326:	1c8a      	adds	r2, r1, #2
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   1e328:	61e3      	str	r3, [r4, #28]
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   1e32a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	      align - 1) & ~(align - 1));
   1e32e:	1c6a      	adds	r2, r5, #1
   1e330:	4413      	add	r3, r2
   1e332:	426d      	negs	r5, r5
   1e334:	402b      	ands	r3, r5
	vr->used = (struct vring_used *)
   1e336:	6223      	str	r3, [r4, #32]
	vr = &vq->vq_ring;

	vring_init(vr, size, ring_mem, alignment);

#ifndef VIRTIO_DEVICE_ONLY
	if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   1e338:	6983      	ldr	r3, [r0, #24]
   1e33a:	b953      	cbnz	r3, 1e352 <virtqueue_create+0x50>
		int i;

		for (i = 0; i < size - 1; i++)
   1e33c:	3901      	subs	r1, #1
			vr->desc[i].next = i + 1;
   1e33e:	69a2      	ldr	r2, [r4, #24]
		for (i = 0; i < size - 1; i++)
   1e340:	428b      	cmp	r3, r1
			vr->desc[i].next = i + 1;
   1e342:	eb02 1203 	add.w	r2, r2, r3, lsl #4
		for (i = 0; i < size - 1; i++)
   1e346:	db06      	blt.n	1e356 <virtqueue_create+0x54>
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
   1e348:	2300      	movs	r3, #0
   1e34a:	7393      	strb	r3, [r2, #14]
   1e34c:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1e350:	73d3      	strb	r3, [r2, #15]
}
   1e352:	2000      	movs	r0, #0
   1e354:	bd30      	pop	{r4, r5, pc}
			vr->desc[i].next = i + 1;
   1e356:	3301      	adds	r3, #1
   1e358:	81d3      	strh	r3, [r2, #14]
		for (i = 0; i < size - 1; i++)
   1e35a:	e7f0      	b.n	1e33e <virtqueue_create+0x3c>

0001e35c <virtqueue_add_buffer>:
{
   1e35c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		head_idx = vq->vq_desc_head_idx;
   1e360:	f8b0 a02c 	ldrh.w	sl, [r0, #44]	; 0x2c
{
   1e364:	4604      	mov	r4, r0
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1e366:	4655      	mov	r5, sl
   1e368:	2600      	movs	r6, #0
{
   1e36a:	b085      	sub	sp, #20
	needed = readable + writable;
   1e36c:	eb02 0803 	add.w	r8, r2, r3
{
   1e370:	4691      	mov	r9, r2
		dxp->cookie = cookie;
   1e372:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1e374:	eb00 03ca 	add.w	r3, r0, sl, lsl #3
		dxp->ndescs = needed;
   1e378:	fa1f fb88 	uxth.w	fp, r8
		dxp->cookie = cookie;
   1e37c:	635a      	str	r2, [r3, #52]	; 0x34
		dxp->ndescs = needed;
   1e37e:	f8a3 b038 	strh.w	fp, [r3, #56]	; 0x38
		if (i < needed - 1)
   1e382:	f108 32ff 	add.w	r2, r8, #4294967295
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
   1e386:	6983      	ldr	r3, [r0, #24]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1e388:	1d0f      	adds	r7, r1, #4
		if (i < needed - 1)
   1e38a:	9201      	str	r2, [sp, #4]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1e38c:	45b0      	cmp	r8, r6
   1e38e:	dc1a      	bgt.n	1e3c6 <virtqueue_add_buffer+0x6a>
		vq->vq_free_cnt -= needed;
   1e390:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
		vq->vq_desc_head_idx = idx;
   1e392:	85a5      	strh	r5, [r4, #44]	; 0x2c
		vq->vq_free_cnt -= needed;
   1e394:	eba3 030b 	sub.w	r3, r3, fp
   1e398:	84a3      	strh	r3, [r4, #36]	; 0x24
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 *
	 * CACHE: avail is never written by slave, so it is safe to not invalidate here
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   1e39a:	69e3      	ldr	r3, [r4, #28]
   1e39c:	8961      	ldrh	r1, [r4, #10]
   1e39e:	885a      	ldrh	r2, [r3, #2]
   1e3a0:	3901      	subs	r1, #1
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
   1e3a2:	400a      	ands	r2, r1
   1e3a4:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   1e3a8:	f8a3 a004 	strh.w	sl, [r3, #4]

	/* We still need to flush the ring */
	VRING_FLUSH(vq->vq_ring.avail->ring[avail_idx]);

	atomic_thread_fence(memory_order_seq_cst);
   1e3ac:	f3bf 8f5b 	dmb	ish
}
   1e3b0:	2000      	movs	r0, #0

	vq->vq_ring.avail->idx++;
   1e3b2:	69e2      	ldr	r2, [r4, #28]
   1e3b4:	8853      	ldrh	r3, [r2, #2]
   1e3b6:	3301      	adds	r3, #1
   1e3b8:	8053      	strh	r3, [r2, #2]

	/* And the index */
	VRING_FLUSH(vq->vq_ring.avail->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   1e3ba:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   1e3bc:	3301      	adds	r3, #1
   1e3be:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   1e3c0:	b005      	add	sp, #20
   1e3c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp = &desc[idx];
   1e3c6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   1e3c8:	012a      	lsls	r2, r5, #4
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   1e3ca:	f857 1c04 	ldr.w	r1, [r7, #-4]
   1e3ce:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   1e3d2:	9302      	str	r3, [sp, #8]
   1e3d4:	6803      	ldr	r3, [r0, #0]
   1e3d6:	9203      	str	r2, [sp, #12]
   1e3d8:	1ac9      	subs	r1, r1, r3
 *		physical address.
 */
static inline metal_phys_addr_t
metal_io_virt_to_phys(struct metal_io_region *io, void *virt)
{
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
   1e3da:	6883      	ldr	r3, [r0, #8]
   1e3dc:	3708      	adds	r7, #8
   1e3de:	4299      	cmp	r1, r3
   1e3e0:	bf28      	it	cs
   1e3e2:	f04f 31ff 	movcs.w	r1, #4294967295
   1e3e6:	f7ff ff70 	bl	1e2ca <metal_io_phys>
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   1e3ea:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   1e3ee:	5098      	str	r0, [r3, r2]
   1e3f0:	2200      	movs	r2, #0
   1e3f2:	606a      	str	r2, [r5, #4]
		dp->len = buf_list[i].len;
   1e3f4:	f857 2c08 	ldr.w	r2, [r7, #-8]
   1e3f8:	60aa      	str	r2, [r5, #8]
		if (i < needed - 1)
   1e3fa:	9a01      	ldr	r2, [sp, #4]
   1e3fc:	4296      	cmp	r6, r2
   1e3fe:	bfac      	ite	ge
   1e400:	2200      	movge	r2, #0
   1e402:	2201      	movlt	r2, #1
		if (i >= readable)
   1e404:	45b1      	cmp	r9, r6
			dp->flags |= VRING_DESC_F_WRITE;
   1e406:	bfd8      	it	le
   1e408:	f042 0202 	orrle.w	r2, r2, #2
   1e40c:	81aa      	strh	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1e40e:	3601      	adds	r6, #1
   1e410:	89ed      	ldrh	r5, [r5, #14]
   1e412:	e7bb      	b.n	1e38c <virtqueue_add_buffer+0x30>

0001e414 <virtqueue_get_buffer>:
{
   1e414:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
   1e416:	b350      	cbz	r0, 1e46e <virtqueue_get_buffer+0x5a>
   1e418:	6a05      	ldr	r5, [r0, #32]
   1e41a:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
   1e41c:	886b      	ldrh	r3, [r5, #2]
   1e41e:	42a3      	cmp	r3, r4
   1e420:	d030      	beq.n	1e484 <virtqueue_get_buffer+0x70>
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   1e422:	1c63      	adds	r3, r4, #1
   1e424:	85c3      	strh	r3, [r0, #46]	; 0x2e
   1e426:	8943      	ldrh	r3, [r0, #10]
	atomic_thread_fence(memory_order_seq_cst);
   1e428:	f3bf 8f5b 	dmb	ish
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   1e42c:	3b01      	subs	r3, #1
   1e42e:	401c      	ands	r4, r3
	desc_idx = (uint16_t)uep->id;
   1e430:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   1e434:	686b      	ldr	r3, [r5, #4]
   1e436:	b29e      	uxth	r6, r3
	if (len)
   1e438:	b109      	cbz	r1, 1e43e <virtqueue_get_buffer+0x2a>
		*len = uep->len;
   1e43a:	68ad      	ldr	r5, [r5, #8]
   1e43c:	600d      	str	r5, [r1, #0]
	dp = &vq->vq_ring.desc[desc_idx];
   1e43e:	f8d0 c018 	ldr.w	ip, [r0, #24]
   1e442:	b29b      	uxth	r3, r3
   1e444:	eb0c 1103 	add.w	r1, ip, r3, lsl #4
	vq->vq_free_cnt += dxp->ndescs;
   1e448:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   1e44c:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
   1e44e:	8c87      	ldrh	r7, [r0, #36]	; 0x24
   1e450:	442f      	add	r7, r5
	dxp->ndescs--;
   1e452:	3d01      	subs	r5, #1
	vq->vq_free_cnt += dxp->ndescs;
   1e454:	8487      	strh	r7, [r0, #36]	; 0x24
	dxp->ndescs--;
   1e456:	871d      	strh	r5, [r3, #56]	; 0x38
	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
   1e458:	898d      	ldrh	r5, [r1, #12]
   1e45a:	076f      	lsls	r7, r5, #29
   1e45c:	d50e      	bpl.n	1e47c <virtqueue_get_buffer+0x68>
	dp->next = vq->vq_desc_head_idx;
   1e45e:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
   1e460:	81cd      	strh	r5, [r1, #14]
	vq->vq_descx[desc_idx].cookie = NULL;
   1e462:	2100      	movs	r1, #0
	vq->vq_desc_head_idx = desc_idx;
   1e464:	8586      	strh	r6, [r0, #44]	; 0x2c
	cookie = vq->vq_descx[desc_idx].cookie;
   1e466:	6b58      	ldr	r0, [r3, #52]	; 0x34
	vq->vq_descx[desc_idx].cookie = NULL;
   1e468:	6359      	str	r1, [r3, #52]	; 0x34
	if (idx)
   1e46a:	b102      	cbz	r2, 1e46e <virtqueue_get_buffer+0x5a>
		*idx = used_idx;
   1e46c:	8014      	strh	r4, [r2, #0]
}
   1e46e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dxp->ndescs--;
   1e470:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
			dp = &vq->vq_ring.desc[dp->next];
   1e472:	89c9      	ldrh	r1, [r1, #14]
			dxp->ndescs--;
   1e474:	3d01      	subs	r5, #1
			dp = &vq->vq_ring.desc[dp->next];
   1e476:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
			dxp->ndescs--;
   1e47a:	871d      	strh	r5, [r3, #56]	; 0x38
		while (dp->flags & VRING_DESC_F_NEXT) {
   1e47c:	898d      	ldrh	r5, [r1, #12]
   1e47e:	07ed      	lsls	r5, r5, #31
   1e480:	d4f6      	bmi.n	1e470 <virtqueue_get_buffer+0x5c>
   1e482:	e7ec      	b.n	1e45e <virtqueue_get_buffer+0x4a>
		return NULL;
   1e484:	2000      	movs	r0, #0
   1e486:	e7f2      	b.n	1e46e <virtqueue_get_buffer+0x5a>

0001e488 <virtqueue_get_buffer_length>:
	return vq->vq_ring.desc[idx].len;
   1e488:	6983      	ldr	r3, [r0, #24]
   1e48a:	eb03 1301 	add.w	r3, r3, r1, lsl #4
}
   1e48e:	6898      	ldr	r0, [r3, #8]
   1e490:	4770      	bx	lr

0001e492 <virtqueue_get_available_buffer>:
{
   1e492:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	atomic_thread_fence(memory_order_seq_cst);
   1e496:	f3bf 8f5b 	dmb	ish
{
   1e49a:	4617      	mov	r7, r2
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1e49c:	69c2      	ldr	r2, [r0, #28]
{
   1e49e:	460e      	mov	r6, r1
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1e4a0:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   1e4a2:	8851      	ldrh	r1, [r2, #2]
{
   1e4a4:	4605      	mov	r5, r0
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1e4a6:	4299      	cmp	r1, r3
   1e4a8:	d045      	beq.n	1e536 <virtqueue_get_available_buffer+0xa4>
	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
   1e4aa:	1c59      	adds	r1, r3, #1
   1e4ac:	8601      	strh	r1, [r0, #48]	; 0x30
   1e4ae:	8941      	ldrh	r1, [r0, #10]
   1e4b0:	3901      	subs	r1, #1
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
   1e4b2:	400b      	ands	r3, r1
   1e4b4:	eb02 0243 	add.w	r2, r2, r3, lsl #1
   1e4b8:	8892      	ldrh	r2, [r2, #4]
   1e4ba:	8032      	strh	r2, [r6, #0]
   1e4bc:	b293      	uxth	r3, r2
   1e4be:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   1e4c2:	6982      	ldr	r2, [r0, #24]
   1e4c4:	011b      	lsls	r3, r3, #4
   1e4c6:	f852 9003 	ldr.w	r9, [r2, r3]
	if (!io->ops.phys_to_offset) {
   1e4ca:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
   1e4ce:	bb5b      	cbnz	r3, 1e528 <virtqueue_get_available_buffer+0x96>
			(io->page_mask == (metal_phys_addr_t)(-1) ?
   1e4d0:	f8d8 4010 	ldr.w	r4, [r8, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
   1e4d4:	1c62      	adds	r2, r4, #1
   1e4d6:	bf09      	itett	eq
   1e4d8:	f8d8 3004 	ldreq.w	r3, [r8, #4]
   1e4dc:	ea09 0404 	andne.w	r4, r9, r4
   1e4e0:	681c      	ldreq	r4, [r3, #0]
   1e4e2:	eba9 0404 	subeq.w	r4, r9, r4
			if (metal_io_phys(io, offset) == phys)
   1e4e6:	4621      	mov	r1, r4
   1e4e8:	4640      	mov	r0, r8
   1e4ea:	f7ff feee 	bl	1e2ca <metal_io_phys>
   1e4ee:	4581      	cmp	r9, r0
   1e4f0:	d009      	beq.n	1e506 <virtqueue_get_available_buffer+0x74>
			offset += io->page_mask + 1;
   1e4f2:	f8d8 3010 	ldr.w	r3, [r8, #16]
   1e4f6:	3301      	adds	r3, #1
   1e4f8:	441c      	add	r4, r3
		} while (offset < io->size);
   1e4fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1e4fe:	429c      	cmp	r4, r3
   1e500:	d3f1      	bcc.n	1e4e6 <virtqueue_get_available_buffer+0x54>
		return METAL_BAD_OFFSET;
   1e502:	f04f 34ff 	mov.w	r4, #4294967295
	return (io->virt != METAL_BAD_VA && offset < io->size
   1e506:	f8d8 0000 	ldr.w	r0, [r8]
		: NULL);
   1e50a:	1c43      	adds	r3, r0, #1
   1e50c:	d011      	beq.n	1e532 <virtqueue_get_available_buffer+0xa0>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1e50e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1e512:	42a3      	cmp	r3, r4
   1e514:	d90d      	bls.n	1e532 <virtqueue_get_available_buffer+0xa0>
		? (void *)((uintptr_t)io->virt + offset)
   1e516:	4420      	add	r0, r4
	*len = vq->vq_ring.desc[*avail_idx].len;
   1e518:	8832      	ldrh	r2, [r6, #0]
   1e51a:	69ab      	ldr	r3, [r5, #24]
   1e51c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   1e520:	689b      	ldr	r3, [r3, #8]
   1e522:	603b      	str	r3, [r7, #0]
}
   1e524:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return (*io->ops.phys_to_offset)(io, phys);
   1e528:	4649      	mov	r1, r9
   1e52a:	4640      	mov	r0, r8
   1e52c:	4798      	blx	r3
   1e52e:	4604      	mov	r4, r0
   1e530:	e7e9      	b.n	1e506 <virtqueue_get_available_buffer+0x74>
		: NULL);
   1e532:	2000      	movs	r0, #0
   1e534:	e7f0      	b.n	1e518 <virtqueue_get_available_buffer+0x86>
		return NULL;
   1e536:	2000      	movs	r0, #0
   1e538:	e7f4      	b.n	1e524 <virtqueue_get_available_buffer+0x92>

0001e53a <virtqueue_disable_cb>:
{
   1e53a:	b510      	push	{r4, lr}
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1e53c:	6802      	ldr	r2, [r0, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   1e53e:	6993      	ldr	r3, [r2, #24]
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1e540:	6912      	ldr	r2, [r2, #16]
   1e542:	0092      	lsls	r2, r2, #2
   1e544:	d517      	bpl.n	1e576 <virtqueue_disable_cb+0x3c>
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   1e546:	b943      	cbnz	r3, 1e55a <virtqueue_disable_cb+0x20>
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   1e548:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
			vring_used_event(&vq->vq_ring) =
   1e54a:	69c2      	ldr	r2, [r0, #28]
   1e54c:	6941      	ldr	r1, [r0, #20]
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   1e54e:	8944      	ldrh	r4, [r0, #10]
   1e550:	3b01      	subs	r3, #1
   1e552:	1b1b      	subs	r3, r3, r4
			vring_used_event(&vq->vq_ring) =
   1e554:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   1e558:	8093      	strh	r3, [r2, #4]
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   1e55a:	6803      	ldr	r3, [r0, #0]
   1e55c:	699b      	ldr	r3, [r3, #24]
   1e55e:	2b01      	cmp	r3, #1
   1e560:	d108      	bne.n	1e574 <virtqueue_disable_cb+0x3a>
			    vq->vq_available_idx - vq->vq_nentries - 1;
   1e562:	8e03      	ldrh	r3, [r0, #48]	; 0x30
			vring_avail_event(&vq->vq_ring) =
   1e564:	6a02      	ldr	r2, [r0, #32]
   1e566:	6941      	ldr	r1, [r0, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
   1e568:	8940      	ldrh	r0, [r0, #10]
   1e56a:	3b01      	subs	r3, #1
   1e56c:	1a1b      	subs	r3, r3, r0
			vring_avail_event(&vq->vq_ring) =
   1e56e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   1e572:	8093      	strh	r3, [r2, #4]
}
   1e574:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   1e576:	b923      	cbnz	r3, 1e582 <virtqueue_disable_cb+0x48>
			vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
   1e578:	69c2      	ldr	r2, [r0, #28]
   1e57a:	8813      	ldrh	r3, [r2, #0]
   1e57c:	f043 0301 	orr.w	r3, r3, #1
   1e580:	8013      	strh	r3, [r2, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   1e582:	6803      	ldr	r3, [r0, #0]
   1e584:	699b      	ldr	r3, [r3, #24]
   1e586:	2b01      	cmp	r3, #1
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   1e588:	bf01      	itttt	eq
   1e58a:	6a02      	ldreq	r2, [r0, #32]
   1e58c:	8813      	ldrheq	r3, [r2, #0]
   1e58e:	f043 0301 	orreq.w	r3, r3, #1
   1e592:	8013      	strheq	r3, [r2, #0]
}
   1e594:	e7ee      	b.n	1e574 <virtqueue_disable_cb+0x3a>

0001e596 <virtqueue_kick>:
{
   1e596:	b510      	push	{r4, lr}
	atomic_thread_fence(memory_order_seq_cst);
   1e598:	f3bf 8f5b 	dmb	ish
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1e59c:	6803      	ldr	r3, [r0, #0]
{
   1e59e:	4604      	mov	r4, r0
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1e5a0:	691a      	ldr	r2, [r3, #16]
   1e5a2:	699b      	ldr	r3, [r3, #24]
   1e5a4:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
   1e5a8:	d01a      	beq.n	1e5e0 <virtqueue_kick+0x4a>
#ifndef VIRTIO_DEVICE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   1e5aa:	b97b      	cbnz	r3, 1e5cc <virtqueue_kick+0x36>
			/* CACHE: no need to invalidate avail */
			new_idx = vq->vq_ring.avail->idx;
   1e5ac:	69c3      	ldr	r3, [r0, #28]
			prev_idx = new_idx - vq->vq_queued_cnt;
			VRING_INVALIDATE(vring_avail_event(&vq->vq_ring));
			event_idx = vring_avail_event(&vq->vq_ring);
   1e5ae:	6a02      	ldr	r2, [r0, #32]
			new_idx = vq->vq_ring.avail->idx;
   1e5b0:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_avail_event(&vq->vq_ring);
   1e5b2:	6941      	ldr	r1, [r0, #20]
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
	return (uint16_t)(new_idx - event_idx - 1) <
   1e5b4:	3b01      	subs	r3, #1
   1e5b6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
			/* CACHE: no need to invalidate used */
			new_idx = vq->vq_ring.used->idx;
			prev_idx = new_idx - vq->vq_queued_cnt;
			VRING_INVALIDATE(vring_used_event(&vq->vq_ring));
			event_idx = vring_used_event(&vq->vq_ring);
   1e5ba:	8892      	ldrh	r2, [r2, #4]
   1e5bc:	1a9b      	subs	r3, r3, r2
	if (vq_ring_must_notify(vq))
   1e5be:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   1e5c0:	b29b      	uxth	r3, r3
   1e5c2:	429a      	cmp	r2, r3
   1e5c4:	d814      	bhi.n	1e5f0 <virtqueue_kick+0x5a>
	vq->vq_queued_cnt = 0;
   1e5c6:	2300      	movs	r3, #0
   1e5c8:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   1e5ca:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   1e5cc:	2b01      	cmp	r3, #1
   1e5ce:	d1fa      	bne.n	1e5c6 <virtqueue_kick+0x30>
			new_idx = vq->vq_ring.used->idx;
   1e5d0:	6a03      	ldr	r3, [r0, #32]
			event_idx = vring_used_event(&vq->vq_ring);
   1e5d2:	69c2      	ldr	r2, [r0, #28]
			new_idx = vq->vq_ring.used->idx;
   1e5d4:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_used_event(&vq->vq_ring);
   1e5d6:	6941      	ldr	r1, [r0, #20]
   1e5d8:	3b01      	subs	r3, #1
   1e5da:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   1e5de:	e7ec      	b.n	1e5ba <virtqueue_kick+0x24>
						prev_idx) != 0;
		}
#endif /*VIRTIO_DRIVER_ONLY*/
	} else {
#ifndef VIRTIO_DEVICE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   1e5e0:	b963      	cbnz	r3, 1e5fc <virtqueue_kick+0x66>
			VRING_INVALIDATE(vq->vq_ring.used->flags);
			return (vq->vq_ring.used->flags &
   1e5e2:	6a03      	ldr	r3, [r0, #32]
		}
#endif /*VIRTIO_DEVICE_ONLY*/
#ifndef VIRTIO_DRIVER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
			VRING_INVALIDATE(vq->vq_ring.avail->flags);
			return (vq->vq_ring.avail->flags &
   1e5e4:	881b      	ldrh	r3, [r3, #0]
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
   1e5e6:	43db      	mvns	r3, r3
   1e5e8:	f003 0301 	and.w	r3, r3, #1
	if (vq_ring_must_notify(vq))
   1e5ec:	2b00      	cmp	r3, #0
   1e5ee:	d0ea      	beq.n	1e5c6 <virtqueue_kick+0x30>
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
	if (vq->notify)
   1e5f0:	6923      	ldr	r3, [r4, #16]
   1e5f2:	2b00      	cmp	r3, #0
   1e5f4:	d0e7      	beq.n	1e5c6 <virtqueue_kick+0x30>
		vq->notify(vq);
   1e5f6:	4620      	mov	r0, r4
   1e5f8:	4798      	blx	r3
   1e5fa:	e7e4      	b.n	1e5c6 <virtqueue_kick+0x30>
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   1e5fc:	2b01      	cmp	r3, #1
   1e5fe:	d1e2      	bne.n	1e5c6 <virtqueue_kick+0x30>
			return (vq->vq_ring.avail->flags &
   1e600:	69c3      	ldr	r3, [r0, #28]
   1e602:	e7ef      	b.n	1e5e4 <virtqueue_kick+0x4e>

0001e604 <virtqueue_get_desc_size>:
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1e604:	69c3      	ldr	r3, [r0, #28]
   1e606:	8e02      	ldrh	r2, [r0, #48]	; 0x30
   1e608:	8859      	ldrh	r1, [r3, #2]
   1e60a:	4291      	cmp	r1, r2
   1e60c:	d00a      	beq.n	1e624 <virtqueue_get_desc_size+0x20>
	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
   1e60e:	8941      	ldrh	r1, [r0, #10]
   1e610:	3901      	subs	r1, #1
	avail_idx = vq->vq_ring.avail->ring[head_idx];
   1e612:	400a      	ands	r2, r1
   1e614:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	len = vq->vq_ring.desc[avail_idx].len;
   1e618:	889a      	ldrh	r2, [r3, #4]
   1e61a:	6983      	ldr	r3, [r0, #24]
   1e61c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   1e620:	6898      	ldr	r0, [r3, #8]
	return len;
   1e622:	4770      	bx	lr
		return 0;
   1e624:	2000      	movs	r0, #0
}
   1e626:	4770      	bx	lr

0001e628 <virtqueue_notification>:
	atomic_thread_fence(memory_order_seq_cst);
   1e628:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
   1e62c:	68c3      	ldr	r3, [r0, #12]
   1e62e:	b103      	cbz	r3, 1e632 <virtqueue_notification+0xa>
		vq->callback(vq);
   1e630:	4718      	bx	r3
}
   1e632:	4770      	bx	lr

0001e634 <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   1e634:	f04f 32ff 	mov.w	r2, #4294967295
   1e638:	f04f 33ff 	mov.w	r3, #4294967295
   1e63c:	f7fa bb20 	b.w	18c80 <z_impl_k_sem_take>

0001e640 <rpmsg_unregister_endpoint>:
{
   1e640:	b570      	push	{r4, r5, r6, lr}
   1e642:	4604      	mov	r4, r0
	struct rpmsg_device *rdev = ept->rdev;
   1e644:	6a05      	ldr	r5, [r0, #32]
	metal_mutex_acquire(&rdev->lock);
   1e646:	f105 0658 	add.w	r6, r5, #88	; 0x58
   1e64a:	4630      	mov	r0, r6
   1e64c:	f7ff fff2 	bl	1e634 <__metal_mutex_acquire>
	if (ept->addr != RPMSG_ADDR_ANY)
   1e650:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e652:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
   1e656:	2b7f      	cmp	r3, #127	; 0x7f
   1e658:	d80b      	bhi.n	1e672 <rpmsg_unregister_endpoint+0x32>
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   1e65a:	2201      	movs	r2, #1
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   1e65c:	0959      	lsrs	r1, r3, #5
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
   1e65e:	3548      	adds	r5, #72	; 0x48
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   1e660:	f003 031f 	and.w	r3, r3, #31
   1e664:	409a      	lsls	r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   1e666:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
   1e66a:	ea23 0302 	bic.w	r3, r3, r2
   1e66e:	f845 3021 	str.w	r3, [r5, r1, lsl #2]
	node->next->prev = node->prev;
   1e672:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	; 0x34
   1e676:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   1e678:	6b61      	ldr	r1, [r4, #52]	; 0x34
	metal_list_del(&ept->node);
   1e67a:	f104 0334 	add.w	r3, r4, #52	; 0x34
   1e67e:	6011      	str	r1, [r2, #0]
	node->next = node;
   1e680:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
	ept->rdev = NULL;
   1e684:	2300      	movs	r3, #0
   1e686:	6223      	str	r3, [r4, #32]
	z_impl_k_sem_give(sem);
   1e688:	4630      	mov	r0, r6
}
   1e68a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1e68e:	f7fa bad1 	b.w	18c34 <z_impl_k_sem_give>

0001e692 <rpmsg_send_ns_message>:
{
   1e692:	b510      	push	{r4, lr}
   1e694:	b08c      	sub	sp, #48	; 0x30
	ns_msg.addr = ept->addr;
   1e696:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
   1e698:	4604      	mov	r4, r0
	ns_msg.flags = flags;
   1e69a:	910b      	str	r1, [sp, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   1e69c:	2220      	movs	r2, #32
   1e69e:	4601      	mov	r1, r0
   1e6a0:	a802      	add	r0, sp, #8
	ns_msg.addr = ept->addr;
   1e6a2:	930a      	str	r3, [sp, #40]	; 0x28
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   1e6a4:	f7fd f8c2 	bl	1b82c <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
   1e6a8:	2328      	movs	r3, #40	; 0x28
   1e6aa:	2201      	movs	r2, #1
   1e6ac:	e9cd 3200 	strd	r3, r2, [sp]
   1e6b0:	4620      	mov	r0, r4
   1e6b2:	2235      	movs	r2, #53	; 0x35
   1e6b4:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1e6b6:	ab02      	add	r3, sp, #8
   1e6b8:	f7f9 fd00 	bl	180bc <rpmsg_send_offchannel_raw>
}
   1e6bc:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   1e6c0:	b00c      	add	sp, #48	; 0x30
   1e6c2:	bd10      	pop	{r4, pc}

0001e6c4 <rpmsg_hold_rx_buffer>:
	if (!ept || !ept->rdev || !rxbuf)
   1e6c4:	b128      	cbz	r0, 1e6d2 <rpmsg_hold_rx_buffer+0xe>
   1e6c6:	6a00      	ldr	r0, [r0, #32]
   1e6c8:	b118      	cbz	r0, 1e6d2 <rpmsg_hold_rx_buffer+0xe>
   1e6ca:	b111      	cbz	r1, 1e6d2 <rpmsg_hold_rx_buffer+0xe>
	if (rdev->ops.hold_rx_buffer)
   1e6cc:	6f83      	ldr	r3, [r0, #120]	; 0x78
   1e6ce:	b103      	cbz	r3, 1e6d2 <rpmsg_hold_rx_buffer+0xe>
		rdev->ops.hold_rx_buffer(rdev, rxbuf);
   1e6d0:	4718      	bx	r3
}
   1e6d2:	4770      	bx	lr

0001e6d4 <rpmsg_release_rx_buffer>:
	if (!ept || !ept->rdev || !rxbuf)
   1e6d4:	b128      	cbz	r0, 1e6e2 <rpmsg_release_rx_buffer+0xe>
   1e6d6:	6a00      	ldr	r0, [r0, #32]
   1e6d8:	b118      	cbz	r0, 1e6e2 <rpmsg_release_rx_buffer+0xe>
   1e6da:	b111      	cbz	r1, 1e6e2 <rpmsg_release_rx_buffer+0xe>
	if (rdev->ops.release_rx_buffer)
   1e6dc:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
   1e6de:	b103      	cbz	r3, 1e6e2 <rpmsg_release_rx_buffer+0xe>
		rdev->ops.release_rx_buffer(rdev, rxbuf);
   1e6e0:	4718      	bx	r3
}
   1e6e2:	4770      	bx	lr

0001e6e4 <rpmsg_get_tx_payload_buffer>:
	if (!ept || !ept->rdev || !len)
   1e6e4:	b130      	cbz	r0, 1e6f4 <rpmsg_get_tx_payload_buffer+0x10>
   1e6e6:	6a00      	ldr	r0, [r0, #32]
   1e6e8:	b120      	cbz	r0, 1e6f4 <rpmsg_get_tx_payload_buffer+0x10>
   1e6ea:	b119      	cbz	r1, 1e6f4 <rpmsg_get_tx_payload_buffer+0x10>
	if (rdev->ops.get_tx_payload_buffer)
   1e6ec:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
   1e6f0:	b103      	cbz	r3, 1e6f4 <rpmsg_get_tx_payload_buffer+0x10>
		return rdev->ops.get_tx_payload_buffer(rdev, len, wait);
   1e6f2:	4718      	bx	r3
}
   1e6f4:	2000      	movs	r0, #0
   1e6f6:	4770      	bx	lr

0001e6f8 <rpmsg_get_endpoint>:
{
   1e6f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e6fc:	4606      	mov	r6, r0
   1e6fe:	4688      	mov	r8, r1
   1e700:	4617      	mov	r7, r2
   1e702:	4699      	mov	r9, r3
	metal_list_for_each(&rdev->endpoints, node) {
   1e704:	6804      	ldr	r4, [r0, #0]
   1e706:	42a6      	cmp	r6, r4
   1e708:	d101      	bne.n	1e70e <rpmsg_get_endpoint+0x16>
	return NULL;
   1e70a:	2500      	movs	r5, #0
   1e70c:	e023      	b.n	1e756 <rpmsg_get_endpoint+0x5e>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   1e70e:	1c7a      	adds	r2, r7, #1
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   1e710:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   1e714:	d002      	beq.n	1e71c <rpmsg_get_endpoint+0x24>
   1e716:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1e718:	42bb      	cmp	r3, r7
   1e71a:	d01c      	beq.n	1e756 <rpmsg_get_endpoint+0x5e>
		if (name)
   1e71c:	f1b8 0f00 	cmp.w	r8, #0
   1e720:	d101      	bne.n	1e726 <rpmsg_get_endpoint+0x2e>
	metal_list_for_each(&rdev->endpoints, node) {
   1e722:	6824      	ldr	r4, [r4, #0]
   1e724:	e7ef      	b.n	1e706 <rpmsg_get_endpoint+0xe>
			name_match = !strncmp(ept->name, name,
   1e726:	2220      	movs	r2, #32
   1e728:	4641      	mov	r1, r8
   1e72a:	4628      	mov	r0, r5
   1e72c:	f7fd f8ae 	bl	1b88c <strncmp>
		if (!name || !name_match)
   1e730:	2800      	cmp	r0, #0
   1e732:	d1f6      	bne.n	1e722 <rpmsg_get_endpoint+0x2a>
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
   1e734:	f1b9 3fff 	cmp.w	r9, #4294967295
   1e738:	d002      	beq.n	1e740 <rpmsg_get_endpoint+0x48>
   1e73a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1e73c:	454b      	cmp	r3, r9
   1e73e:	d00a      	beq.n	1e756 <rpmsg_get_endpoint+0x5e>
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   1e740:	1c7b      	adds	r3, r7, #1
   1e742:	d00b      	beq.n	1e75c <rpmsg_get_endpoint+0x64>
	metal_list_for_each(&rdev->endpoints, node) {
   1e744:	6824      	ldr	r4, [r4, #0]
   1e746:	42b4      	cmp	r4, r6
   1e748:	d0df      	beq.n	1e70a <rpmsg_get_endpoint+0x12>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   1e74a:	f854 3c10 	ldr.w	r3, [r4, #-16]
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   1e74e:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   1e752:	429f      	cmp	r7, r3
   1e754:	d1e7      	bne.n	1e726 <rpmsg_get_endpoint+0x2e>
}
   1e756:	4628      	mov	r0, r5
   1e758:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   1e75c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1e75e:	3301      	adds	r3, #1
   1e760:	d0f9      	beq.n	1e756 <rpmsg_get_endpoint+0x5e>
	metal_list_for_each(&rdev->endpoints, node) {
   1e762:	6824      	ldr	r4, [r4, #0]
   1e764:	42b4      	cmp	r4, r6
   1e766:	d0d0      	beq.n	1e70a <rpmsg_get_endpoint+0x12>
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   1e768:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   1e76c:	e7d6      	b.n	1e71c <rpmsg_get_endpoint+0x24>

0001e76e <rpmsg_destroy_ept>:
 *
 * @param ept - pointer to endpoint to destroy
 *
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
   1e76e:	b510      	push	{r4, lr}
	struct rpmsg_device *rdev;

	if (!ept)
   1e770:	4604      	mov	r4, r0
   1e772:	b190      	cbz	r0, 1e79a <rpmsg_destroy_ept+0x2c>
		return;

	rdev = ept->rdev;
   1e774:	6a03      	ldr	r3, [r0, #32]
	if (!rdev)
   1e776:	b183      	cbz	r3, 1e79a <rpmsg_destroy_ept+0x2c>
		return;

	if (ept->name[0] && rdev->support_ns &&
   1e778:	7802      	ldrb	r2, [r0, #0]
   1e77a:	b14a      	cbz	r2, 1e790 <rpmsg_destroy_ept+0x22>
   1e77c:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
   1e780:	b133      	cbz	r3, 1e790 <rpmsg_destroy_ept+0x22>
   1e782:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1e784:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1e788:	d302      	bcc.n	1e790 <rpmsg_destroy_ept+0x22>
	    ept->addr >= RPMSG_RESERVED_ADDRESSES)
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
   1e78a:	2101      	movs	r1, #1
   1e78c:	f7ff ff81 	bl	1e692 <rpmsg_send_ns_message>
	rpmsg_unregister_endpoint(ept);
   1e790:	4620      	mov	r0, r4
}
   1e792:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rpmsg_unregister_endpoint(ept);
   1e796:	f7ff bf53 	b.w	1e640 <rpmsg_unregister_endpoint>
}
   1e79a:	bd10      	pop	{r4, pc}

0001e79c <rpmsg_virtio_hold_rx_buffer>:
	rp_hdr->reserved |= RPMSG_BUF_HELD;
   1e79c:	f851 3c08 	ldr.w	r3, [r1, #-8]
   1e7a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1e7a4:	f841 3c08 	str.w	r3, [r1, #-8]
}
   1e7a8:	4770      	bx	lr

0001e7aa <rpmsg_virtio_tx_callback>:
}
   1e7aa:	4770      	bx	lr

0001e7ac <k_sem_give>:
   1e7ac:	f7fa ba42 	b.w	18c34 <z_impl_k_sem_give>

0001e7b0 <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   1e7b0:	f04f 32ff 	mov.w	r2, #4294967295
   1e7b4:	f04f 33ff 	mov.w	r3, #4294967295
   1e7b8:	f7fa ba62 	b.w	18c80 <z_impl_k_sem_take>

0001e7bc <rpmsg_virtio_ns_callback>:
{
   1e7bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct rpmsg_device *rdev = ept->rdev;
   1e7c0:	6a06      	ldr	r6, [r0, #32]
	if (len != sizeof(*ns_msg))
   1e7c2:	2a28      	cmp	r2, #40	; 0x28
{
   1e7c4:	460f      	mov	r7, r1
	struct metal_io_region *io = rvdev->shbuf_io;
   1e7c6:	f8d6 00a0 	ldr.w	r0, [r6, #160]	; 0xa0
{
   1e7ca:	b088      	sub	sp, #32
	if (len != sizeof(*ns_msg))
   1e7cc:	d12b      	bne.n	1e826 <rpmsg_virtio_ns_callback+0x6a>
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   1e7ce:	6801      	ldr	r1, [r0, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   1e7d0:	6884      	ldr	r4, [r0, #8]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   1e7d2:	1a79      	subs	r1, r7, r1
	metal_io_block_read(io,
   1e7d4:	42a1      	cmp	r1, r4
   1e7d6:	bf28      	it	cs
   1e7d8:	f04f 31ff 	movcs.w	r1, #4294967295
   1e7dc:	2320      	movs	r3, #32
   1e7de:	466a      	mov	r2, sp
   1e7e0:	f7ff fcca 	bl	1e178 <metal_io_block_read>
	metal_mutex_acquire(&rdev->lock);
   1e7e4:	f106 0558 	add.w	r5, r6, #88	; 0x58
	dest = ns_msg->addr;
   1e7e8:	f8d7 8020 	ldr.w	r8, [r7, #32]
   1e7ec:	4628      	mov	r0, r5
   1e7ee:	f7ff ffdf 	bl	1e7b0 <__metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   1e7f2:	4643      	mov	r3, r8
   1e7f4:	f04f 32ff 	mov.w	r2, #4294967295
   1e7f8:	4669      	mov	r1, sp
   1e7fa:	4630      	mov	r0, r6
   1e7fc:	f7ff ff7c 	bl	1e6f8 <rpmsg_get_endpoint>
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   1e800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   1e802:	4604      	mov	r4, r0
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   1e804:	07db      	lsls	r3, r3, #31
   1e806:	d512      	bpl.n	1e82e <rpmsg_virtio_ns_callback+0x72>
		if (_ept)
   1e808:	b918      	cbnz	r0, 1e812 <rpmsg_virtio_ns_callback+0x56>
   1e80a:	4628      	mov	r0, r5
   1e80c:	f7ff ffce 	bl	1e7ac <k_sem_give>
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
	__metal_mutex_release(mutex);
}
   1e810:	e009      	b.n	1e826 <rpmsg_virtio_ns_callback+0x6a>
			_ept->dest_addr = RPMSG_ADDR_ANY;
   1e812:	f04f 33ff 	mov.w	r3, #4294967295
   1e816:	6283      	str	r3, [r0, #40]	; 0x28
   1e818:	4628      	mov	r0, r5
   1e81a:	f7ff ffc7 	bl	1e7ac <k_sem_give>
		if (_ept && _ept->ns_unbind_cb)
   1e81e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1e820:	b10b      	cbz	r3, 1e826 <rpmsg_virtio_ns_callback+0x6a>
			_ept->ns_unbind_cb(_ept);
   1e822:	4620      	mov	r0, r4
   1e824:	4798      	blx	r3
}
   1e826:	2000      	movs	r0, #0
   1e828:	b008      	add	sp, #32
   1e82a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!_ept) {
   1e82e:	b950      	cbnz	r0, 1e846 <rpmsg_virtio_ns_callback+0x8a>
   1e830:	4628      	mov	r0, r5
   1e832:	f7ff ffbb 	bl	1e7ac <k_sem_give>
			if (rdev->ns_bind_cb)
   1e836:	6f33      	ldr	r3, [r6, #112]	; 0x70
   1e838:	2b00      	cmp	r3, #0
   1e83a:	d0f4      	beq.n	1e826 <rpmsg_virtio_ns_callback+0x6a>
				rdev->ns_bind_cb(rdev, name, dest);
   1e83c:	4642      	mov	r2, r8
   1e83e:	4669      	mov	r1, sp
   1e840:	4630      	mov	r0, r6
   1e842:	4798      	blx	r3
   1e844:	e7ef      	b.n	1e826 <rpmsg_virtio_ns_callback+0x6a>
			_ept->dest_addr = dest;
   1e846:	f8c0 8028 	str.w	r8, [r0, #40]	; 0x28
   1e84a:	e7de      	b.n	1e80a <rpmsg_virtio_ns_callback+0x4e>

0001e84c <rpmsg_virtio_get_rx_buffer>:
{
   1e84c:	b430      	push	{r4, r5}
	return rvdev->vdev->role;
   1e84e:	f8d0 5094 	ldr.w	r5, [r0, #148]	; 0x94
   1e852:	4613      	mov	r3, r2
   1e854:	69ad      	ldr	r5, [r5, #24]
	if (role == RPMSG_HOST) {
   1e856:	b925      	cbnz	r5, 1e862 <rpmsg_virtio_get_rx_buffer+0x16>
}
   1e858:	bc30      	pop	{r4, r5}
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
   1e85a:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
   1e85e:	f7ff bdd9 	b.w	1e414 <virtqueue_get_buffer>
	if (role == RPMSG_REMOTE) {
   1e862:	2d01      	cmp	r5, #1
   1e864:	d106      	bne.n	1e874 <rpmsg_virtio_get_rx_buffer+0x28>
}
   1e866:	bc30      	pop	{r4, r5}
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
   1e868:	460a      	mov	r2, r1
   1e86a:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
   1e86e:	4619      	mov	r1, r3
   1e870:	f7ff be0f 	b.w	1e492 <virtqueue_get_available_buffer>
}
   1e874:	2000      	movs	r0, #0
   1e876:	bc30      	pop	{r4, r5}
   1e878:	4770      	bx	lr

0001e87a <rpmsg_virtio_return_buffer>:
{
   1e87a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1e87c:	460c      	mov	r4, r1
   1e87e:	4619      	mov	r1, r3
   1e880:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   1e884:	699d      	ldr	r5, [r3, #24]
	if (role == RPMSG_HOST) {
   1e886:	b95d      	cbnz	r5, 1e8a0 <rpmsg_virtio_return_buffer+0x26>
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   1e888:	9400      	str	r4, [sp, #0]
		vqbuf.len = len;
   1e88a:	e9cd 4202 	strd	r4, r2, [sp, #8]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   1e88e:	2301      	movs	r3, #1
   1e890:	462a      	mov	r2, r5
   1e892:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
   1e896:	a902      	add	r1, sp, #8
   1e898:	f7ff fd60 	bl	1e35c <virtqueue_add_buffer>
}
   1e89c:	b004      	add	sp, #16
   1e89e:	bd70      	pop	{r4, r5, r6, pc}
	if (role == RPMSG_REMOTE) {
   1e8a0:	2d01      	cmp	r5, #1
   1e8a2:	d1fb      	bne.n	1e89c <rpmsg_virtio_return_buffer+0x22>
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   1e8a4:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
}
   1e8a8:	b004      	add	sp, #16
   1e8aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   1e8ae:	f7f9 bbe9 	b.w	18084 <virtqueue_add_consumed_buffer>

0001e8b2 <rpmsg_virtio_rx_callback>:
{
   1e8b2:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   1e8b6:	6803      	ldr	r3, [r0, #0]
   1e8b8:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	metal_mutex_acquire(&rdev->lock);
   1e8ba:	f107 0658 	add.w	r6, r7, #88	; 0x58
	__metal_mutex_acquire(mutex);
   1e8be:	4630      	mov	r0, r6
   1e8c0:	f7ff ff76 	bl	1e7b0 <__metal_mutex_acquire>
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   1e8c4:	4638      	mov	r0, r7
   1e8c6:	f10d 020a 	add.w	r2, sp, #10
   1e8ca:	a903      	add	r1, sp, #12
   1e8cc:	f7ff ffbe 	bl	1e84c <rpmsg_virtio_get_rx_buffer>
   1e8d0:	4604      	mov	r4, r0
   1e8d2:	4630      	mov	r0, r6
   1e8d4:	f7ff ff6a 	bl	1e7ac <k_sem_give>
	while (rp_hdr) {
   1e8d8:	2c00      	cmp	r4, #0
   1e8da:	d041      	beq.n	1e960 <rpmsg_virtio_rx_callback+0xae>
		rp_hdr->reserved = idx;
   1e8dc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1e8e0:	4630      	mov	r0, r6
   1e8e2:	60a3      	str	r3, [r4, #8]
   1e8e4:	f7ff ff64 	bl	1e7b0 <__metal_mutex_acquire>
			     rpmsg_ns_unbind_cb ns_unbind_cb);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
   1e8e8:	f04f 33ff 	mov.w	r3, #4294967295
   1e8ec:	2100      	movs	r1, #0
   1e8ee:	4638      	mov	r0, r7
   1e8f0:	6862      	ldr	r2, [r4, #4]
   1e8f2:	f7ff ff01 	bl	1e6f8 <rpmsg_get_endpoint>
   1e8f6:	4605      	mov	r5, r0
   1e8f8:	4630      	mov	r0, r6
   1e8fa:	f7ff ff57 	bl	1e7ac <k_sem_give>
		if (ept) {
   1e8fe:	b17d      	cbz	r5, 1e920 <rpmsg_virtio_rx_callback+0x6e>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   1e900:	6aab      	ldr	r3, [r5, #40]	; 0x28
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   1e902:	6be9      	ldr	r1, [r5, #60]	; 0x3c
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   1e904:	3301      	adds	r3, #1
				ept->dest_addr = rp_hdr->src;
   1e906:	bf08      	it	eq
   1e908:	6823      	ldreq	r3, [r4, #0]
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   1e90a:	4628      	mov	r0, r5
				ept->dest_addr = rp_hdr->src;
   1e90c:	bf08      	it	eq
   1e90e:	62ab      	streq	r3, [r5, #40]	; 0x28
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   1e910:	6823      	ldr	r3, [r4, #0]
   1e912:	89a2      	ldrh	r2, [r4, #12]
   1e914:	9100      	str	r1, [sp, #0]
   1e916:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
   1e91a:	f104 0110 	add.w	r1, r4, #16
   1e91e:	47c0      	blx	r8
   1e920:	4630      	mov	r0, r6
   1e922:	f7ff ff45 	bl	1e7b0 <__metal_mutex_acquire>
		if (!(rp_hdr->reserved & RPMSG_BUF_HELD)) {
   1e926:	68a3      	ldr	r3, [r4, #8]
   1e928:	2b00      	cmp	r3, #0
   1e92a:	db06      	blt.n	1e93a <rpmsg_virtio_rx_callback+0x88>
			rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   1e92c:	4621      	mov	r1, r4
   1e92e:	4638      	mov	r0, r7
   1e930:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1e934:	9a03      	ldr	r2, [sp, #12]
   1e936:	f7ff ffa0 	bl	1e87a <rpmsg_virtio_return_buffer>
		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   1e93a:	4638      	mov	r0, r7
   1e93c:	f10d 020a 	add.w	r2, sp, #10
   1e940:	a903      	add	r1, sp, #12
   1e942:	f7ff ff83 	bl	1e84c <rpmsg_virtio_get_rx_buffer>
		if (!rp_hdr) {
   1e946:	4604      	mov	r4, r0
   1e948:	b118      	cbz	r0, 1e952 <rpmsg_virtio_rx_callback+0xa0>
   1e94a:	4630      	mov	r0, r6
   1e94c:	f7ff ff2e 	bl	1e7ac <k_sem_give>
	while (rp_hdr) {
   1e950:	e7c4      	b.n	1e8dc <rpmsg_virtio_rx_callback+0x2a>
			virtqueue_kick(rvdev->rvq);
   1e952:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
   1e956:	f7ff fe1e 	bl	1e596 <virtqueue_kick>
   1e95a:	4630      	mov	r0, r6
   1e95c:	f7ff ff26 	bl	1e7ac <k_sem_give>
}
   1e960:	b004      	add	sp, #16
   1e962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001e966 <rpmsg_virtio_release_rx_buffer>:
{
   1e966:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e968:	4604      	mov	r4, r0
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
   1e96a:	f851 6c08 	ldr.w	r6, [r1, #-8]
	metal_mutex_acquire(&rdev->lock);
   1e96e:	f100 0758 	add.w	r7, r0, #88	; 0x58
   1e972:	4638      	mov	r0, r7
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
   1e974:	b2b6      	uxth	r6, r6
{
   1e976:	460d      	mov	r5, r1
   1e978:	f7ff ff1a 	bl	1e7b0 <__metal_mutex_acquire>
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
   1e97c:	4631      	mov	r1, r6
   1e97e:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   1e982:	f7ff fd81 	bl	1e488 <virtqueue_get_buffer_length>
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   1e986:	4633      	mov	r3, r6
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
   1e988:	4602      	mov	r2, r0
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   1e98a:	f1a5 0110 	sub.w	r1, r5, #16
   1e98e:	4620      	mov	r0, r4
   1e990:	f7ff ff73 	bl	1e87a <rpmsg_virtio_return_buffer>
   1e994:	4638      	mov	r0, r7
}
   1e996:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1e99a:	f7ff bf07 	b.w	1e7ac <k_sem_give>

0001e99e <rpmsg_virtio_send_offchannel_nocopy>:
{
   1e99e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	hdr = RPMSG_LOCATE_HDR(data);
   1e9a2:	f1a3 0610 	sub.w	r6, r3, #16
	idx = hdr->reserved;
   1e9a6:	f853 5c08 	ldr.w	r5, [r3, #-8]
	rp_hdr.reserved = 0;
   1e9aa:	2300      	movs	r3, #0
{
   1e9ac:	b088      	sub	sp, #32
	rp_hdr.reserved = 0;
   1e9ae:	9306      	str	r3, [sp, #24]
	rp_hdr.flags = 0;
   1e9b0:	f8ad 301e 	strh.w	r3, [sp, #30]
{
   1e9b4:	4604      	mov	r4, r0
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
   1e9b6:	2310      	movs	r3, #16
	rp_hdr.src = src;
   1e9b8:	e9cd 1204 	strd	r1, r2, [sp, #16]
{
   1e9bc:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	io = rvdev->shbuf_io;
   1e9be:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
	rp_hdr.len = len;
   1e9c2:	f8ad 701c 	strh.w	r7, [sp, #28]
   1e9c6:	6801      	ldr	r1, [r0, #0]
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
   1e9c8:	f8d0 c008 	ldr.w	ip, [r0, #8]
   1e9cc:	1a71      	subs	r1, r6, r1
   1e9ce:	eb0d 0203 	add.w	r2, sp, r3
   1e9d2:	4561      	cmp	r1, ip
   1e9d4:	bf28      	it	cs
   1e9d6:	f04f 31ff 	movcs.w	r1, #4294967295
	metal_mutex_acquire(&rdev->lock);
   1e9da:	f104 0858 	add.w	r8, r4, #88	; 0x58
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
   1e9de:	f7ff fc04 	bl	1e1ea <metal_io_block_write>
   1e9e2:	4640      	mov	r0, r8
   1e9e4:	f7ff fee4 	bl	1e7b0 <__metal_mutex_acquire>
   1e9e8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
	idx = hdr->reserved;
   1e9ec:	b2ad      	uxth	r5, r5
	if (rpmsg_virtio_get_role(rvdev) == RPMSG_HOST)
   1e9ee:	699b      	ldr	r3, [r3, #24]
   1e9f0:	b9cb      	cbnz	r3, 1ea26 <rpmsg_virtio_send_offchannel_nocopy+0x88>
		buff_len = rvdev->config.h2r_buf_size;
   1e9f2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   1e9f6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   1e9fa:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   1e9fe:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_HOST) {
   1ea00:	b9c3      	cbnz	r3, 1ea34 <rpmsg_virtio_send_offchannel_nocopy+0x96>
		vqbuf.len = len;
   1ea02:	e9cd 6202 	strd	r6, r2, [sp, #8]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   1ea06:	9600      	str	r6, [sp, #0]
   1ea08:	2201      	movs	r2, #1
   1ea0a:	a902      	add	r1, sp, #8
   1ea0c:	f7ff fca6 	bl	1e35c <virtqueue_add_buffer>
	virtqueue_kick(rvdev->svq);
   1ea10:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   1ea14:	f7ff fdbf 	bl	1e596 <virtqueue_kick>
   1ea18:	4640      	mov	r0, r8
   1ea1a:	f7ff fec7 	bl	1e7ac <k_sem_give>
}
   1ea1e:	4638      	mov	r0, r7
   1ea20:	b008      	add	sp, #32
   1ea22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);
   1ea26:	4629      	mov	r1, r5
   1ea28:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   1ea2c:	f7ff fd2c 	bl	1e488 <virtqueue_get_buffer_length>
   1ea30:	4602      	mov	r2, r0
   1ea32:	e7e0      	b.n	1e9f6 <rpmsg_virtio_send_offchannel_nocopy+0x58>
	if (role == RPMSG_REMOTE) {
   1ea34:	2b01      	cmp	r3, #1
   1ea36:	d1eb      	bne.n	1ea10 <rpmsg_virtio_send_offchannel_nocopy+0x72>
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
   1ea38:	4629      	mov	r1, r5
   1ea3a:	f7f9 fb23 	bl	18084 <virtqueue_add_consumed_buffer>
   1ea3e:	e7e7      	b.n	1ea10 <rpmsg_virtio_send_offchannel_nocopy+0x72>

0001ea40 <rpmsg_virtio_shm_pool_get_buffer>:
{
   1ea40:	4603      	mov	r3, r0
   1ea42:	b510      	push	{r4, lr}
	if (shpool->avail < size)
   1ea44:	6842      	ldr	r2, [r0, #4]
   1ea46:	428a      	cmp	r2, r1
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   1ea48:	bf29      	itett	cs
   1ea4a:	6880      	ldrcs	r0, [r0, #8]
		return NULL;
   1ea4c:	2000      	movcc	r0, #0
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   1ea4e:	1a84      	subcs	r4, r0, r2
   1ea50:	6818      	ldrcs	r0, [r3, #0]
	shpool->avail -= size;
   1ea52:	bf22      	ittt	cs
   1ea54:	1a52      	subcs	r2, r2, r1
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   1ea56:	1900      	addcs	r0, r0, r4
	shpool->avail -= size;
   1ea58:	605a      	strcs	r2, [r3, #4]
}
   1ea5a:	bd10      	pop	{r4, pc}

0001ea5c <rpmsg_virtio_get_tx_payload_buffer>:
{
   1ea5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1ea60:	4605      	mov	r5, r0
   1ea62:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
   1ea66:	460f      	mov	r7, r1
	return rvdev->vdev->func->get_status(rvdev->vdev);
   1ea68:	6a03      	ldr	r3, [r0, #32]
   1ea6a:	4616      	mov	r6, r2
   1ea6c:	681b      	ldr	r3, [r3, #0]
   1ea6e:	4798      	blx	r3
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK))
   1ea70:	0743      	lsls	r3, r0, #29
   1ea72:	d403      	bmi.n	1ea7c <rpmsg_virtio_get_tx_payload_buffer+0x20>
		return NULL;
   1ea74:	2000      	movs	r0, #0
}
   1ea76:	b003      	add	sp, #12
   1ea78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
   1ea7c:	f643 2398 	movw	r3, #15000	; 0x3a98
   1ea80:	2e00      	cmp	r6, #0
   1ea82:	bf18      	it	ne
   1ea84:	461e      	movne	r6, r3
		metal_mutex_acquire(&rdev->lock);
   1ea86:	f105 0858 	add.w	r8, r5, #88	; 0x58
   1ea8a:	4640      	mov	r0, r8
   1ea8c:	f7ff fe90 	bl	1e7b0 <__metal_mutex_acquire>
	return rvdev->vdev->role;
   1ea90:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
   1ea94:	f8d3 9018 	ldr.w	r9, [r3, #24]
	if (role == RPMSG_HOST) {
   1ea98:	f1b9 0f00 	cmp.w	r9, #0
   1ea9c:	d135      	bne.n	1eb0a <rpmsg_virtio_get_tx_payload_buffer+0xae>
		data = virtqueue_get_buffer(rvdev->svq, len, idx);
   1ea9e:	4639      	mov	r1, r7
   1eaa0:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
   1eaa4:	f10d 0206 	add.w	r2, sp, #6
   1eaa8:	f7ff fcb4 	bl	1e414 <virtqueue_get_buffer>
		if (!data && rvdev->svq->vq_free_cnt) {
   1eaac:	4604      	mov	r4, r0
   1eaae:	b158      	cbz	r0, 1eac8 <rpmsg_virtio_get_tx_payload_buffer+0x6c>
   1eab0:	4640      	mov	r0, r8
   1eab2:	f7ff fe7b 	bl	1e7ac <k_sem_give>
	rp_hdr->reserved = idx;
   1eab6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	return RPMSG_LOCATE_DATA(rp_hdr);
   1eaba:	f104 0010 	add.w	r0, r4, #16
	rp_hdr->reserved = idx;
   1eabe:	60a3      	str	r3, [r4, #8]
	*len -= sizeof(struct rpmsg_hdr);
   1eac0:	683b      	ldr	r3, [r7, #0]
   1eac2:	3b10      	subs	r3, #16
   1eac4:	603b      	str	r3, [r7, #0]
	return RPMSG_LOCATE_DATA(rp_hdr);
   1eac6:	e7d6      	b.n	1ea76 <rpmsg_virtio_get_tx_payload_buffer+0x1a>
		if (!data && rvdev->svq->vq_free_cnt) {
   1eac8:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
   1eacc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   1eace:	b953      	cbnz	r3, 1eae6 <rpmsg_virtio_get_tx_payload_buffer+0x8a>
   1ead0:	4640      	mov	r0, r8
   1ead2:	f7ff fe6b 	bl	1e7ac <k_sem_give>
		if (rp_hdr || !tick_count)
   1ead6:	2e00      	cmp	r6, #0
   1ead8:	d0cc      	beq.n	1ea74 <rpmsg_virtio_get_tx_payload_buffer+0x18>
	return z_impl_k_sleep(timeout);
   1eada:	2021      	movs	r0, #33	; 0x21
   1eadc:	2100      	movs	r1, #0
   1eade:	f7fa fdcd 	bl	1967c <z_impl_k_sleep>
		tick_count--;
   1eae2:	3e01      	subs	r6, #1
		metal_mutex_acquire(&rdev->lock);
   1eae4:	e7d1      	b.n	1ea8a <rpmsg_virtio_get_tx_payload_buffer+0x2e>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
   1eae6:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
   1eaea:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
   1eaee:	f7ff ffa7 	bl	1ea40 <rpmsg_virtio_shm_pool_get_buffer>
   1eaf2:	4604      	mov	r4, r0
			*len = rvdev->config.h2r_buf_size;
   1eaf4:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
			*idx = 0;
   1eaf8:	f8ad 9006 	strh.w	r9, [sp, #6]
			*len = rvdev->config.h2r_buf_size;
   1eafc:	603b      	str	r3, [r7, #0]
   1eafe:	4640      	mov	r0, r8
   1eb00:	f7ff fe54 	bl	1e7ac <k_sem_give>
		if (rp_hdr || !tick_count)
   1eb04:	2c00      	cmp	r4, #0
   1eb06:	d0e6      	beq.n	1ead6 <rpmsg_virtio_get_tx_payload_buffer+0x7a>
   1eb08:	e7d5      	b.n	1eab6 <rpmsg_virtio_get_tx_payload_buffer+0x5a>
	if (role == RPMSG_REMOTE) {
   1eb0a:	f1b9 0f01 	cmp.w	r9, #1
   1eb0e:	d1df      	bne.n	1ead0 <rpmsg_virtio_get_tx_payload_buffer+0x74>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
   1eb10:	463a      	mov	r2, r7
   1eb12:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
   1eb16:	f10d 0106 	add.w	r1, sp, #6
   1eb1a:	f7ff fcba 	bl	1e492 <virtqueue_get_available_buffer>
   1eb1e:	4604      	mov	r4, r0
   1eb20:	e7ed      	b.n	1eafe <rpmsg_virtio_get_tx_payload_buffer+0xa2>

0001eb22 <rpmsg_virtio_init_shm_pool>:
	if (!shpool)
   1eb22:	b110      	cbz	r0, 1eb2a <rpmsg_virtio_init_shm_pool+0x8>
	shpool->avail = size;
   1eb24:	e9c0 2201 	strd	r2, r2, [r0, #4]
	shpool->base = shb;
   1eb28:	6001      	str	r1, [r0, #0]
}
   1eb2a:	4770      	bx	lr

0001eb2c <rpmsg_deinit_vdev>:

void rpmsg_deinit_vdev(struct rpmsg_virtio_device *rvdev)
{
   1eb2c:	b510      	push	{r4, lr}
   1eb2e:	4604      	mov	r4, r0
	return list->next == list;
   1eb30:	6820      	ldr	r0, [r4, #0]
	struct metal_list *node;
	struct rpmsg_device *rdev;
	struct rpmsg_endpoint *ept;

	rdev = &rvdev->rdev;
	while (!metal_list_is_empty(&rdev->endpoints)) {
   1eb32:	4284      	cmp	r4, r0
   1eb34:	d103      	bne.n	1eb3e <rpmsg_deinit_vdev+0x12>
		node = rdev->endpoints.next;
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
		rpmsg_destroy_ept(ept);
	}

	rvdev->rvq = 0;
   1eb36:	2300      	movs	r3, #0
	rvdev->svq = 0;
   1eb38:	e9c4 3326 	strd	r3, r3, [r4, #152]	; 0x98

	metal_mutex_deinit(&rdev->lock);
}
   1eb3c:	bd10      	pop	{r4, pc}
		rpmsg_destroy_ept(ept);
   1eb3e:	3834      	subs	r0, #52	; 0x34
   1eb40:	f7ff fe15 	bl	1e76e <rpmsg_destroy_ept>
   1eb44:	e7f4      	b.n	1eb30 <rpmsg_deinit_vdev+0x4>

0001eb46 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   1eb46:	4770      	bx	lr

0001eb48 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   1eb48:	b140      	cbz	r0, 1eb5c <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   1eb4a:	68c3      	ldr	r3, [r0, #12]
   1eb4c:	7858      	ldrb	r0, [r3, #1]
   1eb4e:	f010 0001 	ands.w	r0, r0, #1
   1eb52:	bf1e      	ittt	ne
   1eb54:	7818      	ldrbne	r0, [r3, #0]
   1eb56:	fab0 f080 	clzne	r0, r0
   1eb5a:	0940      	lsrne	r0, r0, #5
}
   1eb5c:	4770      	bx	lr

0001eb5e <z_early_memset>:
	(void) memset(dst, c, n);
   1eb5e:	f7fc bec3 	b.w	1b8e8 <memset>

0001eb62 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
   1eb62:	f7fc beb6 	b.w	1b8d2 <memcpy>

0001eb66 <k_heap_init>:
{
   1eb66:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   1eb68:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   1eb6c:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   1eb70:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   1eb72:	f7fb bb75 	b.w	1a260 <sys_heap_init>

0001eb76 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   1eb76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eb7a:	b085      	sub	sp, #20
   1eb7c:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
   1eb80:	4607      	mov	r7, r0
   1eb82:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1eb84:	4650      	mov	r0, sl
   1eb86:	4621      	mov	r1, r4
{
   1eb88:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1eb8a:	f000 fc0c 	bl	1f3a6 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   1eb8e:	f1b4 3fff 	cmp.w	r4, #4294967295
   1eb92:	bf08      	it	eq
   1eb94:	f1ba 3fff 	cmpeq.w	sl, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1eb98:	4605      	mov	r5, r0
   1eb9a:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   1eb9c:	bf04      	itt	eq
   1eb9e:	f04f 35ff 	moveq.w	r5, #4294967295
   1eba2:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1eba6:	f107 0a14 	add.w	sl, r7, #20
	__asm__ volatile(
   1ebaa:	f04f 0320 	mov.w	r3, #32
   1ebae:	f3ef 8411 	mrs	r4, BASEPRI
   1ebb2:	f383 8812 	msr	BASEPRI_MAX, r3
   1ebb6:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1ebba:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   1ebbe:	464a      	mov	r2, r9
   1ebc0:	4641      	mov	r1, r8
   1ebc2:	4638      	mov	r0, r7
   1ebc4:	f7fb fae5 	bl	1a192 <sys_heap_aligned_alloc>
   1ebc8:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   1ebca:	f7fa ff2b 	bl	19a24 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   1ebce:	9b03      	ldr	r3, [sp, #12]
   1ebd0:	b13b      	cbz	r3, 1ebe2 <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
   1ebd2:	f384 8811 	msr	BASEPRI, r4
   1ebd6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   1ebda:	4618      	mov	r0, r3
   1ebdc:	b005      	add	sp, #20
   1ebde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   1ebe2:	1a28      	subs	r0, r5, r0
   1ebe4:	eb66 0101 	sbc.w	r1, r6, r1
   1ebe8:	2801      	cmp	r0, #1
   1ebea:	f171 0200 	sbcs.w	r2, r1, #0
   1ebee:	dbf0      	blt.n	1ebd2 <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1ebf0:	e9cd 0100 	strd	r0, r1, [sp]
   1ebf4:	465a      	mov	r2, fp
   1ebf6:	4621      	mov	r1, r4
   1ebf8:	4650      	mov	r0, sl
   1ebfa:	f7fa fbbb 	bl	19374 <z_pend_curr>
	__asm__ volatile(
   1ebfe:	f04f 0320 	mov.w	r3, #32
   1ec02:	f3ef 8411 	mrs	r4, BASEPRI
   1ec06:	f383 8812 	msr	BASEPRI_MAX, r3
   1ec0a:	f3bf 8f6f 	isb	sy
	return k;
   1ec0e:	e7d6      	b.n	1ebbe <k_heap_aligned_alloc+0x48>

0001ec10 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   1ec10:	b538      	push	{r3, r4, r5, lr}
   1ec12:	4604      	mov	r4, r0
   1ec14:	f04f 0320 	mov.w	r3, #32
   1ec18:	f3ef 8511 	mrs	r5, BASEPRI
   1ec1c:	f383 8812 	msr	BASEPRI_MAX, r3
   1ec20:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   1ec24:	f7fb fa7d 	bl	1a122 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   1ec28:	f104 000c 	add.w	r0, r4, #12
   1ec2c:	f000 fb3c 	bl	1f2a8 <z_unpend_all>
   1ec30:	b130      	cbz	r0, 1ec40 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   1ec32:	4629      	mov	r1, r5
   1ec34:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   1ec38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   1ec3c:	f7fa bbfe 	b.w	1943c <z_reschedule>
	__asm__ volatile(
   1ec40:	f385 8811 	msr	BASEPRI, r5
   1ec44:	f3bf 8f6f 	isb	sy
}
   1ec48:	bd38      	pop	{r3, r4, r5, pc}

0001ec4a <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1ec4a:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
   1ec4e:	4313      	orrs	r3, r2
   1ec50:	f013 0303 	ands.w	r3, r3, #3
   1ec54:	d10c      	bne.n	1ec70 <create_free_list+0x26>
	slab->free_list = NULL;
   1ec56:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1ec58:	6881      	ldr	r1, [r0, #8]
   1ec5a:	4299      	cmp	r1, r3
   1ec5c:	d801      	bhi.n	1ec62 <create_free_list+0x18>
	return 0;
   1ec5e:	2000      	movs	r0, #0
   1ec60:	4770      	bx	lr
		*(char **)p = slab->free_list;
   1ec62:	6941      	ldr	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1ec64:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   1ec66:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   1ec68:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
   1ec6a:	6142      	str	r2, [r0, #20]
		p += slab->block_size;
   1ec6c:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   1ec6e:	e7f3      	b.n	1ec58 <create_free_list+0xe>
		return -EINVAL;
   1ec70:	f06f 0015 	mvn.w	r0, #21
}
   1ec74:	4770      	bx	lr

0001ec76 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1ec76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ec78:	4604      	mov	r4, r0
   1ec7a:	460d      	mov	r5, r1
	__asm__ volatile(
   1ec7c:	f04f 0320 	mov.w	r3, #32
   1ec80:	f3ef 8611 	mrs	r6, BASEPRI
   1ec84:	f383 8812 	msr	BASEPRI_MAX, r3
   1ec88:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   1ec8c:	6947      	ldr	r7, [r0, #20]
   1ec8e:	b977      	cbnz	r7, 1ecae <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1ec90:	f000 fac4 	bl	1f21c <z_unpend_first_thread>

		if (pending_thread != NULL) {
   1ec94:	b158      	cbz	r0, 1ecae <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1ec96:	682a      	ldr	r2, [r5, #0]
   1ec98:	67c7      	str	r7, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1ec9a:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   1ec9c:	f000 fa87 	bl	1f1ae <z_ready_thread>
			z_reschedule(&slab->lock, key);
   1eca0:	4631      	mov	r1, r6
   1eca2:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   1eca6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   1ecaa:	f7fa bbc7 	b.w	1943c <z_reschedule>
	**(char ***) mem = slab->free_list;
   1ecae:	682b      	ldr	r3, [r5, #0]
   1ecb0:	6962      	ldr	r2, [r4, #20]
   1ecb2:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   1ecb4:	682b      	ldr	r3, [r5, #0]
   1ecb6:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   1ecb8:	69a3      	ldr	r3, [r4, #24]
   1ecba:	3b01      	subs	r3, #1
   1ecbc:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1ecbe:	f386 8811 	msr	BASEPRI, r6
   1ecc2:	f3bf 8f6f 	isb	sy
}
   1ecc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001ecc8 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1ecc8:	f3ef 8005 	mrs	r0, IPSR
}
   1eccc:	3800      	subs	r0, #0
   1ecce:	bf18      	it	ne
   1ecd0:	2001      	movne	r0, #1
   1ecd2:	4770      	bx	lr

0001ecd4 <z_impl_k_thread_name_set>:
}
   1ecd4:	f06f 0057 	mvn.w	r0, #87	; 0x57
   1ecd8:	4770      	bx	lr

0001ecda <k_thread_name_get>:
}
   1ecda:	2000      	movs	r0, #0
   1ecdc:	4770      	bx	lr

0001ecde <z_impl_k_thread_start>:
	z_sched_start(thread);
   1ecde:	f7fa bbbf 	b.w	19460 <z_sched_start>

0001ece2 <z_pm_save_idle_exit>:
{
   1ece2:	b508      	push	{r3, lr}
	pm_system_resume();
   1ece4:	f7ed fba8 	bl	c438 <pm_system_resume>
}
   1ece8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   1ecec:	f7ff b8fe 	b.w	1deec <sys_clock_idle_exit>

0001ecf0 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   1ecf0:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1ecf4:	428b      	cmp	r3, r1
   1ecf6:	d001      	beq.n	1ecfc <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   1ecf8:	f7fa bb5a 	b.w	193b0 <z_set_prio>
}
   1ecfc:	2000      	movs	r0, #0
   1ecfe:	4770      	bx	lr

0001ed00 <z_impl_k_mutex_init>:
{
   1ed00:	4603      	mov	r3, r0
	mutex->owner = NULL;
   1ed02:	2000      	movs	r0, #0
   1ed04:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   1ed08:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   1ed0c:	4770      	bx	lr

0001ed0e <queue_insert>:
{
   1ed0e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ed12:	4699      	mov	r9, r3
   1ed14:	4604      	mov	r4, r0
   1ed16:	460d      	mov	r5, r1
   1ed18:	4690      	mov	r8, r2
   1ed1a:	f89d 3020 	ldrb.w	r3, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1ed1e:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   1ed22:	f04f 0220 	mov.w	r2, #32
   1ed26:	f3ef 8711 	mrs	r7, BASEPRI
   1ed2a:	f382 8812 	msr	BASEPRI_MAX, r2
   1ed2e:	f3bf 8f6f 	isb	sy
	if (is_append) {
   1ed32:	b103      	cbz	r3, 1ed36 <queue_insert+0x28>
	return list->tail;
   1ed34:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   1ed36:	4630      	mov	r0, r6
   1ed38:	f000 fa70 	bl	1f21c <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   1ed3c:	b158      	cbz	r0, 1ed56 <queue_insert+0x48>
   1ed3e:	2300      	movs	r3, #0
   1ed40:	f8c0 8014 	str.w	r8, [r0, #20]
   1ed44:	67c3      	str	r3, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   1ed46:	f000 fa32 	bl	1f1ae <z_ready_thread>
	z_reschedule(&queue->lock, key);
   1ed4a:	4630      	mov	r0, r6
   1ed4c:	4639      	mov	r1, r7
   1ed4e:	f7fa fb75 	bl	1943c <z_reschedule>
		return 0;
   1ed52:	2000      	movs	r0, #0
   1ed54:	e00c      	b.n	1ed70 <queue_insert+0x62>
	if (alloc) {
   1ed56:	f1b9 0f00 	cmp.w	r9, #0
   1ed5a:	d01b      	beq.n	1ed94 <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   1ed5c:	2108      	movs	r1, #8
   1ed5e:	f7fa ffc3 	bl	19ce8 <z_thread_aligned_alloc>
		if (anode == NULL) {
   1ed62:	b938      	cbnz	r0, 1ed74 <queue_insert+0x66>
	__asm__ volatile(
   1ed64:	f387 8811 	msr	BASEPRI, r7
   1ed68:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   1ed6c:	f06f 000b 	mvn.w	r0, #11
}
   1ed70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   1ed74:	2201      	movs	r2, #1
		anode->data = data;
   1ed76:	f8c0 8004 	str.w	r8, [r0, #4]
   1ed7a:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1ed7c:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1ed7e:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
   1ed82:	b95d      	cbnz	r5, 1ed9c <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1ed84:	6822      	ldr	r2, [r4, #0]
   1ed86:	430a      	orrs	r2, r1
   1ed88:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1ed8a:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   1ed8c:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1ed8e:	b96a      	cbnz	r2, 1edac <queue_insert+0x9e>
	list->tail = node;
   1ed90:	6060      	str	r0, [r4, #4]
}
   1ed92:	e00b      	b.n	1edac <queue_insert+0x9e>
}
   1ed94:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   1ed96:	f8c8 9000 	str.w	r9, [r8]
}
   1ed9a:	e7ef      	b.n	1ed7c <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1ed9c:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1ed9e:	2a03      	cmp	r2, #3
   1eda0:	d810      	bhi.n	1edc4 <queue_insert+0xb6>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1eda2:	6001      	str	r1, [r0, #0]
	return list->tail;
   1eda4:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   1eda6:	b939      	cbnz	r1, 1edb8 <queue_insert+0xaa>
	list->head = node;
   1eda8:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1edac:	2104      	movs	r1, #4
   1edae:	f104 0010 	add.w	r0, r4, #16
   1edb2:	f000 fc83 	bl	1f6bc <z_handle_obj_poll_events>
   1edb6:	e7c8      	b.n	1ed4a <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1edb8:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1edba:	f002 0203 	and.w	r2, r2, #3
   1edbe:	4302      	orrs	r2, r0
   1edc0:	600a      	str	r2, [r1, #0]
   1edc2:	e7e5      	b.n	1ed90 <queue_insert+0x82>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1edc4:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   1edc8:	430a      	orrs	r2, r1
   1edca:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1edcc:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1edce:	f002 0203 	and.w	r2, r2, #3
   1edd2:	ea40 0302 	orr.w	r3, r0, r2
   1edd6:	602b      	str	r3, [r5, #0]
}
   1edd8:	e7e8      	b.n	1edac <queue_insert+0x9e>

0001edda <z_queue_node_peek>:
{
   1edda:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   1eddc:	4604      	mov	r4, r0
   1edde:	b130      	cbz	r0, 1edee <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1ede0:	6802      	ldr	r2, [r0, #0]
   1ede2:	0793      	lsls	r3, r2, #30
   1ede4:	d003      	beq.n	1edee <z_queue_node_peek+0x14>
		ret = anode->data;
   1ede6:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1ede8:	b109      	cbz	r1, 1edee <z_queue_node_peek+0x14>
			k_free(anode);
   1edea:	f000 fc8d 	bl	1f708 <k_free>
}
   1edee:	4620      	mov	r0, r4
   1edf0:	bd10      	pop	{r4, pc}

0001edf2 <z_impl_k_queue_init>:
	list->head = NULL;
   1edf2:	2300      	movs	r3, #0
	list->tail = NULL;
   1edf4:	e9c0 3300 	strd	r3, r3, [r0]
   1edf8:	f100 0308 	add.w	r3, r0, #8
   1edfc:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   1ee00:	f100 0310 	add.w	r3, r0, #16
   1ee04:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   1ee08:	4770      	bx	lr

0001ee0a <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   1ee0a:	2301      	movs	r3, #1
{
   1ee0c:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   1ee0e:	9300      	str	r3, [sp, #0]
   1ee10:	2300      	movs	r3, #0
{
   1ee12:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   1ee14:	4619      	mov	r1, r3
   1ee16:	f7ff ff7a 	bl	1ed0e <queue_insert>
}
   1ee1a:	b003      	add	sp, #12
   1ee1c:	f85d fb04 	ldr.w	pc, [sp], #4

0001ee20 <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false, false);
   1ee20:	2300      	movs	r3, #0
{
   1ee22:	b507      	push	{r0, r1, r2, lr}
   1ee24:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   1ee26:	9300      	str	r3, [sp, #0]
   1ee28:	4619      	mov	r1, r3
   1ee2a:	f7ff ff70 	bl	1ed0e <queue_insert>
}
   1ee2e:	b003      	add	sp, #12
   1ee30:	f85d fb04 	ldr.w	pc, [sp], #4

0001ee34 <k_queue_append_list>:
{
   1ee34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ee38:	4680      	mov	r8, r0
   1ee3a:	4615      	mov	r5, r2
	CHECKIF(head == NULL || tail == NULL) {
   1ee3c:	460c      	mov	r4, r1
   1ee3e:	b3a9      	cbz	r1, 1eeac <k_queue_append_list+0x78>
   1ee40:	b3a2      	cbz	r2, 1eeac <k_queue_append_list+0x78>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1ee42:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   1ee46:	f04f 0320 	mov.w	r3, #32
   1ee4a:	f3ef 8711 	mrs	r7, BASEPRI
   1ee4e:	f383 8812 	msr	BASEPRI_MAX, r3
   1ee52:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   1ee56:	4630      	mov	r0, r6
   1ee58:	f000 f9e0 	bl	1f21c <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   1ee5c:	b168      	cbz	r0, 1ee7a <k_queue_append_list+0x46>
   1ee5e:	f04f 0900 	mov.w	r9, #0
	thread->base.swap_data = data;
   1ee62:	6144      	str	r4, [r0, #20]
   1ee64:	f8c0 907c 	str.w	r9, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   1ee68:	f000 f9a1 	bl	1f1ae <z_ready_thread>
		head = *(void **)head;
   1ee6c:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   1ee6e:	4630      	mov	r0, r6
   1ee70:	f000 f9d4 	bl	1f21c <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   1ee74:	b144      	cbz	r4, 1ee88 <k_queue_append_list+0x54>
   1ee76:	2800      	cmp	r0, #0
   1ee78:	d1f3      	bne.n	1ee62 <k_queue_append_list+0x2e>
	return list->tail;
   1ee7a:	f8d8 3004 	ldr.w	r3, [r8, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1ee7e:	b97b      	cbnz	r3, 1eea0 <k_queue_append_list+0x6c>
	list->head = node;
   1ee80:	f8c8 4000 	str.w	r4, [r8]
	list->tail = node;
   1ee84:	f8c8 5004 	str.w	r5, [r8, #4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1ee88:	2104      	movs	r1, #4
   1ee8a:	f108 0010 	add.w	r0, r8, #16
   1ee8e:	f000 fc15 	bl	1f6bc <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   1ee92:	4630      	mov	r0, r6
   1ee94:	4639      	mov	r1, r7
   1ee96:	f7fa fad1 	bl	1943c <z_reschedule>
	return 0;
   1ee9a:	2000      	movs	r0, #0
}
   1ee9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1eea0:	681a      	ldr	r2, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1eea2:	f002 0203 	and.w	r2, r2, #3
   1eea6:	4314      	orrs	r4, r2
   1eea8:	601c      	str	r4, [r3, #0]
}
   1eeaa:	e7eb      	b.n	1ee84 <k_queue_append_list+0x50>
		return -EINVAL;
   1eeac:	f06f 0015 	mvn.w	r0, #21
   1eeb0:	e7f4      	b.n	1ee9c <k_queue_append_list+0x68>

0001eeb2 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   1eeb2:	b15a      	cbz	r2, 1eecc <z_impl_k_sem_init+0x1a>
   1eeb4:	428a      	cmp	r2, r1
   1eeb6:	d309      	bcc.n	1eecc <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   1eeb8:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   1eebc:	e9c0 1202 	strd	r1, r2, [r0, #8]
   1eec0:	e9c0 0000 	strd	r0, r0, [r0]
   1eec4:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   1eec8:	2000      	movs	r0, #0
   1eeca:	4770      	bx	lr
		return -EINVAL;
   1eecc:	f06f 0015 	mvn.w	r0, #21
}
   1eed0:	4770      	bx	lr

0001eed2 <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
   1eed2:	2301      	movs	r3, #1
	return (*flagp & BIT(bit)) != 0U;
   1eed4:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   1eed6:	408b      	lsls	r3, r1
   1eed8:	ea22 0303 	bic.w	r3, r2, r3
   1eedc:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   1eede:	fa22 f001 	lsr.w	r0, r2, r1
}
   1eee2:	f000 0001 	and.w	r0, r0, #1
   1eee6:	4770      	bx	lr

0001eee8 <unschedule_locked>:
{
   1eee8:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   1eeea:	2103      	movs	r1, #3
{
   1eeec:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   1eeee:	300c      	adds	r0, #12
   1eef0:	f7ff ffef 	bl	1eed2 <flag_test_and_clear>
   1eef4:	4604      	mov	r4, r0
   1eef6:	b118      	cbz	r0, 1ef00 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   1eef8:	f105 0010 	add.w	r0, r5, #16
   1eefc:	f000 fa07 	bl	1f30e <z_abort_timeout>
}
   1ef00:	4620      	mov	r0, r4
   1ef02:	bd38      	pop	{r3, r4, r5, pc}

0001ef04 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   1ef04:	b120      	cbz	r0, 1ef10 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   1ef06:	2200      	movs	r2, #0
   1ef08:	3090      	adds	r0, #144	; 0x90
   1ef0a:	4611      	mov	r1, r2
   1ef0c:	f000 b9dc 	b.w	1f2c8 <z_sched_wake>
}
   1ef10:	4770      	bx	lr

0001ef12 <cancel_async_locked>:
{
   1ef12:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   1ef14:	68c3      	ldr	r3, [r0, #12]
{
   1ef16:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1ef18:	f3c3 0640 	ubfx	r6, r3, #1, #1
   1ef1c:	079b      	lsls	r3, r3, #30
   1ef1e:	d416      	bmi.n	1ef4e <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   1ef20:	6885      	ldr	r5, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   1ef22:	2102      	movs	r1, #2
   1ef24:	300c      	adds	r0, #12
   1ef26:	f7ff ffd4 	bl	1eed2 <flag_test_and_clear>
   1ef2a:	b180      	cbz	r0, 1ef4e <cancel_async_locked+0x3c>
	return list->head;
   1ef2c:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1ef30:	b16a      	cbz	r2, 1ef4e <cancel_async_locked+0x3c>
   1ef32:	4294      	cmp	r4, r2
   1ef34:	d11d      	bne.n	1ef72 <cancel_async_locked+0x60>
	return node->next;
   1ef36:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1ef38:	b99e      	cbnz	r6, 1ef62 <cancel_async_locked+0x50>
   1ef3a:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
	list->head = node;
   1ef3e:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
Z_GENLIST_REMOVE(slist, snode)
   1ef42:	429c      	cmp	r4, r3
   1ef44:	d101      	bne.n	1ef4a <cancel_async_locked+0x38>
	list->tail = node;
   1ef46:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
	parent->next = child;
   1ef4a:	2300      	movs	r3, #0
   1ef4c:	6023      	str	r3, [r4, #0]
	return *flagp;
   1ef4e:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   1ef50:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   1ef54:	bf1e      	ittt	ne
   1ef56:	f043 0302 	orrne.w	r3, r3, #2
   1ef5a:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   1ef5c:	f040 0002 	orrne.w	r0, r0, #2
}
   1ef60:	bd70      	pop	{r4, r5, r6, pc}
   1ef62:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   1ef64:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
   1ef68:	4294      	cmp	r4, r2
	list->tail = node;
   1ef6a:	bf08      	it	eq
   1ef6c:	f8c5 608c 	streq.w	r6, [r5, #140]	; 0x8c
}
   1ef70:	e7eb      	b.n	1ef4a <cancel_async_locked+0x38>
	return node->next;
   1ef72:	4616      	mov	r6, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1ef74:	6812      	ldr	r2, [r2, #0]
   1ef76:	e7db      	b.n	1ef30 <cancel_async_locked+0x1e>

0001ef78 <work_timeout>:
{
   1ef78:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1ef7a:	4604      	mov	r4, r0
   1ef7c:	f04f 0320 	mov.w	r3, #32
   1ef80:	f3ef 8511 	mrs	r5, BASEPRI
   1ef84:	f383 8812 	msr	BASEPRI_MAX, r3
   1ef88:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   1ef8c:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   1ef8e:	f1a0 0610 	sub.w	r6, r0, #16
   1ef92:	2103      	movs	r1, #3
   1ef94:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   1ef96:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   1ef98:	f7ff ff9b 	bl	1eed2 <flag_test_and_clear>
   1ef9c:	b128      	cbz	r0, 1efaa <work_timeout+0x32>
		queue = dw->queue;
   1ef9e:	69a3      	ldr	r3, [r4, #24]
		(void)submit_to_queue_locked(wp, &queue);
   1efa0:	4630      	mov	r0, r6
   1efa2:	a901      	add	r1, sp, #4
		queue = dw->queue;
   1efa4:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   1efa6:	f7f9 ff67 	bl	18e78 <submit_to_queue_locked>
	__asm__ volatile(
   1efaa:	f385 8811 	msr	BASEPRI, r5
   1efae:	f3bf 8f6f 	isb	sy
}
   1efb2:	b002      	add	sp, #8
   1efb4:	bd70      	pop	{r4, r5, r6, pc}

0001efb6 <k_work_init>:
{
   1efb6:	b538      	push	{r3, r4, r5, lr}
   1efb8:	4604      	mov	r4, r0
   1efba:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1efbc:	2210      	movs	r2, #16
   1efbe:	2100      	movs	r1, #0
   1efc0:	f7fc fc92 	bl	1b8e8 <memset>
   1efc4:	6065      	str	r5, [r4, #4]
}
   1efc6:	bd38      	pop	{r3, r4, r5, pc}

0001efc8 <k_work_busy_get>:
	__asm__ volatile(
   1efc8:	f04f 0220 	mov.w	r2, #32
   1efcc:	f3ef 8311 	mrs	r3, BASEPRI
   1efd0:	f382 8812 	msr	BASEPRI_MAX, r2
   1efd4:	f3bf 8f6f 	isb	sy
	return flags_get(&work->flags) & K_WORK_MASK;
   1efd8:	68c0      	ldr	r0, [r0, #12]
   1efda:	f000 000f 	and.w	r0, r0, #15
	__asm__ volatile(
   1efde:	f383 8811 	msr	BASEPRI, r3
   1efe2:	f3bf 8f6f 	isb	sy
}
   1efe6:	4770      	bx	lr

0001efe8 <z_work_submit_to_queue>:
{
   1efe8:	b513      	push	{r0, r1, r4, lr}
   1efea:	9001      	str	r0, [sp, #4]
   1efec:	4608      	mov	r0, r1
	__asm__ volatile(
   1efee:	f04f 0320 	mov.w	r3, #32
   1eff2:	f3ef 8411 	mrs	r4, BASEPRI
   1eff6:	f383 8812 	msr	BASEPRI_MAX, r3
   1effa:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   1effe:	a901      	add	r1, sp, #4
   1f000:	f7f9 ff3a 	bl	18e78 <submit_to_queue_locked>
	__asm__ volatile(
   1f004:	f384 8811 	msr	BASEPRI, r4
   1f008:	f3bf 8f6f 	isb	sy
}
   1f00c:	b002      	add	sp, #8
   1f00e:	bd10      	pop	{r4, pc}

0001f010 <k_work_submit_to_queue>:
{
   1f010:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   1f012:	f7ff ffe9 	bl	1efe8 <z_work_submit_to_queue>
	if (ret > 0) {
   1f016:	1e04      	subs	r4, r0, #0
   1f018:	dd09      	ble.n	1f02e <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   1f01a:	f04f 0320 	mov.w	r3, #32
   1f01e:	f3ef 8011 	mrs	r0, BASEPRI
   1f022:	f383 8812 	msr	BASEPRI_MAX, r3
   1f026:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1f02a:	f000 f927 	bl	1f27c <z_reschedule_irqlock>
}
   1f02e:	4620      	mov	r0, r4
   1f030:	bd10      	pop	{r4, pc}

0001f032 <k_work_queue_init>:
{
   1f032:	b508      	push	{r3, lr}
	*queue = (struct k_work_q) {
   1f034:	22a8      	movs	r2, #168	; 0xa8
   1f036:	2100      	movs	r1, #0
   1f038:	f7fc fc56 	bl	1b8e8 <memset>
}
   1f03c:	bd08      	pop	{r3, pc}

0001f03e <k_work_init_delayable>:
{
   1f03e:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   1f040:	2230      	movs	r2, #48	; 0x30
{
   1f042:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   1f044:	2100      	movs	r1, #0
{
   1f046:	4604      	mov	r4, r0
	*dwork = (struct k_work_delayable){
   1f048:	f7fc fc4e 	bl	1b8e8 <memset>
   1f04c:	f44f 7380 	mov.w	r3, #256	; 0x100
   1f050:	6065      	str	r5, [r4, #4]
   1f052:	60e3      	str	r3, [r4, #12]
}
   1f054:	bd38      	pop	{r3, r4, r5, pc}

0001f056 <k_work_delayable_busy_get>:
int k_work_delayable_busy_get(const struct k_work_delayable *dwork)
   1f056:	f7ff bfb7 	b.w	1efc8 <k_work_busy_get>

0001f05a <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   1f05a:	b538      	push	{r3, r4, r5, lr}
   1f05c:	4604      	mov	r4, r0
   1f05e:	f04f 0320 	mov.w	r3, #32
   1f062:	f3ef 8511 	mrs	r5, BASEPRI
   1f066:	f383 8812 	msr	BASEPRI_MAX, r3
   1f06a:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   1f06e:	f7ff ff3b 	bl	1eee8 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   1f072:	4620      	mov	r0, r4
   1f074:	f7ff ff4d 	bl	1ef12 <cancel_async_locked>
	__asm__ volatile(
   1f078:	f385 8811 	msr	BASEPRI, r5
   1f07c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   1f080:	bd38      	pop	{r3, r4, r5, pc}

0001f082 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   1f082:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f084:	4604      	mov	r4, r0
   1f086:	460d      	mov	r5, r1
	__asm__ volatile(
   1f088:	f04f 0320 	mov.w	r3, #32
   1f08c:	f3ef 8611 	mrs	r6, BASEPRI
   1f090:	f383 8812 	msr	BASEPRI_MAX, r3
   1f094:	f3bf 8f6f 	isb	sy
	return *flagp;
   1f098:	68c3      	ldr	r3, [r0, #12]
   1f09a:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   1f09e:	2b00      	cmp	r3, #0
   1f0a0:	bf14      	ite	ne
   1f0a2:	2701      	movne	r7, #1
   1f0a4:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   1f0a6:	d105      	bne.n	1f0b4 <k_work_cancel_delayable_sync+0x32>
	__asm__ volatile(
   1f0a8:	f386 8811 	msr	BASEPRI, r6
   1f0ac:	f3bf 8f6f 	isb	sy
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   1f0b0:	4638      	mov	r0, r7
   1f0b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	(void)unschedule_locked(dwork);
   1f0b4:	f7ff ff18 	bl	1eee8 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   1f0b8:	4620      	mov	r0, r4
   1f0ba:	f7ff ff2a 	bl	1ef12 <cancel_async_locked>
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   1f0be:	4629      	mov	r1, r5
   1f0c0:	4620      	mov	r0, r4
   1f0c2:	f7f9 febb 	bl	18e3c <cancel_sync_locked>
   1f0c6:	f386 8811 	msr	BASEPRI, r6
   1f0ca:	f3bf 8f6f 	isb	sy
	if (need_wait) {
   1f0ce:	2800      	cmp	r0, #0
   1f0d0:	d0ee      	beq.n	1f0b0 <k_work_cancel_delayable_sync+0x2e>
	return z_impl_k_sem_take(sem, timeout);
   1f0d2:	f04f 32ff 	mov.w	r2, #4294967295
   1f0d6:	f04f 33ff 	mov.w	r3, #4294967295
   1f0da:	f105 0008 	add.w	r0, r5, #8
   1f0de:	f7f9 fdcf 	bl	18c80 <z_impl_k_sem_take>
   1f0e2:	e7e5      	b.n	1f0b0 <k_work_cancel_delayable_sync+0x2e>

0001f0e4 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   1f0e4:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1f0e8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1f0ea:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1f0ec:	2300      	movs	r3, #0
	node->prev = NULL;
   1f0ee:	e9c0 3300 	strd	r3, r3, [r0]
}
   1f0f2:	4770      	bx	lr

0001f0f4 <unpend_thread_no_timeout>:
{
   1f0f4:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   1f0f6:	f7ff fff5 	bl	1f0e4 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1f0fa:	7b43      	ldrb	r3, [r0, #13]
   1f0fc:	f023 0302 	bic.w	r3, r3, #2
   1f100:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   1f102:	2300      	movs	r3, #0
   1f104:	6083      	str	r3, [r0, #8]
}
   1f106:	bd08      	pop	{r3, pc}

0001f108 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   1f108:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1f10c:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   1f110:	4283      	cmp	r3, r0
		return b2 - b1;
   1f112:	bf14      	ite	ne
   1f114:	1ac0      	subne	r0, r0, r3
	return 0;
   1f116:	2000      	moveq	r0, #0
}
   1f118:	4770      	bx	lr

0001f11a <z_thread_timeout>:
{
   1f11a:	4601      	mov	r1, r0
   1f11c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1f11e:	f04f 0320 	mov.w	r3, #32
   1f122:	f3ef 8411 	mrs	r4, BASEPRI
   1f126:	f383 8812 	msr	BASEPRI_MAX, r3
   1f12a:	f3bf 8f6f 	isb	sy
		if (!killed) {
   1f12e:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   1f132:	f013 0f28 	tst.w	r3, #40	; 0x28
   1f136:	d10d      	bne.n	1f154 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   1f138:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   1f13c:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   1f13e:	b10b      	cbz	r3, 1f144 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   1f140:	f7ff ffd8 	bl	1f0f4 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1f144:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   1f148:	f023 0314 	bic.w	r3, r3, #20
   1f14c:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   1f150:	f7fa f838 	bl	191c4 <ready_thread>
	__asm__ volatile(
   1f154:	f384 8811 	msr	BASEPRI, r4
   1f158:	f3bf 8f6f 	isb	sy
}
   1f15c:	bd10      	pop	{r4, pc}

0001f15e <add_to_waitq_locked>:
{
   1f15e:	b538      	push	{r3, r4, r5, lr}
   1f160:	4604      	mov	r4, r0
   1f162:	460d      	mov	r5, r1
	unready_thread(thread);
   1f164:	f7fa f862 	bl	1922c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1f168:	7b63      	ldrb	r3, [r4, #13]
   1f16a:	f043 0302 	orr.w	r3, r3, #2
   1f16e:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   1f170:	b1e5      	cbz	r5, 1f1ac <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
   1f172:	60a5      	str	r5, [r4, #8]
	return list->head == list;
   1f174:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f176:	429d      	cmp	r5, r3
   1f178:	d109      	bne.n	1f18e <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
   1f17a:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   1f17c:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   1f180:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1f182:	606c      	str	r4, [r5, #4]
}
   1f184:	e012      	b.n	1f1ac <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
   1f186:	686a      	ldr	r2, [r5, #4]
   1f188:	4293      	cmp	r3, r2
   1f18a:	d0f6      	beq.n	1f17a <add_to_waitq_locked+0x1c>
   1f18c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1f18e:	2b00      	cmp	r3, #0
   1f190:	d0f3      	beq.n	1f17a <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
   1f192:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   1f196:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   1f19a:	428a      	cmp	r2, r1
   1f19c:	d0f3      	beq.n	1f186 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1f19e:	4291      	cmp	r1, r2
   1f1a0:	ddf1      	ble.n	1f186 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
   1f1a2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1f1a4:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1f1a8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1f1aa:	605c      	str	r4, [r3, #4]
}
   1f1ac:	bd38      	pop	{r3, r4, r5, pc}

0001f1ae <z_ready_thread>:
{
   1f1ae:	b510      	push	{r4, lr}
	__asm__ volatile(
   1f1b0:	f04f 0320 	mov.w	r3, #32
   1f1b4:	f3ef 8411 	mrs	r4, BASEPRI
   1f1b8:	f383 8812 	msr	BASEPRI_MAX, r3
   1f1bc:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   1f1c0:	f7fa f800 	bl	191c4 <ready_thread>
	__asm__ volatile(
   1f1c4:	f384 8811 	msr	BASEPRI, r4
   1f1c8:	f3bf 8f6f 	isb	sy
}
   1f1cc:	bd10      	pop	{r4, pc}

0001f1ce <z_unpend_thread_no_timeout>:
{
   1f1ce:	b508      	push	{r3, lr}
	__asm__ volatile(
   1f1d0:	f04f 0320 	mov.w	r3, #32
   1f1d4:	f3ef 8111 	mrs	r1, BASEPRI
   1f1d8:	f383 8812 	msr	BASEPRI_MAX, r3
   1f1dc:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   1f1e0:	f7ff ff88 	bl	1f0f4 <unpend_thread_no_timeout>
	__asm__ volatile(
   1f1e4:	f381 8811 	msr	BASEPRI, r1
   1f1e8:	f3bf 8f6f 	isb	sy
}
   1f1ec:	bd08      	pop	{r3, pc}

0001f1ee <z_unpend1_no_timeout>:
{
   1f1ee:	b508      	push	{r3, lr}
   1f1f0:	4603      	mov	r3, r0
	__asm__ volatile(
   1f1f2:	f04f 0220 	mov.w	r2, #32
   1f1f6:	f3ef 8111 	mrs	r1, BASEPRI
   1f1fa:	f382 8812 	msr	BASEPRI_MAX, r2
   1f1fe:	f3bf 8f6f 	isb	sy
	return list->head == list;
   1f202:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f204:	4283      	cmp	r3, r0
   1f206:	d007      	beq.n	1f218 <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
   1f208:	b108      	cbz	r0, 1f20e <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
   1f20a:	f7ff ff73 	bl	1f0f4 <unpend_thread_no_timeout>
	__asm__ volatile(
   1f20e:	f381 8811 	msr	BASEPRI, r1
   1f212:	f3bf 8f6f 	isb	sy
}
   1f216:	bd08      	pop	{r3, pc}
   1f218:	2000      	movs	r0, #0
   1f21a:	e7f8      	b.n	1f20e <z_unpend1_no_timeout+0x20>

0001f21c <z_unpend_first_thread>:
{
   1f21c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1f21e:	f04f 0320 	mov.w	r3, #32
   1f222:	f3ef 8511 	mrs	r5, BASEPRI
   1f226:	f383 8812 	msr	BASEPRI_MAX, r3
   1f22a:	f3bf 8f6f 	isb	sy
	return list->head == list;
   1f22e:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f230:	42a0      	cmp	r0, r4
   1f232:	d00d      	beq.n	1f250 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
   1f234:	b134      	cbz	r4, 1f244 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
   1f236:	4620      	mov	r0, r4
   1f238:	f7ff ff5c 	bl	1f0f4 <unpend_thread_no_timeout>
   1f23c:	f104 0018 	add.w	r0, r4, #24
   1f240:	f000 f865 	bl	1f30e <z_abort_timeout>
	__asm__ volatile(
   1f244:	f385 8811 	msr	BASEPRI, r5
   1f248:	f3bf 8f6f 	isb	sy
}
   1f24c:	4620      	mov	r0, r4
   1f24e:	bd38      	pop	{r3, r4, r5, pc}
   1f250:	2400      	movs	r4, #0
   1f252:	e7f7      	b.n	1f244 <z_unpend_first_thread+0x28>

0001f254 <z_unpend_thread>:
{
   1f254:	b510      	push	{r4, lr}
	__asm__ volatile(
   1f256:	f04f 0320 	mov.w	r3, #32
   1f25a:	f3ef 8411 	mrs	r4, BASEPRI
   1f25e:	f383 8812 	msr	BASEPRI_MAX, r3
   1f262:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   1f266:	f7ff ff45 	bl	1f0f4 <unpend_thread_no_timeout>
	__asm__ volatile(
   1f26a:	f384 8811 	msr	BASEPRI, r4
   1f26e:	f3bf 8f6f 	isb	sy
}
   1f272:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1f276:	3018      	adds	r0, #24
   1f278:	f000 b849 	b.w	1f30e <z_abort_timeout>

0001f27c <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1f27c:	4603      	mov	r3, r0
   1f27e:	b920      	cbnz	r0, 1f28a <z_reschedule_irqlock+0xe>
   1f280:	f3ef 8205 	mrs	r2, IPSR
   1f284:	b90a      	cbnz	r2, 1f28a <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   1f286:	f7ed bc3f 	b.w	cb08 <arch_swap>
   1f28a:	f383 8811 	msr	BASEPRI, r3
   1f28e:	f3bf 8f6f 	isb	sy
}
   1f292:	4770      	bx	lr

0001f294 <z_reschedule_unlocked>:
	__asm__ volatile(
   1f294:	f04f 0320 	mov.w	r3, #32
   1f298:	f3ef 8011 	mrs	r0, BASEPRI
   1f29c:	f383 8812 	msr	BASEPRI_MAX, r3
   1f2a0:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1f2a4:	f7ff bfea 	b.w	1f27c <z_reschedule_irqlock>

0001f2a8 <z_unpend_all>:
{
   1f2a8:	b538      	push	{r3, r4, r5, lr}
   1f2aa:	4605      	mov	r5, r0
	int need_sched = 0;
   1f2ac:	2000      	movs	r0, #0
	return list->head == list;
   1f2ae:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f2b0:	42a5      	cmp	r5, r4
   1f2b2:	d000      	beq.n	1f2b6 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1f2b4:	b904      	cbnz	r4, 1f2b8 <z_unpend_all+0x10>
}
   1f2b6:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   1f2b8:	4620      	mov	r0, r4
   1f2ba:	f7ff ffcb 	bl	1f254 <z_unpend_thread>
		z_ready_thread(thread);
   1f2be:	4620      	mov	r0, r4
   1f2c0:	f7ff ff75 	bl	1f1ae <z_ready_thread>
		need_sched = 1;
   1f2c4:	2001      	movs	r0, #1
   1f2c6:	e7f2      	b.n	1f2ae <z_unpend_all+0x6>

0001f2c8 <z_sched_wake>:
{
   1f2c8:	b538      	push	{r3, r4, r5, lr}
   1f2ca:	f04f 0320 	mov.w	r3, #32
   1f2ce:	f3ef 8511 	mrs	r5, BASEPRI
   1f2d2:	f383 8812 	msr	BASEPRI_MAX, r3
   1f2d6:	f3bf 8f6f 	isb	sy
	return list->head == list;
   1f2da:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f2dc:	42a0      	cmp	r0, r4
   1f2de:	d012      	beq.n	1f306 <z_sched_wake+0x3e>
		if (thread != NULL) {
   1f2e0:	b19c      	cbz	r4, 1f30a <z_sched_wake+0x42>
   1f2e2:	67e1      	str	r1, [r4, #124]	; 0x7c
   1f2e4:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
   1f2e6:	4620      	mov	r0, r4
   1f2e8:	f7ff ff04 	bl	1f0f4 <unpend_thread_no_timeout>
   1f2ec:	f104 0018 	add.w	r0, r4, #24
   1f2f0:	f000 f80d 	bl	1f30e <z_abort_timeout>
			ready_thread(thread);
   1f2f4:	4620      	mov	r0, r4
   1f2f6:	f7f9 ff65 	bl	191c4 <ready_thread>
			ret = true;
   1f2fa:	2001      	movs	r0, #1
	__asm__ volatile(
   1f2fc:	f385 8811 	msr	BASEPRI, r5
   1f300:	f3bf 8f6f 	isb	sy
}
   1f304:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
   1f306:	2000      	movs	r0, #0
   1f308:	e7f8      	b.n	1f2fc <z_sched_wake+0x34>
   1f30a:	4620      	mov	r0, r4
   1f30c:	e7f6      	b.n	1f2fc <z_sched_wake+0x34>

0001f30e <z_abort_timeout>:
{
   1f30e:	b510      	push	{r4, lr}
	__asm__ volatile(
   1f310:	f04f 0220 	mov.w	r2, #32
   1f314:	f3ef 8411 	mrs	r4, BASEPRI
   1f318:	f382 8812 	msr	BASEPRI_MAX, r2
   1f31c:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   1f320:	6803      	ldr	r3, [r0, #0]
   1f322:	b13b      	cbz	r3, 1f334 <z_abort_timeout+0x26>
			remove_timeout(to);
   1f324:	f7fa fa88 	bl	19838 <remove_timeout>
			ret = 0;
   1f328:	2000      	movs	r0, #0
	__asm__ volatile(
   1f32a:	f384 8811 	msr	BASEPRI, r4
   1f32e:	f3bf 8f6f 	isb	sy
}
   1f332:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   1f334:	f06f 0015 	mvn.w	r0, #21
   1f338:	e7f7      	b.n	1f32a <z_abort_timeout+0x1c>

0001f33a <z_get_next_timeout_expiry>:
{
   1f33a:	b510      	push	{r4, lr}
	__asm__ volatile(
   1f33c:	f04f 0320 	mov.w	r3, #32
   1f340:	f3ef 8411 	mrs	r4, BASEPRI
   1f344:	f383 8812 	msr	BASEPRI_MAX, r3
   1f348:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   1f34c:	f7fa fa4c 	bl	197e8 <next_timeout>
	__asm__ volatile(
   1f350:	f384 8811 	msr	BASEPRI, r4
   1f354:	f3bf 8f6f 	isb	sy
}
   1f358:	bd10      	pop	{r4, pc}

0001f35a <z_set_timeout_expiry>:
{
   1f35a:	b570      	push	{r4, r5, r6, lr}
   1f35c:	4604      	mov	r4, r0
   1f35e:	460d      	mov	r5, r1
	__asm__ volatile(
   1f360:	f04f 0320 	mov.w	r3, #32
   1f364:	f3ef 8611 	mrs	r6, BASEPRI
   1f368:	f383 8812 	msr	BASEPRI_MAX, r3
   1f36c:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   1f370:	f7fa fa3a 	bl	197e8 <next_timeout>
			      || (ticks <= next_to);
   1f374:	2801      	cmp	r0, #1
   1f376:	dd07      	ble.n	1f388 <z_set_timeout_expiry+0x2e>
   1f378:	42a0      	cmp	r0, r4
   1f37a:	db05      	blt.n	1f388 <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   1f37c:	42a0      	cmp	r0, r4
   1f37e:	4629      	mov	r1, r5
   1f380:	bfa8      	it	ge
   1f382:	4620      	movge	r0, r4
   1f384:	f7f7 fc64 	bl	16c50 <sys_clock_set_timeout>
	__asm__ volatile(
   1f388:	f386 8811 	msr	BASEPRI, r6
   1f38c:	f3bf 8f6f 	isb	sy
}
   1f390:	bd70      	pop	{r4, r5, r6, pc}

0001f392 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   1f392:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   1f394:	f7fa fb46 	bl	19a24 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1f398:	bd08      	pop	{r3, pc}

0001f39a <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   1f39a:	f7fa bb43 	b.w	19a24 <sys_clock_tick_get>

0001f39e <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   1f39e:	b108      	cbz	r0, 1f3a4 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   1f3a0:	f7eb bd82 	b.w	aea8 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   1f3a4:	4770      	bx	lr

0001f3a6 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1f3a6:	f1b1 3fff 	cmp.w	r1, #4294967295
   1f3aa:	bf08      	it	eq
   1f3ac:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1f3b0:	b538      	push	{r3, r4, r5, lr}
   1f3b2:	460c      	mov	r4, r1
   1f3b4:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1f3b6:	d014      	beq.n	1f3e2 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1f3b8:	4308      	orrs	r0, r1
   1f3ba:	d103      	bne.n	1f3c4 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   1f3bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   1f3c0:	f7fa bb30 	b.w	19a24 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   1f3c4:	f06f 0001 	mvn.w	r0, #1
   1f3c8:	f04f 33ff 	mov.w	r3, #4294967295
   1f3cc:	1b40      	subs	r0, r0, r5
   1f3ce:	eb63 0101 	sbc.w	r1, r3, r1
   1f3d2:	2900      	cmp	r1, #0
   1f3d4:	da04      	bge.n	1f3e0 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   1f3d6:	f7fa fb25 	bl	19a24 <sys_clock_tick_get>
   1f3da:	1940      	adds	r0, r0, r5
   1f3dc:	eb41 0104 	adc.w	r1, r1, r4
}
   1f3e0:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   1f3e2:	f04f 30ff 	mov.w	r0, #4294967295
   1f3e6:	4601      	mov	r1, r0
   1f3e8:	e7fa      	b.n	1f3e0 <sys_clock_timeout_end_calc+0x3a>

0001f3ea <k_timer_init>:
	timer->status = 0U;
   1f3ea:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   1f3ec:	e9c0 1208 	strd	r1, r2, [r0, #32]
   1f3f0:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   1f3f4:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   1f3f8:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   1f3fc:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   1f3fe:	6343      	str	r3, [r0, #52]	; 0x34
}
   1f400:	4770      	bx	lr

0001f402 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   1f402:	b510      	push	{r4, lr}
   1f404:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   1f406:	f7ff ff82 	bl	1f30e <z_abort_timeout>

	if (inactive) {
   1f40a:	b9b0      	cbnz	r0, 1f43a <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   1f40c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f40e:	b10b      	cbz	r3, 1f414 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   1f410:	4620      	mov	r0, r4
   1f412:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   1f414:	f104 0018 	add.w	r0, r4, #24
   1f418:	f7ff fee9 	bl	1f1ee <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   1f41c:	b168      	cbz	r0, 1f43a <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   1f41e:	f7ff fec6 	bl	1f1ae <z_ready_thread>
	__asm__ volatile(
   1f422:	f04f 0320 	mov.w	r3, #32
   1f426:	f3ef 8011 	mrs	r0, BASEPRI
   1f42a:	f383 8812 	msr	BASEPRI_MAX, r3
   1f42e:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   1f432:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1f436:	f7ff bf21 	b.w	1f27c <z_reschedule_irqlock>
   1f43a:	bd10      	pop	{r4, pc}

0001f43c <add_event>:
{
   1f43c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f43e:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1f440:	e9d0 1300 	ldrd	r1, r3, [r0]
   1f444:	4288      	cmp	r0, r1
   1f446:	4604      	mov	r4, r0
   1f448:	d105      	bne.n	1f456 <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   1f44a:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   1f44c:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   1f450:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1f452:	6065      	str	r5, [r4, #4]
   1f454:	e01d      	b.n	1f492 <add_event+0x56>
	if ((pending == NULL) ||
   1f456:	2b00      	cmp	r3, #0
   1f458:	d0f7      	beq.n	1f44a <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1f45a:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1f45c:	b100      	cbz	r0, 1f460 <add_event+0x24>
   1f45e:	3860      	subs	r0, #96	; 0x60
   1f460:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1f464:	4639      	mov	r1, r7
   1f466:	f7ff fe4f 	bl	1f108 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   1f46a:	2800      	cmp	r0, #0
   1f46c:	dced      	bgt.n	1f44a <add_event+0xe>
	return list->head == list;
   1f46e:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f470:	42b4      	cmp	r4, r6
   1f472:	d0ea      	beq.n	1f44a <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1f474:	2e00      	cmp	r6, #0
   1f476:	d0e8      	beq.n	1f44a <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   1f478:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1f47a:	b101      	cbz	r1, 1f47e <add_event+0x42>
   1f47c:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   1f47e:	4638      	mov	r0, r7
   1f480:	f7ff fe42 	bl	1f108 <z_sched_prio_cmp>
   1f484:	2800      	cmp	r0, #0
   1f486:	dd05      	ble.n	1f494 <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   1f488:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   1f48a:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   1f48e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1f490:	6075      	str	r5, [r6, #4]
}
   1f492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1f494:	6863      	ldr	r3, [r4, #4]
   1f496:	429e      	cmp	r6, r3
   1f498:	d0d7      	beq.n	1f44a <add_event+0xe>
   1f49a:	6836      	ldr	r6, [r6, #0]
   1f49c:	e7ea      	b.n	1f474 <add_event+0x38>

0001f49e <register_events>:
{
   1f49e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   1f4a2:	2500      	movs	r5, #0
{
   1f4a4:	468b      	mov	fp, r1
   1f4a6:	4614      	mov	r4, r2
   1f4a8:	461f      	mov	r7, r3
   1f4aa:	4682      	mov	sl, r0
	int events_registered = 0;
   1f4ac:	462e      	mov	r6, r5
	event->poller = NULL;
   1f4ae:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   1f4b0:	455d      	cmp	r5, fp
   1f4b2:	db02      	blt.n	1f4ba <register_events+0x1c>
}
   1f4b4:	4630      	mov	r0, r6
   1f4b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f4ba:	f04f 0320 	mov.w	r3, #32
   1f4be:	f3ef 8911 	mrs	r9, BASEPRI
   1f4c2:	f383 8812 	msr	BASEPRI_MAX, r3
   1f4c6:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   1f4ca:	f89a 300d 	ldrb.w	r3, [sl, #13]
   1f4ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1f4d2:	3b01      	subs	r3, #1
   1f4d4:	2b07      	cmp	r3, #7
   1f4d6:	d80f      	bhi.n	1f4f8 <register_events+0x5a>
   1f4d8:	e8df f003 	tbb	[pc, r3]
   1f4dc:	0a0e041e 	.word	0x0a0e041e
   1f4e0:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
   1f4e4:	f8da 3010 	ldr.w	r3, [sl, #16]
   1f4e8:	689b      	ldr	r3, [r3, #8]
   1f4ea:	b12b      	cbz	r3, 1f4f8 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   1f4ec:	2302      	movs	r3, #2
   1f4ee:	e020      	b.n	1f532 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   1f4f0:	f8da 3010 	ldr.w	r3, [sl, #16]
   1f4f4:	681b      	ldr	r3, [r3, #0]
   1f4f6:	bb8b      	cbnz	r3, 1f55c <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   1f4f8:	bb47      	cbnz	r7, 1f54c <register_events+0xae>
   1f4fa:	7823      	ldrb	r3, [r4, #0]
   1f4fc:	b333      	cbz	r3, 1f54c <register_events+0xae>
	switch (event->type) {
   1f4fe:	f89a 300d 	ldrb.w	r3, [sl, #13]
   1f502:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1f506:	3b01      	subs	r3, #1
   1f508:	2b07      	cmp	r3, #7
   1f50a:	d830      	bhi.n	1f56e <register_events+0xd0>
   1f50c:	e8df f003 	tbb	[pc, r3]
   1f510:	282f2833 	.word	0x282f2833
   1f514:	382f2f2f 	.word	0x382f2f2f
		if (event->signal->signaled != 0U) {
   1f518:	f8da 3010 	ldr.w	r3, [sl, #16]
   1f51c:	689b      	ldr	r3, [r3, #8]
   1f51e:	2b00      	cmp	r3, #0
   1f520:	d0ea      	beq.n	1f4f8 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   1f522:	2301      	movs	r3, #1
   1f524:	e005      	b.n	1f532 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   1f526:	f8da 3010 	ldr.w	r3, [sl, #16]
   1f52a:	6a1b      	ldr	r3, [r3, #32]
   1f52c:	2b00      	cmp	r3, #0
   1f52e:	d0e3      	beq.n	1f4f8 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   1f530:	2310      	movs	r3, #16
	event->state |= state;
   1f532:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   1f536:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   1f53a:	f3c2 3186 	ubfx	r1, r2, #14, #7
   1f53e:	430b      	orrs	r3, r1
   1f540:	f363 3294 	bfi	r2, r3, #14, #7
   1f544:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   1f548:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   1f54c:	f389 8811 	msr	BASEPRI, r9
   1f550:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1f554:	3501      	adds	r5, #1
   1f556:	f10a 0a14 	add.w	sl, sl, #20
   1f55a:	e7a9      	b.n	1f4b0 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   1f55c:	2304      	movs	r3, #4
   1f55e:	e7e8      	b.n	1f532 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   1f560:	4622      	mov	r2, r4
   1f562:	4651      	mov	r1, sl
   1f564:	f8da 0010 	ldr.w	r0, [sl, #16]
   1f568:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   1f56a:	f7ff ff67 	bl	1f43c <add_event>
	event->poller = poller;
   1f56e:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   1f572:	3601      	adds	r6, #1
   1f574:	e7ea      	b.n	1f54c <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   1f576:	4622      	mov	r2, r4
   1f578:	4651      	mov	r1, sl
   1f57a:	f8da 0010 	ldr.w	r0, [sl, #16]
   1f57e:	e7f4      	b.n	1f56a <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   1f580:	f8da 0010 	ldr.w	r0, [sl, #16]
   1f584:	4622      	mov	r2, r4
   1f586:	4651      	mov	r1, sl
   1f588:	3024      	adds	r0, #36	; 0x24
   1f58a:	e7ee      	b.n	1f56a <register_events+0xcc>

0001f58c <signal_poll_event>:
{
   1f58c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   1f590:	6884      	ldr	r4, [r0, #8]
{
   1f592:	4605      	mov	r5, r0
   1f594:	460e      	mov	r6, r1
	if (poller != NULL) {
   1f596:	b144      	cbz	r4, 1f5aa <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   1f598:	7863      	ldrb	r3, [r4, #1]
   1f59a:	2b01      	cmp	r3, #1
   1f59c:	d12e      	bne.n	1f5fc <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   1f59e:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   1f5a2:	f013 0302 	ands.w	r3, r3, #2
   1f5a6:	d10a      	bne.n	1f5be <signal_poll_event+0x32>
		poller->is_polling = false;
   1f5a8:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   1f5aa:	2000      	movs	r0, #0
	event->state |= state;
   1f5ac:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   1f5ae:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   1f5b0:	f3c3 3286 	ubfx	r2, r3, #14, #7
   1f5b4:	4316      	orrs	r6, r2
   1f5b6:	f366 3394 	bfi	r3, r6, #14, #7
   1f5ba:	60eb      	str	r3, [r5, #12]
	return retcode;
   1f5bc:	e03e      	b.n	1f63c <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   1f5be:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   1f5c2:	f1b3 3fff 	cmp.w	r3, #4294967295
   1f5c6:	bf08      	it	eq
   1f5c8:	f112 0f02 	cmneq.w	r2, #2
   1f5cc:	d032      	beq.n	1f634 <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1f5ce:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   1f5d2:	4640      	mov	r0, r8
   1f5d4:	f7ff fe3e 	bl	1f254 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   1f5d8:	2e08      	cmp	r6, #8
   1f5da:	bf0c      	ite	eq
   1f5dc:	f06f 0303 	mvneq.w	r3, #3
   1f5e0:	2300      	movne	r3, #0
   1f5e2:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1f5e4:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   1f5e8:	06db      	lsls	r3, r3, #27
   1f5ea:	d109      	bne.n	1f600 <signal_poll_event+0x74>
   1f5ec:	f854 7c48 	ldr.w	r7, [r4, #-72]
   1f5f0:	b937      	cbnz	r7, 1f600 <signal_poll_event+0x74>
	z_ready_thread(thread);
   1f5f2:	4640      	mov	r0, r8
   1f5f4:	f7ff fddb 	bl	1f1ae <z_ready_thread>
		poller->is_polling = false;
   1f5f8:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   1f5fa:	e7d6      	b.n	1f5aa <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   1f5fc:	2b02      	cmp	r3, #2
   1f5fe:	d001      	beq.n	1f604 <signal_poll_event+0x78>
		poller->is_polling = false;
   1f600:	2300      	movs	r3, #0
   1f602:	e7d1      	b.n	1f5a8 <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   1f604:	7823      	ldrb	r3, [r4, #0]
   1f606:	2b00      	cmp	r3, #0
   1f608:	d0cf      	beq.n	1f5aa <signal_poll_event+0x1e>
   1f60a:	f854 7c04 	ldr.w	r7, [r4, #-4]
   1f60e:	2f00      	cmp	r7, #0
   1f610:	d0f2      	beq.n	1f5f8 <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   1f612:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   1f616:	f1a4 0914 	sub.w	r9, r4, #20
   1f61a:	f104 0014 	add.w	r0, r4, #20
   1f61e:	f7ff fe76 	bl	1f30e <z_abort_timeout>
		z_work_submit_to_queue(work_q, &twork->work);
   1f622:	4649      	mov	r1, r9
   1f624:	4638      	mov	r0, r7
		twork->poll_result = 0;
   1f626:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   1f62a:	f7ff fcdd 	bl	1efe8 <z_work_submit_to_queue>
		poller->is_polling = false;
   1f62e:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   1f632:	e7ba      	b.n	1f5aa <signal_poll_event+0x1e>
		poller->is_polling = false;
   1f634:	2300      	movs	r3, #0
		return -EAGAIN;
   1f636:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   1f63a:	7023      	strb	r3, [r4, #0]
}
   1f63c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001f640 <clear_event_registrations>:
	while (num_events--) {
   1f640:	2314      	movs	r3, #20
{
   1f642:	b5f0      	push	{r4, r5, r6, r7, lr}
	event->poller = NULL;
   1f644:	2400      	movs	r4, #0
	switch (event->type) {
   1f646:	f44f 768b 	mov.w	r6, #278	; 0x116
   1f64a:	fb03 0001 	mla	r0, r3, r1, r0
	while (num_events--) {
   1f64e:	b901      	cbnz	r1, 1f652 <clear_event_registrations+0x12>
}
   1f650:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   1f652:	f810 3c07 	ldrb.w	r3, [r0, #-7]
   1f656:	f1a0 0714 	sub.w	r7, r0, #20
   1f65a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1f65e:	2b08      	cmp	r3, #8
	event->poller = NULL;
   1f660:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   1f664:	d80c      	bhi.n	1f680 <clear_event_registrations+0x40>
   1f666:	fa26 f303 	lsr.w	r3, r6, r3
   1f66a:	07db      	lsls	r3, r3, #31
   1f66c:	d508      	bpl.n	1f680 <clear_event_registrations+0x40>
	return node->next != NULL;
   1f66e:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   1f672:	b12b      	cbz	r3, 1f680 <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   1f674:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   1f678:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   1f67a:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   1f67c:	e940 4405 	strd	r4, r4, [r0, #-20]
   1f680:	f382 8811 	msr	BASEPRI, r2
   1f684:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1f688:	f04f 0320 	mov.w	r3, #32
   1f68c:	f3ef 8211 	mrs	r2, BASEPRI
   1f690:	f383 8812 	msr	BASEPRI_MAX, r3
   1f694:	f3bf 8f6f 	isb	sy
   1f698:	4638      	mov	r0, r7
   1f69a:	3901      	subs	r1, #1
   1f69c:	e7d7      	b.n	1f64e <clear_event_registrations+0xe>

0001f69e <k_poll_event_init>:
{
   1f69e:	b510      	push	{r4, lr}
	event->poller = NULL;
   1f6a0:	2400      	movs	r4, #0
	event->type = type;
   1f6a2:	0552      	lsls	r2, r2, #21
   1f6a4:	0209      	lsls	r1, r1, #8
   1f6a6:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   1f6aa:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
   1f6ae:	430a      	orrs	r2, r1
   1f6b0:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   1f6b2:	6084      	str	r4, [r0, #8]
	event->type = type;
   1f6b4:	430a      	orrs	r2, r1
	event->obj = obj;
   1f6b6:	e9c0 2303 	strd	r2, r3, [r0, #12]
}
   1f6ba:	bd10      	pop	{r4, pc}

0001f6bc <z_handle_obj_poll_events>:
{
   1f6bc:	4603      	mov	r3, r0
	return list->head == list;
   1f6be:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1f6c0:	4283      	cmp	r3, r0
   1f6c2:	d008      	beq.n	1f6d6 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   1f6c4:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1f6c8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1f6ca:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1f6cc:	2300      	movs	r3, #0
	node->prev = NULL;
   1f6ce:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   1f6d2:	f7ff bf5b 	b.w	1f58c <signal_poll_event>
}
   1f6d6:	4770      	bx	lr

0001f6d8 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   1f6d8:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   1f6da:	e9c0 0000 	strd	r0, r0, [r0]
   1f6de:	6083      	str	r3, [r0, #8]
}
   1f6e0:	4770      	bx	lr

0001f6e2 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1f6e2:	3204      	adds	r2, #4
{
   1f6e4:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   1f6e6:	4604      	mov	r4, r0
   1f6e8:	d208      	bcs.n	1f6fc <z_heap_aligned_alloc+0x1a>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   1f6ea:	2600      	movs	r6, #0
   1f6ec:	2700      	movs	r7, #0
   1f6ee:	f041 0104 	orr.w	r1, r1, #4
   1f6f2:	e9cd 6700 	strd	r6, r7, [sp]
   1f6f6:	f7ff fa3e 	bl	1eb76 <k_heap_aligned_alloc>
	if (mem == NULL) {
   1f6fa:	b910      	cbnz	r0, 1f702 <z_heap_aligned_alloc+0x20>
		return NULL;
   1f6fc:	2000      	movs	r0, #0
}
   1f6fe:	b002      	add	sp, #8
   1f700:	bdd0      	pop	{r4, r6, r7, pc}
	*heap_ref = heap;
   1f702:	f840 4b04 	str.w	r4, [r0], #4
	return mem;
   1f706:	e7fa      	b.n	1f6fe <z_heap_aligned_alloc+0x1c>

0001f708 <k_free>:
	if (ptr != NULL) {
   1f708:	b120      	cbz	r0, 1f714 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   1f70a:	1f01      	subs	r1, r0, #4
   1f70c:	f850 0c04 	ldr.w	r0, [r0, #-4]
   1f710:	f7ff ba7e 	b.w	1ec10 <k_heap_free>
}
   1f714:	4770      	bx	lr

0001f716 <k_malloc>:
{
   1f716:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   1f718:	2004      	movs	r0, #4
   1f71a:	f7fa bad7 	b.w	19ccc <k_aligned_alloc>
	...
