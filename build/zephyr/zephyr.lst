
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00008000 <_vector_table>:
    8000:	88 d1 00 20 e9 e0 00 00 3d db 01 00 bd e0 00 00     ... ....=.......
    8010:	bd e0 00 00 bd e0 00 00 bd e0 00 00 bd e0 00 00     ................
	...
    802c:	ed d8 00 00 bd e0 00 00 00 00 00 00 8d d8 00 00     ................
    803c:	bd e0 00 00                                         ....

00008040 <_irq_vector_table>:
    8040:	75 d9 00 00 75 d9 00 00 75 d9 00 00 75 d9 00 00     u...u...u...u...
    8050:	75 d9 00 00 75 d9 00 00 75 d9 00 00 75 d9 00 00     u...u...u...u...
    8060:	75 d9 00 00 75 d9 00 00 75 d9 00 00 75 d9 00 00     u...u...u...u...
    8070:	75 d9 00 00 75 d9 00 00 75 d9 00 00 75 d9 00 00     u...u...u...u...
    8080:	75 d9 00 00 75 d9 00 00 75 d9 00 00 75 d9 00 00     u...u...u...u...
    8090:	75 d9 00 00 75 d9 00 00 75 d9 00 00 75 d9 00 00     u...u...u...u...
    80a0:	75 d9 00 00 75 d9 00 00 75 d9 00 00 75 d9 00 00     u...u...u...u...
    80b0:	75 d9 00 00 75 d9 00 00 75 d9 00 00 75 d9 00 00     u...u...u...u...
    80c0:	75 d9 00 00 75 d9 00 00 75 d9 00 00 75 d9 00 00     u...u...u...u...
    80d0:	75 d9 00 00 75 d9 00 00 75 d9 00 00 75 d9 00 00     u...u...u...u...
    80e0:	75 d9 00 00 75 d9 00 00 75 d9 00 00 75 d9 00 00     u...u...u...u...
    80f0:	75 d9 00 00 75 d9 00 00 75 d9 00 00 75 d9 00 00     u...u...u...u...
    8100:	75 d9 00 00 75 d9 00 00 75 d9 00 00 75 d9 00 00     u...u...u...u...
    8110:	75 d9 00 00 75 d9 00 00 75 d9 00 00 75 d9 00 00     u...u...u...u...
    8120:	75 d9 00 00 75 d9 00 00 75 d9 00 00 75 d9 00 00     u...u...u...u...
    8130:	75 d9 00 00 75 d9 00 00 75 d9 00 00 75 d9 00 00     u...u...u...u...
    8140:	75 d9 00 00 75 d9 00 00 75 d9 00 00 75 d9 00 00     u...u...u...u...
    8150:	75 d9 00 00                                         u...

Disassembly of section text:

00008158 <__aeabi_drsub>:
    8158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    815c:	e002      	b.n	8164 <__adddf3>
    815e:	bf00      	nop

00008160 <__aeabi_dsub>:
    8160:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00008164 <__adddf3>:
    8164:	b530      	push	{r4, r5, lr}
    8166:	ea4f 0441 	mov.w	r4, r1, lsl #1
    816a:	ea4f 0543 	mov.w	r5, r3, lsl #1
    816e:	ea94 0f05 	teq	r4, r5
    8172:	bf08      	it	eq
    8174:	ea90 0f02 	teqeq	r0, r2
    8178:	bf1f      	itttt	ne
    817a:	ea54 0c00 	orrsne.w	ip, r4, r0
    817e:	ea55 0c02 	orrsne.w	ip, r5, r2
    8182:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    8186:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    818a:	f000 80e2 	beq.w	8352 <__adddf3+0x1ee>
    818e:	ea4f 5454 	mov.w	r4, r4, lsr #21
    8192:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    8196:	bfb8      	it	lt
    8198:	426d      	neglt	r5, r5
    819a:	dd0c      	ble.n	81b6 <__adddf3+0x52>
    819c:	442c      	add	r4, r5
    819e:	ea80 0202 	eor.w	r2, r0, r2
    81a2:	ea81 0303 	eor.w	r3, r1, r3
    81a6:	ea82 0000 	eor.w	r0, r2, r0
    81aa:	ea83 0101 	eor.w	r1, r3, r1
    81ae:	ea80 0202 	eor.w	r2, r0, r2
    81b2:	ea81 0303 	eor.w	r3, r1, r3
    81b6:	2d36      	cmp	r5, #54	; 0x36
    81b8:	bf88      	it	hi
    81ba:	bd30      	pophi	{r4, r5, pc}
    81bc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    81c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
    81c4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    81c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    81cc:	d002      	beq.n	81d4 <__adddf3+0x70>
    81ce:	4240      	negs	r0, r0
    81d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    81d4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    81d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
    81dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    81e0:	d002      	beq.n	81e8 <__adddf3+0x84>
    81e2:	4252      	negs	r2, r2
    81e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    81e8:	ea94 0f05 	teq	r4, r5
    81ec:	f000 80a7 	beq.w	833e <__adddf3+0x1da>
    81f0:	f1a4 0401 	sub.w	r4, r4, #1
    81f4:	f1d5 0e20 	rsbs	lr, r5, #32
    81f8:	db0d      	blt.n	8216 <__adddf3+0xb2>
    81fa:	fa02 fc0e 	lsl.w	ip, r2, lr
    81fe:	fa22 f205 	lsr.w	r2, r2, r5
    8202:	1880      	adds	r0, r0, r2
    8204:	f141 0100 	adc.w	r1, r1, #0
    8208:	fa03 f20e 	lsl.w	r2, r3, lr
    820c:	1880      	adds	r0, r0, r2
    820e:	fa43 f305 	asr.w	r3, r3, r5
    8212:	4159      	adcs	r1, r3
    8214:	e00e      	b.n	8234 <__adddf3+0xd0>
    8216:	f1a5 0520 	sub.w	r5, r5, #32
    821a:	f10e 0e20 	add.w	lr, lr, #32
    821e:	2a01      	cmp	r2, #1
    8220:	fa03 fc0e 	lsl.w	ip, r3, lr
    8224:	bf28      	it	cs
    8226:	f04c 0c02 	orrcs.w	ip, ip, #2
    822a:	fa43 f305 	asr.w	r3, r3, r5
    822e:	18c0      	adds	r0, r0, r3
    8230:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    8234:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    8238:	d507      	bpl.n	824a <__adddf3+0xe6>
    823a:	f04f 0e00 	mov.w	lr, #0
    823e:	f1dc 0c00 	rsbs	ip, ip, #0
    8242:	eb7e 0000 	sbcs.w	r0, lr, r0
    8246:	eb6e 0101 	sbc.w	r1, lr, r1
    824a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    824e:	d31b      	bcc.n	8288 <__adddf3+0x124>
    8250:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    8254:	d30c      	bcc.n	8270 <__adddf3+0x10c>
    8256:	0849      	lsrs	r1, r1, #1
    8258:	ea5f 0030 	movs.w	r0, r0, rrx
    825c:	ea4f 0c3c 	mov.w	ip, ip, rrx
    8260:	f104 0401 	add.w	r4, r4, #1
    8264:	ea4f 5244 	mov.w	r2, r4, lsl #21
    8268:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    826c:	f080 809a 	bcs.w	83a4 <__adddf3+0x240>
    8270:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    8274:	bf08      	it	eq
    8276:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    827a:	f150 0000 	adcs.w	r0, r0, #0
    827e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    8282:	ea41 0105 	orr.w	r1, r1, r5
    8286:	bd30      	pop	{r4, r5, pc}
    8288:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    828c:	4140      	adcs	r0, r0
    828e:	eb41 0101 	adc.w	r1, r1, r1
    8292:	3c01      	subs	r4, #1
    8294:	bf28      	it	cs
    8296:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    829a:	d2e9      	bcs.n	8270 <__adddf3+0x10c>
    829c:	f091 0f00 	teq	r1, #0
    82a0:	bf04      	itt	eq
    82a2:	4601      	moveq	r1, r0
    82a4:	2000      	moveq	r0, #0
    82a6:	fab1 f381 	clz	r3, r1
    82aa:	bf08      	it	eq
    82ac:	3320      	addeq	r3, #32
    82ae:	f1a3 030b 	sub.w	r3, r3, #11
    82b2:	f1b3 0220 	subs.w	r2, r3, #32
    82b6:	da0c      	bge.n	82d2 <__adddf3+0x16e>
    82b8:	320c      	adds	r2, #12
    82ba:	dd08      	ble.n	82ce <__adddf3+0x16a>
    82bc:	f102 0c14 	add.w	ip, r2, #20
    82c0:	f1c2 020c 	rsb	r2, r2, #12
    82c4:	fa01 f00c 	lsl.w	r0, r1, ip
    82c8:	fa21 f102 	lsr.w	r1, r1, r2
    82cc:	e00c      	b.n	82e8 <__adddf3+0x184>
    82ce:	f102 0214 	add.w	r2, r2, #20
    82d2:	bfd8      	it	le
    82d4:	f1c2 0c20 	rsble	ip, r2, #32
    82d8:	fa01 f102 	lsl.w	r1, r1, r2
    82dc:	fa20 fc0c 	lsr.w	ip, r0, ip
    82e0:	bfdc      	itt	le
    82e2:	ea41 010c 	orrle.w	r1, r1, ip
    82e6:	4090      	lslle	r0, r2
    82e8:	1ae4      	subs	r4, r4, r3
    82ea:	bfa2      	ittt	ge
    82ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    82f0:	4329      	orrge	r1, r5
    82f2:	bd30      	popge	{r4, r5, pc}
    82f4:	ea6f 0404 	mvn.w	r4, r4
    82f8:	3c1f      	subs	r4, #31
    82fa:	da1c      	bge.n	8336 <__adddf3+0x1d2>
    82fc:	340c      	adds	r4, #12
    82fe:	dc0e      	bgt.n	831e <__adddf3+0x1ba>
    8300:	f104 0414 	add.w	r4, r4, #20
    8304:	f1c4 0220 	rsb	r2, r4, #32
    8308:	fa20 f004 	lsr.w	r0, r0, r4
    830c:	fa01 f302 	lsl.w	r3, r1, r2
    8310:	ea40 0003 	orr.w	r0, r0, r3
    8314:	fa21 f304 	lsr.w	r3, r1, r4
    8318:	ea45 0103 	orr.w	r1, r5, r3
    831c:	bd30      	pop	{r4, r5, pc}
    831e:	f1c4 040c 	rsb	r4, r4, #12
    8322:	f1c4 0220 	rsb	r2, r4, #32
    8326:	fa20 f002 	lsr.w	r0, r0, r2
    832a:	fa01 f304 	lsl.w	r3, r1, r4
    832e:	ea40 0003 	orr.w	r0, r0, r3
    8332:	4629      	mov	r1, r5
    8334:	bd30      	pop	{r4, r5, pc}
    8336:	fa21 f004 	lsr.w	r0, r1, r4
    833a:	4629      	mov	r1, r5
    833c:	bd30      	pop	{r4, r5, pc}
    833e:	f094 0f00 	teq	r4, #0
    8342:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    8346:	bf06      	itte	eq
    8348:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    834c:	3401      	addeq	r4, #1
    834e:	3d01      	subne	r5, #1
    8350:	e74e      	b.n	81f0 <__adddf3+0x8c>
    8352:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    8356:	bf18      	it	ne
    8358:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    835c:	d029      	beq.n	83b2 <__adddf3+0x24e>
    835e:	ea94 0f05 	teq	r4, r5
    8362:	bf08      	it	eq
    8364:	ea90 0f02 	teqeq	r0, r2
    8368:	d005      	beq.n	8376 <__adddf3+0x212>
    836a:	ea54 0c00 	orrs.w	ip, r4, r0
    836e:	bf04      	itt	eq
    8370:	4619      	moveq	r1, r3
    8372:	4610      	moveq	r0, r2
    8374:	bd30      	pop	{r4, r5, pc}
    8376:	ea91 0f03 	teq	r1, r3
    837a:	bf1e      	ittt	ne
    837c:	2100      	movne	r1, #0
    837e:	2000      	movne	r0, #0
    8380:	bd30      	popne	{r4, r5, pc}
    8382:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    8386:	d105      	bne.n	8394 <__adddf3+0x230>
    8388:	0040      	lsls	r0, r0, #1
    838a:	4149      	adcs	r1, r1
    838c:	bf28      	it	cs
    838e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    8392:	bd30      	pop	{r4, r5, pc}
    8394:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    8398:	bf3c      	itt	cc
    839a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    839e:	bd30      	popcc	{r4, r5, pc}
    83a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    83a4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    83a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    83ac:	f04f 0000 	mov.w	r0, #0
    83b0:	bd30      	pop	{r4, r5, pc}
    83b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    83b6:	bf1a      	itte	ne
    83b8:	4619      	movne	r1, r3
    83ba:	4610      	movne	r0, r2
    83bc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    83c0:	bf1c      	itt	ne
    83c2:	460b      	movne	r3, r1
    83c4:	4602      	movne	r2, r0
    83c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    83ca:	bf06      	itte	eq
    83cc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    83d0:	ea91 0f03 	teqeq	r1, r3
    83d4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    83d8:	bd30      	pop	{r4, r5, pc}
    83da:	bf00      	nop

000083dc <__aeabi_ui2d>:
    83dc:	f090 0f00 	teq	r0, #0
    83e0:	bf04      	itt	eq
    83e2:	2100      	moveq	r1, #0
    83e4:	4770      	bxeq	lr
    83e6:	b530      	push	{r4, r5, lr}
    83e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
    83ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
    83f0:	f04f 0500 	mov.w	r5, #0
    83f4:	f04f 0100 	mov.w	r1, #0
    83f8:	e750      	b.n	829c <__adddf3+0x138>
    83fa:	bf00      	nop

000083fc <__aeabi_i2d>:
    83fc:	f090 0f00 	teq	r0, #0
    8400:	bf04      	itt	eq
    8402:	2100      	moveq	r1, #0
    8404:	4770      	bxeq	lr
    8406:	b530      	push	{r4, r5, lr}
    8408:	f44f 6480 	mov.w	r4, #1024	; 0x400
    840c:	f104 0432 	add.w	r4, r4, #50	; 0x32
    8410:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    8414:	bf48      	it	mi
    8416:	4240      	negmi	r0, r0
    8418:	f04f 0100 	mov.w	r1, #0
    841c:	e73e      	b.n	829c <__adddf3+0x138>
    841e:	bf00      	nop

00008420 <__aeabi_f2d>:
    8420:	0042      	lsls	r2, r0, #1
    8422:	ea4f 01e2 	mov.w	r1, r2, asr #3
    8426:	ea4f 0131 	mov.w	r1, r1, rrx
    842a:	ea4f 7002 	mov.w	r0, r2, lsl #28
    842e:	bf1f      	itttt	ne
    8430:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    8434:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    8438:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    843c:	4770      	bxne	lr
    843e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    8442:	bf08      	it	eq
    8444:	4770      	bxeq	lr
    8446:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    844a:	bf04      	itt	eq
    844c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    8450:	4770      	bxeq	lr
    8452:	b530      	push	{r4, r5, lr}
    8454:	f44f 7460 	mov.w	r4, #896	; 0x380
    8458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    845c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    8460:	e71c      	b.n	829c <__adddf3+0x138>
    8462:	bf00      	nop

00008464 <__aeabi_ul2d>:
    8464:	ea50 0201 	orrs.w	r2, r0, r1
    8468:	bf08      	it	eq
    846a:	4770      	bxeq	lr
    846c:	b530      	push	{r4, r5, lr}
    846e:	f04f 0500 	mov.w	r5, #0
    8472:	e00a      	b.n	848a <__aeabi_l2d+0x16>

00008474 <__aeabi_l2d>:
    8474:	ea50 0201 	orrs.w	r2, r0, r1
    8478:	bf08      	it	eq
    847a:	4770      	bxeq	lr
    847c:	b530      	push	{r4, r5, lr}
    847e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    8482:	d502      	bpl.n	848a <__aeabi_l2d+0x16>
    8484:	4240      	negs	r0, r0
    8486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    848a:	f44f 6480 	mov.w	r4, #1024	; 0x400
    848e:	f104 0432 	add.w	r4, r4, #50	; 0x32
    8492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    8496:	f43f aed8 	beq.w	824a <__adddf3+0xe6>
    849a:	f04f 0203 	mov.w	r2, #3
    849e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    84a2:	bf18      	it	ne
    84a4:	3203      	addne	r2, #3
    84a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    84aa:	bf18      	it	ne
    84ac:	3203      	addne	r2, #3
    84ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    84b2:	f1c2 0320 	rsb	r3, r2, #32
    84b6:	fa00 fc03 	lsl.w	ip, r0, r3
    84ba:	fa20 f002 	lsr.w	r0, r0, r2
    84be:	fa01 fe03 	lsl.w	lr, r1, r3
    84c2:	ea40 000e 	orr.w	r0, r0, lr
    84c6:	fa21 f102 	lsr.w	r1, r1, r2
    84ca:	4414      	add	r4, r2
    84cc:	e6bd      	b.n	824a <__adddf3+0xe6>
    84ce:	bf00      	nop

000084d0 <__aeabi_dmul>:
    84d0:	b570      	push	{r4, r5, r6, lr}
    84d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
    84d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    84da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    84de:	bf1d      	ittte	ne
    84e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    84e4:	ea94 0f0c 	teqne	r4, ip
    84e8:	ea95 0f0c 	teqne	r5, ip
    84ec:	f000 f8de 	bleq	86ac <__aeabi_dmul+0x1dc>
    84f0:	442c      	add	r4, r5
    84f2:	ea81 0603 	eor.w	r6, r1, r3
    84f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    84fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    84fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    8502:	bf18      	it	ne
    8504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    8508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    850c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    8510:	d038      	beq.n	8584 <__aeabi_dmul+0xb4>
    8512:	fba0 ce02 	umull	ip, lr, r0, r2
    8516:	f04f 0500 	mov.w	r5, #0
    851a:	fbe1 e502 	umlal	lr, r5, r1, r2
    851e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    8522:	fbe0 e503 	umlal	lr, r5, r0, r3
    8526:	f04f 0600 	mov.w	r6, #0
    852a:	fbe1 5603 	umlal	r5, r6, r1, r3
    852e:	f09c 0f00 	teq	ip, #0
    8532:	bf18      	it	ne
    8534:	f04e 0e01 	orrne.w	lr, lr, #1
    8538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    853c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    8540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    8544:	d204      	bcs.n	8550 <__aeabi_dmul+0x80>
    8546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    854a:	416d      	adcs	r5, r5
    854c:	eb46 0606 	adc.w	r6, r6, r6
    8550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    8554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    8558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    855c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    8560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    8564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    8568:	bf88      	it	hi
    856a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    856e:	d81e      	bhi.n	85ae <__aeabi_dmul+0xde>
    8570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    8574:	bf08      	it	eq
    8576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    857a:	f150 0000 	adcs.w	r0, r0, #0
    857e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    8582:	bd70      	pop	{r4, r5, r6, pc}
    8584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    8588:	ea46 0101 	orr.w	r1, r6, r1
    858c:	ea40 0002 	orr.w	r0, r0, r2
    8590:	ea81 0103 	eor.w	r1, r1, r3
    8594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    8598:	bfc2      	ittt	gt
    859a:	ebd4 050c 	rsbsgt	r5, r4, ip
    859e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    85a2:	bd70      	popgt	{r4, r5, r6, pc}
    85a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    85a8:	f04f 0e00 	mov.w	lr, #0
    85ac:	3c01      	subs	r4, #1
    85ae:	f300 80ab 	bgt.w	8708 <__aeabi_dmul+0x238>
    85b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
    85b6:	bfde      	ittt	le
    85b8:	2000      	movle	r0, #0
    85ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    85be:	bd70      	pople	{r4, r5, r6, pc}
    85c0:	f1c4 0400 	rsb	r4, r4, #0
    85c4:	3c20      	subs	r4, #32
    85c6:	da35      	bge.n	8634 <__aeabi_dmul+0x164>
    85c8:	340c      	adds	r4, #12
    85ca:	dc1b      	bgt.n	8604 <__aeabi_dmul+0x134>
    85cc:	f104 0414 	add.w	r4, r4, #20
    85d0:	f1c4 0520 	rsb	r5, r4, #32
    85d4:	fa00 f305 	lsl.w	r3, r0, r5
    85d8:	fa20 f004 	lsr.w	r0, r0, r4
    85dc:	fa01 f205 	lsl.w	r2, r1, r5
    85e0:	ea40 0002 	orr.w	r0, r0, r2
    85e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    85e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    85ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    85f0:	fa21 f604 	lsr.w	r6, r1, r4
    85f4:	eb42 0106 	adc.w	r1, r2, r6
    85f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    85fc:	bf08      	it	eq
    85fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    8602:	bd70      	pop	{r4, r5, r6, pc}
    8604:	f1c4 040c 	rsb	r4, r4, #12
    8608:	f1c4 0520 	rsb	r5, r4, #32
    860c:	fa00 f304 	lsl.w	r3, r0, r4
    8610:	fa20 f005 	lsr.w	r0, r0, r5
    8614:	fa01 f204 	lsl.w	r2, r1, r4
    8618:	ea40 0002 	orr.w	r0, r0, r2
    861c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    8624:	f141 0100 	adc.w	r1, r1, #0
    8628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    862c:	bf08      	it	eq
    862e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    8632:	bd70      	pop	{r4, r5, r6, pc}
    8634:	f1c4 0520 	rsb	r5, r4, #32
    8638:	fa00 f205 	lsl.w	r2, r0, r5
    863c:	ea4e 0e02 	orr.w	lr, lr, r2
    8640:	fa20 f304 	lsr.w	r3, r0, r4
    8644:	fa01 f205 	lsl.w	r2, r1, r5
    8648:	ea43 0302 	orr.w	r3, r3, r2
    864c:	fa21 f004 	lsr.w	r0, r1, r4
    8650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8654:	fa21 f204 	lsr.w	r2, r1, r4
    8658:	ea20 0002 	bic.w	r0, r0, r2
    865c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    8660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    8664:	bf08      	it	eq
    8666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    866a:	bd70      	pop	{r4, r5, r6, pc}
    866c:	f094 0f00 	teq	r4, #0
    8670:	d10f      	bne.n	8692 <__aeabi_dmul+0x1c2>
    8672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    8676:	0040      	lsls	r0, r0, #1
    8678:	eb41 0101 	adc.w	r1, r1, r1
    867c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8680:	bf08      	it	eq
    8682:	3c01      	subeq	r4, #1
    8684:	d0f7      	beq.n	8676 <__aeabi_dmul+0x1a6>
    8686:	ea41 0106 	orr.w	r1, r1, r6
    868a:	f095 0f00 	teq	r5, #0
    868e:	bf18      	it	ne
    8690:	4770      	bxne	lr
    8692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    8696:	0052      	lsls	r2, r2, #1
    8698:	eb43 0303 	adc.w	r3, r3, r3
    869c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    86a0:	bf08      	it	eq
    86a2:	3d01      	subeq	r5, #1
    86a4:	d0f7      	beq.n	8696 <__aeabi_dmul+0x1c6>
    86a6:	ea43 0306 	orr.w	r3, r3, r6
    86aa:	4770      	bx	lr
    86ac:	ea94 0f0c 	teq	r4, ip
    86b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    86b4:	bf18      	it	ne
    86b6:	ea95 0f0c 	teqne	r5, ip
    86ba:	d00c      	beq.n	86d6 <__aeabi_dmul+0x206>
    86bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    86c0:	bf18      	it	ne
    86c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    86c6:	d1d1      	bne.n	866c <__aeabi_dmul+0x19c>
    86c8:	ea81 0103 	eor.w	r1, r1, r3
    86cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    86d0:	f04f 0000 	mov.w	r0, #0
    86d4:	bd70      	pop	{r4, r5, r6, pc}
    86d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    86da:	bf06      	itte	eq
    86dc:	4610      	moveq	r0, r2
    86de:	4619      	moveq	r1, r3
    86e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    86e4:	d019      	beq.n	871a <__aeabi_dmul+0x24a>
    86e6:	ea94 0f0c 	teq	r4, ip
    86ea:	d102      	bne.n	86f2 <__aeabi_dmul+0x222>
    86ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    86f0:	d113      	bne.n	871a <__aeabi_dmul+0x24a>
    86f2:	ea95 0f0c 	teq	r5, ip
    86f6:	d105      	bne.n	8704 <__aeabi_dmul+0x234>
    86f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    86fc:	bf1c      	itt	ne
    86fe:	4610      	movne	r0, r2
    8700:	4619      	movne	r1, r3
    8702:	d10a      	bne.n	871a <__aeabi_dmul+0x24a>
    8704:	ea81 0103 	eor.w	r1, r1, r3
    8708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    870c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    8710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    8714:	f04f 0000 	mov.w	r0, #0
    8718:	bd70      	pop	{r4, r5, r6, pc}
    871a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    871e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    8722:	bd70      	pop	{r4, r5, r6, pc}

00008724 <__aeabi_ddiv>:
    8724:	b570      	push	{r4, r5, r6, lr}
    8726:	f04f 0cff 	mov.w	ip, #255	; 0xff
    872a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    872e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    8732:	bf1d      	ittte	ne
    8734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    8738:	ea94 0f0c 	teqne	r4, ip
    873c:	ea95 0f0c 	teqne	r5, ip
    8740:	f000 f8a7 	bleq	8892 <__aeabi_ddiv+0x16e>
    8744:	eba4 0405 	sub.w	r4, r4, r5
    8748:	ea81 0e03 	eor.w	lr, r1, r3
    874c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    8750:	ea4f 3101 	mov.w	r1, r1, lsl #12
    8754:	f000 8088 	beq.w	8868 <__aeabi_ddiv+0x144>
    8758:	ea4f 3303 	mov.w	r3, r3, lsl #12
    875c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    8760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    8764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    8768:	ea4f 2202 	mov.w	r2, r2, lsl #8
    876c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    8770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    8774:	ea4f 2600 	mov.w	r6, r0, lsl #8
    8778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    877c:	429d      	cmp	r5, r3
    877e:	bf08      	it	eq
    8780:	4296      	cmpeq	r6, r2
    8782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    8786:	f504 7440 	add.w	r4, r4, #768	; 0x300
    878a:	d202      	bcs.n	8792 <__aeabi_ddiv+0x6e>
    878c:	085b      	lsrs	r3, r3, #1
    878e:	ea4f 0232 	mov.w	r2, r2, rrx
    8792:	1ab6      	subs	r6, r6, r2
    8794:	eb65 0503 	sbc.w	r5, r5, r3
    8798:	085b      	lsrs	r3, r3, #1
    879a:	ea4f 0232 	mov.w	r2, r2, rrx
    879e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    87a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    87a6:	ebb6 0e02 	subs.w	lr, r6, r2
    87aa:	eb75 0e03 	sbcs.w	lr, r5, r3
    87ae:	bf22      	ittt	cs
    87b0:	1ab6      	subcs	r6, r6, r2
    87b2:	4675      	movcs	r5, lr
    87b4:	ea40 000c 	orrcs.w	r0, r0, ip
    87b8:	085b      	lsrs	r3, r3, #1
    87ba:	ea4f 0232 	mov.w	r2, r2, rrx
    87be:	ebb6 0e02 	subs.w	lr, r6, r2
    87c2:	eb75 0e03 	sbcs.w	lr, r5, r3
    87c6:	bf22      	ittt	cs
    87c8:	1ab6      	subcs	r6, r6, r2
    87ca:	4675      	movcs	r5, lr
    87cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    87d0:	085b      	lsrs	r3, r3, #1
    87d2:	ea4f 0232 	mov.w	r2, r2, rrx
    87d6:	ebb6 0e02 	subs.w	lr, r6, r2
    87da:	eb75 0e03 	sbcs.w	lr, r5, r3
    87de:	bf22      	ittt	cs
    87e0:	1ab6      	subcs	r6, r6, r2
    87e2:	4675      	movcs	r5, lr
    87e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    87e8:	085b      	lsrs	r3, r3, #1
    87ea:	ea4f 0232 	mov.w	r2, r2, rrx
    87ee:	ebb6 0e02 	subs.w	lr, r6, r2
    87f2:	eb75 0e03 	sbcs.w	lr, r5, r3
    87f6:	bf22      	ittt	cs
    87f8:	1ab6      	subcs	r6, r6, r2
    87fa:	4675      	movcs	r5, lr
    87fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    8800:	ea55 0e06 	orrs.w	lr, r5, r6
    8804:	d018      	beq.n	8838 <__aeabi_ddiv+0x114>
    8806:	ea4f 1505 	mov.w	r5, r5, lsl #4
    880a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    880e:	ea4f 1606 	mov.w	r6, r6, lsl #4
    8812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    8816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    881a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    881e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    8822:	d1c0      	bne.n	87a6 <__aeabi_ddiv+0x82>
    8824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8828:	d10b      	bne.n	8842 <__aeabi_ddiv+0x11e>
    882a:	ea41 0100 	orr.w	r1, r1, r0
    882e:	f04f 0000 	mov.w	r0, #0
    8832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    8836:	e7b6      	b.n	87a6 <__aeabi_ddiv+0x82>
    8838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    883c:	bf04      	itt	eq
    883e:	4301      	orreq	r1, r0
    8840:	2000      	moveq	r0, #0
    8842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    8846:	bf88      	it	hi
    8848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    884c:	f63f aeaf 	bhi.w	85ae <__aeabi_dmul+0xde>
    8850:	ebb5 0c03 	subs.w	ip, r5, r3
    8854:	bf04      	itt	eq
    8856:	ebb6 0c02 	subseq.w	ip, r6, r2
    885a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    885e:	f150 0000 	adcs.w	r0, r0, #0
    8862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    8866:	bd70      	pop	{r4, r5, r6, pc}
    8868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    886c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    8870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    8874:	bfc2      	ittt	gt
    8876:	ebd4 050c 	rsbsgt	r5, r4, ip
    887a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    887e:	bd70      	popgt	{r4, r5, r6, pc}
    8880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    8884:	f04f 0e00 	mov.w	lr, #0
    8888:	3c01      	subs	r4, #1
    888a:	e690      	b.n	85ae <__aeabi_dmul+0xde>
    888c:	ea45 0e06 	orr.w	lr, r5, r6
    8890:	e68d      	b.n	85ae <__aeabi_dmul+0xde>
    8892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    8896:	ea94 0f0c 	teq	r4, ip
    889a:	bf08      	it	eq
    889c:	ea95 0f0c 	teqeq	r5, ip
    88a0:	f43f af3b 	beq.w	871a <__aeabi_dmul+0x24a>
    88a4:	ea94 0f0c 	teq	r4, ip
    88a8:	d10a      	bne.n	88c0 <__aeabi_ddiv+0x19c>
    88aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    88ae:	f47f af34 	bne.w	871a <__aeabi_dmul+0x24a>
    88b2:	ea95 0f0c 	teq	r5, ip
    88b6:	f47f af25 	bne.w	8704 <__aeabi_dmul+0x234>
    88ba:	4610      	mov	r0, r2
    88bc:	4619      	mov	r1, r3
    88be:	e72c      	b.n	871a <__aeabi_dmul+0x24a>
    88c0:	ea95 0f0c 	teq	r5, ip
    88c4:	d106      	bne.n	88d4 <__aeabi_ddiv+0x1b0>
    88c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    88ca:	f43f aefd 	beq.w	86c8 <__aeabi_dmul+0x1f8>
    88ce:	4610      	mov	r0, r2
    88d0:	4619      	mov	r1, r3
    88d2:	e722      	b.n	871a <__aeabi_dmul+0x24a>
    88d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    88d8:	bf18      	it	ne
    88da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    88de:	f47f aec5 	bne.w	866c <__aeabi_dmul+0x19c>
    88e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    88e6:	f47f af0d 	bne.w	8704 <__aeabi_dmul+0x234>
    88ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    88ee:	f47f aeeb 	bne.w	86c8 <__aeabi_dmul+0x1f8>
    88f2:	e712      	b.n	871a <__aeabi_dmul+0x24a>

000088f4 <__aeabi_frsub>:
    88f4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    88f8:	e002      	b.n	8900 <__addsf3>
    88fa:	bf00      	nop

000088fc <__aeabi_fsub>:
    88fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00008900 <__addsf3>:
    8900:	0042      	lsls	r2, r0, #1
    8902:	bf1f      	itttt	ne
    8904:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    8908:	ea92 0f03 	teqne	r2, r3
    890c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    8910:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    8914:	d06a      	beq.n	89ec <__addsf3+0xec>
    8916:	ea4f 6212 	mov.w	r2, r2, lsr #24
    891a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    891e:	bfc1      	itttt	gt
    8920:	18d2      	addgt	r2, r2, r3
    8922:	4041      	eorgt	r1, r0
    8924:	4048      	eorgt	r0, r1
    8926:	4041      	eorgt	r1, r0
    8928:	bfb8      	it	lt
    892a:	425b      	neglt	r3, r3
    892c:	2b19      	cmp	r3, #25
    892e:	bf88      	it	hi
    8930:	4770      	bxhi	lr
    8932:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    8936:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    893a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    893e:	bf18      	it	ne
    8940:	4240      	negne	r0, r0
    8942:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    8946:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    894a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    894e:	bf18      	it	ne
    8950:	4249      	negne	r1, r1
    8952:	ea92 0f03 	teq	r2, r3
    8956:	d03f      	beq.n	89d8 <__addsf3+0xd8>
    8958:	f1a2 0201 	sub.w	r2, r2, #1
    895c:	fa41 fc03 	asr.w	ip, r1, r3
    8960:	eb10 000c 	adds.w	r0, r0, ip
    8964:	f1c3 0320 	rsb	r3, r3, #32
    8968:	fa01 f103 	lsl.w	r1, r1, r3
    896c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    8970:	d502      	bpl.n	8978 <__addsf3+0x78>
    8972:	4249      	negs	r1, r1
    8974:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    8978:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    897c:	d313      	bcc.n	89a6 <__addsf3+0xa6>
    897e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    8982:	d306      	bcc.n	8992 <__addsf3+0x92>
    8984:	0840      	lsrs	r0, r0, #1
    8986:	ea4f 0131 	mov.w	r1, r1, rrx
    898a:	f102 0201 	add.w	r2, r2, #1
    898e:	2afe      	cmp	r2, #254	; 0xfe
    8990:	d251      	bcs.n	8a36 <__addsf3+0x136>
    8992:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    8996:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    899a:	bf08      	it	eq
    899c:	f020 0001 	biceq.w	r0, r0, #1
    89a0:	ea40 0003 	orr.w	r0, r0, r3
    89a4:	4770      	bx	lr
    89a6:	0049      	lsls	r1, r1, #1
    89a8:	eb40 0000 	adc.w	r0, r0, r0
    89ac:	3a01      	subs	r2, #1
    89ae:	bf28      	it	cs
    89b0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
    89b4:	d2ed      	bcs.n	8992 <__addsf3+0x92>
    89b6:	fab0 fc80 	clz	ip, r0
    89ba:	f1ac 0c08 	sub.w	ip, ip, #8
    89be:	ebb2 020c 	subs.w	r2, r2, ip
    89c2:	fa00 f00c 	lsl.w	r0, r0, ip
    89c6:	bfaa      	itet	ge
    89c8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    89cc:	4252      	neglt	r2, r2
    89ce:	4318      	orrge	r0, r3
    89d0:	bfbc      	itt	lt
    89d2:	40d0      	lsrlt	r0, r2
    89d4:	4318      	orrlt	r0, r3
    89d6:	4770      	bx	lr
    89d8:	f092 0f00 	teq	r2, #0
    89dc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    89e0:	bf06      	itte	eq
    89e2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    89e6:	3201      	addeq	r2, #1
    89e8:	3b01      	subne	r3, #1
    89ea:	e7b5      	b.n	8958 <__addsf3+0x58>
    89ec:	ea4f 0341 	mov.w	r3, r1, lsl #1
    89f0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    89f4:	bf18      	it	ne
    89f6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    89fa:	d021      	beq.n	8a40 <__addsf3+0x140>
    89fc:	ea92 0f03 	teq	r2, r3
    8a00:	d004      	beq.n	8a0c <__addsf3+0x10c>
    8a02:	f092 0f00 	teq	r2, #0
    8a06:	bf08      	it	eq
    8a08:	4608      	moveq	r0, r1
    8a0a:	4770      	bx	lr
    8a0c:	ea90 0f01 	teq	r0, r1
    8a10:	bf1c      	itt	ne
    8a12:	2000      	movne	r0, #0
    8a14:	4770      	bxne	lr
    8a16:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    8a1a:	d104      	bne.n	8a26 <__addsf3+0x126>
    8a1c:	0040      	lsls	r0, r0, #1
    8a1e:	bf28      	it	cs
    8a20:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    8a24:	4770      	bx	lr
    8a26:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    8a2a:	bf3c      	itt	cc
    8a2c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    8a30:	4770      	bxcc	lr
    8a32:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    8a36:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    8a3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8a3e:	4770      	bx	lr
    8a40:	ea7f 6222 	mvns.w	r2, r2, asr #24
    8a44:	bf16      	itet	ne
    8a46:	4608      	movne	r0, r1
    8a48:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    8a4c:	4601      	movne	r1, r0
    8a4e:	0242      	lsls	r2, r0, #9
    8a50:	bf06      	itte	eq
    8a52:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    8a56:	ea90 0f01 	teqeq	r0, r1
    8a5a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    8a5e:	4770      	bx	lr

00008a60 <__aeabi_ui2f>:
    8a60:	f04f 0300 	mov.w	r3, #0
    8a64:	e004      	b.n	8a70 <__aeabi_i2f+0x8>
    8a66:	bf00      	nop

00008a68 <__aeabi_i2f>:
    8a68:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    8a6c:	bf48      	it	mi
    8a6e:	4240      	negmi	r0, r0
    8a70:	ea5f 0c00 	movs.w	ip, r0
    8a74:	bf08      	it	eq
    8a76:	4770      	bxeq	lr
    8a78:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    8a7c:	4601      	mov	r1, r0
    8a7e:	f04f 0000 	mov.w	r0, #0
    8a82:	e01c      	b.n	8abe <__aeabi_l2f+0x2a>

00008a84 <__aeabi_ul2f>:
    8a84:	ea50 0201 	orrs.w	r2, r0, r1
    8a88:	bf08      	it	eq
    8a8a:	4770      	bxeq	lr
    8a8c:	f04f 0300 	mov.w	r3, #0
    8a90:	e00a      	b.n	8aa8 <__aeabi_l2f+0x14>
    8a92:	bf00      	nop

00008a94 <__aeabi_l2f>:
    8a94:	ea50 0201 	orrs.w	r2, r0, r1
    8a98:	bf08      	it	eq
    8a9a:	4770      	bxeq	lr
    8a9c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    8aa0:	d502      	bpl.n	8aa8 <__aeabi_l2f+0x14>
    8aa2:	4240      	negs	r0, r0
    8aa4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8aa8:	ea5f 0c01 	movs.w	ip, r1
    8aac:	bf02      	ittt	eq
    8aae:	4684      	moveq	ip, r0
    8ab0:	4601      	moveq	r1, r0
    8ab2:	2000      	moveq	r0, #0
    8ab4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    8ab8:	bf08      	it	eq
    8aba:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    8abe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    8ac2:	fabc f28c 	clz	r2, ip
    8ac6:	3a08      	subs	r2, #8
    8ac8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    8acc:	db10      	blt.n	8af0 <__aeabi_l2f+0x5c>
    8ace:	fa01 fc02 	lsl.w	ip, r1, r2
    8ad2:	4463      	add	r3, ip
    8ad4:	fa00 fc02 	lsl.w	ip, r0, r2
    8ad8:	f1c2 0220 	rsb	r2, r2, #32
    8adc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    8ae0:	fa20 f202 	lsr.w	r2, r0, r2
    8ae4:	eb43 0002 	adc.w	r0, r3, r2
    8ae8:	bf08      	it	eq
    8aea:	f020 0001 	biceq.w	r0, r0, #1
    8aee:	4770      	bx	lr
    8af0:	f102 0220 	add.w	r2, r2, #32
    8af4:	fa01 fc02 	lsl.w	ip, r1, r2
    8af8:	f1c2 0220 	rsb	r2, r2, #32
    8afc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    8b00:	fa21 f202 	lsr.w	r2, r1, r2
    8b04:	eb43 0002 	adc.w	r0, r3, r2
    8b08:	bf08      	it	eq
    8b0a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    8b0e:	4770      	bx	lr

00008b10 <__aeabi_fmul>:
    8b10:	f04f 0cff 	mov.w	ip, #255	; 0xff
    8b14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    8b18:	bf1e      	ittt	ne
    8b1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    8b1e:	ea92 0f0c 	teqne	r2, ip
    8b22:	ea93 0f0c 	teqne	r3, ip
    8b26:	d06f      	beq.n	8c08 <__aeabi_fmul+0xf8>
    8b28:	441a      	add	r2, r3
    8b2a:	ea80 0c01 	eor.w	ip, r0, r1
    8b2e:	0240      	lsls	r0, r0, #9
    8b30:	bf18      	it	ne
    8b32:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    8b36:	d01e      	beq.n	8b76 <__aeabi_fmul+0x66>
    8b38:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    8b3c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    8b40:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    8b44:	fba0 3101 	umull	r3, r1, r0, r1
    8b48:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    8b4c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    8b50:	bf3e      	ittt	cc
    8b52:	0049      	lslcc	r1, r1, #1
    8b54:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    8b58:	005b      	lslcc	r3, r3, #1
    8b5a:	ea40 0001 	orr.w	r0, r0, r1
    8b5e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    8b62:	2afd      	cmp	r2, #253	; 0xfd
    8b64:	d81d      	bhi.n	8ba2 <__aeabi_fmul+0x92>
    8b66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    8b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    8b6e:	bf08      	it	eq
    8b70:	f020 0001 	biceq.w	r0, r0, #1
    8b74:	4770      	bx	lr
    8b76:	f090 0f00 	teq	r0, #0
    8b7a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    8b7e:	bf08      	it	eq
    8b80:	0249      	lsleq	r1, r1, #9
    8b82:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    8b86:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    8b8a:	3a7f      	subs	r2, #127	; 0x7f
    8b8c:	bfc2      	ittt	gt
    8b8e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    8b92:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    8b96:	4770      	bxgt	lr
    8b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8b9c:	f04f 0300 	mov.w	r3, #0
    8ba0:	3a01      	subs	r2, #1
    8ba2:	dc5d      	bgt.n	8c60 <__aeabi_fmul+0x150>
    8ba4:	f112 0f19 	cmn.w	r2, #25
    8ba8:	bfdc      	itt	le
    8baa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    8bae:	4770      	bxle	lr
    8bb0:	f1c2 0200 	rsb	r2, r2, #0
    8bb4:	0041      	lsls	r1, r0, #1
    8bb6:	fa21 f102 	lsr.w	r1, r1, r2
    8bba:	f1c2 0220 	rsb	r2, r2, #32
    8bbe:	fa00 fc02 	lsl.w	ip, r0, r2
    8bc2:	ea5f 0031 	movs.w	r0, r1, rrx
    8bc6:	f140 0000 	adc.w	r0, r0, #0
    8bca:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    8bce:	bf08      	it	eq
    8bd0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    8bd4:	4770      	bx	lr
    8bd6:	f092 0f00 	teq	r2, #0
    8bda:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    8bde:	bf02      	ittt	eq
    8be0:	0040      	lsleq	r0, r0, #1
    8be2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    8be6:	3a01      	subeq	r2, #1
    8be8:	d0f9      	beq.n	8bde <__aeabi_fmul+0xce>
    8bea:	ea40 000c 	orr.w	r0, r0, ip
    8bee:	f093 0f00 	teq	r3, #0
    8bf2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    8bf6:	bf02      	ittt	eq
    8bf8:	0049      	lsleq	r1, r1, #1
    8bfa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    8bfe:	3b01      	subeq	r3, #1
    8c00:	d0f9      	beq.n	8bf6 <__aeabi_fmul+0xe6>
    8c02:	ea41 010c 	orr.w	r1, r1, ip
    8c06:	e78f      	b.n	8b28 <__aeabi_fmul+0x18>
    8c08:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    8c0c:	ea92 0f0c 	teq	r2, ip
    8c10:	bf18      	it	ne
    8c12:	ea93 0f0c 	teqne	r3, ip
    8c16:	d00a      	beq.n	8c2e <__aeabi_fmul+0x11e>
    8c18:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    8c1c:	bf18      	it	ne
    8c1e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    8c22:	d1d8      	bne.n	8bd6 <__aeabi_fmul+0xc6>
    8c24:	ea80 0001 	eor.w	r0, r0, r1
    8c28:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    8c2c:	4770      	bx	lr
    8c2e:	f090 0f00 	teq	r0, #0
    8c32:	bf17      	itett	ne
    8c34:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    8c38:	4608      	moveq	r0, r1
    8c3a:	f091 0f00 	teqne	r1, #0
    8c3e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    8c42:	d014      	beq.n	8c6e <__aeabi_fmul+0x15e>
    8c44:	ea92 0f0c 	teq	r2, ip
    8c48:	d101      	bne.n	8c4e <__aeabi_fmul+0x13e>
    8c4a:	0242      	lsls	r2, r0, #9
    8c4c:	d10f      	bne.n	8c6e <__aeabi_fmul+0x15e>
    8c4e:	ea93 0f0c 	teq	r3, ip
    8c52:	d103      	bne.n	8c5c <__aeabi_fmul+0x14c>
    8c54:	024b      	lsls	r3, r1, #9
    8c56:	bf18      	it	ne
    8c58:	4608      	movne	r0, r1
    8c5a:	d108      	bne.n	8c6e <__aeabi_fmul+0x15e>
    8c5c:	ea80 0001 	eor.w	r0, r0, r1
    8c60:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    8c64:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    8c68:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8c6c:	4770      	bx	lr
    8c6e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    8c72:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    8c76:	4770      	bx	lr

00008c78 <__aeabi_fdiv>:
    8c78:	f04f 0cff 	mov.w	ip, #255	; 0xff
    8c7c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    8c80:	bf1e      	ittt	ne
    8c82:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    8c86:	ea92 0f0c 	teqne	r2, ip
    8c8a:	ea93 0f0c 	teqne	r3, ip
    8c8e:	d069      	beq.n	8d64 <__aeabi_fdiv+0xec>
    8c90:	eba2 0203 	sub.w	r2, r2, r3
    8c94:	ea80 0c01 	eor.w	ip, r0, r1
    8c98:	0249      	lsls	r1, r1, #9
    8c9a:	ea4f 2040 	mov.w	r0, r0, lsl #9
    8c9e:	d037      	beq.n	8d10 <__aeabi_fdiv+0x98>
    8ca0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    8ca4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
    8ca8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
    8cac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    8cb0:	428b      	cmp	r3, r1
    8cb2:	bf38      	it	cc
    8cb4:	005b      	lslcc	r3, r3, #1
    8cb6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
    8cba:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    8cbe:	428b      	cmp	r3, r1
    8cc0:	bf24      	itt	cs
    8cc2:	1a5b      	subcs	r3, r3, r1
    8cc4:	ea40 000c 	orrcs.w	r0, r0, ip
    8cc8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
    8ccc:	bf24      	itt	cs
    8cce:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
    8cd2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    8cd6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
    8cda:	bf24      	itt	cs
    8cdc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
    8ce0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    8ce4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    8ce8:	bf24      	itt	cs
    8cea:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
    8cee:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    8cf2:	011b      	lsls	r3, r3, #4
    8cf4:	bf18      	it	ne
    8cf6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
    8cfa:	d1e0      	bne.n	8cbe <__aeabi_fdiv+0x46>
    8cfc:	2afd      	cmp	r2, #253	; 0xfd
    8cfe:	f63f af50 	bhi.w	8ba2 <__aeabi_fmul+0x92>
    8d02:	428b      	cmp	r3, r1
    8d04:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    8d08:	bf08      	it	eq
    8d0a:	f020 0001 	biceq.w	r0, r0, #1
    8d0e:	4770      	bx	lr
    8d10:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    8d14:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    8d18:	327f      	adds	r2, #127	; 0x7f
    8d1a:	bfc2      	ittt	gt
    8d1c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    8d20:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    8d24:	4770      	bxgt	lr
    8d26:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8d2a:	f04f 0300 	mov.w	r3, #0
    8d2e:	3a01      	subs	r2, #1
    8d30:	e737      	b.n	8ba2 <__aeabi_fmul+0x92>
    8d32:	f092 0f00 	teq	r2, #0
    8d36:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    8d3a:	bf02      	ittt	eq
    8d3c:	0040      	lsleq	r0, r0, #1
    8d3e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    8d42:	3a01      	subeq	r2, #1
    8d44:	d0f9      	beq.n	8d3a <__aeabi_fdiv+0xc2>
    8d46:	ea40 000c 	orr.w	r0, r0, ip
    8d4a:	f093 0f00 	teq	r3, #0
    8d4e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    8d52:	bf02      	ittt	eq
    8d54:	0049      	lsleq	r1, r1, #1
    8d56:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    8d5a:	3b01      	subeq	r3, #1
    8d5c:	d0f9      	beq.n	8d52 <__aeabi_fdiv+0xda>
    8d5e:	ea41 010c 	orr.w	r1, r1, ip
    8d62:	e795      	b.n	8c90 <__aeabi_fdiv+0x18>
    8d64:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    8d68:	ea92 0f0c 	teq	r2, ip
    8d6c:	d108      	bne.n	8d80 <__aeabi_fdiv+0x108>
    8d6e:	0242      	lsls	r2, r0, #9
    8d70:	f47f af7d 	bne.w	8c6e <__aeabi_fmul+0x15e>
    8d74:	ea93 0f0c 	teq	r3, ip
    8d78:	f47f af70 	bne.w	8c5c <__aeabi_fmul+0x14c>
    8d7c:	4608      	mov	r0, r1
    8d7e:	e776      	b.n	8c6e <__aeabi_fmul+0x15e>
    8d80:	ea93 0f0c 	teq	r3, ip
    8d84:	d104      	bne.n	8d90 <__aeabi_fdiv+0x118>
    8d86:	024b      	lsls	r3, r1, #9
    8d88:	f43f af4c 	beq.w	8c24 <__aeabi_fmul+0x114>
    8d8c:	4608      	mov	r0, r1
    8d8e:	e76e      	b.n	8c6e <__aeabi_fmul+0x15e>
    8d90:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    8d94:	bf18      	it	ne
    8d96:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    8d9a:	d1ca      	bne.n	8d32 <__aeabi_fdiv+0xba>
    8d9c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
    8da0:	f47f af5c 	bne.w	8c5c <__aeabi_fmul+0x14c>
    8da4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    8da8:	f47f af3c 	bne.w	8c24 <__aeabi_fmul+0x114>
    8dac:	e75f      	b.n	8c6e <__aeabi_fmul+0x15e>
    8dae:	bf00      	nop

00008db0 <__gesf2>:
    8db0:	f04f 3cff 	mov.w	ip, #4294967295
    8db4:	e006      	b.n	8dc4 <__cmpsf2+0x4>
    8db6:	bf00      	nop

00008db8 <__lesf2>:
    8db8:	f04f 0c01 	mov.w	ip, #1
    8dbc:	e002      	b.n	8dc4 <__cmpsf2+0x4>
    8dbe:	bf00      	nop

00008dc0 <__cmpsf2>:
    8dc0:	f04f 0c01 	mov.w	ip, #1
    8dc4:	f84d cd04 	str.w	ip, [sp, #-4]!
    8dc8:	ea4f 0240 	mov.w	r2, r0, lsl #1
    8dcc:	ea4f 0341 	mov.w	r3, r1, lsl #1
    8dd0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    8dd4:	bf18      	it	ne
    8dd6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    8dda:	d011      	beq.n	8e00 <__cmpsf2+0x40>
    8ddc:	b001      	add	sp, #4
    8dde:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
    8de2:	bf18      	it	ne
    8de4:	ea90 0f01 	teqne	r0, r1
    8de8:	bf58      	it	pl
    8dea:	ebb2 0003 	subspl.w	r0, r2, r3
    8dee:	bf88      	it	hi
    8df0:	17c8      	asrhi	r0, r1, #31
    8df2:	bf38      	it	cc
    8df4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
    8df8:	bf18      	it	ne
    8dfa:	f040 0001 	orrne.w	r0, r0, #1
    8dfe:	4770      	bx	lr
    8e00:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    8e04:	d102      	bne.n	8e0c <__cmpsf2+0x4c>
    8e06:	ea5f 2c40 	movs.w	ip, r0, lsl #9
    8e0a:	d105      	bne.n	8e18 <__cmpsf2+0x58>
    8e0c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
    8e10:	d1e4      	bne.n	8ddc <__cmpsf2+0x1c>
    8e12:	ea5f 2c41 	movs.w	ip, r1, lsl #9
    8e16:	d0e1      	beq.n	8ddc <__cmpsf2+0x1c>
    8e18:	f85d 0b04 	ldr.w	r0, [sp], #4
    8e1c:	4770      	bx	lr
    8e1e:	bf00      	nop

00008e20 <__aeabi_cfrcmple>:
    8e20:	4684      	mov	ip, r0
    8e22:	4608      	mov	r0, r1
    8e24:	4661      	mov	r1, ip
    8e26:	e7ff      	b.n	8e28 <__aeabi_cfcmpeq>

00008e28 <__aeabi_cfcmpeq>:
    8e28:	b50f      	push	{r0, r1, r2, r3, lr}
    8e2a:	f7ff ffc9 	bl	8dc0 <__cmpsf2>
    8e2e:	2800      	cmp	r0, #0
    8e30:	bf48      	it	mi
    8e32:	f110 0f00 	cmnmi.w	r0, #0
    8e36:	bd0f      	pop	{r0, r1, r2, r3, pc}

00008e38 <__aeabi_fcmpeq>:
    8e38:	f84d ed08 	str.w	lr, [sp, #-8]!
    8e3c:	f7ff fff4 	bl	8e28 <__aeabi_cfcmpeq>
    8e40:	bf0c      	ite	eq
    8e42:	2001      	moveq	r0, #1
    8e44:	2000      	movne	r0, #0
    8e46:	f85d fb08 	ldr.w	pc, [sp], #8
    8e4a:	bf00      	nop

00008e4c <__aeabi_fcmplt>:
    8e4c:	f84d ed08 	str.w	lr, [sp, #-8]!
    8e50:	f7ff ffea 	bl	8e28 <__aeabi_cfcmpeq>
    8e54:	bf34      	ite	cc
    8e56:	2001      	movcc	r0, #1
    8e58:	2000      	movcs	r0, #0
    8e5a:	f85d fb08 	ldr.w	pc, [sp], #8
    8e5e:	bf00      	nop

00008e60 <__aeabi_fcmple>:
    8e60:	f84d ed08 	str.w	lr, [sp, #-8]!
    8e64:	f7ff ffe0 	bl	8e28 <__aeabi_cfcmpeq>
    8e68:	bf94      	ite	ls
    8e6a:	2001      	movls	r0, #1
    8e6c:	2000      	movhi	r0, #0
    8e6e:	f85d fb08 	ldr.w	pc, [sp], #8
    8e72:	bf00      	nop

00008e74 <__aeabi_fcmpge>:
    8e74:	f84d ed08 	str.w	lr, [sp, #-8]!
    8e78:	f7ff ffd2 	bl	8e20 <__aeabi_cfrcmple>
    8e7c:	bf94      	ite	ls
    8e7e:	2001      	movls	r0, #1
    8e80:	2000      	movhi	r0, #0
    8e82:	f85d fb08 	ldr.w	pc, [sp], #8
    8e86:	bf00      	nop

00008e88 <__aeabi_fcmpgt>:
    8e88:	f84d ed08 	str.w	lr, [sp, #-8]!
    8e8c:	f7ff ffc8 	bl	8e20 <__aeabi_cfrcmple>
    8e90:	bf34      	ite	cc
    8e92:	2001      	movcc	r0, #1
    8e94:	2000      	movcs	r0, #0
    8e96:	f85d fb08 	ldr.w	pc, [sp], #8
    8e9a:	bf00      	nop

00008e9c <__aeabi_f2uiz>:
    8e9c:	0042      	lsls	r2, r0, #1
    8e9e:	d20e      	bcs.n	8ebe <__aeabi_f2uiz+0x22>
    8ea0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    8ea4:	d30b      	bcc.n	8ebe <__aeabi_f2uiz+0x22>
    8ea6:	f04f 039e 	mov.w	r3, #158	; 0x9e
    8eaa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    8eae:	d409      	bmi.n	8ec4 <__aeabi_f2uiz+0x28>
    8eb0:	ea4f 2300 	mov.w	r3, r0, lsl #8
    8eb4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    8eb8:	fa23 f002 	lsr.w	r0, r3, r2
    8ebc:	4770      	bx	lr
    8ebe:	f04f 0000 	mov.w	r0, #0
    8ec2:	4770      	bx	lr
    8ec4:	f112 0f61 	cmn.w	r2, #97	; 0x61
    8ec8:	d101      	bne.n	8ece <__aeabi_f2uiz+0x32>
    8eca:	0242      	lsls	r2, r0, #9
    8ecc:	d102      	bne.n	8ed4 <__aeabi_f2uiz+0x38>
    8ece:	f04f 30ff 	mov.w	r0, #4294967295
    8ed2:	4770      	bx	lr
    8ed4:	f04f 0000 	mov.w	r0, #0
    8ed8:	4770      	bx	lr
    8eda:	bf00      	nop

00008edc <__aeabi_uldivmod>:
    8edc:	b953      	cbnz	r3, 8ef4 <__aeabi_uldivmod+0x18>
    8ede:	b94a      	cbnz	r2, 8ef4 <__aeabi_uldivmod+0x18>
    8ee0:	2900      	cmp	r1, #0
    8ee2:	bf08      	it	eq
    8ee4:	2800      	cmpeq	r0, #0
    8ee6:	bf1c      	itt	ne
    8ee8:	f04f 31ff 	movne.w	r1, #4294967295
    8eec:	f04f 30ff 	movne.w	r0, #4294967295
    8ef0:	f000 b80c 	b.w	8f0c <__aeabi_idiv0>
    8ef4:	f1ad 0c08 	sub.w	ip, sp, #8
    8ef8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8efc:	f000 f8ce 	bl	909c <__udivmoddi4>
    8f00:	f8dd e004 	ldr.w	lr, [sp, #4]
    8f04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8f08:	b004      	add	sp, #16
    8f0a:	4770      	bx	lr

00008f0c <__aeabi_idiv0>:
    8f0c:	4770      	bx	lr
    8f0e:	bf00      	nop

00008f10 <__gedf2>:
    8f10:	f04f 3cff 	mov.w	ip, #4294967295
    8f14:	e006      	b.n	8f24 <__cmpdf2+0x4>
    8f16:	bf00      	nop

00008f18 <__ledf2>:
    8f18:	f04f 0c01 	mov.w	ip, #1
    8f1c:	e002      	b.n	8f24 <__cmpdf2+0x4>
    8f1e:	bf00      	nop

00008f20 <__cmpdf2>:
    8f20:	f04f 0c01 	mov.w	ip, #1
    8f24:	f84d cd04 	str.w	ip, [sp, #-4]!
    8f28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    8f2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8f30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8f34:	bf18      	it	ne
    8f36:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    8f3a:	d01b      	beq.n	8f74 <__cmpdf2+0x54>
    8f3c:	b001      	add	sp, #4
    8f3e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    8f42:	bf0c      	ite	eq
    8f44:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    8f48:	ea91 0f03 	teqne	r1, r3
    8f4c:	bf02      	ittt	eq
    8f4e:	ea90 0f02 	teqeq	r0, r2
    8f52:	2000      	moveq	r0, #0
    8f54:	4770      	bxeq	lr
    8f56:	f110 0f00 	cmn.w	r0, #0
    8f5a:	ea91 0f03 	teq	r1, r3
    8f5e:	bf58      	it	pl
    8f60:	4299      	cmppl	r1, r3
    8f62:	bf08      	it	eq
    8f64:	4290      	cmpeq	r0, r2
    8f66:	bf2c      	ite	cs
    8f68:	17d8      	asrcs	r0, r3, #31
    8f6a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    8f6e:	f040 0001 	orr.w	r0, r0, #1
    8f72:	4770      	bx	lr
    8f74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    8f78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8f7c:	d102      	bne.n	8f84 <__cmpdf2+0x64>
    8f7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    8f82:	d107      	bne.n	8f94 <__cmpdf2+0x74>
    8f84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8f88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8f8c:	d1d6      	bne.n	8f3c <__cmpdf2+0x1c>
    8f8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    8f92:	d0d3      	beq.n	8f3c <__cmpdf2+0x1c>
    8f94:	f85d 0b04 	ldr.w	r0, [sp], #4
    8f98:	4770      	bx	lr
    8f9a:	bf00      	nop

00008f9c <__aeabi_cdrcmple>:
    8f9c:	4684      	mov	ip, r0
    8f9e:	4610      	mov	r0, r2
    8fa0:	4662      	mov	r2, ip
    8fa2:	468c      	mov	ip, r1
    8fa4:	4619      	mov	r1, r3
    8fa6:	4663      	mov	r3, ip
    8fa8:	e000      	b.n	8fac <__aeabi_cdcmpeq>
    8faa:	bf00      	nop

00008fac <__aeabi_cdcmpeq>:
    8fac:	b501      	push	{r0, lr}
    8fae:	f7ff ffb7 	bl	8f20 <__cmpdf2>
    8fb2:	2800      	cmp	r0, #0
    8fb4:	bf48      	it	mi
    8fb6:	f110 0f00 	cmnmi.w	r0, #0
    8fba:	bd01      	pop	{r0, pc}

00008fbc <__aeabi_dcmpeq>:
    8fbc:	f84d ed08 	str.w	lr, [sp, #-8]!
    8fc0:	f7ff fff4 	bl	8fac <__aeabi_cdcmpeq>
    8fc4:	bf0c      	ite	eq
    8fc6:	2001      	moveq	r0, #1
    8fc8:	2000      	movne	r0, #0
    8fca:	f85d fb08 	ldr.w	pc, [sp], #8
    8fce:	bf00      	nop

00008fd0 <__aeabi_dcmplt>:
    8fd0:	f84d ed08 	str.w	lr, [sp, #-8]!
    8fd4:	f7ff ffea 	bl	8fac <__aeabi_cdcmpeq>
    8fd8:	bf34      	ite	cc
    8fda:	2001      	movcc	r0, #1
    8fdc:	2000      	movcs	r0, #0
    8fde:	f85d fb08 	ldr.w	pc, [sp], #8
    8fe2:	bf00      	nop

00008fe4 <__aeabi_dcmple>:
    8fe4:	f84d ed08 	str.w	lr, [sp, #-8]!
    8fe8:	f7ff ffe0 	bl	8fac <__aeabi_cdcmpeq>
    8fec:	bf94      	ite	ls
    8fee:	2001      	movls	r0, #1
    8ff0:	2000      	movhi	r0, #0
    8ff2:	f85d fb08 	ldr.w	pc, [sp], #8
    8ff6:	bf00      	nop

00008ff8 <__aeabi_dcmpge>:
    8ff8:	f84d ed08 	str.w	lr, [sp, #-8]!
    8ffc:	f7ff ffce 	bl	8f9c <__aeabi_cdrcmple>
    9000:	bf94      	ite	ls
    9002:	2001      	movls	r0, #1
    9004:	2000      	movhi	r0, #0
    9006:	f85d fb08 	ldr.w	pc, [sp], #8
    900a:	bf00      	nop

0000900c <__aeabi_dcmpgt>:
    900c:	f84d ed08 	str.w	lr, [sp, #-8]!
    9010:	f7ff ffc4 	bl	8f9c <__aeabi_cdrcmple>
    9014:	bf34      	ite	cc
    9016:	2001      	movcc	r0, #1
    9018:	2000      	movcs	r0, #0
    901a:	f85d fb08 	ldr.w	pc, [sp], #8
    901e:	bf00      	nop

00009020 <__aeabi_dcmpun>:
    9020:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    9024:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    9028:	d102      	bne.n	9030 <__aeabi_dcmpun+0x10>
    902a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    902e:	d10a      	bne.n	9046 <__aeabi_dcmpun+0x26>
    9030:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    9034:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    9038:	d102      	bne.n	9040 <__aeabi_dcmpun+0x20>
    903a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    903e:	d102      	bne.n	9046 <__aeabi_dcmpun+0x26>
    9040:	f04f 0000 	mov.w	r0, #0
    9044:	4770      	bx	lr
    9046:	f04f 0001 	mov.w	r0, #1
    904a:	4770      	bx	lr

0000904c <__aeabi_d2iz>:
    904c:	ea4f 0241 	mov.w	r2, r1, lsl #1
    9050:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    9054:	d215      	bcs.n	9082 <__aeabi_d2iz+0x36>
    9056:	d511      	bpl.n	907c <__aeabi_d2iz+0x30>
    9058:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    905c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    9060:	d912      	bls.n	9088 <__aeabi_d2iz+0x3c>
    9062:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    9066:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    906a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    906e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    9072:	fa23 f002 	lsr.w	r0, r3, r2
    9076:	bf18      	it	ne
    9078:	4240      	negne	r0, r0
    907a:	4770      	bx	lr
    907c:	f04f 0000 	mov.w	r0, #0
    9080:	4770      	bx	lr
    9082:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    9086:	d105      	bne.n	9094 <__aeabi_d2iz+0x48>
    9088:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    908c:	bf08      	it	eq
    908e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    9092:	4770      	bx	lr
    9094:	f04f 0000 	mov.w	r0, #0
    9098:	4770      	bx	lr
    909a:	bf00      	nop

0000909c <__udivmoddi4>:
    909c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    90a0:	4686      	mov	lr, r0
    90a2:	468c      	mov	ip, r1
    90a4:	4608      	mov	r0, r1
    90a6:	9e08      	ldr	r6, [sp, #32]
    90a8:	4615      	mov	r5, r2
    90aa:	4674      	mov	r4, lr
    90ac:	4619      	mov	r1, r3
    90ae:	2b00      	cmp	r3, #0
    90b0:	f040 80c1 	bne.w	9236 <__udivmoddi4+0x19a>
    90b4:	4285      	cmp	r5, r0
    90b6:	fab2 f282 	clz	r2, r2
    90ba:	d945      	bls.n	9148 <__udivmoddi4+0xac>
    90bc:	b14a      	cbz	r2, 90d2 <__udivmoddi4+0x36>
    90be:	f1c2 0320 	rsb	r3, r2, #32
    90c2:	fa00 fc02 	lsl.w	ip, r0, r2
    90c6:	4095      	lsls	r5, r2
    90c8:	4094      	lsls	r4, r2
    90ca:	fa2e f303 	lsr.w	r3, lr, r3
    90ce:	ea43 0c0c 	orr.w	ip, r3, ip
    90d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    90d6:	b2a8      	uxth	r0, r5
    90d8:	0c23      	lsrs	r3, r4, #16
    90da:	fbbc f8fe 	udiv	r8, ip, lr
    90de:	fb0e cc18 	mls	ip, lr, r8, ip
    90e2:	fb08 f900 	mul.w	r9, r8, r0
    90e6:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    90ea:	4599      	cmp	r9, r3
    90ec:	d928      	bls.n	9140 <__udivmoddi4+0xa4>
    90ee:	18eb      	adds	r3, r5, r3
    90f0:	f108 37ff 	add.w	r7, r8, #4294967295
    90f4:	d204      	bcs.n	9100 <__udivmoddi4+0x64>
    90f6:	4599      	cmp	r9, r3
    90f8:	d902      	bls.n	9100 <__udivmoddi4+0x64>
    90fa:	f1a8 0702 	sub.w	r7, r8, #2
    90fe:	442b      	add	r3, r5
    9100:	eba3 0309 	sub.w	r3, r3, r9
    9104:	b2a4      	uxth	r4, r4
    9106:	fbb3 fcfe 	udiv	ip, r3, lr
    910a:	fb0e 331c 	mls	r3, lr, ip, r3
    910e:	fb0c f000 	mul.w	r0, ip, r0
    9112:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    9116:	42a0      	cmp	r0, r4
    9118:	d914      	bls.n	9144 <__udivmoddi4+0xa8>
    911a:	192c      	adds	r4, r5, r4
    911c:	f10c 33ff 	add.w	r3, ip, #4294967295
    9120:	d204      	bcs.n	912c <__udivmoddi4+0x90>
    9122:	42a0      	cmp	r0, r4
    9124:	d902      	bls.n	912c <__udivmoddi4+0x90>
    9126:	f1ac 0302 	sub.w	r3, ip, #2
    912a:	442c      	add	r4, r5
    912c:	1a24      	subs	r4, r4, r0
    912e:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    9132:	b11e      	cbz	r6, 913c <__udivmoddi4+0xa0>
    9134:	40d4      	lsrs	r4, r2
    9136:	2300      	movs	r3, #0
    9138:	6034      	str	r4, [r6, #0]
    913a:	6073      	str	r3, [r6, #4]
    913c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9140:	4647      	mov	r7, r8
    9142:	e7dd      	b.n	9100 <__udivmoddi4+0x64>
    9144:	4663      	mov	r3, ip
    9146:	e7f1      	b.n	912c <__udivmoddi4+0x90>
    9148:	bb92      	cbnz	r2, 91b0 <__udivmoddi4+0x114>
    914a:	1b43      	subs	r3, r0, r5
    914c:	2101      	movs	r1, #1
    914e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    9152:	b2af      	uxth	r7, r5
    9154:	0c20      	lsrs	r0, r4, #16
    9156:	fbb3 fcfe 	udiv	ip, r3, lr
    915a:	fb0e 331c 	mls	r3, lr, ip, r3
    915e:	fb0c f807 	mul.w	r8, ip, r7
    9162:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    9166:	4598      	cmp	r8, r3
    9168:	d961      	bls.n	922e <__udivmoddi4+0x192>
    916a:	18eb      	adds	r3, r5, r3
    916c:	f10c 30ff 	add.w	r0, ip, #4294967295
    9170:	d204      	bcs.n	917c <__udivmoddi4+0xe0>
    9172:	4598      	cmp	r8, r3
    9174:	d902      	bls.n	917c <__udivmoddi4+0xe0>
    9176:	f1ac 0002 	sub.w	r0, ip, #2
    917a:	442b      	add	r3, r5
    917c:	eba3 0308 	sub.w	r3, r3, r8
    9180:	b2a4      	uxth	r4, r4
    9182:	fbb3 fcfe 	udiv	ip, r3, lr
    9186:	fb0e 331c 	mls	r3, lr, ip, r3
    918a:	fb0c f707 	mul.w	r7, ip, r7
    918e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    9192:	42a7      	cmp	r7, r4
    9194:	d94d      	bls.n	9232 <__udivmoddi4+0x196>
    9196:	192c      	adds	r4, r5, r4
    9198:	f10c 33ff 	add.w	r3, ip, #4294967295
    919c:	d204      	bcs.n	91a8 <__udivmoddi4+0x10c>
    919e:	42a7      	cmp	r7, r4
    91a0:	d902      	bls.n	91a8 <__udivmoddi4+0x10c>
    91a2:	f1ac 0302 	sub.w	r3, ip, #2
    91a6:	442c      	add	r4, r5
    91a8:	1be4      	subs	r4, r4, r7
    91aa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    91ae:	e7c0      	b.n	9132 <__udivmoddi4+0x96>
    91b0:	f1c2 0320 	rsb	r3, r2, #32
    91b4:	4095      	lsls	r5, r2
    91b6:	4094      	lsls	r4, r2
    91b8:	fa20 f103 	lsr.w	r1, r0, r3
    91bc:	fa2e f303 	lsr.w	r3, lr, r3
    91c0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    91c4:	4090      	lsls	r0, r2
    91c6:	b2af      	uxth	r7, r5
    91c8:	4303      	orrs	r3, r0
    91ca:	fbb1 fcfe 	udiv	ip, r1, lr
    91ce:	fb0e 101c 	mls	r0, lr, ip, r1
    91d2:	0c19      	lsrs	r1, r3, #16
    91d4:	fb0c f807 	mul.w	r8, ip, r7
    91d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    91dc:	4588      	cmp	r8, r1
    91de:	d922      	bls.n	9226 <__udivmoddi4+0x18a>
    91e0:	1869      	adds	r1, r5, r1
    91e2:	f10c 30ff 	add.w	r0, ip, #4294967295
    91e6:	d204      	bcs.n	91f2 <__udivmoddi4+0x156>
    91e8:	4588      	cmp	r8, r1
    91ea:	d902      	bls.n	91f2 <__udivmoddi4+0x156>
    91ec:	f1ac 0002 	sub.w	r0, ip, #2
    91f0:	4429      	add	r1, r5
    91f2:	eba1 0108 	sub.w	r1, r1, r8
    91f6:	b29b      	uxth	r3, r3
    91f8:	fbb1 fcfe 	udiv	ip, r1, lr
    91fc:	fb0e 111c 	mls	r1, lr, ip, r1
    9200:	fb0c f707 	mul.w	r7, ip, r7
    9204:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    9208:	429f      	cmp	r7, r3
    920a:	d90e      	bls.n	922a <__udivmoddi4+0x18e>
    920c:	18eb      	adds	r3, r5, r3
    920e:	f10c 31ff 	add.w	r1, ip, #4294967295
    9212:	d204      	bcs.n	921e <__udivmoddi4+0x182>
    9214:	429f      	cmp	r7, r3
    9216:	d902      	bls.n	921e <__udivmoddi4+0x182>
    9218:	f1ac 0102 	sub.w	r1, ip, #2
    921c:	442b      	add	r3, r5
    921e:	1bdb      	subs	r3, r3, r7
    9220:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    9224:	e793      	b.n	914e <__udivmoddi4+0xb2>
    9226:	4660      	mov	r0, ip
    9228:	e7e3      	b.n	91f2 <__udivmoddi4+0x156>
    922a:	4661      	mov	r1, ip
    922c:	e7f7      	b.n	921e <__udivmoddi4+0x182>
    922e:	4660      	mov	r0, ip
    9230:	e7a4      	b.n	917c <__udivmoddi4+0xe0>
    9232:	4663      	mov	r3, ip
    9234:	e7b8      	b.n	91a8 <__udivmoddi4+0x10c>
    9236:	4283      	cmp	r3, r0
    9238:	d906      	bls.n	9248 <__udivmoddi4+0x1ac>
    923a:	b916      	cbnz	r6, 9242 <__udivmoddi4+0x1a6>
    923c:	2100      	movs	r1, #0
    923e:	4608      	mov	r0, r1
    9240:	e77c      	b.n	913c <__udivmoddi4+0xa0>
    9242:	e9c6 e000 	strd	lr, r0, [r6]
    9246:	e7f9      	b.n	923c <__udivmoddi4+0x1a0>
    9248:	fab3 f783 	clz	r7, r3
    924c:	b98f      	cbnz	r7, 9272 <__udivmoddi4+0x1d6>
    924e:	4283      	cmp	r3, r0
    9250:	d301      	bcc.n	9256 <__udivmoddi4+0x1ba>
    9252:	4572      	cmp	r2, lr
    9254:	d808      	bhi.n	9268 <__udivmoddi4+0x1cc>
    9256:	ebbe 0402 	subs.w	r4, lr, r2
    925a:	eb60 0303 	sbc.w	r3, r0, r3
    925e:	2001      	movs	r0, #1
    9260:	469c      	mov	ip, r3
    9262:	b91e      	cbnz	r6, 926c <__udivmoddi4+0x1d0>
    9264:	2100      	movs	r1, #0
    9266:	e769      	b.n	913c <__udivmoddi4+0xa0>
    9268:	4638      	mov	r0, r7
    926a:	e7fa      	b.n	9262 <__udivmoddi4+0x1c6>
    926c:	e9c6 4c00 	strd	r4, ip, [r6]
    9270:	e7f8      	b.n	9264 <__udivmoddi4+0x1c8>
    9272:	f1c7 0c20 	rsb	ip, r7, #32
    9276:	40bb      	lsls	r3, r7
    9278:	fa0e f507 	lsl.w	r5, lr, r7
    927c:	fa22 f40c 	lsr.w	r4, r2, ip
    9280:	fa2e f10c 	lsr.w	r1, lr, ip
    9284:	40ba      	lsls	r2, r7
    9286:	431c      	orrs	r4, r3
    9288:	fa20 f30c 	lsr.w	r3, r0, ip
    928c:	40b8      	lsls	r0, r7
    928e:	ea4f 4914 	mov.w	r9, r4, lsr #16
    9292:	4301      	orrs	r1, r0
    9294:	fa1f fe84 	uxth.w	lr, r4
    9298:	fbb3 f8f9 	udiv	r8, r3, r9
    929c:	fb09 3018 	mls	r0, r9, r8, r3
    92a0:	0c0b      	lsrs	r3, r1, #16
    92a2:	fb08 fa0e 	mul.w	sl, r8, lr
    92a6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    92aa:	459a      	cmp	sl, r3
    92ac:	d940      	bls.n	9330 <__udivmoddi4+0x294>
    92ae:	18e3      	adds	r3, r4, r3
    92b0:	f108 30ff 	add.w	r0, r8, #4294967295
    92b4:	d204      	bcs.n	92c0 <__udivmoddi4+0x224>
    92b6:	459a      	cmp	sl, r3
    92b8:	d902      	bls.n	92c0 <__udivmoddi4+0x224>
    92ba:	f1a8 0002 	sub.w	r0, r8, #2
    92be:	4423      	add	r3, r4
    92c0:	eba3 030a 	sub.w	r3, r3, sl
    92c4:	b289      	uxth	r1, r1
    92c6:	fbb3 f8f9 	udiv	r8, r3, r9
    92ca:	fb09 3318 	mls	r3, r9, r8, r3
    92ce:	fb08 fe0e 	mul.w	lr, r8, lr
    92d2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    92d6:	458e      	cmp	lr, r1
    92d8:	d92c      	bls.n	9334 <__udivmoddi4+0x298>
    92da:	1861      	adds	r1, r4, r1
    92dc:	f108 33ff 	add.w	r3, r8, #4294967295
    92e0:	d204      	bcs.n	92ec <__udivmoddi4+0x250>
    92e2:	458e      	cmp	lr, r1
    92e4:	d902      	bls.n	92ec <__udivmoddi4+0x250>
    92e6:	f1a8 0302 	sub.w	r3, r8, #2
    92ea:	4421      	add	r1, r4
    92ec:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    92f0:	eba1 010e 	sub.w	r1, r1, lr
    92f4:	fba0 9802 	umull	r9, r8, r0, r2
    92f8:	4541      	cmp	r1, r8
    92fa:	46ce      	mov	lr, r9
    92fc:	4643      	mov	r3, r8
    92fe:	d302      	bcc.n	9306 <__udivmoddi4+0x26a>
    9300:	d106      	bne.n	9310 <__udivmoddi4+0x274>
    9302:	454d      	cmp	r5, r9
    9304:	d204      	bcs.n	9310 <__udivmoddi4+0x274>
    9306:	3801      	subs	r0, #1
    9308:	ebb9 0e02 	subs.w	lr, r9, r2
    930c:	eb68 0304 	sbc.w	r3, r8, r4
    9310:	2e00      	cmp	r6, #0
    9312:	d0a7      	beq.n	9264 <__udivmoddi4+0x1c8>
    9314:	ebb5 020e 	subs.w	r2, r5, lr
    9318:	eb61 0103 	sbc.w	r1, r1, r3
    931c:	fa01 fc0c 	lsl.w	ip, r1, ip
    9320:	fa22 f307 	lsr.w	r3, r2, r7
    9324:	40f9      	lsrs	r1, r7
    9326:	ea4c 0303 	orr.w	r3, ip, r3
    932a:	e9c6 3100 	strd	r3, r1, [r6]
    932e:	e799      	b.n	9264 <__udivmoddi4+0x1c8>
    9330:	4640      	mov	r0, r8
    9332:	e7c5      	b.n	92c0 <__udivmoddi4+0x224>
    9334:	4643      	mov	r3, r8
    9336:	e7d9      	b.n	92ec <__udivmoddi4+0x250>

00009338 <strcmp>:
    9338:	f810 2b01 	ldrb.w	r2, [r0], #1
    933c:	f811 3b01 	ldrb.w	r3, [r1], #1
    9340:	2a01      	cmp	r2, #1
    9342:	bf28      	it	cs
    9344:	429a      	cmpcs	r2, r3
    9346:	d0f7      	beq.n	9338 <strcmp>
    9348:	1ad0      	subs	r0, r2, r3
    934a:	4770      	bx	lr

0000934c <strlen>:
    934c:	4603      	mov	r3, r0
    934e:	f813 2b01 	ldrb.w	r2, [r3], #1
    9352:	2a00      	cmp	r2, #0
    9354:	d1fb      	bne.n	934e <strlen+0x2>
    9356:	1a18      	subs	r0, r3, r0
    9358:	3801      	subs	r0, #1
    935a:	4770      	bx	lr
    935c:	0000      	movs	r0, r0
	...

00009360 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
    9360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9364:	b082      	sub	sp, #8
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    9366:	4d6d      	ldr	r5, [pc, #436]	; (951c <bt_init+0x1bc>)
{
    9368:	af00      	add	r7, sp, #0
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    936a:	f8d5 315c 	ldr.w	r3, [r5, #348]	; 0x15c
    936e:	6899      	ldr	r1, [r3, #8]
    9370:	f011 0101 	ands.w	r1, r1, #1
    9374:	d11a      	bne.n	93ac <bt_init+0x4c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    9376:	f640 4003 	movw	r0, #3075	; 0xc03
    937a:	1d3a      	adds	r2, r7, #4
    937c:	f005 ff36 	bl	f1ec <bt_hci_cmd_send_sync>
		if (err) {
    9380:	4604      	mov	r4, r0
    9382:	2800      	cmp	r0, #0
    9384:	f040 80c4 	bne.w	9510 <bt_init+0x1b0>
		hci_reset_complete(rsp);
    9388:	6878      	ldr	r0, [r7, #4]
	uint8_t status = buf->data[0];
    938a:	6883      	ldr	r3, [r0, #8]
	if (status) {
    938c:	781b      	ldrb	r3, [r3, #0]
    938e:	b95b      	cbnz	r3, 93a8 <bt_init+0x48>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9390:	f105 03cc 	add.w	r3, r5, #204	; 0xcc
    9394:	e8d3 2faf 	lda	r2, [r3]
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    9398:	f002 0209 	and.w	r2, r2, #9
    939c:	e8d3 1fef 	ldaex	r1, [r3]
    93a0:	e8c3 2fe4 	stlex	r4, r2, [r3]
    93a4:	2c00      	cmp	r4, #0
    93a6:	d1f9      	bne.n	939c <bt_init+0x3c>
		net_buf_unref(rsp);
    93a8:	f00c ffc8 	bl	1633c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    93ac:	2100      	movs	r1, #0
    93ae:	f241 0003 	movw	r0, #4099	; 0x1003
    93b2:	1d3a      	adds	r2, r7, #4
    93b4:	f005 ff1a 	bl	f1ec <bt_hci_cmd_send_sync>
	if (err) {
    93b8:	4604      	mov	r4, r0
    93ba:	2800      	cmp	r0, #0
    93bc:	f040 80a8 	bne.w	9510 <bt_init+0x1b0>
	read_local_features_complete(rsp);
    93c0:	687b      	ldr	r3, [r7, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    93c2:	4e57      	ldr	r6, [pc, #348]	; (9520 <bt_init+0x1c0>)
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
    93c4:	689a      	ldr	r2, [r3, #8]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    93c6:	f8d2 0001 	ldr.w	r0, [r2, #1]
    93ca:	f8d2 1005 	ldr.w	r1, [r2, #5]
    93ce:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
    93d0:	4618      	mov	r0, r3
    93d2:	f00c ffb3 	bl	1633c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    93d6:	4621      	mov	r1, r4
    93d8:	f241 0001 	movw	r0, #4097	; 0x1001
    93dc:	1d3a      	adds	r2, r7, #4
    93de:	f005 ff05 	bl	f1ec <bt_hci_cmd_send_sync>
	if (err) {
    93e2:	4604      	mov	r4, r0
    93e4:	2800      	cmp	r0, #0
    93e6:	f040 8093 	bne.w	9510 <bt_init+0x1b0>
	read_local_ver_complete(rsp);
    93ea:	6878      	ldr	r0, [r7, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    93ec:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    93ee:	785a      	ldrb	r2, [r3, #1]
    93f0:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    93f4:	885a      	ldrh	r2, [r3, #2]
    93f6:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
    93fa:	791a      	ldrb	r2, [r3, #4]
    93fc:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    9400:	f8b3 2007 	ldrh.w	r2, [r3, #7]
    9404:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    9408:	f8b3 3005 	ldrh.w	r3, [r3, #5]
    940c:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
    9410:	f00c ff94 	bl	1633c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    9414:	4621      	mov	r1, r4
    9416:	f241 0002 	movw	r0, #4098	; 0x1002
    941a:	1d3a      	adds	r2, r7, #4
    941c:	f005 fee6 	bl	f1ec <bt_hci_cmd_send_sync>
	if (err) {
    9420:	4604      	mov	r4, r0
    9422:	2800      	cmp	r0, #0
    9424:	d174      	bne.n	9510 <bt_init+0x1b0>
	read_supported_commands_complete(rsp);
    9426:	f8d7 c004 	ldr.w	ip, [r7, #4]
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
    942a:	f8dc 2008 	ldr.w	r2, [ip, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
    942e:	1c53      	adds	r3, r2, #1
    9430:	3241      	adds	r2, #65	; 0x41
    9432:	4634      	mov	r4, r6
    9434:	6818      	ldr	r0, [r3, #0]
    9436:	6859      	ldr	r1, [r3, #4]
    9438:	3308      	adds	r3, #8
    943a:	c403      	stmia	r4!, {r0, r1}
    943c:	4293      	cmp	r3, r2
    943e:	4626      	mov	r6, r4
    9440:	d1f7      	bne.n	9432 <bt_init+0xd2>
	net_buf_unref(rsp);
    9442:	4660      	mov	r0, ip
    9444:	f00c ff7a 	bl	1633c <net_buf_unref>
		err = prng_init();
    9448:	f007 fe2e 	bl	110a8 <prng_init>
		if (err) {
    944c:	4604      	mov	r4, r0
    944e:	2800      	cmp	r0, #0
    9450:	d15e      	bne.n	9510 <bt_init+0x1b0>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    9452:	f895 3082 	ldrb.w	r3, [r5, #130]	; 0x82
    9456:	0699      	lsls	r1, r3, #26
    9458:	d426      	bmi.n	94a8 <bt_init+0x148>
		BT_WARN("Controller to host flow control not supported");
    945a:	466c      	mov	r4, sp
    945c:	b088      	sub	sp, #32
    945e:	466a      	mov	r2, sp
    9460:	4b30      	ldr	r3, [pc, #192]	; (9524 <bt_init+0x1c4>)
    9462:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    9466:	6153      	str	r3, [r2, #20]
    9468:	4b2f      	ldr	r3, [pc, #188]	; (9528 <bt_init+0x1c8>)
    946a:	4830      	ldr	r0, [pc, #192]	; (952c <bt_init+0x1cc>)
    946c:	6193      	str	r3, [r2, #24]
    946e:	2303      	movs	r3, #3
    9470:	f842 3f10 	str.w	r3, [r2, #16]!
    9474:	f014 fc96 	bl	1dda4 <z_log_msg_static_create.constprop.0>
    9478:	46a5      	mov	sp, r4
	if (!BT_FEAT_LE(bt_dev.features)) {
    947a:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    947e:	065a      	lsls	r2, r3, #25
    9480:	d45a      	bmi.n	9538 <bt_init+0x1d8>
		BT_ERR("Non-LE capable controller detected!");
    9482:	466c      	mov	r4, sp
    9484:	b088      	sub	sp, #32
    9486:	466a      	mov	r2, sp
    9488:	4b29      	ldr	r3, [pc, #164]	; (9530 <bt_init+0x1d0>)
    948a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    948e:	6153      	str	r3, [r2, #20]
    9490:	4b28      	ldr	r3, [pc, #160]	; (9534 <bt_init+0x1d4>)
    9492:	4826      	ldr	r0, [pc, #152]	; (952c <bt_init+0x1cc>)
    9494:	6193      	str	r3, [r2, #24]
    9496:	2303      	movs	r3, #3
    9498:	f842 3f10 	str.w	r3, [r2, #16]!
    949c:	f014 fc82 	bl	1dda4 <z_log_msg_static_create.constprop.0>
    94a0:	46a5      	mov	sp, r4
		return -ENODEV;
    94a2:	f06f 0412 	mvn.w	r4, #18
    94a6:	e033      	b.n	9510 <bt_init+0x1b0>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_BUFFER_SIZE,
    94a8:	2107      	movs	r1, #7
    94aa:	f640 4033 	movw	r0, #3123	; 0xc33
    94ae:	f005 fe63 	bl	f178 <bt_hci_cmd_create>
	if (!buf) {
    94b2:	4606      	mov	r6, r0
    94b4:	2800      	cmp	r0, #0
    94b6:	f000 8145 	beq.w	9744 <bt_init+0x3e4>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
    94ba:	2107      	movs	r1, #7
    94bc:	3008      	adds	r0, #8
    94be:	f016 fce5 	bl	1fe8c <net_buf_simple_add>
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_SIZE);
    94c2:	2345      	movs	r3, #69	; 0x45
    94c4:	7003      	strb	r3, [r0, #0]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    94c6:	2306      	movs	r3, #6

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    94c8:	f8c0 4002 	str.w	r4, [r0, #2]
    94cc:	7184      	strb	r4, [r0, #6]
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_SIZE);
    94ce:	7044      	strb	r4, [r0, #1]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    94d0:	7104      	strb	r4, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    94d2:	4622      	mov	r2, r4
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    94d4:	70c3      	strb	r3, [r0, #3]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    94d6:	4631      	mov	r1, r6
    94d8:	f640 4033 	movw	r0, #3123	; 0xc33
    94dc:	f005 fe86 	bl	f1ec <bt_hci_cmd_send_sync>
	if (err) {
    94e0:	4604      	mov	r4, r0
    94e2:	b9a8      	cbnz	r0, 9510 <bt_init+0x1b0>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, 1);
    94e4:	2101      	movs	r1, #1
    94e6:	f640 4031 	movw	r0, #3121	; 0xc31
    94ea:	f005 fe45 	bl	f178 <bt_hci_cmd_create>
	if (!buf) {
    94ee:	4606      	mov	r6, r0
    94f0:	2800      	cmp	r0, #0
    94f2:	f000 8127 	beq.w	9744 <bt_init+0x3e4>
 *
 * @return Pointer to the value added
 */
static inline uint8_t *net_buf_add_u8(struct net_buf *buf, uint8_t val)
{
	return net_buf_simple_add_u8(&buf->b, val);
    94f6:	2101      	movs	r1, #1
    94f8:	3008      	adds	r0, #8
    94fa:	f016 fcd6 	bl	1feaa <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, buf, NULL);
    94fe:	4622      	mov	r2, r4
    9500:	4631      	mov	r1, r6
    9502:	f640 4031 	movw	r0, #3121	; 0xc31
    9506:	f005 fe71 	bl	f1ec <bt_hci_cmd_send_sync>
	if (err) {
    950a:	4604      	mov	r4, r0
    950c:	2800      	cmp	r0, #0
    950e:	d0b4      	beq.n	947a <bt_init+0x11a>
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
    9510:	4620      	mov	r0, r4
    9512:	3708      	adds	r7, #8
    9514:	46bd      	mov	sp, r7
    9516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    951a:	bf00      	nop
    951c:	20008000 	.word	0x20008000
    9520:	20008070 	.word	0x20008070
    9524:	0002491c 	.word	0x0002491c
    9528:	00024e8e 	.word	0x00024e8e
    952c:	000227f8 	.word	0x000227f8
    9530:	0002494e 	.word	0x0002494e
    9534:	00024e86 	.word	0x00024e86
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    9538:	2100      	movs	r1, #0
    953a:	f242 0003 	movw	r0, #8195	; 0x2003
    953e:	1d3a      	adds	r2, r7, #4
    9540:	f005 fe54 	bl	f1ec <bt_hci_cmd_send_sync>
	if (err) {
    9544:	4604      	mov	r4, r0
    9546:	2800      	cmp	r0, #0
    9548:	d1e2      	bne.n	9510 <bt_init+0x1b0>
	read_le_features_complete(rsp);
    954a:	687b      	ldr	r3, [r7, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    954c:	4eac      	ldr	r6, [pc, #688]	; (9800 <bt_init+0x4a0>)
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
    954e:	689a      	ldr	r2, [r3, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    9550:	f8d2 0001 	ldr.w	r0, [r2, #1]
    9554:	f8d2 1005 	ldr.w	r1, [r2, #5]
    9558:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
    955a:	4618      	mov	r0, r3
    955c:	f00c feee 	bl	1633c <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    9560:	4621      	mov	r1, r4
    9562:	f242 0002 	movw	r0, #8194	; 0x2002
    9566:	1d3a      	adds	r2, r7, #4
    9568:	f005 fe40 	bl	f1ec <bt_hci_cmd_send_sync>
		if (err) {
    956c:	4604      	mov	r4, r0
    956e:	2800      	cmp	r0, #0
    9570:	d1ce      	bne.n	9510 <bt_init+0x1b0>
		le_read_buffer_size_complete(rsp);
    9572:	687c      	ldr	r4, [r7, #4]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
    9574:	68a3      	ldr	r3, [r4, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    9576:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    957a:	b291      	uxth	r1, r2
    957c:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	if (!bt_dev.le.acl_mtu) {
    9580:	b129      	cbz	r1, 958e <bt_init+0x22e>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    9582:	78da      	ldrb	r2, [r3, #3]
		union { uintptr_t x; unsigned int val; } parm2 = { .val = limit };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
    9584:	4611      	mov	r1, r2
    9586:	f106 0028 	add.w	r0, r6, #40	; 0x28
    958a:	f017 fe3a 	bl	21202 <z_impl_k_sem_init>
		net_buf_unref(rsp);
    958e:	4620      	mov	r0, r4
    9590:	f00c fed4 	bl	1633c <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    9594:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
    9598:	f016 0620 	ands.w	r6, r6, #32
    959c:	d118      	bne.n	95d0 <bt_init+0x270>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    959e:	2102      	movs	r1, #2
    95a0:	f640 406d 	movw	r0, #3181	; 0xc6d
    95a4:	f005 fde8 	bl	f178 <bt_hci_cmd_create>
		if (!buf) {
    95a8:	4604      	mov	r4, r0
    95aa:	2800      	cmp	r0, #0
    95ac:	f000 80ca 	beq.w	9744 <bt_init+0x3e4>
	return net_buf_simple_add(&buf->b, len);
    95b0:	2102      	movs	r1, #2
    95b2:	3008      	adds	r0, #8
    95b4:	f016 fc6a 	bl	1fe8c <net_buf_simple_add>
		cp_le->le = 0x01;
    95b8:	2301      	movs	r3, #1
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    95ba:	4621      	mov	r1, r4
		cp_le->le = 0x01;
    95bc:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    95be:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    95c0:	4632      	mov	r2, r6
    95c2:	f640 406d 	movw	r0, #3181	; 0xc6d
    95c6:	f005 fe11 	bl	f1ec <bt_hci_cmd_send_sync>
		if (err) {
    95ca:	4604      	mov	r4, r0
    95cc:	2800      	cmp	r0, #0
    95ce:	d19f      	bne.n	9510 <bt_init+0x1b0>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    95d0:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
    95d4:	071b      	lsls	r3, r3, #28
    95d6:	d512      	bpl.n	95fe <bt_init+0x29e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    95d8:	2100      	movs	r1, #0
    95da:	f242 001c 	movw	r0, #8220	; 0x201c
    95de:	1d3a      	adds	r2, r7, #4
    95e0:	f005 fe04 	bl	f1ec <bt_hci_cmd_send_sync>
		if (err) {
    95e4:	4604      	mov	r4, r0
    95e6:	2800      	cmp	r0, #0
    95e8:	d192      	bne.n	9510 <bt_init+0x1b0>
		le_read_supp_states_complete(rsp);
    95ea:	6878      	ldr	r0, [r7, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    95ec:	6883      	ldr	r3, [r0, #8]
    95ee:	f8d3 2001 	ldr.w	r2, [r3, #1]
    95f2:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    95f6:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
    95fa:	f00c fe9f 	bl	1633c <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    95fe:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    9602:	069e      	lsls	r6, r3, #26
    9604:	d522      	bpl.n	964c <bt_init+0x2ec>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    9606:	4638      	mov	r0, r7
    9608:	1cb9      	adds	r1, r7, #2
    960a:	f005 fe6f 	bl	f2ec <hci_le_read_max_data_len>
		if (err) {
    960e:	4604      	mov	r4, r0
    9610:	2800      	cmp	r0, #0
    9612:	f47f af7d 	bne.w	9510 <bt_init+0x1b0>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    9616:	2104      	movs	r1, #4
    9618:	f242 0024 	movw	r0, #8228	; 0x2024
    961c:	f005 fdac 	bl	f178 <bt_hci_cmd_create>
		if (!buf) {
    9620:	4606      	mov	r6, r0
    9622:	2800      	cmp	r0, #0
    9624:	f000 808e 	beq.w	9744 <bt_init+0x3e4>
    9628:	2104      	movs	r1, #4
    962a:	3008      	adds	r0, #8
    962c:	f016 fc2e 	bl	1fe8c <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    9630:	883b      	ldrh	r3, [r7, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    9632:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    9634:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    9636:	887b      	ldrh	r3, [r7, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    9638:	4631      	mov	r1, r6
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    963a:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    963c:	f242 0024 	movw	r0, #8228	; 0x2024
    9640:	f005 fdd4 	bl	f1ec <bt_hci_cmd_send_sync>
		if (err) {
    9644:	4604      	mov	r4, r0
    9646:	2800      	cmp	r0, #0
    9648:	f47f af62 	bne.w	9510 <bt_init+0x1b0>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
    964c:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    9650:	065c      	lsls	r4, r3, #25
    9652:	d510      	bpl.n	9676 <bt_init+0x316>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
    9654:	2100      	movs	r1, #0
    9656:	f242 002a 	movw	r0, #8234	; 0x202a
    965a:	1d3a      	adds	r2, r7, #4
    965c:	f005 fdc6 	bl	f1ec <bt_hci_cmd_send_sync>
		if (err) {
    9660:	4604      	mov	r4, r0
    9662:	2800      	cmp	r0, #0
    9664:	f47f af54 	bne.w	9510 <bt_init+0x1b0>
		le_read_resolving_list_size_complete(rsp);
    9668:	6878      	ldr	r0, [r7, #4]
	bt_dev.le.rl_size = rp->rl_size;
    966a:	6883      	ldr	r3, [r0, #8]
    966c:	785b      	ldrb	r3, [r3, #1]
    966e:	f885 3118 	strb.w	r3, [r5, #280]	; 0x118
		net_buf_unref(rsp);
    9672:	f00c fe63 	bl	1633c <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    9676:	2108      	movs	r1, #8
    9678:	f242 0001 	movw	r0, #8193	; 0x2001
    967c:	f005 fd7c 	bl	f178 <bt_hci_cmd_create>
	if (!buf) {
    9680:	4604      	mov	r4, r0
    9682:	2800      	cmp	r0, #0
    9684:	d05e      	beq.n	9744 <bt_init+0x3e4>
    9686:	2108      	movs	r1, #8
    9688:	4408      	add	r0, r1
    968a:	f016 fbff 	bl	1fe8c <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
    968e:	f895 10d0 	ldrb.w	r1, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
    9692:	f240 2302 	movw	r3, #514	; 0x202
    9696:	f011 0f40 	tst.w	r1, #64	; 0x40
    969a:	bf08      	it	eq
    969c:	2303      	moveq	r3, #3
    969e:	4602      	mov	r2, r0
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    96a0:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    96a2:	bf4c      	ite	mi
    96a4:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    96a8:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    96ac:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    96ae:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    96b2:	bf48      	it	mi
    96b4:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    96b8:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    96bc:	f895 309a 	ldrb.w	r3, [r5, #154]	; 0x9a
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    96c0:	bf18      	it	ne
    96c2:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    96c6:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    96ca:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
    96cc:	bf48      	it	mi
    96ce:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    96d2:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    96d4:	bf08      	it	eq
    96d6:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
    96da:	2100      	movs	r1, #0
    96dc:	f014 fb6d 	bl	1ddba <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    96e0:	4621      	mov	r1, r4
    96e2:	2200      	movs	r2, #0
    96e4:	f242 0001 	movw	r0, #8193	; 0x2001
    96e8:	f005 fd80 	bl	f1ec <bt_hci_cmd_send_sync>
	if (err) {
    96ec:	4604      	mov	r4, r0
    96ee:	2800      	cmp	r0, #0
    96f0:	f47f af0e 	bne.w	9510 <bt_init+0x1b0>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    96f4:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
    96f8:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
    96fc:	0698      	lsls	r0, r3, #26
    96fe:	d424      	bmi.n	974a <bt_init+0x3ea>
	if (bt_dev.le.acl_mtu) {
    9700:	b9c9      	cbnz	r1, 9736 <bt_init+0x3d6>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    9702:	f241 0005 	movw	r0, #4101	; 0x1005
    9706:	1d3a      	adds	r2, r7, #4
    9708:	f005 fd70 	bl	f1ec <bt_hci_cmd_send_sync>
	if (err) {
    970c:	4604      	mov	r4, r0
    970e:	2800      	cmp	r0, #0
    9710:	f47f aefe 	bne.w	9510 <bt_init+0x1b0>
	if (bt_dev.le.acl_mtu) {
    9714:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
	read_buffer_size_complete(rsp);
    9718:	687c      	ldr	r4, [r7, #4]
	if (bt_dev.le.acl_mtu) {
    971a:	b94b      	cbnz	r3, 9730 <bt_init+0x3d0>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
    971c:	68a3      	ldr	r3, [r4, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    971e:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    9722:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    9726:	889a      	ldrh	r2, [r3, #4]
    9728:	4836      	ldr	r0, [pc, #216]	; (9804 <bt_init+0x4a4>)
    972a:	4611      	mov	r1, r2
    972c:	f017 fd69 	bl	21202 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    9730:	4620      	mov	r0, r4
    9732:	f00c fe03 	bl	1633c <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    9736:	2108      	movs	r1, #8
    9738:	f640 4001 	movw	r0, #3073	; 0xc01
    973c:	f005 fd1c 	bl	f178 <bt_hci_cmd_create>
	if (!buf) {
    9740:	4604      	mov	r4, r0
    9742:	b9b8      	cbnz	r0, 9774 <bt_init+0x414>
		return -ENOBUFS;
    9744:	f06f 0468 	mvn.w	r4, #104	; 0x68
    9748:	e6e2      	b.n	9510 <bt_init+0x1b0>
	else if (!bt_dev.le.acl_mtu) {
    974a:	2900      	cmp	r1, #0
    974c:	d1f3      	bne.n	9736 <bt_init+0x3d6>
		BT_ERR("ACL BR/EDR buffers not initialized");
    974e:	466c      	mov	r4, sp
    9750:	b088      	sub	sp, #32
    9752:	466a      	mov	r2, sp
    9754:	4b2c      	ldr	r3, [pc, #176]	; (9808 <bt_init+0x4a8>)
    9756:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    975a:	6153      	str	r3, [r2, #20]
    975c:	4b2b      	ldr	r3, [pc, #172]	; (980c <bt_init+0x4ac>)
    975e:	482c      	ldr	r0, [pc, #176]	; (9810 <bt_init+0x4b0>)
    9760:	6193      	str	r3, [r2, #24]
    9762:	2303      	movs	r3, #3
    9764:	f842 3f10 	str.w	r3, [r2, #16]!
    9768:	f014 fb1c 	bl	1dda4 <z_log_msg_static_create.constprop.0>
    976c:	46a5      	mov	sp, r4
		return -EIO;
    976e:	f06f 0404 	mvn.w	r4, #4
    9772:	e6cd      	b.n	9510 <bt_init+0x1b0>
    9774:	2108      	movs	r1, #8
    9776:	4408      	add	r0, r1
    9778:	f016 fb88 	bl	1fe8c <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    977c:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    9780:	4602      	mov	r2, r0
    9782:	07d9      	lsls	r1, r3, #31
    9784:	d434      	bmi.n	97f0 <bt_init+0x490>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    9786:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    978a:	4822      	ldr	r0, [pc, #136]	; (9814 <bt_init+0x4b4>)
	sys_put_le64(mask, ev->events);
    978c:	f014 fb15 	bl	1ddba <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    9790:	4621      	mov	r1, r4
    9792:	2200      	movs	r2, #0
    9794:	f640 4001 	movw	r0, #3073	; 0xc01
    9798:	f005 fd28 	bl	f1ec <bt_hci_cmd_send_sync>
	if (err) {
    979c:	4604      	mov	r4, r0
    979e:	2800      	cmp	r0, #0
    97a0:	f47f aeb6 	bne.w	9510 <bt_init+0x1b0>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    97a4:	4601      	mov	r1, r0
    97a6:	1d3a      	adds	r2, r7, #4
    97a8:	f64f 4001 	movw	r0, #64513	; 0xfc01
    97ac:	f005 fd1e 	bl	f1ec <bt_hci_cmd_send_sync>
	if (err) {
    97b0:	4c19      	ldr	r4, [pc, #100]	; (9818 <bt_init+0x4b8>)
    97b2:	b3a8      	cbz	r0, 9820 <bt_init+0x4c0>
		BT_WARN("Vendor HCI extensions not available");
    97b4:	466d      	mov	r5, sp
    97b6:	b088      	sub	sp, #32
    97b8:	466a      	mov	r2, sp
    97ba:	4b18      	ldr	r3, [pc, #96]	; (981c <bt_init+0x4bc>)
			BT_WARN("Failed to read supported vendor features");
    97bc:	e9c2 3405 	strd	r3, r4, [r2, #20]
    97c0:	2303      	movs	r3, #3
    97c2:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    97c6:	4812      	ldr	r0, [pc, #72]	; (9810 <bt_init+0x4b0>)
    97c8:	f842 3f10 	str.w	r3, [r2, #16]!
    97cc:	f014 faea 	bl	1dda4 <z_log_msg_static_create.constprop.0>
    97d0:	46ad      	mov	sp, r5
	err = bt_id_init();
    97d2:	f007 f8dd 	bl	10990 <bt_id_init>
	if (err) {
    97d6:	4604      	mov	r4, r0
    97d8:	2800      	cmp	r0, #0
    97da:	f47f ae99 	bne.w	9510 <bt_init+0x1b0>
		err = bt_conn_init();
    97de:	f008 fc93 	bl	12108 <bt_conn_init>
		if (err) {
    97e2:	4604      	mov	r4, r0
    97e4:	2800      	cmp	r0, #0
    97e6:	f47f ae93 	bne.w	9510 <bt_init+0x1b0>
	bt_finalize_init();
    97ea:	f006 fb7d 	bl	fee8 <bt_finalize_init>
	return 0;
    97ee:	e68f      	b.n	9510 <bt_init+0x1b0>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    97f0:	a101      	add	r1, pc, #4	; (adr r1, 97f8 <bt_init+0x498>)
    97f2:	e9d1 0100 	ldrd	r0, r1, [r1]
    97f6:	e7c9      	b.n	978c <bt_init+0x42c>
    97f8:	02008890 	.word	0x02008890
    97fc:	20008000 	.word	0x20008000
    9800:	200080d0 	.word	0x200080d0
    9804:	20008100 	.word	0x20008100
    9808:	00024976 	.word	0x00024976
    980c:	00024e9f 	.word	0x00024e9f
    9810:	000227f8 	.word	0x000227f8
    9814:	02008810 	.word	0x02008810
    9818:	00024e61 	.word	0x00024e61
    981c:	0002499d 	.word	0x0002499d
	rp.info = (void *)rsp->data;
    9820:	687b      	ldr	r3, [r7, #4]
	BT_INFO("HW Platform: %s (0x%04x)",
    9822:	466e      	mov	r6, sp
	rp.info = (void *)rsp->data;
    9824:	689d      	ldr	r5, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    9826:	b08a      	sub	sp, #40	; 0x28
    9828:	f8b5 3001 	ldrh.w	r3, [r5, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
    982c:	2b03      	cmp	r3, #3
		return plat_str[platform];
    982e:	bf96      	itet	ls
    9830:	4a46      	ldrls	r2, [pc, #280]	; (994c <bt_init+0x5ec>)
	return "unknown";
    9832:	4947      	ldrhi	r1, [pc, #284]	; (9950 <bt_init+0x5f0>)
		return plat_str[platform];
    9834:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
    9838:	466a      	mov	r2, sp
    983a:	e9c2 1307 	strd	r1, r3, [r2, #28]
    983e:	f240 3301 	movw	r3, #769	; 0x301
    9842:	4844      	ldr	r0, [pc, #272]	; (9954 <bt_init+0x5f4>)
    9844:	8493      	strh	r3, [r2, #36]	; 0x24
    9846:	4b44      	ldr	r3, [pc, #272]	; (9958 <bt_init+0x5f8>)
    9848:	e9c2 0405 	strd	r0, r4, [r2, #20]
    984c:	f44f 5133 	mov.w	r1, #11456	; 0x2cc0
    9850:	f842 3f10 	str.w	r3, [r2, #16]!
    9854:	4841      	ldr	r0, [pc, #260]	; (995c <bt_init+0x5fc>)
    9856:	f014 faa5 	bl	1dda4 <z_log_msg_static_create.constprop.0>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    985a:	f8b5 2001 	ldrh.w	r2, [r5, #1]
    985e:	46b5      	mov	sp, r6
    9860:	2a02      	cmp	r2, #2
	BT_INFO("HW Variant: %s (0x%04x)",
    9862:	f8b5 3003 	ldrh.w	r3, [r5, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    9866:	d14d      	bne.n	9904 <bt_init+0x5a4>
	if (variant < ARRAY_SIZE(nordic_str)) {
    9868:	2b03      	cmp	r3, #3
    986a:	d84b      	bhi.n	9904 <bt_init+0x5a4>
		return nordic_str[variant];
    986c:	4a3c      	ldr	r2, [pc, #240]	; (9960 <bt_init+0x600>)
    986e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
    9872:	466e      	mov	r6, sp
    9874:	b08a      	sub	sp, #40	; 0x28
    9876:	466a      	mov	r2, sp
    9878:	e9c2 1307 	strd	r1, r3, [r2, #28]
    987c:	f240 3301 	movw	r3, #769	; 0x301
    9880:	4838      	ldr	r0, [pc, #224]	; (9964 <bt_init+0x604>)
    9882:	8493      	strh	r3, [r2, #36]	; 0x24
    9884:	4b34      	ldr	r3, [pc, #208]	; (9958 <bt_init+0x5f8>)
    9886:	e9c2 0405 	strd	r0, r4, [r2, #20]
    988a:	f44f 5133 	mov.w	r1, #11456	; 0x2cc0
    988e:	f842 3f10 	str.w	r3, [r2, #16]!
    9892:	4832      	ldr	r0, [pc, #200]	; (995c <bt_init+0x5fc>)
    9894:	f014 fa86 	bl	1dda4 <z_log_msg_static_create.constprop.0>
    9898:	46b5      	mov	sp, r6
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    989a:	796b      	ldrb	r3, [r5, #5]
    989c:	f895 c006 	ldrb.w	ip, [r5, #6]
	if (variant < ARRAY_SIZE(var_str)) {
    98a0:	2b03      	cmp	r3, #3
		return var_str[variant];
    98a2:	bf98      	it	ls
    98a4:	4a30      	ldrls	r2, [pc, #192]	; (9968 <bt_init+0x608>)
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    98a6:	f8b5 6007 	ldrh.w	r6, [r5, #7]
    98aa:	f8d5 0009 	ldr.w	r0, [r5, #9]
    98ae:	466d      	mov	r5, sp
    98b0:	b08e      	sub	sp, #56	; 0x38
		return var_str[variant];
    98b2:	bf94      	ite	ls
    98b4:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
	return "unknown";
    98b8:	4925      	ldrhi	r1, [pc, #148]	; (9950 <bt_init+0x5f0>)
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    98ba:	466a      	mov	r2, sp
    98bc:	e9c2 1307 	strd	r1, r3, [r2, #28]
    98c0:	f240 3301 	movw	r3, #769	; 0x301
    98c4:	f8df e0a4 	ldr.w	lr, [pc, #164]	; 996c <bt_init+0x60c>
    98c8:	8613      	strh	r3, [r2, #48]	; 0x30
    98ca:	4b29      	ldr	r3, [pc, #164]	; (9970 <bt_init+0x610>)
    98cc:	e9c2 c609 	strd	ip, r6, [r2, #36]	; 0x24
    98d0:	e9c2 e405 	strd	lr, r4, [r2, #20]
    98d4:	62d0      	str	r0, [r2, #44]	; 0x2c
    98d6:	f244 41c0 	movw	r1, #17600	; 0x44c0
    98da:	f842 3f10 	str.w	r3, [r2, #16]!
    98de:	481f      	ldr	r0, [pc, #124]	; (995c <bt_init+0x5fc>)
    98e0:	f014 fa60 	bl	1dda4 <z_log_msg_static_create.constprop.0>
    98e4:	46ad      	mov	sp, r5
	net_buf_unref(rsp);
    98e6:	6878      	ldr	r0, [r7, #4]
    98e8:	f00c fd28 	bl	1633c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    98ec:	2100      	movs	r1, #0
    98ee:	f64f 4002 	movw	r0, #64514	; 0xfc02
    98f2:	1d3a      	adds	r2, r7, #4
    98f4:	f005 fc7a 	bl	f1ec <bt_hci_cmd_send_sync>
	if (err) {
    98f8:	4606      	mov	r6, r0
    98fa:	b128      	cbz	r0, 9908 <bt_init+0x5a8>
		BT_WARN("Failed to read supported vendor commands");
    98fc:	b088      	sub	sp, #32
    98fe:	466a      	mov	r2, sp
    9900:	4b1c      	ldr	r3, [pc, #112]	; (9974 <bt_init+0x614>)
    9902:	e75b      	b.n	97bc <bt_init+0x45c>
		return "unknown";
    9904:	4912      	ldr	r1, [pc, #72]	; (9950 <bt_init+0x5f0>)
    9906:	e7b4      	b.n	9872 <bt_init+0x512>
	rp.cmds = (void *)rsp->data;
    9908:	6878      	ldr	r0, [r7, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    990a:	f8df 806c 	ldr.w	r8, [pc, #108]	; 9978 <bt_init+0x618>
    990e:	6883      	ldr	r3, [r0, #8]
    9910:	f8b3 3001 	ldrh.w	r3, [r3, #1]
    9914:	f8a8 30b9 	strh.w	r3, [r8, #185]	; 0xb9
	net_buf_unref(rsp);
    9918:	f00c fd10 	bl	1633c <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    991c:	f898 30b9 	ldrb.w	r3, [r8, #185]	; 0xb9
    9920:	075b      	lsls	r3, r3, #29
    9922:	f57f af56 	bpl.w	97d2 <bt_init+0x472>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    9926:	4631      	mov	r1, r6
    9928:	f64f 4003 	movw	r0, #64515	; 0xfc03
    992c:	1d3a      	adds	r2, r7, #4
    992e:	f005 fc5d 	bl	f1ec <bt_hci_cmd_send_sync>
		if (err) {
    9932:	b118      	cbz	r0, 993c <bt_init+0x5dc>
			BT_WARN("Failed to read supported vendor features");
    9934:	b088      	sub	sp, #32
    9936:	466a      	mov	r2, sp
    9938:	4b10      	ldr	r3, [pc, #64]	; (997c <bt_init+0x61c>)
    993a:	e73f      	b.n	97bc <bt_init+0x45c>
		rp.feat = (void *)rsp->data;
    993c:	6878      	ldr	r0, [r7, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
    993e:	6883      	ldr	r3, [r0, #8]
    9940:	785b      	ldrb	r3, [r3, #1]
    9942:	f888 30b8 	strb.w	r3, [r8, #184]	; 0xb8
		net_buf_unref(rsp);
    9946:	f00c fcf9 	bl	1633c <net_buf_unref>
    994a:	e742      	b.n	97d2 <bt_init+0x472>
    994c:	00022e80 	.word	0x00022e80
    9950:	00024310 	.word	0x00024310
    9954:	000249c5 	.word	0x000249c5
    9958:	01000005 	.word	0x01000005
    995c:	000227f8 	.word	0x000227f8
    9960:	00022e70 	.word	0x00022e70
    9964:	000249e2 	.word	0x000249e2
    9968:	00022e60 	.word	0x00022e60
    996c:	000249fe 	.word	0x000249fe
    9970:	01000008 	.word	0x01000008
    9974:	00024a2f 	.word	0x00024a2f
    9978:	20008000 	.word	0x20008000
    997c:	00024a5c 	.word	0x00024a5c

00009980 <_dtoa_r>:
    9980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9984:	4614      	mov	r4, r2
    9986:	b097      	sub	sp, #92	; 0x5c
    9988:	461d      	mov	r5, r3
    998a:	6a47      	ldr	r7, [r0, #36]	; 0x24
    998c:	4683      	mov	fp, r0
    998e:	9e23      	ldr	r6, [sp, #140]	; 0x8c
    9990:	e9cd 4504 	strd	r4, r5, [sp, #16]
    9994:	b97f      	cbnz	r7, 99b6 <_dtoa_r+0x36>
    9996:	2010      	movs	r0, #16
    9998:	f011 f8c6 	bl	1ab28 <malloc>
    999c:	4602      	mov	r2, r0
    999e:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
    99a2:	b920      	cbnz	r0, 99ae <_dtoa_r+0x2e>
    99a4:	4ba2      	ldr	r3, [pc, #648]	; (9c30 <_dtoa_r+0x2b0>)
    99a6:	21ea      	movs	r1, #234	; 0xea
    99a8:	48a2      	ldr	r0, [pc, #648]	; (9c34 <_dtoa_r+0x2b4>)
    99aa:	f012 fadf 	bl	1bf6c <__assert_func>
    99ae:	e9c0 7701 	strd	r7, r7, [r0, #4]
    99b2:	6007      	str	r7, [r0, #0]
    99b4:	60c7      	str	r7, [r0, #12]
    99b6:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    99ba:	6819      	ldr	r1, [r3, #0]
    99bc:	b159      	cbz	r1, 99d6 <_dtoa_r+0x56>
    99be:	685a      	ldr	r2, [r3, #4]
    99c0:	2301      	movs	r3, #1
    99c2:	4658      	mov	r0, fp
    99c4:	4093      	lsls	r3, r2
    99c6:	604a      	str	r2, [r1, #4]
    99c8:	608b      	str	r3, [r1, #8]
    99ca:	f011 fdf5 	bl	1b5b8 <_Bfree>
    99ce:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    99d2:	2200      	movs	r2, #0
    99d4:	601a      	str	r2, [r3, #0]
    99d6:	1e2b      	subs	r3, r5, #0
    99d8:	bfb7      	itett	lt
    99da:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    99de:	2300      	movge	r3, #0
    99e0:	2201      	movlt	r2, #1
    99e2:	9305      	strlt	r3, [sp, #20]
    99e4:	bfa8      	it	ge
    99e6:	6033      	strge	r3, [r6, #0]
    99e8:	9f05      	ldr	r7, [sp, #20]
    99ea:	4b93      	ldr	r3, [pc, #588]	; (9c38 <_dtoa_r+0x2b8>)
    99ec:	bfb8      	it	lt
    99ee:	6032      	strlt	r2, [r6, #0]
    99f0:	43bb      	bics	r3, r7
    99f2:	d119      	bne.n	9a28 <_dtoa_r+0xa8>
    99f4:	f242 730f 	movw	r3, #9999	; 0x270f
    99f8:	9a22      	ldr	r2, [sp, #136]	; 0x88
    99fa:	6013      	str	r3, [r2, #0]
    99fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
    9a00:	4323      	orrs	r3, r4
    9a02:	f000 85e0 	beq.w	a5c6 <_dtoa_r+0xc46>
    9a06:	9b24      	ldr	r3, [sp, #144]	; 0x90
    9a08:	b953      	cbnz	r3, 9a20 <_dtoa_r+0xa0>
    9a0a:	4b8c      	ldr	r3, [pc, #560]	; (9c3c <_dtoa_r+0x2bc>)
    9a0c:	e021      	b.n	9a52 <_dtoa_r+0xd2>
    9a0e:	4b8c      	ldr	r3, [pc, #560]	; (9c40 <_dtoa_r+0x2c0>)
    9a10:	9308      	str	r3, [sp, #32]
    9a12:	3308      	adds	r3, #8
    9a14:	9a24      	ldr	r2, [sp, #144]	; 0x90
    9a16:	6013      	str	r3, [r2, #0]
    9a18:	9808      	ldr	r0, [sp, #32]
    9a1a:	b017      	add	sp, #92	; 0x5c
    9a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9a20:	4b86      	ldr	r3, [pc, #536]	; (9c3c <_dtoa_r+0x2bc>)
    9a22:	9308      	str	r3, [sp, #32]
    9a24:	3303      	adds	r3, #3
    9a26:	e7f5      	b.n	9a14 <_dtoa_r+0x94>
    9a28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    9a2c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    9a30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    9a34:	2200      	movs	r2, #0
    9a36:	2300      	movs	r3, #0
    9a38:	f7ff fac0 	bl	8fbc <__aeabi_dcmpeq>
    9a3c:	4680      	mov	r8, r0
    9a3e:	b150      	cbz	r0, 9a56 <_dtoa_r+0xd6>
    9a40:	2301      	movs	r3, #1
    9a42:	9a22      	ldr	r2, [sp, #136]	; 0x88
    9a44:	6013      	str	r3, [r2, #0]
    9a46:	9b24      	ldr	r3, [sp, #144]	; 0x90
    9a48:	b113      	cbz	r3, 9a50 <_dtoa_r+0xd0>
    9a4a:	4b7e      	ldr	r3, [pc, #504]	; (9c44 <_dtoa_r+0x2c4>)
    9a4c:	9a24      	ldr	r2, [sp, #144]	; 0x90
    9a4e:	6013      	str	r3, [r2, #0]
    9a50:	4b7d      	ldr	r3, [pc, #500]	; (9c48 <_dtoa_r+0x2c8>)
    9a52:	9308      	str	r3, [sp, #32]
    9a54:	e7e0      	b.n	9a18 <_dtoa_r+0x98>
    9a56:	ab14      	add	r3, sp, #80	; 0x50
    9a58:	f3c7 560a 	ubfx	r6, r7, #20, #11
    9a5c:	4658      	mov	r0, fp
    9a5e:	9301      	str	r3, [sp, #4]
    9a60:	ab15      	add	r3, sp, #84	; 0x54
    9a62:	9300      	str	r3, [sp, #0]
    9a64:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    9a68:	f012 f82c 	bl	1bac4 <__d2b>
    9a6c:	9003      	str	r0, [sp, #12]
    9a6e:	2e00      	cmp	r6, #0
    9a70:	d078      	beq.n	9b64 <_dtoa_r+0x1e4>
    9a72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9a74:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
    9a78:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    9a7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
    9a80:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
    9a84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    9a88:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    9a8c:	4619      	mov	r1, r3
    9a8e:	2200      	movs	r2, #0
    9a90:	4b6e      	ldr	r3, [pc, #440]	; (9c4c <_dtoa_r+0x2cc>)
    9a92:	f7fe fb65 	bl	8160 <__aeabi_dsub>
    9a96:	a360      	add	r3, pc, #384	; (adr r3, 9c18 <_dtoa_r+0x298>)
    9a98:	e9d3 2300 	ldrd	r2, r3, [r3]
    9a9c:	f7fe fd18 	bl	84d0 <__aeabi_dmul>
    9aa0:	a35f      	add	r3, pc, #380	; (adr r3, 9c20 <_dtoa_r+0x2a0>)
    9aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
    9aa6:	f7fe fb5d 	bl	8164 <__adddf3>
    9aaa:	4604      	mov	r4, r0
    9aac:	460d      	mov	r5, r1
    9aae:	4630      	mov	r0, r6
    9ab0:	f7fe fca4 	bl	83fc <__aeabi_i2d>
    9ab4:	a35c      	add	r3, pc, #368	; (adr r3, 9c28 <_dtoa_r+0x2a8>)
    9ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
    9aba:	f7fe fd09 	bl	84d0 <__aeabi_dmul>
    9abe:	4602      	mov	r2, r0
    9ac0:	460b      	mov	r3, r1
    9ac2:	4620      	mov	r0, r4
    9ac4:	4629      	mov	r1, r5
    9ac6:	f7fe fb4d 	bl	8164 <__adddf3>
    9aca:	4604      	mov	r4, r0
    9acc:	460d      	mov	r5, r1
    9ace:	f7ff fabd 	bl	904c <__aeabi_d2iz>
    9ad2:	2200      	movs	r2, #0
    9ad4:	4607      	mov	r7, r0
    9ad6:	2300      	movs	r3, #0
    9ad8:	4620      	mov	r0, r4
    9ada:	4629      	mov	r1, r5
    9adc:	f7ff fa78 	bl	8fd0 <__aeabi_dcmplt>
    9ae0:	b140      	cbz	r0, 9af4 <_dtoa_r+0x174>
    9ae2:	4638      	mov	r0, r7
    9ae4:	f7fe fc8a 	bl	83fc <__aeabi_i2d>
    9ae8:	4622      	mov	r2, r4
    9aea:	462b      	mov	r3, r5
    9aec:	f7ff fa66 	bl	8fbc <__aeabi_dcmpeq>
    9af0:	b900      	cbnz	r0, 9af4 <_dtoa_r+0x174>
    9af2:	3f01      	subs	r7, #1
    9af4:	2f16      	cmp	r7, #22
    9af6:	d854      	bhi.n	9ba2 <_dtoa_r+0x222>
    9af8:	4b55      	ldr	r3, [pc, #340]	; (9c50 <_dtoa_r+0x2d0>)
    9afa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    9afe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    9b02:	e9d3 2300 	ldrd	r2, r3, [r3]
    9b06:	f7ff fa63 	bl	8fd0 <__aeabi_dcmplt>
    9b0a:	2800      	cmp	r0, #0
    9b0c:	d04b      	beq.n	9ba6 <_dtoa_r+0x226>
    9b0e:	3f01      	subs	r7, #1
    9b10:	2300      	movs	r3, #0
    9b12:	9312      	str	r3, [sp, #72]	; 0x48
    9b14:	9b14      	ldr	r3, [sp, #80]	; 0x50
    9b16:	1b9b      	subs	r3, r3, r6
    9b18:	1e5a      	subs	r2, r3, #1
    9b1a:	bf4c      	ite	mi
    9b1c:	f1c3 0301 	rsbmi	r3, r3, #1
    9b20:	2300      	movpl	r3, #0
    9b22:	920a      	str	r2, [sp, #40]	; 0x28
    9b24:	bf45      	ittet	mi
    9b26:	9306      	strmi	r3, [sp, #24]
    9b28:	2300      	movmi	r3, #0
    9b2a:	9306      	strpl	r3, [sp, #24]
    9b2c:	930a      	strmi	r3, [sp, #40]	; 0x28
    9b2e:	2f00      	cmp	r7, #0
    9b30:	db3b      	blt.n	9baa <_dtoa_r+0x22a>
    9b32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9b34:	970f      	str	r7, [sp, #60]	; 0x3c
    9b36:	443b      	add	r3, r7
    9b38:	930a      	str	r3, [sp, #40]	; 0x28
    9b3a:	2300      	movs	r3, #0
    9b3c:	930b      	str	r3, [sp, #44]	; 0x2c
    9b3e:	9b20      	ldr	r3, [sp, #128]	; 0x80
    9b40:	2b09      	cmp	r3, #9
    9b42:	f200 8089 	bhi.w	9c58 <_dtoa_r+0x2d8>
    9b46:	2b05      	cmp	r3, #5
    9b48:	bfc5      	ittet	gt
    9b4a:	3b04      	subgt	r3, #4
    9b4c:	2400      	movgt	r4, #0
    9b4e:	2401      	movle	r4, #1
    9b50:	9320      	strgt	r3, [sp, #128]	; 0x80
    9b52:	9b20      	ldr	r3, [sp, #128]	; 0x80
    9b54:	3b02      	subs	r3, #2
    9b56:	2b03      	cmp	r3, #3
    9b58:	f200 8089 	bhi.w	9c6e <_dtoa_r+0x2ee>
    9b5c:	e8df f003 	tbb	[pc, r3]
    9b60:	59383a2d 	.word	0x59383a2d
    9b64:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	; 0x50
    9b68:	441e      	add	r6, r3
    9b6a:	f206 4332 	addw	r3, r6, #1074	; 0x432
    9b6e:	2b20      	cmp	r3, #32
    9b70:	bfc9      	itett	gt
    9b72:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
    9b76:	f1c3 0320 	rsble	r3, r3, #32
    9b7a:	409f      	lslgt	r7, r3
    9b7c:	f206 4312 	addwgt	r3, r6, #1042	; 0x412
    9b80:	bfd8      	it	le
    9b82:	fa04 f003 	lslle.w	r0, r4, r3
    9b86:	f106 36ff 	add.w	r6, r6, #4294967295
    9b8a:	bfc4      	itt	gt
    9b8c:	fa24 f303 	lsrgt.w	r3, r4, r3
    9b90:	ea47 0003 	orrgt.w	r0, r7, r3
    9b94:	f7fe fc22 	bl	83dc <__aeabi_ui2d>
    9b98:	2201      	movs	r2, #1
    9b9a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
    9b9e:	9213      	str	r2, [sp, #76]	; 0x4c
    9ba0:	e774      	b.n	9a8c <_dtoa_r+0x10c>
    9ba2:	2301      	movs	r3, #1
    9ba4:	e7b5      	b.n	9b12 <_dtoa_r+0x192>
    9ba6:	9012      	str	r0, [sp, #72]	; 0x48
    9ba8:	e7b4      	b.n	9b14 <_dtoa_r+0x194>
    9baa:	9b06      	ldr	r3, [sp, #24]
    9bac:	1bdb      	subs	r3, r3, r7
    9bae:	9306      	str	r3, [sp, #24]
    9bb0:	427b      	negs	r3, r7
    9bb2:	930b      	str	r3, [sp, #44]	; 0x2c
    9bb4:	2300      	movs	r3, #0
    9bb6:	930f      	str	r3, [sp, #60]	; 0x3c
    9bb8:	e7c1      	b.n	9b3e <_dtoa_r+0x1be>
    9bba:	2300      	movs	r3, #0
    9bbc:	930e      	str	r3, [sp, #56]	; 0x38
    9bbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9bc0:	2b00      	cmp	r3, #0
    9bc2:	dc57      	bgt.n	9c74 <_dtoa_r+0x2f4>
    9bc4:	2301      	movs	r3, #1
    9bc6:	4699      	mov	r9, r3
    9bc8:	461a      	mov	r2, r3
    9bca:	9309      	str	r3, [sp, #36]	; 0x24
    9bcc:	9221      	str	r2, [sp, #132]	; 0x84
    9bce:	e00c      	b.n	9bea <_dtoa_r+0x26a>
    9bd0:	2301      	movs	r3, #1
    9bd2:	e7f3      	b.n	9bbc <_dtoa_r+0x23c>
    9bd4:	2300      	movs	r3, #0
    9bd6:	930e      	str	r3, [sp, #56]	; 0x38
    9bd8:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9bda:	18fb      	adds	r3, r7, r3
    9bdc:	f103 0901 	add.w	r9, r3, #1
    9be0:	9309      	str	r3, [sp, #36]	; 0x24
    9be2:	464b      	mov	r3, r9
    9be4:	2b01      	cmp	r3, #1
    9be6:	bfb8      	it	lt
    9be8:	2301      	movlt	r3, #1
    9bea:	f8db 0024 	ldr.w	r0, [fp, #36]	; 0x24
    9bee:	2100      	movs	r1, #0
    9bf0:	2204      	movs	r2, #4
    9bf2:	f102 0514 	add.w	r5, r2, #20
    9bf6:	429d      	cmp	r5, r3
    9bf8:	d940      	bls.n	9c7c <_dtoa_r+0x2fc>
    9bfa:	6041      	str	r1, [r0, #4]
    9bfc:	4658      	mov	r0, fp
    9bfe:	f011 fc9b 	bl	1b538 <_Balloc>
    9c02:	9008      	str	r0, [sp, #32]
    9c04:	2800      	cmp	r0, #0
    9c06:	d13c      	bne.n	9c82 <_dtoa_r+0x302>
    9c08:	4b12      	ldr	r3, [pc, #72]	; (9c54 <_dtoa_r+0x2d4>)
    9c0a:	4602      	mov	r2, r0
    9c0c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    9c10:	e6ca      	b.n	99a8 <_dtoa_r+0x28>
    9c12:	2301      	movs	r3, #1
    9c14:	e7df      	b.n	9bd6 <_dtoa_r+0x256>
    9c16:	bf00      	nop
    9c18:	636f4361 	.word	0x636f4361
    9c1c:	3fd287a7 	.word	0x3fd287a7
    9c20:	8b60c8b3 	.word	0x8b60c8b3
    9c24:	3fc68a28 	.word	0x3fc68a28
    9c28:	509f79fb 	.word	0x509f79fb
    9c2c:	3fd34413 	.word	0x3fd34413
    9c30:	00026dde 	.word	0x00026dde
    9c34:	00026df5 	.word	0x00026df5
    9c38:	7ff00000 	.word	0x7ff00000
    9c3c:	00026dda 	.word	0x00026dda
    9c40:	00026dd1 	.word	0x00026dd1
    9c44:	000245f8 	.word	0x000245f8
    9c48:	000245f7 	.word	0x000245f7
    9c4c:	3ff80000 	.word	0x3ff80000
    9c50:	000229d0 	.word	0x000229d0
    9c54:	00026e69 	.word	0x00026e69
    9c58:	2401      	movs	r4, #1
    9c5a:	2300      	movs	r3, #0
    9c5c:	940e      	str	r4, [sp, #56]	; 0x38
    9c5e:	9320      	str	r3, [sp, #128]	; 0x80
    9c60:	f04f 33ff 	mov.w	r3, #4294967295
    9c64:	2200      	movs	r2, #0
    9c66:	4699      	mov	r9, r3
    9c68:	9309      	str	r3, [sp, #36]	; 0x24
    9c6a:	2312      	movs	r3, #18
    9c6c:	e7ae      	b.n	9bcc <_dtoa_r+0x24c>
    9c6e:	2301      	movs	r3, #1
    9c70:	930e      	str	r3, [sp, #56]	; 0x38
    9c72:	e7f5      	b.n	9c60 <_dtoa_r+0x2e0>
    9c74:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9c76:	4699      	mov	r9, r3
    9c78:	9309      	str	r3, [sp, #36]	; 0x24
    9c7a:	e7b6      	b.n	9bea <_dtoa_r+0x26a>
    9c7c:	3101      	adds	r1, #1
    9c7e:	0052      	lsls	r2, r2, #1
    9c80:	e7b7      	b.n	9bf2 <_dtoa_r+0x272>
    9c82:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    9c86:	f1b9 0f0e 	cmp.w	r9, #14
    9c8a:	9a08      	ldr	r2, [sp, #32]
    9c8c:	601a      	str	r2, [r3, #0]
    9c8e:	d86f      	bhi.n	9d70 <_dtoa_r+0x3f0>
    9c90:	2c00      	cmp	r4, #0
    9c92:	d06d      	beq.n	9d70 <_dtoa_r+0x3f0>
    9c94:	2f00      	cmp	r7, #0
    9c96:	dd36      	ble.n	9d06 <_dtoa_r+0x386>
    9c98:	f007 020f 	and.w	r2, r7, #15
    9c9c:	4ba0      	ldr	r3, [pc, #640]	; (9f20 <_dtoa_r+0x5a0>)
    9c9e:	05f8      	lsls	r0, r7, #23
    9ca0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    9ca4:	e9d3 3400 	ldrd	r3, r4, [r3]
    9ca8:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    9cac:	ea4f 1427 	mov.w	r4, r7, asr #4
    9cb0:	d517      	bpl.n	9ce2 <_dtoa_r+0x362>
    9cb2:	4b9c      	ldr	r3, [pc, #624]	; (9f24 <_dtoa_r+0x5a4>)
    9cb4:	f004 040f 	and.w	r4, r4, #15
    9cb8:	f04f 0803 	mov.w	r8, #3
    9cbc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    9cc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    9cc4:	f7fe fd2e 	bl	8724 <__aeabi_ddiv>
    9cc8:	e9cd 0104 	strd	r0, r1, [sp, #16]
    9ccc:	4d95      	ldr	r5, [pc, #596]	; (9f24 <_dtoa_r+0x5a4>)
    9cce:	b95c      	cbnz	r4, 9ce8 <_dtoa_r+0x368>
    9cd0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    9cd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    9cd8:	f7fe fd24 	bl	8724 <__aeabi_ddiv>
    9cdc:	e9cd 0104 	strd	r0, r1, [sp, #16]
    9ce0:	e02b      	b.n	9d3a <_dtoa_r+0x3ba>
    9ce2:	f04f 0802 	mov.w	r8, #2
    9ce6:	e7f1      	b.n	9ccc <_dtoa_r+0x34c>
    9ce8:	07e1      	lsls	r1, r4, #31
    9cea:	d509      	bpl.n	9d00 <_dtoa_r+0x380>
    9cec:	f108 0801 	add.w	r8, r8, #1
    9cf0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    9cf4:	e9d5 2300 	ldrd	r2, r3, [r5]
    9cf8:	f7fe fbea 	bl	84d0 <__aeabi_dmul>
    9cfc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    9d00:	1064      	asrs	r4, r4, #1
    9d02:	3508      	adds	r5, #8
    9d04:	e7e3      	b.n	9cce <_dtoa_r+0x34e>
    9d06:	f000 8107 	beq.w	9f18 <_dtoa_r+0x598>
    9d0a:	427c      	negs	r4, r7
    9d0c:	4b84      	ldr	r3, [pc, #528]	; (9f20 <_dtoa_r+0x5a0>)
    9d0e:	4d85      	ldr	r5, [pc, #532]	; (9f24 <_dtoa_r+0x5a4>)
    9d10:	f04f 0802 	mov.w	r8, #2
    9d14:	f004 020f 	and.w	r2, r4, #15
    9d18:	1124      	asrs	r4, r4, #4
    9d1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    9d1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    9d22:	e9d3 2300 	ldrd	r2, r3, [r3]
    9d26:	f7fe fbd3 	bl	84d0 <__aeabi_dmul>
    9d2a:	2300      	movs	r3, #0
    9d2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    9d30:	2c00      	cmp	r4, #0
    9d32:	f040 80e5 	bne.w	9f00 <_dtoa_r+0x580>
    9d36:	2b00      	cmp	r3, #0
    9d38:	d1d0      	bne.n	9cdc <_dtoa_r+0x35c>
    9d3a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9d3c:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    9d40:	2b00      	cmp	r3, #0
    9d42:	f000 814c 	beq.w	9fde <_dtoa_r+0x65e>
    9d46:	2200      	movs	r2, #0
    9d48:	4b77      	ldr	r3, [pc, #476]	; (9f28 <_dtoa_r+0x5a8>)
    9d4a:	4620      	mov	r0, r4
    9d4c:	4629      	mov	r1, r5
    9d4e:	f7ff f93f 	bl	8fd0 <__aeabi_dcmplt>
    9d52:	2800      	cmp	r0, #0
    9d54:	f000 8143 	beq.w	9fde <_dtoa_r+0x65e>
    9d58:	f1b9 0f00 	cmp.w	r9, #0
    9d5c:	f000 813f 	beq.w	9fde <_dtoa_r+0x65e>
    9d60:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9d62:	2b00      	cmp	r3, #0
    9d64:	f300 80e4 	bgt.w	9f30 <_dtoa_r+0x5b0>
    9d68:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    9d6c:	e9cd 3404 	strd	r3, r4, [sp, #16]
    9d70:	9b15      	ldr	r3, [sp, #84]	; 0x54
    9d72:	2b00      	cmp	r3, #0
    9d74:	db02      	blt.n	9d7c <_dtoa_r+0x3fc>
    9d76:	2f0e      	cmp	r7, #14
    9d78:	f340 8242 	ble.w	a200 <_dtoa_r+0x880>
    9d7c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9d7e:	2a00      	cmp	r2, #0
    9d80:	f040 8267 	bne.w	a252 <_dtoa_r+0x8d2>
    9d84:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    9d86:	2500      	movs	r5, #0
    9d88:	f8dd 8018 	ldr.w	r8, [sp, #24]
    9d8c:	f1b8 0f00 	cmp.w	r8, #0
    9d90:	d00d      	beq.n	9dae <_dtoa_r+0x42e>
    9d92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9d94:	2b00      	cmp	r3, #0
    9d96:	dd0a      	ble.n	9dae <_dtoa_r+0x42e>
    9d98:	4543      	cmp	r3, r8
    9d9a:	9a06      	ldr	r2, [sp, #24]
    9d9c:	bfa8      	it	ge
    9d9e:	4643      	movge	r3, r8
    9da0:	1ad2      	subs	r2, r2, r3
    9da2:	eba8 0803 	sub.w	r8, r8, r3
    9da6:	9206      	str	r2, [sp, #24]
    9da8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9daa:	1ad3      	subs	r3, r2, r3
    9dac:	930a      	str	r3, [sp, #40]	; 0x28
    9dae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9db0:	b30b      	cbz	r3, 9df6 <_dtoa_r+0x476>
    9db2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9db4:	2b00      	cmp	r3, #0
    9db6:	f000 82a6 	beq.w	a306 <_dtoa_r+0x986>
    9dba:	2c00      	cmp	r4, #0
    9dbc:	f000 82a1 	beq.w	a302 <_dtoa_r+0x982>
    9dc0:	4629      	mov	r1, r5
    9dc2:	4622      	mov	r2, r4
    9dc4:	4658      	mov	r0, fp
    9dc6:	f011 fd21 	bl	1b80c <__pow5mult>
    9dca:	9a03      	ldr	r2, [sp, #12]
    9dcc:	4601      	mov	r1, r0
    9dce:	4605      	mov	r5, r0
    9dd0:	4658      	mov	r0, fp
    9dd2:	f011 fc71 	bl	1b6b8 <__multiply>
    9dd6:	9903      	ldr	r1, [sp, #12]
    9dd8:	4606      	mov	r6, r0
    9dda:	4658      	mov	r0, fp
    9ddc:	f011 fbec 	bl	1b5b8 <_Bfree>
    9de0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9de2:	1b1b      	subs	r3, r3, r4
    9de4:	930b      	str	r3, [sp, #44]	; 0x2c
    9de6:	f000 8291 	beq.w	a30c <_dtoa_r+0x98c>
    9dea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9dec:	4631      	mov	r1, r6
    9dee:	4658      	mov	r0, fp
    9df0:	f011 fd0c 	bl	1b80c <__pow5mult>
    9df4:	9003      	str	r0, [sp, #12]
    9df6:	2101      	movs	r1, #1
    9df8:	4658      	mov	r0, fp
    9dfa:	f011 fc47 	bl	1b68c <__i2b>
    9dfe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9e00:	4604      	mov	r4, r0
    9e02:	2b00      	cmp	r3, #0
    9e04:	f000 8284 	beq.w	a310 <_dtoa_r+0x990>
    9e08:	461a      	mov	r2, r3
    9e0a:	4601      	mov	r1, r0
    9e0c:	4658      	mov	r0, fp
    9e0e:	f011 fcfd 	bl	1b80c <__pow5mult>
    9e12:	9b20      	ldr	r3, [sp, #128]	; 0x80
    9e14:	4604      	mov	r4, r0
    9e16:	2b01      	cmp	r3, #1
    9e18:	dc03      	bgt.n	9e22 <_dtoa_r+0x4a2>
    9e1a:	9b04      	ldr	r3, [sp, #16]
    9e1c:	2b00      	cmp	r3, #0
    9e1e:	f000 827c 	beq.w	a31a <_dtoa_r+0x99a>
    9e22:	2600      	movs	r6, #0
    9e24:	6923      	ldr	r3, [r4, #16]
    9e26:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    9e2a:	6918      	ldr	r0, [r3, #16]
    9e2c:	f018 f86d 	bl	21f0a <__hi0bits>
    9e30:	f1c0 0020 	rsb	r0, r0, #32
    9e34:	960f      	str	r6, [sp, #60]	; 0x3c
    9e36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9e38:	4418      	add	r0, r3
    9e3a:	f010 001f 	ands.w	r0, r0, #31
    9e3e:	f000 8291 	beq.w	a364 <_dtoa_r+0x9e4>
    9e42:	f1c0 0320 	rsb	r3, r0, #32
    9e46:	2b04      	cmp	r3, #4
    9e48:	f340 8281 	ble.w	a34e <_dtoa_r+0x9ce>
    9e4c:	f1c0 001c 	rsb	r0, r0, #28
    9e50:	9b06      	ldr	r3, [sp, #24]
    9e52:	4403      	add	r3, r0
    9e54:	4480      	add	r8, r0
    9e56:	9306      	str	r3, [sp, #24]
    9e58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9e5a:	4403      	add	r3, r0
    9e5c:	930a      	str	r3, [sp, #40]	; 0x28
    9e5e:	9b06      	ldr	r3, [sp, #24]
    9e60:	2b00      	cmp	r3, #0
    9e62:	dd05      	ble.n	9e70 <_dtoa_r+0x4f0>
    9e64:	461a      	mov	r2, r3
    9e66:	9903      	ldr	r1, [sp, #12]
    9e68:	4658      	mov	r0, fp
    9e6a:	f011 fd29 	bl	1b8c0 <__lshift>
    9e6e:	9003      	str	r0, [sp, #12]
    9e70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9e72:	2b00      	cmp	r3, #0
    9e74:	dd05      	ble.n	9e82 <_dtoa_r+0x502>
    9e76:	4621      	mov	r1, r4
    9e78:	461a      	mov	r2, r3
    9e7a:	4658      	mov	r0, fp
    9e7c:	f011 fd20 	bl	1b8c0 <__lshift>
    9e80:	4604      	mov	r4, r0
    9e82:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9e84:	2b00      	cmp	r3, #0
    9e86:	f000 8276 	beq.w	a376 <_dtoa_r+0x9f6>
    9e8a:	4621      	mov	r1, r4
    9e8c:	9803      	ldr	r0, [sp, #12]
    9e8e:	f018 f88b 	bl	21fa8 <__mcmp>
    9e92:	2800      	cmp	r0, #0
    9e94:	f280 826f 	bge.w	a376 <_dtoa_r+0x9f6>
    9e98:	2300      	movs	r3, #0
    9e9a:	220a      	movs	r2, #10
    9e9c:	9903      	ldr	r1, [sp, #12]
    9e9e:	4658      	mov	r0, fp
    9ea0:	f011 fbac 	bl	1b5fc <__multadd>
    9ea4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9ea6:	1e7e      	subs	r6, r7, #1
    9ea8:	9003      	str	r0, [sp, #12]
    9eaa:	2b00      	cmp	r3, #0
    9eac:	f000 825c 	beq.w	a368 <_dtoa_r+0x9e8>
    9eb0:	2300      	movs	r3, #0
    9eb2:	4629      	mov	r1, r5
    9eb4:	220a      	movs	r2, #10
    9eb6:	4658      	mov	r0, fp
    9eb8:	f011 fba0 	bl	1b5fc <__multadd>
    9ebc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9ebe:	4605      	mov	r5, r0
    9ec0:	2b00      	cmp	r3, #0
    9ec2:	dc03      	bgt.n	9ecc <_dtoa_r+0x54c>
    9ec4:	9b20      	ldr	r3, [sp, #128]	; 0x80
    9ec6:	2b02      	cmp	r3, #2
    9ec8:	f300 825e 	bgt.w	a388 <_dtoa_r+0xa08>
    9ecc:	f1b8 0f00 	cmp.w	r8, #0
    9ed0:	dd05      	ble.n	9ede <_dtoa_r+0x55e>
    9ed2:	4629      	mov	r1, r5
    9ed4:	4642      	mov	r2, r8
    9ed6:	4658      	mov	r0, fp
    9ed8:	f011 fcf2 	bl	1b8c0 <__lshift>
    9edc:	4605      	mov	r5, r0
    9ede:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9ee0:	2b00      	cmp	r3, #0
    9ee2:	f000 82d0 	beq.w	a486 <_dtoa_r+0xb06>
    9ee6:	6869      	ldr	r1, [r5, #4]
    9ee8:	4658      	mov	r0, fp
    9eea:	f011 fb25 	bl	1b538 <_Balloc>
    9eee:	4607      	mov	r7, r0
    9ef0:	2800      	cmp	r0, #0
    9ef2:	f040 827f 	bne.w	a3f4 <_dtoa_r+0xa74>
    9ef6:	4b0d      	ldr	r3, [pc, #52]	; (9f2c <_dtoa_r+0x5ac>)
    9ef8:	4602      	mov	r2, r0
    9efa:	f240 21ea 	movw	r1, #746	; 0x2ea
    9efe:	e553      	b.n	99a8 <_dtoa_r+0x28>
    9f00:	07e2      	lsls	r2, r4, #31
    9f02:	d506      	bpl.n	9f12 <_dtoa_r+0x592>
    9f04:	f108 0801 	add.w	r8, r8, #1
    9f08:	e9d5 2300 	ldrd	r2, r3, [r5]
    9f0c:	f7fe fae0 	bl	84d0 <__aeabi_dmul>
    9f10:	2301      	movs	r3, #1
    9f12:	1064      	asrs	r4, r4, #1
    9f14:	3508      	adds	r5, #8
    9f16:	e70b      	b.n	9d30 <_dtoa_r+0x3b0>
    9f18:	f04f 0802 	mov.w	r8, #2
    9f1c:	e70d      	b.n	9d3a <_dtoa_r+0x3ba>
    9f1e:	bf00      	nop
    9f20:	000229d0 	.word	0x000229d0
    9f24:	000229a8 	.word	0x000229a8
    9f28:	3ff00000 	.word	0x3ff00000
    9f2c:	00026e69 	.word	0x00026e69
    9f30:	4620      	mov	r0, r4
    9f32:	2200      	movs	r2, #0
    9f34:	4bac      	ldr	r3, [pc, #688]	; (a1e8 <_dtoa_r+0x868>)
    9f36:	4629      	mov	r1, r5
    9f38:	f7fe faca 	bl	84d0 <__aeabi_dmul>
    9f3c:	1e7e      	subs	r6, r7, #1
    9f3e:	f108 0801 	add.w	r8, r8, #1
    9f42:	9c09      	ldr	r4, [sp, #36]	; 0x24
    9f44:	e9cd 0104 	strd	r0, r1, [sp, #16]
    9f48:	4640      	mov	r0, r8
    9f4a:	f7fe fa57 	bl	83fc <__aeabi_i2d>
    9f4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    9f52:	f7fe fabd 	bl	84d0 <__aeabi_dmul>
    9f56:	4ba5      	ldr	r3, [pc, #660]	; (a1ec <_dtoa_r+0x86c>)
    9f58:	2200      	movs	r2, #0
    9f5a:	f7fe f903 	bl	8164 <__adddf3>
    9f5e:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
    9f62:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    9f66:	9311      	str	r3, [sp, #68]	; 0x44
    9f68:	2c00      	cmp	r4, #0
    9f6a:	d13b      	bne.n	9fe4 <_dtoa_r+0x664>
    9f6c:	2200      	movs	r2, #0
    9f6e:	4ba0      	ldr	r3, [pc, #640]	; (a1f0 <_dtoa_r+0x870>)
    9f70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    9f74:	f7fe f8f4 	bl	8160 <__aeabi_dsub>
    9f78:	4602      	mov	r2, r0
    9f7a:	460b      	mov	r3, r1
    9f7c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    9f80:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    9f84:	f7ff f842 	bl	900c <__aeabi_dcmpgt>
    9f88:	2800      	cmp	r0, #0
    9f8a:	f040 8157 	bne.w	a23c <_dtoa_r+0x8bc>
    9f8e:	e9dd 2110 	ldrd	r2, r1, [sp, #64]	; 0x40
    9f92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    9f96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    9f9a:	f7ff f819 	bl	8fd0 <__aeabi_dcmplt>
    9f9e:	2800      	cmp	r0, #0
    9fa0:	f43f aee2 	beq.w	9d68 <_dtoa_r+0x3e8>
    9fa4:	2400      	movs	r4, #0
    9fa6:	4625      	mov	r5, r4
    9fa8:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9faa:	f8dd a020 	ldr.w	sl, [sp, #32]
    9fae:	43de      	mvns	r6, r3
    9fb0:	f04f 0800 	mov.w	r8, #0
    9fb4:	4621      	mov	r1, r4
    9fb6:	4658      	mov	r0, fp
    9fb8:	f011 fafe 	bl	1b5b8 <_Bfree>
    9fbc:	2d00      	cmp	r5, #0
    9fbe:	f000 80a9 	beq.w	a114 <_dtoa_r+0x794>
    9fc2:	f1b8 0f00 	cmp.w	r8, #0
    9fc6:	d005      	beq.n	9fd4 <_dtoa_r+0x654>
    9fc8:	45a8      	cmp	r8, r5
    9fca:	d003      	beq.n	9fd4 <_dtoa_r+0x654>
    9fcc:	4641      	mov	r1, r8
    9fce:	4658      	mov	r0, fp
    9fd0:	f011 faf2 	bl	1b5b8 <_Bfree>
    9fd4:	4629      	mov	r1, r5
    9fd6:	4658      	mov	r0, fp
    9fd8:	f011 faee 	bl	1b5b8 <_Bfree>
    9fdc:	e09a      	b.n	a114 <_dtoa_r+0x794>
    9fde:	463e      	mov	r6, r7
    9fe0:	464c      	mov	r4, r9
    9fe2:	e7b1      	b.n	9f48 <_dtoa_r+0x5c8>
    9fe4:	4b83      	ldr	r3, [pc, #524]	; (a1f4 <_dtoa_r+0x874>)
    9fe6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    9fea:	e953 0102 	ldrd	r0, r1, [r3, #-8]
    9fee:	9b08      	ldr	r3, [sp, #32]
    9ff0:	441c      	add	r4, r3
    9ff2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9ff4:	2b00      	cmp	r3, #0
    9ff6:	d04a      	beq.n	a08e <_dtoa_r+0x70e>
    9ff8:	4602      	mov	r2, r0
    9ffa:	460b      	mov	r3, r1
    9ffc:	2000      	movs	r0, #0
    9ffe:	497e      	ldr	r1, [pc, #504]	; (a1f8 <_dtoa_r+0x878>)
    a000:	f7fe fb90 	bl	8724 <__aeabi_ddiv>
    a004:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    a008:	f7fe f8aa 	bl	8160 <__aeabi_dsub>
    a00c:	f8dd a020 	ldr.w	sl, [sp, #32]
    a010:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    a014:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a018:	f7ff f818 	bl	904c <__aeabi_d2iz>
    a01c:	4605      	mov	r5, r0
    a01e:	f7fe f9ed 	bl	83fc <__aeabi_i2d>
    a022:	4602      	mov	r2, r0
    a024:	3530      	adds	r5, #48	; 0x30
    a026:	460b      	mov	r3, r1
    a028:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a02c:	f7fe f898 	bl	8160 <__aeabi_dsub>
    a030:	f80a 5b01 	strb.w	r5, [sl], #1
    a034:	4602      	mov	r2, r0
    a036:	460b      	mov	r3, r1
    a038:	e9cd 0104 	strd	r0, r1, [sp, #16]
    a03c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    a040:	f7fe ffe4 	bl	900c <__aeabi_dcmpgt>
    a044:	2800      	cmp	r0, #0
    a046:	d165      	bne.n	a114 <_dtoa_r+0x794>
    a048:	2000      	movs	r0, #0
    a04a:	496c      	ldr	r1, [pc, #432]	; (a1fc <_dtoa_r+0x87c>)
    a04c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    a050:	f7fe f886 	bl	8160 <__aeabi_dsub>
    a054:	4602      	mov	r2, r0
    a056:	460b      	mov	r3, r1
    a058:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    a05c:	f7fe ffd6 	bl	900c <__aeabi_dcmpgt>
    a060:	2800      	cmp	r0, #0
    a062:	f040 810d 	bne.w	a280 <_dtoa_r+0x900>
    a066:	45a2      	cmp	sl, r4
    a068:	f000 80ea 	beq.w	a240 <_dtoa_r+0x8c0>
    a06c:	2200      	movs	r2, #0
    a06e:	4b5e      	ldr	r3, [pc, #376]	; (a1e8 <_dtoa_r+0x868>)
    a070:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    a074:	f7fe fa2c 	bl	84d0 <__aeabi_dmul>
    a078:	2200      	movs	r2, #0
    a07a:	4b5b      	ldr	r3, [pc, #364]	; (a1e8 <_dtoa_r+0x868>)
    a07c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    a080:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a084:	f7fe fa24 	bl	84d0 <__aeabi_dmul>
    a088:	e9cd 0104 	strd	r0, r1, [sp, #16]
    a08c:	e7c2      	b.n	a014 <_dtoa_r+0x694>
    a08e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    a092:	f7fe fa1d 	bl	84d0 <__aeabi_dmul>
    a096:	46a0      	mov	r8, r4
    a098:	f8dd a020 	ldr.w	sl, [sp, #32]
    a09c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    a0a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a0a4:	f7fe ffd2 	bl	904c <__aeabi_d2iz>
    a0a8:	4605      	mov	r5, r0
    a0aa:	f7fe f9a7 	bl	83fc <__aeabi_i2d>
    a0ae:	4602      	mov	r2, r0
    a0b0:	3530      	adds	r5, #48	; 0x30
    a0b2:	460b      	mov	r3, r1
    a0b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a0b8:	f7fe f852 	bl	8160 <__aeabi_dsub>
    a0bc:	f80a 5b01 	strb.w	r5, [sl], #1
    a0c0:	4602      	mov	r2, r0
    a0c2:	460b      	mov	r3, r1
    a0c4:	45a2      	cmp	sl, r4
    a0c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    a0ca:	f04f 0200 	mov.w	r2, #0
    a0ce:	d123      	bne.n	a118 <_dtoa_r+0x798>
    a0d0:	4b49      	ldr	r3, [pc, #292]	; (a1f8 <_dtoa_r+0x878>)
    a0d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    a0d6:	f7fe f845 	bl	8164 <__adddf3>
    a0da:	4602      	mov	r2, r0
    a0dc:	460b      	mov	r3, r1
    a0de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a0e2:	f7fe ff93 	bl	900c <__aeabi_dcmpgt>
    a0e6:	2800      	cmp	r0, #0
    a0e8:	f040 80ca 	bne.w	a280 <_dtoa_r+0x900>
    a0ec:	2000      	movs	r0, #0
    a0ee:	4942      	ldr	r1, [pc, #264]	; (a1f8 <_dtoa_r+0x878>)
    a0f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    a0f4:	f7fe f834 	bl	8160 <__aeabi_dsub>
    a0f8:	4602      	mov	r2, r0
    a0fa:	460b      	mov	r3, r1
    a0fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a100:	f7fe ff66 	bl	8fd0 <__aeabi_dcmplt>
    a104:	b170      	cbz	r0, a124 <_dtoa_r+0x7a4>
    a106:	46c2      	mov	sl, r8
    a108:	f108 38ff 	add.w	r8, r8, #4294967295
    a10c:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
    a110:	2b30      	cmp	r3, #48	; 0x30
    a112:	d0f8      	beq.n	a106 <_dtoa_r+0x786>
    a114:	4637      	mov	r7, r6
    a116:	e055      	b.n	a1c4 <_dtoa_r+0x844>
    a118:	4b33      	ldr	r3, [pc, #204]	; (a1e8 <_dtoa_r+0x868>)
    a11a:	f7fe f9d9 	bl	84d0 <__aeabi_dmul>
    a11e:	e9cd 0104 	strd	r0, r1, [sp, #16]
    a122:	e7bd      	b.n	a0a0 <_dtoa_r+0x720>
    a124:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    a128:	e9cd 3404 	strd	r3, r4, [sp, #16]
    a12c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a12e:	2b00      	cmp	r3, #0
    a130:	f6ff ae28 	blt.w	9d84 <_dtoa_r+0x404>
    a134:	2f0e      	cmp	r7, #14
    a136:	f73f ae25 	bgt.w	9d84 <_dtoa_r+0x404>
    a13a:	4b2e      	ldr	r3, [pc, #184]	; (a1f4 <_dtoa_r+0x874>)
    a13c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    a140:	e9d3 3400 	ldrd	r3, r4, [r3]
    a144:	e9cd 3406 	strd	r3, r4, [sp, #24]
    a148:	9b21      	ldr	r3, [sp, #132]	; 0x84
    a14a:	2b00      	cmp	r3, #0
    a14c:	da02      	bge.n	a154 <_dtoa_r+0x7d4>
    a14e:	f1b9 0f00 	cmp.w	r9, #0
    a152:	d064      	beq.n	a21e <_dtoa_r+0x89e>
    a154:	f8dd a020 	ldr.w	sl, [sp, #32]
    a158:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    a15c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    a160:	4620      	mov	r0, r4
    a162:	4629      	mov	r1, r5
    a164:	f7fe fade 	bl	8724 <__aeabi_ddiv>
    a168:	f7fe ff70 	bl	904c <__aeabi_d2iz>
    a16c:	4606      	mov	r6, r0
    a16e:	f7fe f945 	bl	83fc <__aeabi_i2d>
    a172:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    a176:	f7fe f9ab 	bl	84d0 <__aeabi_dmul>
    a17a:	4602      	mov	r2, r0
    a17c:	4620      	mov	r0, r4
    a17e:	f106 0430 	add.w	r4, r6, #48	; 0x30
    a182:	460b      	mov	r3, r1
    a184:	4629      	mov	r1, r5
    a186:	f7fd ffeb 	bl	8160 <__aeabi_dsub>
    a18a:	f80a 4b01 	strb.w	r4, [sl], #1
    a18e:	9c08      	ldr	r4, [sp, #32]
    a190:	4602      	mov	r2, r0
    a192:	460b      	mov	r3, r1
    a194:	ebaa 0404 	sub.w	r4, sl, r4
    a198:	45a1      	cmp	r9, r4
    a19a:	f040 8082 	bne.w	a2a2 <_dtoa_r+0x922>
    a19e:	f7fd ffe1 	bl	8164 <__adddf3>
    a1a2:	4604      	mov	r4, r0
    a1a4:	460d      	mov	r5, r1
    a1a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    a1aa:	f7fe ff2f 	bl	900c <__aeabi_dcmpgt>
    a1ae:	2800      	cmp	r0, #0
    a1b0:	d165      	bne.n	a27e <_dtoa_r+0x8fe>
    a1b2:	4620      	mov	r0, r4
    a1b4:	4629      	mov	r1, r5
    a1b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    a1ba:	f7fe feff 	bl	8fbc <__aeabi_dcmpeq>
    a1be:	b108      	cbz	r0, a1c4 <_dtoa_r+0x844>
    a1c0:	07f3      	lsls	r3, r6, #31
    a1c2:	d45c      	bmi.n	a27e <_dtoa_r+0x8fe>
    a1c4:	9903      	ldr	r1, [sp, #12]
    a1c6:	4658      	mov	r0, fp
    a1c8:	f011 f9f6 	bl	1b5b8 <_Bfree>
    a1cc:	2300      	movs	r3, #0
    a1ce:	3701      	adds	r7, #1
    a1d0:	f88a 3000 	strb.w	r3, [sl]
    a1d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
    a1d6:	601f      	str	r7, [r3, #0]
    a1d8:	9b24      	ldr	r3, [sp, #144]	; 0x90
    a1da:	2b00      	cmp	r3, #0
    a1dc:	f43f ac1c 	beq.w	9a18 <_dtoa_r+0x98>
    a1e0:	f8c3 a000 	str.w	sl, [r3]
    a1e4:	e418      	b.n	9a18 <_dtoa_r+0x98>
    a1e6:	bf00      	nop
    a1e8:	40240000 	.word	0x40240000
    a1ec:	401c0000 	.word	0x401c0000
    a1f0:	40140000 	.word	0x40140000
    a1f4:	000229d0 	.word	0x000229d0
    a1f8:	3fe00000 	.word	0x3fe00000
    a1fc:	3ff00000 	.word	0x3ff00000
    a200:	4ba2      	ldr	r3, [pc, #648]	; (a48c <_dtoa_r+0xb0c>)
    a202:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    a206:	e9d3 3400 	ldrd	r3, r4, [r3]
    a20a:	e9cd 3406 	strd	r3, r4, [sp, #24]
    a20e:	9b21      	ldr	r3, [sp, #132]	; 0x84
    a210:	2b00      	cmp	r3, #0
    a212:	da9f      	bge.n	a154 <_dtoa_r+0x7d4>
    a214:	f1b9 0f00 	cmp.w	r9, #0
    a218:	dc9c      	bgt.n	a154 <_dtoa_r+0x7d4>
    a21a:	f47f aec3 	bne.w	9fa4 <_dtoa_r+0x624>
    a21e:	2200      	movs	r2, #0
    a220:	4b9b      	ldr	r3, [pc, #620]	; (a490 <_dtoa_r+0xb10>)
    a222:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    a226:	f7fe f953 	bl	84d0 <__aeabi_dmul>
    a22a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    a22e:	f7fe fee3 	bl	8ff8 <__aeabi_dcmpge>
    a232:	4604      	mov	r4, r0
    a234:	2800      	cmp	r0, #0
    a236:	f47f aeb5 	bne.w	9fa4 <_dtoa_r+0x624>
    a23a:	463e      	mov	r6, r7
    a23c:	4625      	mov	r5, r4
    a23e:	e0b4      	b.n	a3aa <_dtoa_r+0xa2a>
    a240:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    a244:	e9cd 3404 	strd	r3, r4, [sp, #16]
    a248:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a24a:	2b00      	cmp	r3, #0
    a24c:	db01      	blt.n	a252 <_dtoa_r+0x8d2>
    a24e:	2f0e      	cmp	r7, #14
    a250:	ddd6      	ble.n	a200 <_dtoa_r+0x880>
    a252:	9a20      	ldr	r2, [sp, #128]	; 0x80
    a254:	2a01      	cmp	r2, #1
    a256:	dc36      	bgt.n	a2c6 <_dtoa_r+0x946>
    a258:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    a25a:	b382      	cbz	r2, a2be <_dtoa_r+0x93e>
    a25c:	f203 4333 	addw	r3, r3, #1075	; 0x433
    a260:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    a262:	f8dd 8018 	ldr.w	r8, [sp, #24]
    a266:	9a06      	ldr	r2, [sp, #24]
    a268:	2101      	movs	r1, #1
    a26a:	4658      	mov	r0, fp
    a26c:	441a      	add	r2, r3
    a26e:	9206      	str	r2, [sp, #24]
    a270:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a272:	441a      	add	r2, r3
    a274:	920a      	str	r2, [sp, #40]	; 0x28
    a276:	f011 fa09 	bl	1b68c <__i2b>
    a27a:	4605      	mov	r5, r0
    a27c:	e586      	b.n	9d8c <_dtoa_r+0x40c>
    a27e:	463e      	mov	r6, r7
    a280:	4653      	mov	r3, sl
    a282:	469a      	mov	sl, r3
    a284:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    a288:	2a39      	cmp	r2, #57	; 0x39
    a28a:	d106      	bne.n	a29a <_dtoa_r+0x91a>
    a28c:	9a08      	ldr	r2, [sp, #32]
    a28e:	429a      	cmp	r2, r3
    a290:	d1f7      	bne.n	a282 <_dtoa_r+0x902>
    a292:	2230      	movs	r2, #48	; 0x30
    a294:	9908      	ldr	r1, [sp, #32]
    a296:	3601      	adds	r6, #1
    a298:	700a      	strb	r2, [r1, #0]
    a29a:	781a      	ldrb	r2, [r3, #0]
    a29c:	3201      	adds	r2, #1
    a29e:	701a      	strb	r2, [r3, #0]
    a2a0:	e738      	b.n	a114 <_dtoa_r+0x794>
    a2a2:	2200      	movs	r2, #0
    a2a4:	4b7b      	ldr	r3, [pc, #492]	; (a494 <_dtoa_r+0xb14>)
    a2a6:	f7fe f913 	bl	84d0 <__aeabi_dmul>
    a2aa:	2200      	movs	r2, #0
    a2ac:	2300      	movs	r3, #0
    a2ae:	4604      	mov	r4, r0
    a2b0:	460d      	mov	r5, r1
    a2b2:	f7fe fe83 	bl	8fbc <__aeabi_dcmpeq>
    a2b6:	2800      	cmp	r0, #0
    a2b8:	f43f af50 	beq.w	a15c <_dtoa_r+0x7dc>
    a2bc:	e782      	b.n	a1c4 <_dtoa_r+0x844>
    a2be:	9b14      	ldr	r3, [sp, #80]	; 0x50
    a2c0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    a2c4:	e7cc      	b.n	a260 <_dtoa_r+0x8e0>
    a2c6:	f109 34ff 	add.w	r4, r9, #4294967295
    a2ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a2cc:	42a3      	cmp	r3, r4
    a2ce:	db08      	blt.n	a2e2 <_dtoa_r+0x962>
    a2d0:	f1b9 0f00 	cmp.w	r9, #0
    a2d4:	eba3 0404 	sub.w	r4, r3, r4
    a2d8:	db0e      	blt.n	a2f8 <_dtoa_r+0x978>
    a2da:	f8dd 8018 	ldr.w	r8, [sp, #24]
    a2de:	464b      	mov	r3, r9
    a2e0:	e7c1      	b.n	a266 <_dtoa_r+0x8e6>
    a2e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a2e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    a2e6:	1ae3      	subs	r3, r4, r3
    a2e8:	940b      	str	r4, [sp, #44]	; 0x2c
    a2ea:	f8dd 8018 	ldr.w	r8, [sp, #24]
    a2ee:	2400      	movs	r4, #0
    a2f0:	441a      	add	r2, r3
    a2f2:	464b      	mov	r3, r9
    a2f4:	920f      	str	r2, [sp, #60]	; 0x3c
    a2f6:	e7b6      	b.n	a266 <_dtoa_r+0x8e6>
    a2f8:	9b06      	ldr	r3, [sp, #24]
    a2fa:	eba3 0809 	sub.w	r8, r3, r9
    a2fe:	2300      	movs	r3, #0
    a300:	e7b1      	b.n	a266 <_dtoa_r+0x8e6>
    a302:	9e03      	ldr	r6, [sp, #12]
    a304:	e571      	b.n	9dea <_dtoa_r+0x46a>
    a306:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a308:	9903      	ldr	r1, [sp, #12]
    a30a:	e570      	b.n	9dee <_dtoa_r+0x46e>
    a30c:	9603      	str	r6, [sp, #12]
    a30e:	e572      	b.n	9df6 <_dtoa_r+0x476>
    a310:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a312:	2b01      	cmp	r3, #1
    a314:	dc17      	bgt.n	a346 <_dtoa_r+0x9c6>
    a316:	9b04      	ldr	r3, [sp, #16]
    a318:	b9ab      	cbnz	r3, a346 <_dtoa_r+0x9c6>
    a31a:	9b05      	ldr	r3, [sp, #20]
    a31c:	f3c3 0313 	ubfx	r3, r3, #0, #20
    a320:	b99b      	cbnz	r3, a34a <_dtoa_r+0x9ca>
    a322:	9b05      	ldr	r3, [sp, #20]
    a324:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
    a328:	0d36      	lsrs	r6, r6, #20
    a32a:	0536      	lsls	r6, r6, #20
    a32c:	b136      	cbz	r6, a33c <_dtoa_r+0x9bc>
    a32e:	9b06      	ldr	r3, [sp, #24]
    a330:	2601      	movs	r6, #1
    a332:	3301      	adds	r3, #1
    a334:	9306      	str	r3, [sp, #24]
    a336:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a338:	3301      	adds	r3, #1
    a33a:	930a      	str	r3, [sp, #40]	; 0x28
    a33c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a33e:	2b00      	cmp	r3, #0
    a340:	f47f ad70 	bne.w	9e24 <_dtoa_r+0x4a4>
    a344:	960f      	str	r6, [sp, #60]	; 0x3c
    a346:	2001      	movs	r0, #1
    a348:	e575      	b.n	9e36 <_dtoa_r+0x4b6>
    a34a:	2600      	movs	r6, #0
    a34c:	e7f6      	b.n	a33c <_dtoa_r+0x9bc>
    a34e:	f43f ad86 	beq.w	9e5e <_dtoa_r+0x4de>
    a352:	331c      	adds	r3, #28
    a354:	9a06      	ldr	r2, [sp, #24]
    a356:	441a      	add	r2, r3
    a358:	4498      	add	r8, r3
    a35a:	9206      	str	r2, [sp, #24]
    a35c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a35e:	441a      	add	r2, r3
    a360:	920a      	str	r2, [sp, #40]	; 0x28
    a362:	e57c      	b.n	9e5e <_dtoa_r+0x4de>
    a364:	4603      	mov	r3, r0
    a366:	e7f4      	b.n	a352 <_dtoa_r+0x9d2>
    a368:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a36a:	2b00      	cmp	r3, #0
    a36c:	dc2b      	bgt.n	a3c6 <_dtoa_r+0xa46>
    a36e:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a370:	2b02      	cmp	r3, #2
    a372:	dc09      	bgt.n	a388 <_dtoa_r+0xa08>
    a374:	e027      	b.n	a3c6 <_dtoa_r+0xa46>
    a376:	f1b9 0f00 	cmp.w	r9, #0
    a37a:	dc1d      	bgt.n	a3b8 <_dtoa_r+0xa38>
    a37c:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a37e:	2b02      	cmp	r3, #2
    a380:	dd1a      	ble.n	a3b8 <_dtoa_r+0xa38>
    a382:	463e      	mov	r6, r7
    a384:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    a388:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a38a:	2b00      	cmp	r3, #0
    a38c:	f47f ae0c 	bne.w	9fa8 <_dtoa_r+0x628>
    a390:	4621      	mov	r1, r4
    a392:	2205      	movs	r2, #5
    a394:	4658      	mov	r0, fp
    a396:	f011 f931 	bl	1b5fc <__multadd>
    a39a:	4601      	mov	r1, r0
    a39c:	4604      	mov	r4, r0
    a39e:	9803      	ldr	r0, [sp, #12]
    a3a0:	f017 fe02 	bl	21fa8 <__mcmp>
    a3a4:	2800      	cmp	r0, #0
    a3a6:	f77f adff 	ble.w	9fa8 <_dtoa_r+0x628>
    a3aa:	f8dd a020 	ldr.w	sl, [sp, #32]
    a3ae:	2331      	movs	r3, #49	; 0x31
    a3b0:	3601      	adds	r6, #1
    a3b2:	f80a 3b01 	strb.w	r3, [sl], #1
    a3b6:	e5fb      	b.n	9fb0 <_dtoa_r+0x630>
    a3b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a3ba:	463e      	mov	r6, r7
    a3bc:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    a3c0:	2b00      	cmp	r3, #0
    a3c2:	f47f ad83 	bne.w	9ecc <_dtoa_r+0x54c>
    a3c6:	9f08      	ldr	r7, [sp, #32]
    a3c8:	4621      	mov	r1, r4
    a3ca:	9803      	ldr	r0, [sp, #12]
    a3cc:	f017 fccd 	bl	21d6a <quorem>
    a3d0:	9b08      	ldr	r3, [sp, #32]
    a3d2:	f100 0930 	add.w	r9, r0, #48	; 0x30
    a3d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a3d8:	f807 9b01 	strb.w	r9, [r7], #1
    a3dc:	1afb      	subs	r3, r7, r3
    a3de:	429a      	cmp	r2, r3
    a3e0:	f340 80cb 	ble.w	a57a <_dtoa_r+0xbfa>
    a3e4:	2300      	movs	r3, #0
    a3e6:	220a      	movs	r2, #10
    a3e8:	9903      	ldr	r1, [sp, #12]
    a3ea:	4658      	mov	r0, fp
    a3ec:	f011 f906 	bl	1b5fc <__multadd>
    a3f0:	9003      	str	r0, [sp, #12]
    a3f2:	e7e9      	b.n	a3c8 <_dtoa_r+0xa48>
    a3f4:	692a      	ldr	r2, [r5, #16]
    a3f6:	f105 010c 	add.w	r1, r5, #12
    a3fa:	300c      	adds	r0, #12
    a3fc:	3202      	adds	r2, #2
    a3fe:	0092      	lsls	r2, r2, #2
    a400:	f017 fb45 	bl	21a8e <memcpy>
    a404:	2201      	movs	r2, #1
    a406:	4639      	mov	r1, r7
    a408:	4658      	mov	r0, fp
    a40a:	f011 fa59 	bl	1b8c0 <__lshift>
    a40e:	9b08      	ldr	r3, [sp, #32]
    a410:	46a8      	mov	r8, r5
    a412:	4605      	mov	r5, r0
    a414:	f103 0a01 	add.w	sl, r3, #1
    a418:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    a41c:	4413      	add	r3, r2
    a41e:	930a      	str	r3, [sp, #40]	; 0x28
    a420:	9b04      	ldr	r3, [sp, #16]
    a422:	f003 0301 	and.w	r3, r3, #1
    a426:	930b      	str	r3, [sp, #44]	; 0x2c
    a428:	f10a 33ff 	add.w	r3, sl, #4294967295
    a42c:	4621      	mov	r1, r4
    a42e:	9803      	ldr	r0, [sp, #12]
    a430:	9306      	str	r3, [sp, #24]
    a432:	f017 fc9a 	bl	21d6a <quorem>
    a436:	4641      	mov	r1, r8
    a438:	9009      	str	r0, [sp, #36]	; 0x24
    a43a:	f100 0930 	add.w	r9, r0, #48	; 0x30
    a43e:	9803      	ldr	r0, [sp, #12]
    a440:	f017 fdb2 	bl	21fa8 <__mcmp>
    a444:	462a      	mov	r2, r5
    a446:	4621      	mov	r1, r4
    a448:	4607      	mov	r7, r0
    a44a:	4658      	mov	r0, fp
    a44c:	f011 faa4 	bl	1b998 <__mdiff>
    a450:	68c2      	ldr	r2, [r0, #12]
    a452:	4601      	mov	r1, r0
    a454:	b302      	cbz	r2, a498 <_dtoa_r+0xb18>
    a456:	4658      	mov	r0, fp
    a458:	f011 f8ae 	bl	1b5b8 <_Bfree>
    a45c:	2f00      	cmp	r7, #0
    a45e:	da3a      	bge.n	a4d6 <_dtoa_r+0xb56>
    a460:	2201      	movs	r2, #1
    a462:	9903      	ldr	r1, [sp, #12]
    a464:	4658      	mov	r0, fp
    a466:	f011 fa2b 	bl	1b8c0 <__lshift>
    a46a:	4621      	mov	r1, r4
    a46c:	9003      	str	r0, [sp, #12]
    a46e:	f017 fd9b 	bl	21fa8 <__mcmp>
    a472:	2800      	cmp	r0, #0
    a474:	dc03      	bgt.n	a47e <_dtoa_r+0xafe>
    a476:	d129      	bne.n	a4cc <_dtoa_r+0xb4c>
    a478:	f019 0f01 	tst.w	r9, #1
    a47c:	d026      	beq.n	a4cc <_dtoa_r+0xb4c>
    a47e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    a482:	d11d      	bne.n	a4c0 <_dtoa_r+0xb40>
    a484:	e032      	b.n	a4ec <_dtoa_r+0xb6c>
    a486:	4628      	mov	r0, r5
    a488:	e7c1      	b.n	a40e <_dtoa_r+0xa8e>
    a48a:	bf00      	nop
    a48c:	000229d0 	.word	0x000229d0
    a490:	40140000 	.word	0x40140000
    a494:	40240000 	.word	0x40240000
    a498:	900e      	str	r0, [sp, #56]	; 0x38
    a49a:	9803      	ldr	r0, [sp, #12]
    a49c:	f017 fd84 	bl	21fa8 <__mcmp>
    a4a0:	990e      	ldr	r1, [sp, #56]	; 0x38
    a4a2:	900c      	str	r0, [sp, #48]	; 0x30
    a4a4:	4658      	mov	r0, fp
    a4a6:	f011 f887 	bl	1b5b8 <_Bfree>
    a4aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a4ac:	bb5a      	cbnz	r2, a506 <_dtoa_r+0xb86>
    a4ae:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a4b0:	b953      	cbnz	r3, a4c8 <_dtoa_r+0xb48>
    a4b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a4b4:	b943      	cbnz	r3, a4c8 <_dtoa_r+0xb48>
    a4b6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    a4ba:	d017      	beq.n	a4ec <_dtoa_r+0xb6c>
    a4bc:	2f00      	cmp	r7, #0
    a4be:	dd05      	ble.n	a4cc <_dtoa_r+0xb4c>
    a4c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a4c2:	f103 0931 	add.w	r9, r3, #49	; 0x31
    a4c6:	e001      	b.n	a4cc <_dtoa_r+0xb4c>
    a4c8:	2f00      	cmp	r7, #0
    a4ca:	da2a      	bge.n	a522 <_dtoa_r+0xba2>
    a4cc:	f8dd a018 	ldr.w	sl, [sp, #24]
    a4d0:	f80a 9b01 	strb.w	r9, [sl], #1
    a4d4:	e56e      	b.n	9fb4 <_dtoa_r+0x634>
    a4d6:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a4d8:	433b      	orrs	r3, r7
    a4da:	d104      	bne.n	a4e6 <_dtoa_r+0xb66>
    a4dc:	9b04      	ldr	r3, [sp, #16]
    a4de:	f003 0301 	and.w	r3, r3, #1
    a4e2:	2b00      	cmp	r3, #0
    a4e4:	d0bc      	beq.n	a460 <_dtoa_r+0xae0>
    a4e6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    a4ea:	d136      	bne.n	a55a <_dtoa_r+0xbda>
    a4ec:	9f06      	ldr	r7, [sp, #24]
    a4ee:	2339      	movs	r3, #57	; 0x39
    a4f0:	f807 3b01 	strb.w	r3, [r7], #1
    a4f4:	46ba      	mov	sl, r7
    a4f6:	3f01      	subs	r7, #1
    a4f8:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
    a4fc:	2b39      	cmp	r3, #57	; 0x39
    a4fe:	d05a      	beq.n	a5b6 <_dtoa_r+0xc36>
    a500:	3301      	adds	r3, #1
    a502:	703b      	strb	r3, [r7, #0]
    a504:	e556      	b.n	9fb4 <_dtoa_r+0x634>
    a506:	2f00      	cmp	r7, #0
    a508:	db06      	blt.n	a518 <_dtoa_r+0xb98>
    a50a:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a50c:	433b      	orrs	r3, r7
    a50e:	d106      	bne.n	a51e <_dtoa_r+0xb9e>
    a510:	9b04      	ldr	r3, [sp, #16]
    a512:	f003 0301 	and.w	r3, r3, #1
    a516:	b913      	cbnz	r3, a51e <_dtoa_r+0xb9e>
    a518:	2a00      	cmp	r2, #0
    a51a:	dca1      	bgt.n	a460 <_dtoa_r+0xae0>
    a51c:	e7d6      	b.n	a4cc <_dtoa_r+0xb4c>
    a51e:	2a00      	cmp	r2, #0
    a520:	dce1      	bgt.n	a4e6 <_dtoa_r+0xb66>
    a522:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a524:	4657      	mov	r7, sl
    a526:	f80a 9c01 	strb.w	r9, [sl, #-1]
    a52a:	4553      	cmp	r3, sl
    a52c:	d02e      	beq.n	a58c <_dtoa_r+0xc0c>
    a52e:	2300      	movs	r3, #0
    a530:	220a      	movs	r2, #10
    a532:	9903      	ldr	r1, [sp, #12]
    a534:	4658      	mov	r0, fp
    a536:	f011 f861 	bl	1b5fc <__multadd>
    a53a:	45a8      	cmp	r8, r5
    a53c:	9003      	str	r0, [sp, #12]
    a53e:	f04f 0300 	mov.w	r3, #0
    a542:	f04f 020a 	mov.w	r2, #10
    a546:	4641      	mov	r1, r8
    a548:	4658      	mov	r0, fp
    a54a:	d10b      	bne.n	a564 <_dtoa_r+0xbe4>
    a54c:	f011 f856 	bl	1b5fc <__multadd>
    a550:	4680      	mov	r8, r0
    a552:	4605      	mov	r5, r0
    a554:	f10a 0a01 	add.w	sl, sl, #1
    a558:	e766      	b.n	a428 <_dtoa_r+0xaa8>
    a55a:	f8dd a018 	ldr.w	sl, [sp, #24]
    a55e:	f109 0901 	add.w	r9, r9, #1
    a562:	e7b5      	b.n	a4d0 <_dtoa_r+0xb50>
    a564:	f011 f84a 	bl	1b5fc <__multadd>
    a568:	4629      	mov	r1, r5
    a56a:	4680      	mov	r8, r0
    a56c:	2300      	movs	r3, #0
    a56e:	220a      	movs	r2, #10
    a570:	4658      	mov	r0, fp
    a572:	f011 f843 	bl	1b5fc <__multadd>
    a576:	4605      	mov	r5, r0
    a578:	e7ec      	b.n	a554 <_dtoa_r+0xbd4>
    a57a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a57c:	f04f 0800 	mov.w	r8, #0
    a580:	2b00      	cmp	r3, #0
    a582:	bfcc      	ite	gt
    a584:	461f      	movgt	r7, r3
    a586:	2701      	movle	r7, #1
    a588:	9b08      	ldr	r3, [sp, #32]
    a58a:	441f      	add	r7, r3
    a58c:	2201      	movs	r2, #1
    a58e:	9903      	ldr	r1, [sp, #12]
    a590:	4658      	mov	r0, fp
    a592:	f011 f995 	bl	1b8c0 <__lshift>
    a596:	4621      	mov	r1, r4
    a598:	9003      	str	r0, [sp, #12]
    a59a:	f017 fd05 	bl	21fa8 <__mcmp>
    a59e:	2800      	cmp	r0, #0
    a5a0:	dca8      	bgt.n	a4f4 <_dtoa_r+0xb74>
    a5a2:	d102      	bne.n	a5aa <_dtoa_r+0xc2a>
    a5a4:	f019 0f01 	tst.w	r9, #1
    a5a8:	d1a4      	bne.n	a4f4 <_dtoa_r+0xb74>
    a5aa:	46ba      	mov	sl, r7
    a5ac:	f817 3d01 	ldrb.w	r3, [r7, #-1]!
    a5b0:	2b30      	cmp	r3, #48	; 0x30
    a5b2:	d0fa      	beq.n	a5aa <_dtoa_r+0xc2a>
    a5b4:	e4fe      	b.n	9fb4 <_dtoa_r+0x634>
    a5b6:	9b08      	ldr	r3, [sp, #32]
    a5b8:	42bb      	cmp	r3, r7
    a5ba:	d19b      	bne.n	a4f4 <_dtoa_r+0xb74>
    a5bc:	2331      	movs	r3, #49	; 0x31
    a5be:	9a08      	ldr	r2, [sp, #32]
    a5c0:	3601      	adds	r6, #1
    a5c2:	7013      	strb	r3, [r2, #0]
    a5c4:	e4f6      	b.n	9fb4 <_dtoa_r+0x634>
    a5c6:	9b24      	ldr	r3, [sp, #144]	; 0x90
    a5c8:	2b00      	cmp	r3, #0
    a5ca:	f47f aa20 	bne.w	9a0e <_dtoa_r+0x8e>
    a5ce:	4b01      	ldr	r3, [pc, #4]	; (a5d4 <_dtoa_r+0xc54>)
    a5d0:	f7ff ba3f 	b.w	9a52 <_dtoa_r+0xd2>
    a5d4:	00026dd1 	.word	0x00026dd1

0000a5d8 <interrupt_callback>:

void gpio_enable(Gpio_t* gt, uint8_t channel, bool enable){
	gt[channel].active = enable;
}

void interrupt_callback(const struct device *dev, struct gpio_callback *cb, uint32_t pins){
    a5d8:	b538      	push	{r3, r4, r5, lr}
	for (int i = 0; i < NUM_GPIO_PERIP; i++) {
		if (pins & BIT(gpio_a[i].pin)) {
    a5da:	4c11      	ldr	r4, [pc, #68]	; (a620 <interrupt_callback+0x48>)
void interrupt_callback(const struct device *dev, struct gpio_callback *cb, uint32_t pins){
    a5dc:	4615      	mov	r5, r2
		if (pins & BIT(gpio_a[i].pin)) {
    a5de:	7a23      	ldrb	r3, [r4, #8]
    a5e0:	fa22 f303 	lsr.w	r3, r2, r3
    a5e4:	07da      	lsls	r2, r3, #31
    a5e6:	d509      	bpl.n	a5fc <interrupt_callback+0x24>
			gpio_a[i].g_int.status = true;
    a5e8:	2301      	movs	r3, #1
    a5ea:	f884 3020 	strb.w	r3, [r4, #32]
			LOG("GPIO interrupt triggered for %s\n", gpio_a[i].label);
    a5ee:	f011 fe03 	bl	1c1f8 <k_uptime_get_32>
    a5f2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    a5f4:	4601      	mov	r1, r0
    a5f6:	480b      	ldr	r0, [pc, #44]	; (a624 <interrupt_callback+0x4c>)
    a5f8:	f010 fea6 	bl	1b348 <iprintf>
		if (pins & BIT(gpio_a[i].pin)) {
    a5fc:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    a600:	40dd      	lsrs	r5, r3
    a602:	07eb      	lsls	r3, r5, #31
    a604:	d50b      	bpl.n	a61e <interrupt_callback+0x46>
			gpio_a[i].g_int.status = true;
    a606:	2301      	movs	r3, #1
    a608:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
			LOG("GPIO interrupt triggered for %s\n", gpio_a[i].label);
    a60c:	f011 fdf4 	bl	1c1f8 <k_uptime_get_32>
    a610:	6d62      	ldr	r2, [r4, #84]	; 0x54
    a612:	4601      	mov	r1, r0
    	}
	}
}
    a614:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			LOG("GPIO interrupt triggered for %s\n", gpio_a[i].label);
    a618:	4802      	ldr	r0, [pc, #8]	; (a624 <interrupt_callback+0x4c>)
    a61a:	f010 be95 	b.w	1b348 <iprintf>
}
    a61e:	bd38      	pop	{r3, r4, r5, pc}
    a620:	20008208 	.word	0x20008208
    a624:	00023430 	.word	0x00023430

0000a628 <gpio_init>:
	}
	return pin_list;
}

void gpio_init(Gpio_t* gt, uint8_t channel, uint8_t size){
	if (channel < size) {
    a628:	4291      	cmp	r1, r2
void gpio_init(Gpio_t* gt, uint8_t channel, uint8_t size){
    a62a:	b510      	push	{r4, lr}
	if (channel < size) {
    a62c:	d223      	bcs.n	a676 <gpio_init+0x4e>
		if (gt[channel].active){
    a62e:	232c      	movs	r3, #44	; 0x2c
    a630:	fb11 f103 	smulbb	r1, r1, r3
    a634:	5c43      	ldrb	r3, [r0, r1]
    a636:	1844      	adds	r4, r0, r1
    a638:	b1bb      	cbz	r3, a66a <gpio_init+0x42>
			if (!device_is_ready(gt[channel].dev)){
    a63a:	6860      	ldr	r0, [r4, #4]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    a63c:	f016 fc2c 	bl	20e98 <z_device_is_ready>
    a640:	b940      	cbnz	r0, a654 <gpio_init+0x2c>
				LOG("Error: GPIO device %s is not ready\n", gt[channel].label);
    a642:	f011 fdd9 	bl	1c1f8 <k_uptime_get_32>
    a646:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    a648:	4601      	mov	r1, r0
    a64a:	480f      	ldr	r0, [pc, #60]	; (a688 <gpio_init+0x60>)
			}else			{
				LOG("GPIO device %s is ready\n", gt[channel].label);
				gt[channel].error = 0;
			}
		}else{
			LOG("GPIO device %s is not active\n", gt[channel].label);
    a64c:	f010 fe7c 	bl	1b348 <iprintf>
			gt[channel].error = ERROR_GPIO_INIT;
    a650:	2380      	movs	r3, #128	; 0x80
    a652:	e007      	b.n	a664 <gpio_init+0x3c>
				LOG("GPIO device %s is ready\n", gt[channel].label);
    a654:	f011 fdd0 	bl	1c1f8 <k_uptime_get_32>
    a658:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    a65a:	4601      	mov	r1, r0
    a65c:	480b      	ldr	r0, [pc, #44]	; (a68c <gpio_init+0x64>)
    a65e:	f010 fe73 	bl	1b348 <iprintf>
				gt[channel].error = 0;
    a662:	2300      	movs	r3, #0
			gt[channel].error = ERROR_GPIO_INIT;
    a664:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
		}
	}else{
		LOG("Error: Channel index out of bounds\n");
		return;	
	}	
}
    a668:	bd10      	pop	{r4, pc}
			LOG("GPIO device %s is not active\n", gt[channel].label);
    a66a:	f011 fdc5 	bl	1c1f8 <k_uptime_get_32>
    a66e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    a670:	4601      	mov	r1, r0
    a672:	4807      	ldr	r0, [pc, #28]	; (a690 <gpio_init+0x68>)
    a674:	e7ea      	b.n	a64c <gpio_init+0x24>
		LOG("Error: Channel index out of bounds\n");
    a676:	f011 fdbf 	bl	1c1f8 <k_uptime_get_32>
}
    a67a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG("Error: Channel index out of bounds\n");
    a67e:	4601      	mov	r1, r0
    a680:	4804      	ldr	r0, [pc, #16]	; (a694 <gpio_init+0x6c>)
    a682:	f010 be61 	b.w	1b348 <iprintf>
    a686:	bf00      	nop
    a688:	0002345a 	.word	0x0002345a
    a68c:	00023487 	.word	0x00023487
    a690:	000234a9 	.word	0x000234a9
    a694:	000234d0 	.word	0x000234d0

0000a698 <gpio_configure>:

void gpio_configure(Gpio_t* gt, uint8_t channel,  uint8_t size){
	int ret;
	if (channel < size) {
    a698:	4291      	cmp	r1, r2
void gpio_configure(Gpio_t* gt, uint8_t channel,  uint8_t size){
    a69a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (channel < size) {
    a69c:	d22f      	bcs.n	a6fe <gpio_configure+0x66>
		if (gt[channel].active){
    a69e:	232c      	movs	r3, #44	; 0x2c
    a6a0:	fb11 f103 	smulbb	r1, r1, r3
    a6a4:	5c43      	ldrb	r3, [r0, r1]
    a6a6:	1844      	adds	r4, r0, r1
    a6a8:	b34b      	cbz	r3, a6fe <gpio_configure+0x66>
			ret = gpio_pin_configure(gt[channel].dev, gt[channel].pin, gt[channel].flags | gt[channel].direction);
    a6aa:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
    a6ae:	6860      	ldr	r0, [r4, #4]
    a6b0:	7a21      	ldrb	r1, [r4, #8]
    a6b2:	4313      	orrs	r3, r2

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
		 != (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH),
		 "Output cannot be initialized low and high");

	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    a6b4:	02dd      	lsls	r5, r3, #11
	const struct gpio_driver_api *api =
    a6b6:	f8d0 c008 	ldr.w	ip, [r0, #8]
	struct gpio_driver_data *data =
    a6ba:	6907      	ldr	r7, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    a6bc:	d506      	bpl.n	a6cc <gpio_configure+0x34>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
    a6be:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
    a6c2:	d003      	beq.n	a6cc <gpio_configure+0x34>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    a6c4:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    a6c6:	bf48      	it	mi
    a6c8:	f483 2340 	eormi.w	r3, r3, #786432	; 0xc0000

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
    a6cc:	2601      	movs	r6, #1
    a6ce:	683d      	ldr	r5, [r7, #0]
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    a6d0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
    a6d4:	408e      	lsls	r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    a6d6:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    a6d8:	bf4c      	ite	mi
    a6da:	4335      	orrmi	r5, r6
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    a6dc:	43b5      	bicpl	r5, r6
    a6de:	603d      	str	r5, [r7, #0]
	}

	return api->pin_configure(port, pin, flags);
    a6e0:	f8dc 3000 	ldr.w	r3, [ip]
    a6e4:	4798      	blx	r3
			if (ret < 0){
    a6e6:	2800      	cmp	r0, #0
    a6e8:	da0a      	bge.n	a700 <gpio_configure+0x68>
				LOG("Error: GPIO device %s cannot be configured\n", gt[channel].label);
    a6ea:	f011 fd85 	bl	1c1f8 <k_uptime_get_32>
    a6ee:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    a6f0:	4601      	mov	r1, r0
    a6f2:	4808      	ldr	r0, [pc, #32]	; (a714 <gpio_configure+0x7c>)
    a6f4:	f010 fe28 	bl	1b348 <iprintf>
				gt[channel].error = ERROR_GPIO_INIT;
    a6f8:	2380      	movs	r3, #128	; 0x80
			}else{
				LOG("GPIO device %s configured successfully\n", gt[channel].label);
				gt[channel].error = 0;
    a6fa:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
			}
		}
	}
}
    a6fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				LOG("GPIO device %s configured successfully\n", gt[channel].label);
    a700:	f011 fd7a 	bl	1c1f8 <k_uptime_get_32>
    a704:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    a706:	4601      	mov	r1, r0
    a708:	4803      	ldr	r0, [pc, #12]	; (a718 <gpio_configure+0x80>)
    a70a:	f010 fe1d 	bl	1b348 <iprintf>
				gt[channel].error = 0;
    a70e:	2300      	movs	r3, #0
    a710:	e7f3      	b.n	a6fa <gpio_configure+0x62>
    a712:	bf00      	nop
    a714:	000234fd 	.word	0x000234fd
    a718:	00023532 	.word	0x00023532

0000a71c <gpio_configure_interrupt>:

void gpio_configure_interrupt(Gpio_t* gt, uint8_t channel, uint8_t size){
	if (channel < size) {
    a71c:	4291      	cmp	r1, r2
void gpio_configure_interrupt(Gpio_t* gt, uint8_t channel, uint8_t size){
    a71e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a722:	4605      	mov	r5, r0
    a724:	4617      	mov	r7, r2
	if (channel < size) {
    a726:	d240      	bcs.n	a7aa <gpio_configure_interrupt+0x8e>
		if (gt[channel].active){
    a728:	232c      	movs	r3, #44	; 0x2c
    a72a:	fb11 f103 	smulbb	r1, r1, r3
    a72e:	5c43      	ldrb	r3, [r0, r1]
    a730:	1844      	adds	r4, r0, r1
    a732:	2b00      	cmp	r3, #0
    a734:	d041      	beq.n	a7ba <gpio_configure_interrupt+0x9e>
			if(!gt[channel].g_int.active){
    a736:	7e23      	ldrb	r3, [r4, #24]
    a738:	b943      	cbnz	r3, a74c <gpio_configure_interrupt+0x30>
				LOG("Error: GPIO interrupt for %s is not active\n", gt[channel].label);
    a73a:	f011 fd5d 	bl	1c1f8 <k_uptime_get_32>
    a73e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    a740:	4601      	mov	r1, r0
		}
	}else {
		LOG("Error: Channel index out of bounds\n");
		return;	
	}
}
    a742:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				LOG("Error: GPIO interrupt for %s is not active\n", gt[channel].label);
    a746:	481e      	ldr	r0, [pc, #120]	; (a7c0 <gpio_configure_interrupt+0xa4>)
    a748:	f010 bdfe 	b.w	1b348 <iprintf>
				LOG("GPIO interrupt for %s is active\n", gt[channel].label);
    a74c:	f011 fd54 	bl	1c1f8 <k_uptime_get_32>
    a750:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    a752:	4601      	mov	r1, r0
    a754:	481b      	ldr	r0, [pc, #108]	; (a7c4 <gpio_configure_interrupt+0xa8>)
    a756:	f010 fdf7 	bl	1b348 <iprintf>
				gpio_pin_interrupt_configure(gt[channel].dev, gt[channel].pin,  gt[channel].g_int.port_config);
    a75a:	6860      	ldr	r0, [r4, #4]
    a75c:	7a21      	ldrb	r1, [r4, #8]
    a75e:	69e6      	ldr	r6, [r4, #28]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    a760:	0233      	lsls	r3, r6, #8
	const struct gpio_driver_api *api =
    a762:	6882      	ldr	r2, [r0, #8]
	const struct gpio_driver_data *const data =
    a764:	f8d0 c010 	ldr.w	ip, [r0, #16]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    a768:	d508      	bpl.n	a77c <gpio_configure_interrupt+0x60>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    a76a:	2301      	movs	r3, #1
    a76c:	f8dc c000 	ldr.w	ip, [ip]
    a770:	408b      	lsls	r3, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    a772:	ea13 0f0c 	tst.w	r3, ip
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
    a776:	bf18      	it	ne
    a778:	f086 66c0 	eorne.w	r6, r6, #100663296	; 0x6000000
	return api->pin_interrupt_configure(port, pin, mode, trig);
    a77c:	f006 63c0 	and.w	r3, r6, #100663296	; 0x6000000
    a780:	f8d2 8018 	ldr.w	r8, [r2, #24]
    a784:	f006 72b0 	and.w	r2, r6, #23068672	; 0x1600000
    a788:	47c0      	blx	r8
				gpio_init_callback(&cb, interrupt_callback, get_gpio_pin_interrupt_config(gt, size));
    a78a:	4639      	mov	r1, r7
    a78c:	4628      	mov	r0, r5
    a78e:	f011 fd49 	bl	1c224 <get_gpio_pin_interrupt_config>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    a792:	4b0d      	ldr	r3, [pc, #52]	; (a7c8 <gpio_configure_interrupt+0xac>)
    a794:	490d      	ldr	r1, [pc, #52]	; (a7cc <gpio_configure_interrupt+0xb0>)
	callback->pin_mask = pin_mask;
    a796:	e9c1 3001 	strd	r3, r0, [r1, #4]
				gpio_add_callback(gt[channel].dev, &cb);
    a79a:	6860      	ldr	r0, [r4, #4]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
    a79c:	6883      	ldr	r3, [r0, #8]
    a79e:	69db      	ldr	r3, [r3, #28]
    a7a0:	b15b      	cbz	r3, a7ba <gpio_configure_interrupt+0x9e>
}
    a7a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    a7a6:	2201      	movs	r2, #1
    a7a8:	4718      	bx	r3
		LOG("Error: Channel index out of bounds\n");
    a7aa:	f011 fd25 	bl	1c1f8 <k_uptime_get_32>
}
    a7ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		LOG("Error: Channel index out of bounds\n");
    a7b2:	4601      	mov	r1, r0
    a7b4:	4806      	ldr	r0, [pc, #24]	; (a7d0 <gpio_configure_interrupt+0xb4>)
    a7b6:	f010 bdc7 	b.w	1b348 <iprintf>
}
    a7ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a7be:	bf00      	nop
    a7c0:	00023563 	.word	0x00023563
    a7c4:	00023598 	.word	0x00023598
    a7c8:	0000a5d9 	.word	0x0000a5d9
    a7cc:	20009cb8 	.word	0x20009cb8
    a7d0:	000234d0 	.word	0x000234d0

0000a7d4 <peripheral_init>:


/***********************************************************
 Function Definitions
***********************************************************/
void peripheral_init() {
    a7d4:	b510      	push	{r4, lr}
  int err;

  //Button 1 to start reading measurements
  gpio_enable(gpio_a, BTN1_ch, true);
    a7d6:	2201      	movs	r2, #1
    a7d8:	2100      	movs	r1, #0
    a7da:	4826      	ldr	r0, [pc, #152]	; (a874 <peripheral_init+0xa0>)
    a7dc:	f011 fd1e 	bl	1c21c <gpio_enable>
  gpio_enable_interrupt(gpio_a, BTN1_ch, true);
    a7e0:	2201      	movs	r2, #1
    a7e2:	2100      	movs	r1, #0
    a7e4:	4823      	ldr	r0, [pc, #140]	; (a874 <peripheral_init+0xa0>)
    a7e6:	f011 fd14 	bl	1c212 <gpio_enable_interrupt>
  gpio_init(gpio_a, BTN1_ch, NUM_GPIO_PERIP);
    a7ea:	2202      	movs	r2, #2
    a7ec:	2100      	movs	r1, #0
    a7ee:	4821      	ldr	r0, [pc, #132]	; (a874 <peripheral_init+0xa0>)
    a7f0:	f7ff ff1a 	bl	a628 <gpio_init>
  gpio_configure(gpio_a, BTN1_ch, NUM_GPIO_PERIP);
    a7f4:	2202      	movs	r2, #2
    a7f6:	2100      	movs	r1, #0
    a7f8:	481e      	ldr	r0, [pc, #120]	; (a874 <peripheral_init+0xa0>)
    a7fa:	f7ff ff4d 	bl	a698 <gpio_configure>
  gpio_configure_interrupt(gpio_a, BTN1_ch, NUM_GPIO_PERIP); 
    a7fe:	2202      	movs	r2, #2
    a800:	2100      	movs	r1, #0
    a802:	481c      	ldr	r0, [pc, #112]	; (a874 <peripheral_init+0xa0>)
    a804:	f7ff ff8a 	bl	a71c <gpio_configure_interrupt>

  //Button 2 to stop reading measurements
  gpio_enable(gpio_a, BTN2_ch, true);
    a808:	2201      	movs	r2, #1
    a80a:	481a      	ldr	r0, [pc, #104]	; (a874 <peripheral_init+0xa0>)
    a80c:	4611      	mov	r1, r2
    a80e:	f011 fd05 	bl	1c21c <gpio_enable>
  gpio_enable_interrupt(gpio_a, BTN2_ch, true);
    a812:	2201      	movs	r2, #1
    a814:	4817      	ldr	r0, [pc, #92]	; (a874 <peripheral_init+0xa0>)
    a816:	4611      	mov	r1, r2
    a818:	f011 fcfb 	bl	1c212 <gpio_enable_interrupt>
  gpio_init(gpio_a, BTN2_ch, NUM_GPIO_PERIP);
    a81c:	2202      	movs	r2, #2
    a81e:	2101      	movs	r1, #1
    a820:	4814      	ldr	r0, [pc, #80]	; (a874 <peripheral_init+0xa0>)
    a822:	f7ff ff01 	bl	a628 <gpio_init>
  gpio_configure(gpio_a, BTN2_ch, NUM_GPIO_PERIP);
    a826:	2202      	movs	r2, #2
    a828:	2101      	movs	r1, #1
    a82a:	4812      	ldr	r0, [pc, #72]	; (a874 <peripheral_init+0xa0>)
    a82c:	f7ff ff34 	bl	a698 <gpio_configure>
  gpio_configure_interrupt(gpio_a, BTN2_ch, NUM_GPIO_PERIP); 
    a830:	2202      	movs	r2, #2
    a832:	2101      	movs	r1, #1
    a834:	480f      	ldr	r0, [pc, #60]	; (a874 <peripheral_init+0xa0>)
    a836:	f7ff ff71 	bl	a71c <gpio_configure_interrupt>

  adc_init();  
    a83a:	f000 f977 	bl	ab2c <adc_init>

	err = bt_enable(NULL);
    a83e:	2000      	movs	r0, #0
    a840:	f005 fc10 	bl	10064 <bt_enable>
	if (err) {
    a844:	4604      	mov	r4, r0
    a846:	b140      	cbz	r0, a85a <peripheral_init+0x86>
		LOG("Bluetooth init failed (err %d)\n", err);
    a848:	f011 fd14 	bl	1c274 <k_uptime_get_32>
    a84c:	4622      	mov	r2, r4

	bt_ready();
	bt_conn_auth_cb_reg();

  LOG("Peripherals initialized successfully.\n");
}
    a84e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG("Bluetooth init failed (err %d)\n", err);
    a852:	4601      	mov	r1, r0
    a854:	4808      	ldr	r0, [pc, #32]	; (a878 <peripheral_init+0xa4>)
    a856:	f010 bd77 	b.w	1b348 <iprintf>
	bt_ready();
    a85a:	f000 f917 	bl	aa8c <bt_ready>
	bt_conn_auth_cb_reg();
    a85e:	f000 f947 	bl	aaf0 <bt_conn_auth_cb_reg>
  LOG("Peripherals initialized successfully.\n");
    a862:	f011 fd07 	bl	1c274 <k_uptime_get_32>
}
    a866:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LOG("Peripherals initialized successfully.\n");
    a86a:	4601      	mov	r1, r0
    a86c:	4803      	ldr	r0, [pc, #12]	; (a87c <peripheral_init+0xa8>)
    a86e:	f010 bd6b 	b.w	1b348 <iprintf>
    a872:	bf00      	nop
    a874:	20008208 	.word	0x20008208
    a878:	000235de 	.word	0x000235de
    a87c:	00023607 	.word	0x00023607

0000a880 <is_button1_pressed>:


bool is_button1_pressed(){
    a880:	b510      	push	{r4, lr}
  bool status = get_gpio_interrupt_status(gpio_a, BTN1_ch);
    a882:	2100      	movs	r1, #0
    a884:	4805      	ldr	r0, [pc, #20]	; (a89c <is_button1_pressed+0x1c>)
    a886:	f011 fceb 	bl	1c260 <get_gpio_interrupt_status>
  if (status){
    a88a:	4604      	mov	r4, r0
    a88c:	b118      	cbz	r0, a896 <is_button1_pressed+0x16>
    reset_gpio_interrupt(gpio_a, BTN1_ch);
    a88e:	2100      	movs	r1, #0
    a890:	4802      	ldr	r0, [pc, #8]	; (a89c <is_button1_pressed+0x1c>)
    a892:	f011 fcda 	bl	1c24a <reset_gpio_interrupt>
  }
	return status; 
}
    a896:	4620      	mov	r0, r4
    a898:	bd10      	pop	{r4, pc}
    a89a:	bf00      	nop
    a89c:	20008208 	.word	0x20008208

0000a8a0 <is_button2_pressed>:

bool is_button2_pressed(){
    a8a0:	b510      	push	{r4, lr}
  bool status = get_gpio_interrupt_status(gpio_a, BTN2_ch);
    a8a2:	2101      	movs	r1, #1
    a8a4:	4805      	ldr	r0, [pc, #20]	; (a8bc <is_button2_pressed+0x1c>)
    a8a6:	f011 fcdb 	bl	1c260 <get_gpio_interrupt_status>
  if (status){
    a8aa:	4604      	mov	r4, r0
    a8ac:	b118      	cbz	r0, a8b6 <is_button2_pressed+0x16>
    reset_gpio_interrupt(gpio_a, BTN2_ch);
    a8ae:	2101      	movs	r1, #1
    a8b0:	4802      	ldr	r0, [pc, #8]	; (a8bc <is_button2_pressed+0x1c>)
    a8b2:	f011 fcca 	bl	1c24a <reset_gpio_interrupt>
  }
	return status; 
}
    a8b6:	4620      	mov	r0, r4
    a8b8:	bd10      	pop	{r4, pc}
    a8ba:	bf00      	nop
    a8bc:	20008208 	.word	0x20008208

0000a8c0 <bt_bas_set>:

void bt_bas_set(void){
    a8c0:	b538      	push	{r3, r4, r5, lr}
  LOG("Battery adc voltage: %.1f mV.", perip.adc_batt_mV);
    a8c2:	f011 fcd7 	bl	1c274 <k_uptime_get_32>
    a8c6:	4c0b      	ldr	r4, [pc, #44]	; (a8f4 <bt_bas_set+0x34>)
    a8c8:	4605      	mov	r5, r0
    a8ca:	6820      	ldr	r0, [r4, #0]
    a8cc:	f7fd fda8 	bl	8420 <__aeabi_f2d>
    a8d0:	4602      	mov	r2, r0
    a8d2:	460b      	mov	r3, r1
    a8d4:	4808      	ldr	r0, [pc, #32]	; (a8f8 <bt_bas_set+0x38>)
    a8d6:	4629      	mov	r1, r5
    a8d8:	f010 fd36 	bl	1b348 <iprintf>
	bt_bas_set_battery_level(perip.bt_batt_lvl);
    a8dc:	7920      	ldrb	r0, [r4, #4]
    a8de:	f001 ff9f 	bl	c820 <bt_bas_set_battery_level>
  LOG("Battery level: %d %%.", perip.bt_batt_lvl);
    a8e2:	f011 fcc7 	bl	1c274 <k_uptime_get_32>
    a8e6:	7922      	ldrb	r2, [r4, #4]
    a8e8:	4601      	mov	r1, r0
}
    a8ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  LOG("Battery level: %d %%.", perip.bt_batt_lvl);
    a8ee:	4803      	ldr	r0, [pc, #12]	; (a8fc <bt_bas_set+0x3c>)
    a8f0:	f010 bd2a 	b.w	1b348 <iprintf>
    a8f4:	20009cc4 	.word	0x20009cc4
    a8f8:	00023637 	.word	0x00023637
    a8fc:	0002365e 	.word	0x0002365e

0000a900 <bt_hrs_set>:

void bt_hrs_set(void){
    a900:	b538      	push	{r3, r4, r5, lr}
    LOG("Heartrate adc voltage: %.1f mV.",perip.adc_heart_rate_mV);
    a902:	f011 fcb7 	bl	1c274 <k_uptime_get_32>
    a906:	4c0b      	ldr	r4, [pc, #44]	; (a934 <bt_hrs_set+0x34>)
    a908:	4605      	mov	r5, r0
    a90a:	68a0      	ldr	r0, [r4, #8]
    a90c:	f7fd fd88 	bl	8420 <__aeabi_f2d>
    a910:	4602      	mov	r2, r0
    a912:	460b      	mov	r3, r1
    a914:	4808      	ldr	r0, [pc, #32]	; (a938 <bt_hrs_set+0x38>)
    a916:	4629      	mov	r1, r5
    a918:	f010 fd16 	bl	1b348 <iprintf>
  	bt_hrs_notify(perip.bt_heart_rate);
    a91c:	7b20      	ldrb	r0, [r4, #12]
    a91e:	f001 ffe5 	bl	c8ec <bt_hrs_notify>
    LOG("Heartrate: %d bpm.",perip.bt_heart_rate);
    a922:	f011 fca7 	bl	1c274 <k_uptime_get_32>
    a926:	7b22      	ldrb	r2, [r4, #12]
    a928:	4601      	mov	r1, r0
}
    a92a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    LOG("Heartrate: %d bpm.",perip.bt_heart_rate);
    a92e:	4803      	ldr	r0, [pc, #12]	; (a93c <bt_hrs_set+0x3c>)
    a930:	f010 bd0a 	b.w	1b348 <iprintf>
    a934:	20009cc4 	.word	0x20009cc4
    a938:	0002367d 	.word	0x0002367d
    a93c:	000236a6 	.word	0x000236a6

0000a940 <set_heart_rate_value>:


void set_heart_rate_value(void){
    a940:	b510      	push	{r4, lr}
  uint16_t hr_voltage_mv = adc_read_ch_data(HR_CH, ADC_NUM_CHANNELS);
    a942:	2102      	movs	r1, #2
    a944:	2000      	movs	r0, #0
    a946:	f000 f9b3 	bl	acb0 <adc_read_ch_data>
  perip.adc_heart_rate_mV = (float)hr_voltage_mv;
    a94a:	f7fe f889 	bl	8a60 <__aeabi_ui2f>
    a94e:	4c07      	ldr	r4, [pc, #28]	; (a96c <set_heart_rate_value+0x2c>)
  perip.bt_heart_rate = (uint8_t)(perip.adc_heart_rate_mV * (HR_MAX_VALUE - HR_MIN_VALUE) / VDD  + HR_MIN_VALUE);
    a950:	4907      	ldr	r1, [pc, #28]	; (a970 <set_heart_rate_value+0x30>)
  perip.adc_heart_rate_mV = (float)hr_voltage_mv;
    a952:	60a0      	str	r0, [r4, #8]
  perip.bt_heart_rate = (uint8_t)(perip.adc_heart_rate_mV * (HR_MAX_VALUE - HR_MIN_VALUE) / VDD  + HR_MIN_VALUE);
    a954:	f7fe f8dc 	bl	8b10 <__aeabi_fmul>
    a958:	4906      	ldr	r1, [pc, #24]	; (a974 <set_heart_rate_value+0x34>)
    a95a:	f7fe f98d 	bl	8c78 <__aeabi_fdiv>
    a95e:	4906      	ldr	r1, [pc, #24]	; (a978 <set_heart_rate_value+0x38>)
    a960:	f7fd ffce 	bl	8900 <__addsf3>
    a964:	f7fe fa9a 	bl	8e9c <__aeabi_f2uiz>
    a968:	7320      	strb	r0, [r4, #12]
  
}
    a96a:	bd10      	pop	{r4, pc}
    a96c:	20009cc4 	.word	0x20009cc4
    a970:	42c80000 	.word	0x42c80000
    a974:	454e4000 	.word	0x454e4000
    a978:	42700000 	.word	0x42700000

0000a97c <set_battery_perc>:

void set_battery_perc(void){
    a97c:	b510      	push	{r4, lr}
  uint16_t batt_voltage_mv = adc_read_ch_data(BATT_CH, ADC_NUM_CHANNELS);
    a97e:	2102      	movs	r1, #2
    a980:	2001      	movs	r0, #1
    a982:	f000 f995 	bl	acb0 <adc_read_ch_data>
  perip.adc_batt_mV = (float)batt_voltage_mv;
    a986:	f7fe f86b 	bl	8a60 <__aeabi_ui2f>
    a98a:	4c07      	ldr	r4, [pc, #28]	; (a9a8 <set_battery_perc+0x2c>)
  perip.bt_batt_lvl = (uint8_t)(perip.adc_batt_mV * (BATT_MAX_PERC_VALUE - BATT_MIN_PERC_VALUE) / VDD  + BATT_MIN_PERC_VALUE);
    a98c:	4907      	ldr	r1, [pc, #28]	; (a9ac <set_battery_perc+0x30>)
  perip.adc_batt_mV = (float)batt_voltage_mv;
    a98e:	6020      	str	r0, [r4, #0]
  perip.bt_batt_lvl = (uint8_t)(perip.adc_batt_mV * (BATT_MAX_PERC_VALUE - BATT_MIN_PERC_VALUE) / VDD  + BATT_MIN_PERC_VALUE);
    a990:	f7fe f8be 	bl	8b10 <__aeabi_fmul>
    a994:	4906      	ldr	r1, [pc, #24]	; (a9b0 <set_battery_perc+0x34>)
    a996:	f7fe f96f 	bl	8c78 <__aeabi_fdiv>
    a99a:	2100      	movs	r1, #0
    a99c:	f7fd ffb0 	bl	8900 <__addsf3>
    a9a0:	f7fe fa7c 	bl	8e9c <__aeabi_f2uiz>
    a9a4:	7120      	strb	r0, [r4, #4]
}
    a9a6:	bd10      	pop	{r4, pc}
    a9a8:	20009cc4 	.word	0x20009cc4
    a9ac:	42c80000 	.word	0x42c80000
    a9b0:	454e4000 	.word	0x454e4000

0000a9b4 <disconnected>:
	} else {
		LOG("Device Connected\n");
	}
}

static void disconnected(struct bt_conn *conn, uint8_t reason){
    a9b4:	b510      	push	{r4, lr}
    a9b6:	460c      	mov	r4, r1
	LOG("Device Disconnected (reason 0x%02x)\n", reason);
    a9b8:	f011 fc69 	bl	1c28e <k_uptime_get_32>
    a9bc:	4622      	mov	r2, r4
}
    a9be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	LOG("Device Disconnected (reason 0x%02x)\n", reason);
    a9c2:	4601      	mov	r1, r0
    a9c4:	4801      	ldr	r0, [pc, #4]	; (a9cc <disconnected+0x18>)
    a9c6:	f010 bcbf 	b.w	1b348 <iprintf>
    a9ca:	bf00      	nop
    a9cc:	000236c2 	.word	0x000236c2

0000a9d0 <connected>:
static void connected(struct bt_conn *conn, uint8_t err){
    a9d0:	b510      	push	{r4, lr}
	if (err) {
    a9d2:	460c      	mov	r4, r1
    a9d4:	b141      	cbz	r1, a9e8 <connected+0x18>
		LOG("Connection failed (err 0x%02x)\n", err);
    a9d6:	f011 fc5a 	bl	1c28e <k_uptime_get_32>
    a9da:	4622      	mov	r2, r4
}
    a9dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG("Connection failed (err 0x%02x)\n", err);
    a9e0:	4601      	mov	r1, r0
    a9e2:	4805      	ldr	r0, [pc, #20]	; (a9f8 <connected+0x28>)
    a9e4:	f010 bcb0 	b.w	1b348 <iprintf>
		LOG("Device Connected\n");
    a9e8:	f011 fc51 	bl	1c28e <k_uptime_get_32>
}
    a9ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG("Device Connected\n");
    a9f0:	4601      	mov	r1, r0
    a9f2:	4802      	ldr	r0, [pc, #8]	; (a9fc <connected+0x2c>)
    a9f4:	f010 bca8 	b.w	1b348 <iprintf>
    a9f8:	000236f0 	.word	0x000236f0
    a9fc:	00023719 	.word	0x00023719

0000aa00 <auth_cancel>:

static void auth_cancel(struct bt_conn *conn){
    aa00:	b530      	push	{r4, r5, lr}
    aa02:	b093      	sub	sp, #76	; 0x4c
	char addr[BT_ADDR_LE_STR_LEN];
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    aa04:	f013 fdc4 	bl	1e590 <bt_conn_get_dst>
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    aa08:	7803      	ldrb	r3, [r0, #0]
    aa0a:	4604      	mov	r4, r0
    aa0c:	ad07      	add	r5, sp, #28
    aa0e:	2b03      	cmp	r3, #3
    aa10:	d827      	bhi.n	aa62 <auth_cancel+0x62>
    aa12:	e8df f003 	tbb	[pc, r3]
    aa16:	2002      	.short	0x2002
    aa18:	2422      	.short	0x2422
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    aa1a:	4915      	ldr	r1, [pc, #84]	; (aa70 <auth_cancel+0x70>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    aa1c:	4628      	mov	r0, r5
    aa1e:	f017 f96b 	bl	21cf8 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    aa22:	79a3      	ldrb	r3, [r4, #6]
    aa24:	9505      	str	r5, [sp, #20]
    aa26:	7862      	ldrb	r2, [r4, #1]
    aa28:	211e      	movs	r1, #30
    aa2a:	9204      	str	r2, [sp, #16]
    aa2c:	78a2      	ldrb	r2, [r4, #2]
    aa2e:	a80a      	add	r0, sp, #40	; 0x28
    aa30:	9203      	str	r2, [sp, #12]
    aa32:	78e2      	ldrb	r2, [r4, #3]
    aa34:	9202      	str	r2, [sp, #8]
    aa36:	7922      	ldrb	r2, [r4, #4]
    aa38:	9201      	str	r2, [sp, #4]
    aa3a:	7962      	ldrb	r2, [r4, #5]
    aa3c:	9200      	str	r2, [sp, #0]
    aa3e:	4a0d      	ldr	r2, [pc, #52]	; (aa74 <auth_cancel+0x74>)
    aa40:	f011 fcaa 	bl	1c398 <snprintk>
	LOG("Pairing cancelled: %s\n", addr);
    aa44:	f011 fc23 	bl	1c28e <k_uptime_get_32>
    aa48:	aa0a      	add	r2, sp, #40	; 0x28
    aa4a:	4601      	mov	r1, r0
    aa4c:	480a      	ldr	r0, [pc, #40]	; (aa78 <auth_cancel+0x78>)
    aa4e:	f010 fc7b 	bl	1b348 <iprintf>
}
    aa52:	b013      	add	sp, #76	; 0x4c
    aa54:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    aa56:	4909      	ldr	r1, [pc, #36]	; (aa7c <auth_cancel+0x7c>)
    aa58:	e7e0      	b.n	aa1c <auth_cancel+0x1c>
		strcpy(type, "public-id");
    aa5a:	4909      	ldr	r1, [pc, #36]	; (aa80 <auth_cancel+0x80>)
    aa5c:	e7de      	b.n	aa1c <auth_cancel+0x1c>
		strcpy(type, "random-id");
    aa5e:	4909      	ldr	r1, [pc, #36]	; (aa84 <auth_cancel+0x84>)
    aa60:	e7dc      	b.n	aa1c <auth_cancel+0x1c>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    aa62:	210a      	movs	r1, #10
    aa64:	4628      	mov	r0, r5
    aa66:	4a08      	ldr	r2, [pc, #32]	; (aa88 <auth_cancel+0x88>)
    aa68:	f011 fc96 	bl	1c398 <snprintk>
		break;
    aa6c:	e7d9      	b.n	aa22 <auth_cancel+0x22>
    aa6e:	bf00      	nop
    aa70:	00023734 	.word	0x00023734
    aa74:	00023756 	.word	0x00023756
    aa78:	00023779 	.word	0x00023779
    aa7c:	0002373b 	.word	0x0002373b
    aa80:	00023742 	.word	0x00023742
    aa84:	0002374c 	.word	0x0002374c
    aa88:	00025fc7 	.word	0x00025fc7

0000aa8c <bt_ready>:
};

/***********************************************************
 Function Definitions
***********************************************************/
void bt_ready(void){
    aa8c:	b530      	push	{r4, r5, lr}
    aa8e:	b089      	sub	sp, #36	; 0x24
	int err;
	LOG("Bluetooth initialized");
    aa90:	f011 fbfd 	bl	1c28e <k_uptime_get_32>
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
    aa94:	4d11      	ldr	r5, [pc, #68]	; (aadc <bt_ready+0x50>)
	LOG("Bluetooth initialized");
    aa96:	4601      	mov	r1, r0
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
    aa98:	ac03      	add	r4, sp, #12
	LOG("Bluetooth initialized");
    aa9a:	4811      	ldr	r0, [pc, #68]	; (aae0 <bt_ready+0x54>)
    aa9c:	f010 fc54 	bl	1b348 <iprintf>
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
    aaa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    aaa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    aaa4:	682b      	ldr	r3, [r5, #0]
    aaa6:	2202      	movs	r2, #2
    aaa8:	6023      	str	r3, [r4, #0]
    aaaa:	2300      	movs	r3, #0
    aaac:	490d      	ldr	r1, [pc, #52]	; (aae4 <bt_ready+0x58>)
    aaae:	9300      	str	r3, [sp, #0]
    aab0:	a803      	add	r0, sp, #12
    aab2:	f006 f9e7 	bl	10e84 <bt_le_adv_start>
	if (err) {
    aab6:	4604      	mov	r4, r0
    aab8:	b140      	cbz	r0, aacc <bt_ready+0x40>
		LOG("Advertising failed to start (err %d)\n", err);
    aaba:	f011 fbe8 	bl	1c28e <k_uptime_get_32>
    aabe:	4622      	mov	r2, r4
    aac0:	4601      	mov	r1, r0
    aac2:	4809      	ldr	r0, [pc, #36]	; (aae8 <bt_ready+0x5c>)
    aac4:	f010 fc40 	bl	1b348 <iprintf>
		return;
	}
	LOG("Advertising successfully started\n");
}
    aac8:	b009      	add	sp, #36	; 0x24
    aaca:	bd30      	pop	{r4, r5, pc}
	LOG("Advertising successfully started\n");
    aacc:	f011 fbdf 	bl	1c28e <k_uptime_get_32>
    aad0:	4601      	mov	r1, r0
    aad2:	4806      	ldr	r0, [pc, #24]	; (aaec <bt_ready+0x60>)
    aad4:	f010 fc38 	bl	1b348 <iprintf>
    aad8:	e7f6      	b.n	aac8 <bt_ready+0x3c>
    aada:	bf00      	nop
    aadc:	000228d0 	.word	0x000228d0
    aae0:	00023799 	.word	0x00023799
    aae4:	00022a98 	.word	0x00022a98
    aae8:	000237b8 	.word	0x000237b8
    aaec:	000237e7 	.word	0x000237e7

0000aaf0 <bt_conn_auth_cb_reg>:

void bt_conn_auth_cb_reg(){
    aaf0:	b510      	push	{r4, lr}
	int err;
	err = bt_conn_auth_cb_register(&auth_cb_display);
    aaf2:	480b      	ldr	r0, [pc, #44]	; (ab20 <bt_conn_auth_cb_reg+0x30>)
    aaf4:	f007 fae6 	bl	120c4 <bt_conn_auth_cb_register>
	if (err) {
    aaf8:	4604      	mov	r4, r0
    aafa:	b140      	cbz	r0, ab0e <bt_conn_auth_cb_reg+0x1e>
		LOG("Failed to register auth callbacks (err %d)\n", err);
    aafc:	f011 fbc7 	bl	1c28e <k_uptime_get_32>
    ab00:	4622      	mov	r2, r4
	} else {
		LOG("Auth callbacks registered\n");
	}
}
    ab02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG("Failed to register auth callbacks (err %d)\n", err);
    ab06:	4601      	mov	r1, r0
    ab08:	4806      	ldr	r0, [pc, #24]	; (ab24 <bt_conn_auth_cb_reg+0x34>)
    ab0a:	f010 bc1d 	b.w	1b348 <iprintf>
		LOG("Auth callbacks registered\n");
    ab0e:	f011 fbbe 	bl	1c28e <k_uptime_get_32>
}
    ab12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG("Auth callbacks registered\n");
    ab16:	4601      	mov	r1, r0
    ab18:	4803      	ldr	r0, [pc, #12]	; (ab28 <bt_conn_auth_cb_reg+0x38>)
    ab1a:	f010 bc15 	b.w	1b348 <iprintf>
    ab1e:	bf00      	nop
    ab20:	20008260 	.word	0x20008260
    ab24:	00023812 	.word	0x00023812
    ab28:	00023847 	.word	0x00023847

0000ab2c <adc_init>:


/***********************************************************
 Function Definitions
***********************************************************/
void adc_init(){
    ab2c:	b570      	push	{r4, r5, r6, lr}
    ab2e:	4c0b      	ldr	r4, [pc, #44]	; (ab5c <adc_init+0x30>)
    ab30:	4620      	mov	r0, r4
    ab32:	f016 f9b1 	bl	20e98 <z_device_is_ready>
  int err;
  /* Configure channels individually prior to sampling. */
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
		if (!device_is_ready(adc_channels[i].dev)) {
    ab36:	b180      	cbz	r0, ab5a <adc_init+0x2e>
					   const struct adc_channel_cfg *channel_cfg)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->channel_setup(dev, channel_cfg);
    ab38:	68a5      	ldr	r5, [r4, #8]
    ab3a:	4620      	mov	r0, r4
    ab3c:	682b      	ldr	r3, [r5, #0]
    ab3e:	4908      	ldr	r1, [pc, #32]	; (ab60 <adc_init+0x34>)
    ab40:	4798      	blx	r3
			LOG_ADC("ADC controller device not ready\n");
			return;
		}

		err = adc_channel_setup_dt(&adc_channels[i]);
		if (err < 0) {
    ab42:	2800      	cmp	r0, #0
    ab44:	db09      	blt.n	ab5a <adc_init+0x2e>
    ab46:	4620      	mov	r0, r4
    ab48:	f016 f9a6 	bl	20e98 <z_device_is_ready>
		if (!device_is_ready(adc_channels[i].dev)) {
    ab4c:	b128      	cbz	r0, ab5a <adc_init+0x2e>
    ab4e:	4905      	ldr	r1, [pc, #20]	; (ab64 <adc_init+0x38>)
    ab50:	4620      	mov	r0, r4
    ab52:	682b      	ldr	r3, [r5, #0]
			LOG_ADC("Could not setup channel #%d (%d)\n", i, err);
			return;
		}
	}
}
    ab54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ab58:	4718      	bx	r3
    ab5a:	bd70      	pop	{r4, r5, r6, pc}
    ab5c:	0002241c 	.word	0x0002241c
    ab60:	00022aae 	.word	0x00022aae
    ab64:	00022ac2 	.word	0x00022ac2

0000ab68 <Ff_buffer_add>:


void Ff_buffer_add(uint8_t channel, int32_t data_read, uint8_t size){
  if(channel < size){
    ab68:	4290      	cmp	r0, r2
void Ff_buffer_add(uint8_t channel, int32_t data_read, uint8_t size){
    ab6a:	b570      	push	{r4, r5, r6, lr}
  if(channel < size){
    ab6c:	d21e      	bcs.n	abac <Ff_buffer_add+0x44>
    if(adc_a[channel].status){
    ab6e:	2328      	movs	r3, #40	; 0x28
    ab70:	4c11      	ldr	r4, [pc, #68]	; (abb8 <Ff_buffer_add+0x50>)
    ab72:	fb03 4600 	mla	r6, r3, r0, r4
    ab76:	7872      	ldrb	r2, [r6, #1]
    ab78:	b1c2      	cbz	r2, abac <Ff_buffer_add+0x44>
      if(adc_a[channel].fbuf.count < adc_a[channel].fbuf.length){
    ab7a:	8c35      	ldrh	r5, [r6, #32]
    ab7c:	7932      	ldrb	r2, [r6, #4]
    ab7e:	4295      	cmp	r5, r2
    ab80:	d30c      	bcc.n	ab9c <Ff_buffer_add+0x34>
    ab82:	4633      	mov	r3, r6
    ab84:	2500      	movs	r5, #0
    ab86:	3308      	adds	r3, #8
        adc_a[channel].fbuf.data_set[adc_a[channel].fbuf.count] = data_read; // Fill the buffer with the new data
        adc_a[channel].fbuf.count++;
      }else{
        // Shift the buffer to make space for the new data
        for(uint8_t i = 0; i < adc_a[channel].fbuf.length - 1; i++){
    ab88:	3a01      	subs	r2, #1
    ab8a:	42aa      	cmp	r2, r5
    ab8c:	dc0f      	bgt.n	abae <Ff_buffer_add+0x46>
          adc_a[channel].fbuf.data_set[i] = adc_a[channel].fbuf.data_set[i + 1];
        }
        adc_a[channel].fbuf.data_set[adc_a[channel].fbuf.length - 1] = data_read; // Add the new data at the end
    ab8e:	230a      	movs	r3, #10
    ab90:	fb03 2200 	mla	r2, r3, r0, r2
    ab94:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    ab98:	60a1      	str	r1, [r4, #8]
      }
    }
  }
}
    ab9a:	e007      	b.n	abac <Ff_buffer_add+0x44>
        adc_a[channel].fbuf.data_set[adc_a[channel].fbuf.count] = data_read; // Fill the buffer with the new data
    ab9c:	230a      	movs	r3, #10
    ab9e:	fb03 5300 	mla	r3, r3, r0, r5
        adc_a[channel].fbuf.count++;
    aba2:	3501      	adds	r5, #1
        adc_a[channel].fbuf.data_set[adc_a[channel].fbuf.count] = data_read; // Fill the buffer with the new data
    aba4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    aba8:	6099      	str	r1, [r3, #8]
        adc_a[channel].fbuf.count++;
    abaa:	8435      	strh	r5, [r6, #32]
}
    abac:	bd70      	pop	{r4, r5, r6, pc}
          adc_a[channel].fbuf.data_set[i] = adc_a[channel].fbuf.data_set[i + 1];
    abae:	685e      	ldr	r6, [r3, #4]
    abb0:	3501      	adds	r5, #1
    abb2:	f843 6b04 	str.w	r6, [r3], #4
        for(uint8_t i = 0; i < adc_a[channel].fbuf.length - 1; i++){
    abb6:	e7e8      	b.n	ab8a <Ff_buffer_add+0x22>
    abb8:	2000828c 	.word	0x2000828c

0000abbc <data_is_valid>:


bool data_is_valid(uint8_t channel, uint16_t data_read, uint8_t size){
    abbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    abbe:	4605      	mov	r5, r0
   if(channel < size){
    abc0:	4295      	cmp	r5, r2
bool data_is_valid(uint8_t channel, uint16_t data_read, uint8_t size){
    abc2:	4608      	mov	r0, r1
   if(channel < size){
    abc4:	d230      	bcs.n	ac28 <data_is_valid+0x6c>
    if(adc_a[channel].status){
    abc6:	2228      	movs	r2, #40	; 0x28
    abc8:	4f18      	ldr	r7, [pc, #96]	; (ac2c <data_is_valid+0x70>)
    abca:	fb02 7205 	mla	r2, r2, r5, r7
    abce:	7853      	ldrb	r3, [r2, #1]
    abd0:	b343      	cbz	r3, ac24 <data_is_valid+0x68>
      if(adc_a[channel].fbuf.count == adc_a[channel].fbuf.length){
    abd2:	8c11      	ldrh	r1, [r2, #32]
    abd4:	7914      	ldrb	r4, [r2, #4]
    abd6:	428c      	cmp	r4, r1
    abd8:	d124      	bne.n	ac24 <data_is_valid+0x68>
        uint16_t last_value = adc_a[channel].fbuf.data_set[adc_a[channel].fbuf.count - 1]; // Get the last value in the buffer
        return ((data_read <= (last_value + RANGE)) & (data_read >= (last_value - RANGE)));
    abda:	f7fd ff45 	bl	8a68 <__aeabi_i2f>
        uint16_t last_value = adc_a[channel].fbuf.data_set[adc_a[channel].fbuf.count - 1]; // Get the last value in the buffer
    abde:	230a      	movs	r3, #10
    abe0:	3c01      	subs	r4, #1
    abe2:	fb03 4405 	mla	r4, r3, r5, r4
    abe6:	eb07 0784 	add.w	r7, r7, r4, lsl #2
        return ((data_read <= (last_value + RANGE)) & (data_read >= (last_value - RANGE)));
    abea:	4606      	mov	r6, r0
    abec:	8938      	ldrh	r0, [r7, #8]
    abee:	f7fd ff3b 	bl	8a68 <__aeabi_i2f>
    abf2:	490f      	ldr	r1, [pc, #60]	; (ac30 <data_is_valid+0x74>)
    abf4:	4605      	mov	r5, r0
    abf6:	f7fd fe83 	bl	8900 <__addsf3>
    abfa:	4601      	mov	r1, r0
    abfc:	4630      	mov	r0, r6
    abfe:	f7fe f92f 	bl	8e60 <__aeabi_fcmple>
    ac02:	1e03      	subs	r3, r0, #0
    ac04:	bf18      	it	ne
    ac06:	2301      	movne	r3, #1
    ac08:	4909      	ldr	r1, [pc, #36]	; (ac30 <data_is_valid+0x74>)
    ac0a:	4628      	mov	r0, r5
    ac0c:	461c      	mov	r4, r3
    ac0e:	f7fd fe75 	bl	88fc <__aeabi_fsub>
    ac12:	4601      	mov	r1, r0
    ac14:	4630      	mov	r0, r6
    ac16:	f7fe f92d 	bl	8e74 <__aeabi_fcmpge>
    ac1a:	2800      	cmp	r0, #0
    ac1c:	bf0c      	ite	eq
    ac1e:	2300      	moveq	r3, #0
    ac20:	f004 0301 	andne.w	r3, r4, #1
    }
    
  }else{
    return false; // If the channel is out of bounds, return false
  }
}
    ac24:	4618      	mov	r0, r3
    ac26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return false; // If the channel is not valid, return false
    ac28:	2300      	movs	r3, #0
    ac2a:	e7fb      	b.n	ac24 <data_is_valid+0x68>
    ac2c:	2000828c 	.word	0x2000828c
    ac30:	43ba2e8c 	.word	0x43ba2e8c

0000ac34 <spike_counter>:


uint8_t spike_counter( uint8_t channel,  uint16_t data_read, uint8_t size){
  if(channel < size){
    ac34:	4290      	cmp	r0, r2
uint8_t spike_counter( uint8_t channel,  uint16_t data_read, uint8_t size){
    ac36:	b570      	push	{r4, r5, r6, lr}
    ac38:	4605      	mov	r5, r0
    ac3a:	4e0b      	ldr	r6, [pc, #44]	; (ac68 <spike_counter+0x34>)
  if(channel < size){
    ac3c:	d20c      	bcs.n	ac58 <spike_counter+0x24>
    if(adc_a[channel].status){
    ac3e:	2428      	movs	r4, #40	; 0x28
    ac40:	fb04 6400 	mla	r4, r4, r0, r6
    ac44:	7863      	ldrb	r3, [r4, #1]
    ac46:	b13b      	cbz	r3, ac58 <spike_counter+0x24>
      if(!data_is_valid(channel, data_read, size)){
    ac48:	f7ff ffb8 	bl	abbc <data_is_valid>
    ac4c:	b950      	cbnz	r0, ac64 <spike_counter+0x30>
          adc_a[channel].counter_spike ++; // First spike detected
    ac4e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    ac52:	3301      	adds	r3, #1
      }else{
          adc_a[channel].counter_spike = NO_ADC_SPIKE; // Reset counter if data is valid
    ac54:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      }
    }
  }
  return adc_a[channel].counter_spike;
    ac58:	2328      	movs	r3, #40	; 0x28
    ac5a:	fb03 6605 	mla	r6, r3, r5, r6
}
    ac5e:	f896 0024 	ldrb.w	r0, [r6, #36]	; 0x24
    ac62:	bd70      	pop	{r4, r5, r6, pc}
          adc_a[channel].counter_spike = NO_ADC_SPIKE; // Reset counter if data is valid
    ac64:	2300      	movs	r3, #0
    ac66:	e7f5      	b.n	ac54 <spike_counter+0x20>
    ac68:	2000828c 	.word	0x2000828c

0000ac6c <adc_get_media>:
}

uint16_t adc_get_media (uint8_t channel, uint8_t size){
  uint16_t media = 0;
  uint16_t sat_value = 0;
  if(channel < size){
    ac6c:	4288      	cmp	r0, r1
uint16_t adc_get_media (uint8_t channel, uint8_t size){
    ac6e:	4603      	mov	r3, r0
    ac70:	b530      	push	{r4, r5, lr}
  if(channel < size){
    ac72:	d218      	bcs.n	aca6 <adc_get_media+0x3a>
    if(adc_a[channel].status){
    ac74:	2228      	movs	r2, #40	; 0x28
    ac76:	4d0d      	ldr	r5, [pc, #52]	; (acac <adc_get_media+0x40>)
    ac78:	fb02 5200 	mla	r2, r2, r0, r5
    ac7c:	7850      	ldrb	r0, [r2, #1]
    ac7e:	b188      	cbz	r0, aca4 <adc_get_media+0x38>
      if(adc_a[channel].fbuf.count > 0){
    ac80:	8c10      	ldrh	r0, [r2, #32]
    ac82:	b178      	cbz	r0, aca4 <adc_get_media+0x38>
        uint16_t sum = 0;
    ac84:	2200      	movs	r2, #0
        for(uint8_t i = 0; i < adc_a[channel].fbuf.count; i++){
          sat_value = (uint16_t)adc_a[channel].fbuf.data_set[i];
    ac86:	240a      	movs	r4, #10
        for(uint8_t i = 0; i < adc_a[channel].fbuf.count; i++){
    ac88:	4611      	mov	r1, r2
          sat_value = (uint16_t)adc_a[channel].fbuf.data_set[i];
    ac8a:	4363      	muls	r3, r4
    ac8c:	185c      	adds	r4, r3, r1
    ac8e:	eb05 0484 	add.w	r4, r5, r4, lsl #2
    ac92:	68a4      	ldr	r4, [r4, #8]
        for(uint8_t i = 0; i < adc_a[channel].fbuf.count; i++){
    ac94:	3101      	adds	r1, #1
    ac96:	b2c9      	uxtb	r1, r1
          sum += sat_value; // Sum all values in the buffer
    ac98:	4422      	add	r2, r4
        for(uint8_t i = 0; i < adc_a[channel].fbuf.count; i++){
    ac9a:	4288      	cmp	r0, r1
          sum += sat_value; // Sum all values in the buffer
    ac9c:	b292      	uxth	r2, r2
        for(uint8_t i = 0; i < adc_a[channel].fbuf.count; i++){
    ac9e:	d8f5      	bhi.n	ac8c <adc_get_media+0x20>
        }
        media = sum / adc_a[channel].fbuf.count; // Calculate the average
    aca0:	fbb2 f0f0 	udiv	r0, r2, r0
        media = 0; // If no data, return zero
      }
    }
  }
  return media;
}
    aca4:	bd30      	pop	{r4, r5, pc}
  uint16_t media = 0;
    aca6:	2000      	movs	r0, #0
    aca8:	e7fc      	b.n	aca4 <adc_get_media+0x38>
    acaa:	bf00      	nop
    acac:	2000828c 	.word	0x2000828c

0000acb0 <adc_read_ch_data>:
    if (channel >= ARRAY_SIZE(adc_channels)) {
    acb0:	2801      	cmp	r0, #1
uint16_t adc_read_ch_data (uint8_t channel, uint8_t size){
    acb2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    acb6:	4604      	mov	r4, r0
    acb8:	460e      	mov	r6, r1
    if (channel >= ARRAY_SIZE(adc_channels)) {
    acba:	d870      	bhi.n	ad9e <adc_read_ch_data+0xee>
 * @retval -ENOTSUP If @p spec does not have valid channel configuration
 */
static inline int adc_sequence_init_dt(const struct adc_dt_spec *spec,
				       struct adc_sequence *seq)
{
	if (!spec->channel_cfg_dt_node_exists) {
    acbc:	2314      	movs	r3, #20
    acbe:	4d3a      	ldr	r5, [pc, #232]	; (ada8 <adc_read_ch_data+0xf8>)
    acc0:	fb03 5300 	mla	r3, r3, r0, r5
    acc4:	795a      	ldrb	r2, [r3, #5]
    acc6:	b132      	cbz	r2, acd6 <adc_read_ch_data+0x26>
		return -ENOTSUP;
	}

	seq->channels = BIT(spec->channel_id);
    acc8:	2201      	movs	r2, #1
    acca:	7918      	ldrb	r0, [r3, #4]
    accc:	4937      	ldr	r1, [pc, #220]	; (adac <adc_read_ch_data+0xfc>)
	seq->resolution = spec->resolution;
    acce:	8a1b      	ldrh	r3, [r3, #16]
	seq->channels = BIT(spec->channel_id);
    acd0:	4082      	lsls	r2, r0
    acd2:	604a      	str	r2, [r1, #4]
	seq->resolution = spec->resolution;
    acd4:	820b      	strh	r3, [r1, #16]
      err = adc_read(adc_channels[channel].dev, &sequence);
    acd6:	2314      	movs	r3, #20
    acd8:	4363      	muls	r3, r4
    acda:	f855 a003 	ldr.w	sl, [r5, r3]
    acde:	eb05 0903 	add.w	r9, r5, r3
	return api->read(dev, sequence);
    ace2:	f8da 3008 	ldr.w	r3, [sl, #8]
    ace6:	4650      	mov	r0, sl
    ace8:	685b      	ldr	r3, [r3, #4]
    acea:	4930      	ldr	r1, [pc, #192]	; (adac <adc_read_ch_data+0xfc>)
    acec:	4798      	blx	r3
      if (adc_a[channel].status){
    acee:	2328      	movs	r3, #40	; 0x28
    acf0:	f8df 80bc 	ldr.w	r8, [pc, #188]	; adb0 <adc_read_ch_data+0x100>
    acf4:	fb03 8304 	mla	r3, r3, r4, r8
    acf8:	785b      	ldrb	r3, [r3, #1]
    acfa:	2b00      	cmp	r3, #0
    acfc:	d03f      	beq.n	ad7e <adc_read_ch_data+0xce>
        if (err >= 0) {
    acfe:	2800      	cmp	r0, #0
    ad00:	db4f      	blt.n	ada2 <adc_read_ch_data+0xf2>
          val_mv = buf;
    ad02:	4b2c      	ldr	r3, [pc, #176]	; (adb4 <adc_read_ch_data+0x104>)
    ad04:	f9b3 7000 	ldrsh.w	r7, [r3]
	if (!spec->channel_cfg_dt_node_exists) {
    ad08:	f899 3005 	ldrb.w	r3, [r9, #5]
    ad0c:	b30b      	cbz	r3, ad52 <adc_read_ch_data+0xa2>
	resolution = spec->resolution;
    ad0e:	2214      	movs	r2, #20
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
    ad10:	f899 3007 	ldrb.w	r3, [r9, #7]
	resolution = spec->resolution;
    ad14:	fb02 5104 	mla	r1, r2, r4, r5
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
    ad18:	2b04      	cmp	r3, #4
	return api->ref_internal;
    ad1a:	bf0a      	itet	eq
    ad1c:	f8da 3008 	ldreq.w	r3, [sl, #8]
		vref_mv = spec->vref_mv;
    ad20:	f8b9 300e 	ldrhne.w	r3, [r9, #14]
		vref_mv = (int32_t)adc_ref_internal(spec->dev);
    ad24:	891b      	ldrheq	r3, [r3, #8]
	return adc_raw_to_millivolts(vref_mv, spec->channel_cfg.gain,
    ad26:	fb02 5504 	mla	r5, r2, r4, r5
	resolution = spec->resolution;
    ad2a:	f891 9010 	ldrb.w	r9, [r1, #16]
	int32_t adc_mv = *valp * ref_mv;
    ad2e:	437b      	muls	r3, r7
	if (spec->channel_cfg.differential) {
    ad30:	7a89      	ldrb	r1, [r1, #10]
	int ret = adc_gain_invert(gain, &adc_mv);
    ad32:	79a8      	ldrb	r0, [r5, #6]
	if (spec->channel_cfg.differential) {
    ad34:	0689      	lsls	r1, r1, #26
		resolution -= 1U;
    ad36:	bf48      	it	mi
    ad38:	f109 39ff 	addmi.w	r9, r9, #4294967295
	int ret = adc_gain_invert(gain, &adc_mv);
    ad3c:	a901      	add	r1, sp, #4
		resolution -= 1U;
    ad3e:	bf48      	it	mi
    ad40:	fa5f f989 	uxtbmi.w	r9, r9
	int32_t adc_mv = *valp * ref_mv;
    ad44:	9301      	str	r3, [sp, #4]
	int ret = adc_gain_invert(gain, &adc_mv);
    ad46:	f00b fb37 	bl	163b8 <adc_gain_invert>
	if (ret == 0) {
    ad4a:	b910      	cbnz	r0, ad52 <adc_read_ch_data+0xa2>
		*valp = (adc_mv >> resolution);
    ad4c:	9f01      	ldr	r7, [sp, #4]
    ad4e:	fa47 f709 	asr.w	r7, r7, r9
          if (spike_counter(channel, val_mv, size) == NO_ADC_SPIKE || spike_counter(channel, val_mv, size) >= LIMIT_ADC_SPIKE){
    ad52:	b2bd      	uxth	r5, r7
    ad54:	4632      	mov	r2, r6
    ad56:	4629      	mov	r1, r5
    ad58:	4620      	mov	r0, r4
    ad5a:	f7ff ff6b 	bl	ac34 <spike_counter>
    ad5e:	b9b0      	cbnz	r0, ad8e <adc_read_ch_data+0xde>
            adc_a[channel].counter_spike = NO_ADC_SPIKE; // Reset spike counter if data is valid
    ad60:	2528      	movs	r5, #40	; 0x28
            Ff_buffer_add(channel, val_mv, size); // Add new data to the FIFO buffer
    ad62:	4632      	mov	r2, r6
    ad64:	4639      	mov	r1, r7
    ad66:	4620      	mov	r0, r4
    ad68:	f7ff fefe 	bl	ab68 <Ff_buffer_add>
            adc_a[channel].counter_spike = NO_ADC_SPIKE; // Reset spike counter if data is valid
    ad6c:	2300      	movs	r3, #0
    ad6e:	fb05 8504 	mla	r5, r5, r4, r8
            adc_a[channel].fbuf.data_media = adc_get_media(channel, size); // Calculate media from the buffer
    ad72:	4631      	mov	r1, r6
            adc_a[channel].counter_spike = NO_ADC_SPIKE; // Reset spike counter if data is valid
    ad74:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
            adc_a[channel].fbuf.data_media = adc_get_media(channel, size); // Calculate media from the buffer
    ad78:	f7ff ff78 	bl	ac6c <adc_get_media>
    ad7c:	61e8      	str	r0, [r5, #28]
  return adc_a[channel].fbuf.data_media;
    ad7e:	2328      	movs	r3, #40	; 0x28
    ad80:	fb03 8804 	mla	r8, r3, r4, r8
    ad84:	f8b8 001c 	ldrh.w	r0, [r8, #28]
}
    ad88:	b002      	add	sp, #8
    ad8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if (spike_counter(channel, val_mv, size) == NO_ADC_SPIKE || spike_counter(channel, val_mv, size) >= LIMIT_ADC_SPIKE){
    ad8e:	4632      	mov	r2, r6
    ad90:	4629      	mov	r1, r5
    ad92:	4620      	mov	r0, r4
    ad94:	f7ff ff4e 	bl	ac34 <spike_counter>
    ad98:	2802      	cmp	r0, #2
    ad9a:	d8e1      	bhi.n	ad60 <adc_read_ch_data+0xb0>
    ad9c:	e7ef      	b.n	ad7e <adc_read_ch_data+0xce>
        return 0; // Return 0 or handle error as needed
    ad9e:	2000      	movs	r0, #0
    ada0:	e7f2      	b.n	ad88 <adc_read_ch_data+0xd8>
          return -1;
    ada2:	f64f 70ff 	movw	r0, #65535	; 0xffff
    ada6:	e7ef      	b.n	ad88 <adc_read_ch_data+0xd8>
    ada8:	00022aa8 	.word	0x00022aa8
    adac:	20008278 	.word	0x20008278
    adb0:	2000828c 	.word	0x2000828c
    adb4:	2000a18c 	.word	0x2000a18c

0000adb8 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
    adb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    adbc:	b095      	sub	sp, #84	; 0x54
    adbe:	af00      	add	r7, sp, #0
    adc0:	61bb      	str	r3, [r7, #24]
    adc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    adc4:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(in_packaged != NULL);

	uint8_t *buf = in_packaged;
	uint32_t *buf32 = in_packaged;
	unsigned int args_size, ros_nbr, rws_nbr;
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
    adc6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
    adca:	4688      	mov	r8, r1
{
    adcc:	627a      	str	r2, [r7, #36]	; 0x24
    adce:	60fb      	str	r3, [r7, #12]
	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
    add0:	b949      	cbnz	r1, ade6 <cbprintf_package_convert+0x2e>
	buf += ros_nbr;
    add2:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
    add4:	7845      	ldrb	r5, [r0, #1]
	buf += ros_nbr;
    add6:	7880      	ldrb	r0, [r0, #2]
    add8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    addc:	4420      	add	r0, r4
	for (int i = 0; i < s_nbr; i++) {
    adde:	4545      	cmp	r5, r8
    ade0:	d819      	bhi.n	ae16 <cbprintf_package_convert+0x5e>
	return (size_t)(uintptr_t)(buf - start);
    ade2:	eba0 0804 	sub.w	r8, r0, r4
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
    ade6:	78e3      	ldrb	r3, [r4, #3]
	ros_nbr = in_desc->ro_str_cnt;
    ade8:	f894 b002 	ldrb.w	fp, [r4, #2]
	rws_nbr = in_desc->rw_str_cnt;
    adec:	617b      	str	r3, [r7, #20]
	ro_cpy = ros_nbr &&
    adee:	f1bb 0f00 	cmp.w	fp, #0
    adf2:	d002      	beq.n	adfa <cbprintf_package_convert+0x42>
    adf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    adf6:	07d8      	lsls	r0, r3, #31
    adf8:	d416      	bmi.n	ae28 <cbprintf_package_convert+0x70>
	rw_cpy = rws_nbr > 0 &&
    adfa:	697b      	ldr	r3, [r7, #20]
    adfc:	bb53      	cbnz	r3, ae54 <cbprintf_package_convert+0x9c>
	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
		if (cb) {
    adfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ae00:	b11b      	cbz	r3, ae0a <cbprintf_package_convert+0x52>
			cb(in_packaged, in_len, ctx);
    ae02:	4641      	mov	r1, r8
    ae04:	4620      	mov	r0, r4
    ae06:	69ba      	ldr	r2, [r7, #24]
    ae08:	4798      	blx	r3
		}

		return in_len;
    ae0a:	4645      	mov	r5, r8

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
    ae0c:	4628      	mov	r0, r5
    ae0e:	3754      	adds	r7, #84	; 0x54
    ae10:	46bd      	mov	sp, r7
    ae12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
    ae16:	1c46      	adds	r6, r0, #1
		buf += strlen((const char *)buf) + 1;
    ae18:	4630      	mov	r0, r6
    ae1a:	f7fe fa97 	bl	934c <strlen>
    ae1e:	3001      	adds	r0, #1
    ae20:	4430      	add	r0, r6
	for (int i = 0; i < s_nbr; i++) {
    ae22:	f108 0801 	add.w	r8, r8, #1
    ae26:	e7da      	b.n	adde <cbprintf_package_convert+0x26>
	rw_cpy = rws_nbr > 0 &&
    ae28:	7823      	ldrb	r3, [r4, #0]
    ae2a:	6862      	ldr	r2, [r4, #4]
	args_size = in_desc->len * sizeof(int);
    ae2c:	623b      	str	r3, [r7, #32]
    ae2e:	009b      	lsls	r3, r3, #2
    ae30:	613b      	str	r3, [r7, #16]
	uint8_t *str_pos = &buf[args_size];
    ae32:	6a3b      	ldr	r3, [r7, #32]
	const char *fmt = *(const char **)(buf + sizeof(void *));
    ae34:	61fa      	str	r2, [r7, #28]
	uint8_t *str_pos = &buf[args_size];
    ae36:	eb04 0a83 	add.w	sl, r4, r3, lsl #2
	if (cb == NULL) {
    ae3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ae3c:	2b00      	cmp	r3, #0
    ae3e:	f040 8101 	bne.w	b044 <cbprintf_package_convert+0x28c>
		out_len = (int)in_len;
    ae42:	4645      	mov	r5, r8
	size_t strl_cnt = 0;
    ae44:	2600      	movs	r6, #0
    ae46:	46d0      	mov	r8, sl
    ae48:	eb0b 090a 	add.w	r9, fp, sl
			for (int i = 0; i < ros_nbr; i++) {
    ae4c:	45c1      	cmp	r9, r8
    ae4e:	d153      	bne.n	aef8 <cbprintf_package_convert+0x140>
    ae50:	44da      	add	sl, fp
    ae52:	e013      	b.n	ae7c <cbprintf_package_convert+0xc4>
	rw_cpy = rws_nbr > 0 &&
    ae54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    ae56:	0799      	lsls	r1, r3, #30
    ae58:	d5d1      	bpl.n	adfe <cbprintf_package_convert+0x46>
	args_size = in_desc->len * sizeof(int);
    ae5a:	7823      	ldrb	r3, [r4, #0]
    ae5c:	469a      	mov	sl, r3
    ae5e:	623b      	str	r3, [r7, #32]
    ae60:	009b      	lsls	r3, r3, #2
    ae62:	613b      	str	r3, [r7, #16]
	const char *fmt = *(const char **)(buf + sizeof(void *));
    ae64:	6863      	ldr	r3, [r4, #4]
	uint8_t *str_pos = &buf[args_size];
    ae66:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
	const char *fmt = *(const char **)(buf + sizeof(void *));
    ae6a:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
    ae6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ae6e:	2b00      	cmp	r3, #0
    ae70:	d17c      	bne.n	af6c <cbprintf_package_convert+0x1b4>
		out_len = (int)in_len;
    ae72:	4645      	mov	r5, r8
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    ae74:	f1bb 0f00 	cmp.w	fp, #0
    ae78:	d151      	bne.n	af1e <cbprintf_package_convert+0x166>
	size_t strl_cnt = 0;
    ae7a:	465e      	mov	r6, fp
		for (int i = 0; i < rws_nbr; i++) {
    ae7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    ae7e:	f013 0f05 	tst.w	r3, #5
    ae82:	bf0c      	ite	eq
    ae84:	f04f 0b02 	moveq.w	fp, #2
    ae88:	f04f 0b01 	movne.w	fp, #1
    ae8c:	697b      	ldr	r3, [r7, #20]
    ae8e:	eb0a 0943 	add.w	r9, sl, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    ae92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    ae94:	f003 0302 	and.w	r3, r3, #2
    ae98:	627b      	str	r3, [r7, #36]	; 0x24
		for (int i = 0; i < rws_nbr; i++) {
    ae9a:	45ca      	cmp	sl, r9
    ae9c:	d0b6      	beq.n	ae0c <cbprintf_package_convert+0x54>
			uint8_t arg_idx = *str_pos++;
    ae9e:	f81a 1b02 	ldrb.w	r1, [sl], #2
			const char *str = *(const char **)&buf32[arg_pos];
    aea2:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
    aea6:	f854 8023 	ldr.w	r8, [r4, r3, lsl #2]
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    aeaa:	4bab      	ldr	r3, [pc, #684]	; (b158 <cbprintf_package_convert+0x3a0>)
    aeac:	4598      	cmp	r8, r3
    aeae:	d302      	bcc.n	aeb6 <cbprintf_package_convert+0xfe>
    aeb0:	4baa      	ldr	r3, [pc, #680]	; (b15c <cbprintf_package_convert+0x3a4>)
    aeb2:	4598      	cmp	r8, r3
    aeb4:	d33a      	bcc.n	af2c <cbprintf_package_convert+0x174>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    aeb6:	68fb      	ldr	r3, [r7, #12]
    aeb8:	2b00      	cmp	r3, #0
    aeba:	d044      	beq.n	af46 <cbprintf_package_convert+0x18e>
    aebc:	69f8      	ldr	r0, [r7, #28]
    aebe:	f011 fa24 	bl	1c30a <is_ptr>
    aec2:	2800      	cmp	r0, #0
    aec4:	d03f      	beq.n	af46 <cbprintf_package_convert+0x18e>
				LOG_WRN("(unsigned) char * used for %%p argument. "
    aec6:	46e8      	mov	r8, sp
    aec8:	b08a      	sub	sp, #40	; 0x28
    aeca:	466a      	mov	r2, sp
    aecc:	4ba4      	ldr	r3, [pc, #656]	; (b160 <cbprintf_package_convert+0x3a8>)
    aece:	6153      	str	r3, [r2, #20]
    aed0:	4ba4      	ldr	r3, [pc, #656]	; (b164 <cbprintf_package_convert+0x3ac>)
    aed2:	6193      	str	r3, [r2, #24]
    aed4:	69fb      	ldr	r3, [r7, #28]
    aed6:	e9c2 3107 	strd	r3, r1, [r2, #28]
    aeda:	f240 3301 	movw	r3, #769	; 0x301
    aede:	8493      	strh	r3, [r2, #36]	; 0x24
    aee0:	4ba1      	ldr	r3, [pc, #644]	; (b168 <cbprintf_package_convert+0x3b0>)
    aee2:	f842 3f10 	str.w	r3, [r2, #16]!
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
    aee6:	2300      	movs	r3, #0
    aee8:	f44f 5132 	mov.w	r1, #11392	; 0x2c80
    aeec:	489f      	ldr	r0, [pc, #636]	; (b16c <cbprintf_package_convert+0x3b4>)
    aeee:	f001 f9e1 	bl	c2b4 <z_impl_z_log_msg_static_create>
				out_len -= 2;
    aef2:	3d02      	subs	r5, #2
    aef4:	46c5      	mov	sp, r8
				continue;
    aef6:	e7d0      	b.n	ae9a <cbprintf_package_convert+0xe2>
				const char *str = *(const char **)&buf32[*str_pos];
    aef8:	f818 3b01 	ldrb.w	r3, [r8], #1
		return 1 + strlen(str);
    aefc:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
    af00:	f7fe fa24 	bl	934c <strlen>
				if (strl && strl_cnt < strl_len) {
    af04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
		return 1 + strlen(str);
    af06:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
    af08:	b13b      	cbz	r3, af1a <cbprintf_package_convert+0x162>
    af0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    af0e:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
    af10:	bf3e      	ittt	cc
    af12:	6ffb      	ldrcc	r3, [r7, #124]	; 0x7c
    af14:	f823 0016 	strhcc.w	r0, [r3, r6, lsl #1]
    af18:	3601      	addcc	r6, #1
				out_len += len;
    af1a:	4405      	add	r5, r0
			for (int i = 0; i < ros_nbr; i++) {
    af1c:	e796      	b.n	ae4c <cbprintf_package_convert+0x94>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    af1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    af20:	f013 0604 	ands.w	r6, r3, #4
	size_t strl_cnt = 0;
    af24:	bf1c      	itt	ne
    af26:	6a7e      	ldrne	r6, [r7, #36]	; 0x24
				str_pos += ros_nbr;
    af28:	44da      	addne	sl, fp
    af2a:	e7a7      	b.n	ae7c <cbprintf_package_convert+0xc4>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    af2c:	68fb      	ldr	r3, [r7, #12]
    af2e:	b123      	cbz	r3, af3a <cbprintf_package_convert+0x182>
    af30:	69f8      	ldr	r0, [r7, #28]
    af32:	f011 f9ea 	bl	1c30a <is_ptr>
    af36:	2800      	cmp	r0, #0
    af38:	d1c5      	bne.n	aec6 <cbprintf_package_convert+0x10e>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    af3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    af3c:	07da      	lsls	r2, r3, #31
    af3e:	d405      	bmi.n	af4c <cbprintf_package_convert+0x194>
					out_len -= drop_ro_str_pos ? 2 : 1;
    af40:	eba5 050b 	sub.w	r5, r5, fp
    af44:	e7a9      	b.n	ae9a <cbprintf_package_convert+0xe2>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    af46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    af48:	2b00      	cmp	r3, #0
    af4a:	d0a6      	beq.n	ae9a <cbprintf_package_convert+0xe2>
		return 1 + strlen(str);
    af4c:	4640      	mov	r0, r8
    af4e:	f7fe f9fd 	bl	934c <strlen>
				if (strl && strl_cnt < strl_len) {
    af52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    af54:	b143      	cbz	r3, af68 <cbprintf_package_convert+0x1b0>
    af56:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    af5a:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
    af5c:	bf3f      	itttt	cc
    af5e:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
		return 1 + strlen(str);
    af60:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
    af62:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
    af66:	3601      	addcc	r6, #1
				out_len += (len - 1);
    af68:	4405      	add	r5, r0
		for (int i = 0; i < rws_nbr; i++) {
    af6a:	e796      	b.n	ae9a <cbprintf_package_convert+0xe2>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    af6c:	f1bb 0f00 	cmp.w	fp, #0
    af70:	d06e      	beq.n	b050 <cbprintf_package_convert+0x298>
    af72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    af74:	f013 0604 	ands.w	r6, r3, #4
    af78:	d06d      	beq.n	b056 <cbprintf_package_convert+0x29e>
		keep_cnt = ros_nbr;
    af7a:	46d9      	mov	r9, fp
		scpy_cnt = 0;
    af7c:	2600      	movs	r6, #0
		dst = keep_str_pos;
    af7e:	f107 0040 	add.w	r0, r7, #64	; 0x40
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    af82:	465a      	mov	r2, fp
    af84:	4651      	mov	r1, sl
    af86:	f016 fd82 	bl	21a8e <memcpy>
	str_pos += ros_nbr;
    af8a:	697b      	ldr	r3, [r7, #20]
    af8c:	44da      	add	sl, fp
	for (int i = 0; i < rws_nbr; i++) {
    af8e:	005b      	lsls	r3, r3, #1
    af90:	607b      	str	r3, [r7, #4]
    af92:	697b      	ldr	r3, [r7, #20]
    af94:	eb0a 0343 	add.w	r3, sl, r3, lsl #1
    af98:	60bb      	str	r3, [r7, #8]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    af9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    af9c:	f003 0302 	and.w	r3, r3, #2
    afa0:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < rws_nbr; i++) {
    afa2:	68bb      	ldr	r3, [r7, #8]
    afa4:	4553      	cmp	r3, sl
    afa6:	d158      	bne.n	b05a <cbprintf_package_convert+0x2a2>
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    afa8:	6fb9      	ldr	r1, [r7, #120]	; 0x78
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    afaa:	7863      	ldrb	r3, [r4, #1]
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    afac:	6fb8      	ldr	r0, [r7, #120]	; 0x78
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    afae:	0789      	lsls	r1, r1, #30
    afb0:	bf48      	it	mi
    afb2:	2100      	movmi	r1, #0
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    afb4:	eb06 0203 	add.w	r2, r6, r3
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    afb8:	bf58      	it	pl
    afba:	ea4f 0159 	movpl.w	r1, r9, lsr #1
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    afbe:	07c5      	lsls	r5, r0, #31
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    afc0:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    afc2:	f100 809a 	bmi.w	b0fa <cbprintf_package_convert+0x342>
    afc6:	f010 0f04 	tst.w	r0, #4
    afca:	bf14      	ite	ne
    afcc:	4648      	movne	r0, r9
    afce:	2000      	moveq	r0, #0
    afd0:	61fb      	str	r3, [r7, #28]
	*in_desc = out_desc;
    afd2:	7062      	strb	r2, [r4, #1]
    afd4:	70a0      	strb	r0, [r4, #2]
    afd6:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
    afd8:	4620      	mov	r0, r4
    afda:	69ba      	ldr	r2, [r7, #24]
    afdc:	6939      	ldr	r1, [r7, #16]
    afde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    afe0:	4798      	blx	r3
	if (rv < 0) {
    afe2:	1e05      	subs	r5, r0, #0
    afe4:	f6ff af12 	blt.w	ae0c <cbprintf_package_convert+0x54>
	*in_desc = in_desc_backup;
    afe8:	6a3b      	ldr	r3, [r7, #32]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    afea:	4649      	mov	r1, r9
	*in_desc = in_desc_backup;
    afec:	7023      	strb	r3, [r4, #0]
    afee:	69fb      	ldr	r3, [r7, #28]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    aff0:	69ba      	ldr	r2, [r7, #24]
	*in_desc = in_desc_backup;
    aff2:	7063      	strb	r3, [r4, #1]
    aff4:	697b      	ldr	r3, [r7, #20]
    aff6:	f884 b002 	strb.w	fp, [r4, #2]
    affa:	70e3      	strb	r3, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    affc:	f107 0040 	add.w	r0, r7, #64	; 0x40
    b000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b002:	4798      	blx	r3
	if (rv < 0) {
    b004:	f1b0 0900 	subs.w	r9, r0, #0
    b008:	f2c0 80a4 	blt.w	b154 <cbprintf_package_convert+0x39c>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    b00c:	693b      	ldr	r3, [r7, #16]
    b00e:	eba8 010b 	sub.w	r1, r8, fp
    b012:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
    b014:	687b      	ldr	r3, [r7, #4]
    b016:	4650      	mov	r0, sl
    b018:	1ac9      	subs	r1, r1, r3
    b01a:	69ba      	ldr	r2, [r7, #24]
    b01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b01e:	4798      	blx	r3
	if (rv < 0) {
    b020:	2800      	cmp	r0, #0
    b022:	f2c0 80a5 	blt.w	b170 <cbprintf_package_convert+0x3b8>
	for (int i = 0; i < scpy_cnt; i++) {
    b026:	f04f 0b00 	mov.w	fp, #0
	out_len += rv;
    b02a:	44a9      	add	r9, r5
	out_len += rv;
    b02c:	eb09 0500 	add.w	r5, r9, r0
		uint8_t loc = cpy_str_pos[i];
    b030:	f107 0a30 	add.w	sl, r7, #48	; 0x30
	for (int i = 0; i < scpy_cnt; i++) {
    b034:	45b3      	cmp	fp, r6
    b036:	db62      	blt.n	b0fe <cbprintf_package_convert+0x346>
	(void)cb(NULL, 0, ctx);
    b038:	2100      	movs	r1, #0
    b03a:	69ba      	ldr	r2, [r7, #24]
    b03c:	4608      	mov	r0, r1
    b03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b040:	4798      	blx	r3
	return out_len;
    b042:	e6e3      	b.n	ae0c <cbprintf_package_convert+0x54>
	if (cb == NULL) {
    b044:	465e      	mov	r6, fp
    b046:	f04f 0900 	mov.w	r9, #0
    b04a:	f107 0030 	add.w	r0, r7, #48	; 0x30
    b04e:	e798      	b.n	af82 <cbprintf_package_convert+0x1ca>
		scpy_cnt = 0;
    b050:	465e      	mov	r6, fp
		keep_cnt = 0;
    b052:	46d9      	mov	r9, fp
    b054:	e799      	b.n	af8a <cbprintf_package_convert+0x1d2>
    b056:	46b1      	mov	r9, r6
    b058:	e797      	b.n	af8a <cbprintf_package_convert+0x1d2>
		uint8_t arg_idx = *str_pos++;
    b05a:	f81a 1b02 	ldrb.w	r1, [sl], #2
    b05e:	4b3e      	ldr	r3, [pc, #248]	; (b158 <cbprintf_package_convert+0x3a0>)
		uint8_t arg_pos = *str_pos++;
    b060:	f81a 5c01 	ldrb.w	r5, [sl, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
    b064:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
    b068:	4298      	cmp	r0, r3
    b06a:	d302      	bcc.n	b072 <cbprintf_package_convert+0x2ba>
    b06c:	4b3b      	ldr	r3, [pc, #236]	; (b15c <cbprintf_package_convert+0x3a4>)
    b06e:	4298      	cmp	r0, r3
    b070:	d31d      	bcc.n	b0ae <cbprintf_package_convert+0x2f6>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    b072:	68fb      	ldr	r3, [r7, #12]
    b074:	b123      	cbz	r3, b080 <cbprintf_package_convert+0x2c8>
    b076:	69f8      	ldr	r0, [r7, #28]
    b078:	f011 f947 	bl	1c30a <is_ptr>
    b07c:	2800      	cmp	r0, #0
    b07e:	d190      	bne.n	afa2 <cbprintf_package_convert+0x1ea>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    b080:	683b      	ldr	r3, [r7, #0]
    b082:	b9fb      	cbnz	r3, b0c4 <cbprintf_package_convert+0x30c>
				keep_str_pos[keep_cnt++] = arg_idx;
    b084:	f109 0328 	add.w	r3, r9, #40	; 0x28
    b088:	f107 0228 	add.w	r2, r7, #40	; 0x28
    b08c:	f109 0001 	add.w	r0, r9, #1
    b090:	eb03 0c02 	add.w	ip, r3, r2
				keep_str_pos[keep_cnt++] = arg_pos;
    b094:	f107 0350 	add.w	r3, r7, #80	; 0x50
    b098:	f109 0902 	add.w	r9, r9, #2
    b09c:	fa53 f080 	uxtab	r0, r3, r0
				keep_str_pos[keep_cnt++] = arg_idx;
    b0a0:	f80c 1c10 	strb.w	r1, [ip, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
    b0a4:	fa5f f989 	uxtb.w	r9, r9
    b0a8:	f800 5c10 	strb.w	r5, [r0, #-16]
	for (int i = 0; i < rws_nbr; i++) {
    b0ac:	e779      	b.n	afa2 <cbprintf_package_convert+0x1ea>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    b0ae:	68fb      	ldr	r3, [r7, #12]
    b0b0:	b12b      	cbz	r3, b0be <cbprintf_package_convert+0x306>
    b0b2:	69f8      	ldr	r0, [r7, #28]
    b0b4:	f011 f929 	bl	1c30a <is_ptr>
    b0b8:	2800      	cmp	r0, #0
    b0ba:	f47f af72 	bne.w	afa2 <cbprintf_package_convert+0x1ea>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    b0be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    b0c0:	07db      	lsls	r3, r3, #31
    b0c2:	d509      	bpl.n	b0d8 <cbprintf_package_convert+0x320>
				cpy_str_pos[scpy_cnt++] = arg_pos;
    b0c4:	f106 0328 	add.w	r3, r6, #40	; 0x28
    b0c8:	f107 0228 	add.w	r2, r7, #40	; 0x28
    b0cc:	1c71      	adds	r1, r6, #1
    b0ce:	189e      	adds	r6, r3, r2
    b0d0:	f806 5c20 	strb.w	r5, [r6, #-32]
    b0d4:	b2ce      	uxtb	r6, r1
    b0d6:	e764      	b.n	afa2 <cbprintf_package_convert+0x1ea>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    b0d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    b0da:	0758      	lsls	r0, r3, #29
    b0dc:	f57f af61 	bpl.w	afa2 <cbprintf_package_convert+0x1ea>
				keep_str_pos[keep_cnt++] = arg_pos;
    b0e0:	f109 0328 	add.w	r3, r9, #40	; 0x28
    b0e4:	f107 0228 	add.w	r2, r7, #40	; 0x28
    b0e8:	f109 0101 	add.w	r1, r9, #1
    b0ec:	eb03 0902 	add.w	r9, r3, r2
    b0f0:	f809 5c10 	strb.w	r5, [r9, #-16]
    b0f4:	fa5f f981 	uxtb.w	r9, r1
    b0f8:	e753      	b.n	afa2 <cbprintf_package_convert+0x1ea>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    b0fa:	2000      	movs	r0, #0
    b0fc:	e768      	b.n	afd0 <cbprintf_package_convert+0x218>
		uint8_t loc = cpy_str_pos[i];
    b0fe:	f81b 300a 	ldrb.w	r3, [fp, sl]
		const char *str = *(const char **)&buf32[loc];
    b102:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint8_t loc = cpy_str_pos[i];
    b106:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		uint16_t str_len = strl ? strl[i] : 0;
    b10a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    b10c:	b1fb      	cbz	r3, b14e <cbprintf_package_convert+0x396>
    b10e:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
    b112:	2101      	movs	r1, #1
    b114:	69ba      	ldr	r2, [r7, #24]
    b116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b118:	f107 002f 	add.w	r0, r7, #47	; 0x2f
    b11c:	4798      	blx	r3
		if (rv < 0) {
    b11e:	2800      	cmp	r0, #0
    b120:	db26      	blt.n	b170 <cbprintf_package_convert+0x3b8>
		out_len += rv;
    b122:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
    b124:	f1b8 0f00 	cmp.w	r8, #0
    b128:	d106      	bne.n	b138 <cbprintf_package_convert+0x380>
    b12a:	4648      	mov	r0, r9
    b12c:	f7fe f90e 	bl	934c <strlen>
    b130:	f100 0801 	add.w	r8, r0, #1
    b134:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
    b138:	4641      	mov	r1, r8
    b13a:	4648      	mov	r0, r9
    b13c:	69ba      	ldr	r2, [r7, #24]
    b13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b140:	4798      	blx	r3
		if (rv < 0) {
    b142:	2800      	cmp	r0, #0
    b144:	db14      	blt.n	b170 <cbprintf_package_convert+0x3b8>
		out_len += rv;
    b146:	4405      	add	r5, r0
	for (int i = 0; i < scpy_cnt; i++) {
    b148:	f10b 0b01 	add.w	fp, fp, #1
    b14c:	e772      	b.n	b034 <cbprintf_package_convert+0x27c>
		uint16_t str_len = strl ? strl[i] : 0;
    b14e:	f8d7 807c 	ldr.w	r8, [r7, #124]	; 0x7c
    b152:	e7de      	b.n	b112 <cbprintf_package_convert+0x35a>
    b154:	464d      	mov	r5, r9
    b156:	e659      	b.n	ae0c <cbprintf_package_convert+0x54>
    b158:	000222a4 	.word	0x000222a4
    b15c:	00026f44 	.word	0x00026f44
    b160:	0002386b 	.word	0x0002386b
    b164:	00023912 	.word	0x00023912
    b168:	01000005 	.word	0x01000005
    b16c:	00022830 	.word	0x00022830
    b170:	4605      	mov	r5, r0
    b172:	e64b      	b.n	ae0c <cbprintf_package_convert+0x54>

0000b174 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
    b174:	4b01      	ldr	r3, [pc, #4]	; (b17c <char_out+0x8>)
    b176:	681b      	ldr	r3, [r3, #0]
    b178:	4718      	bx	r3
    b17a:	bf00      	nop
    b17c:	200082dc 	.word	0x200082dc

0000b180 <__printk_hook_install>:
	_char_out = fn;
    b180:	4b01      	ldr	r3, [pc, #4]	; (b188 <__printk_hook_install+0x8>)
    b182:	6018      	str	r0, [r3, #0]
}
    b184:	4770      	bx	lr
    b186:	bf00      	nop
    b188:	200082dc 	.word	0x200082dc

0000b18c <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    b18c:	b507      	push	{r0, r1, r2, lr}
    b18e:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    b190:	2100      	movs	r1, #0
    b192:	4602      	mov	r2, r0
    b194:	9100      	str	r1, [sp, #0]
    b196:	4803      	ldr	r0, [pc, #12]	; (b1a4 <vprintk+0x18>)
    b198:	f000 f98c 	bl	b4b4 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    b19c:	b003      	add	sp, #12
    b19e:	f85d fb04 	ldr.w	pc, [sp], #4
    b1a2:	bf00      	nop
    b1a4:	0000b175 	.word	0x0000b175

0000b1a8 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    b1a8:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    b1aa:	2500      	movs	r5, #0
{
    b1ac:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
    b1ae:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
    b1b2:	4604      	mov	r4, r0
    b1b4:	9500      	str	r5, [sp, #0]
    b1b6:	a903      	add	r1, sp, #12
    b1b8:	4805      	ldr	r0, [pc, #20]	; (b1d0 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
    b1ba:	9505      	str	r5, [sp, #20]
    b1bc:	f000 f97a 	bl	b4b4 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
    b1c0:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
    b1c4:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    b1c6:	bfb8      	it	lt
    b1c8:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    b1ca:	b007      	add	sp, #28
    b1cc:	bd30      	pop	{r4, r5, pc}
    b1ce:	bf00      	nop
    b1d0:	0001c359 	.word	0x0001c359

0000b1d4 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    b1d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    b1d8:	8b05      	ldrh	r5, [r0, #24]
{
    b1da:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    b1dc:	0728      	lsls	r0, r5, #28
{
    b1de:	4690      	mov	r8, r2
	if (processing) {
    b1e0:	d411      	bmi.n	b206 <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    b1e2:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    b1e4:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    b1e8:	f040 80cd 	bne.w	b386 <process_event+0x1b2>
			evt = process_recheck(mgr);
    b1ec:	4620      	mov	r0, r4
    b1ee:	f011 faaf 	bl	1c750 <process_recheck>
		}

		if (evt == EVT_NOP) {
    b1f2:	b178      	cbz	r0, b214 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    b1f4:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    b1f6:	8b21      	ldrh	r1, [r4, #24]
    b1f8:	2804      	cmp	r0, #4
    b1fa:	d811      	bhi.n	b220 <process_event+0x4c>
    b1fc:	e8df f000 	tbb	[pc, r0]
    b200:	856d10c3 	.word	0x856d10c3
    b204:	95          	.byte	0x95
    b205:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
    b206:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    b208:	bf0c      	ite	eq
    b20a:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    b20e:	f045 0520 	orrne.w	r5, r5, #32
    b212:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    b214:	f388 8811 	msr	BASEPRI, r8
    b218:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    b21c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    b220:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    b224:	45aa      	cmp	sl, r5
    b226:	f000 80a6 	beq.w	b376 <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
    b22a:	2700      	movs	r7, #0
    b22c:	46b9      	mov	r9, r7
    b22e:	463e      	mov	r6, r7
    b230:	68a3      	ldr	r3, [r4, #8]
    b232:	2b00      	cmp	r3, #0
    b234:	f000 80bd 	beq.w	b3b2 <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    b238:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    b23c:	8321      	strh	r1, [r4, #24]
    b23e:	f388 8811 	msr	BASEPRI, r8
    b242:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    b246:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    b248:	2900      	cmp	r1, #0
    b24a:	f000 80bb 	beq.w	b3c4 <process_event+0x1f0>
	return node->next;
    b24e:	680d      	ldr	r5, [r1, #0]
    b250:	2900      	cmp	r1, #0
    b252:	f000 80b7 	beq.w	b3c4 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
    b256:	4633      	mov	r3, r6
    b258:	4652      	mov	r2, sl
    b25a:	4620      	mov	r0, r4
    b25c:	f8d1 8004 	ldr.w	r8, [r1, #4]
    b260:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    b262:	2d00      	cmp	r5, #0
    b264:	d076      	beq.n	b354 <process_event+0x180>
    b266:	682b      	ldr	r3, [r5, #0]
    b268:	4629      	mov	r1, r5
    b26a:	461d      	mov	r5, r3
    b26c:	e7f0      	b.n	b250 <process_event+0x7c>
    b26e:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    b272:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    b274:	2a01      	cmp	r2, #1
    b276:	d81b      	bhi.n	b2b0 <process_event+0xdc>
	list->head = NULL;
    b278:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    b27a:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    b27e:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    b280:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    b282:	b289      	uxth	r1, r1
	list->tail = NULL;
    b284:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    b288:	d109      	bne.n	b29e <process_event+0xca>
    b28a:	463b      	mov	r3, r7
    b28c:	e003      	b.n	b296 <process_event+0xc2>
				mgr->refs += 1U;
    b28e:	8b62      	ldrh	r2, [r4, #26]
    b290:	3201      	adds	r2, #1
    b292:	8362      	strh	r2, [r4, #26]
	return node->next;
    b294:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    b296:	2b00      	cmp	r3, #0
    b298:	d1f9      	bne.n	b28e <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    b29a:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
    b29e:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    b2a0:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    b2a2:	f011 fa55 	bl	1c750 <process_recheck>
    b2a6:	2800      	cmp	r0, #0
    b2a8:	d07b      	beq.n	b3a2 <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    b2aa:	f041 0120 	orr.w	r1, r1, #32
    b2ae:	e077      	b.n	b3a0 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
    b2b0:	2b04      	cmp	r3, #4
    b2b2:	d10a      	bne.n	b2ca <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    b2b4:	f021 0107 	bic.w	r1, r1, #7
    b2b8:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
    b2ba:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    b2bc:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    b2be:	f011 fa47 	bl	1c750 <process_recheck>
    b2c2:	b110      	cbz	r0, b2ca <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    b2c4:	f041 0120 	orr.w	r1, r1, #32
    b2c8:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    b2ca:	8b21      	ldrh	r1, [r4, #24]
    b2cc:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    b2d0:	45aa      	cmp	sl, r5
    b2d2:	d050      	beq.n	b376 <process_event+0x1a2>
    b2d4:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
    b2d6:	46b9      	mov	r9, r7
    b2d8:	e7aa      	b.n	b230 <process_event+0x5c>
			transit = mgr->transitions->start;
    b2da:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    b2dc:	f021 0107 	bic.w	r1, r1, #7
    b2e0:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    b2e4:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
    b2e6:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
    b2ea:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    b2ec:	d12d      	bne.n	b34a <process_event+0x176>
		    || (transit != NULL)) {
    b2ee:	f1b9 0f00 	cmp.w	r9, #0
    b2f2:	d040      	beq.n	b376 <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    b2f4:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    b2f8:	8321      	strh	r1, [r4, #24]
    b2fa:	f388 8811 	msr	BASEPRI, r8
    b2fe:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
    b302:	4620      	mov	r0, r4
    b304:	4939      	ldr	r1, [pc, #228]	; (b3ec <process_event+0x218>)
    b306:	47c8      	blx	r9
    b308:	e029      	b.n	b35e <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    b30a:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
    b30e:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    b310:	f041 0104 	orr.w	r1, r1, #4
    b314:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    b316:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
    b318:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
    b31c:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    b31e:	d0e6      	beq.n	b2ee <process_event+0x11a>
    b320:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    b322:	f04f 0a04 	mov.w	sl, #4
		res = 0;
    b326:	463e      	mov	r6, r7
    b328:	e782      	b.n	b230 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    b32a:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
    b32e:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    b330:	f041 0105 	orr.w	r1, r1, #5
    b334:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    b336:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
    b338:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
    b33c:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    b33e:	d0d6      	beq.n	b2ee <process_event+0x11a>
    b340:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    b342:	f04f 0a05 	mov.w	sl, #5
		res = 0;
    b346:	463e      	mov	r6, r7
    b348:	e772      	b.n	b230 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
    b34a:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    b34c:	f04f 0a06 	mov.w	sl, #6
		res = 0;
    b350:	463e      	mov	r6, r7
    b352:	e76d      	b.n	b230 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    b354:	462b      	mov	r3, r5
    b356:	e787      	b.n	b268 <process_event+0x94>
			if (transit != NULL) {
    b358:	f1b9 0f00 	cmp.w	r9, #0
    b35c:	d1d1      	bne.n	b302 <process_event+0x12e>
	__asm__ volatile(
    b35e:	f04f 0320 	mov.w	r3, #32
    b362:	f3ef 8811 	mrs	r8, BASEPRI
    b366:	f383 8812 	msr	BASEPRI_MAX, r3
    b36a:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    b36e:	8b23      	ldrh	r3, [r4, #24]
    b370:	f023 0308 	bic.w	r3, r3, #8
    b374:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    b376:	8b25      	ldrh	r5, [r4, #24]
    b378:	06ea      	lsls	r2, r5, #27
    b37a:	d52e      	bpl.n	b3da <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    b37c:	f025 0310 	bic.w	r3, r5, #16
    b380:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    b382:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
    b386:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    b388:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    b38a:	2e00      	cmp	r6, #0
    b38c:	f6bf af6f 	bge.w	b26e <process_event+0x9a>
	list->head = NULL;
    b390:	2300      	movs	r3, #0
		*clients = mgr->clients;
    b392:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    b394:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    b398:	f021 0107 	bic.w	r1, r1, #7
    b39c:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
    b3a0:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    b3a2:	8b21      	ldrh	r1, [r4, #24]
    b3a4:	f04f 0900 	mov.w	r9, #0
    b3a8:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    b3ac:	45aa      	cmp	sl, r5
    b3ae:	f47f af3f 	bne.w	b230 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
    b3b2:	2f00      	cmp	r7, #0
    b3b4:	d09b      	beq.n	b2ee <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    b3b6:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    b3ba:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
    b3bc:	f388 8811 	msr	BASEPRI, r8
    b3c0:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
    b3c4:	2f00      	cmp	r7, #0
    b3c6:	d0c7      	beq.n	b358 <process_event+0x184>
	return node->next;
    b3c8:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
    b3ca:	4639      	mov	r1, r7
    b3cc:	4633      	mov	r3, r6
    b3ce:	4652      	mov	r2, sl
    b3d0:	4620      	mov	r0, r4
    b3d2:	f011 f9e9 	bl	1c7a8 <notify_one>
	list->head = node;
    b3d6:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
    b3d8:	e7f4      	b.n	b3c4 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    b3da:	06ab      	lsls	r3, r5, #26
    b3dc:	f57f af1a 	bpl.w	b214 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    b3e0:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    b3e4:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    b3e6:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    b3ea:	e6ff      	b.n	b1ec <process_event+0x18>
    b3ec:	0001c7d5 	.word	0x0001c7d5

0000b3f0 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    b3f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    b3f2:	4602      	mov	r2, r0
    b3f4:	6801      	ldr	r1, [r0, #0]
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
		val = 10U * val + *sp++ - '0';
    b3f6:	270a      	movs	r7, #10
	size_t val = 0;
    b3f8:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    b3fa:	4e07      	ldr	r6, [pc, #28]	; (b418 <extract_decimal+0x28>)
    b3fc:	460b      	mov	r3, r1
    b3fe:	781c      	ldrb	r4, [r3, #0]
    b400:	3101      	adds	r1, #1
    b402:	5d35      	ldrb	r5, [r6, r4]
    b404:	076d      	lsls	r5, r5, #29
    b406:	d401      	bmi.n	b40c <extract_decimal+0x1c>
	}
	*str = sp;
    b408:	6013      	str	r3, [r2, #0]
	return val;
}
    b40a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    b40c:	fb07 4300 	mla	r3, r7, r0, r4
    b410:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    b414:	e7f2      	b.n	b3fc <extract_decimal+0xc>
    b416:	bf00      	nop
    b418:	00026ca3 	.word	0x00026ca3

0000b41c <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    b41c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b420:	4615      	mov	r5, r2
    b422:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    b424:	78d3      	ldrb	r3, [r2, #3]
    b426:	4a22      	ldr	r2, [pc, #136]	; (b4b0 <encode_uint+0x94>)
	switch (specifier) {
    b428:	2b6f      	cmp	r3, #111	; 0x6f
    b42a:	f812 b003 	ldrb.w	fp, [r2, r3]
{
    b42e:	4680      	mov	r8, r0
    b430:	460f      	mov	r7, r1
    b432:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    b436:	d029      	beq.n	b48c <encode_uint+0x70>
    b438:	d824      	bhi.n	b484 <encode_uint+0x68>
		return 10;
    b43a:	2b58      	cmp	r3, #88	; 0x58
    b43c:	bf0c      	ite	eq
    b43e:	2610      	moveq	r6, #16
    b440:	260a      	movne	r6, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    b442:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
    b446:	4632      	mov	r2, r6
    b448:	2300      	movs	r3, #0
    b44a:	4640      	mov	r0, r8
    b44c:	4639      	mov	r1, r7
    b44e:	f7fd fd45 	bl	8edc <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
    b452:	2a09      	cmp	r2, #9
    b454:	b2d4      	uxtb	r4, r2
    b456:	d81e      	bhi.n	b496 <encode_uint+0x7a>
    b458:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
    b45a:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    b45c:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    b45e:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    b462:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    b466:	d301      	bcc.n	b46c <encode_uint+0x50>
    b468:	45d1      	cmp	r9, sl
    b46a:	d811      	bhi.n	b490 <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    b46c:	782b      	ldrb	r3, [r5, #0]
    b46e:	069b      	lsls	r3, r3, #26
    b470:	d505      	bpl.n	b47e <encode_uint+0x62>
		if (radix == 8) {
    b472:	2e08      	cmp	r6, #8
    b474:	d115      	bne.n	b4a2 <encode_uint+0x86>
			conv->altform_0 = true;
    b476:	78ab      	ldrb	r3, [r5, #2]
    b478:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
    b47c:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
    b47e:	4648      	mov	r0, r9
    b480:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    b484:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    b488:	2b70      	cmp	r3, #112	; 0x70
    b48a:	e7d7      	b.n	b43c <encode_uint+0x20>
	switch (specifier) {
    b48c:	2608      	movs	r6, #8
    b48e:	e7d8      	b.n	b442 <encode_uint+0x26>
		value /= radix;
    b490:	4680      	mov	r8, r0
    b492:	460f      	mov	r7, r1
    b494:	e7d7      	b.n	b446 <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    b496:	f1bb 0f01 	cmp.w	fp, #1
    b49a:	bf0c      	ite	eq
    b49c:	3437      	addeq	r4, #55	; 0x37
    b49e:	3457      	addne	r4, #87	; 0x57
    b4a0:	e7db      	b.n	b45a <encode_uint+0x3e>
		} else if (radix == 16) {
    b4a2:	2e10      	cmp	r6, #16
    b4a4:	d1eb      	bne.n	b47e <encode_uint+0x62>
			conv->altform_0c = true;
    b4a6:	78ab      	ldrb	r3, [r5, #2]
    b4a8:	f043 0310 	orr.w	r3, r3, #16
    b4ac:	e7e6      	b.n	b47c <encode_uint+0x60>
    b4ae:	bf00      	nop
    b4b0:	00026ca3 	.word	0x00026ca3

0000b4b4 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    b4b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b4b8:	4682      	mov	sl, r0
    b4ba:	4617      	mov	r7, r2
    b4bc:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    b4be:	2500      	movs	r5, #0
{
    b4c0:	b097      	sub	sp, #92	; 0x5c
    b4c2:	9103      	str	r1, [sp, #12]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    b4c4:	7838      	ldrb	r0, [r7, #0]
    b4c6:	b908      	cbnz	r0, b4cc <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
    b4c8:	4628      	mov	r0, r5
    b4ca:	e349      	b.n	bb60 <z_cbvprintf_impl+0x6ac>
			OUTC(*fp++);
    b4cc:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
    b4ce:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    b4d0:	9304      	str	r3, [sp, #16]
		if (*fp != '%') {
    b4d2:	d006      	beq.n	b4e2 <z_cbvprintf_impl+0x2e>
			OUTC('%');
    b4d4:	9903      	ldr	r1, [sp, #12]
    b4d6:	47d0      	blx	sl
    b4d8:	2800      	cmp	r0, #0
    b4da:	f2c0 8341 	blt.w	bb60 <z_cbvprintf_impl+0x6ac>
    b4de:	3501      	adds	r5, #1
		if (bps == NULL) {
    b4e0:	e1f0      	b.n	b8c4 <z_cbvprintf_impl+0x410>
		} state = {
    b4e2:	2218      	movs	r2, #24
    b4e4:	2100      	movs	r1, #0
    b4e6:	a810      	add	r0, sp, #64	; 0x40
    b4e8:	f016 fade 	bl	21aa8 <memset>
	if (*sp == '%') {
    b4ec:	787b      	ldrb	r3, [r7, #1]
    b4ee:	2b25      	cmp	r3, #37	; 0x25
    b4f0:	f000 80a3 	beq.w	b63a <z_cbvprintf_impl+0x186>
    b4f4:	2300      	movs	r3, #0
    b4f6:	4698      	mov	r8, r3
    b4f8:	469e      	mov	lr, r3
    b4fa:	469c      	mov	ip, r3
    b4fc:	4618      	mov	r0, r3
    b4fe:	1c79      	adds	r1, r7, #1
    b500:	460e      	mov	r6, r1
		switch (*sp) {
    b502:	f811 2b01 	ldrb.w	r2, [r1], #1
    b506:	2a2b      	cmp	r2, #43	; 0x2b
    b508:	f000 80c6 	beq.w	b698 <z_cbvprintf_impl+0x1e4>
    b50c:	f200 80bd 	bhi.w	b68a <z_cbvprintf_impl+0x1d6>
    b510:	2a20      	cmp	r2, #32
    b512:	f000 80c4 	beq.w	b69e <z_cbvprintf_impl+0x1ea>
    b516:	2a23      	cmp	r2, #35	; 0x23
    b518:	f000 80c4 	beq.w	b6a4 <z_cbvprintf_impl+0x1f0>
    b51c:	b12b      	cbz	r3, b52a <z_cbvprintf_impl+0x76>
    b51e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    b522:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b526:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    b52a:	f1b8 0f00 	cmp.w	r8, #0
    b52e:	d005      	beq.n	b53c <z_cbvprintf_impl+0x88>
    b530:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    b534:	f043 0320 	orr.w	r3, r3, #32
    b538:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    b53c:	f1be 0f00 	cmp.w	lr, #0
    b540:	d005      	beq.n	b54e <z_cbvprintf_impl+0x9a>
    b542:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    b546:	f043 0310 	orr.w	r3, r3, #16
    b54a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    b54e:	f1bc 0f00 	cmp.w	ip, #0
    b552:	d005      	beq.n	b560 <z_cbvprintf_impl+0xac>
    b554:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    b558:	f043 0308 	orr.w	r3, r3, #8
    b55c:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    b560:	b128      	cbz	r0, b56e <z_cbvprintf_impl+0xba>
    b562:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    b566:	f043 0304 	orr.w	r3, r3, #4
    b56a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
    b56e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    b572:	f003 0144 	and.w	r1, r3, #68	; 0x44
    b576:	2944      	cmp	r1, #68	; 0x44
    b578:	d103      	bne.n	b582 <z_cbvprintf_impl+0xce>
		conv->flag_zero = false;
    b57a:	f36f 1386 	bfc	r3, #6, #1
    b57e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
    b582:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    b586:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    b588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b58c:	9609      	str	r6, [sp, #36]	; 0x24
    b58e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    b592:	f040 808c 	bne.w	b6ae <z_cbvprintf_impl+0x1fa>
		conv->width_star = true;
    b596:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    b59a:	f043 0301 	orr.w	r3, r3, #1
    b59e:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		return ++sp;
    b5a2:	1c73      	adds	r3, r6, #1
	conv->prec_present = (*sp == '.');
    b5a4:	781a      	ldrb	r2, [r3, #0]
    b5a6:	2a2e      	cmp	r2, #46	; 0x2e
    b5a8:	bf0c      	ite	eq
    b5aa:	2101      	moveq	r1, #1
    b5ac:	2100      	movne	r1, #0
    b5ae:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    b5b2:	f361 0241 	bfi	r2, r1, #1, #1
    b5b6:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
    b5ba:	d10c      	bne.n	b5d6 <z_cbvprintf_impl+0x122>
	++sp;
    b5bc:	1c5a      	adds	r2, r3, #1
    b5be:	9209      	str	r2, [sp, #36]	; 0x24
	if (*sp == '*') {
    b5c0:	785a      	ldrb	r2, [r3, #1]
    b5c2:	2a2a      	cmp	r2, #42	; 0x2a
    b5c4:	f040 8083 	bne.w	b6ce <z_cbvprintf_impl+0x21a>
		conv->prec_star = true;
    b5c8:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
		return ++sp;
    b5cc:	3302      	adds	r3, #2
		conv->prec_star = true;
    b5ce:	f042 0204 	orr.w	r2, r2, #4
    b5d2:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	switch (*sp) {
    b5d6:	781a      	ldrb	r2, [r3, #0]
    b5d8:	2a6c      	cmp	r2, #108	; 0x6c
    b5da:	f000 80a4 	beq.w	b726 <z_cbvprintf_impl+0x272>
    b5de:	f200 8086 	bhi.w	b6ee <z_cbvprintf_impl+0x23a>
    b5e2:	2a68      	cmp	r2, #104	; 0x68
    b5e4:	f000 808c 	beq.w	b700 <z_cbvprintf_impl+0x24c>
    b5e8:	2a6a      	cmp	r2, #106	; 0x6a
    b5ea:	f000 80a5 	beq.w	b738 <z_cbvprintf_impl+0x284>
    b5ee:	2a4c      	cmp	r2, #76	; 0x4c
    b5f0:	f000 80aa 	beq.w	b748 <z_cbvprintf_impl+0x294>
	conv->specifier = *sp++;
    b5f4:	461a      	mov	r2, r3
    b5f6:	f812 3b01 	ldrb.w	r3, [r2], #1
	switch (conv->specifier) {
    b5fa:	2b78      	cmp	r3, #120	; 0x78
	conv->specifier = *sp++;
    b5fc:	9204      	str	r2, [sp, #16]
    b5fe:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->length_mod == LENGTH_UPPER_L) {
    b602:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
	switch (conv->specifier) {
    b606:	f200 8117 	bhi.w	b838 <z_cbvprintf_impl+0x384>
    b60a:	2b6d      	cmp	r3, #109	; 0x6d
    b60c:	f200 80a9 	bhi.w	b762 <z_cbvprintf_impl+0x2ae>
    b610:	2b69      	cmp	r3, #105	; 0x69
    b612:	f200 8111 	bhi.w	b838 <z_cbvprintf_impl+0x384>
    b616:	2b57      	cmp	r3, #87	; 0x57
    b618:	f200 80be 	bhi.w	b798 <z_cbvprintf_impl+0x2e4>
    b61c:	2b41      	cmp	r3, #65	; 0x41
    b61e:	d003      	beq.n	b628 <z_cbvprintf_impl+0x174>
    b620:	3b45      	subs	r3, #69	; 0x45
    b622:	2b02      	cmp	r3, #2
    b624:	f200 8108 	bhi.w	b838 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_FP;
    b628:	2204      	movs	r2, #4
    b62a:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    b62e:	f362 0302 	bfi	r3, r2, #0, #3
    b632:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			unsupported = true;
    b636:	2301      	movs	r3, #1
			break;
    b638:	e0ca      	b.n	b7d0 <z_cbvprintf_impl+0x31c>
		conv->specifier = *sp++;
    b63a:	1cba      	adds	r2, r7, #2
    b63c:	9204      	str	r2, [sp, #16]
    b63e:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
    b642:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    b646:	07da      	lsls	r2, r3, #31
    b648:	f140 80fd 	bpl.w	b846 <z_cbvprintf_impl+0x392>
			width = va_arg(ap, int);
    b64c:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    b650:	f1b9 0f00 	cmp.w	r9, #0
    b654:	da07      	bge.n	b666 <z_cbvprintf_impl+0x1b2>
				conv->flag_dash = true;
    b656:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				width = -width;
    b65a:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
    b65e:	f042 0204 	orr.w	r2, r2, #4
    b662:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
		if (conv->prec_star) {
    b666:	075e      	lsls	r6, r3, #29
    b668:	f140 80f6 	bpl.w	b858 <z_cbvprintf_impl+0x3a4>
			int arg = va_arg(ap, int);
    b66c:	f854 bb04 	ldr.w	fp, [r4], #4
			if (arg < 0) {
    b670:	f1bb 0f00 	cmp.w	fp, #0
    b674:	f280 80f5 	bge.w	b862 <z_cbvprintf_impl+0x3ae>
				conv->prec_present = false;
    b678:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    b67c:	f36f 0341 	bfc	r3, #1, #1
    b680:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
    b684:	f04f 3bff 	mov.w	fp, #4294967295
    b688:	e0eb      	b.n	b862 <z_cbvprintf_impl+0x3ae>
		switch (*sp) {
    b68a:	2a2d      	cmp	r2, #45	; 0x2d
    b68c:	d00d      	beq.n	b6aa <z_cbvprintf_impl+0x1f6>
    b68e:	2a30      	cmp	r2, #48	; 0x30
    b690:	f47f af44 	bne.w	b51c <z_cbvprintf_impl+0x68>
    b694:	2301      	movs	r3, #1
	} while (loop);
    b696:	e733      	b.n	b500 <z_cbvprintf_impl+0x4c>
		switch (*sp) {
    b698:	f04f 0c01 	mov.w	ip, #1
    b69c:	e730      	b.n	b500 <z_cbvprintf_impl+0x4c>
    b69e:	f04f 0e01 	mov.w	lr, #1
    b6a2:	e72d      	b.n	b500 <z_cbvprintf_impl+0x4c>
    b6a4:	f04f 0801 	mov.w	r8, #1
    b6a8:	e72a      	b.n	b500 <z_cbvprintf_impl+0x4c>
    b6aa:	2001      	movs	r0, #1
    b6ac:	e728      	b.n	b500 <z_cbvprintf_impl+0x4c>
	size_t width = extract_decimal(&sp);
    b6ae:	a809      	add	r0, sp, #36	; 0x24
    b6b0:	f7ff fe9e 	bl	b3f0 <extract_decimal>
	if (sp != wp) {
    b6b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b6b6:	42b3      	cmp	r3, r6
    b6b8:	f43f af74 	beq.w	b5a4 <z_cbvprintf_impl+0xf0>
		conv->unsupported |= ((conv->width_value < 0)
    b6bc:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
		conv->width_value = width;
    b6c0:	9013      	str	r0, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
    b6c2:	0fc0      	lsrs	r0, r0, #31
		conv->unsupported |= ((conv->width_value < 0)
    b6c4:	f360 0241 	bfi	r2, r0, #1, #1
    b6c8:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
    b6cc:	e76a      	b.n	b5a4 <z_cbvprintf_impl+0xf0>
	size_t prec = extract_decimal(&sp);
    b6ce:	a809      	add	r0, sp, #36	; 0x24
    b6d0:	f7ff fe8e 	bl	b3f0 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    b6d4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	conv->prec_value = prec;
    b6d8:	9014      	str	r0, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
    b6da:	f3c3 0240 	ubfx	r2, r3, #1, #1
    b6de:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
    b6e2:	f362 0341 	bfi	r3, r2, #1, #1
    b6e6:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	return sp;
    b6ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b6ec:	e773      	b.n	b5d6 <z_cbvprintf_impl+0x122>
	switch (*sp) {
    b6ee:	2a74      	cmp	r2, #116	; 0x74
    b6f0:	d026      	beq.n	b740 <z_cbvprintf_impl+0x28c>
    b6f2:	2a7a      	cmp	r2, #122	; 0x7a
    b6f4:	f47f af7e 	bne.w	b5f4 <z_cbvprintf_impl+0x140>
		conv->length_mod = LENGTH_Z;
    b6f8:	2106      	movs	r1, #6
    b6fa:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    b6fe:	e00c      	b.n	b71a <z_cbvprintf_impl+0x266>
		if (*++sp == 'h') {
    b700:	785a      	ldrb	r2, [r3, #1]
    b702:	2a68      	cmp	r2, #104	; 0x68
    b704:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    b708:	d106      	bne.n	b718 <z_cbvprintf_impl+0x264>
			conv->length_mod = LENGTH_HH;
    b70a:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    b70c:	f361 02c6 	bfi	r2, r1, #3, #4
    b710:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
    b714:	3302      	adds	r3, #2
    b716:	e76d      	b.n	b5f4 <z_cbvprintf_impl+0x140>
			conv->length_mod = LENGTH_H;
    b718:	2102      	movs	r1, #2
    b71a:	f361 02c6 	bfi	r2, r1, #3, #4
    b71e:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
    b722:	3301      	adds	r3, #1
    b724:	e766      	b.n	b5f4 <z_cbvprintf_impl+0x140>
		if (*++sp == 'l') {
    b726:	785a      	ldrb	r2, [r3, #1]
    b728:	2a6c      	cmp	r2, #108	; 0x6c
    b72a:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    b72e:	d101      	bne.n	b734 <z_cbvprintf_impl+0x280>
			conv->length_mod = LENGTH_LL;
    b730:	2104      	movs	r1, #4
    b732:	e7eb      	b.n	b70c <z_cbvprintf_impl+0x258>
			conv->length_mod = LENGTH_L;
    b734:	2103      	movs	r1, #3
    b736:	e7f0      	b.n	b71a <z_cbvprintf_impl+0x266>
		conv->length_mod = LENGTH_J;
    b738:	2105      	movs	r1, #5
    b73a:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    b73e:	e7ec      	b.n	b71a <z_cbvprintf_impl+0x266>
		conv->length_mod = LENGTH_T;
    b740:	2107      	movs	r1, #7
    b742:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    b746:	e7e8      	b.n	b71a <z_cbvprintf_impl+0x266>
		conv->unsupported = true;
    b748:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
    b74c:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    b750:	f022 0202 	bic.w	r2, r2, #2
    b754:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    b758:	f042 0202 	orr.w	r2, r2, #2
    b75c:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
    b760:	e7df      	b.n	b722 <z_cbvprintf_impl+0x26e>
	switch (conv->specifier) {
    b762:	3b6e      	subs	r3, #110	; 0x6e
    b764:	b2d9      	uxtb	r1, r3
    b766:	2301      	movs	r3, #1
    b768:	408b      	lsls	r3, r1
    b76a:	f240 4182 	movw	r1, #1154	; 0x482
    b76e:	420b      	tst	r3, r1
    b770:	d138      	bne.n	b7e4 <z_cbvprintf_impl+0x330>
    b772:	f013 0f24 	tst.w	r3, #36	; 0x24
    b776:	d152      	bne.n	b81e <z_cbvprintf_impl+0x36a>
    b778:	07d8      	lsls	r0, r3, #31
    b77a:	d55d      	bpl.n	b838 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_PTR;
    b77c:	2103      	movs	r1, #3
    b77e:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    b782:	f361 0302 	bfi	r3, r1, #0, #3
    b786:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    b78a:	f002 0378 	and.w	r3, r2, #120	; 0x78
    b78e:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
    b792:	424b      	negs	r3, r1
    b794:	414b      	adcs	r3, r1
    b796:	e01b      	b.n	b7d0 <z_cbvprintf_impl+0x31c>
    b798:	2001      	movs	r0, #1
	switch (conv->specifier) {
    b79a:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    b79e:	b2c9      	uxtb	r1, r1
    b7a0:	fa00 f101 	lsl.w	r1, r0, r1
    b7a4:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    b7a8:	f47f af3e 	bne.w	b628 <z_cbvprintf_impl+0x174>
    b7ac:	f640 0601 	movw	r6, #2049	; 0x801
    b7b0:	4231      	tst	r1, r6
    b7b2:	d11d      	bne.n	b7f0 <z_cbvprintf_impl+0x33c>
    b7b4:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    b7b8:	d03e      	beq.n	b838 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_SINT;
    b7ba:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    b7be:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    b7c2:	f002 0278 	and.w	r2, r2, #120	; 0x78
    b7c6:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    b7c8:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    b7cc:	d034      	beq.n	b838 <z_cbvprintf_impl+0x384>
	bool unsupported = false;
    b7ce:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    b7d0:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    b7d4:	f3c2 0140 	ubfx	r1, r2, #1, #1
    b7d8:	430b      	orrs	r3, r1
    b7da:	f363 0241 	bfi	r2, r3, #1, #1
    b7de:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
    b7e2:	e72e      	b.n	b642 <z_cbvprintf_impl+0x18e>
		conv->specifier_cat = SPECIFIER_UINT;
    b7e4:	2102      	movs	r1, #2
    b7e6:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    b7ea:	f361 0302 	bfi	r3, r1, #0, #3
    b7ee:	e7e8      	b.n	b7c2 <z_cbvprintf_impl+0x30e>
    b7f0:	2002      	movs	r0, #2
    b7f2:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    b7f6:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    b7fa:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    b7fe:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    b800:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
    b804:	bf02      	ittt	eq
    b806:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
    b80a:	f041 0101 	orreq.w	r1, r1, #1
    b80e:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
    b812:	2b63      	cmp	r3, #99	; 0x63
    b814:	d1db      	bne.n	b7ce <z_cbvprintf_impl+0x31a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    b816:	1e13      	subs	r3, r2, #0
    b818:	bf18      	it	ne
    b81a:	2301      	movne	r3, #1
    b81c:	e7d8      	b.n	b7d0 <z_cbvprintf_impl+0x31c>
		conv->specifier_cat = SPECIFIER_PTR;
    b81e:	2103      	movs	r1, #3
    b820:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    b824:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    b828:	f361 0302 	bfi	r3, r1, #0, #3
    b82c:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    b830:	bf14      	ite	ne
    b832:	2301      	movne	r3, #1
    b834:	2300      	moveq	r3, #0
    b836:	e7cb      	b.n	b7d0 <z_cbvprintf_impl+0x31c>
		conv->invalid = true;
    b838:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    b83c:	f043 0301 	orr.w	r3, r3, #1
    b840:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
    b844:	e7c3      	b.n	b7ce <z_cbvprintf_impl+0x31a>
		} else if (conv->width_present) {
    b846:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
    b84a:	2a00      	cmp	r2, #0
		int width = -1;
    b84c:	bfac      	ite	ge
    b84e:	f04f 39ff 	movge.w	r9, #4294967295
			width = conv->width_value;
    b852:	f8dd 904c 	ldrlt.w	r9, [sp, #76]	; 0x4c
    b856:	e706      	b.n	b666 <z_cbvprintf_impl+0x1b2>
		} else if (conv->prec_present) {
    b858:	0798      	lsls	r0, r3, #30
    b85a:	f57f af13 	bpl.w	b684 <z_cbvprintf_impl+0x1d0>
			precision = conv->prec_value;
    b85e:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
		conv->pad0_value = 0;
    b862:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    b864:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
			= (enum specifier_cat_enum)conv->specifier_cat;
    b868:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			= (enum length_mod_enum)conv->length_mod;
    b86c:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		enum specifier_cat_enum specifier_cat
    b870:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    b874:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    b876:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    b87a:	d133      	bne.n	b8e4 <z_cbvprintf_impl+0x430>
			switch (length_mod) {
    b87c:	1ecb      	subs	r3, r1, #3
    b87e:	2b04      	cmp	r3, #4
    b880:	d804      	bhi.n	b88c <z_cbvprintf_impl+0x3d8>
    b882:	e8df f003 	tbb	[pc, r3]
    b886:	4621      	.short	0x4621
    b888:	2146      	.short	0x2146
    b88a:	21          	.byte	0x21
    b88b:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    b88c:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    b88e:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    b890:	ea4f 72e3 	mov.w	r2, r3, asr #31
    b894:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    b898:	d11c      	bne.n	b8d4 <z_cbvprintf_impl+0x420>
				value->sint = (signed char)value->sint;
    b89a:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
    b89e:	17da      	asrs	r2, r3, #31
    b8a0:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
    b8a4:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    b8a6:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    b8aa:	f013 0603 	ands.w	r6, r3, #3
    b8ae:	d050      	beq.n	b952 <z_cbvprintf_impl+0x49e>
			OUTS(sp, fp);
    b8b0:	463a      	mov	r2, r7
    b8b2:	4650      	mov	r0, sl
    b8b4:	9b04      	ldr	r3, [sp, #16]
    b8b6:	9903      	ldr	r1, [sp, #12]
    b8b8:	f011 f832 	bl	1c920 <outs>
    b8bc:	2800      	cmp	r0, #0
    b8be:	f2c0 814f 	blt.w	bb60 <z_cbvprintf_impl+0x6ac>
    b8c2:	4405      	add	r5, r0
			continue;
    b8c4:	9f04      	ldr	r7, [sp, #16]
    b8c6:	e5fd      	b.n	b4c4 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    b8c8:	f854 3b04 	ldr.w	r3, [r4], #4
    b8cc:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    b8ce:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
    b8d2:	e7e8      	b.n	b8a6 <z_cbvprintf_impl+0x3f2>
			} else if (length_mod == LENGTH_H) {
    b8d4:	2902      	cmp	r1, #2
    b8d6:	d1e5      	bne.n	b8a4 <z_cbvprintf_impl+0x3f0>
				value->sint = (short)value->sint;
    b8d8:	b21a      	sxth	r2, r3
    b8da:	f343 33c0 	sbfx	r3, r3, #15, #1
    b8de:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    b8e2:	e7df      	b.n	b8a4 <z_cbvprintf_impl+0x3f0>
		} else if (specifier_cat == SPECIFIER_UINT) {
    b8e4:	2b02      	cmp	r3, #2
    b8e6:	d124      	bne.n	b932 <z_cbvprintf_impl+0x47e>
			switch (length_mod) {
    b8e8:	1ecb      	subs	r3, r1, #3
    b8ea:	2b04      	cmp	r3, #4
    b8ec:	d804      	bhi.n	b8f8 <z_cbvprintf_impl+0x444>
    b8ee:	e8df f003 	tbb	[pc, r3]
    b8f2:	1018      	.short	0x1018
    b8f4:	1810      	.short	0x1810
    b8f6:	18          	.byte	0x18
    b8f7:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    b8f8:	2901      	cmp	r1, #1
    b8fa:	f04f 0200 	mov.w	r2, #0
				value->uint = va_arg(ap, unsigned int);
    b8fe:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    b902:	d014      	beq.n	b92e <z_cbvprintf_impl+0x47a>
			} else if (length_mod == LENGTH_H) {
    b904:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    b906:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
    b90a:	d1cc      	bne.n	b8a6 <z_cbvprintf_impl+0x3f2>
				value->uint = (unsigned short)value->uint;
    b90c:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    b90e:	9310      	str	r3, [sp, #64]	; 0x40
    b910:	e7c9      	b.n	b8a6 <z_cbvprintf_impl+0x3f2>
					(uint_value_type)va_arg(ap,
    b912:	3407      	adds	r4, #7
    b914:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    b918:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    b91c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    b920:	e7c1      	b.n	b8a6 <z_cbvprintf_impl+0x3f2>
					(uint_value_type)va_arg(ap, size_t);
    b922:	f854 3b04 	ldr.w	r3, [r4], #4
    b926:	9310      	str	r3, [sp, #64]	; 0x40
    b928:	2300      	movs	r3, #0
    b92a:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
    b92c:	e7bb      	b.n	b8a6 <z_cbvprintf_impl+0x3f2>
				value->uint = (unsigned char)value->uint;
    b92e:	b2db      	uxtb	r3, r3
    b930:	e7cd      	b.n	b8ce <z_cbvprintf_impl+0x41a>
		} else if (specifier_cat == SPECIFIER_FP) {
    b932:	2b04      	cmp	r3, #4
    b934:	d108      	bne.n	b948 <z_cbvprintf_impl+0x494>
					(sint_value_type)va_arg(ap, long long);
    b936:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    b938:	f024 0407 	bic.w	r4, r4, #7
    b93c:	e9d4 2300 	ldrd	r2, r3, [r4]
    b940:	3408      	adds	r4, #8
    b942:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    b946:	e7ae      	b.n	b8a6 <z_cbvprintf_impl+0x3f2>
		} else if (specifier_cat == SPECIFIER_PTR) {
    b948:	2b03      	cmp	r3, #3
    b94a:	d1ac      	bne.n	b8a6 <z_cbvprintf_impl+0x3f2>
			value->ptr = va_arg(ap, void *);
    b94c:	f854 3b04 	ldr.w	r3, [r4], #4
    b950:	e7dd      	b.n	b90e <z_cbvprintf_impl+0x45a>
		switch (conv->specifier) {
    b952:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    b956:	2878      	cmp	r0, #120	; 0x78
    b958:	d8b4      	bhi.n	b8c4 <z_cbvprintf_impl+0x410>
    b95a:	2862      	cmp	r0, #98	; 0x62
    b95c:	d81c      	bhi.n	b998 <z_cbvprintf_impl+0x4e4>
    b95e:	2825      	cmp	r0, #37	; 0x25
    b960:	f43f adb8 	beq.w	b4d4 <z_cbvprintf_impl+0x20>
    b964:	2858      	cmp	r0, #88	; 0x58
    b966:	d1ad      	bne.n	b8c4 <z_cbvprintf_impl+0x410>
			bps = encode_uint(value->uint, conv, buf, bpe);
    b968:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    b96c:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    b970:	9300      	str	r3, [sp, #0]
    b972:	aa12      	add	r2, sp, #72	; 0x48
    b974:	ab0a      	add	r3, sp, #40	; 0x28
    b976:	f7ff fd51 	bl	b41c <encode_uint>
			if (precision >= 0) {
    b97a:	f1bb 0f00 	cmp.w	fp, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    b97e:	4607      	mov	r7, r0
			if (precision >= 0) {
    b980:	f280 8097 	bge.w	bab2 <z_cbvprintf_impl+0x5fe>
		if (bps == NULL) {
    b984:	2f00      	cmp	r7, #0
    b986:	d09d      	beq.n	b8c4 <z_cbvprintf_impl+0x410>
		size_t nj_len = (bpe - bps);
    b988:	f10d 083e 	add.w	r8, sp, #62	; 0x3e
    b98c:	eba8 0007 	sub.w	r0, r8, r7
		if (sign != 0) {
    b990:	2e00      	cmp	r6, #0
    b992:	d04e      	beq.n	ba32 <z_cbvprintf_impl+0x57e>
			nj_len += 1U;
    b994:	3001      	adds	r0, #1
    b996:	e04c      	b.n	ba32 <z_cbvprintf_impl+0x57e>
		switch (conv->specifier) {
    b998:	3863      	subs	r0, #99	; 0x63
    b99a:	2815      	cmp	r0, #21
    b99c:	d892      	bhi.n	b8c4 <z_cbvprintf_impl+0x410>
    b99e:	a201      	add	r2, pc, #4	; (adr r2, b9a4 <z_cbvprintf_impl+0x4f0>)
    b9a0:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    b9a4:	0000ba23 	.word	0x0000ba23
    b9a8:	0000ba89 	.word	0x0000ba89
    b9ac:	0000b8c5 	.word	0x0000b8c5
    b9b0:	0000b8c5 	.word	0x0000b8c5
    b9b4:	0000b8c5 	.word	0x0000b8c5
    b9b8:	0000b8c5 	.word	0x0000b8c5
    b9bc:	0000ba89 	.word	0x0000ba89
    b9c0:	0000b8c5 	.word	0x0000b8c5
    b9c4:	0000b8c5 	.word	0x0000b8c5
    b9c8:	0000b8c5 	.word	0x0000b8c5
    b9cc:	0000b8c5 	.word	0x0000b8c5
    b9d0:	0000bb11 	.word	0x0000bb11
    b9d4:	0000baad 	.word	0x0000baad
    b9d8:	0000bad3 	.word	0x0000bad3
    b9dc:	0000b8c5 	.word	0x0000b8c5
    b9e0:	0000b8c5 	.word	0x0000b8c5
    b9e4:	0000b9fd 	.word	0x0000b9fd
    b9e8:	0000b8c5 	.word	0x0000b8c5
    b9ec:	0000baad 	.word	0x0000baad
    b9f0:	0000b8c5 	.word	0x0000b8c5
    b9f4:	0000b8c5 	.word	0x0000b8c5
    b9f8:	0000baad 	.word	0x0000baad
			if (precision >= 0) {
    b9fc:	f1bb 0f00 	cmp.w	fp, #0
			bps = (const char *)value->ptr;
    ba00:	9f10      	ldr	r7, [sp, #64]	; 0x40
			if (precision >= 0) {
    ba02:	db0a      	blt.n	ba1a <z_cbvprintf_impl+0x566>
				len = strnlen(bps, precision);
    ba04:	4659      	mov	r1, fp
    ba06:	4638      	mov	r0, r7
    ba08:	f016 f9a3 	bl	21d52 <strnlen>
			bpe = bps + len;
    ba0c:	eb07 0800 	add.w	r8, r7, r0
		if (bps == NULL) {
    ba10:	2f00      	cmp	r7, #0
    ba12:	f43f af57 	beq.w	b8c4 <z_cbvprintf_impl+0x410>
		char sign = 0;
    ba16:	2600      	movs	r6, #0
    ba18:	e00b      	b.n	ba32 <z_cbvprintf_impl+0x57e>
				len = strlen(bps);
    ba1a:	4638      	mov	r0, r7
    ba1c:	f7fd fc96 	bl	934c <strlen>
    ba20:	e7f4      	b.n	ba0c <z_cbvprintf_impl+0x558>
		char sign = 0;
    ba22:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
    ba24:	2001      	movs	r0, #1
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    ba26:	9b10      	ldr	r3, [sp, #64]	; 0x40
			bpe = buf + 1;
    ba28:	f10d 0829 	add.w	r8, sp, #41	; 0x29
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    ba2c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
			bps = buf;
    ba30:	af0a      	add	r7, sp, #40	; 0x28
		if (conv->altform_0c) {
    ba32:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    ba36:	f013 0210 	ands.w	r2, r3, #16
    ba3a:	9205      	str	r2, [sp, #20]
    ba3c:	f000 8083 	beq.w	bb46 <z_cbvprintf_impl+0x692>
			nj_len += 2U;
    ba40:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    ba42:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
    ba44:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
			nj_len += conv->pad0_pre_exp;
    ba48:	bf48      	it	mi
    ba4a:	9b14      	ldrmi	r3, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
    ba4c:	4458      	add	r0, fp
			nj_len += conv->pad0_pre_exp;
    ba4e:	bf48      	it	mi
    ba50:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
    ba52:	f1b9 0f00 	cmp.w	r9, #0
    ba56:	f340 8090 	ble.w	bb7a <z_cbvprintf_impl+0x6c6>
			if (!conv->flag_dash) {
    ba5a:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			width -= (int)nj_len;
    ba5e:	eba9 0900 	sub.w	r9, r9, r0
			if (!conv->flag_dash) {
    ba62:	f3c2 0380 	ubfx	r3, r2, #2, #1
    ba66:	0750      	lsls	r0, r2, #29
    ba68:	9306      	str	r3, [sp, #24]
    ba6a:	f100 8086 	bmi.w	bb7a <z_cbvprintf_impl+0x6c6>
				if (conv->flag_zero) {
    ba6e:	0651      	lsls	r1, r2, #25
    ba70:	d579      	bpl.n	bb66 <z_cbvprintf_impl+0x6b2>
					if (sign != 0) {
    ba72:	b13e      	cbz	r6, ba84 <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
    ba74:	4630      	mov	r0, r6
    ba76:	9903      	ldr	r1, [sp, #12]
    ba78:	47d0      	blx	sl
    ba7a:	2800      	cmp	r0, #0
    ba7c:	db70      	blt.n	bb60 <z_cbvprintf_impl+0x6ac>
    ba7e:	9b06      	ldr	r3, [sp, #24]
    ba80:	3501      	adds	r5, #1
    ba82:	461e      	mov	r6, r3
					pad = '0';
    ba84:	2230      	movs	r2, #48	; 0x30
    ba86:	e06f      	b.n	bb68 <z_cbvprintf_impl+0x6b4>
			if (conv->flag_plus) {
    ba88:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
    ba8a:	bf5a      	itte	pl
    ba8c:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    ba90:	015e      	lslpl	r6, r3, #5
				sign = '+';
    ba92:	262b      	movmi	r6, #43	; 0x2b
			sint = value->sint;
    ba94:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			if (sint < 0) {
    ba98:	2b00      	cmp	r3, #0
    ba9a:	f6bf af65 	bge.w	b968 <z_cbvprintf_impl+0x4b4>
				value->uint = (uint_value_type)-sint;
    ba9e:	4252      	negs	r2, r2
    baa0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    baa4:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
    baa6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    baaa:	e75d      	b.n	b968 <z_cbvprintf_impl+0x4b4>
		switch (conv->specifier) {
    baac:	2600      	movs	r6, #0
    baae:	e75b      	b.n	b968 <z_cbvprintf_impl+0x4b4>
		char sign = 0;
    bab0:	2600      	movs	r6, #0
				conv->flag_zero = false;
    bab2:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
    bab6:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    baba:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    babc:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    bac0:	459b      	cmp	fp, r3
				conv->flag_zero = false;
    bac2:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
    bac6:	f67f af5d 	bls.w	b984 <z_cbvprintf_impl+0x4d0>
					conv->pad0_value = precision - (int)len;
    baca:	ebab 0303 	sub.w	r3, fp, r3
    bace:	9313      	str	r3, [sp, #76]	; 0x4c
    bad0:	e758      	b.n	b984 <z_cbvprintf_impl+0x4d0>
			if (value->ptr != NULL) {
    bad2:	9810      	ldr	r0, [sp, #64]	; 0x40
    bad4:	b380      	cbz	r0, bb38 <z_cbvprintf_impl+0x684>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    bad6:	f10d 083e 	add.w	r8, sp, #62	; 0x3e
    bada:	ab0a      	add	r3, sp, #40	; 0x28
    badc:	2100      	movs	r1, #0
    bade:	f8cd 8000 	str.w	r8, [sp]
    bae2:	aa12      	add	r2, sp, #72	; 0x48
    bae4:	f7ff fc9a 	bl	b41c <encode_uint>
				conv->altform_0c = true;
    bae8:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
    baec:	f1bb 0f00 	cmp.w	fp, #0
				conv->altform_0c = true;
    baf0:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    baf4:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    baf8:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    bafc:	4607      	mov	r7, r0
				conv->altform_0c = true;
    bafe:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
    bb02:	dad5      	bge.n	bab0 <z_cbvprintf_impl+0x5fc>
		if (bps == NULL) {
    bb04:	2800      	cmp	r0, #0
    bb06:	f43f aedd 	beq.w	b8c4 <z_cbvprintf_impl+0x410>
		size_t nj_len = (bpe - bps);
    bb0a:	eba8 0000 	sub.w	r0, r8, r0
    bb0e:	e782      	b.n	ba16 <z_cbvprintf_impl+0x562>
				store_count(conv, value->ptr, count);
    bb10:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
    bb12:	2907      	cmp	r1, #7
    bb14:	f63f aed6 	bhi.w	b8c4 <z_cbvprintf_impl+0x410>
    bb18:	e8df f001 	tbb	[pc, r1]
    bb1c:	0c06040c 	.word	0x0c06040c
    bb20:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    bb24:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    bb26:	e6cd      	b.n	b8c4 <z_cbvprintf_impl+0x410>
		*(short *)dp = (short)count;
    bb28:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    bb2a:	e6cb      	b.n	b8c4 <z_cbvprintf_impl+0x410>
		*(intmax_t *)dp = (intmax_t)count;
    bb2c:	17ea      	asrs	r2, r5, #31
    bb2e:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    bb32:	e6c7      	b.n	b8c4 <z_cbvprintf_impl+0x410>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    bb34:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    bb36:	e6c5      	b.n	b8c4 <z_cbvprintf_impl+0x410>
			bpe = bps + 5;
    bb38:	f8df 80bc 	ldr.w	r8, [pc, #188]	; bbf8 <z_cbvprintf_impl+0x744>
		char sign = 0;
    bb3c:	4606      	mov	r6, r0
    bb3e:	f1a8 0705 	sub.w	r7, r8, #5
		size_t nj_len = (bpe - bps);
    bb42:	2005      	movs	r0, #5
    bb44:	e775      	b.n	ba32 <z_cbvprintf_impl+0x57e>
		} else if (conv->altform_0) {
    bb46:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    bb48:	bf48      	it	mi
    bb4a:	3001      	addmi	r0, #1
    bb4c:	e779      	b.n	ba42 <z_cbvprintf_impl+0x58e>
					OUTC(pad);
    bb4e:	4610      	mov	r0, r2
    bb50:	9307      	str	r3, [sp, #28]
    bb52:	9206      	str	r2, [sp, #24]
    bb54:	9903      	ldr	r1, [sp, #12]
    bb56:	47d0      	blx	sl
    bb58:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    bb5c:	2800      	cmp	r0, #0
    bb5e:	da04      	bge.n	bb6a <z_cbvprintf_impl+0x6b6>
#undef OUTS
#undef OUTC
}
    bb60:	b017      	add	sp, #92	; 0x5c
    bb62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    bb66:	2220      	movs	r2, #32
					pad = '0';
    bb68:	464b      	mov	r3, r9
				while (width-- > 0) {
    bb6a:	4619      	mov	r1, r3
    bb6c:	2900      	cmp	r1, #0
    bb6e:	f103 33ff 	add.w	r3, r3, #4294967295
    bb72:	dcec      	bgt.n	bb4e <z_cbvprintf_impl+0x69a>
    bb74:	444d      	add	r5, r9
    bb76:	4699      	mov	r9, r3
    bb78:	1a6d      	subs	r5, r5, r1
		if (sign != 0) {
    bb7a:	b12e      	cbz	r6, bb88 <z_cbvprintf_impl+0x6d4>
			OUTC(sign);
    bb7c:	4630      	mov	r0, r6
    bb7e:	9903      	ldr	r1, [sp, #12]
    bb80:	47d0      	blx	sl
    bb82:	2800      	cmp	r0, #0
    bb84:	dbec      	blt.n	bb60 <z_cbvprintf_impl+0x6ac>
    bb86:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    bb88:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    bb8c:	06da      	lsls	r2, r3, #27
    bb8e:	d401      	bmi.n	bb94 <z_cbvprintf_impl+0x6e0>
    bb90:	071b      	lsls	r3, r3, #28
    bb92:	d505      	bpl.n	bba0 <z_cbvprintf_impl+0x6ec>
				OUTC('0');
    bb94:	2030      	movs	r0, #48	; 0x30
    bb96:	9903      	ldr	r1, [sp, #12]
    bb98:	47d0      	blx	sl
    bb9a:	2800      	cmp	r0, #0
    bb9c:	dbe0      	blt.n	bb60 <z_cbvprintf_impl+0x6ac>
    bb9e:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    bba0:	9b05      	ldr	r3, [sp, #20]
    bba2:	b133      	cbz	r3, bbb2 <z_cbvprintf_impl+0x6fe>
				OUTC(conv->specifier);
    bba4:	9903      	ldr	r1, [sp, #12]
    bba6:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    bbaa:	47d0      	blx	sl
    bbac:	2800      	cmp	r0, #0
    bbae:	dbd7      	blt.n	bb60 <z_cbvprintf_impl+0x6ac>
    bbb0:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    bbb2:	44ab      	add	fp, r5
    bbb4:	e005      	b.n	bbc2 <z_cbvprintf_impl+0x70e>
				OUTC('0');
    bbb6:	2030      	movs	r0, #48	; 0x30
    bbb8:	9903      	ldr	r1, [sp, #12]
    bbba:	47d0      	blx	sl
    bbbc:	2800      	cmp	r0, #0
    bbbe:	dbcf      	blt.n	bb60 <z_cbvprintf_impl+0x6ac>
    bbc0:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    bbc2:	ebab 0305 	sub.w	r3, fp, r5
    bbc6:	2b00      	cmp	r3, #0
    bbc8:	dcf5      	bgt.n	bbb6 <z_cbvprintf_impl+0x702>
			OUTS(bps, bpe);
    bbca:	4643      	mov	r3, r8
    bbcc:	463a      	mov	r2, r7
    bbce:	4650      	mov	r0, sl
    bbd0:	9903      	ldr	r1, [sp, #12]
    bbd2:	f010 fea5 	bl	1c920 <outs>
    bbd6:	2800      	cmp	r0, #0
    bbd8:	dbc2      	blt.n	bb60 <z_cbvprintf_impl+0x6ac>
    bbda:	4405      	add	r5, r0
		while (width > 0) {
    bbdc:	44a9      	add	r9, r5
    bbde:	eba9 0305 	sub.w	r3, r9, r5
    bbe2:	2b00      	cmp	r3, #0
    bbe4:	f77f ae6e 	ble.w	b8c4 <z_cbvprintf_impl+0x410>
			OUTC(' ');
    bbe8:	2020      	movs	r0, #32
    bbea:	9903      	ldr	r1, [sp, #12]
    bbec:	47d0      	blx	sl
    bbee:	2800      	cmp	r0, #0
    bbf0:	dbb6      	blt.n	bb60 <z_cbvprintf_impl+0x6ac>
    bbf2:	3501      	adds	r5, #1
			--width;
    bbf4:	e7f3      	b.n	bbde <z_cbvprintf_impl+0x72a>
    bbf6:	bf00      	nop
    bbf8:	00023941 	.word	0x00023941

0000bbfc <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    bbfc:	b148      	cbz	r0, bc12 <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    bbfe:	4b05      	ldr	r3, [pc, #20]	; (bc14 <arch_busy_wait+0x18>)
    bc00:	4a05      	ldr	r2, [pc, #20]	; (bc18 <arch_busy_wait+0x1c>)
    bc02:	681b      	ldr	r3, [r3, #0]
    bc04:	fbb3 f3f2 	udiv	r3, r3, r2
    delay_cycles(cycles);
    bc08:	4358      	muls	r0, r3
    bc0a:	4b04      	ldr	r3, [pc, #16]	; (bc1c <arch_busy_wait+0x20>)
    bc0c:	f043 0301 	orr.w	r3, r3, #1
    bc10:	4718      	bx	r3
}

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    bc12:	4770      	bx	lr
    bc14:	200084b0 	.word	0x200084b0
    bc18:	000f4240 	.word	0x000f4240
    bc1c:	000229a0 	.word	0x000229a0

0000bc20 <sync_rtc_setup>:
	return mbox_set_enabled(&channel, true);
}

/* Setup RTC synchronization. */
static int sync_rtc_setup(const struct device *unused)
{
    bc20:	b5f0      	push	{r4, r5, r6, r7, lr}
    bc22:	b083      	sub	sp, #12
    bc24:	af00      	add	r7, sp, #0
	nrfx_err_t err;
	union rtc_sync_channels channels;
	int32_t sync_rtc_ch;
	int rv;

	err = nrfx_dppi_channel_alloc(&channels.ch.ppi);
    bc26:	1d38      	adds	r0, r7, #4
    bc28:	f00c fbd4 	bl	183d4 <nrfx_dppi_channel_alloc>
	if (err != NRFX_SUCCESS) {
    bc2c:	4b28      	ldr	r3, [pc, #160]	; (bcd0 <sync_rtc_setup+0xb0>)
    bc2e:	4298      	cmp	r0, r3
    bc30:	d14b      	bne.n	bcca <sync_rtc_setup+0xaa>
		rv = -ENODEV;
		goto bail;
	}

	sync_rtc_ch = z_nrf_rtc_timer_chan_alloc();
    bc32:	f00b fee3 	bl	179fc <z_nrf_rtc_timer_chan_alloc>
	if (sync_rtc_ch < 0) {
    bc36:	1e04      	subs	r4, r0, #0
    bc38:	da15      	bge.n	bc66 <sync_rtc_setup+0x46>
		nrfx_dppi_channel_free(channels.ch.ppi);
    bc3a:	7938      	ldrb	r0, [r7, #4]
    bc3c:	f00c fbd0 	bl	183e0 <nrfx_dppi_channel_free>
		irq_unlock(key);
	}

bail:
	if (rv != 0) {
		LOG_ERR("Failed synchronized RTC setup (err: %d)", rv);
    bc40:	466d      	mov	r5, sp
    bc42:	b088      	sub	sp, #32
    bc44:	466a      	mov	r2, sp
    bc46:	4b23      	ldr	r3, [pc, #140]	; (bcd4 <sync_rtc_setup+0xb4>)
    bc48:	6153      	str	r3, [r2, #20]
    bc4a:	4b23      	ldr	r3, [pc, #140]	; (bcd8 <sync_rtc_setup+0xb8>)
    bc4c:	e9c2 3406 	strd	r3, r4, [r2, #24]
    bc50:	2304      	movs	r3, #4
    bc52:	f842 3f10 	str.w	r3, [r2, #16]!
    bc56:	2300      	movs	r3, #0
    bc58:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    bc5c:	481f      	ldr	r0, [pc, #124]	; (bcdc <sync_rtc_setup+0xbc>)
    bc5e:	f000 fb29 	bl	c2b4 <z_impl_z_log_msg_static_create>
    bc62:	46ad      	mov	sp, r5
	}

	return rv;
    bc64:	e02d      	b.n	bcc2 <sync_rtc_setup+0xa2>
	channels.ch.ipc_out = CONFIG_NRF53_SYNC_RTC_IPM_OUT;
    bc66:	f640 0307 	movw	r3, #2055	; 0x807
 */
static inline int mbox_register_callback(const struct mbox_channel *channel,
					 mbox_callback_t cb,
					 void *user_data)
{
	const struct mbox_driver_api *api =
    bc6a:	4d1d      	ldr	r5, [pc, #116]	; (bce0 <sync_rtc_setup+0xc0>)
	channels.ch.rtc = (uint8_t)sync_rtc_ch;
    bc6c:	717c      	strb	r4, [r7, #5]
		(const struct mbox_driver_api *)channel->dev->api;

	if (api->register_callback == NULL) {
    bc6e:	68ae      	ldr	r6, [r5, #8]
	channels.ch.ipc_out = CONFIG_NRF53_SYNC_RTC_IPM_OUT;
    bc70:	80fb      	strh	r3, [r7, #6]
    bc72:	6874      	ldr	r4, [r6, #4]
	rv = mbox_rx_init((void *)channels.raw);
    bc74:	687b      	ldr	r3, [r7, #4]
    bc76:	b914      	cbnz	r4, bc7e <sync_rtc_setup+0x5e>
		return -ENOSYS;
    bc78:	f06f 0457 	mvn.w	r4, #87	; 0x57
    bc7c:	e7e0      	b.n	bc40 <sync_rtc_setup+0x20>
	}

	return api->register_callback(channel->dev, channel->id, cb, user_data);
    bc7e:	2108      	movs	r1, #8
    bc80:	4628      	mov	r0, r5
    bc82:	4a18      	ldr	r2, [pc, #96]	; (bce4 <sync_rtc_setup+0xc4>)
    bc84:	47a0      	blx	r4
	if (err < 0) {
    bc86:	1e04      	subs	r4, r0, #0
    bc88:	dbda      	blt.n	bc40 <sync_rtc_setup+0x20>
static inline int z_impl_mbox_set_enabled(const struct mbox_channel *channel, bool enable)
{
	const struct mbox_driver_api *api =
		(const struct mbox_driver_api *)channel->dev->api;

	if (api->set_enabled == NULL) {
    bc8a:	6933      	ldr	r3, [r6, #16]
    bc8c:	2b00      	cmp	r3, #0
    bc8e:	d0f3      	beq.n	bc78 <sync_rtc_setup+0x58>
		return -ENOSYS;
	}

	return api->set_enabled(channel->dev, channel->id, enable);
    bc90:	2201      	movs	r2, #1
    bc92:	2108      	movs	r1, #8
    bc94:	4628      	mov	r0, r5
    bc96:	4798      	blx	r3
	if (rv < 0) {
    bc98:	1e04      	subs	r4, r0, #0
    bc9a:	dbd1      	blt.n	bc40 <sync_rtc_setup+0x20>
	nrfx_gppi_channels_enable(BIT(channels.ch.ppi));
    bc9c:	2301      	movs	r3, #1
    bc9e:	793d      	ldrb	r5, [r7, #4]
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    bca0:	4a11      	ldr	r2, [pc, #68]	; (bce8 <sync_rtc_setup+0xc8>)
    bca2:	40ab      	lsls	r3, r5
    bca4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	uint32_t task_addr = z_nrf_rtc_timer_capture_task_address_get(channels.ch.rtc);
    bca8:	7978      	ldrb	r0, [r7, #5]
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    bcaa:	79fe      	ldrb	r6, [r7, #7]
    bcac:	f014 fad3 	bl	20256 <z_nrf_rtc_timer_capture_task_address_get>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
    bcb0:	4b0e      	ldr	r3, [pc, #56]	; (bcec <sync_rtc_setup+0xcc>)
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    bcb2:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    bcb6:	00b6      	lsls	r6, r6, #2
    bcb8:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
    bcbc:	519d      	str	r5, [r3, r6]
	if (rv != 0) {
    bcbe:	2c00      	cmp	r4, #0
    bcc0:	d1be      	bne.n	bc40 <sync_rtc_setup+0x20>
}
    bcc2:	4620      	mov	r0, r4
    bcc4:	370c      	adds	r7, #12
    bcc6:	46bd      	mov	sp, r7
    bcc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rv = -ENODEV;
    bcca:	f06f 0412 	mvn.w	r4, #18
    bcce:	e7b7      	b.n	bc40 <sync_rtc_setup+0x20>
    bcd0:	0bad0000 	.word	0x0bad0000
    bcd4:	00023946 	.word	0x00023946
    bcd8:	00023972 	.word	0x00023972
    bcdc:	000228a0 	.word	0x000228a0
    bce0:	00022434 	.word	0x00022434
    bce4:	0000bd35 	.word	0x0000bd35
    bce8:	40017000 	.word	0x40017000
    bcec:	4002a180 	.word	0x4002a180

0000bcf0 <rtc_cb>:
{
    bcf0:	b538      	push	{r3, r4, r5, lr}
    bcf2:	9c04      	ldr	r4, [sp, #16]
	uint32_t evt_addr = z_nrf_rtc_timer_compare_evt_address_get(channels.ch.rtc);
    bcf4:	f3c4 2507 	ubfx	r5, r4, #8, #8
    bcf8:	4628      	mov	r0, r5
    bcfa:	f00b fce7 	bl	176cc <z_nrf_rtc_timer_compare_evt_address_get>

__STATIC_INLINE void nrfx_gppi_event_endpoint_clear(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    (void)channel;
    *((volatile uint32_t *)(eep + 0x80uL)) = 0;
    bcfe:	2100      	movs	r1, #0
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) = 0;
    bd00:	4b0a      	ldr	r3, [pc, #40]	; (bd2c <rtc_cb+0x3c>)
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    bd02:	0ba2      	lsrs	r2, r4, #14
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) = 0;
    bd04:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    bd08:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
    bd0c:	5099      	str	r1, [r3, r2]
	nrfx_gppi_channels_disable(BIT(channels.ch.ppi));
    bd0e:	2301      	movs	r3, #1
    bd10:	b2e4      	uxtb	r4, r4
}

NRF_STATIC_INLINE void nrf_dppi_channels_disable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
    bd12:	4a07      	ldr	r2, [pc, #28]	; (bd30 <rtc_cb+0x40>)
    bd14:	40a3      	lsls	r3, r4
	z_nrf_rtc_timer_chan_free(channels.ch.rtc);
    bd16:	4628      	mov	r0, r5
    bd18:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    bd1c:	f00b fe8c 	bl	17a38 <z_nrf_rtc_timer_chan_free>
	err = nrfx_dppi_channel_free(channels.ch.ppi);
    bd20:	4620      	mov	r0, r4
}
    bd22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	err = nrfx_dppi_channel_free(channels.ch.ppi);
    bd26:	f00c bb5b 	b.w	183e0 <nrfx_dppi_channel_free>
    bd2a:	bf00      	nop
    bd2c:	4002a080 	.word	0x4002a080
    bd30:	40017000 	.word	0x40017000

0000bd34 <mbox_callback>:
{
    bd34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    bd36:	4614      	mov	r4, r2
	if (api->set_enabled == NULL) {
    bd38:	6883      	ldr	r3, [r0, #8]
    bd3a:	691b      	ldr	r3, [r3, #16]
    bd3c:	b10b      	cbz	r3, bd42 <mbox_callback+0xe>
	return api->set_enabled(channel->dev, channel->id, enable);
    bd3e:	2200      	movs	r2, #0
    bd40:	4798      	blx	r3
	cc = z_nrf_rtc_timer_compare_read(channels.ch.rtc);
    bd42:	f3c4 2607 	ubfx	r6, r4, #8, #8
    bd46:	4630      	mov	r0, r6
    bd48:	f00b fcc8 	bl	176dc <z_nrf_rtc_timer_compare_read>
    bd4c:	4605      	mov	r5, r0
	uint32_t task_addr = z_nrf_rtc_timer_capture_task_address_get(channels.ch.rtc);
    bd4e:	4630      	mov	r0, r6
    bd50:	f014 fa81 	bl	20256 <z_nrf_rtc_timer_capture_task_address_get>

__STATIC_INLINE void nrfx_gppi_task_endpoint_clear(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    (void)channel;
    *((volatile uint32_t *)(tep + 0x80uL)) = 0;
    bd54:	2700      	movs	r7, #0
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) = 0;
    bd56:	4b10      	ldr	r3, [pc, #64]	; (bd98 <mbox_callback+0x64>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    bd58:	0e22      	lsrs	r2, r4, #24
    bd5a:	0092      	lsls	r2, r2, #2
    bd5c:	f8c0 7080 	str.w	r7, [r0, #128]	; 0x80
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) = 0;
    bd60:	509f      	str	r7, [r3, r2]
	uint32_t evt_addr = z_nrf_rtc_timer_compare_evt_address_get(channels.ch.rtc);
    bd62:	4630      	mov	r0, r6
    bd64:	f00b fcb2 	bl	176cc <z_nrf_rtc_timer_compare_evt_address_get>
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    bd68:	0ba2      	lsrs	r2, r4, #14
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    bd6a:	4b0c      	ldr	r3, [pc, #48]	; (bd9c <mbox_callback+0x68>)
    bd6c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    bd70:	4413      	add	r3, r2
            ((uint32_t)channel | IPC_SUBSCRIBE_SEND_EN_Msk);
    bd72:	b2e2      	uxtb	r2, r4
    bd74:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    bd78:	601a      	str	r2, [r3, #0]
		z_nrf_rtc_timer_set(channels.ch.rtc, cc + cc + RTC_SYNC_ARBITRARY_DELAY,
    bd7a:	4b09      	ldr	r3, [pc, #36]	; (bda0 <mbox_callback+0x6c>)
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    bd7c:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    bd80:	f105 0232 	add.w	r2, r5, #50	; 0x32
    bd84:	9300      	str	r3, [sp, #0]
    bd86:	4630      	mov	r0, r6
    bd88:	463b      	mov	r3, r7
    bd8a:	9401      	str	r4, [sp, #4]
    bd8c:	0052      	lsls	r2, r2, #1
    bd8e:	f014 fa6b 	bl	20268 <z_nrf_rtc_timer_set>
}
    bd92:	b003      	add	sp, #12
    bd94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bd96:	bf00      	nop
    bd98:	4002a180 	.word	0x4002a180
    bd9c:	4002a080 	.word	0x4002a080
    bda0:	0000bcf1 	.word	0x0000bcf1

0000bda4 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    bda4:	f014 bad9 	b.w	2035a <SystemInit>

0000bda8 <activate_foreach_backend>:
		z_log_runtime_filters_init();
	}
}

static uint32_t activate_foreach_backend(uint32_t mask)
{
    bda8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bdac:	4604      	mov	r4, r0
	uint32_t mask_cpy = mask;

	while (mask_cpy) {
    bdae:	4607      	mov	r7, r0
		uint32_t i = __builtin_ctz(mask_cpy);
		const struct log_backend *backend = log_backend_get(i);

		mask_cpy &= ~BIT(i);
    bdb0:	f04f 0901 	mov.w	r9, #1
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    bdb4:	f8df 8050 	ldr.w	r8, [pc, #80]	; be08 <activate_foreach_backend+0x60>
	while (mask_cpy) {
    bdb8:	b914      	cbnz	r4, bdc0 <activate_foreach_backend+0x18>
					   CONFIG_LOG_MAX_LEVEL);
		}
	}

	return mask;
}
    bdba:	4638      	mov	r0, r7
    bdbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
    bdc0:	fa94 f5a4 	rbit	r5, r4
    bdc4:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
    bdc8:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    bdcc:	012e      	lsls	r6, r5, #4
    bdce:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
    bdd2:	ea6f 0a03 	mvn.w	sl, r3
    bdd6:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    bdda:	7b2b      	ldrb	r3, [r5, #12]
    bddc:	2b00      	cmp	r3, #0
    bdde:	d0eb      	beq.n	bdb8 <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
    bde0:	f858 3006 	ldr.w	r3, [r8, r6]
    bde4:	691b      	ldr	r3, [r3, #16]
    bde6:	b94b      	cbnz	r3, bdfc <activate_foreach_backend+0x54>
					   backend->cb->ctx,
    bde8:	4446      	add	r6, r8
			log_backend_enable(backend,
    bdea:	6873      	ldr	r3, [r6, #4]
    bdec:	2204      	movs	r2, #4
    bdee:	4628      	mov	r0, r5
    bdf0:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
    bdf2:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
    bdf6:	f000 fa49 	bl	c28c <log_backend_enable>
    bdfa:	e7dd      	b.n	bdb8 <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
    bdfc:	4628      	mov	r0, r5
    bdfe:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    be00:	2800      	cmp	r0, #0
    be02:	d1d9      	bne.n	bdb8 <activate_foreach_backend+0x10>
    be04:	e7f0      	b.n	bde8 <activate_foreach_backend+0x40>
    be06:	bf00      	nop
    be08:	000228b8 	.word	0x000228b8

0000be0c <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    be0c:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    be0e:	2200      	movs	r2, #0
{
    be10:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    be12:	490f      	ldr	r1, [pc, #60]	; (be50 <enable_logger+0x44>)
    be14:	480f      	ldr	r0, [pc, #60]	; (be54 <enable_logger+0x48>)
    be16:	f015 fc90 	bl	2173a <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    be1a:	2200      	movs	r2, #0
    be1c:	2300      	movs	r3, #0
    be1e:	2400      	movs	r4, #0
    be20:	e9cd 2306 	strd	r2, r3, [sp, #24]
    be24:	230e      	movs	r3, #14
    be26:	4d0c      	ldr	r5, [pc, #48]	; (be58 <enable_logger+0x4c>)
    be28:	e9cd 3403 	strd	r3, r4, [sp, #12]
    be2c:	f44f 7240 	mov.w	r2, #768	; 0x300
    be30:	4628      	mov	r0, r5
    be32:	e9cd 4401 	strd	r4, r4, [sp, #4]
    be36:	4b09      	ldr	r3, [pc, #36]	; (be5c <enable_logger+0x50>)
    be38:	4909      	ldr	r1, [pc, #36]	; (be60 <enable_logger+0x54>)
    be3a:	9400      	str	r4, [sp, #0]
    be3c:	f00d fc6e 	bl	1971c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    be40:	4908      	ldr	r1, [pc, #32]	; (be64 <enable_logger+0x58>)
    be42:	4628      	mov	r0, r5
    be44:	f015 f8ee 	bl	21024 <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
    be48:	4620      	mov	r0, r4
    be4a:	b009      	add	sp, #36	; 0x24
    be4c:	bd30      	pop	{r4, r5, pc}
    be4e:	bf00      	nop
    be50:	0000be69 	.word	0x0000be69
    be54:	200090f0 	.word	0x200090f0
    be58:	20008c60 	.word	0x20008c60
    be5c:	0000c139 	.word	0x0000c139
    be60:	2000ae98 	.word	0x2000ae98
    be64:	0002398a 	.word	0x0002398a

0000be68 <log_process_thread_timer_expiry_fn>:
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    be68:	4801      	ldr	r0, [pc, #4]	; (be70 <log_process_thread_timer_expiry_fn+0x8>)
    be6a:	f00d bde5 	b.w	19a38 <z_impl_k_sem_give>
    be6e:	bf00      	nop
    be70:	20008934 	.word	0x20008934

0000be74 <z_log_init>:
{
    be74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    be78:	4680      	mov	r8, r0
	if (atomic_inc(&initialized) != 0) {
    be7a:	481f      	ldr	r0, [pc, #124]	; (bef8 <z_log_init+0x84>)
{
    be7c:	460f      	mov	r7, r1
	if (atomic_inc(&initialized) != 0) {
    be7e:	f010 ffc7 	bl	1ce10 <atomic_inc>
    be82:	4606      	mov	r6, r0
    be84:	2800      	cmp	r0, #0
    be86:	d030      	beq.n	beea <z_log_init+0x76>
	uint32_t mask = 0;
    be88:	2500      	movs	r5, #0
}
    be8a:	4628      	mov	r0, r5
    be8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
    be90:	7b23      	ldrb	r3, [r4, #12]
    be92:	b173      	cbz	r3, beb2 <z_log_init+0x3e>
	if (backend->api->init) {
    be94:	6823      	ldr	r3, [r4, #0]
    be96:	68db      	ldr	r3, [r3, #12]
    be98:	b10b      	cbz	r3, be9e <z_log_init+0x2a>
		backend->api->init(backend);
    be9a:	4620      	mov	r0, r4
    be9c:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
    be9e:	6823      	ldr	r3, [r4, #0]
    bea0:	691b      	ldr	r3, [r3, #16]
    bea2:	b9d3      	cbnz	r3, beda <z_log_init+0x66>
				log_backend_enable(backend,
    bea4:	6863      	ldr	r3, [r4, #4]
    bea6:	2204      	movs	r2, #4
    bea8:	4620      	mov	r0, r4
    beaa:	6819      	ldr	r1, [r3, #0]
    beac:	f000 f9ee 	bl	c28c <log_backend_enable>
			i++;
    beb0:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    beb2:	3410      	adds	r4, #16
    beb4:	454c      	cmp	r4, r9
    beb6:	d3eb      	bcc.n	be90 <z_log_init+0x1c>
	if (blocking) {
    beb8:	f1b8 0f00 	cmp.w	r8, #0
    bebc:	d0e5      	beq.n	be8a <z_log_init+0x16>
		while (mask) {
    bebe:	2d00      	cmp	r5, #0
    bec0:	d0e2      	beq.n	be88 <z_log_init+0x14>
			mask = activate_foreach_backend(mask);
    bec2:	4628      	mov	r0, r5
    bec4:	f7ff ff70 	bl	bda8 <activate_foreach_backend>
    bec8:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    beca:	2f00      	cmp	r7, #0
    becc:	d0f7      	beq.n	bebe <z_log_init+0x4a>
	return z_impl_k_sleep(timeout);
    bece:	2100      	movs	r1, #0
    bed0:	f44f 70a4 	mov.w	r0, #328	; 0x148
    bed4:	f00e fad4 	bl	1a480 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
    bed8:	e7f1      	b.n	bebe <z_log_init+0x4a>
		return backend->api->is_ready(backend);
    beda:	4620      	mov	r0, r4
    bedc:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    bede:	2800      	cmp	r0, #0
    bee0:	d0e0      	beq.n	bea4 <z_log_init+0x30>
				mask |= BIT(i);
    bee2:	fa0a f306 	lsl.w	r3, sl, r6
    bee6:	431d      	orrs	r5, r3
    bee8:	e7e2      	b.n	beb0 <z_log_init+0x3c>
	uint32_t mask = 0;
    beea:	4605      	mov	r5, r0
				mask |= BIT(i);
    beec:	f04f 0a01 	mov.w	sl, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    bef0:	4c02      	ldr	r4, [pc, #8]	; (befc <z_log_init+0x88>)
    bef2:	f8df 900c 	ldr.w	r9, [pc, #12]	; bf00 <z_log_init+0x8c>
    bef6:	e7dd      	b.n	beb4 <z_log_init+0x40>
    bef8:	20009ce4 	.word	0x20009ce4
    befc:	000228b8 	.word	0x000228b8
    bf00:	000228c8 	.word	0x000228c8

0000bf04 <log_format_func_t_get>:
}
    bf04:	4b01      	ldr	r3, [pc, #4]	; (bf0c <log_format_func_t_get+0x8>)
    bf06:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    bf0a:	4770      	bx	lr
    bf0c:	00022ae4 	.word	0x00022ae4

0000bf10 <log_set_timestamp_func>:
{
    bf10:	b508      	push	{r3, lr}
    bf12:	4603      	mov	r3, r0
    bf14:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
    bf16:	b12b      	cbz	r3, bf24 <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
    bf18:	4a04      	ldr	r2, [pc, #16]	; (bf2c <log_set_timestamp_func+0x1c>)
    bf1a:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
    bf1c:	f000 fbf4 	bl	c708 <log_output_timestamp_freq_set>
	return 0;
    bf20:	2000      	movs	r0, #0
}
    bf22:	bd08      	pop	{r3, pc}
		return -EINVAL;
    bf24:	f06f 0015 	mvn.w	r0, #21
    bf28:	e7fb      	b.n	bf22 <log_set_timestamp_func+0x12>
    bf2a:	bf00      	nop
    bf2c:	200082e0 	.word	0x200082e0

0000bf30 <z_log_notify_backend_enabled>:
{
    bf30:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    bf32:	4c04      	ldr	r4, [pc, #16]	; (bf44 <z_log_notify_backend_enabled+0x14>)
    bf34:	7823      	ldrb	r3, [r4, #0]
    bf36:	b913      	cbnz	r3, bf3e <z_log_notify_backend_enabled+0xe>
	z_impl_k_sem_give(sem);
    bf38:	4803      	ldr	r0, [pc, #12]	; (bf48 <z_log_notify_backend_enabled+0x18>)
    bf3a:	f00d fd7d 	bl	19a38 <z_impl_k_sem_give>
	backend_attached = true;
    bf3e:	2301      	movs	r3, #1
    bf40:	7023      	strb	r3, [r4, #0]
}
    bf42:	bd10      	pop	{r4, pc}
    bf44:	2000a1aa 	.word	0x2000a1aa
    bf48:	20008934 	.word	0x20008934

0000bf4c <z_log_dropped>:
{
    bf4c:	b510      	push	{r4, lr}
    bf4e:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
    bf50:	4806      	ldr	r0, [pc, #24]	; (bf6c <z_log_dropped+0x20>)
    bf52:	f010 ff5d 	bl	1ce10 <atomic_inc>
	if (buffered) {
    bf56:	b13c      	cbz	r4, bf68 <z_log_dropped+0x1c>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    bf58:	4b05      	ldr	r3, [pc, #20]	; (bf70 <z_log_dropped+0x24>)
    bf5a:	e8d3 1fef 	ldaex	r1, [r3]
    bf5e:	3901      	subs	r1, #1
    bf60:	e8c3 1fe2 	stlex	r2, r1, [r3]
    bf64:	2a00      	cmp	r2, #0
    bf66:	d1f8      	bne.n	bf5a <z_log_dropped+0xe>
}
    bf68:	bd10      	pop	{r4, pc}
    bf6a:	bf00      	nop
    bf6c:	20009cdc 	.word	0x20009cdc
    bf70:	20009ce0 	.word	0x20009ce0

0000bf74 <z_log_dropped_read_and_clear>:
}
    bf74:	2000      	movs	r0, #0
    bf76:	4601      	mov	r1, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    bf78:	4b03      	ldr	r3, [pc, #12]	; (bf88 <z_log_dropped_read_and_clear+0x14>)
    bf7a:	e8d3 0fef 	ldaex	r0, [r3]
    bf7e:	e8c3 1fe2 	stlex	r2, r1, [r3]
    bf82:	2a00      	cmp	r2, #0
    bf84:	d1f9      	bne.n	bf7a <z_log_dropped_read_and_clear+0x6>
    bf86:	4770      	bx	lr
    bf88:	20009cdc 	.word	0x20009cdc

0000bf8c <dropped_notify>:
{
    bf8c:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    bf8e:	f7ff fff1 	bl	bf74 <z_log_dropped_read_and_clear>
    bf92:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    bf94:	4c07      	ldr	r4, [pc, #28]	; (bfb4 <dropped_notify+0x28>)
    bf96:	4e08      	ldr	r6, [pc, #32]	; (bfb8 <dropped_notify+0x2c>)
    bf98:	42b4      	cmp	r4, r6
    bf9a:	d300      	bcc.n	bf9e <dropped_notify+0x12>
}
    bf9c:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    bf9e:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    bfa0:	795b      	ldrb	r3, [r3, #5]
    bfa2:	b12b      	cbz	r3, bfb0 <dropped_notify+0x24>
	if (backend->api->dropped != NULL) {
    bfa4:	6823      	ldr	r3, [r4, #0]
    bfa6:	685b      	ldr	r3, [r3, #4]
    bfa8:	b113      	cbz	r3, bfb0 <dropped_notify+0x24>
		backend->api->dropped(backend, cnt);
    bfaa:	4629      	mov	r1, r5
    bfac:	4620      	mov	r0, r4
    bfae:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    bfb0:	3410      	adds	r4, #16
    bfb2:	e7f1      	b.n	bf98 <dropped_notify+0xc>
    bfb4:	000228b8 	.word	0x000228b8
    bfb8:	000228c8 	.word	0x000228c8

0000bfbc <z_log_msg_init>:
{
    bfbc:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    bfbe:	4c04      	ldr	r4, [pc, #16]	; (bfd0 <z_log_msg_init+0x14>)
    bfc0:	4904      	ldr	r1, [pc, #16]	; (bfd4 <z_log_msg_init+0x18>)
    bfc2:	4620      	mov	r0, r4
    bfc4:	f010 fd7d 	bl	1cac2 <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
    bfc8:	4b03      	ldr	r3, [pc, #12]	; (bfd8 <z_log_msg_init+0x1c>)
    bfca:	601c      	str	r4, [r3, #0]
}
    bfcc:	bd10      	pop	{r4, pc}
    bfce:	bf00      	nop
    bfd0:	20008820 	.word	0x20008820
    bfd4:	00022ad0 	.word	0x00022ad0
    bfd8:	20009cd4 	.word	0x20009cd4

0000bfdc <log_core_init>:
{
    bfdc:	b508      	push	{r3, lr}
	panic_mode = false;
    bfde:	2300      	movs	r3, #0
    bfe0:	4a06      	ldr	r2, [pc, #24]	; (bffc <log_core_init+0x20>)
		log_set_timestamp_func(default_get_timestamp,
    bfe2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	panic_mode = false;
    bfe6:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    bfe8:	4a05      	ldr	r2, [pc, #20]	; (c000 <log_core_init+0x24>)
		log_set_timestamp_func(default_get_timestamp,
    bfea:	4806      	ldr	r0, [pc, #24]	; (c004 <log_core_init+0x28>)
	dropped_cnt = 0;
    bfec:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
    bfee:	f7ff ff8f 	bl	bf10 <log_set_timestamp_func>
}
    bff2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
    bff6:	f7ff bfe1 	b.w	bfbc <z_log_msg_init>
    bffa:	bf00      	nop
    bffc:	2000a1ab 	.word	0x2000a1ab
    c000:	20009cdc 	.word	0x20009cdc
    c004:	0001ce0d 	.word	0x0001ce0d

0000c008 <z_log_msg_alloc>:
{
    c008:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
    c00a:	2200      	movs	r2, #0
    c00c:	2300      	movs	r3, #0
    c00e:	4801      	ldr	r0, [pc, #4]	; (c014 <z_log_msg_alloc+0xc>)
    c010:	f010 bd78 	b.w	1cb04 <mpsc_pbuf_alloc>
    c014:	20008820 	.word	0x20008820

0000c018 <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
    c018:	4801      	ldr	r0, [pc, #4]	; (c020 <z_log_msg_local_claim+0x8>)
    c01a:	f010 be11 	b.w	1cc40 <mpsc_pbuf_claim>
    c01e:	bf00      	nop
    c020:	20008820 	.word	0x20008820

0000c024 <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
    c024:	4b02      	ldr	r3, [pc, #8]	; (c030 <z_log_msg_free+0xc>)
{
    c026:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
    c028:	6818      	ldr	r0, [r3, #0]
    c02a:	f010 be59 	b.w	1cce0 <mpsc_pbuf_free>
    c02e:	bf00      	nop
    c030:	20009cd4 	.word	0x20009cd4

0000c034 <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
    c034:	4801      	ldr	r0, [pc, #4]	; (c03c <z_log_msg_pending+0x8>)
    c036:	f010 be87 	b.w	1cd48 <mpsc_pbuf_is_pending>
    c03a:	bf00      	nop
    c03c:	20008820 	.word	0x20008820

0000c040 <z_impl_log_process>:
{
    c040:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
    c042:	4b26      	ldr	r3, [pc, #152]	; (c0dc <z_impl_log_process+0x9c>)
    c044:	7818      	ldrb	r0, [r3, #0]
    c046:	2800      	cmp	r0, #0
    c048:	d047      	beq.n	c0da <z_impl_log_process+0x9a>
	return z_log_msg_local_claim();
    c04a:	f7ff ffe5 	bl	c018 <z_log_msg_local_claim>
	if (msg) {
    c04e:	4605      	mov	r5, r0
    c050:	b170      	cbz	r0, c070 <z_impl_log_process+0x30>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    c052:	4b23      	ldr	r3, [pc, #140]	; (c0e0 <z_impl_log_process+0xa0>)
    c054:	e8d3 1fef 	ldaex	r1, [r3]
    c058:	3901      	subs	r1, #1
    c05a:	e8c3 1fe2 	stlex	r2, r1, [r3]
    c05e:	2a00      	cmp	r2, #0
    c060:	d1f8      	bne.n	c054 <z_impl_log_process+0x14>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    c062:	4c20      	ldr	r4, [pc, #128]	; (c0e4 <z_impl_log_process+0xa4>)
    c064:	4e20      	ldr	r6, [pc, #128]	; (c0e8 <z_impl_log_process+0xa8>)
    c066:	42b4      	cmp	r4, r6
    c068:	d32d      	bcc.n	c0c6 <z_impl_log_process+0x86>
		z_log_msg_free(msg);
    c06a:	4628      	mov	r0, r5
    c06c:	f7ff ffda 	bl	c024 <z_log_msg_free>
	return dropped_cnt > 0;
    c070:	4b1e      	ldr	r3, [pc, #120]	; (c0ec <z_impl_log_process+0xac>)
    c072:	4c1f      	ldr	r4, [pc, #124]	; (c0f0 <z_impl_log_process+0xb0>)
		if ((dropped_pend || unordered_pend) &&
    c074:	681b      	ldr	r3, [r3, #0]
    c076:	2b00      	cmp	r3, #0
    c078:	dd19      	ble.n	c0ae <z_impl_log_process+0x6e>
	return z_impl_k_uptime_ticks();
    c07a:	f015 fb36 	bl	216ea <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    c07e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c082:	fba0 0302 	umull	r0, r3, r0, r2
    c086:	fb02 3101 	mla	r1, r2, r1, r3
    c08a:	0bc3      	lsrs	r3, r0, #15
    c08c:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    c090:	e9d4 2000 	ldrd	r2, r0, [r4]
    c094:	1a9b      	subs	r3, r3, r2
		if ((dropped_pend || unordered_pend) &&
    c096:	f240 32e9 	movw	r2, #1001	; 0x3e9
    c09a:	ea4f 31d1 	mov.w	r1, r1, lsr #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    c09e:	eb61 0100 	sbc.w	r1, r1, r0
		if ((dropped_pend || unordered_pend) &&
    c0a2:	4293      	cmp	r3, r2
    c0a4:	f171 0100 	sbcs.w	r1, r1, #0
    c0a8:	d301      	bcc.n	c0ae <z_impl_log_process+0x6e>
				dropped_notify();
    c0aa:	f7ff ff6f 	bl	bf8c <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
    c0ae:	e9d4 3200 	ldrd	r3, r2, [r4]
    c0b2:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
    c0b6:	f142 0200 	adc.w	r2, r2, #0
    c0ba:	e9c4 3200 	strd	r3, r2, [r4]
}
    c0be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_log_msg_pending();
    c0c2:	f7ff bfb7 	b.w	c034 <z_log_msg_pending>
	return backend->cb->active;
    c0c6:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
    c0c8:	795b      	ldrb	r3, [r3, #5]
    c0ca:	b123      	cbz	r3, c0d6 <z_impl_log_process+0x96>
	backend->api->process(backend, msg);
    c0cc:	6823      	ldr	r3, [r4, #0]
    c0ce:	4629      	mov	r1, r5
    c0d0:	4620      	mov	r0, r4
    c0d2:	681b      	ldr	r3, [r3, #0]
    c0d4:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    c0d6:	3410      	adds	r4, #16
    c0d8:	e7c5      	b.n	c066 <z_impl_log_process+0x26>
}
    c0da:	bd70      	pop	{r4, r5, r6, pc}
    c0dc:	2000a1aa 	.word	0x2000a1aa
    c0e0:	20009ce0 	.word	0x20009ce0
    c0e4:	000228b8 	.word	0x000228b8
    c0e8:	000228c8 	.word	0x000228c8
    c0ec:	20009cdc 	.word	0x20009cdc
    c0f0:	200090e8 	.word	0x200090e8

0000c0f4 <z_impl_log_panic>:
{
    c0f4:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
    c0f6:	4d0d      	ldr	r5, [pc, #52]	; (c12c <z_impl_log_panic+0x38>)
    c0f8:	7829      	ldrb	r1, [r5, #0]
    c0fa:	b961      	cbnz	r1, c116 <z_impl_log_panic+0x22>
	(void)z_log_init(true, false);
    c0fc:	2001      	movs	r0, #1
    c0fe:	f7ff feb9 	bl	be74 <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    c102:	4c0b      	ldr	r4, [pc, #44]	; (c130 <z_impl_log_panic+0x3c>)
    c104:	4e0b      	ldr	r6, [pc, #44]	; (c134 <z_impl_log_panic+0x40>)
    c106:	42b4      	cmp	r4, r6
    c108:	d306      	bcc.n	c118 <z_impl_log_panic+0x24>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
    c10a:	f7ff ff99 	bl	c040 <z_impl_log_process>
		while (log_process() == true) {
    c10e:	2800      	cmp	r0, #0
    c110:	d1fb      	bne.n	c10a <z_impl_log_panic+0x16>
	panic_mode = true;
    c112:	2301      	movs	r3, #1
    c114:	702b      	strb	r3, [r5, #0]
}
    c116:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
    c118:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    c11a:	795b      	ldrb	r3, [r3, #5]
    c11c:	b11b      	cbz	r3, c126 <z_impl_log_panic+0x32>
	backend->api->panic(backend);
    c11e:	6823      	ldr	r3, [r4, #0]
    c120:	4620      	mov	r0, r4
    c122:	689b      	ldr	r3, [r3, #8]
    c124:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    c126:	3410      	adds	r4, #16
    c128:	e7ed      	b.n	c106 <z_impl_log_panic+0x12>
    c12a:	bf00      	nop
    c12c:	2000a1ab 	.word	0x2000a1ab
    c130:	000228b8 	.word	0x000228b8
    c134:	000228c8 	.word	0x000228c8

0000c138 <log_process_thread_func>:
	uint32_t activate_mask = z_log_init(false, false);
    c138:	2100      	movs	r1, #0
{
    c13a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t activate_mask = z_log_init(false, false);
    c13e:	4608      	mov	r0, r1
    c140:	f7ff fe98 	bl	be74 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    c144:	4604      	mov	r4, r0
    c146:	b348      	cbz	r0, c19c <log_process_thread_func+0x64>
    c148:	f240 6867 	movw	r8, #1639	; 0x667
    c14c:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
    c150:	f00e f9b0 	bl	1a4b4 <z_impl_z_current_get>
	proc_tid = process_tid;
    c154:	4b1a      	ldr	r3, [pc, #104]	; (c1c0 <log_process_thread_func+0x88>)
    c156:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    c158:	b130      	cbz	r0, c168 <log_process_thread_func+0x30>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    c15a:	4b1a      	ldr	r3, [pc, #104]	; (c1c4 <log_process_thread_func+0x8c>)
	    process_tid &&
    c15c:	681b      	ldr	r3, [r3, #0]
    c15e:	2b09      	cmp	r3, #9
    c160:	dd02      	ble.n	c168 <log_process_thread_func+0x30>
	z_impl_k_sem_give(sem);
    c162:	4819      	ldr	r0, [pc, #100]	; (c1c8 <log_process_thread_func+0x90>)
    c164:	f00d fc68 	bl	19a38 <z_impl_k_sem_give>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    c168:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    c16a:	4f18      	ldr	r7, [pc, #96]	; (c1cc <log_process_thread_func+0x94>)
	return z_impl_k_sem_take(sem, timeout);
    c16c:	f8df a058 	ldr.w	sl, [pc, #88]	; c1c8 <log_process_thread_func+0x90>
		if (activate_mask) {
    c170:	b144      	cbz	r4, c184 <log_process_thread_func+0x4c>
			activate_mask = activate_foreach_backend(activate_mask);
    c172:	4620      	mov	r0, r4
    c174:	f7ff fe18 	bl	bda8 <activate_foreach_backend>
			if (!activate_mask) {
    c178:	4604      	mov	r4, r0
    c17a:	b918      	cbnz	r0, c184 <log_process_thread_func+0x4c>
				timeout = K_FOREVER;
    c17c:	f04f 38ff 	mov.w	r8, #4294967295
    c180:	f04f 39ff 	mov.w	r9, #4294967295
    c184:	f7ff ff5c 	bl	c040 <z_impl_log_process>
		if (log_process() == false) {
    c188:	4606      	mov	r6, r0
    c18a:	b928      	cbnz	r0, c198 <log_process_thread_func+0x60>
			if (processed_any) {
    c18c:	b9b5      	cbnz	r5, c1bc <log_process_thread_func+0x84>
    c18e:	4642      	mov	r2, r8
    c190:	464b      	mov	r3, r9
    c192:	4650      	mov	r0, sl
    c194:	f00d fc76 	bl	19a84 <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    c198:	4635      	mov	r5, r6
    c19a:	e7e9      	b.n	c170 <log_process_thread_func+0x38>
    c19c:	f04f 38ff 	mov.w	r8, #4294967295
    c1a0:	f04f 39ff 	mov.w	r9, #4294967295
    c1a4:	e7d4      	b.n	c150 <log_process_thread_func+0x18>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
    c1a6:	682b      	ldr	r3, [r5, #0]
    c1a8:	699b      	ldr	r3, [r3, #24]
    c1aa:	b11b      	cbz	r3, c1b4 <log_process_thread_func+0x7c>
		backend->api->notify(backend, event, arg);
    c1ac:	2200      	movs	r2, #0
    c1ae:	4628      	mov	r0, r5
    c1b0:	4611      	mov	r1, r2
    c1b2:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    c1b4:	3510      	adds	r5, #16
    c1b6:	42bd      	cmp	r5, r7
    c1b8:	d3f5      	bcc.n	c1a6 <log_process_thread_func+0x6e>
    c1ba:	e7e8      	b.n	c18e <log_process_thread_func+0x56>
    c1bc:	4d04      	ldr	r5, [pc, #16]	; (c1d0 <log_process_thread_func+0x98>)
    c1be:	e7fa      	b.n	c1b6 <log_process_thread_func+0x7e>
    c1c0:	20009cd8 	.word	0x20009cd8
    c1c4:	20009ce0 	.word	0x20009ce0
    c1c8:	20008934 	.word	0x20008934
    c1cc:	000228c8 	.word	0x000228c8
    c1d0:	000228b8 	.word	0x000228b8

0000c1d4 <z_log_msg_post_finalize>:
{
    c1d4:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
    c1d6:	4818      	ldr	r0, [pc, #96]	; (c238 <z_log_msg_post_finalize+0x64>)
    c1d8:	f010 fe1a 	bl	1ce10 <atomic_inc>
	if (panic_mode) {
    c1dc:	4b17      	ldr	r3, [pc, #92]	; (c23c <z_log_msg_post_finalize+0x68>)
    c1de:	781b      	ldrb	r3, [r3, #0]
    c1e0:	b17b      	cbz	r3, c202 <z_log_msg_post_finalize+0x2e>
	__asm__ volatile(
    c1e2:	f04f 0320 	mov.w	r3, #32
    c1e6:	f3ef 8411 	mrs	r4, BASEPRI
    c1ea:	f383 8812 	msr	BASEPRI_MAX, r3
    c1ee:	f3bf 8f6f 	isb	sy
    c1f2:	f7ff ff25 	bl	c040 <z_impl_log_process>
	__asm__ volatile(
    c1f6:	f384 8811 	msr	BASEPRI, r4
    c1fa:	f3bf 8f6f 	isb	sy
}
    c1fe:	b002      	add	sp, #8
    c200:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
    c202:	4b0f      	ldr	r3, [pc, #60]	; (c240 <z_log_msg_post_finalize+0x6c>)
    c204:	681b      	ldr	r3, [r3, #0]
    c206:	2b00      	cmp	r3, #0
    c208:	d0f9      	beq.n	c1fe <z_log_msg_post_finalize+0x2a>
		if (cnt == 0) {
    c20a:	b950      	cbnz	r0, c222 <z_log_msg_post_finalize+0x4e>
	z_impl_k_timer_start(timer, duration, period);
    c20c:	2200      	movs	r2, #0
    c20e:	2300      	movs	r3, #0
    c210:	480c      	ldr	r0, [pc, #48]	; (c244 <z_log_msg_post_finalize+0x70>)
    c212:	e9cd 2300 	strd	r2, r3, [sp]
    c216:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    c21a:	2300      	movs	r3, #0
    c21c:	f00e fb88 	bl	1a930 <z_impl_k_timer_start>
    c220:	e7ed      	b.n	c1fe <z_log_msg_post_finalize+0x2a>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    c222:	280a      	cmp	r0, #10
    c224:	d1eb      	bne.n	c1fe <z_log_msg_post_finalize+0x2a>
	z_impl_k_timer_stop(timer);
    c226:	4807      	ldr	r0, [pc, #28]	; (c244 <z_log_msg_post_finalize+0x70>)
    c228:	f015 fa93 	bl	21752 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    c22c:	4806      	ldr	r0, [pc, #24]	; (c248 <z_log_msg_post_finalize+0x74>)
}
    c22e:	b002      	add	sp, #8
    c230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c234:	f00d bc00 	b.w	19a38 <z_impl_k_sem_give>
    c238:	20009ce0 	.word	0x20009ce0
    c23c:	2000a1ab 	.word	0x2000a1ab
    c240:	20009cd8 	.word	0x20009cd8
    c244:	200090f0 	.word	0x200090f0
    c248:	20008934 	.word	0x20008934

0000c24c <z_log_msg_commit>:
{
    c24c:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    c24e:	4b06      	ldr	r3, [pc, #24]	; (c268 <z_log_msg_commit+0x1c>)
{
    c250:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    c252:	681b      	ldr	r3, [r3, #0]
    c254:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
    c256:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
    c258:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
    c25a:	4804      	ldr	r0, [pc, #16]	; (c26c <z_log_msg_commit+0x20>)
    c25c:	f010 fcd0 	bl	1cc00 <mpsc_pbuf_commit>
}
    c260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
    c264:	f7ff bfb6 	b.w	c1d4 <z_log_msg_post_finalize>
    c268:	200082e0 	.word	0x200082e0
    c26c:	20008820 	.word	0x20008820

0000c270 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    c270:	4a04      	ldr	r2, [pc, #16]	; (c284 <log_source_name_get+0x14>)
    c272:	4b05      	ldr	r3, [pc, #20]	; (c288 <log_source_name_get+0x18>)
    c274:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
    c276:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
    c27a:	bf34      	ite	cc
    c27c:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
    c280:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
    c282:	4770      	bx	lr
    c284:	000227a8 	.word	0x000227a8
    c288:	000228b8 	.word	0x000228b8

0000c28c <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    c28c:	4b08      	ldr	r3, [pc, #32]	; (c2b0 <log_backend_enable+0x24>)
{
    c28e:	b410      	push	{r4}
	id += backend - log_backend_get(0);
    c290:	1ac3      	subs	r3, r0, r3
	backend->cb->id = id;
    c292:	6844      	ldr	r4, [r0, #4]
    c294:	111b      	asrs	r3, r3, #4
    c296:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
    c298:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
    c29a:	6843      	ldr	r3, [r0, #4]
    c29c:	719a      	strb	r2, [r3, #6]
	backend->cb->active = true;
    c29e:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
    c2a0:	6843      	ldr	r3, [r0, #4]
    c2a2:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    c2a4:	6843      	ldr	r3, [r0, #4]
    c2a6:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    c2a8:	bc10      	pop	{r4}
	z_log_notify_backend_enabled();
    c2aa:	f7ff be41 	b.w	bf30 <z_log_notify_backend_enabled>
    c2ae:	bf00      	nop
    c2b0:	000228b8 	.word	0x000228b8

0000c2b4 <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
    c2b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    c2b8:	f3c1 44cb 	ubfx	r4, r1, #19, #12
    c2bc:	b08f      	sub	sp, #60	; 0x3c
    c2be:	f3c1 2649 	ubfx	r6, r1, #9, #10
    c2c2:	460d      	mov	r5, r1
    c2c4:	4690      	mov	r8, r2
    c2c6:	4699      	mov	r9, r3
    c2c8:	9005      	str	r0, [sp, #20]
    c2ca:	3417      	adds	r4, #23

	struct log_msg_desc out_desc = desc;
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
    c2cc:	2e00      	cmp	r6, #0
    c2ce:	d03c      	beq.n	c34a <z_impl_z_log_msg_static_create+0x96>
	return cbprintf_package_convert(in_packaged, in_len,
    c2d0:	f04f 0b04 	mov.w	fp, #4
    c2d4:	f04f 0a0a 	mov.w	sl, #10
	struct z_cbprintf_buf_desc buf_desc = {
    c2d8:	2200      	movs	r2, #0
	return cbprintf_package_convert(in_packaged, in_len,
    c2da:	af09      	add	r7, sp, #36	; 0x24
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
    c2dc:	4631      	mov	r1, r6
    c2de:	ab0b      	add	r3, sp, #44	; 0x2c
    c2e0:	4640      	mov	r0, r8
    c2e2:	f8cd b008 	str.w	fp, [sp, #8]
    c2e6:	9701      	str	r7, [sp, #4]
    c2e8:	f8cd a000 	str.w	sl, [sp]
	struct z_cbprintf_buf_desc buf_desc = {
    c2ec:	e9cd 220b 	strd	r2, r2, [sp, #44]	; 0x2c
    c2f0:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
    c2f2:	9607      	str	r6, [sp, #28]
    c2f4:	f7fe fd60 	bl	adb8 <cbprintf_package_convert>
					    strl, ARRAY_SIZE(strl));

		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
    c2f8:	f3c0 0309 	ubfx	r3, r0, #0, #10
    c2fc:	1918      	adds	r0, r3, r4
    c2fe:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    c302:	0880      	lsrs	r0, r0, #2
		out_desc.package_len = len;
    c304:	461e      	mov	r6, r3
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    c306:	f363 2552 	bfi	r5, r3, #9, #10
    c30a:	9306      	str	r3, [sp, #24]
    c30c:	f7ff fe7c 	bl	c008 <z_log_msg_alloc>
		if (msg) {
    c310:	4604      	mov	r4, r0
    c312:	b178      	cbz	r0, c334 <z_impl_z_log_msg_static_create+0x80>
	struct z_cbprintf_buf_desc buf_desc = {
    c314:	2200      	movs	r2, #0
    c316:	9b06      	ldr	r3, [sp, #24]
			len = cbprintf_package_copy(package, inlen,
						    msg->data, out_desc.package_len,
    c318:	3010      	adds	r0, #16
    c31a:	900b      	str	r0, [sp, #44]	; 0x2c
    c31c:	930c      	str	r3, [sp, #48]	; 0x30
    c31e:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
    c320:	4640      	mov	r0, r8
    c322:	e9cd 7b01 	strd	r7, fp, [sp, #4]
    c326:	4a0c      	ldr	r2, [pc, #48]	; (c358 <z_impl_z_log_msg_static_create+0xa4>)
    c328:	9907      	ldr	r1, [sp, #28]
    c32a:	f8cd a000 	str.w	sl, [sp]
    c32e:	ab0b      	add	r3, sp, #44	; 0x2c
    c330:	f7fe fd42 	bl	adb8 <cbprintf_package_convert>
		}
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
    c334:	f366 2552 	bfi	r5, r6, #9, #10
    c338:	464b      	mov	r3, r9
    c33a:	462a      	mov	r2, r5
    c33c:	4620      	mov	r0, r4
    c33e:	9905      	ldr	r1, [sp, #20]
}
    c340:	b00f      	add	sp, #60	; 0x3c
    c342:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_log_msg_finalize(msg, source, out_desc, data);
    c346:	f010 bd87 	b.w	1ce58 <z_log_msg_finalize>
    c34a:	f024 0007 	bic.w	r0, r4, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    c34e:	0880      	lsrs	r0, r0, #2
    c350:	f7ff fe5a 	bl	c008 <z_log_msg_alloc>
    c354:	4604      	mov	r4, r0
    c356:	e7ed      	b.n	c334 <z_impl_z_log_msg_static_create+0x80>
    c358:	0001ce2d 	.word	0x0001ce2d

0000c35c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    c35c:	b40e      	push	{r1, r2, r3}
    c35e:	b503      	push	{r0, r1, lr}
    c360:	ab03      	add	r3, sp, #12
    c362:	f853 2b04 	ldr.w	r2, [r3], #4
    c366:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    c368:	4804      	ldr	r0, [pc, #16]	; (c37c <print_formatted+0x20>)
	va_start(args, fmt);
    c36a:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    c36c:	f010 fd9b 	bl	1cea6 <cbvprintf>
	va_end(args);

	return length;
}
    c370:	b002      	add	sp, #8
    c372:	f85d eb04 	ldr.w	lr, [sp], #4
    c376:	b003      	add	sp, #12
    c378:	4770      	bx	lr
    c37a:	bf00      	nop
    c37c:	0001cecf 	.word	0x0001cecf

0000c380 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    c380:	06ca      	lsls	r2, r1, #27
    c382:	d405      	bmi.n	c390 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    c384:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
    c386:	bf4c      	ite	mi
    c388:	4902      	ldrmi	r1, [pc, #8]	; (c394 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
    c38a:	4903      	ldrpl	r1, [pc, #12]	; (c398 <newline_print+0x18>)
    c38c:	f7ff bfe6 	b.w	c35c <print_formatted>
	}
}
    c390:	4770      	bx	lr
    c392:	bf00      	nop
    c394:	00023605 	.word	0x00023605
    c398:	00026b7e 	.word	0x00026b7e

0000c39c <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    c39c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c3a0:	b089      	sub	sp, #36	; 0x24
    c3a2:	469a      	mov	sl, r3
    c3a4:	e9dd 7313 	ldrd	r7, r3, [sp, #76]	; 0x4c
    c3a8:	f89d b048 	ldrb.w	fp, [sp, #72]	; 0x48
    c3ac:	9305      	str	r3, [sp, #20]
    c3ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
    c3b0:	4604      	mov	r4, r0
    c3b2:	460d      	mov	r5, r1
    c3b4:	9e16      	ldr	r6, [sp, #88]	; 0x58
    c3b6:	9206      	str	r2, [sp, #24]
    c3b8:	9304      	str	r3, [sp, #16]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
    c3ba:	f1bb 0f00 	cmp.w	fp, #0
    c3be:	f000 8085 	beq.w	c4cc <log_output_process+0x130>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    c3c2:	f006 0308 	and.w	r3, r6, #8
    c3c6:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
    c3c8:	f010 fd2e 	bl	1ce28 <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    c3cc:	f006 0902 	and.w	r9, r6, #2
	if (tag) {
    c3d0:	4602      	mov	r2, r0
    c3d2:	2800      	cmp	r0, #0
    c3d4:	d049      	beq.n	c46a <log_output_process+0xce>
		length += print_formatted(output, "%s ", tag);
    c3d6:	4620      	mov	r0, r4
    c3d8:	4985      	ldr	r1, [pc, #532]	; (c5f0 <log_output_process+0x254>)
    c3da:	f7ff ffbf 	bl	c35c <print_formatted>
    c3de:	4680      	mov	r8, r0
	if (stamp) {
    c3e0:	f1b9 0f00 	cmp.w	r9, #0
    c3e4:	d008      	beq.n	c3f8 <log_output_process+0x5c>
	if (!format) {
    c3e6:	f016 0f44 	tst.w	r6, #68	; 0x44
    c3ea:	d140      	bne.n	c46e <log_output_process+0xd2>
		length = print_formatted(output, "[%08lu] ", timestamp);
    c3ec:	462a      	mov	r2, r5
    c3ee:	4620      	mov	r0, r4
    c3f0:	4980      	ldr	r1, [pc, #512]	; (c5f4 <log_output_process+0x258>)
    c3f2:	f7ff ffb3 	bl	c35c <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    c3f6:	4480      	add	r8, r0
	if (color) {
    c3f8:	f006 0301 	and.w	r3, r6, #1
    c3fc:	b153      	cbz	r3, c414 <log_output_process+0x78>
		const char *log_color = start && (colors[level] != NULL) ?
    c3fe:	4b7e      	ldr	r3, [pc, #504]	; (c5f8 <log_output_process+0x25c>)
		print_formatted(output, "%s", log_color);
    c400:	4620      	mov	r0, r4
		const char *log_color = start && (colors[level] != NULL) ?
    c402:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
		print_formatted(output, "%s", log_color);
    c406:	4b7d      	ldr	r3, [pc, #500]	; (c5fc <log_output_process+0x260>)
    c408:	497d      	ldr	r1, [pc, #500]	; (c600 <log_output_process+0x264>)
    c40a:	2a00      	cmp	r2, #0
    c40c:	bf08      	it	eq
    c40e:	461a      	moveq	r2, r3
    c410:	f7ff ffa4 	bl	c35c <print_formatted>
	if (level_on) {
    c414:	f006 0308 	and.w	r3, r6, #8
    c418:	2b00      	cmp	r3, #0
    c41a:	d054      	beq.n	c4c6 <log_output_process+0x12a>
		total += print_formatted(output, "<%s> ", severity[level]);
    c41c:	4b79      	ldr	r3, [pc, #484]	; (c604 <log_output_process+0x268>)
    c41e:	4620      	mov	r0, r4
    c420:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
    c424:	4978      	ldr	r1, [pc, #480]	; (c608 <log_output_process+0x26c>)
    c426:	f7ff ff99 	bl	c35c <print_formatted>
    c42a:	4605      	mov	r5, r0
	if (domain) {
    c42c:	9b06      	ldr	r3, [sp, #24]
    c42e:	b12b      	cbz	r3, c43c <log_output_process+0xa0>
		total += print_formatted(output, "%s/", domain);
    c430:	461a      	mov	r2, r3
    c432:	4620      	mov	r0, r4
    c434:	4975      	ldr	r1, [pc, #468]	; (c60c <log_output_process+0x270>)
    c436:	f7ff ff91 	bl	c35c <print_formatted>
    c43a:	4405      	add	r5, r0
	if (source) {
    c43c:	f1ba 0f00 	cmp.w	sl, #0
    c440:	d005      	beq.n	c44e <log_output_process+0xb2>
		total += print_formatted(output,
    c442:	4652      	mov	r2, sl
    c444:	4620      	mov	r0, r4
    c446:	4972      	ldr	r1, [pc, #456]	; (c610 <log_output_process+0x274>)
    c448:	f7ff ff88 	bl	c35c <print_formatted>
    c44c:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
    c44e:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
    c450:	2f00      	cmp	r7, #0
    c452:	d149      	bne.n	c4e8 <log_output_process+0x14c>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    c454:	9b04      	ldr	r3, [sp, #16]
    c456:	2b00      	cmp	r3, #0
    c458:	d14f      	bne.n	c4fa <log_output_process+0x15e>
	if (color) {
    c45a:	07f3      	lsls	r3, r6, #31
    c45c:	f100 80c1 	bmi.w	c5e2 <log_output_process+0x246>
	newline_print(output, flags);
    c460:	4631      	mov	r1, r6
    c462:	4620      	mov	r0, r4
    c464:	f7ff ff8c 	bl	c380 <newline_print>
}
    c468:	e0b5      	b.n	c5d6 <log_output_process+0x23a>
	uint32_t length = 0U;
    c46a:	4680      	mov	r8, r0
    c46c:	e7b8      	b.n	c3e0 <log_output_process+0x44>
	} else if (freq != 0U) {
    c46e:	4b69      	ldr	r3, [pc, #420]	; (c614 <log_output_process+0x278>)
    c470:	6818      	ldr	r0, [r3, #0]
    c472:	2800      	cmp	r0, #0
    c474:	d0bf      	beq.n	c3f6 <log_output_process+0x5a>
		timestamp /= timestamp_div;
    c476:	4b68      	ldr	r3, [pc, #416]	; (c618 <log_output_process+0x27c>)
		ms = (remainder * 1000U) / freq;
    c478:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
		timestamp /= timestamp_div;
    c47c:	681b      	ldr	r3, [r3, #0]
    c47e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    c482:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
    c486:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
    c48a:	fb00 5513 	mls	r5, r0, r3, r5
		ms = (remainder * 1000U) / freq;
    c48e:	fb09 f505 	mul.w	r5, r9, r5
    c492:	fbb3 f2f1 	udiv	r2, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    c496:	fbb5 fef0 	udiv	lr, r5, r0
		mins = seconds / 60U;
    c49a:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    c49e:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    c4a2:	fb00 551e 	mls	r5, r0, lr, r5
		mins = seconds / 60U;
    c4a6:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    c4aa:	fb09 f505 	mul.w	r5, r9, r5
    c4ae:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
    c4b2:	fb0c 1113 	mls	r1, ip, r3, r1
    c4b6:	4620      	mov	r0, r4
    c4b8:	9100      	str	r1, [sp, #0]
    c4ba:	e9cd e501 	strd	lr, r5, [sp, #4]
    c4be:	4957      	ldr	r1, [pc, #348]	; (c61c <log_output_process+0x280>)
    c4c0:	f7ff ff4c 	bl	c35c <print_formatted>
    c4c4:	e797      	b.n	c3f6 <log_output_process+0x5a>
	int total = 0;
    c4c6:	f006 0508 	and.w	r5, r6, #8
    c4ca:	e7af      	b.n	c42c <log_output_process+0x90>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    c4cc:	f1ba 0f01 	cmp.w	sl, #1
    c4d0:	d106      	bne.n	c4e0 <log_output_process+0x144>
	if (package) {
    c4d2:	2f00      	cmp	r7, #0
    c4d4:	d165      	bne.n	c5a2 <log_output_process+0x206>
	if (data_len) {
    c4d6:	9b04      	ldr	r3, [sp, #16]
    c4d8:	2b00      	cmp	r3, #0
    c4da:	d07c      	beq.n	c5d6 <log_output_process+0x23a>
		prefix_offset = 0;
    c4dc:	2500      	movs	r5, #0
    c4de:	e00c      	b.n	c4fa <log_output_process+0x15e>
	if (package) {
    c4e0:	2f00      	cmp	r7, #0
    c4e2:	d0f8      	beq.n	c4d6 <log_output_process+0x13a>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    c4e4:	484e      	ldr	r0, [pc, #312]	; (c620 <log_output_process+0x284>)
    c4e6:	e05d      	b.n	c5a4 <log_output_process+0x208>
		cb = out_func;
    c4e8:	484e      	ldr	r0, [pc, #312]	; (c624 <log_output_process+0x288>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    c4ea:	463b      	mov	r3, r7
    c4ec:	4622      	mov	r2, r4
    c4ee:	494e      	ldr	r1, [pc, #312]	; (c628 <log_output_process+0x28c>)
    c4f0:	f00f feda 	bl	1c2a8 <cbpprintf_external>
	if (data_len) {
    c4f4:	9b04      	ldr	r3, [sp, #16]
    c4f6:	2b00      	cmp	r3, #0
    c4f8:	d069      	beq.n	c5ce <log_output_process+0x232>
		print_formatted(output, " ");
    c4fa:	f8df 8130 	ldr.w	r8, [pc, #304]	; c62c <log_output_process+0x290>
			print_formatted(output, "%02x ", data[i]);
    c4fe:	f8df 9130 	ldr.w	r9, [pc, #304]	; c630 <log_output_process+0x294>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    c502:	9f04      	ldr	r7, [sp, #16]
	newline_print(output, flags);
    c504:	4631      	mov	r1, r6
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    c506:	2f10      	cmp	r7, #16
	newline_print(output, flags);
    c508:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    c50a:	bf28      	it	cs
    c50c:	2710      	movcs	r7, #16
	for (int i = 0; i < prefix_offset; i++) {
    c50e:	f04f 0a00 	mov.w	sl, #0
	newline_print(output, flags);
    c512:	f7ff ff35 	bl	c380 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    c516:	4555      	cmp	r5, sl
    c518:	dc46      	bgt.n	c5a8 <log_output_process+0x20c>
			print_formatted(output, "%02x ", data[i]);
    c51a:	9b05      	ldr	r3, [sp, #20]
    c51c:	4649      	mov	r1, r9
    c51e:	4620      	mov	r0, r4
    c520:	781a      	ldrb	r2, [r3, #0]
    c522:	f7ff ff1b 	bl	c35c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    c526:	f04f 0a01 	mov.w	sl, #1
		if (i > 0 && !(i % 8)) {
    c52a:	f01a 0f07 	tst.w	sl, #7
    c52e:	d103      	bne.n	c538 <log_output_process+0x19c>
			print_formatted(output, " ");
    c530:	4641      	mov	r1, r8
    c532:	4620      	mov	r0, r4
    c534:	f7ff ff12 	bl	c35c <print_formatted>
		if (i < length) {
    c538:	4557      	cmp	r7, sl
    c53a:	d93c      	bls.n	c5b6 <log_output_process+0x21a>
			print_formatted(output, "%02x ", data[i]);
    c53c:	9b05      	ldr	r3, [sp, #20]
    c53e:	4649      	mov	r1, r9
    c540:	4620      	mov	r0, r4
    c542:	f813 200a 	ldrb.w	r2, [r3, sl]
    c546:	f7ff ff09 	bl	c35c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    c54a:	f10a 0a01 	add.w	sl, sl, #1
    c54e:	f1ba 0f10 	cmp.w	sl, #16
    c552:	d1ea      	bne.n	c52a <log_output_process+0x18e>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    c554:	f04f 0a00 	mov.w	sl, #0
	print_formatted(output, "|");
    c558:	4620      	mov	r0, r4
    c55a:	4936      	ldr	r1, [pc, #216]	; (c634 <log_output_process+0x298>)
    c55c:	f7ff fefe 	bl	c35c <print_formatted>
		if (i < length) {
    c560:	4652      	mov	r2, sl
			unsigned char c = (unsigned char)data[i];
    c562:	9b05      	ldr	r3, [sp, #20]
			print_formatted(output, "%c",
    c564:	4620      	mov	r0, r4
			unsigned char c = (unsigned char)data[i];
    c566:	5c9a      	ldrb	r2, [r3, r2]
			print_formatted(output, "%c",
    c568:	4b33      	ldr	r3, [pc, #204]	; (c638 <log_output_process+0x29c>)
    c56a:	5c99      	ldrb	r1, [r3, r2]
    c56c:	f011 0f97 	tst.w	r1, #151	; 0x97
    c570:	bf08      	it	eq
    c572:	222e      	moveq	r2, #46	; 0x2e
    c574:	4931      	ldr	r1, [pc, #196]	; (c63c <log_output_process+0x2a0>)
    c576:	f7ff fef1 	bl	c35c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    c57a:	f10a 0a01 	add.w	sl, sl, #1
    c57e:	f1ba 0f10 	cmp.w	sl, #16
    c582:	d01d      	beq.n	c5c0 <log_output_process+0x224>
		if (i > 0 && !(i % 8)) {
    c584:	f01a 0f07 	tst.w	sl, #7
    c588:	d103      	bne.n	c592 <log_output_process+0x1f6>
			print_formatted(output, " ");
    c58a:	4641      	mov	r1, r8
    c58c:	4620      	mov	r0, r4
    c58e:	f7ff fee5 	bl	c35c <print_formatted>
		if (i < length) {
    c592:	4557      	cmp	r7, sl
    c594:	4652      	mov	r2, sl
    c596:	d8e4      	bhi.n	c562 <log_output_process+0x1c6>
			print_formatted(output, " ");
    c598:	4641      	mov	r1, r8
    c59a:	4620      	mov	r0, r4
    c59c:	f7ff fede 	bl	c35c <print_formatted>
    c5a0:	e7eb      	b.n	c57a <log_output_process+0x1de>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    c5a2:	4820      	ldr	r0, [pc, #128]	; (c624 <log_output_process+0x288>)
		prefix_offset = 0;
    c5a4:	465d      	mov	r5, fp
    c5a6:	e7a0      	b.n	c4ea <log_output_process+0x14e>
		print_formatted(output, " ");
    c5a8:	4641      	mov	r1, r8
    c5aa:	4620      	mov	r0, r4
    c5ac:	f7ff fed6 	bl	c35c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    c5b0:	f10a 0a01 	add.w	sl, sl, #1
    c5b4:	e7af      	b.n	c516 <log_output_process+0x17a>
			print_formatted(output, "   ");
    c5b6:	4620      	mov	r0, r4
    c5b8:	4921      	ldr	r1, [pc, #132]	; (c640 <log_output_process+0x2a4>)
    c5ba:	f7ff fecf 	bl	c35c <print_formatted>
    c5be:	e7c4      	b.n	c54a <log_output_process+0x1ae>
		data += length;
    c5c0:	9b05      	ldr	r3, [sp, #20]
    c5c2:	443b      	add	r3, r7
    c5c4:	9305      	str	r3, [sp, #20]
	} while (len);
    c5c6:	9b04      	ldr	r3, [sp, #16]
    c5c8:	1bdb      	subs	r3, r3, r7
    c5ca:	9304      	str	r3, [sp, #16]
    c5cc:	d199      	bne.n	c502 <log_output_process+0x166>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    c5ce:	f1bb 0f00 	cmp.w	fp, #0
    c5d2:	f47f af42 	bne.w	c45a <log_output_process+0xbe>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    c5d6:	4620      	mov	r0, r4
}
    c5d8:	b009      	add	sp, #36	; 0x24
    c5da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
    c5de:	f010 bc69 	b.w	1ceb4 <log_output_flush>
		print_formatted(output, "%s", log_color);
    c5e2:	4620      	mov	r0, r4
    c5e4:	4a05      	ldr	r2, [pc, #20]	; (c5fc <log_output_process+0x260>)
    c5e6:	4906      	ldr	r1, [pc, #24]	; (c600 <log_output_process+0x264>)
    c5e8:	f7ff feb8 	bl	c35c <print_formatted>
}
    c5ec:	e738      	b.n	c460 <log_output_process+0xc4>
    c5ee:	bf00      	nop
    c5f0:	000239a4 	.word	0x000239a4
    c5f4:	000239a8 	.word	0x000239a8
    c5f8:	00022af4 	.word	0x00022af4
    c5fc:	0002399f 	.word	0x0002399f
    c600:	000248ac 	.word	0x000248ac
    c604:	00022b08 	.word	0x00022b08
    c608:	000239cd 	.word	0x000239cd
    c60c:	000239d3 	.word	0x000239d3
    c610:	000239d7 	.word	0x000239d7
    c614:	20009cec 	.word	0x20009cec
    c618:	20009ce8 	.word	0x20009ce8
    c61c:	000239b1 	.word	0x000239b1
    c620:	0001cefd 	.word	0x0001cefd
    c624:	0001cecf 	.word	0x0001cecf
    c628:	0001cea7 	.word	0x0001cea7
    c62c:	00026b4a 	.word	0x00026b4a
    c630:	000239dc 	.word	0x000239dc
    c634:	000239e2 	.word	0x000239e2
    c638:	00026ca3 	.word	0x00026ca3
    c63c:	000239e4 	.word	0x000239e4
    c640:	00026b48 	.word	0x00026b48

0000c644 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    c644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
    c648:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
    c64a:	684b      	ldr	r3, [r1, #4]
    c64c:	4605      	mov	r5, r0
    c64e:	460c      	mov	r4, r1
    c650:	4690      	mov	r8, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    c652:	688e      	ldr	r6, [r1, #8]
    c654:	b086      	sub	sp, #24
	return msg->hdr.desc.level;
    c656:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
    c65a:	b15b      	cbz	r3, c674 <log_output_msg_process+0x30>
    c65c:	4a13      	ldr	r2, [pc, #76]	; (c6ac <log_output_msg_process+0x68>)
    c65e:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
    c660:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    c664:	2900      	cmp	r1, #0
    c666:	db1f      	blt.n	c6a8 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
    c668:	7820      	ldrb	r0, [r4, #0]
    c66a:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    c66e:	f7ff fdff 	bl	c270 <log_source_name_get>
    c672:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    c674:	4621      	mov	r1, r4
    c676:	f851 2b10 	ldr.w	r2, [r1], #16
	*len = msg->hdr.desc.data_len;
    c67a:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
    c67c:	f3c2 2249 	ubfx	r2, r2, #9, #10
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    c680:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
    c682:	eb01 0402 	add.w	r4, r1, r2
    c686:	bf08      	it	eq
    c688:	2100      	moveq	r1, #0
	*len = msg->hdr.desc.data_len;
    c68a:	f3c0 00cb 	ubfx	r0, r0, #3, #12
    c68e:	e9cd 0803 	strd	r0, r8, [sp, #12]
    c692:	e9cd 1401 	strd	r1, r4, [sp, #4]
    c696:	2200      	movs	r2, #0
    c698:	4631      	mov	r1, r6
    c69a:	4628      	mov	r0, r5
    c69c:	9700      	str	r7, [sp, #0]
    c69e:	f7ff fe7d 	bl	c39c <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    c6a2:	b006      	add	sp, #24
    c6a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    c6a8:	2300      	movs	r3, #0
    c6aa:	e7e3      	b.n	c674 <log_output_msg_process+0x30>
    c6ac:	000227a8 	.word	0x000227a8

0000c6b0 <log_output_dropped_process>:
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    c6b0:	f242 730f 	movw	r3, #9999	; 0x270f
{
    c6b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    c6b6:	428b      	cmp	r3, r1
    c6b8:	bf28      	it	cs
    c6ba:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    c6bc:	6805      	ldr	r5, [r0, #0]
{
    c6be:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    c6c0:	2105      	movs	r1, #5
    c6c2:	4668      	mov	r0, sp
    c6c4:	4a0d      	ldr	r2, [pc, #52]	; (c6fc <log_output_dropped_process+0x4c>)
    c6c6:	f00f fe67 	bl	1c398 <snprintk>
    c6ca:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    c6cc:	6863      	ldr	r3, [r4, #4]
    c6ce:	4628      	mov	r0, r5
    c6d0:	220b      	movs	r2, #11
    c6d2:	685b      	ldr	r3, [r3, #4]
    c6d4:	490a      	ldr	r1, [pc, #40]	; (c700 <log_output_dropped_process+0x50>)
    c6d6:	f010 fbd9 	bl	1ce8c <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    c6da:	6863      	ldr	r3, [r4, #4]
    c6dc:	4632      	mov	r2, r6
    c6de:	4669      	mov	r1, sp
    c6e0:	4628      	mov	r0, r5
    c6e2:	685b      	ldr	r3, [r3, #4]
    c6e4:	f010 fbd2 	bl	1ce8c <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    c6e8:	6863      	ldr	r3, [r4, #4]
    c6ea:	221b      	movs	r2, #27
    c6ec:	4628      	mov	r0, r5
    c6ee:	685b      	ldr	r3, [r3, #4]
    c6f0:	4904      	ldr	r1, [pc, #16]	; (c704 <log_output_dropped_process+0x54>)
    c6f2:	f010 fbcb 	bl	1ce8c <buffer_write>
		     output->control_block->ctx);
}
    c6f6:	b002      	add	sp, #8
    c6f8:	bd70      	pop	{r4, r5, r6, pc}
    c6fa:	bf00      	nop
    c6fc:	000243f4 	.word	0x000243f4
    c700:	00023a03 	.word	0x00023a03
    c704:	000239e7 	.word	0x000239e7

0000c708 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    c708:	2100      	movs	r1, #0
    c70a:	2301      	movs	r3, #1
    c70c:	4a06      	ldr	r2, [pc, #24]	; (c728 <log_output_timestamp_freq_set+0x20>)
    c70e:	4290      	cmp	r0, r2
    c710:	d806      	bhi.n	c720 <log_output_timestamp_freq_set+0x18>
    c712:	4a06      	ldr	r2, [pc, #24]	; (c72c <log_output_timestamp_freq_set+0x24>)
    c714:	b901      	cbnz	r1, c718 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
    c716:	2301      	movs	r3, #1
    c718:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    c71a:	4b05      	ldr	r3, [pc, #20]	; (c730 <log_output_timestamp_freq_set+0x28>)
    c71c:	6018      	str	r0, [r3, #0]
}
    c71e:	4770      	bx	lr
		timestamp_div *= 2U;
    c720:	2101      	movs	r1, #1
		frequency /= 2U;
    c722:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    c724:	005b      	lsls	r3, r3, #1
    c726:	e7f2      	b.n	c70e <log_output_timestamp_freq_set+0x6>
    c728:	000f4240 	.word	0x000f4240
    c72c:	20009ce8 	.word	0x20009ce8
    c730:	20009cec 	.word	0x20009cec

0000c734 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    c734:	4b01      	ldr	r3, [pc, #4]	; (c73c <format_set+0x8>)
	return 0;
}
    c736:	2000      	movs	r0, #0
	log_format_current = log_type;
    c738:	6019      	str	r1, [r3, #0]
}
    c73a:	4770      	bx	lr
    c73c:	20009d04 	.word	0x20009d04

0000c740 <panic>:
	}
}

static void panic(struct log_backend const *const backend)
{
	in_panic = true;
    c740:	2201      	movs	r2, #1
    c742:	4b02      	ldr	r3, [pc, #8]	; (c74c <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    c744:	4802      	ldr	r0, [pc, #8]	; (c750 <panic+0x10>)
    c746:	701a      	strb	r2, [r3, #0]
    c748:	f010 bbb4 	b.w	1ceb4 <log_output_flush>
    c74c:	2000a1ad 	.word	0x2000a1ad
    c750:	00022b38 	.word	0x00022b38

0000c754 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    c754:	4801      	ldr	r0, [pc, #4]	; (c75c <dropped+0x8>)
    c756:	f7ff bfab 	b.w	c6b0 <log_output_dropped_process>
    c75a:	bf00      	nop
    c75c:	00022b38 	.word	0x00022b38

0000c760 <process>:
{
    c760:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    c762:	4b06      	ldr	r3, [pc, #24]	; (c77c <process+0x1c>)
{
    c764:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    c766:	6818      	ldr	r0, [r3, #0]
    c768:	f7ff fbcc 	bl	bf04 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
    c76c:	4621      	mov	r1, r4
}
    c76e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    c772:	4603      	mov	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
    c774:	220f      	movs	r2, #15
    c776:	4802      	ldr	r0, [pc, #8]	; (c780 <process+0x20>)
    c778:	4718      	bx	r3
    c77a:	bf00      	nop
    c77c:	20009d04 	.word	0x20009d04
    c780:	00022b38 	.word	0x00022b38

0000c784 <char_out>:
{
    c784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c786:	460d      	mov	r5, r1
    c788:	4604      	mov	r4, r0
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    c78a:	4f06      	ldr	r7, [pc, #24]	; (c7a4 <char_out+0x20>)
    c78c:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
    c78e:	42b4      	cmp	r4, r6
    c790:	d101      	bne.n	c796 <char_out+0x12>
}
    c792:	4628      	mov	r0, r5
    c794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
    c796:	f814 1b01 	ldrb.w	r1, [r4], #1
    c79a:	68bb      	ldr	r3, [r7, #8]
    c79c:	4801      	ldr	r0, [pc, #4]	; (c7a4 <char_out+0x20>)
    c79e:	685b      	ldr	r3, [r3, #4]
    c7a0:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    c7a2:	e7f4      	b.n	c78e <char_out+0xa>
    c7a4:	000223ec 	.word	0x000223ec

0000c7a8 <read_blvl>:
}

static ssize_t read_blvl(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, void *buf,
			       uint16_t len, uint16_t offset)
{
    c7a8:	b510      	push	{r4, lr}
	uint8_t lvl8 = battery_level;
    c7aa:	4c08      	ldr	r4, [pc, #32]	; (c7cc <read_blvl+0x24>)
{
    c7ac:	b086      	sub	sp, #24
	uint8_t lvl8 = battery_level;
    c7ae:	7824      	ldrb	r4, [r4, #0]
    c7b0:	f88d 4017 	strb.w	r4, [sp, #23]

	return bt_gatt_attr_read(conn, attr, buf, len, offset, &lvl8,
    c7b4:	2401      	movs	r4, #1
    c7b6:	9402      	str	r4, [sp, #8]
    c7b8:	f10d 0417 	add.w	r4, sp, #23
    c7bc:	9401      	str	r4, [sp, #4]
    c7be:	f8bd 4020 	ldrh.w	r4, [sp, #32]
    c7c2:	9400      	str	r4, [sp, #0]
    c7c4:	f012 fda7 	bl	1f316 <bt_gatt_attr_read>
				 sizeof(lvl8));
}
    c7c8:	b006      	add	sp, #24
    c7ca:	bd10      	pop	{r4, pc}
    c7cc:	2000880b 	.word	0x2000880b

0000c7d0 <blvl_ccc_cfg_changed>:
{
    c7d0:	b580      	push	{r7, lr}
	LOG_INF("BAS Notifications %s", notif_enabled ? "enabled" : "disabled");
    c7d2:	4a0d      	ldr	r2, [pc, #52]	; (c808 <blvl_ccc_cfg_changed+0x38>)
    c7d4:	4b0d      	ldr	r3, [pc, #52]	; (c80c <blvl_ccc_cfg_changed+0x3c>)
{
    c7d6:	af00      	add	r7, sp, #0
	LOG_INF("BAS Notifications %s", notif_enabled ? "enabled" : "disabled");
    c7d8:	b08a      	sub	sp, #40	; 0x28
    c7da:	2901      	cmp	r1, #1
    c7dc:	bf08      	it	eq
    c7de:	4613      	moveq	r3, r2
    c7e0:	466a      	mov	r2, sp
    c7e2:	490b      	ldr	r1, [pc, #44]	; (c810 <blvl_ccc_cfg_changed+0x40>)
    c7e4:	6151      	str	r1, [r2, #20]
    c7e6:	490b      	ldr	r1, [pc, #44]	; (c814 <blvl_ccc_cfg_changed+0x44>)
    c7e8:	e9c2 1306 	strd	r1, r3, [r2, #24]
    c7ec:	f240 3301 	movw	r3, #769	; 0x301
    c7f0:	8413      	strh	r3, [r2, #32]
    c7f2:	4b09      	ldr	r3, [pc, #36]	; (c818 <blvl_ccc_cfg_changed+0x48>)
    c7f4:	f842 3f10 	str.w	r3, [r2, #16]!
    c7f8:	2300      	movs	r3, #0
    c7fa:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    c7fe:	4807      	ldr	r0, [pc, #28]	; (c81c <blvl_ccc_cfg_changed+0x4c>)
    c800:	f7ff fd58 	bl	c2b4 <z_impl_z_log_msg_static_create>
}
    c804:	46bd      	mov	sp, r7
    c806:	bd80      	pop	{r7, pc}
    c808:	00023a71 	.word	0x00023a71
    c80c:	00023a79 	.word	0x00023a79
    c810:	00023a82 	.word	0x00023a82
    c814:	00023a9b 	.word	0x00023a9b
    c818:	01000004 	.word	0x01000004
    c81c:	000227b0 	.word	0x000227b0

0000c820 <bt_bas_set_battery_level>:
{
	return battery_level;
}

int bt_bas_set_battery_level(uint8_t level)
{
    c820:	b500      	push	{lr}
	int rc;

	if (level > 100U) {
    c822:	2864      	cmp	r0, #100	; 0x64
{
    c824:	b089      	sub	sp, #36	; 0x24
    c826:	f88d 0007 	strb.w	r0, [sp, #7]
	if (level > 100U) {
    c82a:	d819      	bhi.n	c860 <bt_bas_set_battery_level+0x40>
		return -EINVAL;
	}

	battery_level = level;
    c82c:	4b0e      	ldr	r3, [pc, #56]	; (c868 <bt_bas_set_battery_level+0x48>)
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
    c82e:	2218      	movs	r2, #24
    c830:	7018      	strb	r0, [r3, #0]
    c832:	2100      	movs	r1, #0
    c834:	a802      	add	r0, sp, #8
    c836:	f015 f937 	bl	21aa8 <memset>

	params.attr = attr;
    c83a:	4b0c      	ldr	r3, [pc, #48]	; (c86c <bt_bas_set_battery_level+0x4c>)
	params.len = len;
#if defined(CONFIG_BT_EATT)
	params.chan_opt = BT_ATT_CHAN_OPT_NONE;
#endif /* CONFIG_BT_EATT */

	return bt_gatt_notify_cb(conn, &params);
    c83c:	2000      	movs	r0, #0
	params.attr = attr;
    c83e:	9303      	str	r3, [sp, #12]
	params.data = data;
    c840:	f10d 0307 	add.w	r3, sp, #7
    c844:	9304      	str	r3, [sp, #16]
	params.len = len;
    c846:	2301      	movs	r3, #1
	return bt_gatt_notify_cb(conn, &params);
    c848:	a902      	add	r1, sp, #8
	params.len = len;
    c84a:	f8ad 3014 	strh.w	r3, [sp, #20]
	return bt_gatt_notify_cb(conn, &params);
    c84e:	f007 fc91 	bl	14174 <bt_gatt_notify_cb>

	rc = bt_gatt_notify(NULL, &bas.attrs[1], &level, sizeof(level));

	return rc == -ENOTCONN ? 0 : rc;
    c852:	f110 0f80 	cmn.w	r0, #128	; 0x80
    c856:	bf08      	it	eq
    c858:	2000      	moveq	r0, #0
}
    c85a:	b009      	add	sp, #36	; 0x24
    c85c:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
    c860:	f06f 0015 	mvn.w	r0, #21
    c864:	e7f9      	b.n	c85a <bt_bas_set_battery_level+0x3a>
    c866:	bf00      	nop
    c868:	2000880b 	.word	0x2000880b
    c86c:	00022bc0 	.word	0x00022bc0

0000c870 <hrs_init>:

static int hrs_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	hrs_blsc = 0x01;
    c870:	2201      	movs	r2, #1
    c872:	4b02      	ldr	r3, [pc, #8]	; (c87c <hrs_init+0xc>)

	return 0;
}
    c874:	2000      	movs	r0, #0
	hrs_blsc = 0x01;
    c876:	701a      	strb	r2, [r3, #0]
}
    c878:	4770      	bx	lr
    c87a:	bf00      	nop
    c87c:	2000a1b0 	.word	0x2000a1b0

0000c880 <read_blsc>:
{
    c880:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &hrs_blsc,
    c882:	2401      	movs	r4, #1
    c884:	9402      	str	r4, [sp, #8]
    c886:	4c04      	ldr	r4, [pc, #16]	; (c898 <read_blsc+0x18>)
    c888:	9401      	str	r4, [sp, #4]
    c88a:	f8bd 4018 	ldrh.w	r4, [sp, #24]
    c88e:	9400      	str	r4, [sp, #0]
    c890:	f012 fd41 	bl	1f316 <bt_gatt_attr_read>
}
    c894:	b004      	add	sp, #16
    c896:	bd10      	pop	{r4, pc}
    c898:	2000a1b0 	.word	0x2000a1b0

0000c89c <hrmc_ccc_cfg_changed>:
{
    c89c:	b580      	push	{r7, lr}
	LOG_INF("HRS notifications %s", notif_enabled ? "enabled" : "disabled");
    c89e:	4a0d      	ldr	r2, [pc, #52]	; (c8d4 <hrmc_ccc_cfg_changed+0x38>)
    c8a0:	4b0d      	ldr	r3, [pc, #52]	; (c8d8 <hrmc_ccc_cfg_changed+0x3c>)
{
    c8a2:	af00      	add	r7, sp, #0
	LOG_INF("HRS notifications %s", notif_enabled ? "enabled" : "disabled");
    c8a4:	b08a      	sub	sp, #40	; 0x28
    c8a6:	2901      	cmp	r1, #1
    c8a8:	bf08      	it	eq
    c8aa:	4613      	moveq	r3, r2
    c8ac:	466a      	mov	r2, sp
    c8ae:	490b      	ldr	r1, [pc, #44]	; (c8dc <hrmc_ccc_cfg_changed+0x40>)
    c8b0:	6151      	str	r1, [r2, #20]
    c8b2:	490b      	ldr	r1, [pc, #44]	; (c8e0 <hrmc_ccc_cfg_changed+0x44>)
    c8b4:	e9c2 1306 	strd	r1, r3, [r2, #24]
    c8b8:	f240 3301 	movw	r3, #769	; 0x301
    c8bc:	8413      	strh	r3, [r2, #32]
    c8be:	4b09      	ldr	r3, [pc, #36]	; (c8e4 <hrmc_ccc_cfg_changed+0x48>)
    c8c0:	f842 3f10 	str.w	r3, [r2, #16]!
    c8c4:	2300      	movs	r3, #0
    c8c6:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    c8ca:	4807      	ldr	r0, [pc, #28]	; (c8e8 <hrmc_ccc_cfg_changed+0x4c>)
    c8cc:	f7ff fcf2 	bl	c2b4 <z_impl_z_log_msg_static_create>
}
    c8d0:	46bd      	mov	sp, r7
    c8d2:	bd80      	pop	{r7, pc}
    c8d4:	00023a71 	.word	0x00023a71
    c8d8:	00023a79 	.word	0x00023a79
    c8dc:	00023ab4 	.word	0x00023ab4
    c8e0:	00023acd 	.word	0x00023acd
    c8e4:	01000004 	.word	0x01000004
    c8e8:	00022848 	.word	0x00022848

0000c8ec <bt_hrs_notify>:
int bt_hrs_notify(uint16_t heartrate)
{
	int rc;
	static uint8_t hrm[2];

	hrm[0] = 0x06; /* uint8, sensor contact */
    c8ec:	2306      	movs	r3, #6
{
    c8ee:	b510      	push	{r4, lr}
	hrm[0] = 0x06; /* uint8, sensor contact */
    c8f0:	4c0c      	ldr	r4, [pc, #48]	; (c924 <bt_hrs_notify+0x38>)
{
    c8f2:	b086      	sub	sp, #24
	memset(&params, 0, sizeof(params));
    c8f4:	2218      	movs	r2, #24
	hrm[1] = heartrate;
    c8f6:	7060      	strb	r0, [r4, #1]
    c8f8:	2100      	movs	r1, #0
    c8fa:	4668      	mov	r0, sp
	hrm[0] = 0x06; /* uint8, sensor contact */
    c8fc:	7023      	strb	r3, [r4, #0]
    c8fe:	f015 f8d3 	bl	21aa8 <memset>
	params.attr = attr;
    c902:	4b09      	ldr	r3, [pc, #36]	; (c928 <bt_hrs_notify+0x3c>)
	return bt_gatt_notify_cb(conn, &params);
    c904:	4669      	mov	r1, sp
	params.data = data;
    c906:	e9cd 3401 	strd	r3, r4, [sp, #4]
	params.len = len;
    c90a:	2302      	movs	r3, #2
	return bt_gatt_notify_cb(conn, &params);
    c90c:	2000      	movs	r0, #0
	params.len = len;
    c90e:	f8ad 300c 	strh.w	r3, [sp, #12]
	return bt_gatt_notify_cb(conn, &params);
    c912:	f007 fc2f 	bl	14174 <bt_gatt_notify_cb>

	rc = bt_gatt_notify(NULL, &hrs_svc.attrs[1], &hrm, sizeof(hrm));

	return rc == -ENOTCONN ? 0 : rc;
    c916:	f110 0f80 	cmn.w	r0, #128	; 0x80
}
    c91a:	bf08      	it	eq
    c91c:	2000      	moveq	r0, #0
    c91e:	b006      	add	sp, #24
    c920:	bd10      	pop	{r4, pc}
    c922:	bf00      	nop
    c924:	2000a1ae 	.word	0x2000a1ae
    c928:	00022c10 	.word	0x00022c10

0000c92c <ipc_service_open_instance>:
#include <zephyr/device.h>

LOG_MODULE_REGISTER(ipc_service, CONFIG_IPC_SERVICE_LOG_LEVEL);

int ipc_service_open_instance(const struct device *instance)
{
    c92c:	b598      	push	{r3, r4, r7, lr}
    c92e:	af00      	add	r7, sp, #0
	const struct ipc_service_backend *backend;

	if (!instance) {
    c930:	b998      	cbnz	r0, c95a <ipc_service_open_instance+0x2e>
		LOG_ERR("Invalid instance");
    c932:	466c      	mov	r4, sp
    c934:	b088      	sub	sp, #32
    c936:	466a      	mov	r2, sp
    c938:	4b15      	ldr	r3, [pc, #84]	; (c990 <ipc_service_open_instance+0x64>)
    c93a:	4816      	ldr	r0, [pc, #88]	; (c994 <ipc_service_open_instance+0x68>)
    c93c:	6153      	str	r3, [r2, #20]
    c93e:	4b16      	ldr	r3, [pc, #88]	; (c998 <ipc_service_open_instance+0x6c>)
    c940:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c944:	6193      	str	r3, [r2, #24]
    c946:	2303      	movs	r3, #3
    c948:	f842 3f10 	str.w	r3, [r2, #16]!
    c94c:	f010 fb01 	bl	1cf52 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    c950:	f06f 0015 	mvn.w	r0, #21
    c954:	46a5      	mov	sp, r4
		/* maybe not needed on backend */
		return 0;
	}

	return backend->open_instance(instance);
}
    c956:	46bd      	mov	sp, r7
    c958:	bd98      	pop	{r3, r4, r7, pc}
	backend = (const struct ipc_service_backend *) instance->api;
    c95a:	6883      	ldr	r3, [r0, #8]
	if (!backend) {
    c95c:	b993      	cbnz	r3, c984 <ipc_service_open_instance+0x58>
		LOG_ERR("Invalid backend configuration");
    c95e:	466c      	mov	r4, sp
    c960:	b088      	sub	sp, #32
    c962:	466a      	mov	r2, sp
    c964:	4b0d      	ldr	r3, [pc, #52]	; (c99c <ipc_service_open_instance+0x70>)
    c966:	480b      	ldr	r0, [pc, #44]	; (c994 <ipc_service_open_instance+0x68>)
    c968:	6153      	str	r3, [r2, #20]
    c96a:	4b0b      	ldr	r3, [pc, #44]	; (c998 <ipc_service_open_instance+0x6c>)
    c96c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c970:	6193      	str	r3, [r2, #24]
    c972:	2303      	movs	r3, #3
    c974:	f842 3f10 	str.w	r3, [r2, #16]!
    c978:	f010 faeb 	bl	1cf52 <z_log_msg_static_create.constprop.0>
		return -EIO;
    c97c:	f06f 0004 	mvn.w	r0, #4
    c980:	46a5      	mov	sp, r4
    c982:	e7e8      	b.n	c956 <ipc_service_open_instance+0x2a>
	if (!backend->open_instance) {
    c984:	681b      	ldr	r3, [r3, #0]
    c986:	b10b      	cbz	r3, c98c <ipc_service_open_instance+0x60>
	return backend->open_instance(instance);
    c988:	4798      	blx	r3
    c98a:	e7e4      	b.n	c956 <ipc_service_open_instance+0x2a>
		return 0;
    c98c:	4618      	mov	r0, r3
    c98e:	e7e2      	b.n	c956 <ipc_service_open_instance+0x2a>
    c990:	00023ae6 	.word	0x00023ae6
    c994:	00022850 	.word	0x00022850
    c998:	00023bae 	.word	0x00023bae
    c99c:	00023afb 	.word	0x00023afb

0000c9a0 <ipc_service_register_endpoint>:
}

int ipc_service_register_endpoint(const struct device *instance,
				  struct ipc_ept *ept,
				  const struct ipc_ept_cfg *cfg)
{
    c9a0:	b5b0      	push	{r4, r5, r7, lr}
    c9a2:	af00      	add	r7, sp, #0
	const struct ipc_service_backend *backend;

	if (!instance || !ept || !cfg) {
    c9a4:	b108      	cbz	r0, c9aa <ipc_service_register_endpoint+0xa>
    c9a6:	b101      	cbz	r1, c9aa <ipc_service_register_endpoint+0xa>
    c9a8:	b99a      	cbnz	r2, c9d2 <ipc_service_register_endpoint+0x32>
		LOG_ERR("Invalid instance, endpoint or configuration");
    c9aa:	466c      	mov	r4, sp
    c9ac:	b088      	sub	sp, #32
    c9ae:	466a      	mov	r2, sp
    c9b0:	4b16      	ldr	r3, [pc, #88]	; (ca0c <ipc_service_register_endpoint+0x6c>)
    c9b2:	4817      	ldr	r0, [pc, #92]	; (ca10 <ipc_service_register_endpoint+0x70>)
    c9b4:	6153      	str	r3, [r2, #20]
    c9b6:	4b17      	ldr	r3, [pc, #92]	; (ca14 <ipc_service_register_endpoint+0x74>)
    c9b8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c9bc:	6193      	str	r3, [r2, #24]
    c9be:	2303      	movs	r3, #3
    c9c0:	f842 3f10 	str.w	r3, [r2, #16]!
    c9c4:	f010 fac5 	bl	1cf52 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    c9c8:	f06f 0015 	mvn.w	r0, #21
    c9cc:	46a5      	mov	sp, r4
	LOG_DBG("Register endpoint %s", cfg->name ? cfg->name : "");

	ept->instance = instance;

	return backend->register_endpoint(instance, &ept->token, cfg);
}
    c9ce:	46bd      	mov	sp, r7
    c9d0:	bdb0      	pop	{r4, r5, r7, pc}
	backend = (const struct ipc_service_backend *) instance->api;
    c9d2:	6884      	ldr	r4, [r0, #8]
	if (!backend || !backend->register_endpoint) {
    c9d4:	b10c      	cbz	r4, c9da <ipc_service_register_endpoint+0x3a>
    c9d6:	68e5      	ldr	r5, [r4, #12]
    c9d8:	b995      	cbnz	r5, ca00 <ipc_service_register_endpoint+0x60>
		LOG_ERR("Invalid backend configuration");
    c9da:	466c      	mov	r4, sp
    c9dc:	b088      	sub	sp, #32
    c9de:	466a      	mov	r2, sp
    c9e0:	4b0d      	ldr	r3, [pc, #52]	; (ca18 <ipc_service_register_endpoint+0x78>)
    c9e2:	480b      	ldr	r0, [pc, #44]	; (ca10 <ipc_service_register_endpoint+0x70>)
    c9e4:	6153      	str	r3, [r2, #20]
    c9e6:	4b0b      	ldr	r3, [pc, #44]	; (ca14 <ipc_service_register_endpoint+0x74>)
    c9e8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c9ec:	6193      	str	r3, [r2, #24]
    c9ee:	2303      	movs	r3, #3
    c9f0:	f842 3f10 	str.w	r3, [r2, #16]!
    c9f4:	f010 faad 	bl	1cf52 <z_log_msg_static_create.constprop.0>
		return -EIO;
    c9f8:	f06f 0004 	mvn.w	r0, #4
    c9fc:	46a5      	mov	sp, r4
    c9fe:	e7e6      	b.n	c9ce <ipc_service_register_endpoint+0x2e>
	ept->instance = instance;
    ca00:	f841 0b04 	str.w	r0, [r1], #4
	return backend->register_endpoint(instance, &ept->token, cfg);
    ca04:	68e3      	ldr	r3, [r4, #12]
    ca06:	4798      	blx	r3
    ca08:	e7e1      	b.n	c9ce <ipc_service_register_endpoint+0x2e>
    ca0a:	bf00      	nop
    ca0c:	00023b1d 	.word	0x00023b1d
    ca10:	00022850 	.word	0x00022850
    ca14:	00023b90 	.word	0x00023b90
    ca18:	00023afb 	.word	0x00023afb

0000ca1c <ipc_service_send>:
	return 0;
}


int ipc_service_send(struct ipc_ept *ept, const void *data, size_t len)
{
    ca1c:	b5b0      	push	{r4, r5, r7, lr}
    ca1e:	4613      	mov	r3, r2
	const struct ipc_service_backend *backend;

	if (!ept) {
    ca20:	4604      	mov	r4, r0
{
    ca22:	af00      	add	r7, sp, #0
	if (!ept) {
    ca24:	b998      	cbnz	r0, ca4e <ipc_service_send+0x32>
		LOG_ERR("Invalid endpoint");
    ca26:	466c      	mov	r4, sp
    ca28:	b088      	sub	sp, #32
    ca2a:	466a      	mov	r2, sp
    ca2c:	4b20      	ldr	r3, [pc, #128]	; (cab0 <ipc_service_send+0x94>)
    ca2e:	4821      	ldr	r0, [pc, #132]	; (cab4 <ipc_service_send+0x98>)
    ca30:	6153      	str	r3, [r2, #20]
    ca32:	4b21      	ldr	r3, [pc, #132]	; (cab8 <ipc_service_send+0x9c>)
    ca34:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    ca38:	6193      	str	r3, [r2, #24]
    ca3a:	2303      	movs	r3, #3
    ca3c:	f842 3f10 	str.w	r3, [r2, #16]!
    ca40:	f010 fa87 	bl	1cf52 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    ca44:	f06f 0015 	mvn.w	r0, #21
    ca48:	46a5      	mov	sp, r4
		LOG_ERR("Invalid backend configuration");
		return -EIO;
	}

	return backend->send(ept->instance, ept->token, data, len);
}
    ca4a:	46bd      	mov	sp, r7
    ca4c:	bdb0      	pop	{r4, r5, r7, pc}
	if (!ept->instance) {
    ca4e:	6800      	ldr	r0, [r0, #0]
    ca50:	b990      	cbnz	r0, ca78 <ipc_service_send+0x5c>
		LOG_ERR("Endpoint not registered\n");
    ca52:	466c      	mov	r4, sp
    ca54:	b088      	sub	sp, #32
    ca56:	466a      	mov	r2, sp
    ca58:	4b18      	ldr	r3, [pc, #96]	; (cabc <ipc_service_send+0xa0>)
    ca5a:	4816      	ldr	r0, [pc, #88]	; (cab4 <ipc_service_send+0x98>)
    ca5c:	6153      	str	r3, [r2, #20]
    ca5e:	4b16      	ldr	r3, [pc, #88]	; (cab8 <ipc_service_send+0x9c>)
    ca60:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    ca64:	6193      	str	r3, [r2, #24]
    ca66:	2303      	movs	r3, #3
    ca68:	f842 3f10 	str.w	r3, [r2, #16]!
    ca6c:	f010 fa71 	bl	1cf52 <z_log_msg_static_create.constprop.0>
		return -ENOENT;
    ca70:	f06f 0001 	mvn.w	r0, #1
    ca74:	46a5      	mov	sp, r4
    ca76:	e7e8      	b.n	ca4a <ipc_service_send+0x2e>
	backend = ept->instance->api;
    ca78:	6882      	ldr	r2, [r0, #8]
	if (!backend || !backend->send) {
    ca7a:	b10a      	cbz	r2, ca80 <ipc_service_send+0x64>
    ca7c:	6895      	ldr	r5, [r2, #8]
    ca7e:	b995      	cbnz	r5, caa6 <ipc_service_send+0x8a>
		LOG_ERR("Invalid backend configuration");
    ca80:	466c      	mov	r4, sp
    ca82:	b088      	sub	sp, #32
    ca84:	466a      	mov	r2, sp
    ca86:	4b0e      	ldr	r3, [pc, #56]	; (cac0 <ipc_service_send+0xa4>)
    ca88:	480a      	ldr	r0, [pc, #40]	; (cab4 <ipc_service_send+0x98>)
    ca8a:	6153      	str	r3, [r2, #20]
    ca8c:	4b0a      	ldr	r3, [pc, #40]	; (cab8 <ipc_service_send+0x9c>)
    ca8e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    ca92:	6193      	str	r3, [r2, #24]
    ca94:	2303      	movs	r3, #3
    ca96:	f842 3f10 	str.w	r3, [r2, #16]!
    ca9a:	f010 fa5a 	bl	1cf52 <z_log_msg_static_create.constprop.0>
		return -EIO;
    ca9e:	f06f 0004 	mvn.w	r0, #4
    caa2:	46a5      	mov	sp, r4
    caa4:	e7d1      	b.n	ca4a <ipc_service_send+0x2e>
	return backend->send(ept->instance, ept->token, data, len);
    caa6:	460a      	mov	r2, r1
    caa8:	6861      	ldr	r1, [r4, #4]
    caaa:	47a8      	blx	r5
    caac:	e7cd      	b.n	ca4a <ipc_service_send+0x2e>
    caae:	bf00      	nop
    cab0:	00023b4d 	.word	0x00023b4d
    cab4:	00022850 	.word	0x00022850
    cab8:	00023b7f 	.word	0x00023b7f
    cabc:	00023b62 	.word	0x00023b62
    cac0:	00023afb 	.word	0x00023afb

0000cac4 <bound_cb>:
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
    cac4:	2300      	movs	r3, #0
    cac6:	2201      	movs	r2, #1
		k_mutex_unlock(&rpmsg_inst->mtx);
	}
}

static void bound_cb(struct ipc_rpmsg_ept *ept)
{
    cac8:	b513      	push	{r0, r1, r4, lr}
    caca:	4604      	mov	r4, r0
    cacc:	e9cd 3200 	strd	r3, r2, [sp]
    cad0:	4b07      	ldr	r3, [pc, #28]	; (caf0 <bound_cb+0x2c>)
    cad2:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
    cad6:	f00c f9f3 	bl	18ec0 <rpmsg_send_offchannel_raw>
	rpmsg_send(&ept->ep, (uint8_t *)"", 0);

	if (ept->cb->bound) {
    cada:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    cadc:	681b      	ldr	r3, [r3, #0]
    cade:	b123      	cbz	r3, caea <bound_cb+0x26>
		ept->cb->bound(ept->priv);
    cae0:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
	}
}
    cae2:	b002      	add	sp, #8
    cae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ept->cb->bound(ept->priv);
    cae8:	4718      	bx	r3
}
    caea:	b002      	add	sp, #8
    caec:	bd10      	pop	{r4, pc}
    caee:	bf00      	nop
    caf0:	00023606 	.word	0x00023606

0000caf4 <shared_memory_prepare>:
__ssp_bos_icheck3(memset, void *, int)
    caf4:	2000      	movs	r0, #0
    caf6:	4b01      	ldr	r3, [pc, #4]	; (cafc <shared_memory_prepare+0x8>)
    caf8:	6018      	str	r0, [r3, #0]
			memset((void *) backend_config->shm_addr, 0, VDEV_STATUS_SIZE);
		}
	}

	return 0;
}
    cafa:	4770      	bx	lr
    cafc:	20070000 	.word	0x20070000

0000cb00 <advertise_ept>:
{
    cb00:	b530      	push	{r4, r5, lr}
    cb02:	460c      	mov	r4, r1
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
    cb04:	490e      	ldr	r1, [pc, #56]	; (cb40 <advertise_ept+0x40>)
{
    cb06:	b085      	sub	sp, #20
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
    cb08:	9102      	str	r1, [sp, #8]
    cb0a:	f8d0 1198 	ldr.w	r1, [r0, #408]	; 0x198
{
    cb0e:	4605      	mov	r5, r0
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
    cb10:	e9cd 3100 	strd	r3, r1, [sp]
    cb14:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
    cb18:	f04f 33ff 	mov.w	r3, #4294967295
    cb1c:	4620      	mov	r0, r4
    cb1e:	f00c fa15 	bl	18f4c <rpmsg_create_ept>
	if (err != 0) {
    cb22:	b950      	cbnz	r0, cb3a <advertise_ept+0x3a>
	rpmsg_ept->bound = true;
    cb24:	2301      	movs	r3, #1
    cb26:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	if (rpmsg_inst->bound_cb) {
    cb2a:	f8d5 3194 	ldr.w	r3, [r5, #404]	; 0x194
    cb2e:	b123      	cbz	r3, cb3a <advertise_ept+0x3a>
		rpmsg_inst->bound_cb(rpmsg_ept);
    cb30:	4620      	mov	r0, r4
}
    cb32:	b005      	add	sp, #20
    cb34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		rpmsg_inst->bound_cb(rpmsg_ept);
    cb38:	4718      	bx	r3
}
    cb3a:	b005      	add	sp, #20
    cb3c:	bd30      	pop	{r4, r5, pc}
    cb3e:	bf00      	nop
    cb40:	0001d049 	.word	0x0001d049

0000cb44 <get_ept>:
{
    cb44:	b538      	push	{r3, r4, r5, lr}
    cb46:	460c      	mov	r4, r1
	ept = get_ept_slot_with_name(rpmsg_inst, name);
    cb48:	4611      	mov	r1, r2
{
    cb4a:	4605      	mov	r5, r0
	ept = get_ept_slot_with_name(rpmsg_inst, name);
    cb4c:	f010 fa7e 	bl	1d04c <get_ept_slot_with_name>
	if (ept != NULL) {
    cb50:	4603      	mov	r3, r0
    cb52:	b938      	cbnz	r0, cb64 <get_ept+0x20>
	return get_ept_slot_with_name(rpmsg_inst, "");
    cb54:	4628      	mov	r0, r5
    cb56:	4904      	ldr	r1, [pc, #16]	; (cb68 <get_ept+0x24>)
    cb58:	f010 fa78 	bl	1d04c <get_ept_slot_with_name>
    cb5c:	4603      	mov	r3, r0
	if (ept != NULL) {
    cb5e:	2000      	movs	r0, #0
		(*rpmsg_ept) = ept;
    cb60:	6023      	str	r3, [r4, #0]
}
    cb62:	bd38      	pop	{r3, r4, r5, pc}
		return true;
    cb64:	2001      	movs	r0, #1
    cb66:	e7fb      	b.n	cb60 <get_ept+0x1c>
    cb68:	00023606 	.word	0x00023606

0000cb6c <open>:
{
    cb6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    cb70:	2301      	movs	r3, #1
    cb72:	4681      	mov	r9, r0
	struct backend_data_t *data = instance->data;
    cb74:	6905      	ldr	r5, [r0, #16]
	const struct backend_config_t *conf = instance->config;
    cb76:	6846      	ldr	r6, [r0, #4]
{
    cb78:	b085      	sub	sp, #20
	if (!atomic_cas(&data->state, STATE_READY, STATE_BUSY)) {
    cb7a:	f505 7755 	add.w	r7, r5, #852	; 0x354
    cb7e:	e8d7 2fef 	ldaex	r2, [r7]
    cb82:	2a00      	cmp	r2, #0
    cb84:	d103      	bne.n	cb8e <open+0x22>
    cb86:	e8c7 3fe1 	stlex	r1, r3, [r7]
    cb8a:	2900      	cmp	r1, #0
    cb8c:	d1f7      	bne.n	cb7e <open+0x12>
    cb8e:	f040 80b8 	bne.w	cd02 <open+0x196>
static inline unsigned int optimal_num_desc(size_t shm_size, unsigned int buf_size)
{
	size_t available, single_alloc;
	unsigned int num_desc;

	available = shm_size - VDEV_STATUS_SIZE;
    cb92:	68b3      	ldr	r3, [r6, #8]
	single_alloc = VRING_COUNT * (vq_ring_size(1, buf_size) + vring_size(1, VRING_ALIGNMENT));
    cb94:	6ab2      	ldr	r2, [r6, #40]	; 0x28
	available = shm_size - VDEV_STATUS_SIZE;
    cb96:	3b04      	subs	r3, #4
	single_alloc = VRING_COUNT * (vq_ring_size(1, buf_size) + vring_size(1, VRING_ALIGNMENT));
    cb98:	3226      	adds	r2, #38	; 0x26
 * @return most significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_msb_set(uint32_t op)
{
	if (op == 0) {
    cb9a:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
    cb9e:	ea4f 0142 	mov.w	r1, r2, lsl #1

	num_desc = (unsigned int) (available / single_alloc);
    cba2:	bf26      	itte	cs
    cba4:	fbb3 f3f1 	udivcs	r3, r3, r1
		return 0;
	}

	return 32 - __builtin_clz(op);
    cba8:	fab3 f383 	clzcs	r3, r3
		return 0;
    cbac:	2300      	movcc	r3, #0

	return (1 << (find_msb_set(num_desc) - 1));
    cbae:	f04f 0401 	mov.w	r4, #1
	return 32 - __builtin_clz(op);
    cbb2:	bf28      	it	cs
    cbb4:	f1c3 0320 	rsbcs	r3, r3, #32
    cbb8:	3b01      	subs	r3, #1
	if (num_desc == 0) {
    cbba:	409c      	lsls	r4, r3
	err = vr_shm_configure(&data->vr, conf);
    cbbc:	f505 78d8 	add.w	r8, r5, #432	; 0x1b0
	if (num_desc == 0) {
    cbc0:	f000 8099 	beq.w	ccf6 <open+0x18a>

static inline int vring_size(unsigned int num, unsigned long align)
{
	int size;

	size = num * sizeof(struct vring_desc);
    cbc4:	2210      	movs	r2, #16
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
	size += sizeof(struct vring_used) +
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
    cbc6:	2108      	movs	r1, #8
	vr->shm_addr = conf->shm_addr + VDEV_STATUS_SIZE;
    cbc8:	6870      	ldr	r0, [r6, #4]
	size = num * sizeof(struct vring_desc);
    cbca:	409a      	lsls	r2, r3
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
    cbcc:	eb02 0244 	add.w	r2, r2, r4, lsl #1
    cbd0:	3004      	adds	r0, #4
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
    cbd2:	4099      	lsls	r1, r3
	size = (size + align - 1) & ~(align - 1);
    cbd4:	3209      	adds	r2, #9
    cbd6:	f8c5 0248 	str.w	r0, [r5, #584]	; 0x248
	size += sizeof(struct vring_used) +
    cbda:	3106      	adds	r1, #6
	size = (size + align - 1) & ~(align - 1);
    cbdc:	f022 0203 	bic.w	r2, r2, #3
	size += sizeof(struct vring_used) +
    cbe0:	440a      	add	r2, r1
	return (buf_size * num);
    cbe2:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    cbe4:	fa01 fc03 	lsl.w	ip, r1, r3
	       (VRING_COUNT * vring_size(num, VRING_ALIGNMENT)));
    cbe8:	0051      	lsls	r1, r2, #1
	vr->shm_size = shm_size(num_desc, conf->buffer_size) - VDEV_STATUS_SIZE;
    cbea:	eb01 014c 	add.w	r1, r1, ip, lsl #1
    cbee:	f8c5 124c 	str.w	r1, [r5, #588]	; 0x24c
	return (buf_size * num);
    cbf2:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    cbf4:	4099      	lsls	r1, r3
	vr->rx_addr = vr->shm_addr + VRING_COUNT * vq_ring_size(num_desc, conf->buffer_size);
    cbf6:	eb00 0341 	add.w	r3, r0, r1, lsl #1
    cbfa:	f8c5 3240 	str.w	r3, [r5, #576]	; 0x240
	vr->tx_addr = ROUND_UP(vr->rx_addr + vring_size(num_desc, VRING_ALIGNMENT),
    cbfe:	3303      	adds	r3, #3
    cc00:	4413      	add	r3, r2
    cc02:	f023 0303 	bic.w	r3, r3, #3
    cc06:	f8c5 323c 	str.w	r3, [r5, #572]	; 0x23c
	vr->status_reg_addr = conf->shm_addr;
    cc0a:	6873      	ldr	r3, [r6, #4]
	vr->vring_size = num_desc;
    cc0c:	f8c5 4244 	str.w	r4, [r5, #580]	; 0x244
	vr->status_reg_addr = conf->shm_addr;
    cc10:	f8c5 3238 	str.w	r3, [r5, #568]	; 0x238
	data->vr.notify_cb = virtio_notify_cb;
    cc14:	4b3c      	ldr	r3, [pc, #240]	; (cd08 <open+0x19c>)
	err = ipc_static_vrings_init(&data->vr, conf->role);
    cc16:	4640      	mov	r0, r8
	data->vr.priv = (void *) conf;
    cc18:	e9c5 63a3 	strd	r6, r3, [r5, #652]	; 0x28c
	err = ipc_static_vrings_init(&data->vr, conf->role);
    cc1c:	6831      	ldr	r1, [r6, #0]
    cc1e:	f000 fa03 	bl	d028 <ipc_static_vrings_init>
	if (err != 0) {
    cc22:	4604      	mov	r4, r0
    cc24:	bb30      	cbnz	r0, cc74 <open+0x108>
	const struct backend_config_t *conf = instance->config;
    cc26:	f8d9 a004 	ldr.w	sl, [r9, #4]
	struct backend_data_t *data = instance->data;
    cc2a:	f8d9 9010 	ldr.w	r9, [r9, #16]
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
    cc2e:	e9da 3407 	ldrd	r3, r4, [sl, #28]
	k_work_queue_init(&data->mbox_wq);
    cc32:	f509 7b2a 	add.w	fp, r9, #680	; 0x2a8
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
    cc36:	2b01      	cmp	r3, #1
	k_work_queue_init(&data->mbox_wq);
    cc38:	4658      	mov	r0, fp
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
    cc3a:	bf08      	it	eq
    cc3c:	3c10      	subeq	r4, #16
	k_work_queue_init(&data->mbox_wq);
    cc3e:	f014 fba0 	bl	21382 <k_work_queue_init>
	k_work_queue_start(&data->mbox_wq, mbox_stack[conf->id], WQ_STACK_SIZE, prio, NULL);
    cc42:	2300      	movs	r3, #0
    cc44:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
    cc48:	4930      	ldr	r1, [pc, #192]	; (cd0c <open+0x1a0>)
    cc4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    cc4e:	eb01 2180 	add.w	r1, r1, r0, lsl #10
    cc52:	9300      	str	r3, [sp, #0]
    cc54:	4658      	mov	r0, fp
    cc56:	4623      	mov	r3, r4
    cc58:	f00d f870 	bl	19d3c <k_work_queue_start>
	k_work_init(&data->mbox_work, mbox_callback_process);
    cc5c:	f509 7026 	add.w	r0, r9, #664	; 0x298
    cc60:	492b      	ldr	r1, [pc, #172]	; (cd10 <open+0x1a4>)
    cc62:	f014 fb50 	bl	21306 <k_work_init>
		(const struct mbox_driver_api *)channel->dev->api;
    cc66:	f8da 0014 	ldr.w	r0, [sl, #20]
	if (api->register_callback == NULL) {
    cc6a:	6883      	ldr	r3, [r0, #8]
    cc6c:	685c      	ldr	r4, [r3, #4]
    cc6e:	b91c      	cbnz	r4, cc78 <open+0x10c>
		return -ENOSYS;
    cc70:	f06f 0457 	mvn.w	r4, #87	; 0x57
	atomic_set(&data->state, STATE_READY);
    cc74:	2100      	movs	r1, #0
    cc76:	e037      	b.n	cce8 <open+0x17c>
	return api->register_callback(channel->dev, channel->id, cb, user_data);
    cc78:	464b      	mov	r3, r9
    cc7a:	4a26      	ldr	r2, [pc, #152]	; (cd14 <open+0x1a8>)
    cc7c:	f8da 1018 	ldr.w	r1, [sl, #24]
    cc80:	47a0      	blx	r4
	if (err != 0) {
    cc82:	4604      	mov	r4, r0
    cc84:	2800      	cmp	r0, #0
    cc86:	d1f5      	bne.n	cc74 <open+0x108>
		(const struct mbox_driver_api *)channel->dev->api;
    cc88:	f8da 0014 	ldr.w	r0, [sl, #20]
	if (api->set_enabled == NULL) {
    cc8c:	6883      	ldr	r3, [r0, #8]
    cc8e:	691b      	ldr	r3, [r3, #16]
    cc90:	2b00      	cmp	r3, #0
    cc92:	d0ed      	beq.n	cc70 <open+0x104>
	return api->set_enabled(channel->dev, channel->id, enable);
    cc94:	2201      	movs	r2, #1
    cc96:	f8da 1018 	ldr.w	r1, [sl, #24]
    cc9a:	4798      	blx	r3
	if (err != 0) {
    cc9c:	4604      	mov	r4, r0
    cc9e:	2800      	cmp	r0, #0
    cca0:	d1e8      	bne.n	cc74 <open+0x108>
	rpmsg_inst->bound_cb = bound_cb;
    cca2:	4b1d      	ldr	r3, [pc, #116]	; (cd18 <open+0x1ac>)
	err = ipc_rpmsg_init(rpmsg_inst, data->role, conf->buffer_size,
    cca4:	4628      	mov	r0, r5
	rpmsg_inst->bound_cb = bound_cb;
    cca6:	f8c5 3194 	str.w	r3, [r5, #404]	; 0x194
	rpmsg_inst->cb = ept_cb;
    ccaa:	4b1c      	ldr	r3, [pc, #112]	; (cd1c <open+0x1b0>)
    ccac:	f8c5 3198 	str.w	r3, [r5, #408]	; 0x198
	err = ipc_rpmsg_init(rpmsg_inst, data->role, conf->buffer_size,
    ccb0:	4b1b      	ldr	r3, [pc, #108]	; (cd20 <open+0x1b4>)
    ccb2:	9303      	str	r3, [sp, #12]
    ccb4:	f8d5 31f8 	ldr.w	r3, [r5, #504]	; 0x1f8
    ccb8:	9302      	str	r3, [sp, #8]
    ccba:	f8d5 31f0 	ldr.w	r3, [r5, #496]	; 0x1f0
    ccbe:	e9cd 8300 	strd	r8, r3, [sp]
    ccc2:	f8d5 3250 	ldr.w	r3, [r5, #592]	; 0x250
    ccc6:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    ccc8:	f8d5 1350 	ldr.w	r1, [r5, #848]	; 0x350
    cccc:	f000 f976 	bl	cfbc <ipc_rpmsg_init>
	if (err != 0) {
    ccd0:	4604      	mov	r4, r0
    ccd2:	2800      	cmp	r0, #0
    ccd4:	d1ce      	bne.n	cc74 <open+0x108>
	data->tx_buffer_size = rpmsg_virtio_get_buffer_size(rdev);
    ccd6:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
    ccda:	f00c f9df 	bl	1909c <rpmsg_virtio_get_buffer_size>
	if (data->tx_buffer_size < 0) {
    ccde:	2800      	cmp	r0, #0
	data->tx_buffer_size = rpmsg_virtio_get_buffer_size(rdev);
    cce0:	f8c5 0358 	str.w	r0, [r5, #856]	; 0x358
	if (data->tx_buffer_size < 0) {
    cce4:	db0a      	blt.n	ccfc <open+0x190>
	atomic_set(&data->state, STATE_INITED);
    cce6:	2102      	movs	r1, #2
	atomic_set(&data->state, STATE_READY);
    cce8:	4638      	mov	r0, r7
    ccea:	f010 f9fb 	bl	1d0e4 <atomic_set.isra.0>
}
    ccee:	4620      	mov	r0, r4
    ccf0:	b005      	add	sp, #20
    ccf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOMEM;
    ccf6:	f06f 040b 	mvn.w	r4, #11
    ccfa:	e7bb      	b.n	cc74 <open+0x108>
		err = -EINVAL;
    ccfc:	f06f 0415 	mvn.w	r4, #21
    cd00:	e7b8      	b.n	cc74 <open+0x108>
		return -EALREADY;
    cd02:	f06f 0477 	mvn.w	r4, #119	; 0x77
    cd06:	e7f2      	b.n	ccee <open+0x182>
    cd08:	0001d0cd 	.word	0x0001d0cd
    cd0c:	2000b198 	.word	0x2000b198
    cd10:	0001d085 	.word	0x0001d085
    cd14:	0001d079 	.word	0x0001d079
    cd18:	0000cac5 	.word	0x0000cac5
    cd1c:	0001d09f 	.word	0x0001d09f
    cd20:	0001d115 	.word	0x0001d115

0000cd24 <close>:
{
    cd24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cd28:	4606      	mov	r6, r0
    cd2a:	f04f 0901 	mov.w	r9, #1
	struct backend_data_t *data = instance->data;
    cd2e:	6905      	ldr	r5, [r0, #16]
	const struct backend_config_t *conf = instance->config;
    cd30:	f8d0 8004 	ldr.w	r8, [r0, #4]
	if (!atomic_cas(&data->state, STATE_INITED, STATE_BUSY)) {
    cd34:	f505 7755 	add.w	r7, r5, #852	; 0x354
    cd38:	e8d7 3fef 	ldaex	r3, [r7]
    cd3c:	2b02      	cmp	r3, #2
    cd3e:	d103      	bne.n	cd48 <close+0x24>
    cd40:	e8c7 9fe2 	stlex	r2, r9, [r7]
    cd44:	2a00      	cmp	r2, #0
    cd46:	d1f7      	bne.n	cd38 <close+0x14>
    cd48:	d149      	bne.n	cdde <close+0xba>
		if (strcmp("", rpmsg_ept->name) != 0) {
    cd4a:	4826      	ldr	r0, [pc, #152]	; (cde4 <close+0xc0>)
    cd4c:	f105 0140 	add.w	r1, r5, #64	; 0x40
    cd50:	f7fc faf2 	bl	9338 <strcmp>
    cd54:	b120      	cbz	r0, cd60 <close+0x3c>
		return -EBUSY;
    cd56:	f06f 040f 	mvn.w	r4, #15
}
    cd5a:	4620      	mov	r0, r4
    cd5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (strcmp("", rpmsg_ept->name) != 0) {
    cd60:	4820      	ldr	r0, [pc, #128]	; (cde4 <close+0xc0>)
    cd62:	f105 01b0 	add.w	r1, r5, #176	; 0xb0
    cd66:	f7fc fae7 	bl	9338 <strcmp>
    cd6a:	2800      	cmp	r0, #0
    cd6c:	d1f3      	bne.n	cd56 <close+0x32>
	err = ipc_rpmsg_deinit(rpmsg_inst, data->role);
    cd6e:	4628      	mov	r0, r5
    cd70:	f8d5 1350 	ldr.w	r1, [r5, #848]	; 0x350
    cd74:	f010 fa22 	bl	1d1bc <ipc_rpmsg_deinit>
	if (err != 0) {
    cd78:	4604      	mov	r4, r0
    cd7a:	bb70      	cbnz	r0, cdda <close+0xb6>
	const struct backend_config_t *conf = instance->config;
    cd7c:	6871      	ldr	r1, [r6, #4]
	struct backend_data_t *data = instance->data;
    cd7e:	6936      	ldr	r6, [r6, #16]
		(const struct mbox_driver_api *)channel->dev->api;
    cd80:	6948      	ldr	r0, [r1, #20]
	if (api->set_enabled == NULL) {
    cd82:	6883      	ldr	r3, [r0, #8]
    cd84:	691b      	ldr	r3, [r3, #16]
    cd86:	b333      	cbz	r3, cdd6 <close+0xb2>
	return api->set_enabled(channel->dev, channel->id, enable);
    cd88:	4622      	mov	r2, r4
    cd8a:	6989      	ldr	r1, [r1, #24]
    cd8c:	4798      	blx	r3
	if (err != 0) {
    cd8e:	4604      	mov	r4, r0
    cd90:	bb18      	cbnz	r0, cdda <close+0xb6>
	k_work_queue_drain(&data->mbox_wq, 1);
    cd92:	f506 762a 	add.w	r6, r6, #680	; 0x2a8
    cd96:	4649      	mov	r1, r9
    cd98:	4630      	mov	r0, r6
    cd9a:	f00d f807 	bl	19dac <k_work_queue_drain>
	z_impl_k_thread_abort(thread);
    cd9e:	4630      	mov	r0, r6
	err = ipc_static_vrings_deinit(&data->vr, conf->role);
    cda0:	f505 76d8 	add.w	r6, r5, #432	; 0x1b0
    cda4:	f001 fa1a 	bl	e1dc <z_impl_k_thread_abort>
    cda8:	4630      	mov	r0, r6
    cdaa:	f8d8 1000 	ldr.w	r1, [r8]
    cdae:	f010 fa42 	bl	1d236 <ipc_static_vrings_deinit>
	if (err != 0) {
    cdb2:	4604      	mov	r4, r0
    cdb4:	b988      	cbnz	r0, cdda <close+0xb6>
    cdb6:	4601      	mov	r1, r0
    cdb8:	22e8      	movs	r2, #232	; 0xe8
    cdba:	4630      	mov	r0, r6
    cdbc:	f014 fe74 	bl	21aa8 <memset>
    cdc0:	4621      	mov	r1, r4
    cdc2:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
    cdc6:	4628      	mov	r0, r5
    cdc8:	f014 fe6e 	bl	21aa8 <memset>
	atomic_set(&data->state, STATE_READY);
    cdcc:	4621      	mov	r1, r4
	atomic_set(&data->state, STATE_INITED);
    cdce:	4638      	mov	r0, r7
    cdd0:	f010 f988 	bl	1d0e4 <atomic_set.isra.0>
	return err;
    cdd4:	e7c1      	b.n	cd5a <close+0x36>
		return -ENOSYS;
    cdd6:	f06f 0457 	mvn.w	r4, #87	; 0x57
	atomic_set(&data->state, STATE_INITED);
    cdda:	2102      	movs	r1, #2
    cddc:	e7f7      	b.n	cdce <close+0xaa>
		return -EALREADY;
    cdde:	f06f 0477 	mvn.w	r4, #119	; 0x77
    cde2:	e7ba      	b.n	cd5a <close+0x36>
    cde4:	00023606 	.word	0x00023606

0000cde8 <send>:
{
    cde8:	b513      	push	{r0, r1, r4, lr}
    cdea:	4604      	mov	r4, r0
    cdec:	4608      	mov	r0, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    cdee:	6921      	ldr	r1, [r4, #16]
    cdf0:	f501 7155 	add.w	r1, r1, #852	; 0x354
    cdf4:	e8d1 1faf 	lda	r1, [r1]
	if (atomic_get(&data->state) != STATE_INITED) {
    cdf8:	2902      	cmp	r1, #2
    cdfa:	d110      	bne.n	ce1e <send+0x36>
	if (len == 0) {
    cdfc:	b193      	cbz	r3, ce24 <send+0x3c>
	if (!rpmsg_ept) {
    cdfe:	b1a0      	cbz	r0, ce2a <send+0x42>
    ce00:	2101      	movs	r1, #1
    ce02:	e9cd 3100 	strd	r3, r1, [sp]
    ce06:	4613      	mov	r3, r2
    ce08:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
    ce0c:	f00c f858 	bl	18ec0 <rpmsg_send_offchannel_raw>
	if (ret == RPMSG_ERR_NO_BUFF) {
    ce10:	4b07      	ldr	r3, [pc, #28]	; (ce30 <send+0x48>)
		return -ENOMEM;
    ce12:	4298      	cmp	r0, r3
    ce14:	bf08      	it	eq
    ce16:	f06f 000b 	mvneq.w	r0, #11
}
    ce1a:	b002      	add	sp, #8
    ce1c:	bd10      	pop	{r4, pc}
		return -EBUSY;
    ce1e:	f06f 000f 	mvn.w	r0, #15
    ce22:	e7fa      	b.n	ce1a <send+0x32>
		return -EBADMSG;
    ce24:	f06f 004c 	mvn.w	r0, #76	; 0x4c
    ce28:	e7f7      	b.n	ce1a <send+0x32>
		return -ENOENT;
    ce2a:	f06f 0001 	mvn.w	r0, #1
    ce2e:	e7f4      	b.n	ce1a <send+0x32>
    ce30:	fffff82e 	.word	0xfffff82e

0000ce34 <register_ept>:
{
    ce34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    ce38:	4688      	mov	r8, r1
    ce3a:	4615      	mov	r5, r2
	struct backend_data_t *data = instance->data;
    ce3c:	6906      	ldr	r6, [r0, #16]
    ce3e:	f506 7355 	add.w	r3, r6, #852	; 0x354
    ce42:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&data->state) != STATE_INITED) {
    ce46:	2b02      	cmp	r3, #2
    ce48:	d15f      	bne.n	cf0a <register_ept+0xd6>
	if (cfg->name == NULL || cfg->name[0] == '\0') {
    ce4a:	6813      	ldr	r3, [r2, #0]
    ce4c:	b923      	cbnz	r3, ce58 <register_ept+0x24>
		return -EINVAL;
    ce4e:	f06f 0015 	mvn.w	r0, #21
}
    ce52:	b003      	add	sp, #12
    ce54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cfg->name == NULL || cfg->name[0] == '\0') {
    ce58:	781b      	ldrb	r3, [r3, #0]
    ce5a:	2b00      	cmp	r3, #0
    ce5c:	d0f7      	beq.n	ce4e <register_ept+0x1a>
			register_ept_on_host(rpmsg_inst, cfg) :
    ce5e:	f8d6 9350 	ldr.w	r9, [r6, #848]	; 0x350
    ce62:	f1b9 0f00 	cmp.w	r9, #0
    ce66:	d133      	bne.n	ced0 <register_ept+0x9c>
	k_mutex_lock(&rpmsg_inst->mtx, K_FOREVER);
    ce68:	f506 77ce 	add.w	r7, r6, #412	; 0x19c
	return z_impl_k_mutex_lock(mutex, timeout);
    ce6c:	f04f 32ff 	mov.w	r2, #4294967295
    ce70:	f04f 33ff 	mov.w	r3, #4294967295
    ce74:	4638      	mov	r0, r7
    ce76:	f00c fcf5 	bl	19864 <z_impl_k_mutex_lock>
	ept_cached = get_ept(rpmsg_inst, &rpmsg_ept, cfg->name);
    ce7a:	4630      	mov	r0, r6
    ce7c:	682a      	ldr	r2, [r5, #0]
    ce7e:	a901      	add	r1, sp, #4
    ce80:	f7ff fe60 	bl	cb44 <get_ept>
	if (rpmsg_ept == NULL) {
    ce84:	9c01      	ldr	r4, [sp, #4]
    ce86:	b91c      	cbnz	r4, ce90 <register_ept+0x5c>
		k_mutex_unlock(&rpmsg_inst->mtx);
    ce88:	4638      	mov	r0, r7
    ce8a:	f010 f929 	bl	1d0e0 <k_mutex_unlock.isra.0>
	if (rpmsg_ept == NULL) {
    ce8e:	e7de      	b.n	ce4e <register_ept+0x1a>
	rpmsg_ept->cb = &cfg->cb;
    ce90:	f105 0308 	add.w	r3, r5, #8
    ce94:	66a3      	str	r3, [r4, #104]	; 0x68
	rpmsg_ept->priv = cfg->priv;
    ce96:	696b      	ldr	r3, [r5, #20]
	rpmsg_ept->bound = false;
    ce98:	f884 9064 	strb.w	r9, [r4, #100]	; 0x64
	rpmsg_ept->priv = cfg->priv;
    ce9c:	66e3      	str	r3, [r4, #108]	; 0x6c
	rpmsg_ept->ep.priv = rpmsg_ept;
    ce9e:	63e4      	str	r4, [r4, #60]	; 0x3c
	if (ept_cached) {
    cea0:	b160      	cbz	r0, cebc <register_ept+0x88>
		k_mutex_unlock(&rpmsg_inst->mtx);
    cea2:	4638      	mov	r0, r7
    cea4:	f010 f91c 	bl	1d0e0 <k_mutex_unlock.isra.0>
		advertise_ept(rpmsg_inst, rpmsg_ept, cfg->name, rpmsg_ept->dest);
    cea8:	4621      	mov	r1, r4
    ceaa:	4630      	mov	r0, r6
    ceac:	6e23      	ldr	r3, [r4, #96]	; 0x60
    ceae:	682a      	ldr	r2, [r5, #0]
    ceb0:	f7ff fe26 	bl	cb00 <advertise_ept>
	return 0;
    ceb4:	2000      	movs	r0, #0
	(*token) = rpmsg_ept;
    ceb6:	f8c8 4000 	str.w	r4, [r8]
	return 0;
    ceba:	e7ca      	b.n	ce52 <register_ept+0x1e>
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
    cebc:	2220      	movs	r2, #32
    cebe:	6829      	ldr	r1, [r5, #0]
    cec0:	f104 0040 	add.w	r0, r4, #64	; 0x40
    cec4:	f014 ff32 	bl	21d2c <strncpy>
		k_mutex_unlock(&rpmsg_inst->mtx);
    cec8:	4638      	mov	r0, r7
    ceca:	f010 f909 	bl	1d0e0 <k_mutex_unlock.isra.0>
	if (rpmsg_ept == NULL) {
    cece:	e7f1      	b.n	ceb4 <register_ept+0x80>
	return get_ept_slot_with_name(rpmsg_inst, "");
    ced0:	4630      	mov	r0, r6
    ced2:	490f      	ldr	r1, [pc, #60]	; (cf10 <register_ept+0xdc>)
    ced4:	f010 f8ba 	bl	1d04c <get_ept_slot_with_name>
	if (rpmsg_ept == NULL) {
    ced8:	4604      	mov	r4, r0
    ceda:	2800      	cmp	r0, #0
    cedc:	d0b7      	beq.n	ce4e <register_ept+0x1a>
	rpmsg_ept->cb = &cfg->cb;
    cede:	f105 0308 	add.w	r3, r5, #8
    cee2:	6683      	str	r3, [r0, #104]	; 0x68
	rpmsg_ept->priv = cfg->priv;
    cee4:	696b      	ldr	r3, [r5, #20]
	rpmsg_ept->ep.priv = rpmsg_ept;
    cee6:	63c0      	str	r0, [r0, #60]	; 0x3c
	rpmsg_ept->priv = cfg->priv;
    cee8:	66c3      	str	r3, [r0, #108]	; 0x6c
	rpmsg_ept->bound = false;
    ceea:	2300      	movs	r3, #0
    ceec:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
    cef0:	2220      	movs	r2, #32
    cef2:	6829      	ldr	r1, [r5, #0]
    cef4:	3040      	adds	r0, #64	; 0x40
    cef6:	f014 ff19 	bl	21d2c <strncpy>
	err = ipc_rpmsg_register_ept(rpmsg_inst, RPMSG_REMOTE, rpmsg_ept);
    cefa:	4622      	mov	r2, r4
    cefc:	2101      	movs	r1, #1
    cefe:	4630      	mov	r0, r6
    cf00:	f000 f83e 	bl	cf80 <ipc_rpmsg_register_ept>
	if (err != 0) {
    cf04:	2800      	cmp	r0, #0
    cf06:	d0d5      	beq.n	ceb4 <register_ept+0x80>
    cf08:	e7a1      	b.n	ce4e <register_ept+0x1a>
		return -EBUSY;
    cf0a:	f06f 000f 	mvn.w	r0, #15
    cf0e:	e7a0      	b.n	ce52 <register_ept+0x1e>
    cf10:	00023606 	.word	0x00023606

0000cf14 <ns_bind_cb>:
{
	rpmsg_destroy_ept(ep);
}

static void ns_bind_cb(struct rpmsg_device *rdev, const char *name, uint32_t dest)
{
    cf14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cf18:	4605      	mov	r5, r0
    cf1a:	460e      	mov	r6, r1
    cf1c:	4690      	mov	r8, r2
	int err;

	p_rvdev = CONTAINER_OF(rdev, struct rpmsg_virtio_device, rdev);
	instance = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);

	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
    cf1e:	2700      	movs	r7, #0
	instance = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);
    cf20:	f8d0 a0a4 	ldr.w	sl, [r0, #164]	; 0xa4
{
    cf24:	b085      	sub	sp, #20
    cf26:	f5aa 74a4 	sub.w	r4, sl, #328	; 0x148
		ept = &instance->endpoint[i];

		if (strcmp(name, ept->name) == 0) {
    cf2a:	4621      	mov	r1, r4
    cf2c:	4630      	mov	r0, r6
    cf2e:	f7fc fa03 	bl	9338 <strcmp>
    cf32:	b9e0      	cbnz	r0, cf6e <ns_bind_cb+0x5a>
			 * The destination address is 'dest' so ns_bind_cb() is
			 * *NOT* called on the REMOTE side. The bound_cb()
			 * function will eventually take care of notifying the
			 * REMOTE side if needed.
			 */
			err = rpmsg_create_ept(&ept->ep, rdev, name, RPMSG_ADDR_ANY,
    cf34:	4b11      	ldr	r3, [pc, #68]	; (cf7c <ns_bind_cb+0x68>)
		ept = &instance->endpoint[i];
    cf36:	f1a4 0b40 	sub.w	fp, r4, #64	; 0x40
			err = rpmsg_create_ept(&ept->ep, rdev, name, RPMSG_ADDR_ANY,
    cf3a:	9302      	str	r3, [sp, #8]
    cf3c:	f8da 3010 	ldr.w	r3, [sl, #16]
    cf40:	4632      	mov	r2, r6
    cf42:	e9cd 8300 	strd	r8, r3, [sp]
    cf46:	4629      	mov	r1, r5
    cf48:	f04f 33ff 	mov.w	r3, #4294967295
    cf4c:	4658      	mov	r0, fp
    cf4e:	f5aa 79c4 	sub.w	r9, sl, #392	; 0x188
    cf52:	f00b fffb 	bl	18f4c <rpmsg_create_ept>
					       dest, instance->cb, rpmsg_service_unbind);
			if (err != 0) {
    cf56:	b960      	cbnz	r0, cf72 <ns_bind_cb+0x5e>
				return;
			}

			ept->bound = true;
    cf58:	2370      	movs	r3, #112	; 0x70
    cf5a:	2201      	movs	r2, #1
    cf5c:	fb03 9307 	mla	r3, r3, r7, r9
    cf60:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			if (instance->bound_cb) {
    cf64:	f8da 300c 	ldr.w	r3, [sl, #12]
    cf68:	b10b      	cbz	r3, cf6e <ns_bind_cb+0x5a>
				instance->bound_cb(ept);
    cf6a:	4658      	mov	r0, fp
    cf6c:	4798      	blx	r3
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
    cf6e:	3470      	adds	r4, #112	; 0x70
    cf70:	b117      	cbz	r7, cf78 <ns_bind_cb+0x64>
			}
		}
	}
}
    cf72:	b005      	add	sp, #20
    cf74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
    cf78:	2701      	movs	r7, #1
    cf7a:	e7d6      	b.n	cf2a <ns_bind_cb+0x16>
    cf7c:	0001d1b9 	.word	0x0001d1b9

0000cf80 <ipc_rpmsg_register_ept>:

int ipc_rpmsg_register_ept(struct ipc_rpmsg_instance *instance, unsigned int role,
			   struct ipc_rpmsg_ept *ept)
{
    cf80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    cf82:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!instance || !ept) {
    cf84:	b190      	cbz	r0, cfac <ipc_rpmsg_register_ept+0x2c>
    cf86:	b18a      	cbz	r2, cfac <ipc_rpmsg_register_ept+0x2c>
		return -EINVAL;
	}

	rdev = rpmsg_virtio_get_rpmsg_device(&instance->rvdev);

	if (role == RPMSG_REMOTE) {
    cf88:	2901      	cmp	r1, #1
    cf8a:	d112      	bne.n	cfb2 <ipc_rpmsg_register_ept+0x32>
		/*
		 * The destination address is RPMSG_ADDR_ANY, this will trigger
		 * the ns_bind_cb() callback function on the HOST side.
		 */
		return rpmsg_create_ept(&ept->ep, rdev, ept->name, RPMSG_ADDR_ANY,
    cf8c:	4b0a      	ldr	r3, [pc, #40]	; (cfb8 <ipc_rpmsg_register_ept+0x38>)
    cf8e:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
    cf92:	9302      	str	r3, [sp, #8]
    cf94:	f8d0 3198 	ldr.w	r3, [r0, #408]	; 0x198
    cf98:	3240      	adds	r2, #64	; 0x40
    cf9a:	9301      	str	r3, [sp, #4]
    cf9c:	f04f 33ff 	mov.w	r3, #4294967295
    cfa0:	4620      	mov	r0, r4
    cfa2:	9300      	str	r3, [sp, #0]
    cfa4:	f00b ffd2 	bl	18f4c <rpmsg_create_ept>
					RPMSG_ADDR_ANY, instance->cb, rpmsg_service_unbind);
	}

	return RPMSG_SUCCESS;
}
    cfa8:	b004      	add	sp, #16
    cfaa:	bd10      	pop	{r4, pc}
		return -EINVAL;
    cfac:	f06f 0015 	mvn.w	r0, #21
    cfb0:	e7fa      	b.n	cfa8 <ipc_rpmsg_register_ept+0x28>
	return RPMSG_SUCCESS;
    cfb2:	2000      	movs	r0, #0
    cfb4:	e7f8      	b.n	cfa8 <ipc_rpmsg_register_ept+0x28>
    cfb6:	bf00      	nop
    cfb8:	0001d1b9 	.word	0x0001d1b9

0000cfbc <ipc_rpmsg_init>:
		   unsigned int buffer_size,
		   struct metal_io_region *shm_io,
		   struct virtio_device *vdev,
		   void *shb, size_t size,
		   rpmsg_ns_bind_cb p_bind_cb)
{
    cfbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    cfc0:	b085      	sub	sp, #20
    cfc2:	460f      	mov	r7, r1
    cfc4:	e9dd 810c 	ldrd	r8, r1, [sp, #48]	; 0x30
    cfc8:	4614      	mov	r4, r2
    cfca:	e9dd 250e 	ldrd	r2, r5, [sp, #56]	; 0x38
    cfce:	461e      	mov	r6, r3
	rpmsg_ns_bind_cb bind_cb = p_bind_cb;

	if (!instance || !shb) {
    cfd0:	b328      	cbz	r0, d01e <ipc_rpmsg_init+0x62>
    cfd2:	b321      	cbz	r1, d01e <ipc_rpmsg_init+0x62>
		return -EINVAL;
	}

	if (p_bind_cb == NULL) {
		bind_cb = ns_bind_cb;
    cfd4:	f8df c04c 	ldr.w	ip, [pc, #76]	; d024 <ipc_rpmsg_init+0x68>
		config.h2r_buf_size = (uint32_t) buffer_size;
		config.r2h_buf_size = (uint32_t) buffer_size;

		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);

		return rpmsg_init_vdev_with_config(&instance->rvdev, vdev, bind_cb,
    cfd8:	f100 09e0 	add.w	r9, r0, #224	; 0xe0
		bind_cb = ns_bind_cb;
    cfdc:	2d00      	cmp	r5, #0
    cfde:	bf08      	it	eq
    cfe0:	4665      	moveq	r5, ip
	if (role == RPMSG_HOST) {
    cfe2:	b997      	cbnz	r7, d00a <ipc_rpmsg_init+0x4e>
		config.r2h_buf_size = (uint32_t) buffer_size;
    cfe4:	e9cd 4402 	strd	r4, r4, [sp, #8]
		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);
    cfe8:	f500 74c4 	add.w	r4, r0, #392	; 0x188
    cfec:	4620      	mov	r0, r4
    cfee:	f013 ff40 	bl	20e72 <rpmsg_virtio_init_shm_pool>
		return rpmsg_init_vdev_with_config(&instance->rvdev, vdev, bind_cb,
    cff2:	ab02      	add	r3, sp, #8
    cff4:	e9cd 4300 	strd	r4, r3, [sp]
    cff8:	462a      	mov	r2, r5
    cffa:	4633      	mov	r3, r6
    cffc:	4641      	mov	r1, r8
    cffe:	4648      	mov	r0, r9
    d000:	f00c f872 	bl	190e8 <rpmsg_init_vdev_with_config>
						   shm_io, &instance->shm_pool,
						   &config);
	} else {
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
	}
}
    d004:	b005      	add	sp, #20
    d006:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
    d00a:	2200      	movs	r2, #0
    d00c:	4641      	mov	r1, r8
    d00e:	920c      	str	r2, [sp, #48]	; 0x30
    d010:	4648      	mov	r0, r9
    d012:	462a      	mov	r2, r5
}
    d014:	b005      	add	sp, #20
    d016:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
    d01a:	f00c b975 	b.w	19308 <rpmsg_init_vdev>
		return -EINVAL;
    d01e:	f06f 0015 	mvn.w	r0, #21
    d022:	e7ef      	b.n	d004 <ipc_rpmsg_init+0x48>
    d024:	0000cf15 	.word	0x0000cf15

0000d028 <ipc_static_vrings_init>:

	return 0;
}

int ipc_static_vrings_init(struct ipc_static_vrings *vr, unsigned int role)
{
    d028:	b5f0      	push	{r4, r5, r6, r7, lr}
    d02a:	460e      	mov	r6, r1
	int err = 0;

	if (!vr) {
    d02c:	4604      	mov	r4, r0
{
    d02e:	b089      	sub	sp, #36	; 0x24
	if (!vr) {
    d030:	2800      	cmp	r0, #0
    d032:	d06f      	beq.n	d114 <ipc_static_vrings_init+0xec>
		return -EINVAL;
	}

	vr->shm_device.name = SHM_DEVICE_NAME;
	vr->shm_device.num_regions = 1;
    d034:	2301      	movs	r3, #1
	vr->shm_physmap[0] = vr->shm_addr;
    d036:	4602      	mov	r2, r0
	vr->shm_device.num_regions = 1;
    d038:	63c3      	str	r3, [r0, #60]	; 0x3c

	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
    d03a:	2300      	movs	r3, #0
	vr->shm_physmap[0] = vr->shm_addr;
    d03c:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
	vr->shm_device.name = SHM_DEVICE_NAME;
    d040:	4f36      	ldr	r7, [pc, #216]	; (d11c <ipc_static_vrings_init+0xf4>)
	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
    d042:	3040      	adds	r0, #64	; 0x40
	vr->shm_device.name = SHM_DEVICE_NAME;
    d044:	f840 7c0c 	str.w	r7, [r0, #-12]
	vr->shm_physmap[0] = vr->shm_addr;
    d048:	f842 1f30 	str.w	r1, [r2, #48]!
	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
    d04c:	e9cd 3301 	strd	r3, r3, [sp, #4]
    d050:	f04f 33ff 	mov.w	r3, #4294967295
    d054:	9300      	str	r3, [sp, #0]
    d056:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    d058:	f013 fa0c 	bl	20474 <metal_io_init>
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    d05c:	4a30      	ldr	r2, [pc, #192]	; (d120 <ipc_static_vrings_init+0xf8>)
    d05e:	ab06      	add	r3, sp, #24
    d060:	e892 0003 	ldmia.w	r2, {r0, r1}
    d064:	e883 0003 	stmia.w	r3, {r0, r1}
	err = metal_init(&metal_params);
    d068:	4618      	mov	r0, r3
    d06a:	f00b fe49 	bl	18d00 <metal_init>
	if (err != 0) {
    d06e:	4605      	mov	r5, r0
    d070:	b9d8      	cbnz	r0, d0aa <ipc_static_vrings_init+0x82>
	err = metal_register_generic_device(&vr->shm_device);
    d072:	f104 0034 	add.w	r0, r4, #52	; 0x34
    d076:	f00b fe23 	bl	18cc0 <metal_register_generic_device>
	if (err != 0) {
    d07a:	4605      	mov	r5, r0
    d07c:	b9a8      	cbnz	r0, d0aa <ipc_static_vrings_init+0x82>
	err = metal_device_open("generic", SHM_DEVICE_NAME, &device);
    d07e:	4639      	mov	r1, r7
    d080:	4828      	ldr	r0, [pc, #160]	; (d124 <ipc_static_vrings_init+0xfc>)
    d082:	aa05      	add	r2, sp, #20
    d084:	f013 f9c8 	bl	20418 <metal_device_open>
	if (err != 0) {
    d088:	4605      	mov	r5, r0
    d08a:	b970      	cbnz	r0, d0aa <ipc_static_vrings_init+0x82>
	vr->shm_io = metal_device_io_region(device, 0);
    d08c:	9b05      	ldr	r3, [sp, #20]
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
	return (index < device->num_regions
		? &device->regions[index]
		: NULL);
    d08e:	689a      	ldr	r2, [r3, #8]
    d090:	b172      	cbz	r2, d0b0 <ipc_static_vrings_init+0x88>
    d092:	330c      	adds	r3, #12
	vr->vq[RPMSG_VQ_0] = virtqueue_allocate(vr->vring_size);
    d094:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
	vr->shm_io = metal_device_io_region(device, 0);
    d098:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	vr->vq[RPMSG_VQ_0] = virtqueue_allocate(vr->vring_size);
    d09c:	f010 f8bd 	bl	1d21a <virtqueue_allocate>
    d0a0:	f8c4 00d4 	str.w	r0, [r4, #212]	; 0xd4
	if (vr->vq[RPMSG_VQ_0] == NULL) {
    d0a4:	b930      	cbnz	r0, d0b4 <ipc_static_vrings_init+0x8c>
		return -ENOMEM;
    d0a6:	f06f 050b 	mvn.w	r5, #11
	if (err != 0) {
		return err;
	}

	return vq_setup(vr, role);
}
    d0aa:	4628      	mov	r0, r5
    d0ac:	b009      	add	sp, #36	; 0x24
    d0ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d0b0:	4603      	mov	r3, r0
    d0b2:	e7ef      	b.n	d094 <ipc_static_vrings_init+0x6c>
	vr->vq[RPMSG_VQ_1] = virtqueue_allocate(vr->vring_size);
    d0b4:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    d0b8:	f010 f8af 	bl	1d21a <virtqueue_allocate>
    d0bc:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
	if (vr->vq[RPMSG_VQ_1] == NULL) {
    d0c0:	2800      	cmp	r0, #0
    d0c2:	d0f0      	beq.n	d0a6 <ipc_static_vrings_init+0x7e>
	vr->rvrings[RPMSG_VQ_0].info.vaddr = (void *) vr->tx_addr;
    d0c4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
	vr->rvrings[RPMSG_VQ_0].io = vr->shm_io;
    d0c8:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
	vr->rvrings[RPMSG_VQ_0].info.vaddr = (void *) vr->tx_addr;
    d0cc:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	vr->rvrings[RPMSG_VQ_0].info.align = VRING_ALIGNMENT;
    d0d0:	2304      	movs	r3, #4
    d0d2:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	vr->rvrings[RPMSG_VQ_1].info.align = VRING_ALIGNMENT;
    d0d6:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
	vr->vdev.vrings_num = VRING_COUNT;
    d0da:	2302      	movs	r3, #2
    d0dc:	62a3      	str	r3, [r4, #40]	; 0x28
	vr->vdev.func = &dispatch;
    d0de:	4b12      	ldr	r3, [pc, #72]	; (d128 <ipc_static_vrings_init+0x100>)
	vr->rvrings[RPMSG_VQ_0].info.num_descs = vr->vring_size;
    d0e0:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
	vr->rvrings[RPMSG_VQ_0].vq = vr->vq[RPMSG_VQ_0];
    d0e4:	f8d4 70d4 	ldr.w	r7, [r4, #212]	; 0xd4
	vr->rvrings[RPMSG_VQ_0].io = vr->shm_io;
    d0e8:	f8c4 10b8 	str.w	r1, [r4, #184]	; 0xb8
	vr->rvrings[RPMSG_VQ_1].io = vr->shm_io;
    d0ec:	f8c4 10d0 	str.w	r1, [r4, #208]	; 0xd0
	vr->rvrings[RPMSG_VQ_1].info.vaddr = (void *) vr->rx_addr;
    d0f0:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
	vr->vdev.func = &dispatch;
    d0f4:	6223      	str	r3, [r4, #32]
	vr->vdev.vrings_info = &vr->rvrings[0];
    d0f6:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
	vr->rvrings[RPMSG_VQ_0].info.num_descs = vr->vring_size;
    d0fa:	f8a4 20b0 	strh.w	r2, [r4, #176]	; 0xb0
	vr->rvrings[RPMSG_VQ_0].vq = vr->vq[RPMSG_VQ_0];
    d0fe:	f8c4 70a4 	str.w	r7, [r4, #164]	; 0xa4
	vr->rvrings[RPMSG_VQ_1].info.vaddr = (void *) vr->rx_addr;
    d102:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
	vr->rvrings[RPMSG_VQ_1].info.num_descs = vr->vring_size;
    d106:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	vr->rvrings[RPMSG_VQ_1].vq = vr->vq[RPMSG_VQ_1];
    d10a:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	vr->vdev.role = role;
    d10e:	61a6      	str	r6, [r4, #24]
	vr->vdev.vrings_info = &vr->rvrings[0];
    d110:	62e3      	str	r3, [r4, #44]	; 0x2c
	return 0;
    d112:	e7ca      	b.n	d0aa <ipc_static_vrings_init+0x82>
		return -EINVAL;
    d114:	f06f 0515 	mvn.w	r5, #21
    d118:	e7c7      	b.n	d0aa <ipc_static_vrings_init+0x82>
    d11a:	bf00      	nop
    d11c:	00023bd9 	.word	0x00023bd9
    d120:	000228e4 	.word	0x000228e4
    d124:	00023be3 	.word	0x00023be3
    d128:	00022cc8 	.word	0x00022cc8

0000d12c <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    d12c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d130:	4605      	mov	r5, r0
	__asm__ volatile(
    d132:	f04f 0320 	mov.w	r3, #32
    d136:	f3ef 8611 	mrs	r6, BASEPRI
    d13a:	f383 8812 	msr	BASEPRI_MAX, r3
    d13e:	f3bf 8f6f 	isb	sy
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    d142:	f04f 090c 	mov.w	r9, #12
	return list->head;
    d146:	4b0d      	ldr	r3, [pc, #52]	; (d17c <pm_state_notify+0x50>)
    d148:	4f0d      	ldr	r7, [pc, #52]	; (d180 <pm_state_notify+0x54>)
    d14a:	681c      	ldr	r4, [r3, #0]
    d14c:	f8df 8034 	ldr.w	r8, [pc, #52]	; d184 <pm_state_notify+0x58>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    d150:	b92c      	cbnz	r4, d15e <pm_state_notify+0x32>
	__asm__ volatile(
    d152:	f386 8811 	msr	BASEPRI, r6
    d156:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    d15a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    d15e:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    d162:	2d00      	cmp	r5, #0
    d164:	bf18      	it	ne
    d166:	4613      	movne	r3, r2
		if (callback) {
    d168:	b12b      	cbz	r3, d176 <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    d16a:	f898 2014 	ldrb.w	r2, [r8, #20]
    d16e:	fb09 f202 	mul.w	r2, r9, r2
    d172:	5cb8      	ldrb	r0, [r7, r2]
    d174:	4798      	blx	r3
	return node->next;
    d176:	6824      	ldr	r4, [r4, #0]
    d178:	e7ea      	b.n	d150 <pm_state_notify+0x24>
    d17a:	bf00      	nop
    d17c:	20009d20 	.word	0x20009d20
    d180:	20009d14 	.word	0x20009d14
    d184:	2000a140 	.word	0x2000a140

0000d188 <pm_system_resume>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    d188:	2201      	movs	r2, #1

void pm_system_resume(void)
{
    d18a:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    d18c:	4b16      	ldr	r3, [pc, #88]	; (d1e8 <pm_system_resume+0x60>)
    d18e:	7d1c      	ldrb	r4, [r3, #20]
    d190:	f004 031f 	and.w	r3, r4, #31
    d194:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    d196:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d198:	4b14      	ldr	r3, [pc, #80]	; (d1ec <pm_system_resume+0x64>)
    d19a:	0961      	lsrs	r1, r4, #5
    d19c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    d1a0:	e8d3 1fef 	ldaex	r1, [r3]
    d1a4:	ea01 0500 	and.w	r5, r1, r0
    d1a8:	e8c3 5fe6 	stlex	r6, r5, [r3]
    d1ac:	2e00      	cmp	r6, #0
    d1ae:	d1f7      	bne.n	d1a0 <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    d1b0:	420a      	tst	r2, r1
    d1b2:	d013      	beq.n	d1dc <pm_system_resume+0x54>
	if (pm_state_exit_post_ops != NULL) {
    d1b4:	4b0e      	ldr	r3, [pc, #56]	; (d1f0 <pm_system_resume+0x68>)
    d1b6:	4d0f      	ldr	r5, [pc, #60]	; (d1f4 <pm_system_resume+0x6c>)
    d1b8:	b18b      	cbz	r3, d1de <pm_system_resume+0x56>
		pm_state_exit_post_ops(info->state, info->substate_id);
    d1ba:	230c      	movs	r3, #12
    d1bc:	4363      	muls	r3, r4
    d1be:	18ea      	adds	r2, r5, r3
    d1c0:	7851      	ldrb	r1, [r2, #1]
    d1c2:	5ce8      	ldrb	r0, [r5, r3]
    d1c4:	f00f fe02 	bl	1cdcc <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    d1c8:	2000      	movs	r0, #0
    d1ca:	f7ff ffaf 	bl	d12c <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    d1ce:	230c      	movs	r3, #12
    d1d0:	435c      	muls	r4, r3
    d1d2:	2300      	movs	r3, #0
    d1d4:	192a      	adds	r2, r5, r4
    d1d6:	512b      	str	r3, [r5, r4]
    d1d8:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    d1dc:	bd70      	pop	{r4, r5, r6, pc}
    d1de:	f383 8811 	msr	BASEPRI, r3
    d1e2:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    d1e6:	e7ef      	b.n	d1c8 <pm_system_resume+0x40>
    d1e8:	2000a140 	.word	0x2000a140
    d1ec:	20009d28 	.word	0x20009d28
    d1f0:	0001cdcd 	.word	0x0001cdcd
    d1f4:	20009d14 	.word	0x20009d14

0000d1f8 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    d1f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    d1fc:	4b32      	ldr	r3, [pc, #200]	; (d2c8 <pm_system_suspend+0xd0>)
{
    d1fe:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    d200:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
    d202:	f04f 0320 	mov.w	r3, #32
    d206:	f3ef 8811 	mrs	r8, BASEPRI
    d20a:	f383 8812 	msr	BASEPRI_MAX, r3
    d20e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    d212:	240c      	movs	r4, #12
    d214:	436c      	muls	r4, r5
    d216:	4b2d      	ldr	r3, [pc, #180]	; (d2cc <pm_system_suspend+0xd4>)
    d218:	4e2d      	ldr	r6, [pc, #180]	; (d2d0 <pm_system_suspend+0xd8>)
    d21a:	5d19      	ldrb	r1, [r3, r4]
    d21c:	191a      	adds	r2, r3, r4
    d21e:	2900      	cmp	r1, #0
    d220:	d047      	beq.n	d2b2 <pm_system_suspend+0xba>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    d222:	ca07      	ldmia	r2, {r0, r1, r2}
    d224:	eb06 0c04 	add.w	ip, r6, r4
    d228:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    d22c:	2200      	movs	r2, #0
    d22e:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    d230:	f388 8811 	msr	BASEPRI, r8
    d234:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    d238:	230c      	movs	r3, #12
    d23a:	436b      	muls	r3, r5
    d23c:	5cf0      	ldrb	r0, [r6, r3]
    d23e:	18f2      	adds	r2, r6, r3
    d240:	b3a8      	cbz	r0, d2ae <pm_system_suspend+0xb6>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    d242:	1c7b      	adds	r3, r7, #1
    d244:	d010      	beq.n	d268 <pm_system_suspend+0x70>
			return (uint32_t)((t * to_hz + off) / from_hz);
    d246:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    d24a:	2100      	movs	r1, #0
    d24c:	f8d2 c008 	ldr.w	ip, [r2, #8]
    d250:	4c20      	ldr	r4, [pc, #128]	; (d2d4 <pm_system_suspend+0xdc>)
    d252:	2300      	movs	r3, #0
    d254:	fbec 4100 	umlal	r4, r1, ip, r0
    d258:	4a1f      	ldr	r2, [pc, #124]	; (d2d8 <pm_system_suspend+0xe0>)
    d25a:	4620      	mov	r0, r4
    d25c:	f7fb fe3e 	bl	8edc <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    d260:	2101      	movs	r1, #1
    d262:	1a38      	subs	r0, r7, r0
    d264:	f014 fa21 	bl	216aa <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    d268:	f00d f84c 	bl	1a304 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    d26c:	2001      	movs	r0, #1
    d26e:	f7ff ff5d 	bl	d12c <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d272:	4b1a      	ldr	r3, [pc, #104]	; (d2dc <pm_system_suspend+0xe4>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    d274:	096a      	lsrs	r2, r5, #5
    d276:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    d27a:	2201      	movs	r2, #1
    d27c:	f005 011f 	and.w	r1, r5, #31
    d280:	408a      	lsls	r2, r1
    d282:	e8d3 0fef 	ldaex	r0, [r3]
    d286:	4310      	orrs	r0, r2
    d288:	e8c3 0fe1 	stlex	r1, r0, [r3]
    d28c:	2900      	cmp	r1, #0
    d28e:	d1f8      	bne.n	d282 <pm_system_suspend+0x8a>
	if (pm_state_set != NULL) {
    d290:	4b13      	ldr	r3, [pc, #76]	; (d2e0 <pm_system_suspend+0xe8>)
    d292:	b13b      	cbz	r3, d2a4 <pm_system_suspend+0xac>
		pm_state_set(info->state, info->substate_id);
    d294:	230c      	movs	r3, #12
    d296:	fb03 f005 	mul.w	r0, r3, r5
    d29a:	1833      	adds	r3, r6, r0
    d29c:	7859      	ldrb	r1, [r3, #1]
    d29e:	5c30      	ldrb	r0, [r6, r0]
    d2a0:	f00f fd88 	bl	1cdb4 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    d2a4:	f7ff ff70 	bl	d188 <pm_system_resume>
	k_sched_unlock();
    d2a8:	f00d f840 	bl	1a32c <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    d2ac:	2001      	movs	r0, #1
}
    d2ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    d2b2:	4601      	mov	r1, r0
    d2b4:	4628      	mov	r0, r5
    d2b6:	f000 f815 	bl	d2e4 <pm_policy_next_state>
		if (info != NULL) {
    d2ba:	2800      	cmp	r0, #0
    d2bc:	d0b8      	beq.n	d230 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    d2be:	c807      	ldmia	r0, {r0, r1, r2}
    d2c0:	4434      	add	r4, r6
    d2c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    d2c6:	e7b3      	b.n	d230 <pm_system_suspend+0x38>
    d2c8:	2000a140 	.word	0x2000a140
    d2cc:	20009d08 	.word	0x20009d08
    d2d0:	20009d14 	.word	0x20009d14
    d2d4:	000f423f 	.word	0x000f423f
    d2d8:	000f4240 	.word	0x000f4240
    d2dc:	20009d28 	.word	0x20009d28
    d2e0:	0001cdb5 	.word	0x0001cdb5

0000d2e4 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    d2e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d2e8:	b085      	sub	sp, #20
    d2ea:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    d2ec:	a903      	add	r1, sp, #12
    d2ee:	f000 f843 	bl	d378 <pm_state_cpu_get_all>
    d2f2:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    d2f6:	4604      	mov	r4, r0
    d2f8:	f04f 0b00 	mov.w	fp, #0

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    d2fc:	4b1b      	ldr	r3, [pc, #108]	; (d36c <pm_policy_next_state+0x88>)
    d2fe:	9d03      	ldr	r5, [sp, #12]
    d300:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    d304:	1e43      	subs	r3, r0, #1
    d306:	b21b      	sxth	r3, r3
    d308:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    d30c:	f8df 8060 	ldr.w	r8, [pc, #96]	; d370 <pm_policy_next_state+0x8c>
    d310:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    d314:	b924      	cbnz	r4, d320 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    d316:	46a1      	mov	r9, r4
}
    d318:	4648      	mov	r0, r9
    d31a:	b005      	add	sp, #20
    d31c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d320:	46c4      	mov	ip, r8
    d322:	4659      	mov	r1, fp
    d324:	6868      	ldr	r0, [r5, #4]
    d326:	2300      	movs	r3, #0
    d328:	fbe0 c107 	umlal	ip, r1, r0, r7
    d32c:	4a11      	ldr	r2, [pc, #68]	; (d374 <pm_policy_next_state+0x90>)
    d32e:	4660      	mov	r0, ip
    d330:	f7fb fdd4 	bl	8edc <__aeabi_uldivmod>
    d334:	46c4      	mov	ip, r8
    d336:	4659      	mov	r1, fp
    d338:	9001      	str	r0, [sp, #4]
    d33a:	68a8      	ldr	r0, [r5, #8]
    d33c:	2300      	movs	r3, #0
    d33e:	fbe0 c107 	umlal	ip, r1, r0, r7
    d342:	4a0c      	ldr	r2, [pc, #48]	; (d374 <pm_policy_next_state+0x90>)
    d344:	4660      	mov	r0, ip
    d346:	f7fb fdc9 	bl	8edc <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    d34a:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
    d34e:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    d350:	d001      	beq.n	d356 <pm_policy_next_state+0x72>
    d352:	4582      	cmp	sl, r0
    d354:	d905      	bls.n	d362 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    d356:	1c73      	adds	r3, r6, #1
    d358:	d0de      	beq.n	d318 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    d35a:	9b01      	ldr	r3, [sp, #4]
    d35c:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    d35e:	42b0      	cmp	r0, r6
    d360:	d9da      	bls.n	d318 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    d362:	3c01      	subs	r4, #1
    d364:	b2a4      	uxth	r4, r4
    d366:	3d0c      	subs	r5, #12
    d368:	e7d4      	b.n	d314 <pm_policy_next_state+0x30>
    d36a:	bf00      	nop
    d36c:	20008388 	.word	0x20008388
    d370:	000f423f 	.word	0x000f423f
    d374:	000f4240 	.word	0x000f4240

0000d378 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    d378:	b908      	cbnz	r0, d37e <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    d37a:	4b02      	ldr	r3, [pc, #8]	; (d384 <pm_state_cpu_get_all+0xc>)
    d37c:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    d37e:	2000      	movs	r0, #0
    d380:	4770      	bx	lr
    d382:	bf00      	nop
    d384:	00022cec 	.word	0x00022cec

0000d388 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
    d388:	4904      	ldr	r1, [pc, #16]	; (d39c <sub_bytes+0x14>)
    d38a:	1e43      	subs	r3, r0, #1
    d38c:	300f      	adds	r0, #15
    d38e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    d392:	5c8a      	ldrb	r2, [r1, r2]
	for (i = 0; i < (Nb * Nk); ++i) {
    d394:	4283      	cmp	r3, r0
		s[i] = sbox[s[i]];
    d396:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    d398:	d1f9      	bne.n	d38e <sub_bytes+0x6>
	}
}
    d39a:	4770      	bx	lr
    d39c:	00023bee 	.word	0x00023bee

0000d3a0 <tc_aes128_set_encrypt_key>:
{
    d3a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    d3a2:	4607      	mov	r7, r0
	const unsigned int rconst[11] = {
    d3a4:	4e26      	ldr	r6, [pc, #152]	; (d440 <tc_aes128_set_encrypt_key+0xa0>)
{
    d3a6:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    d3a8:	ad01      	add	r5, sp, #4
{
    d3aa:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    d3ac:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    d3ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    d3b0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    d3b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    d3b4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    d3b8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    d3bc:	4638      	mov	r0, r7
    d3be:	2f00      	cmp	r7, #0
    d3c0:	d039      	beq.n	d436 <tc_aes128_set_encrypt_key+0x96>
	} else if (k == (const uint8_t *) 0) {
    d3c2:	2c00      	cmp	r4, #0
    d3c4:	d039      	beq.n	d43a <tc_aes128_set_encrypt_key+0x9a>
    d3c6:	1f38      	subs	r0, r7, #4
    d3c8:	4602      	mov	r2, r0
    d3ca:	4621      	mov	r1, r4
    d3cc:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    d3ce:	784b      	ldrb	r3, [r1, #1]
    d3d0:	780d      	ldrb	r5, [r1, #0]
    d3d2:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    d3d4:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    d3d8:	78cd      	ldrb	r5, [r1, #3]
	for (i = 0; i < Nk; ++i) {
    d3da:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    d3dc:	432b      	orrs	r3, r5
    d3de:	f811 5c02 	ldrb.w	r5, [r1, #-2]
	for (i = 0; i < Nk; ++i) {
    d3e2:	428c      	cmp	r4, r1
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    d3e4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    d3e8:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    d3ec:	d1ef      	bne.n	d3ce <tc_aes128_set_encrypt_key+0x2e>
    d3ee:	2104      	movs	r1, #4
			t = subword(rotword(t)) ^ rconst[i/Nk];
    d3f0:	4c14      	ldr	r4, [pc, #80]	; (d444 <tc_aes128_set_encrypt_key+0xa4>)
		if ((i % Nk) == 0) {
    d3f2:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    d3f4:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    d3f6:	d116      	bne.n	d426 <tc_aes128_set_encrypt_key+0x86>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    d3f8:	f3c3 4207 	ubfx	r2, r3, #16, #8
    d3fc:	5ca5      	ldrb	r5, [r4, r2]
    d3fe:	0e1a      	lsrs	r2, r3, #24
    d400:	5ca2      	ldrb	r2, [r4, r2]
    d402:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    d406:	f3c3 2507 	ubfx	r5, r3, #8, #8
    d40a:	5d65      	ldrb	r5, [r4, r5]
    d40c:	b2db      	uxtb	r3, r3
    d40e:	5ce3      	ldrb	r3, [r4, r3]
    d410:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    d414:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    d418:	f021 0303 	bic.w	r3, r1, #3
    d41c:	3330      	adds	r3, #48	; 0x30
    d41e:	446b      	add	r3, sp
    d420:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    d424:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    d426:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    d42a:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    d42c:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    d42e:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    d430:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    d432:	d1de      	bne.n	d3f2 <tc_aes128_set_encrypt_key+0x52>
	return TC_CRYPTO_SUCCESS;
    d434:	2001      	movs	r0, #1
}
    d436:	b00d      	add	sp, #52	; 0x34
    d438:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    d43a:	4620      	mov	r0, r4
    d43c:	e7fb      	b.n	d436 <tc_aes128_set_encrypt_key+0x96>
    d43e:	bf00      	nop
    d440:	000228ec 	.word	0x000228ec
    d444:	00023bee 	.word	0x00023bee

0000d448 <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
    d448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    d44c:	2700      	movs	r7, #0
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    d44e:	6803      	ldr	r3, [r0, #0]
{
    d450:	b09d      	sub	sp, #116	; 0x74
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    d452:	9302      	str	r3, [sp, #8]
    d454:	6843      	ldr	r3, [r0, #4]
    d456:	f8df a1bc 	ldr.w	sl, [pc, #444]	; d614 <compress+0x1cc>
    d45a:	9303      	str	r3, [sp, #12]
    d45c:	6883      	ldr	r3, [r0, #8]
    d45e:	e9dd 4602 	ldrd	r4, r6, [sp, #8]
    d462:	9304      	str	r3, [sp, #16]
    d464:	68c3      	ldr	r3, [r0, #12]
    d466:	9305      	str	r3, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    d468:	6903      	ldr	r3, [r0, #16]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    d46a:	e9dd be04 	ldrd	fp, lr, [sp, #16]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    d46e:	9306      	str	r3, [sp, #24]
    d470:	6943      	ldr	r3, [r0, #20]
    d472:	9307      	str	r3, [sp, #28]
    d474:	6983      	ldr	r3, [r0, #24]
    d476:	e9dd 2c06 	ldrd	r2, ip, [sp, #24]
    d47a:	9308      	str	r3, [sp, #32]
    d47c:	69c3      	ldr	r3, [r0, #28]
    d47e:	4698      	mov	r8, r3
    d480:	9309      	str	r3, [sp, #36]	; 0x24
    d482:	9b08      	ldr	r3, [sp, #32]
    d484:	9300      	str	r3, [sp, #0]

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
    d486:	59cd      	ldr	r5, [r1, r7]
		t1 = work_space[i] = n;
    d488:	ab0c      	add	r3, sp, #48	; 0x30
    d48a:	ba2d      	rev	r5, r5
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    d48c:	f85a 9b04 	ldr.w	r9, [sl], #4
		t1 = work_space[i] = n;
    d490:	51dd      	str	r5, [r3, r7]
	return (((a) >> n) | ((a) << (32 - n)));
    d492:	ea4f 23f2 	mov.w	r3, r2, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    d496:	44a9      	add	r9, r5
    d498:	ea83 13b2 	eor.w	r3, r3, r2, ror #6
    d49c:	9d00      	ldr	r5, [sp, #0]
    d49e:	ea83 6372 	eor.w	r3, r3, r2, ror #25
    d4a2:	444b      	add	r3, r9
    d4a4:	ea25 0502 	bic.w	r5, r5, r2
    d4a8:	ea02 090c 	and.w	r9, r2, ip
    d4ac:	ea85 0509 	eor.w	r5, r5, r9
    d4b0:	442b      	add	r3, r5
    d4b2:	4443      	add	r3, r8
		t2 = Sigma0(a) + Maj(a, b, c);
    d4b4:	ea86 050b 	eor.w	r5, r6, fp
	return (((a) >> n) | ((a) << (32 - n)));
    d4b8:	ea4f 3874 	mov.w	r8, r4, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
    d4bc:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
    d4c0:	4025      	ands	r5, r4
    d4c2:	ea06 090b 	and.w	r9, r6, fp
    d4c6:	ea85 0509 	eor.w	r5, r5, r9
    d4ca:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
	for (i = 0; i < 16; ++i) {
    d4ce:	3704      	adds	r7, #4
		t2 = Sigma0(a) + Maj(a, b, c);
    d4d0:	44a8      	add	r8, r5
	for (i = 0; i < 16; ++i) {
    d4d2:	2f40      	cmp	r7, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
    d4d4:	eb03 050e 	add.w	r5, r3, lr
		d = c; c = b; b = a; a = t1 + t2;
    d4d8:	4443      	add	r3, r8
	for (i = 0; i < 16; ++i) {
    d4da:	46de      	mov	lr, fp
    d4dc:	f8dd 8000 	ldr.w	r8, [sp]
    d4e0:	f040 8088 	bne.w	d5f4 <compress+0x1ac>
    d4e4:	f04f 0a10 	mov.w	sl, #16
    d4e8:	494b      	ldr	r1, [pc, #300]	; (d618 <compress+0x1d0>)
    d4ea:	910a      	str	r1, [sp, #40]	; 0x28
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
    d4ec:	4651      	mov	r1, sl
    d4ee:	f10a 0a01 	add.w	sl, sl, #1
    d4f2:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
    d4f6:	f00a 070f 	and.w	r7, sl, #15
    d4fa:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    d4fe:	f857 7c40 	ldr.w	r7, [r7, #-64]
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    d502:	f001 090f 	and.w	r9, r1, #15
	return (((a) >> n) | ((a) << (32 - n)));
    d506:	ea4f 48b7 	mov.w	r8, r7, ror #18
		s0 = work_space[(i+1)&0x0f];
    d50a:	9701      	str	r7, [sp, #4]
		s0 = sigma0(s0);
    d50c:	ea88 18f7 	eor.w	r8, r8, r7, ror #7
		s1 = work_space[(i+14)&0x0f];
    d510:	f101 070e 	add.w	r7, r1, #14
    d514:	f007 070f 	and.w	r7, r7, #15
    d518:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    d51c:	f857 7c40 	ldr.w	r7, [r7, #-64]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    d520:	3109      	adds	r1, #9
	return (((a) >> n) | ((a) << (32 - n)));
    d522:	ea4f 4ef7 	mov.w	lr, r7, ror #19
		s1 = sigma1(s1);
    d526:	ea8e 4e77 	eor.w	lr, lr, r7, ror #17
    d52a:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    d52e:	f001 010f 	and.w	r1, r1, #15
    d532:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
    d536:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
    d53a:	eb0e 0989 	add.w	r9, lr, r9, lsl #2
    d53e:	f859 ec40 	ldr.w	lr, [r9, #-64]
    d542:	f851 1c40 	ldr.w	r1, [r1, #-64]
	for ( ; i < 64; ++i) {
    d546:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    d54a:	4471      	add	r1, lr
		s0 = sigma0(s0);
    d54c:	f8dd e004 	ldr.w	lr, [sp, #4]
    d550:	ea88 08de 	eor.w	r8, r8, lr, lsr #3
		s1 = sigma1(s1);
    d554:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    d558:	4441      	add	r1, r8
		s1 = sigma1(s1);
    d55a:	ea8e 2e97 	eor.w	lr, lr, r7, lsr #10
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    d55e:	4471      	add	r1, lr
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    d560:	ea05 0802 	and.w	r8, r5, r2
	return (((a) >> n) | ((a) << (32 - n)));
    d564:	ea4f 2ef5 	mov.w	lr, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    d568:	ea2c 0705 	bic.w	r7, ip, r5
    d56c:	ea87 0708 	eor.w	r7, r7, r8
    d570:	ea8e 1eb5 	eor.w	lr, lr, r5, ror #6
    d574:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    d578:	ea8e 6e75 	eor.w	lr, lr, r5, ror #25
    d57c:	4477      	add	r7, lr
    d57e:	f858 ef04 	ldr.w	lr, [r8, #4]!
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    d582:	f849 1c40 	str.w	r1, [r9, #-64]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    d586:	4477      	add	r7, lr
    d588:	440f      	add	r7, r1
    d58a:	9900      	ldr	r1, [sp, #0]
	return (((a) >> n) | ((a) << (32 - n)));
    d58c:	ea4f 3e73 	mov.w	lr, r3, ror #13
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    d590:	4439      	add	r1, r7
		t2 = Sigma0(a) + Maj(a, b, c);
    d592:	ea84 0706 	eor.w	r7, r4, r6
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    d596:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
		t2 = Sigma0(a) + Maj(a, b, c);
    d59a:	ea8e 0eb3 	eor.w	lr, lr, r3, ror #2
    d59e:	ea07 0703 	and.w	r7, r7, r3
    d5a2:	ea04 0806 	and.w	r8, r4, r6
    d5a6:	ea8e 5eb3 	eor.w	lr, lr, r3, ror #22
    d5aa:	ea87 0708 	eor.w	r7, r7, r8
    d5ae:	4477      	add	r7, lr
		h = g; g = f; f = e; e = d + t1;
		d = c; c = b; b = a; a = t1 + t2;
    d5b0:	440f      	add	r7, r1
		h = g; g = f; f = e; e = d + t1;
    d5b2:	eb01 0e0b 	add.w	lr, r1, fp
	for ( ; i < 64; ++i) {
    d5b6:	f8cd c000 	str.w	ip, [sp]
    d5ba:	46b3      	mov	fp, r6
    d5bc:	d122      	bne.n	d604 <compress+0x1bc>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
    d5be:	9902      	ldr	r1, [sp, #8]
    d5c0:	4439      	add	r1, r7
    d5c2:	6001      	str	r1, [r0, #0]
    d5c4:	9903      	ldr	r1, [sp, #12]
    d5c6:	4419      	add	r1, r3
    d5c8:	9b04      	ldr	r3, [sp, #16]
    d5ca:	6041      	str	r1, [r0, #4]
    d5cc:	4423      	add	r3, r4
    d5ce:	6083      	str	r3, [r0, #8]
    d5d0:	9b05      	ldr	r3, [sp, #20]
    d5d2:	4433      	add	r3, r6
    d5d4:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
    d5d6:	9b06      	ldr	r3, [sp, #24]
    d5d8:	4473      	add	r3, lr
    d5da:	6103      	str	r3, [r0, #16]
    d5dc:	9b07      	ldr	r3, [sp, #28]
    d5de:	442b      	add	r3, r5
    d5e0:	6143      	str	r3, [r0, #20]
    d5e2:	9b08      	ldr	r3, [sp, #32]
    d5e4:	4413      	add	r3, r2
    d5e6:	6183      	str	r3, [r0, #24]
    d5e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d5ea:	4463      	add	r3, ip
    d5ec:	61c3      	str	r3, [r0, #28]
}
    d5ee:	b01d      	add	sp, #116	; 0x74
    d5f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d5f4:	46b3      	mov	fp, r6
    d5f6:	f8cd c000 	str.w	ip, [sp]
    d5fa:	4626      	mov	r6, r4
    d5fc:	4694      	mov	ip, r2
		d = c; c = b; b = a; a = t1 + t2;
    d5fe:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
    d600:	462a      	mov	r2, r5
    d602:	e740      	b.n	d486 <compress+0x3e>
    d604:	4694      	mov	ip, r2
    d606:	4626      	mov	r6, r4
    d608:	462a      	mov	r2, r5
    d60a:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
    d60c:	4675      	mov	r5, lr
		d = c; c = b; b = a; a = t1 + t2;
    d60e:	463b      	mov	r3, r7
    d610:	e76c      	b.n	d4ec <compress+0xa4>
    d612:	bf00      	nop
    d614:	00022cec 	.word	0x00022cec
    d618:	00022d28 	.word	0x00022d28

0000d61c <tc_sha256_init>:
{
    d61c:	b510      	push	{r4, lr}
	if (s == (TCSha256State_t) 0) {
    d61e:	4604      	mov	r4, r0
    d620:	b1c8      	cbz	r0, d656 <tc_sha256_init+0x3a>
	_set((uint8_t *) s, 0x00, sizeof(*s));
    d622:	2270      	movs	r2, #112	; 0x70
    d624:	2100      	movs	r1, #0
    d626:	f00f fe43 	bl	1d2b0 <_set>
	s->iv[1] = 0xbb67ae85;
    d62a:	4b0b      	ldr	r3, [pc, #44]	; (d658 <tc_sha256_init+0x3c>)
    d62c:	4a0b      	ldr	r2, [pc, #44]	; (d65c <tc_sha256_init+0x40>)
	s->iv[3] = 0xa54ff53a;
    d62e:	490c      	ldr	r1, [pc, #48]	; (d660 <tc_sha256_init+0x44>)
	s->iv[1] = 0xbb67ae85;
    d630:	e9c4 2300 	strd	r2, r3, [r4]
	s->iv[3] = 0xa54ff53a;
    d634:	4b0b      	ldr	r3, [pc, #44]	; (d664 <tc_sha256_init+0x48>)
	s->iv[5] = 0x9b05688c;
    d636:	480c      	ldr	r0, [pc, #48]	; (d668 <tc_sha256_init+0x4c>)
	s->iv[3] = 0xa54ff53a;
    d638:	e9c4 1302 	strd	r1, r3, [r4, #8]
	s->iv[5] = 0x9b05688c;
    d63c:	4b0b      	ldr	r3, [pc, #44]	; (d66c <tc_sha256_init+0x50>)
    d63e:	e9c4 0304 	strd	r0, r3, [r4, #16]
	return TC_CRYPTO_SUCCESS;
    d642:	2001      	movs	r0, #1
	s->iv[6] = 0x1f83d9ab;
    d644:	4b0a      	ldr	r3, [pc, #40]	; (d670 <tc_sha256_init+0x54>)
    d646:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
    d648:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
    d64c:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
    d650:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
    d654:	61e3      	str	r3, [r4, #28]
}
    d656:	bd10      	pop	{r4, pc}
    d658:	bb67ae85 	.word	0xbb67ae85
    d65c:	6a09e667 	.word	0x6a09e667
    d660:	3c6ef372 	.word	0x3c6ef372
    d664:	a54ff53a 	.word	0xa54ff53a
    d668:	510e527f 	.word	0x510e527f
    d66c:	9b05688c 	.word	0x9b05688c
    d670:	1f83d9ab 	.word	0x1f83d9ab

0000d674 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    d674:	4901      	ldr	r1, [pc, #4]	; (d67c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    d676:	2210      	movs	r2, #16
	str	r2, [r1]
    d678:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    d67a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    d67c:	e000ed10 	.word	0xe000ed10

0000d680 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    d680:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    d682:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    d684:	f380 8811 	msr	BASEPRI, r0
	isb
    d688:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    d68c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    d690:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    d692:	b662      	cpsie	i
	isb
    d694:	f3bf 8f6f 	isb	sy

	bx	lr
    d698:	4770      	bx	lr
    d69a:	bf00      	nop

0000d69c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    d69c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    d69e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    d6a0:	f381 8811 	msr	BASEPRI, r1

	wfe
    d6a4:	bf20      	wfe

	msr	BASEPRI, r0
    d6a6:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    d6aa:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    d6ac:	4770      	bx	lr
    d6ae:	bf00      	nop

0000d6b0 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    d6b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d6b4:	4682      	mov	sl, r0

	if (esf != NULL) {
    d6b6:	460c      	mov	r4, r1
{
    d6b8:	af00      	add	r7, sp, #0
	if (esf != NULL) {
    d6ba:	2900      	cmp	r1, #0
    d6bc:	d052      	beq.n	d764 <z_arm_fatal_error+0xb4>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    d6be:	e9d1 1200 	ldrd	r1, r2, [r1]
    d6c2:	466e      	mov	r6, sp
    d6c4:	b08a      	sub	sp, #40	; 0x28
    d6c6:	68a3      	ldr	r3, [r4, #8]
    d6c8:	466d      	mov	r5, sp
    d6ca:	f04f 0b06 	mov.w	fp, #6
    d6ce:	46a8      	mov	r8, r5
    d6d0:	4828      	ldr	r0, [pc, #160]	; (d774 <z_arm_fatal_error+0xc4>)
    d6d2:	f8df 90a4 	ldr.w	r9, [pc, #164]	; d778 <z_arm_fatal_error+0xc8>
    d6d6:	e9c5 2308 	strd	r2, r3, [r5, #32]
    d6da:	e9c5 9106 	strd	r9, r1, [r5, #24]
    d6de:	6168      	str	r0, [r5, #20]
    d6e0:	f848 bf10 	str.w	fp, [r8, #16]!
    d6e4:	2300      	movs	r3, #0
    d6e6:	4642      	mov	r2, r8
    d6e8:	f44f 5141 	mov.w	r1, #12352	; 0x3040
    d6ec:	4823      	ldr	r0, [pc, #140]	; (d77c <z_arm_fatal_error+0xcc>)
    d6ee:	f7fe fde1 	bl	c2b4 <z_impl_z_log_msg_static_create>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    d6f2:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
    d6f6:	46b5      	mov	sp, r6
    d6f8:	6963      	ldr	r3, [r4, #20]
    d6fa:	46ad      	mov	sp, r5
    d6fc:	4820      	ldr	r0, [pc, #128]	; (d780 <z_arm_fatal_error+0xd0>)
    d6fe:	e9c5 1207 	strd	r1, r2, [r5, #28]
    d702:	e9c5 0905 	strd	r0, r9, [r5, #20]
    d706:	626b      	str	r3, [r5, #36]	; 0x24
    d708:	f8c5 b010 	str.w	fp, [r5, #16]
    d70c:	2300      	movs	r3, #0
    d70e:	4642      	mov	r2, r8
    d710:	f44f 5141 	mov.w	r1, #12352	; 0x3040
    d714:	4819      	ldr	r0, [pc, #100]	; (d77c <z_arm_fatal_error+0xcc>)
    d716:	f7fe fdcd 	bl	c2b4 <z_impl_z_log_msg_static_create>
    d71a:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    d71c:	b088      	sub	sp, #32
    d71e:	69e3      	ldr	r3, [r4, #28]
    d720:	466d      	mov	r5, sp
    d722:	f04f 0b04 	mov.w	fp, #4
    d726:	46a8      	mov	r8, r5
    d728:	4a16      	ldr	r2, [pc, #88]	; (d784 <z_arm_fatal_error+0xd4>)
    d72a:	61eb      	str	r3, [r5, #28]
    d72c:	e9c5 2905 	strd	r2, r9, [r5, #20]
    d730:	f848 bf10 	str.w	fp, [r8, #16]!
    d734:	2300      	movs	r3, #0
    d736:	4642      	mov	r2, r8
    d738:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    d73c:	480f      	ldr	r0, [pc, #60]	; (d77c <z_arm_fatal_error+0xcc>)
    d73e:	f7fe fdb9 	bl	c2b4 <z_impl_z_log_msg_static_create>
    d742:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    d744:	69a3      	ldr	r3, [r4, #24]
    d746:	46ad      	mov	sp, r5
    d748:	4a0f      	ldr	r2, [pc, #60]	; (d788 <z_arm_fatal_error+0xd8>)
    d74a:	61eb      	str	r3, [r5, #28]
    d74c:	e9c5 2905 	strd	r2, r9, [r5, #20]
    d750:	f8c5 b010 	str.w	fp, [r5, #16]
    d754:	2300      	movs	r3, #0
    d756:	4642      	mov	r2, r8
    d758:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    d75c:	4807      	ldr	r0, [pc, #28]	; (d77c <z_arm_fatal_error+0xcc>)
    d75e:	f7fe fda9 	bl	c2b4 <z_impl_z_log_msg_static_create>
    d762:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    d764:	4621      	mov	r1, r4
    d766:	4650      	mov	r0, sl
    d768:	f00b fde2 	bl	19330 <z_fatal_error>
}
    d76c:	46bd      	mov	sp, r7
    d76e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d772:	bf00      	nop
    d774:	00023cee 	.word	0x00023cee
    d778:	00023d99 	.word	0x00023d99
    d77c:	00022888 	.word	0x00022888
    d780:	00023d21 	.word	0x00023d21
    d784:	00023d54 	.word	0x00023d54
    d788:	00023d67 	.word	0x00023d67

0000d78c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    d78c:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    d78e:	2800      	cmp	r0, #0
    d790:	db07      	blt.n	d7a2 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d792:	2301      	movs	r3, #1
    d794:	0941      	lsrs	r1, r0, #5
    d796:	4a03      	ldr	r2, [pc, #12]	; (d7a4 <arch_irq_enable+0x18>)
    d798:	f000 001f 	and.w	r0, r0, #31
    d79c:	4083      	lsls	r3, r0
    d79e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    d7a2:	4770      	bx	lr
    d7a4:	e000e100 	.word	0xe000e100

0000d7a8 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    d7a8:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    d7aa:	2800      	cmp	r0, #0
    d7ac:	db0c      	blt.n	d7c8 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d7ae:	2201      	movs	r2, #1
    d7b0:	4906      	ldr	r1, [pc, #24]	; (d7cc <arch_irq_disable+0x24>)
    d7b2:	0943      	lsrs	r3, r0, #5
    d7b4:	f000 001f 	and.w	r0, r0, #31
    d7b8:	4082      	lsls	r2, r0
    d7ba:	3320      	adds	r3, #32
    d7bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    d7c0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    d7c4:	f3bf 8f6f 	isb	sy
}
    d7c8:	4770      	bx	lr
    d7ca:	bf00      	nop
    d7cc:	e000e100 	.word	0xe000e100

0000d7d0 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    d7d0:	4b05      	ldr	r3, [pc, #20]	; (d7e8 <arch_irq_is_enabled+0x18>)
    d7d2:	0942      	lsrs	r2, r0, #5
    d7d4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    d7d8:	2301      	movs	r3, #1
    d7da:	f000 001f 	and.w	r0, r0, #31
    d7de:	fa03 f000 	lsl.w	r0, r3, r0
}
    d7e2:	4010      	ands	r0, r2
    d7e4:	4770      	bx	lr
    d7e6:	bf00      	nop
    d7e8:	e000e100 	.word	0xe000e100

0000d7ec <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    d7ec:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    d7ee:	2800      	cmp	r0, #0
		prio += _IRQ_PRIO_OFFSET;
    d7f0:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d7f4:	bfac      	ite	ge
    d7f6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d7fa:	4b06      	ldrlt	r3, [pc, #24]	; (d814 <z_arm_irq_priority_set+0x28>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d7fc:	ea4f 1141 	mov.w	r1, r1, lsl #5
    d800:	b2c9      	uxtb	r1, r1
    d802:	bfab      	itete	ge
    d804:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d808:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d80c:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d810:	5419      	strblt	r1, [r3, r0]
}
    d812:	4770      	bx	lr
    d814:	e000ed14 	.word	0xe000ed14

0000d818 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    d818:	bf30      	wfi
    b z_SysNmiOnReset
    d81a:	f7ff bffd 	b.w	d818 <z_SysNmiOnReset>
    d81e:	bf00      	nop

0000d820 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    d820:	4a0b      	ldr	r2, [pc, #44]	; (d850 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    d822:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    d824:	4b0b      	ldr	r3, [pc, #44]	; (d854 <z_arm_prep_c+0x34>)
    d826:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    d82a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    d82c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    d830:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    d834:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    d838:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    d83c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    d840:	f00b fe38 	bl	194b4 <z_bss_zero>
	z_data_copy();
    d844:	f00c feae 	bl	1a5a4 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    d848:	f000 fc42 	bl	e0d0 <z_arm_interrupt_init>
	z_cstart();
    d84c:	f00b fe72 	bl	19534 <z_cstart>
    d850:	00008000 	.word	0x00008000
    d854:	e000ed00 	.word	0xe000ed00

0000d858 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    d858:	4a09      	ldr	r2, [pc, #36]	; (d880 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    d85a:	490a      	ldr	r1, [pc, #40]	; (d884 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    d85c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    d85e:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    d860:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
    d862:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    d864:	4908      	ldr	r1, [pc, #32]	; (d888 <arch_swap+0x30>)
    d866:	684b      	ldr	r3, [r1, #4]
    d868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    d86c:	604b      	str	r3, [r1, #4]
    d86e:	2300      	movs	r3, #0
    d870:	f383 8811 	msr	BASEPRI, r3
    d874:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    d878:	6893      	ldr	r3, [r2, #8]
}
    d87a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    d87c:	4770      	bx	lr
    d87e:	bf00      	nop
    d880:	2000a140 	.word	0x2000a140
    d884:	00023360 	.word	0x00023360
    d888:	e000ed00 	.word	0xe000ed00

0000d88c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    d88c:	4915      	ldr	r1, [pc, #84]	; (d8e4 <z_arm_pendsv+0x58>)
    ldr r2, [r1, #_kernel_offset_to_current]
    d88e:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
    d890:	f882 e081 	strb.w	lr, [r2, #129]	; 0x81
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    d894:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    d898:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    d89a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    d89e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    d8a2:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    d8a4:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    d8a8:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    d8ac:	4f0e      	ldr	r7, [pc, #56]	; (d8e8 <z_arm_pendsv+0x5c>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    d8ae:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    d8b2:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    d8b4:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    d8b6:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
    d8b8:	f992 e081 	ldrsb.w	lr, [r2, #129]	; 0x81

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    d8bc:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    d8be:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    d8c0:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    d8c2:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    d8c6:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    d8ca:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    d8ce:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    d8d2:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    d8d6:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    d8d8:	f010 f937 	bl	1db4a <configure_builtin_stack_guard>
    pop {r2, lr}
    d8dc:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    d8e0:	4770      	bx	lr
    d8e2:	0000      	.short	0x0000
    ldr r1, =_kernel
    d8e4:	2000a140 	.word	0x2000a140
    ldr v4, =_SCS_ICSR
    d8e8:	e000ed04 	.word	0xe000ed04

0000d8ec <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    d8ec:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    d8f0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    d8f2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    d8f6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    d8fa:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    d8fc:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    d900:	2902      	cmp	r1, #2
    beq _oops
    d902:	d0ff      	beq.n	d904 <_oops>

0000d904 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    d904:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    d906:	f010 f911 	bl	1db2c <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    d90a:	bd01      	pop	{r0, pc}

0000d90c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    d90c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    d910:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    d912:	490d      	ldr	r1, [pc, #52]	; (d948 <arch_new_thread+0x3c>)
	iframe->a2 = (uint32_t)p1;
    d914:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    d918:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    d91a:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    d91e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    d922:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    d924:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    d928:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    d92c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    d930:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    d934:	2300      	movs	r3, #0
    d936:	6783      	str	r3, [r0, #120]	; 0x78

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
    d938:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    d93c:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    d93e:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.mode = 0;
    d940:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    d944:	4770      	bx	lr
    d946:	bf00      	nop
    d948:	0001c3b3 	.word	0x0001c3b3

0000d94c <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    d94c:	4b08      	ldr	r3, [pc, #32]	; (d970 <arch_switch_to_main_thread+0x24>)
    d94e:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    d950:	6e83      	ldr	r3, [r0, #104]	; 0x68
    d952:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    d956:	4610      	mov	r0, r2
    d958:	f381 8809 	msr	PSP, r1
    d95c:	2100      	movs	r1, #0
    d95e:	b663      	cpsie	if
    d960:	f381 8811 	msr	BASEPRI, r1
    d964:	f3bf 8f6f 	isb	sy
    d968:	2200      	movs	r2, #0
    d96a:	2300      	movs	r3, #0
    d96c:	f00e fd21 	bl	1c3b2 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    d970:	2000a140 	.word	0x2000a140

0000d974 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    d974:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    d976:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    d978:	4a0b      	ldr	r2, [pc, #44]	; (d9a8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    d97a:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    d97c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    d97e:	bf1e      	ittt	ne
	movne	r1, #0
    d980:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    d982:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    d984:	f013 fb55 	blne	21032 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    d988:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    d98a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    d98e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    d992:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    d996:	4905      	ldr	r1, [pc, #20]	; (d9ac <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    d998:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    d99a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    d99c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    d99e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    d9a2:	4903      	ldr	r1, [pc, #12]	; (d9b0 <_isr_wrapper+0x3c>)
	bx r1
    d9a4:	4708      	bx	r1
    d9a6:	0000      	.short	0x0000
	ldr r2, =_kernel
    d9a8:	2000a140 	.word	0x2000a140
	ldr r1, =_sw_isr_table
    d9ac:	0002244c 	.word	0x0002244c
	ldr r1, =z_arm_int_exit
    d9b0:	0000d9b5 	.word	0x0000d9b5

0000d9b4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    d9b4:	4b04      	ldr	r3, [pc, #16]	; (d9c8 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    d9b6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    d9b8:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    d9ba:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    d9bc:	d003      	beq.n	d9c6 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    d9be:	4903      	ldr	r1, [pc, #12]	; (d9cc <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    d9c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    d9c4:	600a      	str	r2, [r1, #0]

0000d9c6 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    d9c6:	4770      	bx	lr
	ldr r3, =_kernel
    d9c8:	2000a140 	.word	0x2000a140
	ldr r1, =_SCS_ICSR
    d9cc:	e000ed04 	.word	0xe000ed04

0000d9d0 <mem_manage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    d9d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			      bool *recoverable)
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
    d9d4:	46e8      	mov	r8, sp
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    d9d6:	af00      	add	r7, sp, #0
	PR_FAULT_INFO("***** MPU FAULT *****");
    d9d8:	b088      	sub	sp, #32
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    d9da:	4606      	mov	r6, r0
    d9dc:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    d9de:	466a      	mov	r2, sp
    d9e0:	f04f 0903 	mov.w	r9, #3
    d9e4:	4b4d      	ldr	r3, [pc, #308]	; (db1c <mem_manage_fault.constprop.0+0x14c>)
    d9e6:	4c4e      	ldr	r4, [pc, #312]	; (db20 <mem_manage_fault.constprop.0+0x150>)
    d9e8:	6153      	str	r3, [r2, #20]
    d9ea:	6194      	str	r4, [r2, #24]
    d9ec:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d9f0:	484c      	ldr	r0, [pc, #304]	; (db24 <mem_manage_fault.constprop.0+0x154>)
    d9f2:	f842 9f10 	str.w	r9, [r2, #16]!
    d9f6:	f010 f8ac 	bl	1db52 <z_log_msg_static_create.constprop.0>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    d9fa:	4b4b      	ldr	r3, [pc, #300]	; (db28 <mem_manage_fault.constprop.0+0x158>)
    d9fc:	46c5      	mov	sp, r8
    d9fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    da00:	06db      	lsls	r3, r3, #27
    da02:	d50c      	bpl.n	da1e <mem_manage_fault.constprop.0+0x4e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    da04:	b088      	sub	sp, #32
    da06:	466a      	mov	r2, sp
    da08:	4b48      	ldr	r3, [pc, #288]	; (db2c <mem_manage_fault.constprop.0+0x15c>)
    da0a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    da0e:	e9c2 3405 	strd	r3, r4, [r2, #20]
    da12:	4844      	ldr	r0, [pc, #272]	; (db24 <mem_manage_fault.constprop.0+0x154>)
    da14:	f842 9f10 	str.w	r9, [r2, #16]!
    da18:	f010 f89b 	bl	1db52 <z_log_msg_static_create.constprop.0>
    da1c:	46c5      	mov	sp, r8
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    da1e:	4b42      	ldr	r3, [pc, #264]	; (db28 <mem_manage_fault.constprop.0+0x158>)
    da20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    da22:	0718      	lsls	r0, r3, #28
    da24:	d50e      	bpl.n	da44 <mem_manage_fault.constprop.0+0x74>
		PR_FAULT_INFO("  Unstacking error");
    da26:	46e8      	mov	r8, sp
    da28:	b088      	sub	sp, #32
    da2a:	466a      	mov	r2, sp
    da2c:	4b40      	ldr	r3, [pc, #256]	; (db30 <mem_manage_fault.constprop.0+0x160>)
    da2e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    da32:	e9c2 3405 	strd	r3, r4, [r2, #20]
    da36:	2303      	movs	r3, #3
    da38:	483a      	ldr	r0, [pc, #232]	; (db24 <mem_manage_fault.constprop.0+0x154>)
    da3a:	f842 3f10 	str.w	r3, [r2, #16]!
    da3e:	f010 f888 	bl	1db52 <z_log_msg_static_create.constprop.0>
    da42:	46c5      	mov	sp, r8
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    da44:	f8df 90e0 	ldr.w	r9, [pc, #224]	; db28 <mem_manage_fault.constprop.0+0x158>
    da48:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
    da4c:	0799      	lsls	r1, r3, #30
    da4e:	d52a      	bpl.n	daa6 <mem_manage_fault.constprop.0+0xd6>
		PR_FAULT_INFO("  Data Access Violation");
    da50:	46e8      	mov	r8, sp
    da52:	b088      	sub	sp, #32
    da54:	466a      	mov	r2, sp
    da56:	4b37      	ldr	r3, [pc, #220]	; (db34 <mem_manage_fault.constprop.0+0x164>)
    da58:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    da5c:	e9c2 3405 	strd	r3, r4, [r2, #20]
    da60:	2303      	movs	r3, #3
    da62:	4830      	ldr	r0, [pc, #192]	; (db24 <mem_manage_fault.constprop.0+0x154>)
    da64:	f842 3f10 	str.w	r3, [r2, #16]!
    da68:	f010 f873 	bl	1db52 <z_log_msg_static_create.constprop.0>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    da6c:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    da70:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
    da74:	46c5      	mov	sp, r8
    da76:	0612      	lsls	r2, r2, #24
    da78:	d515      	bpl.n	daa6 <mem_manage_fault.constprop.0+0xd6>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    da7a:	b088      	sub	sp, #32
    da7c:	466a      	mov	r2, sp
    da7e:	61d3      	str	r3, [r2, #28]
    da80:	2304      	movs	r3, #4
    da82:	492d      	ldr	r1, [pc, #180]	; (db38 <mem_manage_fault.constprop.0+0x168>)
    da84:	4827      	ldr	r0, [pc, #156]	; (db24 <mem_manage_fault.constprop.0+0x154>)
    da86:	e9c2 1405 	strd	r1, r4, [r2, #20]
    da8a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    da8e:	f842 3f10 	str.w	r3, [r2, #16]!
    da92:	f010 f85e 	bl	1db52 <z_log_msg_static_create.constprop.0>
    da96:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    da98:	b12e      	cbz	r6, daa6 <mem_manage_fault.constprop.0+0xd6>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    da9a:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
    da9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    daa2:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    daa6:	4b20      	ldr	r3, [pc, #128]	; (db28 <mem_manage_fault.constprop.0+0x158>)
    daa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    daaa:	07de      	lsls	r6, r3, #31
    daac:	d50e      	bpl.n	dacc <mem_manage_fault.constprop.0+0xfc>
		PR_FAULT_INFO("  Instruction Access Violation");
    daae:	466e      	mov	r6, sp
    dab0:	b088      	sub	sp, #32
    dab2:	466a      	mov	r2, sp
    dab4:	4b21      	ldr	r3, [pc, #132]	; (db3c <mem_manage_fault.constprop.0+0x16c>)
    dab6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    daba:	e9c2 3405 	strd	r3, r4, [r2, #20]
    dabe:	2303      	movs	r3, #3
    dac0:	4818      	ldr	r0, [pc, #96]	; (db24 <mem_manage_fault.constprop.0+0x154>)
    dac2:	f842 3f10 	str.w	r3, [r2, #16]!
    dac6:	f010 f844 	bl	1db52 <z_log_msg_static_create.constprop.0>
    daca:	46b5      	mov	sp, r6
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    dacc:	4b16      	ldr	r3, [pc, #88]	; (db28 <mem_manage_fault.constprop.0+0x158>)
    dace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dad0:	0698      	lsls	r0, r3, #26
    dad2:	d50e      	bpl.n	daf2 <mem_manage_fault.constprop.0+0x122>
		PR_FAULT_INFO(
    dad4:	466e      	mov	r6, sp
    dad6:	b088      	sub	sp, #32
    dad8:	466a      	mov	r2, sp
    dada:	4b19      	ldr	r3, [pc, #100]	; (db40 <mem_manage_fault.constprop.0+0x170>)
    dadc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    dae0:	e9c2 3405 	strd	r3, r4, [r2, #20]
    dae4:	2303      	movs	r3, #3
    dae6:	480f      	ldr	r0, [pc, #60]	; (db24 <mem_manage_fault.constprop.0+0x154>)
    dae8:	f842 3f10 	str.w	r3, [r2, #16]!
    daec:	f010 f831 	bl	1db52 <z_log_msg_static_create.constprop.0>
    daf0:	46b5      	mov	sp, r6

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    daf2:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    daf4:	4b0c      	ldr	r3, [pc, #48]	; (db28 <mem_manage_fault.constprop.0+0x158>)
    daf6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    daf8:	06d1      	lsls	r1, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    dafa:	bf58      	it	pl
    dafc:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    dafe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    db00:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    db02:	bf42      	ittt	mi
    db04:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    db06:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    db0a:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    db0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    db0e:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    db12:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    db14:	7028      	strb	r0, [r5, #0]

	return reason;
}
    db16:	46bd      	mov	sp, r7
    db18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    db1c:	00023da2 	.word	0x00023da2
    db20:	000241ad 	.word	0x000241ad
    db24:	00022888 	.word	0x00022888
    db28:	e000ed00 	.word	0xe000ed00
    db2c:	00023dbc 	.word	0x00023dbc
    db30:	00023df3 	.word	0x00023df3
    db34:	00023e0a 	.word	0x00023e0a
    db38:	00023e26 	.word	0x00023e26
    db3c:	00023e40 	.word	0x00023e40
    db40:	00023e63 	.word	0x00023e63

0000db44 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    db44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    db48:	46e8      	mov	r8, sp
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    db4a:	af00      	add	r7, sp, #0
	PR_FAULT_INFO("***** BUS FAULT *****");
    db4c:	b088      	sub	sp, #32
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    db4e:	4606      	mov	r6, r0
    db50:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    db52:	466a      	mov	r2, sp
    db54:	f04f 0903 	mov.w	r9, #3
    db58:	4b4c      	ldr	r3, [pc, #304]	; (dc8c <bus_fault.constprop.0+0x148>)
    db5a:	4c4d      	ldr	r4, [pc, #308]	; (dc90 <bus_fault.constprop.0+0x14c>)
    db5c:	6153      	str	r3, [r2, #20]
    db5e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    db62:	6194      	str	r4, [r2, #24]
    db64:	484b      	ldr	r0, [pc, #300]	; (dc94 <bus_fault.constprop.0+0x150>)
    db66:	f842 9f10 	str.w	r9, [r2, #16]!
    db6a:	f00f fff2 	bl	1db52 <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    db6e:	4b4a      	ldr	r3, [pc, #296]	; (dc98 <bus_fault.constprop.0+0x154>)
    db70:	46c5      	mov	sp, r8
    db72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    db74:	04d9      	lsls	r1, r3, #19
    db76:	d50c      	bpl.n	db92 <bus_fault.constprop.0+0x4e>
		PR_FAULT_INFO("  Stacking error");
    db78:	b088      	sub	sp, #32
    db7a:	466a      	mov	r2, sp
    db7c:	4b47      	ldr	r3, [pc, #284]	; (dc9c <bus_fault.constprop.0+0x158>)
    db7e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    db82:	e9c2 3405 	strd	r3, r4, [r2, #20]
    db86:	4843      	ldr	r0, [pc, #268]	; (dc94 <bus_fault.constprop.0+0x150>)
    db88:	f842 9f10 	str.w	r9, [r2, #16]!
    db8c:	f00f ffe1 	bl	1db52 <z_log_msg_static_create.constprop.0>
    db90:	46c5      	mov	sp, r8
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    db92:	4b41      	ldr	r3, [pc, #260]	; (dc98 <bus_fault.constprop.0+0x154>)
    db94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    db96:	051a      	lsls	r2, r3, #20
    db98:	d50e      	bpl.n	dbb8 <bus_fault.constprop.0+0x74>
		PR_FAULT_INFO("  Unstacking error");
    db9a:	46e8      	mov	r8, sp
    db9c:	b088      	sub	sp, #32
    db9e:	466a      	mov	r2, sp
    dba0:	4b3f      	ldr	r3, [pc, #252]	; (dca0 <bus_fault.constprop.0+0x15c>)
    dba2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    dba6:	e9c2 3405 	strd	r3, r4, [r2, #20]
    dbaa:	2303      	movs	r3, #3
    dbac:	4839      	ldr	r0, [pc, #228]	; (dc94 <bus_fault.constprop.0+0x150>)
    dbae:	f842 3f10 	str.w	r3, [r2, #16]!
    dbb2:	f00f ffce 	bl	1db52 <z_log_msg_static_create.constprop.0>
    dbb6:	46c5      	mov	sp, r8
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    dbb8:	f8df 90dc 	ldr.w	r9, [pc, #220]	; dc98 <bus_fault.constprop.0+0x154>
    dbbc:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
    dbc0:	059b      	lsls	r3, r3, #22
    dbc2:	d52a      	bpl.n	dc1a <bus_fault.constprop.0+0xd6>
		PR_FAULT_INFO("  Precise data bus error");
    dbc4:	46e8      	mov	r8, sp
    dbc6:	b088      	sub	sp, #32
    dbc8:	466a      	mov	r2, sp
    dbca:	4b36      	ldr	r3, [pc, #216]	; (dca4 <bus_fault.constprop.0+0x160>)
    dbcc:	4831      	ldr	r0, [pc, #196]	; (dc94 <bus_fault.constprop.0+0x150>)
    dbce:	e9c2 3405 	strd	r3, r4, [r2, #20]
    dbd2:	2303      	movs	r3, #3
    dbd4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    dbd8:	f842 3f10 	str.w	r3, [r2, #16]!
    dbdc:	f00f ffb9 	bl	1db52 <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    dbe0:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    dbe4:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
    dbe8:	46c5      	mov	sp, r8
    dbea:	0410      	lsls	r0, r2, #16
    dbec:	d515      	bpl.n	dc1a <bus_fault.constprop.0+0xd6>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    dbee:	b088      	sub	sp, #32
    dbf0:	466a      	mov	r2, sp
    dbf2:	61d3      	str	r3, [r2, #28]
    dbf4:	2304      	movs	r3, #4
    dbf6:	492c      	ldr	r1, [pc, #176]	; (dca8 <bus_fault.constprop.0+0x164>)
    dbf8:	4826      	ldr	r0, [pc, #152]	; (dc94 <bus_fault.constprop.0+0x150>)
    dbfa:	e9c2 1405 	strd	r1, r4, [r2, #20]
    dbfe:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    dc02:	f842 3f10 	str.w	r3, [r2, #16]!
    dc06:	f00f ffa4 	bl	1db52 <z_log_msg_static_create.constprop.0>
    dc0a:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    dc0c:	b12e      	cbz	r6, dc1a <bus_fault.constprop.0+0xd6>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    dc0e:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
    dc12:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    dc16:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    dc1a:	4b1f      	ldr	r3, [pc, #124]	; (dc98 <bus_fault.constprop.0+0x154>)
    dc1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dc1e:	0559      	lsls	r1, r3, #21
    dc20:	d50e      	bpl.n	dc40 <bus_fault.constprop.0+0xfc>
		PR_FAULT_INFO("  Imprecise data bus error");
    dc22:	466e      	mov	r6, sp
    dc24:	b088      	sub	sp, #32
    dc26:	466a      	mov	r2, sp
    dc28:	4b20      	ldr	r3, [pc, #128]	; (dcac <bus_fault.constprop.0+0x168>)
    dc2a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    dc2e:	e9c2 3405 	strd	r3, r4, [r2, #20]
    dc32:	2303      	movs	r3, #3
    dc34:	4817      	ldr	r0, [pc, #92]	; (dc94 <bus_fault.constprop.0+0x150>)
    dc36:	f842 3f10 	str.w	r3, [r2, #16]!
    dc3a:	f00f ff8a 	bl	1db52 <z_log_msg_static_create.constprop.0>
    dc3e:	46b5      	mov	sp, r6
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    dc40:	4b15      	ldr	r3, [pc, #84]	; (dc98 <bus_fault.constprop.0+0x154>)
    dc42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    dc44:	05d2      	lsls	r2, r2, #23
    dc46:	d518      	bpl.n	dc7a <bus_fault.constprop.0+0x136>
		PR_FAULT_INFO("  Instruction bus error");
    dc48:	466e      	mov	r6, sp
    dc4a:	b088      	sub	sp, #32
    dc4c:	466a      	mov	r2, sp
    dc4e:	4b18      	ldr	r3, [pc, #96]	; (dcb0 <bus_fault.constprop.0+0x16c>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    dc50:	e9c2 3405 	strd	r3, r4, [r2, #20]
    dc54:	2303      	movs	r3, #3
    dc56:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    dc5a:	480e      	ldr	r0, [pc, #56]	; (dc94 <bus_fault.constprop.0+0x150>)
    dc5c:	f842 3f10 	str.w	r3, [r2, #16]!
    dc60:	f00f ff77 	bl	1db52 <z_log_msg_static_create.constprop.0>
    dc64:	46b5      	mov	sp, r6
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf, true);
    dc66:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    dc68:	4a0b      	ldr	r2, [pc, #44]	; (dc98 <bus_fault.constprop.0+0x154>)
    dc6a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    dc6c:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    dc70:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    dc72:	7028      	strb	r0, [r5, #0]

	return reason;
}
    dc74:	46bd      	mov	sp, r7
    dc76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    dc7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dc7c:	049b      	lsls	r3, r3, #18
    dc7e:	d5f2      	bpl.n	dc66 <bus_fault.constprop.0+0x122>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    dc80:	466e      	mov	r6, sp
    dc82:	b088      	sub	sp, #32
    dc84:	466a      	mov	r2, sp
    dc86:	4b0b      	ldr	r3, [pc, #44]	; (dcb4 <bus_fault.constprop.0+0x170>)
    dc88:	e7e2      	b.n	dc50 <bus_fault.constprop.0+0x10c>
    dc8a:	bf00      	nop
    dc8c:	00023e96 	.word	0x00023e96
    dc90:	000241a3 	.word	0x000241a3
    dc94:	00022888 	.word	0x00022888
    dc98:	e000ed00 	.word	0xe000ed00
    dc9c:	00023eb0 	.word	0x00023eb0
    dca0:	00023df3 	.word	0x00023df3
    dca4:	00023ec5 	.word	0x00023ec5
    dca8:	00023ee2 	.word	0x00023ee2
    dcac:	00023efb 	.word	0x00023efb
    dcb0:	00023f1a 	.word	0x00023f1a
    dcb4:	00023e63 	.word	0x00023e63

0000dcb8 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    dcb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    dcba:	466d      	mov	r5, sp
static uint32_t usage_fault(const z_arch_esf_t *esf)
    dcbc:	af00      	add	r7, sp, #0
	PR_FAULT_INFO("***** USAGE FAULT *****");
    dcbe:	b088      	sub	sp, #32
    dcc0:	466a      	mov	r2, sp
    dcc2:	2603      	movs	r6, #3
    dcc4:	4b4d      	ldr	r3, [pc, #308]	; (ddfc <usage_fault.constprop.0+0x144>)
    dcc6:	4c4e      	ldr	r4, [pc, #312]	; (de00 <usage_fault.constprop.0+0x148>)
    dcc8:	6153      	str	r3, [r2, #20]
    dcca:	6194      	str	r4, [r2, #24]
    dccc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    dcd0:	484c      	ldr	r0, [pc, #304]	; (de04 <usage_fault.constprop.0+0x14c>)
    dcd2:	f842 6f10 	str.w	r6, [r2, #16]!
    dcd6:	f00f ff3c 	bl	1db52 <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    dcda:	4b4b      	ldr	r3, [pc, #300]	; (de08 <usage_fault.constprop.0+0x150>)
    dcdc:	46ad      	mov	sp, r5
    dcde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dce0:	019b      	lsls	r3, r3, #6
    dce2:	d50c      	bpl.n	dcfe <usage_fault.constprop.0+0x46>
		PR_FAULT_INFO("  Division by zero");
    dce4:	b088      	sub	sp, #32
    dce6:	466a      	mov	r2, sp
    dce8:	4b48      	ldr	r3, [pc, #288]	; (de0c <usage_fault.constprop.0+0x154>)
    dcea:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    dcee:	e9c2 3405 	strd	r3, r4, [r2, #20]
    dcf2:	4844      	ldr	r0, [pc, #272]	; (de04 <usage_fault.constprop.0+0x14c>)
    dcf4:	f842 6f10 	str.w	r6, [r2, #16]!
    dcf8:	f00f ff2b 	bl	1db52 <z_log_msg_static_create.constprop.0>
    dcfc:	46ad      	mov	sp, r5
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    dcfe:	4b42      	ldr	r3, [pc, #264]	; (de08 <usage_fault.constprop.0+0x150>)
    dd00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dd02:	01dd      	lsls	r5, r3, #7
    dd04:	d50e      	bpl.n	dd24 <usage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Unaligned memory access");
    dd06:	466d      	mov	r5, sp
    dd08:	b088      	sub	sp, #32
    dd0a:	466a      	mov	r2, sp
    dd0c:	4b40      	ldr	r3, [pc, #256]	; (de10 <usage_fault.constprop.0+0x158>)
    dd0e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    dd12:	e9c2 3405 	strd	r3, r4, [r2, #20]
    dd16:	2303      	movs	r3, #3
    dd18:	483a      	ldr	r0, [pc, #232]	; (de04 <usage_fault.constprop.0+0x14c>)
    dd1a:	f842 3f10 	str.w	r3, [r2, #16]!
    dd1e:	f00f ff18 	bl	1db52 <z_log_msg_static_create.constprop.0>
    dd22:	46ad      	mov	sp, r5
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    dd24:	4b38      	ldr	r3, [pc, #224]	; (de08 <usage_fault.constprop.0+0x150>)
    dd26:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    dd28:	f415 1580 	ands.w	r5, r5, #1048576	; 0x100000
    dd2c:	d00f      	beq.n	dd4e <usage_fault.constprop.0+0x96>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    dd2e:	466d      	mov	r5, sp
    dd30:	b088      	sub	sp, #32
    dd32:	466a      	mov	r2, sp
    dd34:	4b37      	ldr	r3, [pc, #220]	; (de14 <usage_fault.constprop.0+0x15c>)
    dd36:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    dd3a:	e9c2 3405 	strd	r3, r4, [r2, #20]
    dd3e:	2303      	movs	r3, #3
    dd40:	4830      	ldr	r0, [pc, #192]	; (de04 <usage_fault.constprop.0+0x14c>)
    dd42:	f842 3f10 	str.w	r3, [r2, #16]!
    dd46:	f00f ff04 	bl	1db52 <z_log_msg_static_create.constprop.0>
    dd4a:	46ad      	mov	sp, r5
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    dd4c:	2502      	movs	r5, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    dd4e:	4b2e      	ldr	r3, [pc, #184]	; (de08 <usage_fault.constprop.0+0x150>)
    dd50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dd52:	0318      	lsls	r0, r3, #12
    dd54:	d50e      	bpl.n	dd74 <usage_fault.constprop.0+0xbc>
		PR_FAULT_INFO("  No coprocessor instructions");
    dd56:	466e      	mov	r6, sp
    dd58:	b088      	sub	sp, #32
    dd5a:	466a      	mov	r2, sp
    dd5c:	4b2e      	ldr	r3, [pc, #184]	; (de18 <usage_fault.constprop.0+0x160>)
    dd5e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    dd62:	e9c2 3405 	strd	r3, r4, [r2, #20]
    dd66:	2303      	movs	r3, #3
    dd68:	4826      	ldr	r0, [pc, #152]	; (de04 <usage_fault.constprop.0+0x14c>)
    dd6a:	f842 3f10 	str.w	r3, [r2, #16]!
    dd6e:	f00f fef0 	bl	1db52 <z_log_msg_static_create.constprop.0>
    dd72:	46b5      	mov	sp, r6
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    dd74:	4b24      	ldr	r3, [pc, #144]	; (de08 <usage_fault.constprop.0+0x150>)
    dd76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dd78:	0359      	lsls	r1, r3, #13
    dd7a:	d50e      	bpl.n	dd9a <usage_fault.constprop.0+0xe2>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    dd7c:	466e      	mov	r6, sp
    dd7e:	b088      	sub	sp, #32
    dd80:	466a      	mov	r2, sp
    dd82:	4b26      	ldr	r3, [pc, #152]	; (de1c <usage_fault.constprop.0+0x164>)
    dd84:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    dd88:	e9c2 3405 	strd	r3, r4, [r2, #20]
    dd8c:	2303      	movs	r3, #3
    dd8e:	481d      	ldr	r0, [pc, #116]	; (de04 <usage_fault.constprop.0+0x14c>)
    dd90:	f842 3f10 	str.w	r3, [r2, #16]!
    dd94:	f00f fedd 	bl	1db52 <z_log_msg_static_create.constprop.0>
    dd98:	46b5      	mov	sp, r6
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    dd9a:	4b1b      	ldr	r3, [pc, #108]	; (de08 <usage_fault.constprop.0+0x150>)
    dd9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dd9e:	039a      	lsls	r2, r3, #14
    dda0:	d50e      	bpl.n	ddc0 <usage_fault.constprop.0+0x108>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    dda2:	466e      	mov	r6, sp
    dda4:	b088      	sub	sp, #32
    dda6:	466a      	mov	r2, sp
    dda8:	4b1d      	ldr	r3, [pc, #116]	; (de20 <usage_fault.constprop.0+0x168>)
    ddaa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    ddae:	e9c2 3405 	strd	r3, r4, [r2, #20]
    ddb2:	2303      	movs	r3, #3
    ddb4:	4813      	ldr	r0, [pc, #76]	; (de04 <usage_fault.constprop.0+0x14c>)
    ddb6:	f842 3f10 	str.w	r3, [r2, #16]!
    ddba:	f00f feca 	bl	1db52 <z_log_msg_static_create.constprop.0>
    ddbe:	46b5      	mov	sp, r6
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    ddc0:	4b11      	ldr	r3, [pc, #68]	; (de08 <usage_fault.constprop.0+0x150>)
    ddc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ddc4:	03db      	lsls	r3, r3, #15
    ddc6:	d50e      	bpl.n	dde6 <usage_fault.constprop.0+0x12e>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    ddc8:	466e      	mov	r6, sp
    ddca:	b088      	sub	sp, #32
    ddcc:	466a      	mov	r2, sp
    ddce:	4b15      	ldr	r3, [pc, #84]	; (de24 <usage_fault.constprop.0+0x16c>)
    ddd0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    ddd4:	e9c2 3405 	strd	r3, r4, [r2, #20]
    ddd8:	2303      	movs	r3, #3
    ddda:	480a      	ldr	r0, [pc, #40]	; (de04 <usage_fault.constprop.0+0x14c>)
    dddc:	f842 3f10 	str.w	r3, [r2, #16]!
    dde0:	f00f feb7 	bl	1db52 <z_log_msg_static_create.constprop.0>
    dde4:	46b5      	mov	sp, r6
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    dde6:	4a08      	ldr	r2, [pc, #32]	; (de08 <usage_fault.constprop.0+0x150>)

	return reason;
}
    dde8:	4628      	mov	r0, r5
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    ddea:	6a93      	ldr	r3, [r2, #40]	; 0x28
    ddec:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    ddf0:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    ddf4:	6293      	str	r3, [r2, #40]	; 0x28
}
    ddf6:	46bd      	mov	sp, r7
    ddf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ddfa:	bf00      	nop
    ddfc:	00023f36 	.word	0x00023f36
    de00:	00024197 	.word	0x00024197
    de04:	00022888 	.word	0x00022888
    de08:	e000ed00 	.word	0xe000ed00
    de0c:	00023f52 	.word	0x00023f52
    de10:	00023f69 	.word	0x00023f69
    de14:	00023f87 	.word	0x00023f87
    de18:	00023fb5 	.word	0x00023fb5
    de1c:	00023fd7 	.word	0x00023fd7
    de20:	00024000 	.word	0x00024000
    de24:	0002401e 	.word	0x0002401e

0000de28 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    de28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    de2c:	b08a      	sub	sp, #40	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    de2e:	4b8c      	ldr	r3, [pc, #560]	; (e060 <z_arm_fault+0x238>)
{
    de30:	4604      	mov	r4, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    de32:	f8d3 9004 	ldr.w	r9, [r3, #4]
{
    de36:	468a      	mov	sl, r1
    de38:	4616      	mov	r6, r2
    de3a:	2500      	movs	r5, #0
    de3c:	af00      	add	r7, sp, #0
    de3e:	f3c9 0808 	ubfx	r8, r9, #0, #9
    de42:	f385 8811 	msr	BASEPRI, r5
    de46:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    de4a:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    de4e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    de52:	d12a      	bne.n	deaa <z_arm_fault+0x82>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
    de54:	07d3      	lsls	r3, r2, #31
    de56:	d428      	bmi.n	deaa <z_arm_fault+0x82>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    de58:	0650      	lsls	r0, r2, #25
    de5a:	d403      	bmi.n	de64 <z_arm_fault+0x3c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    de5c:	0711      	lsls	r1, r2, #28
    de5e:	d414      	bmi.n	de8a <z_arm_fault+0x62>
			*nested_exc = true;
    de60:	2501      	movs	r5, #1
    de62:	e014      	b.n	de8e <z_arm_fault+0x66>
		PR_FAULT_INFO("Exception occurred in Secure State");
    de64:	466d      	mov	r5, sp
    de66:	b088      	sub	sp, #32
    de68:	466a      	mov	r2, sp
    de6a:	4b7e      	ldr	r3, [pc, #504]	; (e064 <z_arm_fault+0x23c>)
    de6c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    de70:	6153      	str	r3, [r2, #20]
    de72:	4b7d      	ldr	r3, [pc, #500]	; (e068 <z_arm_fault+0x240>)
    de74:	487d      	ldr	r0, [pc, #500]	; (e06c <z_arm_fault+0x244>)
    de76:	6193      	str	r3, [r2, #24]
    de78:	2303      	movs	r3, #3
    de7a:	f842 3f10 	str.w	r3, [r2, #16]!
    de7e:	f00f fe68 	bl	1db52 <z_log_msg_static_create.constprop.0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    de82:	f016 0604 	ands.w	r6, r6, #4
    de86:	46ad      	mov	sp, r5
    de88:	d000      	beq.n	de8c <z_arm_fault+0x64>
			ptr_esf = (z_arch_esf_t *)psp;
    de8a:	4654      	mov	r4, sl
	*nested_exc = false;
    de8c:	2500      	movs	r5, #0
	*recoverable = false;
    de8e:	2300      	movs	r3, #0
    de90:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
    de92:	f1a8 0303 	sub.w	r3, r8, #3
    de96:	2b09      	cmp	r3, #9
    de98:	f200 80c2 	bhi.w	e020 <z_arm_fault+0x1f8>
    de9c:	e8df f003 	tbb	[pc, r3]
    dea0:	a5aca907 	.word	0xa5aca907
    dea4:	c0c0c0c0 	.word	0xc0c0c0c0
    dea8:	afc0      	.short	0xafc0
		return NULL;
    deaa:	462c      	mov	r4, r5
    deac:	e7ef      	b.n	de8e <z_arm_fault+0x66>
	PR_FAULT_INFO("***** HARD FAULT *****");
    deae:	46e8      	mov	r8, sp
    deb0:	b088      	sub	sp, #32
    deb2:	466a      	mov	r2, sp
    deb4:	f04f 0a03 	mov.w	sl, #3
    deb8:	4b6d      	ldr	r3, [pc, #436]	; (e070 <z_arm_fault+0x248>)
    deba:	f8df 91b8 	ldr.w	r9, [pc, #440]	; e074 <z_arm_fault+0x24c>
    debe:	6153      	str	r3, [r2, #20]
    dec0:	f8c2 9018 	str.w	r9, [r2, #24]
    dec4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    dec8:	f842 af10 	str.w	sl, [r2, #16]!
    decc:	4867      	ldr	r0, [pc, #412]	; (e06c <z_arm_fault+0x244>)
    dece:	f00f fe40 	bl	1db52 <z_log_msg_static_create.constprop.0>
	*recoverable = false;
    ded2:	2300      	movs	r3, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    ded4:	4e62      	ldr	r6, [pc, #392]	; (e060 <z_arm_fault+0x238>)
	*recoverable = false;
    ded6:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    ded8:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    deda:	46c5      	mov	sp, r8
    dedc:	079a      	lsls	r2, r3, #30
    dede:	d50e      	bpl.n	defe <z_arm_fault+0xd6>
		PR_EXC("  Bus fault on vector table read");
    dee0:	b088      	sub	sp, #32
    dee2:	466a      	mov	r2, sp
    dee4:	4b64      	ldr	r3, [pc, #400]	; (e078 <z_arm_fault+0x250>)
		PR_EXC("  Debug event");
    dee6:	e9c2 3905 	strd	r3, r9, [r2, #20]
    deea:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    deee:	485f      	ldr	r0, [pc, #380]	; (e06c <z_arm_fault+0x244>)
    def0:	f842 af10 	str.w	sl, [r2, #16]!
    def4:	f00f fe2d 	bl	1db52 <z_log_msg_static_create.constprop.0>
    def8:	46c5      	mov	sp, r8
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    defa:	2300      	movs	r3, #0
    defc:	e03e      	b.n	df7c <z_arm_fault+0x154>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    defe:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    df00:	2b00      	cmp	r3, #0
    df02:	da03      	bge.n	df0c <z_arm_fault+0xe4>
		PR_EXC("  Debug event");
    df04:	b088      	sub	sp, #32
    df06:	466a      	mov	r2, sp
    df08:	4b5c      	ldr	r3, [pc, #368]	; (e07c <z_arm_fault+0x254>)
    df0a:	e7ec      	b.n	dee6 <z_arm_fault+0xbe>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    df0c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    df0e:	005b      	lsls	r3, r3, #1
    df10:	d5f3      	bpl.n	defa <z_arm_fault+0xd2>
		PR_EXC("  Fault escalation (see below)");
    df12:	b088      	sub	sp, #32
    df14:	466a      	mov	r2, sp
    df16:	4b5a      	ldr	r3, [pc, #360]	; (e080 <z_arm_fault+0x258>)
    df18:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    df1c:	e9c2 3905 	strd	r3, r9, [r2, #20]
    df20:	4852      	ldr	r0, [pc, #328]	; (e06c <z_arm_fault+0x244>)
    df22:	f842 af10 	str.w	sl, [r2, #16]!
    df26:	f00f fe14 	bl	1db52 <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    df2a:	6973      	ldr	r3, [r6, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    df2c:	69a2      	ldr	r2, [r4, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    df2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    df32:	46c5      	mov	sp, r8
    df34:	6173      	str	r3, [r6, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    df36:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    df3a:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    df3e:	6973      	ldr	r3, [r6, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    df40:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    df44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    df48:	6173      	str	r3, [r6, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    df4a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    df4e:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    df52:	f64d 7302 	movw	r3, #57090	; 0xdf02
    df56:	429a      	cmp	r2, r3
    df58:	d132      	bne.n	dfc0 <z_arm_fault+0x198>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    df5a:	b088      	sub	sp, #32
    df5c:	6823      	ldr	r3, [r4, #0]
    df5e:	466a      	mov	r2, sp
    df60:	61d3      	str	r3, [r2, #28]
    df62:	2304      	movs	r3, #4
    df64:	4947      	ldr	r1, [pc, #284]	; (e084 <z_arm_fault+0x25c>)
    df66:	4841      	ldr	r0, [pc, #260]	; (e06c <z_arm_fault+0x244>)
    df68:	e9c2 1905 	strd	r1, r9, [r2, #20]
    df6c:	f842 3f10 	str.w	r3, [r2, #16]!
    df70:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    df74:	f00f fded 	bl	1db52 <z_log_msg_static_create.constprop.0>
    df78:	46c5      	mov	sp, r8
			reason = esf->basic.r0;
    df7a:	6823      	ldr	r3, [r4, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    df7c:	79fa      	ldrb	r2, [r7, #7]
    df7e:	b9da      	cbnz	r2, dfb8 <z_arm_fault+0x190>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    df80:	f107 0608 	add.w	r6, r7, #8
    df84:	f104 0c20 	add.w	ip, r4, #32
    df88:	4632      	mov	r2, r6
    df8a:	6820      	ldr	r0, [r4, #0]
    df8c:	6861      	ldr	r1, [r4, #4]
    df8e:	3408      	adds	r4, #8
    df90:	c203      	stmia	r2!, {r0, r1}
    df92:	4564      	cmp	r4, ip
    df94:	4616      	mov	r6, r2
    df96:	d1f7      	bne.n	df88 <z_arm_fault+0x160>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    df98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    df9a:	2d00      	cmp	r5, #0
    df9c:	d05a      	beq.n	e054 <z_arm_fault+0x22c>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    df9e:	f3c2 0108 	ubfx	r1, r2, #0, #9
    dfa2:	b921      	cbnz	r1, dfae <z_arm_fault+0x186>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    dfa4:	ea6f 2252 	mvn.w	r2, r2, lsr #9
    dfa8:	ea6f 2242 	mvn.w	r2, r2, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    dfac:	627a      	str	r2, [r7, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    dfae:	4618      	mov	r0, r3
    dfb0:	f107 0108 	add.w	r1, r7, #8
    dfb4:	f7ff fb7c 	bl	d6b0 <z_arm_fatal_error>
}
    dfb8:	3728      	adds	r7, #40	; 0x28
    dfba:	46bd      	mov	sp, r7
    dfbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    dfc0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    dfc2:	b2db      	uxtb	r3, r3
    dfc4:	b123      	cbz	r3, dfd0 <z_arm_fault+0x1a8>
			reason = mem_manage_fault(esf, 1, recoverable);
    dfc6:	2001      	movs	r0, #1
    dfc8:	1df9      	adds	r1, r7, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    dfca:	f7ff fd01 	bl	d9d0 <mem_manage_fault.constprop.0>
    dfce:	e00e      	b.n	dfee <z_arm_fault+0x1c6>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    dfd0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    dfd2:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
    dfd6:	d004      	beq.n	dfe2 <z_arm_fault+0x1ba>
			reason = bus_fault(esf, 1, recoverable);
    dfd8:	2001      	movs	r0, #1
    dfda:	1df9      	adds	r1, r7, #7
		reason = bus_fault(esf, 0, recoverable);
    dfdc:	f7ff fdb2 	bl	db44 <bus_fault.constprop.0>
    dfe0:	e005      	b.n	dfee <z_arm_fault+0x1c6>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    dfe2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    dfe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    dfe8:	d387      	bcc.n	defa <z_arm_fault+0xd2>
			reason = usage_fault(esf);
    dfea:	f7ff fe65 	bl	dcb8 <usage_fault.constprop.0>
    dfee:	4603      	mov	r3, r0
    dff0:	e7c4      	b.n	df7c <z_arm_fault+0x154>
		reason = mem_manage_fault(esf, 0, recoverable);
    dff2:	2000      	movs	r0, #0
    dff4:	1df9      	adds	r1, r7, #7
    dff6:	e7e8      	b.n	dfca <z_arm_fault+0x1a2>
		reason = bus_fault(esf, 0, recoverable);
    dff8:	2000      	movs	r0, #0
    dffa:	1df9      	adds	r1, r7, #7
    dffc:	e7ee      	b.n	dfdc <z_arm_fault+0x1b4>
	PR_FAULT_INFO(
    dffe:	466e      	mov	r6, sp
    e000:	b088      	sub	sp, #32
    e002:	466a      	mov	r2, sp
    e004:	4b20      	ldr	r3, [pc, #128]	; (e088 <z_arm_fault+0x260>)
    e006:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    e00a:	6153      	str	r3, [r2, #20]
    e00c:	4b1f      	ldr	r3, [pc, #124]	; (e08c <z_arm_fault+0x264>)
    e00e:	6193      	str	r3, [r2, #24]
    e010:	2303      	movs	r3, #3
    e012:	f842 3f10 	str.w	r3, [r2, #16]!
	PR_FAULT_INFO("***** %s %d) *****",
    e016:	4815      	ldr	r0, [pc, #84]	; (e06c <z_arm_fault+0x244>)
    e018:	f00f fd9b 	bl	1db52 <z_log_msg_static_create.constprop.0>
    e01c:	46b5      	mov	sp, r6
}
    e01e:	e76c      	b.n	defa <z_arm_fault+0xd2>
	PR_FAULT_INFO("***** %s %d) *****",
    e020:	4a1b      	ldr	r2, [pc, #108]	; (e090 <z_arm_fault+0x268>)
    e022:	466e      	mov	r6, sp
    e024:	f419 7ff8 	tst.w	r9, #496	; 0x1f0
    e028:	b08a      	sub	sp, #40	; 0x28
    e02a:	4b1a      	ldr	r3, [pc, #104]	; (e094 <z_arm_fault+0x26c>)
    e02c:	bf18      	it	ne
    e02e:	4613      	movne	r3, r2
    e030:	466a      	mov	r2, sp
    e032:	4919      	ldr	r1, [pc, #100]	; (e098 <z_arm_fault+0x270>)
    e034:	6151      	str	r1, [r2, #20]
    e036:	4919      	ldr	r1, [pc, #100]	; (e09c <z_arm_fault+0x274>)
    e038:	e9c2 1306 	strd	r1, r3, [r2, #24]
    e03c:	f1a8 0310 	sub.w	r3, r8, #16
    e040:	6213      	str	r3, [r2, #32]
    e042:	f240 3301 	movw	r3, #769	; 0x301
    e046:	8493      	strh	r3, [r2, #36]	; 0x24
    e048:	4b15      	ldr	r3, [pc, #84]	; (e0a0 <z_arm_fault+0x278>)
    e04a:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
    e04e:	f842 3f10 	str.w	r3, [r2, #16]!
    e052:	e7e0      	b.n	e016 <z_arm_fault+0x1ee>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    e054:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
    e058:	f022 0201 	bic.w	r2, r2, #1
    e05c:	e7a6      	b.n	dfac <z_arm_fault+0x184>
    e05e:	bf00      	nop
    e060:	e000ed00 	.word	0xe000ed00
    e064:	0002407b 	.word	0x0002407b
    e068:	000241c9 	.word	0x000241c9
    e06c:	00022888 	.word	0x00022888
    e070:	000240a2 	.word	0x000240a2
    e074:	000241be 	.word	0x000241be
    e078:	000240bd 	.word	0x000240bd
    e07c:	000240e2 	.word	0x000240e2
    e080:	000240f4 	.word	0x000240f4
    e084:	00024117 	.word	0x00024117
    e088:	00024137 	.word	0x00024137
    e08c:	00024189 	.word	0x00024189
    e090:	00024062 	.word	0x00024062
    e094:	0002404d 	.word	0x0002404d
    e098:	0002415f 	.word	0x0002415f
    e09c:	00024176 	.word	0x00024176
    e0a0:	01000005 	.word	0x01000005

0000e0a4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    e0a4:	4b04      	ldr	r3, [pc, #16]	; (e0b8 <z_arm_fault_init+0x14>)
    e0a6:	695a      	ldr	r2, [r3, #20]
    e0a8:	f042 0210 	orr.w	r2, r2, #16
    e0ac:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    e0ae:	695a      	ldr	r2, [r3, #20]
    e0b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    e0b4:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    e0b6:	4770      	bx	lr
    e0b8:	e000ed00 	.word	0xe000ed00

0000e0bc <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    e0bc:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    e0c0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    e0c4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    e0c6:	4672      	mov	r2, lr
	bl z_arm_fault
    e0c8:	f7ff feae 	bl	de28 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    e0cc:	bd01      	pop	{r0, pc}
    e0ce:	bf00      	nop

0000e0d0 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    e0d0:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    e0d2:	2120      	movs	r1, #32
    e0d4:	4803      	ldr	r0, [pc, #12]	; (e0e4 <z_arm_interrupt_init+0x14>)
    e0d6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    e0d8:	3301      	adds	r3, #1
    e0da:	2b45      	cmp	r3, #69	; 0x45
    e0dc:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    e0e0:	d1f9      	bne.n	e0d6 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    e0e2:	4770      	bx	lr
    e0e4:	e000e100 	.word	0xe000e100

0000e0e8 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    e0e8:	2000      	movs	r0, #0
    msr CONTROL, r0
    e0ea:	f380 8814 	msr	CONTROL, r0
    isb
    e0ee:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    e0f2:	2000      	movs	r0, #0
    msr MSPLIM, r0
    e0f4:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    e0f8:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    e0fc:	f7fd fe52 	bl	bda4 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    e100:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    e102:	490e      	ldr	r1, [pc, #56]	; (e13c <__start+0x54>)
    str r0, [r1]
    e104:	6008      	str	r0, [r1, #0]
    dsb
    e106:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    e10a:	480d      	ldr	r0, [pc, #52]	; (e140 <__start+0x58>)
    msr msp, r0
    e10c:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    e110:	f000 f83e 	bl	e190 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    e114:	2020      	movs	r0, #32
    msr BASEPRI, r0
    e116:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    e11a:	480a      	ldr	r0, [pc, #40]	; (e144 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    e11c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    e120:	1840      	adds	r0, r0, r1
    msr PSP, r0
    e122:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    e126:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    e12a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    e12c:	4308      	orrs	r0, r1
    msr CONTROL, r0
    e12e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    e132:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    e136:	f7ff fb73 	bl	d820 <z_arm_prep_c>
    e13a:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    e13c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    e140:	2000d188 	.word	0x2000d188
    ldr r0, =z_interrupt_stacks
    e144:	2000c448 	.word	0x2000c448

0000e148 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    e148:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    e14c:	4905      	ldr	r1, [pc, #20]	; (e164 <sys_arch_reboot+0x1c>)
    e14e:	4b06      	ldr	r3, [pc, #24]	; (e168 <sys_arch_reboot+0x20>)
    e150:	68ca      	ldr	r2, [r1, #12]
    e152:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    e156:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    e158:	60cb      	str	r3, [r1, #12]
    e15a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    e15e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    e160:	e7fd      	b.n	e15e <sys_arch_reboot+0x16>
    e162:	bf00      	nop
    e164:	e000ed00 	.word	0xe000ed00
    e168:	05fa0004 	.word	0x05fa0004

0000e16c <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    e16c:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    e16e:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    e170:	4906      	ldr	r1, [pc, #24]	; (e18c <z_arm_clear_arm_mpu_config+0x20>)
    e172:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
    e176:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
    e17a:	4293      	cmp	r3, r2
    e17c:	db00      	blt.n	e180 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    e17e:	4770      	bx	lr
  mpu->RNR = rnr;
    e180:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
    e184:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    e188:	3301      	adds	r3, #1
    e18a:	e7f6      	b.n	e17a <z_arm_clear_arm_mpu_config+0xe>
    e18c:	e000ed00 	.word	0xe000ed00

0000e190 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    e190:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    e192:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    e194:	2400      	movs	r4, #0
    e196:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    e19a:	f7ff ffe7 	bl	e16c <z_arm_clear_arm_mpu_config>
    e19e:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    e1a0:	f04f 30ff 	mov.w	r0, #4294967295
    e1a4:	4a0c      	ldr	r2, [pc, #48]	; (e1d8 <z_arm_init_arch_hw_at_boot+0x48>)
    e1a6:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    e1aa:	3301      	adds	r3, #1
    e1ac:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    e1ae:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    e1b2:	d1f8      	bne.n	e1a6 <z_arm_init_arch_hw_at_boot+0x16>
    e1b4:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    e1b6:	f04f 30ff 	mov.w	r0, #4294967295
    e1ba:	4a07      	ldr	r2, [pc, #28]	; (e1d8 <z_arm_init_arch_hw_at_boot+0x48>)
    e1bc:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    e1c0:	3301      	adds	r3, #1
    e1c2:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    e1c4:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    e1c8:	d1f8      	bne.n	e1bc <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    e1ca:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    e1cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    e1d0:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    e1d4:	bd10      	pop	{r4, pc}
    e1d6:	bf00      	nop
    e1d8:	e000e100 	.word	0xe000e100

0000e1dc <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    e1dc:	4b08      	ldr	r3, [pc, #32]	; (e200 <z_impl_k_thread_abort+0x24>)
    e1de:	689b      	ldr	r3, [r3, #8]
    e1e0:	4283      	cmp	r3, r0
    e1e2:	d10b      	bne.n	e1fc <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    e1e4:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    e1e8:	b143      	cbz	r3, e1fc <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    e1ea:	4b06      	ldr	r3, [pc, #24]	; (e204 <z_impl_k_thread_abort+0x28>)
    e1ec:	685a      	ldr	r2, [r3, #4]
    e1ee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    e1f2:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    e1f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    e1f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    e1fa:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    e1fc:	f00c b960 	b.w	1a4c0 <z_thread_abort>
    e200:	2000a140 	.word	0x2000a140
    e204:	e000ed00 	.word	0xe000ed00

0000e208 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    e208:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    e20a:	4c09      	ldr	r4, [pc, #36]	; (e230 <z_arm_configure_static_mpu_regions+0x28>)
    e20c:	4a09      	ldr	r2, [pc, #36]	; (e234 <z_arm_configure_static_mpu_regions+0x2c>)
    e20e:	4623      	mov	r3, r4
    e210:	2101      	movs	r1, #1
    e212:	4809      	ldr	r0, [pc, #36]	; (e238 <z_arm_configure_static_mpu_regions+0x30>)
    e214:	f000 f934 	bl	e480 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    e218:	2300      	movs	r3, #0
    e21a:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    e21c:	4b07      	ldr	r3, [pc, #28]	; (e23c <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e21e:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    e220:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e222:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    e224:	9301      	str	r3, [sp, #4]
    e226:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e228:	f000 f934 	bl	e494 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    e22c:	b004      	add	sp, #16
    e22e:	bd10      	pop	{r4, pc}
    e230:	20070000 	.word	0x20070000
    e234:	20008000 	.word	0x20008000
    e238:	00022dec 	.word	0x00022dec
    e23c:	20008ac8 	.word	0x20008ac8

0000e240 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    e240:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
		| (region_conf->attr.rbar &
    e242:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    e244:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    e246:	f004 021f 	and.w	r2, r4, #31
		(region_conf->base & MPU_RBAR_BASE_Msk)
    e24a:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
    e24e:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    e250:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    e252:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    e254:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
    e258:	4905      	ldr	r1, [pc, #20]	; (e270 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    e25a:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    e25e:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
    e262:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
    e266:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
    e26a:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    e26e:	bd10      	pop	{r4, pc}
    e270:	e000ed00 	.word	0xe000ed00

0000e274 <region_allocate_and_init.part.0>:
#include "arm_mpu_v8_internal.h"
#else
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
    e274:	b580      	push	{r7, lr}
    e276:	af00      	add	r7, sp, #0
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    e278:	b088      	sub	sp, #32
    e27a:	466a      	mov	r2, sp
    e27c:	4b08      	ldr	r3, [pc, #32]	; (e2a0 <region_allocate_and_init.part.0+0x2c>)
    e27e:	6153      	str	r3, [r2, #20]
    e280:	4b08      	ldr	r3, [pc, #32]	; (e2a4 <region_allocate_and_init.part.0+0x30>)
    e282:	e9c2 3006 	strd	r3, r0, [r2, #24]
    e286:	2304      	movs	r3, #4
    e288:	f842 3f10 	str.w	r3, [r2, #16]!
    e28c:	2300      	movs	r3, #0
    e28e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    e292:	4805      	ldr	r0, [pc, #20]	; (e2a8 <region_allocate_and_init.part.0+0x34>)
    e294:	f7fe f80e 	bl	c2b4 <z_impl_z_log_msg_static_create>

	/* Program region */
	region_init(index, region_conf);

	return index;
}
    e298:	f06f 0015 	mvn.w	r0, #21
    e29c:	46bd      	mov	sp, r7
    e29e:	bd80      	pop	{r7, pc}
    e2a0:	000241d5 	.word	0x000241d5
    e2a4:	0002424d 	.word	0x0002424d
    e2a8:	00022878 	.word	0x00022878

0000e2ac <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    e2ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e2b0:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    e2b2:	4606      	mov	r6, r0
    e2b4:	f04f 0900 	mov.w	r9, #0
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    e2b8:	b087      	sub	sp, #28
	MPU->RNR = rnr;
    e2ba:	4d61      	ldr	r5, [pc, #388]	; (e440 <mpu_configure_regions_and_partition.constprop.0+0x194>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    e2bc:	af00      	add	r7, sp, #0
    e2be:	6079      	str	r1, [r7, #4]
	for (i = 0; i < regions_num; i++) {
    e2c0:	687b      	ldr	r3, [r7, #4]
    e2c2:	4599      	cmp	r9, r3
    e2c4:	da39      	bge.n	e33a <mpu_configure_regions_and_partition.constprop.0+0x8e>
		if (regions[i].size == 0U) {
    e2c6:	f8d6 8004 	ldr.w	r8, [r6, #4]
    e2ca:	f1b8 0f00 	cmp.w	r8, #0
    e2ce:	d058      	beq.n	e382 <mpu_configure_regions_and_partition.constprop.0+0xd6>
		&&
    e2d0:	f1b8 0f1f 	cmp.w	r8, #31
    e2d4:	d91d      	bls.n	e312 <mpu_configure_regions_and_partition.constprop.0+0x66>
		&&
    e2d6:	f018 0f1f 	tst.w	r8, #31
    e2da:	d11a      	bne.n	e312 <mpu_configure_regions_and_partition.constprop.0+0x66>
		((part->start &
    e2dc:	f8d6 b000 	ldr.w	fp, [r6]
		&&
    e2e0:	f01b 0f1f 	tst.w	fp, #31
    e2e4:	d115      	bne.n	e312 <mpu_configure_regions_and_partition.constprop.0+0x66>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e2e6:	4658      	mov	r0, fp
    e2e8:	f00f fc38 	bl	1db5c <arm_cmse_mpu_region_get>
    e2ec:	4682      	mov	sl, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e2ee:	eb08 000b 	add.w	r0, r8, fp
    e2f2:	3801      	subs	r0, #1
    e2f4:	f00f fc32 	bl	1db5c <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    e2f8:	4582      	cmp	sl, r0
    e2fa:	d023      	beq.n	e344 <mpu_configure_regions_and_partition.constprop.0+0x98>

		/* Derive the index of the underlying MPU region,
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);
    e2fc:	f06f 0a15 	mvn.w	sl, #21

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    e300:	466c      	mov	r4, sp
    e302:	b088      	sub	sp, #32
    e304:	466a      	mov	r2, sp
    e306:	494f      	ldr	r1, [pc, #316]	; (e444 <mpu_configure_regions_and_partition.constprop.0+0x198>)
    e308:	6151      	str	r1, [r2, #20]
    e30a:	494f      	ldr	r1, [pc, #316]	; (e448 <mpu_configure_regions_and_partition.constprop.0+0x19c>)
    e30c:	e9c2 1a06 	strd	r1, sl, [r2, #24]
    e310:	e007      	b.n	e322 <mpu_configure_regions_and_partition.constprop.0+0x76>
			LOG_ERR("Partition %u: sanity check failed.", i);
    e312:	466c      	mov	r4, sp
    e314:	b088      	sub	sp, #32
    e316:	466a      	mov	r2, sp
    e318:	4b4c      	ldr	r3, [pc, #304]	; (e44c <mpu_configure_regions_and_partition.constprop.0+0x1a0>)
    e31a:	6153      	str	r3, [r2, #20]
    e31c:	4b4a      	ldr	r3, [pc, #296]	; (e448 <mpu_configure_regions_and_partition.constprop.0+0x19c>)
    e31e:	e9c2 3906 	strd	r3, r9, [r2, #24]
			LOG_ERR("Invalid underlying region index %u",
    e322:	2304      	movs	r3, #4
    e324:	f842 3f10 	str.w	r3, [r2, #16]!
    e328:	2300      	movs	r3, #0
    e32a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    e32e:	4848      	ldr	r0, [pc, #288]	; (e450 <mpu_configure_regions_and_partition.constprop.0+0x1a4>)
    e330:	f7fd ffc0 	bl	c2b4 <z_impl_z_log_msg_static_create>
    e334:	46a5      	mov	sp, r4
			return -EINVAL;
    e336:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    e33a:	4620      	mov	r0, r4
    e33c:	371c      	adds	r7, #28
    e33e:	46bd      	mov	sp, r7
    e340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    e344:	f11a 0f16 	cmn.w	sl, #22
    e348:	d0da      	beq.n	e300 <mpu_configure_regions_and_partition.constprop.0+0x54>
    e34a:	4554      	cmp	r4, sl
    e34c:	ddd8      	ble.n	e300 <mpu_configure_regions_and_partition.constprop.0+0x54>
	MPU->RNR = rnr;
    e34e:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
    e352:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
    e356:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RLAR;
    e35a:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    e35e:	f020 001f 	bic.w	r0, r0, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    e362:	f042 081f 	orr.w	r8, r2, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    e366:	e9d6 2100 	ldrd	r2, r1, [r6]
    e36a:	4411      	add	r1, r2
		if ((regions[i].start == u_reg_base) &&
    e36c:	4290      	cmp	r0, r2
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    e36e:	f101 3bff 	add.w	fp, r1, #4294967295
		if ((regions[i].start == u_reg_base) &&
    e372:	d11e      	bne.n	e3b2 <mpu_configure_regions_and_partition.constprop.0+0x106>
    e374:	45d8      	cmp	r8, fp
    e376:	d108      	bne.n	e38a <mpu_configure_regions_and_partition.constprop.0+0xde>
			mpu_configure_region(u_reg_index, &regions[i]);
    e378:	4631      	mov	r1, r6
    e37a:	fa5f f08a 	uxtb.w	r0, sl
    e37e:	f00f fbf6 	bl	1db6e <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    e382:	f109 0901 	add.w	r9, r9, #1
    e386:	360c      	adds	r6, #12
    e388:	e79a      	b.n	e2c0 <mpu_configure_regions_and_partition.constprop.0+0x14>
	MPU->RNR = rnr;
    e38a:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
    e38e:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
    e392:	f021 011f 	bic.w	r1, r1, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
    e396:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
    e39a:	430b      	orrs	r3, r1
				mpu_configure_region(reg_index, &regions[i]);
    e39c:	4631      	mov	r1, r6
	MPU->RBAR = rbar;
    e39e:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    e3a2:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    e3a4:	f00f fbe3 	bl	1db6e <mpu_configure_region>
			if (reg_index == -EINVAL) {
    e3a8:	f110 0f16 	cmn.w	r0, #22
    e3ac:	d0c3      	beq.n	e336 <mpu_configure_regions_and_partition.constprop.0+0x8a>
			reg_index++;
    e3ae:	1c44      	adds	r4, r0, #1
    e3b0:	e7e7      	b.n	e382 <mpu_configure_regions_and_partition.constprop.0+0xd6>
				regions[i].start - 1);
    e3b2:	3a01      	subs	r2, #1
		} else if (reg_last == u_reg_last) {
    e3b4:	45d8      	cmp	r8, fp
				mpu_configure_region(reg_index, &regions[i]);
    e3b6:	b2e0      	uxtb	r0, r4
		     | (limit & MPU_RLAR_LIMIT_Msk));
    e3b8:	f022 021f 	bic.w	r2, r2, #31
	MPU->RNR = rnr;
    e3bc:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
		} else if (reg_last == u_reg_last) {
    e3c0:	d108      	bne.n	e3d4 <mpu_configure_regions_and_partition.constprop.0+0x128>
	return MPU->RLAR;
    e3c2:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    e3c6:	4631      	mov	r1, r6
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    e3c8:	f003 031f 	and.w	r3, r3, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    e3cc:	4313      	orrs	r3, r2
	MPU->RLAR = rlar;
    e3ce:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
			reg_index =
    e3d2:	e7e7      	b.n	e3a4 <mpu_configure_regions_and_partition.constprop.0+0xf8>
	return MPU->RLAR;
    e3d4:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    e3d8:	f001 011f 	and.w	r1, r1, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    e3dc:	430a      	orrs	r2, r1
	MPU->RLAR = rlar;
    e3de:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    e3e2:	4631      	mov	r1, r6
    e3e4:	f00f fbc3 	bl	1db6e <mpu_configure_region>
			if (reg_index == -EINVAL) {
    e3e8:	f110 0f16 	cmn.w	r0, #22
    e3ec:	d0a3      	beq.n	e336 <mpu_configure_regions_and_partition.constprop.0+0x8a>
	MPU->RNR = rnr;
    e3ee:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
    e3f2:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    e3f6:	7c3b      	ldrb	r3, [r7, #16]
			REGION_LIMIT_ADDR((regions[i].start +
    e3f8:	f108 38ff 	add.w	r8, r8, #4294967295
	attr->rbar = mpu_get_rbar() &
    e3fc:	f362 0304 	bfi	r3, r2, #0, #5
    e400:	743b      	strb	r3, [r7, #16]
	return MPU->RLAR;
    e402:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    e406:	7c3a      	ldrb	r2, [r7, #16]
    e408:	085b      	lsrs	r3, r3, #1
    e40a:	f363 1247 	bfi	r2, r3, #5, #3
    e40e:	743a      	strb	r2, [r7, #16]
			fill_region.base = regions[i].start +
    e410:	e9d6 3200 	ldrd	r3, r2, [r6]
    e414:	4413      	add	r3, r2
    e416:	60bb      	str	r3, [r7, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    e418:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    e41c:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    e41e:	4443      	add	r3, r8
    e420:	eba3 030b 	sub.w	r3, r3, fp
				region_allocate_and_init(reg_index,
    e424:	b2e0      	uxtb	r0, r4
			REGION_LIMIT_ADDR((regions[i].start +
    e426:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    e42a:	2807      	cmp	r0, #7
			fill_region.attr.r_limit =
    e42c:	617b      	str	r3, [r7, #20]
    e42e:	d902      	bls.n	e436 <mpu_configure_regions_and_partition.constprop.0+0x18a>
    e430:	f7ff ff20 	bl	e274 <region_allocate_and_init.part.0>
			if (reg_index == -EINVAL) {
    e434:	e7b8      	b.n	e3a8 <mpu_configure_regions_and_partition.constprop.0+0xfc>
	region_init(index, region_conf);
    e436:	f107 0108 	add.w	r1, r7, #8
    e43a:	f7ff ff01 	bl	e240 <region_init>
    e43e:	e7b6      	b.n	e3ae <mpu_configure_regions_and_partition.constprop.0+0x102>
    e440:	e000ed00 	.word	0xe000ed00
    e444:	00024226 	.word	0x00024226
    e448:	00024266 	.word	0x00024266
    e44c:	000241ff 	.word	0x000241ff
    e450:	00022878 	.word	0x00022878

0000e454 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    e454:	2205      	movs	r2, #5
    e456:	4b04      	ldr	r3, [pc, #16]	; (e468 <arm_core_mpu_enable+0x14>)
    e458:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    e45c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    e460:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    e464:	4770      	bx	lr
    e466:	bf00      	nop
    e468:	e000ed00 	.word	0xe000ed00

0000e46c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    e46c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    e470:	2200      	movs	r2, #0
    e472:	4b02      	ldr	r3, [pc, #8]	; (e47c <arm_core_mpu_disable+0x10>)
    e474:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    e478:	4770      	bx	lr
    e47a:	bf00      	nop
    e47c:	e000ed00 	.word	0xe000ed00

0000e480 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    e480:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    e482:	4c03      	ldr	r4, [pc, #12]	; (e490 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    e484:	7822      	ldrb	r2, [r4, #0]
    e486:	f7ff ff11 	bl	e2ac <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    e48a:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    e48c:	bd10      	pop	{r4, pc}
    e48e:	bf00      	nop
    e490:	2000a1b1 	.word	0x2000a1b1

0000e494 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
    e494:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e498:	4d29      	ldr	r5, [pc, #164]	; (e540 <arm_core_mpu_mark_areas_for_dynamic_regions+0xac>)
    e49a:	468a      	mov	sl, r1

/* This internal function marks and stores the configuration of memory areas
 * where dynamic region programming is allowed. Return zero on success, or
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
    e49c:	4606      	mov	r6, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e49e:	f04f 0800 	mov.w	r8, #0
    e4a2:	46ab      	mov	fp, r5
	MPU->RNR = rnr;
    e4a4:	4f27      	ldr	r7, [pc, #156]	; (e544 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e4a6:	45d0      	cmp	r8, sl
    e4a8:	da1b      	bge.n	e4e2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    e4aa:	f8d6 9004 	ldr.w	r9, [r6, #4]
    e4ae:	f1b9 0f00 	cmp.w	r9, #0
    e4b2:	d03f      	beq.n	e534 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    e4b4:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e4b6:	4608      	mov	r0, r1
    e4b8:	9101      	str	r1, [sp, #4]
    e4ba:	f00f fb4f 	bl	1db5c <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e4be:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e4c0:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e4c2:	eb09 0001 	add.w	r0, r9, r1
    e4c6:	3801      	subs	r0, #1
    e4c8:	f00f fb48 	bl	1db5c <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    e4cc:	4284      	cmp	r4, r0
    e4ce:	f04f 0214 	mov.w	r2, #20
    e4d2:	4b1d      	ldr	r3, [pc, #116]	; (e548 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb4>)
    e4d4:	d008      	beq.n	e4e8 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    e4d6:	fb02 f308 	mul.w	r3, r2, r8
    e4da:	f06f 0215 	mvn.w	r2, #21
    e4de:	f84b 2003 	str.w	r2, [fp, r3]
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
    e4e2:	b003      	add	sp, #12
    e4e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    e4e8:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    e4ec:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    e4ee:	d0f8      	beq.n	e4e2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    e4f0:	7819      	ldrb	r1, [r3, #0]
    e4f2:	42a1      	cmp	r1, r4
    e4f4:	ddf5      	ble.n	e4e2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = mpu_get_rbar() &
    e4f6:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = rnr;
    e4fa:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
    e4fe:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	return MPU->RBAR;
    e502:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    e506:	f100 0108 	add.w	r1, r0, #8
    e50a:	7b00      	ldrb	r0, [r0, #12]
    e50c:	f364 0004 	bfi	r0, r4, #0, #5
    e510:	7108      	strb	r0, [r1, #4]
	return MPU->RLAR;
    e512:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    e516:	790c      	ldrb	r4, [r1, #4]
    e518:	0840      	lsrs	r0, r0, #1
    e51a:	f360 1447 	bfi	r4, r0, #5, #3
    e51e:	710c      	strb	r4, [r1, #4]
	return MPU->RBAR;
    e520:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    e524:	f021 011f 	bic.w	r1, r1, #31
    e528:	6069      	str	r1, [r5, #4]
	return MPU->RLAR;
    e52a:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
    e52e:	f021 011f 	bic.w	r1, r1, #31
    e532:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e534:	f108 0801 	add.w	r8, r8, #1
    e538:	3514      	adds	r5, #20
    e53a:	360c      	adds	r6, #12
    e53c:	e7b3      	b.n	e4a6 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    e53e:	bf00      	nop
    e540:	20009d2c 	.word	0x20009d2c
    e544:	e000ed00 	.word	0xe000ed00
    e548:	2000a1b1 	.word	0x2000a1b1

0000e54c <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    e54c:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    e54e:	4d0e      	ldr	r5, [pc, #56]	; (e588 <z_arm_mpu_init+0x3c>)
    e550:	682c      	ldr	r4, [r5, #0]
    e552:	2c08      	cmp	r4, #8
    e554:	d815      	bhi.n	e582 <z_arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e556:	2000      	movs	r0, #0
	arm_core_mpu_disable();
    e558:	f7ff ff88 	bl	e46c <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
    e55c:	4b0b      	ldr	r3, [pc, #44]	; (e58c <z_arm_mpu_init+0x40>)
    e55e:	4a0c      	ldr	r2, [pc, #48]	; (e590 <z_arm_mpu_init+0x44>)
    e560:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e564:	4284      	cmp	r4, r0
    e566:	d105      	bne.n	e574 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    e568:	4b0a      	ldr	r3, [pc, #40]	; (e594 <z_arm_mpu_init+0x48>)
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    e56a:	2000      	movs	r0, #0
	static_regions_num = mpu_config.num_regions;
    e56c:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    e56e:	f7ff ff71 	bl	e454 <arm_core_mpu_enable>
}
    e572:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    e574:	6869      	ldr	r1, [r5, #4]
    e576:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    e57a:	f7ff fe61 	bl	e240 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e57e:	3001      	adds	r0, #1
    e580:	e7f0      	b.n	e564 <z_arm_mpu_init+0x18>
		return -1;
    e582:	f04f 30ff 	mov.w	r0, #4294967295
    e586:	e7f4      	b.n	e572 <z_arm_mpu_init+0x26>
    e588:	00022df8 	.word	0x00022df8
    e58c:	e000ed00 	.word	0xe000ed00
    e590:	0044ffaa 	.word	0x0044ffaa
    e594:	2000a1b1 	.word	0x2000a1b1

0000e598 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    e598:	4b01      	ldr	r3, [pc, #4]	; (e5a0 <__stdout_hook_install+0x8>)
    e59a:	6018      	str	r0, [r3, #0]
}
    e59c:	4770      	bx	lr
    e59e:	bf00      	nop
    e5a0:	20008390 	.word	0x20008390

0000e5a4 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
    e5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e5a6:	4606      	mov	r6, r0
    e5a8:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
    e5aa:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
    e5ac:	4f06      	ldr	r7, [pc, #24]	; (e5c8 <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
    e5ae:	42ac      	cmp	r4, r5
    e5b0:	da08      	bge.n	e5c4 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
    e5b2:	683b      	ldr	r3, [r7, #0]
    e5b4:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    e5b6:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
    e5b8:	5530      	strb	r0, [r6, r4]
	for (i = 0; i < nbytes; i++) {
    e5ba:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    e5be:	d001      	beq.n	e5c4 <z_impl_zephyr_read_stdin+0x20>
    e5c0:	280d      	cmp	r0, #13
    e5c2:	d1f4      	bne.n	e5ae <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
    e5c4:	4620      	mov	r0, r4
    e5c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e5c8:	2000838c 	.word	0x2000838c

0000e5cc <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
    e5cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e5ce:	460d      	mov	r5, r1
    e5d0:	4f09      	ldr	r7, [pc, #36]	; (e5f8 <z_impl_zephyr_write_stdout+0x2c>)
    e5d2:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
    e5d4:	f1c0 0401 	rsb	r4, r0, #1
    e5d8:	19a3      	adds	r3, r4, r6
    e5da:	429d      	cmp	r5, r3
    e5dc:	dc01      	bgt.n	e5e2 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
    e5de:	4628      	mov	r0, r5
    e5e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
    e5e2:	7873      	ldrb	r3, [r6, #1]
    e5e4:	2b0a      	cmp	r3, #10
    e5e6:	d102      	bne.n	e5ee <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
    e5e8:	200d      	movs	r0, #13
    e5ea:	683b      	ldr	r3, [r7, #0]
    e5ec:	4798      	blx	r3
		_stdout_hook(*(buf + i));
    e5ee:	683b      	ldr	r3, [r7, #0]
    e5f0:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    e5f4:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
    e5f6:	e7ef      	b.n	e5d8 <z_impl_zephyr_write_stdout+0xc>
    e5f8:	20008390 	.word	0x20008390

0000e5fc <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
    e5fc:	b508      	push	{r3, lr}
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
    e5fe:	2105      	movs	r1, #5
    e600:	4801      	ldr	r0, [pc, #4]	; (e608 <_exit+0xc>)
    e602:	f7ff ffe3 	bl	e5cc <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
    e606:	e7fe      	b.n	e606 <_exit+0xa>
    e608:	0002428a 	.word	0x0002428a

0000e60c <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
    e60c:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
    e60e:	4c07      	ldr	r4, [pc, #28]	; (e62c <_sbrk+0x20>)
    e610:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    e612:	18c2      	adds	r2, r0, r3
    e614:	4806      	ldr	r0, [pc, #24]	; (e630 <_sbrk+0x24>)
    e616:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
    e61a:	f501 21e0 	add.w	r1, r1, #458752	; 0x70000
    e61e:	428a      	cmp	r2, r1
		heap_sz += count;
    e620:	bf36      	itet	cc
    e622:	6022      	strcc	r2, [r4, #0]

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
    e624:	f04f 30ff 	movcs.w	r0, #4294967295
	ptr = ((char *)HEAP_BASE) + heap_sz;
    e628:	18c0      	addcc	r0, r0, r3
	}

	return ret;
}
    e62a:	bd10      	pop	{r4, pc}
    e62c:	20009d40 	.word	0x20009d40
    e630:	2000f2b8 	.word	0x2000f2b8

0000e634 <remoteproc_mgr_boot>:
	 * this case do the remainder of actions to properly configure and
	 * boot the Network MCU.
	 */

	/* Release the Network MCU, 'Release force off signal' */
	NRF_RESET->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Release;
    e634:	2000      	movs	r0, #0
    e636:	4b02      	ldr	r3, [pc, #8]	; (e640 <remoteproc_mgr_boot+0xc>)
    e638:	f8c3 0614 	str.w	r0, [r3, #1556]	; 0x614

	LOG_DBG("Network MCU released.");
#endif /* !CONFIG_TRUSTED_EXECUTION_SECURE */

	return 0;
}
    e63c:	4770      	bx	lr
    e63e:	bf00      	nop
    e640:	40005000 	.word	0x40005000

0000e644 <bt_hex>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    e644:	4b0e      	ldr	r3, [pc, #56]	; (e680 <bt_hex+0x3c>)
    e646:	2940      	cmp	r1, #64	; 0x40
    e648:	bf28      	it	cs
    e64a:	2140      	movcs	r1, #64	; 0x40
{
    e64c:	b570      	push	{r4, r5, r6, lr}
    e64e:	461d      	mov	r5, r3

	for (i = 0; i < len; i++) {
		str[i * 2] = hex[b[i] >> 4];
    e650:	4c0c      	ldr	r4, [pc, #48]	; (e684 <bt_hex+0x40>)
    e652:	1846      	adds	r6, r0, r1
	for (i = 0; i < len; i++) {
    e654:	42b0      	cmp	r0, r6
    e656:	f103 0302 	add.w	r3, r3, #2
    e65a:	d104      	bne.n	e666 <bt_hex+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    e65c:	2300      	movs	r3, #0
    e65e:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    e662:	4807      	ldr	r0, [pc, #28]	; (e680 <bt_hex+0x3c>)
    e664:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2] = hex[b[i] >> 4];
    e666:	7802      	ldrb	r2, [r0, #0]
    e668:	0912      	lsrs	r2, r2, #4
    e66a:	5ca2      	ldrb	r2, [r4, r2]
    e66c:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    e670:	f810 2b01 	ldrb.w	r2, [r0], #1
    e674:	f002 020f 	and.w	r2, r2, #15
    e678:	5ca2      	ldrb	r2, [r4, r2]
    e67a:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
    e67e:	e7e9      	b.n	e654 <bt_hex+0x10>
    e680:	2000a1d0 	.word	0x2000a1d0
    e684:	000242d7 	.word	0x000242d7

0000e688 <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
    e688:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
    e68a:	7803      	ldrb	r3, [r0, #0]
    e68c:	b08b      	sub	sp, #44	; 0x2c
    e68e:	4604      	mov	r4, r0
    e690:	ad07      	add	r5, sp, #28
    e692:	2b03      	cmp	r3, #3
    e694:	d821      	bhi.n	e6da <bt_addr_le_str+0x52>
    e696:	e8df f003 	tbb	[pc, r3]
    e69a:	1a02      	.short	0x1a02
    e69c:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
    e69e:	4912      	ldr	r1, [pc, #72]	; (e6e8 <bt_addr_le_str+0x60>)
		strcpy(type, "random");
    e6a0:	4628      	mov	r0, r5
    e6a2:	f013 fb29 	bl	21cf8 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    e6a6:	9505      	str	r5, [sp, #20]
    e6a8:	7863      	ldrb	r3, [r4, #1]
    e6aa:	211e      	movs	r1, #30
    e6ac:	9304      	str	r3, [sp, #16]
    e6ae:	78a3      	ldrb	r3, [r4, #2]
    e6b0:	4a0e      	ldr	r2, [pc, #56]	; (e6ec <bt_addr_le_str+0x64>)
    e6b2:	9303      	str	r3, [sp, #12]
    e6b4:	78e3      	ldrb	r3, [r4, #3]
    e6b6:	480e      	ldr	r0, [pc, #56]	; (e6f0 <bt_addr_le_str+0x68>)
    e6b8:	9302      	str	r3, [sp, #8]
    e6ba:	7923      	ldrb	r3, [r4, #4]
    e6bc:	9301      	str	r3, [sp, #4]
    e6be:	7963      	ldrb	r3, [r4, #5]
    e6c0:	9300      	str	r3, [sp, #0]
    e6c2:	79a3      	ldrb	r3, [r4, #6]
    e6c4:	f00d fe68 	bl	1c398 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    e6c8:	4809      	ldr	r0, [pc, #36]	; (e6f0 <bt_addr_le_str+0x68>)
    e6ca:	b00b      	add	sp, #44	; 0x2c
    e6cc:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    e6ce:	4909      	ldr	r1, [pc, #36]	; (e6f4 <bt_addr_le_str+0x6c>)
    e6d0:	e7e6      	b.n	e6a0 <bt_addr_le_str+0x18>
		strcpy(type, "public-id");
    e6d2:	4909      	ldr	r1, [pc, #36]	; (e6f8 <bt_addr_le_str+0x70>)
    e6d4:	e7e4      	b.n	e6a0 <bt_addr_le_str+0x18>
		strcpy(type, "random-id");
    e6d6:	4909      	ldr	r1, [pc, #36]	; (e6fc <bt_addr_le_str+0x74>)
    e6d8:	e7e2      	b.n	e6a0 <bt_addr_le_str+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    e6da:	210a      	movs	r1, #10
    e6dc:	4628      	mov	r0, r5
    e6de:	4a08      	ldr	r2, [pc, #32]	; (e700 <bt_addr_le_str+0x78>)
    e6e0:	f00d fe5a 	bl	1c398 <snprintk>
		break;
    e6e4:	e7df      	b.n	e6a6 <bt_addr_le_str+0x1e>
    e6e6:	bf00      	nop
    e6e8:	00023734 	.word	0x00023734
    e6ec:	00023756 	.word	0x00023756
    e6f0:	2000a1b2 	.word	0x2000a1b2
    e6f4:	0002373b 	.word	0x0002373b
    e6f8:	00023742 	.word	0x00023742
    e6fc:	0002374c 	.word	0x0002374c
    e700:	00025fc7 	.word	0x00025fc7

0000e704 <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(const struct device *d)
{
    e704:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(d);

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
    e706:	2400      	movs	r4, #0

	k_work_queue_init(&bt_long_wq);
    e708:	4d09      	ldr	r5, [pc, #36]	; (e730 <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
    e70a:	4b0a      	ldr	r3, [pc, #40]	; (e734 <long_wq_init+0x30>)
{
    e70c:	b085      	sub	sp, #20
	k_work_queue_init(&bt_long_wq);
    e70e:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
    e710:	9302      	str	r3, [sp, #8]
    e712:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
    e714:	f012 fe35 	bl	21382 <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
    e718:	ab02      	add	r3, sp, #8
    e71a:	4628      	mov	r0, r5
    e71c:	9300      	str	r3, [sp, #0]
    e71e:	f44f 62a3 	mov.w	r2, #1304	; 0x518
    e722:	230a      	movs	r3, #10
    e724:	4904      	ldr	r1, [pc, #16]	; (e738 <long_wq_init+0x34>)
    e726:	f00b fb09 	bl	19d3c <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
    e72a:	4620      	mov	r0, r4
    e72c:	b005      	add	sp, #20
    e72e:	bd30      	pop	{r4, r5, pc}
    e730:	20009488 	.word	0x20009488
    e734:	000242ef 	.word	0x000242ef
    e738:	2000b598 	.word	0x2000b598

0000e73c <bt_long_wq_schedule>:
{
    e73c:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
    e73e:	4801      	ldr	r0, [pc, #4]	; (e744 <bt_long_wq_schedule+0x8>)
    e740:	f00b bb72 	b.w	19e28 <k_work_schedule_for_queue>
    e744:	20009488 	.word	0x20009488

0000e748 <uuid_to_uuid128>:
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
	switch (src->type) {
    e748:	7803      	ldrb	r3, [r0, #0]
{
    e74a:	b530      	push	{r4, r5, lr}
	switch (src->type) {
    e74c:	2b01      	cmp	r3, #1
    e74e:	d013      	beq.n	e778 <uuid_to_uuid128+0x30>
    e750:	2b02      	cmp	r3, #2
    e752:	d027      	beq.n	e7a4 <uuid_to_uuid128+0x5c>
    e754:	b97b      	cbnz	r3, e776 <uuid_to_uuid128+0x2e>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    e756:	460a      	mov	r2, r1
    e758:	4b18      	ldr	r3, [pc, #96]	; (e7bc <uuid_to_uuid128+0x74>)
    e75a:	f103 0410 	add.w	r4, r3, #16
    e75e:	f853 5b04 	ldr.w	r5, [r3], #4
    e762:	42a3      	cmp	r3, r4
    e764:	f842 5b04 	str.w	r5, [r2], #4
    e768:	d1f9      	bne.n	e75e <uuid_to_uuid128+0x16>
    e76a:	781b      	ldrb	r3, [r3, #0]
    e76c:	7013      	strb	r3, [r2, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    e76e:	8843      	ldrh	r3, [r0, #2]
	dst[0] = val;
    e770:	734b      	strb	r3, [r1, #13]
	dst[1] = val >> 8;
    e772:	0a1b      	lsrs	r3, r3, #8
    e774:	738b      	strb	r3, [r1, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    e776:	bd30      	pop	{r4, r5, pc}
		*dst = uuid128_base;
    e778:	460a      	mov	r2, r1
    e77a:	4b10      	ldr	r3, [pc, #64]	; (e7bc <uuid_to_uuid128+0x74>)
    e77c:	f103 0410 	add.w	r4, r3, #16
    e780:	f853 5b04 	ldr.w	r5, [r3], #4
    e784:	42a3      	cmp	r3, r4
    e786:	f842 5b04 	str.w	r5, [r2], #4
    e78a:	d1f9      	bne.n	e780 <uuid_to_uuid128+0x38>
    e78c:	781b      	ldrb	r3, [r3, #0]
    e78e:	7013      	strb	r3, [r2, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    e790:	6843      	ldr	r3, [r0, #4]
    e792:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
    e796:	734b      	strb	r3, [r1, #13]
	sys_put_le16(val >> 16, &dst[2]);
    e798:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    e79a:	73cb      	strb	r3, [r1, #15]
	dst[1] = val >> 8;
    e79c:	0a1b      	lsrs	r3, r3, #8
    e79e:	738a      	strb	r2, [r1, #14]
    e7a0:	740b      	strb	r3, [r1, #16]
}
    e7a2:	e7e8      	b.n	e776 <uuid_to_uuid128+0x2e>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    e7a4:	f100 0310 	add.w	r3, r0, #16
    e7a8:	f850 2b04 	ldr.w	r2, [r0], #4
    e7ac:	4298      	cmp	r0, r3
    e7ae:	f841 2b04 	str.w	r2, [r1], #4
    e7b2:	d1f9      	bne.n	e7a8 <uuid_to_uuid128+0x60>
    e7b4:	7803      	ldrb	r3, [r0, #0]
    e7b6:	700b      	strb	r3, [r1, #0]
    e7b8:	e7dd      	b.n	e776 <uuid_to_uuid128+0x2e>
    e7ba:	bf00      	nop
    e7bc:	000242f8 	.word	0x000242f8

0000e7c0 <bt_buf_get_rx>:
	     type == BT_BUF_ISO_IN) {
		return bt_iso_get_rx(timeout);
	}

#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	if (type == BT_BUF_EVT) {
    e7c0:	2801      	cmp	r0, #1
{
    e7c2:	b538      	push	{r3, r4, r5, lr}
    e7c4:	4605      	mov	r5, r0
	return net_buf_alloc_fixed(pool, timeout);
    e7c6:	bf0c      	ite	eq
    e7c8:	4806      	ldreq	r0, [pc, #24]	; (e7e4 <bt_buf_get_rx+0x24>)
    e7ca:	4807      	ldrne	r0, [pc, #28]	; (e7e8 <bt_buf_get_rx+0x28>)
    e7cc:	f011 fabe 	bl	1fd4c <net_buf_alloc_fixed>
    e7d0:	4604      	mov	r4, r0
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    e7d2:	b120      	cbz	r0, e7de <bt_buf_get_rx+0x1e>
	net_buf_simple_reserve(&buf->b, reserve);
    e7d4:	2101      	movs	r1, #1
    e7d6:	3008      	adds	r0, #8
    e7d8:	f011 fad7 	bl	1fd8a <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    e7dc:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    e7de:	4620      	mov	r0, r4
    e7e0:	bd38      	pop	{r3, r4, r5, pc}
    e7e2:	bf00      	nop
    e7e4:	20008a18 	.word	0x20008a18
    e7e8:	20008994 	.word	0x20008994

0000e7ec <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    e7ec:	b510      	push	{r4, lr}
    e7ee:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
    e7f0:	490a      	ldr	r1, [pc, #40]	; (e81c <bt_buf_get_cmd_complete+0x30>)
{
    e7f2:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
    e7f4:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
    e7f8:	b920      	cbnz	r0, e804 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    e7fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    e7fe:	2001      	movs	r0, #1
    e800:	f7ff bfde 	b.w	e7c0 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
    e804:	f011 fb1c 	bl	1fe40 <net_buf_ref>
    e808:	2101      	movs	r1, #1
		buf->len = 0U;
    e80a:	2300      	movs	r3, #0
		buf = net_buf_ref(bt_dev.sent_cmd);
    e80c:	4604      	mov	r4, r0
    e80e:	7501      	strb	r1, [r0, #20]
		buf->len = 0U;
    e810:	8183      	strh	r3, [r0, #12]
    e812:	3008      	adds	r0, #8
    e814:	f011 fab9 	bl	1fd8a <net_buf_simple_reserve>
}
    e818:	4620      	mov	r0, r4
    e81a:	bd10      	pop	{r4, pc}
    e81c:	20008000 	.word	0x20008000

0000e820 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    e820:	b570      	push	{r4, r5, r6, lr}
    e822:	4604      	mov	r4, r0
	switch (evt) {
    e824:	2c0f      	cmp	r4, #15
{
    e826:	460d      	mov	r5, r1
    e828:	4610      	mov	r0, r2
    e82a:	4619      	mov	r1, r3
	switch (evt) {
    e82c:	d805      	bhi.n	e83a <bt_buf_get_evt+0x1a>
    e82e:	2c0d      	cmp	r4, #13
    e830:	d90d      	bls.n	e84e <bt_buf_get_evt+0x2e>
			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    e832:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    e836:	f7ff bfd9 	b.w	e7ec <bt_buf_get_cmd_complete>
	switch (evt) {
    e83a:	2c13      	cmp	r4, #19
    e83c:	d107      	bne.n	e84e <bt_buf_get_evt+0x2e>
	return net_buf_alloc_fixed(pool, timeout);
    e83e:	480c      	ldr	r0, [pc, #48]	; (e870 <bt_buf_get_evt+0x50>)
    e840:	f011 fa84 	bl	1fd4c <net_buf_alloc_fixed>
			if (buf) {
    e844:	4604      	mov	r4, r0
    e846:	b938      	cbnz	r0, e858 <bt_buf_get_evt+0x38>
{
    e848:	2400      	movs	r4, #0
}
    e84a:	4620      	mov	r0, r4
    e84c:	bd70      	pop	{r4, r5, r6, pc}
    e84e:	4602      	mov	r2, r0
    e850:	460b      	mov	r3, r1
		if (discardable) {
    e852:	b145      	cbz	r5, e866 <bt_buf_get_evt+0x46>
    e854:	4807      	ldr	r0, [pc, #28]	; (e874 <bt_buf_get_evt+0x54>)
    e856:	e7f3      	b.n	e840 <bt_buf_get_evt+0x20>
	net_buf_simple_reserve(&buf->b, reserve);
    e858:	2101      	movs	r1, #1
    e85a:	3008      	adds	r0, #8
    e85c:	f011 fa95 	bl	1fd8a <net_buf_simple_reserve>
    e860:	2301      	movs	r3, #1
    e862:	7523      	strb	r3, [r4, #20]
}
    e864:	e7f1      	b.n	e84a <bt_buf_get_evt+0x2a>
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    e866:	2001      	movs	r0, #1
}
    e868:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    e86c:	f7ff bfa8 	b.w	e7c0 <bt_buf_get_rx>
    e870:	20008a9c 	.word	0x20008a9c
    e874:	200089ec 	.word	0x200089ec

0000e878 <ver_str>:
{
    e878:	b570      	push	{r4, r5, r6, lr}
    e87a:	4606      	mov	r6, r0
    e87c:	b08e      	sub	sp, #56	; 0x38
	const char * const str[] = {
    e87e:	4d0a      	ldr	r5, [pc, #40]	; (e8a8 <ver_str+0x30>)
    e880:	ac01      	add	r4, sp, #4
    e882:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    e884:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    e886:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    e888:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    e88a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    e88c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    e88e:	682b      	ldr	r3, [r5, #0]
	if (ver < ARRAY_SIZE(str)) {
    e890:	2e0c      	cmp	r6, #12
	const char * const str[] = {
    e892:	6023      	str	r3, [r4, #0]
		return str[ver];
    e894:	bf9d      	ittte	ls
    e896:	ab0e      	addls	r3, sp, #56	; 0x38
    e898:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
    e89c:	f856 0c34 	ldrls.w	r0, [r6, #-52]
	return "unknown";
    e8a0:	4802      	ldrhi	r0, [pc, #8]	; (e8ac <ver_str+0x34>)
}
    e8a2:	b00e      	add	sp, #56	; 0x38
    e8a4:	bd70      	pop	{r4, r5, r6, pc}
    e8a6:	bf00      	nop
    e8a8:	00022918 	.word	0x00022918
    e8ac:	00024310 	.word	0x00024310

0000e8b0 <hci_disconn_complete_prio>:
{
    e8b0:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    e8b2:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    e8b4:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
    e8b8:	781b      	ldrb	r3, [r3, #0]
    e8ba:	b963      	cbnz	r3, e8d6 <hci_disconn_complete_prio+0x26>
	conn = bt_conn_lookup_handle(handle);
    e8bc:	4620      	mov	r0, r4
    e8be:	f003 f859 	bl	11974 <bt_conn_lookup_handle>
	if (!conn) {
    e8c2:	4605      	mov	r5, r0
    e8c4:	b940      	cbnz	r0, e8d8 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
    e8c6:	4b08      	ldr	r3, [pc, #32]	; (e8e8 <hci_disconn_complete_prio+0x38>)
    e8c8:	881a      	ldrh	r2, [r3, #0]
    e8ca:	b922      	cbnz	r2, e8d6 <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
    e8cc:	ea6f 5004 	mvn.w	r0, r4, lsl #20
    e8d0:	ea6f 5010 	mvn.w	r0, r0, lsr #20
    e8d4:	8018      	strh	r0, [r3, #0]
}
    e8d6:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    e8d8:	2101      	movs	r1, #1
    e8da:	f003 f853 	bl	11984 <bt_conn_set_state>
	bt_conn_unref(conn);
    e8de:	4628      	mov	r0, r5
}
    e8e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    e8e4:	f00f bda7 	b.w	1e436 <bt_conn_unref>
    e8e8:	2000a18e 	.word	0x2000a18e

0000e8ec <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    e8ec:	b510      	push	{r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    e8ee:	4c08      	ldr	r4, [pc, #32]	; (e910 <find_pending_connect.part.0+0x24>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    e8f0:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    e8f2:	2205      	movs	r2, #5
    e8f4:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    e8f8:	f003 fa96 	bl	11e28 <bt_conn_lookup_state_le>
		if (!conn) {
    e8fc:	b938      	cbnz	r0, e90e <find_pending_connect.part.0+0x22>
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    e8fe:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    e902:	2204      	movs	r2, #4
}
    e904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    e908:	4902      	ldr	r1, [pc, #8]	; (e914 <find_pending_connect.part.0+0x28>)
    e90a:	f003 ba8d 	b.w	11e28 <bt_conn_lookup_state_le>
}
    e90e:	bd10      	pop	{r4, pc}
    e910:	20008000 	.word	0x20008000
    e914:	000242bd 	.word	0x000242bd

0000e918 <hci_data_buf_overflow>:
{
    e918:	b580      	push	{r7, lr}
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    e91a:	6883      	ldr	r3, [r0, #8]
{
    e91c:	af00      	add	r7, sp, #0
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    e91e:	b088      	sub	sp, #32
    e920:	466a      	mov	r2, sp
    e922:	781b      	ldrb	r3, [r3, #0]
    e924:	4907      	ldr	r1, [pc, #28]	; (e944 <hci_data_buf_overflow+0x2c>)
    e926:	4808      	ldr	r0, [pc, #32]	; (e948 <hci_data_buf_overflow+0x30>)
    e928:	6151      	str	r1, [r2, #20]
    e92a:	4908      	ldr	r1, [pc, #32]	; (e94c <hci_data_buf_overflow+0x34>)
    e92c:	e9c2 1306 	strd	r1, r3, [r2, #24]
    e930:	2304      	movs	r3, #4
    e932:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    e936:	f842 3f10 	str.w	r3, [r2, #16]!
    e93a:	f00f fa33 	bl	1dda4 <z_log_msg_static_create.constprop.0>
}
    e93e:	46bd      	mov	sp, r7
    e940:	bd80      	pop	{r7, pc}
    e942:	bf00      	nop
    e944:	00024318 	.word	0x00024318
    e948:	000227f8 	.word	0x000227f8
    e94c:	00024d9e 	.word	0x00024d9e

0000e950 <le_conn_param_neg_reply.part.0>:
static void le_conn_param_neg_reply(uint16_t handle, uint8_t reason)
    e950:	b580      	push	{r7, lr}
    e952:	af00      	add	r7, sp, #0
		BT_ERR("Unable to allocate buffer");
    e954:	b088      	sub	sp, #32
    e956:	466a      	mov	r2, sp
    e958:	4b06      	ldr	r3, [pc, #24]	; (e974 <le_conn_param_neg_reply.part.0+0x24>)
    e95a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    e95e:	6153      	str	r3, [r2, #20]
    e960:	4b05      	ldr	r3, [pc, #20]	; (e978 <le_conn_param_neg_reply.part.0+0x28>)
    e962:	4806      	ldr	r0, [pc, #24]	; (e97c <le_conn_param_neg_reply.part.0+0x2c>)
    e964:	6193      	str	r3, [r2, #24]
    e966:	2303      	movs	r3, #3
    e968:	f842 3f10 	str.w	r3, [r2, #16]!
    e96c:	f00f fa1a 	bl	1dda4 <z_log_msg_static_create.constprop.0>
}
    e970:	46bd      	mov	sp, r7
    e972:	bd80      	pop	{r7, pc}
    e974:	00024344 	.word	0x00024344
    e978:	00024c66 	.word	0x00024c66
    e97c:	000227f8 	.word	0x000227f8

0000e980 <le_conn_update_complete>:
{
    e980:	b5f0      	push	{r4, r5, r6, r7, lr}
    e982:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    e984:	6885      	ldr	r5, [r0, #8]
{
    e986:	af00      	add	r7, sp, #0
	handle = sys_le16_to_cpu(evt->handle);
    e988:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    e98c:	4630      	mov	r0, r6
    e98e:	f002 fff1 	bl	11974 <bt_conn_lookup_handle>
	if (!conn) {
    e992:	4604      	mov	r4, r0
    e994:	b998      	cbnz	r0, e9be <le_conn_update_complete+0x3e>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    e996:	466c      	mov	r4, sp
    e998:	b088      	sub	sp, #32
    e99a:	466a      	mov	r2, sp
    e99c:	4b1d      	ldr	r3, [pc, #116]	; (ea14 <le_conn_update_complete+0x94>)
    e99e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    e9a2:	6153      	str	r3, [r2, #20]
    e9a4:	4b1c      	ldr	r3, [pc, #112]	; (ea18 <le_conn_update_complete+0x98>)
    e9a6:	481d      	ldr	r0, [pc, #116]	; (ea1c <le_conn_update_complete+0x9c>)
    e9a8:	e9c2 3606 	strd	r3, r6, [r2, #24]
    e9ac:	2304      	movs	r3, #4
    e9ae:	f842 3f10 	str.w	r3, [r2, #16]!
    e9b2:	f00f f9f7 	bl	1dda4 <z_log_msg_static_create.constprop.0>
    e9b6:	46a5      	mov	sp, r4
}
    e9b8:	370c      	adds	r7, #12
    e9ba:	46bd      	mov	sp, r7
    e9bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!evt->status) {
    e9be:	782b      	ldrb	r3, [r5, #0]
    e9c0:	b98b      	cbnz	r3, e9e6 <le_conn_update_complete+0x66>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    e9c2:	f8b5 3003 	ldrh.w	r3, [r5, #3]
    e9c6:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    e9ca:	f8b5 3005 	ldrh.w	r3, [r5, #5]
    e9ce:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    e9d2:	f8b5 3007 	ldrh.w	r3, [r5, #7]
    e9d6:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
    e9da:	f003 f8eb 	bl	11bb4 <notify_le_param_updated>
	bt_conn_unref(conn);
    e9de:	4620      	mov	r0, r4
    e9e0:	f00f fd29 	bl	1e436 <bt_conn_unref>
    e9e4:	e7e8      	b.n	e9b8 <le_conn_update_complete+0x38>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    e9e6:	2b1a      	cmp	r3, #26
    e9e8:	d1f9      	bne.n	e9de <le_conn_update_complete+0x5e>
    e9ea:	78c3      	ldrb	r3, [r0, #3]
    e9ec:	2b01      	cmp	r3, #1
    e9ee:	d1f6      	bne.n	e9de <le_conn_update_complete+0x5e>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    e9f0:	f44f 7100 	mov.w	r1, #512	; 0x200
    e9f4:	3004      	adds	r0, #4
    e9f6:	f00f f9be 	bl	1dd76 <atomic_or>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
    e9fa:	0583      	lsls	r3, r0, #22
    e9fc:	d4ef      	bmi.n	e9de <le_conn_update_complete+0x5e>
		param.interval_min = conn->le.interval_min;
    e9fe:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
		bt_l2cap_update_conn_param(conn, &param);
    ea02:	4639      	mov	r1, r7
		param.interval_min = conn->le.interval_min;
    ea04:	603b      	str	r3, [r7, #0]
		param.latency = conn->le.pending_latency;
    ea06:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
		bt_l2cap_update_conn_param(conn, &param);
    ea0a:	4620      	mov	r0, r4
		param.latency = conn->le.pending_latency;
    ea0c:	607b      	str	r3, [r7, #4]
		bt_l2cap_update_conn_param(conn, &param);
    ea0e:	f003 fcf1 	bl	123f4 <bt_l2cap_update_conn_param>
    ea12:	e7e4      	b.n	e9de <le_conn_update_complete+0x5e>
    ea14:	00024362 	.word	0x00024362
    ea18:	00024c36 	.word	0x00024c36
    ea1c:	000227f8 	.word	0x000227f8

0000ea20 <rx_queue_put>:
{
    ea20:	b598      	push	{r3, r4, r7, lr}
    ea22:	4601      	mov	r1, r0
    ea24:	af00      	add	r7, sp, #0
	net_buf_slist_put(&bt_dev.rx_queue, buf);
    ea26:	480e      	ldr	r0, [pc, #56]	; (ea60 <rx_queue_put+0x40>)
    ea28:	f011 f9b3 	bl	1fd92 <net_buf_slist_put>
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
    ea2c:	490d      	ldr	r1, [pc, #52]	; (ea64 <rx_queue_put+0x44>)
    ea2e:	480e      	ldr	r0, [pc, #56]	; (ea68 <rx_queue_put+0x48>)
    ea30:	f012 fc96 	bl	21360 <k_work_submit_to_queue>
	if (err < 0) {
    ea34:	2800      	cmp	r0, #0
    ea36:	da10      	bge.n	ea5a <rx_queue_put+0x3a>
		BT_ERR("Could not submit rx_work: %d", err);
    ea38:	466c      	mov	r4, sp
    ea3a:	b088      	sub	sp, #32
    ea3c:	466a      	mov	r2, sp
    ea3e:	4b0b      	ldr	r3, [pc, #44]	; (ea6c <rx_queue_put+0x4c>)
    ea40:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    ea44:	6153      	str	r3, [r2, #20]
    ea46:	4b0a      	ldr	r3, [pc, #40]	; (ea70 <rx_queue_put+0x50>)
    ea48:	e9c2 3006 	strd	r3, r0, [r2, #24]
    ea4c:	2304      	movs	r3, #4
    ea4e:	4809      	ldr	r0, [pc, #36]	; (ea74 <rx_queue_put+0x54>)
    ea50:	f842 3f10 	str.w	r3, [r2, #16]!
    ea54:	f00f f9a6 	bl	1dda4 <z_log_msg_static_create.constprop.0>
    ea58:	46a5      	mov	sp, r4
}
    ea5a:	46bd      	mov	sp, r7
    ea5c:	bd98      	pop	{r3, r4, r7, pc}
    ea5e:	bf00      	nop
    ea60:	2000813c 	.word	0x2000813c
    ea64:	200083d0 	.word	0x200083d0
    ea68:	200095b8 	.word	0x200095b8
    ea6c:	0002438a 	.word	0x0002438a
    ea70:	00024d5b 	.word	0x00024d5b
    ea74:	000227f8 	.word	0x000227f8

0000ea78 <handle_event.part.0>:
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
    ea78:	460b      	mov	r3, r1
    ea7a:	b5b0      	push	{r4, r5, r7, lr}
		BT_WARN("Unhandled event 0x%02x len %u: %s", event, buf->len,
    ea7c:	898d      	ldrh	r5, [r1, #12]
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
    ea7e:	af00      	add	r7, sp, #0
    ea80:	4604      	mov	r4, r0
		BT_WARN("Unhandled event 0x%02x len %u: %s", event, buf->len,
    ea82:	4629      	mov	r1, r5
    ea84:	6898      	ldr	r0, [r3, #8]
    ea86:	f7ff fddd 	bl	e644 <bt_hex>
    ea8a:	b08c      	sub	sp, #48	; 0x30
    ea8c:	466a      	mov	r2, sp
    ea8e:	4b0a      	ldr	r3, [pc, #40]	; (eab8 <handle_event.part.0+0x40>)
    ea90:	e9c2 5008 	strd	r5, r0, [r2, #32]
    ea94:	6153      	str	r3, [r2, #20]
    ea96:	4b09      	ldr	r3, [pc, #36]	; (eabc <handle_event.part.0+0x44>)
    ea98:	f44f 5152 	mov.w	r1, #13440	; 0x3480
    ea9c:	e9c2 3406 	strd	r3, r4, [r2, #24]
    eaa0:	f240 5303 	movw	r3, #1283	; 0x503
    eaa4:	8513      	strh	r3, [r2, #40]	; 0x28
    eaa6:	4b06      	ldr	r3, [pc, #24]	; (eac0 <handle_event.part.0+0x48>)
    eaa8:	4806      	ldr	r0, [pc, #24]	; (eac4 <handle_event.part.0+0x4c>)
    eaaa:	f842 3f10 	str.w	r3, [r2, #16]!
    eaae:	f00f f979 	bl	1dda4 <z_log_msg_static_create.constprop.0>
}
    eab2:	46bd      	mov	sp, r7
    eab4:	bdb0      	pop	{r4, r5, r7, pc}
    eab6:	bf00      	nop
    eab8:	000243ab 	.word	0x000243ab
    eabc:	00024d84 	.word	0x00024d84
    eac0:	01000006 	.word	0x01000006
    eac4:	000227f8 	.word	0x000227f8

0000eac8 <hci_hardware_error>:
{
    eac8:	b580      	push	{r7, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    eaca:	2101      	movs	r1, #1
    eacc:	af00      	add	r7, sp, #0
    eace:	3008      	adds	r0, #8
    ead0:	f011 fa0c 	bl	1feec <net_buf_simple_pull_mem>
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    ead4:	b088      	sub	sp, #32
    ead6:	466a      	mov	r2, sp
    ead8:	7803      	ldrb	r3, [r0, #0]
    eada:	4907      	ldr	r1, [pc, #28]	; (eaf8 <hci_hardware_error+0x30>)
    eadc:	4807      	ldr	r0, [pc, #28]	; (eafc <hci_hardware_error+0x34>)
    eade:	6151      	str	r1, [r2, #20]
    eae0:	4907      	ldr	r1, [pc, #28]	; (eb00 <hci_hardware_error+0x38>)
    eae2:	e9c2 1306 	strd	r1, r3, [r2, #24]
    eae6:	2304      	movs	r3, #4
    eae8:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    eaec:	f842 3f10 	str.w	r3, [r2, #16]!
    eaf0:	f00f f958 	bl	1dda4 <z_log_msg_static_create.constprop.0>
}
    eaf4:	46bd      	mov	sp, r7
    eaf6:	bd80      	pop	{r7, pc}
    eaf8:	000243d1 	.word	0x000243d1
    eafc:	000227f8 	.word	0x000227f8
    eb00:	00024d30 	.word	0x00024d30

0000eb04 <le_data_len_change>:
{
    eb04:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    eb06:	6883      	ldr	r3, [r0, #8]
{
    eb08:	af00      	add	r7, sp, #0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    eb0a:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    eb0c:	4620      	mov	r0, r4
    eb0e:	f002 ff31 	bl	11974 <bt_conn_lookup_handle>
	if (!conn) {
    eb12:	b990      	cbnz	r0, eb3a <le_data_len_change+0x36>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    eb14:	466d      	mov	r5, sp
    eb16:	b088      	sub	sp, #32
    eb18:	466a      	mov	r2, sp
    eb1a:	4b09      	ldr	r3, [pc, #36]	; (eb40 <le_data_len_change+0x3c>)
    eb1c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    eb20:	6153      	str	r3, [r2, #20]
    eb22:	4b08      	ldr	r3, [pc, #32]	; (eb44 <le_data_len_change+0x40>)
    eb24:	4808      	ldr	r0, [pc, #32]	; (eb48 <le_data_len_change+0x44>)
    eb26:	e9c2 3406 	strd	r3, r4, [r2, #24]
    eb2a:	2304      	movs	r3, #4
    eb2c:	f842 3f10 	str.w	r3, [r2, #16]!
    eb30:	f00f f938 	bl	1dda4 <z_log_msg_static_create.constprop.0>
    eb34:	46ad      	mov	sp, r5
}
    eb36:	46bd      	mov	sp, r7
    eb38:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
    eb3a:	f00f fc7c 	bl	1e436 <bt_conn_unref>
    eb3e:	e7fa      	b.n	eb36 <le_data_len_change+0x32>
    eb40:	00024362 	.word	0x00024362
    eb44:	00024c90 	.word	0x00024c90
    eb48:	000227f8 	.word	0x000227f8

0000eb4c <le_phy_update_complete>:
{
    eb4c:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    eb4e:	6883      	ldr	r3, [r0, #8]
{
    eb50:	af00      	add	r7, sp, #0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    eb52:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    eb56:	4620      	mov	r0, r4
    eb58:	f002 ff0c 	bl	11974 <bt_conn_lookup_handle>
	if (!conn) {
    eb5c:	b990      	cbnz	r0, eb84 <le_phy_update_complete+0x38>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    eb5e:	466d      	mov	r5, sp
    eb60:	b088      	sub	sp, #32
    eb62:	466a      	mov	r2, sp
    eb64:	4b09      	ldr	r3, [pc, #36]	; (eb8c <le_phy_update_complete+0x40>)
    eb66:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    eb6a:	6153      	str	r3, [r2, #20]
    eb6c:	4b08      	ldr	r3, [pc, #32]	; (eb90 <le_phy_update_complete+0x44>)
    eb6e:	4809      	ldr	r0, [pc, #36]	; (eb94 <le_phy_update_complete+0x48>)
    eb70:	e9c2 3406 	strd	r3, r4, [r2, #24]
    eb74:	2304      	movs	r3, #4
    eb76:	f842 3f10 	str.w	r3, [r2, #16]!
    eb7a:	f00f f913 	bl	1dda4 <z_log_msg_static_create.constprop.0>
    eb7e:	46ad      	mov	sp, r5
}
    eb80:	46bd      	mov	sp, r7
    eb82:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
    eb84:	f00f fc57 	bl	1e436 <bt_conn_unref>
    eb88:	e7fa      	b.n	eb80 <le_phy_update_complete+0x34>
    eb8a:	bf00      	nop
    eb8c:	00024362 	.word	0x00024362
    eb90:	00024ca3 	.word	0x00024ca3
    eb94:	000227f8 	.word	0x000227f8

0000eb98 <hci_disconn_complete>:
{
    eb98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    eb9c:	6885      	ldr	r5, [r0, #8]
{
    eb9e:	af00      	add	r7, sp, #0
	if (evt->status) {
    eba0:	782e      	ldrb	r6, [r5, #0]
    eba2:	b9be      	cbnz	r6, ebd4 <hci_disconn_complete+0x3c>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    eba4:	f8b5 8001 	ldrh.w	r8, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    eba8:	4640      	mov	r0, r8
    ebaa:	f002 fee3 	bl	11974 <bt_conn_lookup_handle>
	if (!conn) {
    ebae:	4604      	mov	r4, r0
    ebb0:	b998      	cbnz	r0, ebda <hci_disconn_complete+0x42>
		BT_ERR("Unable to look up conn with handle %u", handle);
    ebb2:	466c      	mov	r4, sp
    ebb4:	b088      	sub	sp, #32
    ebb6:	466a      	mov	r2, sp
    ebb8:	4b0c      	ldr	r3, [pc, #48]	; (ebec <hci_disconn_complete+0x54>)
    ebba:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    ebbe:	6153      	str	r3, [r2, #20]
    ebc0:	4b0b      	ldr	r3, [pc, #44]	; (ebf0 <hci_disconn_complete+0x58>)
    ebc2:	480c      	ldr	r0, [pc, #48]	; (ebf4 <hci_disconn_complete+0x5c>)
    ebc4:	e9c2 3806 	strd	r3, r8, [r2, #24]
    ebc8:	2304      	movs	r3, #4
    ebca:	f842 3f10 	str.w	r3, [r2, #16]!
    ebce:	f00f f8e9 	bl	1dda4 <z_log_msg_static_create.constprop.0>
    ebd2:	46a5      	mov	sp, r4
}
    ebd4:	46bd      	mov	sp, r7
    ebd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn->err = evt->reason;
    ebda:	78eb      	ldrb	r3, [r5, #3]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    ebdc:	4631      	mov	r1, r6
	conn->err = evt->reason;
    ebde:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    ebe0:	f002 fed0 	bl	11984 <bt_conn_set_state>
		bt_conn_unref(conn);
    ebe4:	4620      	mov	r0, r4
	bt_conn_unref(conn);
    ebe6:	f00f fc26 	bl	1e436 <bt_conn_unref>
    ebea:	e7f3      	b.n	ebd4 <hci_disconn_complete+0x3c>
    ebec:	000243f7 	.word	0x000243f7
    ebf0:	00024ce7 	.word	0x00024ce7
    ebf4:	000227f8 	.word	0x000227f8

0000ebf8 <handle_event>:
{
    ebf8:	b5b0      	push	{r4, r5, r7, lr}
    ebfa:	4604      	mov	r4, r0
    ebfc:	af00      	add	r7, sp, #0
    ebfe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
	for (i = 0; i < num_handlers; i++) {
    ec02:	4293      	cmp	r3, r2
    ec04:	d103      	bne.n	ec0e <handle_event+0x16>
	if (err == -EOPNOTSUPP) {
    ec06:	4620      	mov	r0, r4
    ec08:	f7ff ff36 	bl	ea78 <handle_event.part.0>
}
    ec0c:	e01a      	b.n	ec44 <handle_event+0x4c>
		if (handler->event != event) {
    ec0e:	4610      	mov	r0, r2
    ec10:	f810 5b08 	ldrb.w	r5, [r0], #8
    ec14:	42a5      	cmp	r5, r4
    ec16:	d11b      	bne.n	ec50 <handle_event+0x58>
		if (buf->len < handler->min_len) {
    ec18:	898b      	ldrh	r3, [r1, #12]
    ec1a:	7850      	ldrb	r0, [r2, #1]
    ec1c:	4298      	cmp	r0, r3
    ec1e:	d913      	bls.n	ec48 <handle_event+0x50>
			BT_ERR("Too small (%u bytes) event 0x%02x",
    ec20:	466d      	mov	r5, sp
    ec22:	b08a      	sub	sp, #40	; 0x28
    ec24:	466a      	mov	r2, sp
    ec26:	490b      	ldr	r1, [pc, #44]	; (ec54 <handle_event+0x5c>)
    ec28:	6214      	str	r4, [r2, #32]
    ec2a:	6151      	str	r1, [r2, #20]
    ec2c:	490a      	ldr	r1, [pc, #40]	; (ec58 <handle_event+0x60>)
    ec2e:	480b      	ldr	r0, [pc, #44]	; (ec5c <handle_event+0x64>)
    ec30:	e9c2 1306 	strd	r1, r3, [r2, #24]
    ec34:	2305      	movs	r3, #5
    ec36:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    ec3a:	f842 3f10 	str.w	r3, [r2, #16]!
    ec3e:	f00f f8b1 	bl	1dda4 <z_log_msg_static_create.constprop.0>
    ec42:	46ad      	mov	sp, r5
}
    ec44:	46bd      	mov	sp, r7
    ec46:	bdb0      	pop	{r4, r5, r7, pc}
		handler->handler(buf);
    ec48:	4608      	mov	r0, r1
    ec4a:	6853      	ldr	r3, [r2, #4]
    ec4c:	4798      	blx	r3
	if (err == -EOPNOTSUPP) {
    ec4e:	e7f9      	b.n	ec44 <handle_event+0x4c>
    ec50:	4602      	mov	r2, r0
    ec52:	e7d6      	b.n	ec02 <handle_event+0xa>
    ec54:	00024421 	.word	0x00024421
    ec58:	00024d70 	.word	0x00024d70
    ec5c:	000227f8 	.word	0x000227f8

0000ec60 <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
    ec60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	struct net_buf *buf;

	BT_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
    ec62:	4859      	ldr	r0, [pc, #356]	; (edc8 <rx_work_handler+0x168>)
{
    ec64:	af00      	add	r7, sp, #0
	buf = net_buf_slist_get(&bt_dev.rx_queue);
    ec66:	f011 f8b2 	bl	1fdce <net_buf_slist_get>
	if (!buf) {
    ec6a:	4604      	mov	r4, r0
    ec6c:	2800      	cmp	r0, #0
    ec6e:	d070      	beq.n	ed52 <rx_work_handler+0xf2>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    ec70:	7d03      	ldrb	r3, [r0, #20]
	}

	BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf),
	       buf->len);

	switch (bt_buf_get_type(buf)) {
    ec72:	2b01      	cmp	r3, #1
    ec74:	d06f      	beq.n	ed56 <rx_work_handler+0xf6>
    ec76:	2b03      	cmp	r3, #3
    ec78:	f040 809f 	bne.w	edba <rx_work_handler+0x15a>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    ec7c:	8983      	ldrh	r3, [r0, #12]
    ec7e:	2b03      	cmp	r3, #3
    ec80:	d80c      	bhi.n	ec9c <rx_work_handler+0x3c>
    ec82:	f240 13ed 	movw	r3, #493	; 0x1ed
    ec86:	4a51      	ldr	r2, [pc, #324]	; (edcc <rx_work_handler+0x16c>)
    ec88:	4951      	ldr	r1, [pc, #324]	; (edd0 <rx_work_handler+0x170>)
    ec8a:	4852      	ldr	r0, [pc, #328]	; (edd4 <rx_work_handler+0x174>)
    ec8c:	f00d fe5f 	bl	1c94e <assert_print>
    ec90:	4040      	eors	r0, r0
    ec92:	f380 8811 	msr	BASEPRI, r0
    ec96:	f04f 0003 	mov.w	r0, #3
    ec9a:	df02      	svc	2
    ec9c:	2104      	movs	r1, #4
    ec9e:	f104 0008 	add.w	r0, r4, #8
    eca2:	f011 f923 	bl	1feec <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    eca6:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
    eca8:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    ecaa:	8806      	ldrh	r6, [r0, #0]
	if (buf->len != len) {
    ecac:	89a1      	ldrh	r1, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
    ecae:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    ecb2:	428b      	cmp	r3, r1
	acl(buf)->handle = bt_acl_handle(handle);
    ecb4:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    ecb6:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
    ecb8:	d012      	beq.n	ece0 <rx_work_handler+0x80>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    ecba:	466d      	mov	r5, sp
    ecbc:	b08a      	sub	sp, #40	; 0x28
    ecbe:	466a      	mov	r2, sp
    ecc0:	4845      	ldr	r0, [pc, #276]	; (edd8 <rx_work_handler+0x178>)
    ecc2:	6213      	str	r3, [r2, #32]
    ecc4:	6150      	str	r0, [r2, #20]
    ecc6:	4845      	ldr	r0, [pc, #276]	; (eddc <rx_work_handler+0x17c>)
    ecc8:	2305      	movs	r3, #5
    ecca:	e9c2 0106 	strd	r0, r1, [r2, #24]
    ecce:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    ecd2:	f842 3f10 	str.w	r3, [r2, #16]!
#endif /* CONFIG_BT_ISO */
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    ecd6:	4842      	ldr	r0, [pc, #264]	; (ede0 <rx_work_handler+0x180>)
    ecd8:	f00f f864 	bl	1dda4 <z_log_msg_static_create.constprop.0>
    ecdc:	46ad      	mov	sp, r5
    ecde:	e068      	b.n	edb2 <rx_work_handler+0x152>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    ece0:	f002 fe48 	bl	11974 <bt_conn_lookup_handle>
	if (!conn) {
    ece4:	4605      	mov	r5, r0
    ece6:	b970      	cbnz	r0, ed06 <rx_work_handler+0xa6>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    ece8:	466d      	mov	r5, sp
    ecea:	b088      	sub	sp, #32
    ecec:	8ae3      	ldrh	r3, [r4, #22]
    ecee:	466a      	mov	r2, sp
    ecf0:	493c      	ldr	r1, [pc, #240]	; (ede4 <rx_work_handler+0x184>)
    ecf2:	6151      	str	r1, [r2, #20]
    ecf4:	4939      	ldr	r1, [pc, #228]	; (eddc <rx_work_handler+0x17c>)
	switch (bt_buf_get_type(buf)) {
    ecf6:	e9c2 1306 	strd	r1, r3, [r2, #24]
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    ecfa:	2304      	movs	r3, #4
    ecfc:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    ed00:	f842 3f10 	str.w	r3, [r2, #16]!
    ed04:	e7e7      	b.n	ecd6 <rx_work_handler+0x76>
	acl(buf)->index = bt_conn_index(conn);
    ed06:	f002 ff33 	bl	11b70 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    ed0a:	4621      	mov	r1, r4
	acl(buf)->index = bt_conn_index(conn);
    ed0c:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    ed0e:	0b32      	lsrs	r2, r6, #12
    ed10:	4628      	mov	r0, r5
    ed12:	f002 fcc9 	bl	116a8 <bt_conn_recv>
	bt_conn_unref(conn);
    ed16:	4628      	mov	r0, r5
    ed18:	f00f fb8d 	bl	1e436 <bt_conn_unref>
	return list->head;
    ed1c:	4b32      	ldr	r3, [pc, #200]	; (ede8 <rx_work_handler+0x188>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
    ed1e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
    ed22:	b1b3      	cbz	r3, ed52 <rx_work_handler+0xf2>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
    ed24:	4931      	ldr	r1, [pc, #196]	; (edec <rx_work_handler+0x18c>)
    ed26:	4832      	ldr	r0, [pc, #200]	; (edf0 <rx_work_handler+0x190>)
    ed28:	f012 fb1a 	bl	21360 <k_work_submit_to_queue>
#endif
		if (err < 0) {
    ed2c:	2800      	cmp	r0, #0
    ed2e:	da10      	bge.n	ed52 <rx_work_handler+0xf2>
			BT_ERR("Could not submit rx_work: %d", err);
    ed30:	466c      	mov	r4, sp
    ed32:	b088      	sub	sp, #32
    ed34:	466a      	mov	r2, sp
    ed36:	4b2f      	ldr	r3, [pc, #188]	; (edf4 <rx_work_handler+0x194>)
    ed38:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    ed3c:	6153      	str	r3, [r2, #20]
    ed3e:	4b2e      	ldr	r3, [pc, #184]	; (edf8 <rx_work_handler+0x198>)
    ed40:	e9c2 3006 	strd	r3, r0, [r2, #24]
    ed44:	2304      	movs	r3, #4
    ed46:	4826      	ldr	r0, [pc, #152]	; (ede0 <rx_work_handler+0x180>)
    ed48:	f842 3f10 	str.w	r3, [r2, #16]!
    ed4c:	f00f f82a 	bl	1dda4 <z_log_msg_static_create.constprop.0>
    ed50:	46a5      	mov	sp, r4
		}
	}
}
    ed52:	46bd      	mov	sp, r7
    ed54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    ed56:	8983      	ldrh	r3, [r0, #12]
    ed58:	2b01      	cmp	r3, #1
    ed5a:	d80c      	bhi.n	ed76 <rx_work_handler+0x116>
    ed5c:	f44f 6316 	mov.w	r3, #2400	; 0x960
    ed60:	4a1a      	ldr	r2, [pc, #104]	; (edcc <rx_work_handler+0x16c>)
    ed62:	491b      	ldr	r1, [pc, #108]	; (edd0 <rx_work_handler+0x170>)
    ed64:	481b      	ldr	r0, [pc, #108]	; (edd4 <rx_work_handler+0x174>)
    ed66:	f00d fdf2 	bl	1c94e <assert_print>
    ed6a:	4040      	eors	r0, r0
    ed6c:	f380 8811 	msr	BASEPRI, r0
    ed70:	f04f 0003 	mov.w	r0, #3
    ed74:	df02      	svc	2
    ed76:	2102      	movs	r1, #2
    ed78:	f104 0008 	add.w	r0, r4, #8
    ed7c:	f011 f8b6 	bl	1feec <net_buf_simple_pull_mem>
    ed80:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    ed82:	7800      	ldrb	r0, [r0, #0]
    ed84:	f00e ffcc 	bl	1dd20 <bt_hci_evt_get_flags>
    ed88:	0783      	lsls	r3, r0, #30
    ed8a:	d40c      	bmi.n	eda6 <rx_work_handler+0x146>
    ed8c:	f640 1364 	movw	r3, #2404	; 0x964
    ed90:	4a0e      	ldr	r2, [pc, #56]	; (edcc <rx_work_handler+0x16c>)
    ed92:	491a      	ldr	r1, [pc, #104]	; (edfc <rx_work_handler+0x19c>)
    ed94:	480f      	ldr	r0, [pc, #60]	; (edd4 <rx_work_handler+0x174>)
    ed96:	f00d fdda 	bl	1c94e <assert_print>
    ed9a:	4040      	eors	r0, r0
    ed9c:	f380 8811 	msr	BASEPRI, r0
    eda0:	f04f 0003 	mov.w	r0, #3
    eda4:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    eda6:	2306      	movs	r3, #6
    eda8:	4621      	mov	r1, r4
    edaa:	4a15      	ldr	r2, [pc, #84]	; (ee00 <rx_work_handler+0x1a0>)
    edac:	7828      	ldrb	r0, [r5, #0]
    edae:	f7ff ff23 	bl	ebf8 <handle_event>
		net_buf_unref(buf);
    edb2:	4620      	mov	r0, r4
    edb4:	f007 fac2 	bl	1633c <net_buf_unref>
		break;
    edb8:	e7b0      	b.n	ed1c <rx_work_handler+0xbc>
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    edba:	466d      	mov	r5, sp
    edbc:	b088      	sub	sp, #32
    edbe:	466a      	mov	r2, sp
    edc0:	4910      	ldr	r1, [pc, #64]	; (ee04 <rx_work_handler+0x1a4>)
    edc2:	6151      	str	r1, [r2, #20]
    edc4:	490c      	ldr	r1, [pc, #48]	; (edf8 <rx_work_handler+0x198>)
    edc6:	e796      	b.n	ecf6 <rx_work_handler+0x96>
    edc8:	2000813c 	.word	0x2000813c
    edcc:	00024447 	.word	0x00024447
    edd0:	0002447b 	.word	0x0002447b
    edd4:	00024494 	.word	0x00024494
    edd8:	000244b1 	.word	0x000244b1
    eddc:	00024d43 	.word	0x00024d43
    ede0:	000227f8 	.word	0x000227f8
    ede4:	000244d9 	.word	0x000244d9
    ede8:	20008000 	.word	0x20008000
    edec:	200083d0 	.word	0x200083d0
    edf0:	200095b8 	.word	0x200095b8
    edf4:	0002438a 	.word	0x0002438a
    edf8:	00024d4b 	.word	0x00024d4b
    edfc:	000244ff 	.word	0x000244ff
    ee00:	00022eb8 	.word	0x00022eb8
    ee04:	0002452d 	.word	0x0002452d

0000ee08 <hci_le_meta_event>:
{
    ee08:	b510      	push	{r4, lr}
    ee0a:	2101      	movs	r1, #1
    ee0c:	4604      	mov	r4, r0
    ee0e:	3008      	adds	r0, #8
    ee10:	f011 f86c 	bl	1feec <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    ee14:	4621      	mov	r1, r4
}
    ee16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    ee1a:	230a      	movs	r3, #10
    ee1c:	4a01      	ldr	r2, [pc, #4]	; (ee24 <hci_le_meta_event+0x1c>)
    ee1e:	7800      	ldrb	r0, [r0, #0]
    ee20:	f7ff beea 	b.w	ebf8 <handle_event>
    ee24:	00022ee8 	.word	0x00022ee8

0000ee28 <le_remote_feat_complete>:
{
    ee28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    ee2a:	6885      	ldr	r5, [r0, #8]
{
    ee2c:	af00      	add	r7, sp, #0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    ee2e:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    ee32:	4630      	mov	r0, r6
    ee34:	f002 fd9e 	bl	11974 <bt_conn_lookup_handle>
	if (!conn) {
    ee38:	4604      	mov	r4, r0
    ee3a:	b990      	cbnz	r0, ee62 <le_remote_feat_complete+0x3a>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    ee3c:	466c      	mov	r4, sp
    ee3e:	b088      	sub	sp, #32
    ee40:	466a      	mov	r2, sp
    ee42:	4b11      	ldr	r3, [pc, #68]	; (ee88 <le_remote_feat_complete+0x60>)
    ee44:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    ee48:	6153      	str	r3, [r2, #20]
    ee4a:	4b10      	ldr	r3, [pc, #64]	; (ee8c <le_remote_feat_complete+0x64>)
    ee4c:	4810      	ldr	r0, [pc, #64]	; (ee90 <le_remote_feat_complete+0x68>)
    ee4e:	e9c2 3606 	strd	r3, r6, [r2, #24]
    ee52:	2304      	movs	r3, #4
    ee54:	f842 3f10 	str.w	r3, [r2, #16]!
    ee58:	f00e ffa4 	bl	1dda4 <z_log_msg_static_create.constprop.0>
    ee5c:	46a5      	mov	sp, r4
}
    ee5e:	46bd      	mov	sp, r7
    ee60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!evt->status) {
    ee62:	782b      	ldrb	r3, [r5, #0]
    ee64:	b93b      	cbnz	r3, ee76 <le_remote_feat_complete+0x4e>
    ee66:	f8d5 3003 	ldr.w	r3, [r5, #3]
    ee6a:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
    ee6e:	f8d5 3007 	ldr.w	r3, [r5, #7]
    ee72:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    ee76:	f44f 6100 	mov.w	r1, #2048	; 0x800
    ee7a:	1d20      	adds	r0, r4, #4
    ee7c:	f00e ff7b 	bl	1dd76 <atomic_or>
	bt_conn_unref(conn);
    ee80:	4620      	mov	r0, r4
    ee82:	f00f fad8 	bl	1e436 <bt_conn_unref>
    ee86:	e7ea      	b.n	ee5e <le_remote_feat_complete+0x36>
    ee88:	00024362 	.word	0x00024362
    ee8c:	00024c4e 	.word	0x00024c4e
    ee90:	000227f8 	.word	0x000227f8

0000ee94 <hci_cmd_done>:
{
    ee94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ee98:	4606      	mov	r6, r0
    ee9a:	af00      	add	r7, sp, #0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    ee9c:	7990      	ldrb	r0, [r2, #6]
{
    ee9e:	4688      	mov	r8, r1
    eea0:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    eea2:	f007 f989 	bl	161b8 <net_buf_pool_get>
    eea6:	4d43      	ldr	r5, [pc, #268]	; (efb4 <hci_cmd_done+0x120>)
    eea8:	4285      	cmp	r5, r0
    eeaa:	d01a      	beq.n	eee2 <hci_cmd_done+0x4e>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    eeac:	79a4      	ldrb	r4, [r4, #6]
    eeae:	46e8      	mov	r8, sp
    eeb0:	4620      	mov	r0, r4
    eeb2:	f007 f981 	bl	161b8 <net_buf_pool_get>
    eeb6:	b08c      	sub	sp, #48	; 0x30
    eeb8:	466a      	mov	r2, sp
    eeba:	4b3f      	ldr	r3, [pc, #252]	; (efb8 <hci_cmd_done+0x124>)
    eebc:	e9c2 4008 	strd	r4, r0, [r2, #32]
    eec0:	6153      	str	r3, [r2, #20]
    eec2:	4b3e      	ldr	r3, [pc, #248]	; (efbc <hci_cmd_done+0x128>)
    eec4:	6295      	str	r5, [r2, #40]	; 0x28
    eec6:	e9c2 3606 	strd	r3, r6, [r2, #24]
    eeca:	2307      	movs	r3, #7
    eecc:	f44f 5162 	mov.w	r1, #14464	; 0x3880
    eed0:	483b      	ldr	r0, [pc, #236]	; (efc0 <hci_cmd_done+0x12c>)
    eed2:	f842 3f10 	str.w	r3, [r2, #16]!
    eed6:	f00e ff65 	bl	1dda4 <z_log_msg_static_create.constprop.0>
    eeda:	46c5      	mov	sp, r8
}
    eedc:	46bd      	mov	sp, r7
    eede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
    eee2:	4620      	mov	r0, r4
    eee4:	f007 f970 	bl	161c8 <net_buf_id>
    eee8:	f04f 090c 	mov.w	r9, #12
    eeec:	4d35      	ldr	r5, [pc, #212]	; (efc4 <hci_cmd_done+0x130>)
    eeee:	fb09 5000 	mla	r0, r9, r0, r5
    eef2:	8843      	ldrh	r3, [r0, #2]
    eef4:	42b3      	cmp	r3, r6
    eef6:	d018      	beq.n	ef2a <hci_cmd_done+0x96>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    eef8:	4620      	mov	r0, r4
    eefa:	f007 f965 	bl	161c8 <net_buf_id>
    eefe:	fb09 5000 	mla	r0, r9, r0, r5
    ef02:	466c      	mov	r4, sp
    ef04:	b08a      	sub	sp, #40	; 0x28
    ef06:	466a      	mov	r2, sp
    ef08:	8843      	ldrh	r3, [r0, #2]
    ef0a:	6213      	str	r3, [r2, #32]
    ef0c:	2305      	movs	r3, #5
    ef0e:	492e      	ldr	r1, [pc, #184]	; (efc8 <hci_cmd_done+0x134>)
    ef10:	482b      	ldr	r0, [pc, #172]	; (efc0 <hci_cmd_done+0x12c>)
    ef12:	6151      	str	r1, [r2, #20]
    ef14:	4929      	ldr	r1, [pc, #164]	; (efbc <hci_cmd_done+0x128>)
    ef16:	e9c2 1606 	strd	r1, r6, [r2, #24]
    ef1a:	f44f 5122 	mov.w	r1, #10368	; 0x2880
    ef1e:	f842 3f10 	str.w	r3, [r2, #16]!
    ef22:	f00e ff3f 	bl	1dda4 <z_log_msg_static_create.constprop.0>
    ef26:	46a5      	mov	sp, r4
		return;
    ef28:	e7d8      	b.n	eedc <hci_cmd_done+0x48>
	if (bt_dev.sent_cmd) {
    ef2a:	4e28      	ldr	r6, [pc, #160]	; (efcc <hci_cmd_done+0x138>)
    ef2c:	f8d6 0138 	ldr.w	r0, [r6, #312]	; 0x138
    ef30:	b120      	cbz	r0, ef3c <hci_cmd_done+0xa8>
		net_buf_unref(bt_dev.sent_cmd);
    ef32:	f007 fa03 	bl	1633c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    ef36:	2300      	movs	r3, #0
    ef38:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
	if (cmd(buf)->state && !status) {
    ef3c:	4620      	mov	r0, r4
    ef3e:	f007 f943 	bl	161c8 <net_buf_id>
    ef42:	260c      	movs	r6, #12
    ef44:	fb06 5000 	mla	r0, r6, r0, r5
    ef48:	6843      	ldr	r3, [r0, #4]
    ef4a:	b1ab      	cbz	r3, ef78 <hci_cmd_done+0xe4>
    ef4c:	f1b8 0f00 	cmp.w	r8, #0
    ef50:	d112      	bne.n	ef78 <hci_cmd_done+0xe4>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    ef52:	4620      	mov	r0, r4
    ef54:	f007 f938 	bl	161c8 <net_buf_id>
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    ef58:	2101      	movs	r1, #1
    ef5a:	fb06 5000 	mla	r0, r6, r0, r5
    ef5e:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    ef60:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
    ef64:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
    ef66:	f003 061f 	and.w	r6, r3, #31
    ef6a:	40b1      	lsls	r1, r6
	if (val) {
    ef6c:	095b      	lsrs	r3, r3, #5
    ef6e:	b1da      	cbz	r2, efa8 <hci_cmd_done+0x114>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    ef70:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    ef74:	f00e feff 	bl	1dd76 <atomic_or>
	if (cmd(buf)->sync) {
    ef78:	4620      	mov	r0, r4
    ef7a:	f007 f925 	bl	161c8 <net_buf_id>
    ef7e:	260c      	movs	r6, #12
    ef80:	fb06 5000 	mla	r0, r6, r0, r5
    ef84:	6883      	ldr	r3, [r0, #8]
    ef86:	2b00      	cmp	r3, #0
    ef88:	d0a8      	beq.n	eedc <hci_cmd_done+0x48>
		cmd(buf)->status = status;
    ef8a:	4620      	mov	r0, r4
    ef8c:	f007 f91c 	bl	161c8 <net_buf_id>
    ef90:	4370      	muls	r0, r6
    ef92:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    ef96:	4620      	mov	r0, r4
    ef98:	f007 f916 	bl	161c8 <net_buf_id>
    ef9c:	fb06 5500 	mla	r5, r6, r0, r5
    efa0:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
    efa2:	f00a fd49 	bl	19a38 <z_impl_k_sem_give>
}
    efa6:	e799      	b.n	eedc <hci_cmd_done+0x48>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    efa8:	43c9      	mvns	r1, r1
    efaa:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    efae:	f00e fefc 	bl	1ddaa <atomic_and.isra.0>
    efb2:	e7e1      	b.n	ef78 <hci_cmd_done+0xe4>
    efb4:	20008a70 	.word	0x20008a70
    efb8:	00024545 	.word	0x00024545
    efbc:	00024d91 	.word	0x00024d91
    efc0:	000227f8 	.word	0x000227f8
    efc4:	20009d44 	.word	0x20009d44
    efc8:	0002457e 	.word	0x0002457e
    efcc:	20008000 	.word	0x20008000

0000efd0 <hci_cmd_status>:
{
    efd0:	b538      	push	{r3, r4, r5, lr}
    efd2:	2104      	movs	r1, #4
    efd4:	4604      	mov	r4, r0
    efd6:	3008      	adds	r0, #8
    efd8:	f010 ff88 	bl	1feec <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    efdc:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    efde:	7801      	ldrb	r1, [r0, #0]
    efe0:	4622      	mov	r2, r4
    efe2:	8840      	ldrh	r0, [r0, #2]
    efe4:	f7ff ff56 	bl	ee94 <hci_cmd_done>
	if (ncmd) {
    efe8:	b125      	cbz	r5, eff4 <hci_cmd_status+0x24>
}
    efea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_sem_give(sem);
    efee:	4802      	ldr	r0, [pc, #8]	; (eff8 <hci_cmd_status+0x28>)
    eff0:	f00a bd22 	b.w	19a38 <z_impl_k_sem_give>
    eff4:	bd38      	pop	{r3, r4, r5, pc}
    eff6:	bf00      	nop
    eff8:	20008120 	.word	0x20008120

0000effc <hci_cmd_complete>:
{
    effc:	b538      	push	{r3, r4, r5, lr}
    effe:	2103      	movs	r1, #3
    f000:	4604      	mov	r4, r0
    f002:	3008      	adds	r0, #8
    f004:	f010 ff72 	bl	1feec <net_buf_simple_pull_mem>
	status = buf->data[0];
    f008:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    f00a:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    f00c:	4622      	mov	r2, r4
    f00e:	7819      	ldrb	r1, [r3, #0]
    f010:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    f014:	f7ff ff3e 	bl	ee94 <hci_cmd_done>
	if (ncmd) {
    f018:	b125      	cbz	r5, f024 <hci_cmd_complete+0x28>
}
    f01a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f01e:	4802      	ldr	r0, [pc, #8]	; (f028 <hci_cmd_complete+0x2c>)
    f020:	f00a bd0a 	b.w	19a38 <z_impl_k_sem_give>
    f024:	bd38      	pop	{r3, r4, r5, pc}
    f026:	bf00      	nop
    f028:	20008120 	.word	0x20008120

0000f02c <hci_num_completed_packets>:
{
    f02c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (i = 0; i < evt->num_handles; i++) {
    f030:	2500      	movs	r5, #0
			tx->pending_no_cb = 0U;
    f032:	46a9      	mov	r9, r5
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    f034:	f8d0 8008 	ldr.w	r8, [r0, #8]
				BT_ERR("packets count mismatch");
    f038:	f8df a108 	ldr.w	sl, [pc, #264]	; f144 <hci_num_completed_packets+0x118>
{
    f03c:	af00      	add	r7, sp, #0
	for (i = 0; i < evt->num_handles; i++) {
    f03e:	f898 3000 	ldrb.w	r3, [r8]
    f042:	429d      	cmp	r5, r3
    f044:	db02      	blt.n	f04c <hci_num_completed_packets+0x20>
}
    f046:	46bd      	mov	sp, r7
    f048:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    f04c:	eb08 0385 	add.w	r3, r8, r5, lsl #2
    f050:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    f054:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
    f058:	4658      	mov	r0, fp
    f05a:	f002 fc8b 	bl	11974 <bt_conn_lookup_handle>
		if (!conn) {
    f05e:	4604      	mov	r4, r0
    f060:	b1d8      	cbz	r0, f09a <hci_num_completed_packets+0x6e>
			k_work_submit(&conn->tx_complete_work);
    f062:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
    f066:	2e00      	cmp	r6, #0
    f068:	d040      	beq.n	f0ec <hci_num_completed_packets+0xc0>
	__asm__ volatile(
    f06a:	f04f 0320 	mov.w	r3, #32
    f06e:	f3ef 8211 	mrs	r2, BASEPRI
    f072:	f383 8812 	msr	BASEPRI_MAX, r3
    f076:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    f07a:	69e3      	ldr	r3, [r4, #28]
    f07c:	b303      	cbz	r3, f0c0 <hci_num_completed_packets+0x94>
				conn->pending_no_cb--;
    f07e:	3b01      	subs	r3, #1
    f080:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    f082:	f382 8811 	msr	BASEPRI, r2
    f086:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    f08a:	4620      	mov	r0, r4
    f08c:	f002 fada 	bl	11644 <bt_conn_get_pkts>
    f090:	3e01      	subs	r6, #1
    f092:	f00a fcd1 	bl	19a38 <z_impl_k_sem_give>
    f096:	b2b6      	uxth	r6, r6
    f098:	e7e5      	b.n	f066 <hci_num_completed_packets+0x3a>
			BT_ERR("No connection for handle %u", handle);
    f09a:	466c      	mov	r4, sp
    f09c:	b088      	sub	sp, #32
    f09e:	466a      	mov	r2, sp
    f0a0:	4b29      	ldr	r3, [pc, #164]	; (f148 <hci_num_completed_packets+0x11c>)
    f0a2:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    f0a6:	6153      	str	r3, [r2, #20]
    f0a8:	4b28      	ldr	r3, [pc, #160]	; (f14c <hci_num_completed_packets+0x120>)
    f0aa:	4829      	ldr	r0, [pc, #164]	; (f150 <hci_num_completed_packets+0x124>)
    f0ac:	e9c2 3b06 	strd	r3, fp, [r2, #24]
    f0b0:	2304      	movs	r3, #4
    f0b2:	f842 3f10 	str.w	r3, [r2, #16]!
    f0b6:	f00e fe75 	bl	1dda4 <z_log_msg_static_create.constprop.0>
    f0ba:	46a5      	mov	sp, r4
	for (i = 0; i < evt->num_handles; i++) {
    f0bc:	3501      	adds	r5, #1
    f0be:	e7be      	b.n	f03e <hci_num_completed_packets+0x12>
    f0c0:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    f0c2:	b9bb      	cbnz	r3, f0f4 <hci_num_completed_packets+0xc8>
    f0c4:	f382 8811 	msr	BASEPRI, r2
    f0c8:	f3bf 8f6f 	isb	sy
				BT_ERR("packets count mismatch");
    f0cc:	466e      	mov	r6, sp
    f0ce:	b088      	sub	sp, #32
    f0d0:	466a      	mov	r2, sp
    f0d2:	4b1e      	ldr	r3, [pc, #120]	; (f14c <hci_num_completed_packets+0x120>)
    f0d4:	f8c2 a014 	str.w	sl, [r2, #20]
    f0d8:	6193      	str	r3, [r2, #24]
    f0da:	2303      	movs	r3, #3
    f0dc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    f0e0:	481b      	ldr	r0, [pc, #108]	; (f150 <hci_num_completed_packets+0x124>)
    f0e2:	f842 3f10 	str.w	r3, [r2, #16]!
    f0e6:	f00e fe5d 	bl	1dda4 <z_log_msg_static_create.constprop.0>
    f0ea:	46b5      	mov	sp, r6
		bt_conn_unref(conn);
    f0ec:	4620      	mov	r0, r4
    f0ee:	f00f f9a2 	bl	1e436 <bt_conn_unref>
    f0f2:	e7e3      	b.n	f0bc <hci_num_completed_packets+0x90>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    f0f4:	69a1      	ldr	r1, [r4, #24]
	return node->next;
    f0f6:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    f0f8:	428b      	cmp	r3, r1
	list->head = node;
    f0fa:	6160      	str	r0, [r4, #20]
	list->tail = node;
    f0fc:	bf08      	it	eq
    f0fe:	61a0      	streq	r0, [r4, #24]
    f100:	f382 8811 	msr	BASEPRI, r2
    f104:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    f108:	f04f 0220 	mov.w	r2, #32
    f10c:	f3ef 8111 	mrs	r1, BASEPRI
    f110:	f382 8812 	msr	BASEPRI_MAX, r2
    f114:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    f118:	68da      	ldr	r2, [r3, #12]
    f11a:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
    f11c:	f8c3 900c 	str.w	r9, [r3, #12]
	parent->next = child;
    f120:	f8c3 9000 	str.w	r9, [r3]
	return list->tail;
    f124:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
    f126:	b94a      	cbnz	r2, f13c <hci_num_completed_packets+0x110>
	list->head = node;
    f128:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    f12c:	f381 8811 	msr	BASEPRI, r1
    f130:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
    f134:	4658      	mov	r0, fp
    f136:	f00a fdfb 	bl	19d30 <k_work_submit>
    f13a:	e7a6      	b.n	f08a <hci_num_completed_packets+0x5e>
	parent->next = child;
    f13c:	6013      	str	r3, [r2, #0]
	list->tail = node;
    f13e:	6263      	str	r3, [r4, #36]	; 0x24
}
    f140:	e7f4      	b.n	f12c <hci_num_completed_packets+0x100>
    f142:	bf00      	nop
    f144:	000245d5 	.word	0x000245d5
    f148:	000245b5 	.word	0x000245b5
    f14c:	00024db4 	.word	0x00024db4
    f150:	000227f8 	.word	0x000227f8

0000f154 <bt_hci_cmd_state_set_init>:
{
    f154:	b510      	push	{r4, lr}
	state->bit = bit;
    f156:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
    f15a:	f89d 3008 	ldrb.w	r3, [sp, #8]
{
    f15e:	460c      	mov	r4, r1
	state->val = val;
    f160:	720b      	strb	r3, [r1, #8]
	cmd(buf)->state = state;
    f162:	f007 f831 	bl	161c8 <net_buf_id>
    f166:	220c      	movs	r2, #12
    f168:	4b02      	ldr	r3, [pc, #8]	; (f174 <bt_hci_cmd_state_set_init+0x20>)
    f16a:	fb02 3300 	mla	r3, r2, r0, r3
    f16e:	605c      	str	r4, [r3, #4]
}
    f170:	bd10      	pop	{r4, pc}
    f172:	bf00      	nop
    f174:	20009d44 	.word	0x20009d44

0000f178 <bt_hci_cmd_create>:
{
    f178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
    f17c:	f04f 32ff 	mov.w	r2, #4294967295
    f180:	f04f 33ff 	mov.w	r3, #4294967295
    f184:	4606      	mov	r6, r0
    f186:	4817      	ldr	r0, [pc, #92]	; (f1e4 <bt_hci_cmd_create+0x6c>)
    f188:	460f      	mov	r7, r1
    f18a:	f010 fddf 	bl	1fd4c <net_buf_alloc_fixed>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    f18e:	f04f 0800 	mov.w	r8, #0
    f192:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
    f194:	f100 0a08 	add.w	sl, r0, #8
    f198:	2101      	movs	r1, #1
    f19a:	4650      	mov	r0, sl
    f19c:	f010 fdf5 	bl	1fd8a <net_buf_simple_reserve>
	cmd(buf)->opcode = opcode;
    f1a0:	4620      	mov	r0, r4
    f1a2:	f884 8014 	strb.w	r8, [r4, #20]
    f1a6:	f007 f80f 	bl	161c8 <net_buf_id>
    f1aa:	f04f 090c 	mov.w	r9, #12
    f1ae:	4d0e      	ldr	r5, [pc, #56]	; (f1e8 <bt_hci_cmd_create+0x70>)
    f1b0:	fb09 5000 	mla	r0, r9, r0, r5
    f1b4:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    f1b6:	4620      	mov	r0, r4
    f1b8:	f007 f806 	bl	161c8 <net_buf_id>
    f1bc:	fb09 5000 	mla	r0, r9, r0, r5
    f1c0:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
    f1c4:	4620      	mov	r0, r4
    f1c6:	f006 ffff 	bl	161c8 <net_buf_id>
    f1ca:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
    f1ce:	2103      	movs	r1, #3
    f1d0:	4650      	mov	r0, sl
    f1d2:	f8c5 8004 	str.w	r8, [r5, #4]
    f1d6:	f010 fe59 	bl	1fe8c <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
    f1da:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
    f1dc:	7087      	strb	r7, [r0, #2]
}
    f1de:	4620      	mov	r0, r4
    f1e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f1e4:	20008a70 	.word	0x20008a70
    f1e8:	20009d44 	.word	0x20009d44

0000f1ec <bt_hci_cmd_send_sync>:
{
    f1ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f1f0:	b087      	sub	sp, #28
    f1f2:	4680      	mov	r8, r0
    f1f4:	4615      	mov	r5, r2
	if (!buf) {
    f1f6:	460c      	mov	r4, r1
{
    f1f8:	af00      	add	r7, sp, #0
	if (!buf) {
    f1fa:	b921      	cbnz	r1, f206 <bt_hci_cmd_send_sync+0x1a>
		buf = bt_hci_cmd_create(opcode, 0);
    f1fc:	f7ff ffbc 	bl	f178 <bt_hci_cmd_create>
		if (!buf) {
    f200:	4604      	mov	r4, r0
    f202:	2800      	cmp	r0, #0
    f204:	d05c      	beq.n	f2c0 <bt_hci_cmd_send_sync+0xd4>
	return z_impl_k_sem_init(sem, initial_count, limit);
    f206:	2201      	movs	r2, #1
    f208:	2100      	movs	r1, #0
    f20a:	4638      	mov	r0, r7
    f20c:	f011 fff9 	bl	21202 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    f210:	4620      	mov	r0, r4
    f212:	f006 ffd9 	bl	161c8 <net_buf_id>
    f216:	230c      	movs	r3, #12
    f218:	f8df 90ac 	ldr.w	r9, [pc, #172]	; f2c8 <bt_hci_cmd_send_sync+0xdc>
    f21c:	fb03 9000 	mla	r0, r3, r0, r9
    f220:	6087      	str	r7, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
    f222:	4620      	mov	r0, r4
    f224:	f010 fe0c 	bl	1fe40 <net_buf_ref>
    f228:	4601      	mov	r1, r0
    f22a:	4828      	ldr	r0, [pc, #160]	; (f2cc <bt_hci_cmd_send_sync+0xe0>)
    f22c:	f010 fdfb 	bl	1fe26 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    f230:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    f234:	2300      	movs	r3, #0
    f236:	4638      	mov	r0, r7
    f238:	f00a fc24 	bl	19a84 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    f23c:	4606      	mov	r6, r0
    f23e:	b180      	cbz	r0, f262 <bt_hci_cmd_send_sync+0x76>
    f240:	f240 1349 	movw	r3, #329	; 0x149
    f244:	4a22      	ldr	r2, [pc, #136]	; (f2d0 <bt_hci_cmd_send_sync+0xe4>)
    f246:	4923      	ldr	r1, [pc, #140]	; (f2d4 <bt_hci_cmd_send_sync+0xe8>)
    f248:	4823      	ldr	r0, [pc, #140]	; (f2d8 <bt_hci_cmd_send_sync+0xec>)
    f24a:	f00d fb80 	bl	1c94e <assert_print>
    f24e:	4631      	mov	r1, r6
    f250:	4822      	ldr	r0, [pc, #136]	; (f2dc <bt_hci_cmd_send_sync+0xf0>)
    f252:	f00d fb7c 	bl	1c94e <assert_print>
    f256:	4040      	eors	r0, r0
    f258:	f380 8811 	msr	BASEPRI, r0
    f25c:	f04f 0003 	mov.w	r0, #3
    f260:	df02      	svc	2
	status = cmd(buf)->status;
    f262:	4620      	mov	r0, r4
    f264:	f006 ffb0 	bl	161c8 <net_buf_id>
    f268:	230c      	movs	r3, #12
    f26a:	4358      	muls	r0, r3
    f26c:	f819 6000 	ldrb.w	r6, [r9, r0]
	if (status) {
    f270:	b1f6      	cbz	r6, f2b0 <bt_hci_cmd_send_sync+0xc4>
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
    f272:	466d      	mov	r5, sp
    f274:	b08a      	sub	sp, #40	; 0x28
    f276:	466a      	mov	r2, sp
    f278:	4b19      	ldr	r3, [pc, #100]	; (f2e0 <bt_hci_cmd_send_sync+0xf4>)
    f27a:	6216      	str	r6, [r2, #32]
    f27c:	6153      	str	r3, [r2, #20]
    f27e:	4b19      	ldr	r3, [pc, #100]	; (f2e4 <bt_hci_cmd_send_sync+0xf8>)
    f280:	f44f 5122 	mov.w	r1, #10368	; 0x2880
    f284:	e9c2 3806 	strd	r3, r8, [r2, #24]
    f288:	2305      	movs	r3, #5
    f28a:	4817      	ldr	r0, [pc, #92]	; (f2e8 <bt_hci_cmd_send_sync+0xfc>)
    f28c:	f842 3f10 	str.w	r3, [r2, #16]!
    f290:	f00e fd88 	bl	1dda4 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
    f294:	4620      	mov	r0, r4
    f296:	46ad      	mov	sp, r5
    f298:	f007 f850 	bl	1633c <net_buf_unref>
			return -ECONNREFUSED;
    f29c:	2e09      	cmp	r6, #9
    f29e:	bf14      	ite	ne
    f2a0:	f06f 0004 	mvnne.w	r0, #4
    f2a4:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
    f2a8:	371c      	adds	r7, #28
    f2aa:	46bd      	mov	sp, r7
    f2ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (rsp) {
    f2b0:	b115      	cbz	r5, f2b8 <bt_hci_cmd_send_sync+0xcc>
		*rsp = buf;
    f2b2:	602c      	str	r4, [r5, #0]
	return 0;
    f2b4:	2000      	movs	r0, #0
    f2b6:	e7f7      	b.n	f2a8 <bt_hci_cmd_send_sync+0xbc>
		net_buf_unref(buf);
    f2b8:	4620      	mov	r0, r4
    f2ba:	f007 f83f 	bl	1633c <net_buf_unref>
    f2be:	e7f9      	b.n	f2b4 <bt_hci_cmd_send_sync+0xc8>
			return -ENOBUFS;
    f2c0:	f06f 0068 	mvn.w	r0, #104	; 0x68
    f2c4:	e7f0      	b.n	f2a8 <bt_hci_cmd_send_sync+0xbc>
    f2c6:	bf00      	nop
    f2c8:	20009d44 	.word	0x20009d44
    f2cc:	20008144 	.word	0x20008144
    f2d0:	00024447 	.word	0x00024447
    f2d4:	000245f0 	.word	0x000245f0
    f2d8:	00024494 	.word	0x00024494
    f2dc:	000245f9 	.word	0x000245f9
    f2e0:	00024619 	.word	0x00024619
    f2e4:	00024e1a 	.word	0x00024e1a
    f2e8:	000227f8 	.word	0x000227f8

0000f2ec <hci_le_read_max_data_len>:
{
    f2ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    f2ee:	b083      	sub	sp, #12
    f2f0:	af00      	add	r7, sp, #0
    f2f2:	4606      	mov	r6, r0
    f2f4:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    f2f6:	f242 002f 	movw	r0, #8239	; 0x202f
    f2fa:	2100      	movs	r1, #0
    f2fc:	1d3a      	adds	r2, r7, #4
    f2fe:	f7ff ff75 	bl	f1ec <bt_hci_cmd_send_sync>
	if (err) {
    f302:	4604      	mov	r4, r0
    f304:	b198      	cbz	r0, f32e <hci_le_read_max_data_len+0x42>
		BT_ERR("Failed to read DLE max data len");
    f306:	466d      	mov	r5, sp
    f308:	b088      	sub	sp, #32
    f30a:	466a      	mov	r2, sp
    f30c:	4b0d      	ldr	r3, [pc, #52]	; (f344 <hci_le_read_max_data_len+0x58>)
    f30e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    f312:	6153      	str	r3, [r2, #20]
    f314:	4b0c      	ldr	r3, [pc, #48]	; (f348 <hci_le_read_max_data_len+0x5c>)
    f316:	480d      	ldr	r0, [pc, #52]	; (f34c <hci_le_read_max_data_len+0x60>)
    f318:	6193      	str	r3, [r2, #24]
    f31a:	2303      	movs	r3, #3
    f31c:	f842 3f10 	str.w	r3, [r2, #16]!
    f320:	f00e fd40 	bl	1dda4 <z_log_msg_static_create.constprop.0>
    f324:	46ad      	mov	sp, r5
}
    f326:	4620      	mov	r0, r4
    f328:	370c      	adds	r7, #12
    f32a:	46bd      	mov	sp, r7
    f32c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = (void *)rsp->data;
    f32e:	6878      	ldr	r0, [r7, #4]
    f330:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    f332:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    f336:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
    f338:	f8b3 3003 	ldrh.w	r3, [r3, #3]
    f33c:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
    f33e:	f006 fffd 	bl	1633c <net_buf_unref>
	return 0;
    f342:	e7f0      	b.n	f326 <hci_le_read_max_data_len+0x3a>
    f344:	00024639 	.word	0x00024639
    f348:	00024e6d 	.word	0x00024e6d
    f34c:	000227f8 	.word	0x000227f8

0000f350 <bt_hci_le_rand>:
{
    f350:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
    f352:	4b14      	ldr	r3, [pc, #80]	; (f3a4 <bt_hci_le_rand+0x54>)
{
    f354:	4605      	mov	r5, r0
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
    f356:	f993 3093 	ldrsb.w	r3, [r3, #147]	; 0x93
{
    f35a:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
    f35c:	2b00      	cmp	r3, #0
    f35e:	da1d      	bge.n	f39c <bt_hci_le_rand+0x4c>
	while (len > 0) {
    f360:	b914      	cbnz	r4, f368 <bt_hci_le_rand+0x18>
	return 0;
    f362:	4620      	mov	r0, r4
}
    f364:	b003      	add	sp, #12
    f366:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
    f368:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
    f36a:	f04f 0100 	mov.w	r1, #0
    f36e:	f242 0018 	movw	r0, #8216	; 0x2018
    f372:	aa01      	add	r2, sp, #4
		count = MIN(len, sizeof(rp->rand));
    f374:	4626      	mov	r6, r4
    f376:	bf28      	it	cs
    f378:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
    f37a:	f7ff ff37 	bl	f1ec <bt_hci_cmd_send_sync>
		if (err) {
    f37e:	2800      	cmp	r0, #0
    f380:	d1f0      	bne.n	f364 <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
    f382:	9f01      	ldr	r7, [sp, #4]
    f384:	4632      	mov	r2, r6
    f386:	68b9      	ldr	r1, [r7, #8]
    f388:	4628      	mov	r0, r5
    f38a:	3101      	adds	r1, #1
    f38c:	f012 fb7f 	bl	21a8e <memcpy>
		net_buf_unref(rsp);
    f390:	4638      	mov	r0, r7
    f392:	f006 ffd3 	bl	1633c <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
    f396:	4435      	add	r5, r6
		len -= count;
    f398:	1ba4      	subs	r4, r4, r6
    f39a:	e7e1      	b.n	f360 <bt_hci_le_rand+0x10>
		return -ENOTSUP;
    f39c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    f3a0:	e7e0      	b.n	f364 <bt_hci_le_rand+0x14>
    f3a2:	bf00      	nop
    f3a4:	20008000 	.word	0x20008000

0000f3a8 <bt_hci_le_enh_conn_complete>:
{
    f3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f3ac:	b089      	sub	sp, #36	; 0x24
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    f3ae:	f8b0 9001 	ldrh.w	r9, [r0, #1]
{
    f3b2:	4605      	mov	r5, r0
	handle |= ~BT_ACL_HANDLE_MASK;
    f3b4:	ea6f 5309 	mvn.w	r3, r9, lsl #20
    f3b8:	ea6f 5313 	mvn.w	r3, r3, lsr #20
    f3bc:	2600      	movs	r6, #0
		if (disconnected_handles[i] == handle) {
    f3be:	4ab1      	ldr	r2, [pc, #708]	; (f684 <bt_hci_le_enh_conn_complete+0x2dc>)
    f3c0:	b29b      	uxth	r3, r3
    f3c2:	8811      	ldrh	r1, [r2, #0]
{
    f3c4:	af02      	add	r7, sp, #8
		if (disconnected_handles[i] == handle) {
    f3c6:	4299      	cmp	r1, r3
			disconnected_handles[i] = 0;
    f3c8:	bf04      	itt	eq
    f3ca:	8016      	strheq	r6, [r2, #0]
			return true;
    f3cc:	2601      	moveq	r6, #1
	bt_id_pending_keys_update();
    f3ce:	f001 f8d5 	bl	1057c <bt_id_pending_keys_update>
	if (evt->status) {
    f3d2:	782c      	ldrb	r4, [r5, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    f3d4:	fa1f f889 	uxth.w	r8, r9
	if (evt->status) {
    f3d8:	2c00      	cmp	r4, #0
    f3da:	d03b      	beq.n	f454 <bt_hci_le_enh_conn_complete+0xac>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    f3dc:	2c3c      	cmp	r4, #60	; 0x3c
    f3de:	d127      	bne.n	f430 <bt_hci_le_enh_conn_complete+0x88>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    f3e0:	f001 fc0e 	bl	10c00 <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    f3e4:	f06f 0180 	mvn.w	r1, #128	; 0x80
    f3e8:	3010      	adds	r0, #16
    f3ea:	f00e fcde 	bl	1ddaa <atomic_and.isra.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
    f3ee:	2000      	movs	r0, #0
    f3f0:	f7ff fa7c 	bl	e8ec <find_pending_connect.part.0>
		if (!conn) {
    f3f4:	4605      	mov	r5, r0
    f3f6:	b998      	cbnz	r0, f420 <bt_hci_le_enh_conn_complete+0x78>
			BT_ERR("No pending peripheral connection");
    f3f8:	466c      	mov	r4, sp
    f3fa:	b088      	sub	sp, #32
    f3fc:	aa02      	add	r2, sp, #8
    f3fe:	4ba2      	ldr	r3, [pc, #648]	; (f688 <bt_hci_le_enh_conn_complete+0x2e0>)
    f400:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    f404:	6153      	str	r3, [r2, #20]
    f406:	4ba1      	ldr	r3, [pc, #644]	; (f68c <bt_hci_le_enh_conn_complete+0x2e4>)
    f408:	48a1      	ldr	r0, [pc, #644]	; (f690 <bt_hci_le_enh_conn_complete+0x2e8>)
    f40a:	6193      	str	r3, [r2, #24]
    f40c:	2303      	movs	r3, #3
    f40e:	f842 3f10 	str.w	r3, [r2, #16]!
    f412:	f00e fcc7 	bl	1dda4 <z_log_msg_static_create.constprop.0>
    f416:	46a5      	mov	sp, r4
}
    f418:	371c      	adds	r7, #28
    f41a:	46bd      	mov	sp, r7
    f41c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
    f420:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    f422:	2100      	movs	r1, #0
    f424:	f002 faae 	bl	11984 <bt_conn_set_state>
		bt_conn_unref(conn);
    f428:	4628      	mov	r0, r5
	bt_conn_unref(conn);
    f42a:	f00f f804 	bl	1e436 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    f42e:	e7f3      	b.n	f418 <bt_hci_le_enh_conn_complete+0x70>
		BT_WARN("Unexpected status 0x%02x", evt->status);
    f430:	466d      	mov	r5, sp
    f432:	b088      	sub	sp, #32
    f434:	aa02      	add	r2, sp, #8
    f436:	4b97      	ldr	r3, [pc, #604]	; (f694 <bt_hci_le_enh_conn_complete+0x2ec>)
    f438:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    f43c:	6153      	str	r3, [r2, #20]
    f43e:	4b96      	ldr	r3, [pc, #600]	; (f698 <bt_hci_le_enh_conn_complete+0x2f0>)
    f440:	4893      	ldr	r0, [pc, #588]	; (f690 <bt_hci_le_enh_conn_complete+0x2e8>)
    f442:	e9c2 3406 	strd	r3, r4, [r2, #24]
    f446:	2304      	movs	r3, #4
    f448:	f842 3f10 	str.w	r3, [r2, #16]!
    f44c:	f00e fcaa 	bl	1dda4 <z_log_msg_static_create.constprop.0>
    f450:	46ad      	mov	sp, r5
		return;
    f452:	e7e1      	b.n	f418 <bt_hci_le_enh_conn_complete+0x70>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    f454:	792b      	ldrb	r3, [r5, #4]
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    f456:	f105 0a04 	add.w	sl, r5, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    f45a:	3b02      	subs	r3, #2
    f45c:	2b01      	cmp	r3, #1
    f45e:	d82e      	bhi.n	f4be <bt_hci_le_enh_conn_complete+0x116>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    f460:	4651      	mov	r1, sl
    f462:	f107 0010 	add.w	r0, r7, #16
    f466:	f00e fc96 	bl	1dd96 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    f46a:	7c3b      	ldrb	r3, [r7, #16]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    f46c:	f105 0111 	add.w	r1, r5, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    f470:	3b02      	subs	r3, #2
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    f472:	f107 0009 	add.w	r0, r7, #9
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    f476:	743b      	strb	r3, [r7, #16]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    f478:	f00e fc88 	bl	1dd8c <bt_addr_copy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    f47c:	2301      	movs	r3, #1
    f47e:	723b      	strb	r3, [r7, #8]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
    f480:	78eb      	ldrb	r3, [r5, #3]
    f482:	2b01      	cmp	r3, #1
    f484:	d030      	beq.n	f4e8 <bt_hci_le_enh_conn_complete+0x140>
		BT_ERR("No pending conn for peer %s",
    f486:	4650      	mov	r0, sl
    f488:	f7ff f8fe 	bl	e688 <bt_addr_le_str>
    f48c:	466c      	mov	r4, sp
    f48e:	b08a      	sub	sp, #40	; 0x28
    f490:	aa02      	add	r2, sp, #8
    f492:	4b82      	ldr	r3, [pc, #520]	; (f69c <bt_hci_le_enh_conn_complete+0x2f4>)
    f494:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    f498:	6153      	str	r3, [r2, #20]
    f49a:	4b7f      	ldr	r3, [pc, #508]	; (f698 <bt_hci_le_enh_conn_complete+0x2f0>)
    f49c:	e9c2 3006 	strd	r3, r0, [r2, #24]
    f4a0:	f240 3301 	movw	r3, #769	; 0x301
    f4a4:	8413      	strh	r3, [r2, #32]
    f4a6:	4b7e      	ldr	r3, [pc, #504]	; (f6a0 <bt_hci_le_enh_conn_complete+0x2f8>)
    f4a8:	4879      	ldr	r0, [pc, #484]	; (f690 <bt_hci_le_enh_conn_complete+0x2e8>)
    f4aa:	f842 3f10 	str.w	r3, [r2, #16]!
    f4ae:	f00e fc79 	bl	1dda4 <z_log_msg_static_create.constprop.0>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
    f4b2:	211f      	movs	r1, #31
    f4b4:	46a5      	mov	sp, r4
    f4b6:	4640      	mov	r0, r8
    f4b8:	f00e fc8f 	bl	1ddda <bt_hci_disconnect>
		return;
    f4bc:	e7ac      	b.n	f418 <bt_hci_le_enh_conn_complete+0x70>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
    f4be:	78eb      	ldrb	r3, [r5, #3]
		bt_addr_le_copy(&id_addr,
    f4c0:	4651      	mov	r1, sl
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
    f4c2:	2b01      	cmp	r3, #1
    f4c4:	bf04      	itt	eq
    f4c6:	4b77      	ldreq	r3, [pc, #476]	; (f6a4 <bt_hci_le_enh_conn_complete+0x2fc>)
    f4c8:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
    f4cc:	4620      	mov	r0, r4
    f4ce:	f00e fded 	bl	1e0ac <bt_lookup_id_addr>
    f4d2:	4601      	mov	r1, r0
    f4d4:	f107 0010 	add.w	r0, r7, #16
    f4d8:	f00e fc5d 	bl	1dd96 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    f4dc:	4651      	mov	r1, sl
    f4de:	f107 0008 	add.w	r0, r7, #8
    f4e2:	f00e fc58 	bl	1dd96 <bt_addr_le_copy>
    f4e6:	e7cb      	b.n	f480 <bt_hci_le_enh_conn_complete+0xd8>
    f4e8:	f107 0010 	add.w	r0, r7, #16
    f4ec:	f7ff f9fe 	bl	e8ec <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    f4f0:	78eb      	ldrb	r3, [r5, #3]
    f4f2:	4604      	mov	r4, r0
    f4f4:	2b01      	cmp	r3, #1
    f4f6:	d10a      	bne.n	f50e <bt_hci_le_enh_conn_complete+0x166>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    f4f8:	f001 fb82 	bl	10c00 <bt_le_adv_lookup_legacy>
    f4fc:	4683      	mov	fp, r0
    f4fe:	f06f 0180 	mvn.w	r1, #128	; 0x80
    f502:	3010      	adds	r0, #16
    f504:	f00e fc51 	bl	1ddaa <atomic_and.isra.0>
		(void)bt_le_lim_adv_cancel_timeout(adv);
    f508:	4658      	mov	r0, fp
    f50a:	f00e feee 	bl	1e2ea <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
    f50e:	2c00      	cmp	r4, #0
    f510:	d0b9      	beq.n	f486 <bt_hci_le_enh_conn_complete+0xde>
	conn->handle = handle;
    f512:	4620      	mov	r0, r4
	conn->err = 0U;
    f514:	2200      	movs	r2, #0
	conn->handle = handle;
    f516:	f820 9b88 	strh.w	r9, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    f51a:	f107 0110 	add.w	r1, r7, #16
    f51e:	f00e fc3a 	bl	1dd96 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    f522:	f8b5 3017 	ldrh.w	r3, [r5, #23]
    f526:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    f52a:	f8b5 3019 	ldrh.w	r3, [r5, #25]
    f52e:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    f532:	f8b5 301b 	ldrh.w	r3, [r5, #27]
    f536:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
    f53a:	78eb      	ldrb	r3, [r5, #3]
	conn->err = 0U;
    f53c:	7322      	strb	r2, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    f53e:	2b01      	cmp	r3, #1
	conn->role = evt->role;
    f540:	70e3      	strb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    f542:	d116      	bne.n	f572 <bt_hci_le_enh_conn_complete+0x1ca>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    f544:	f107 0108 	add.w	r1, r7, #8
    f548:	f104 008f 	add.w	r0, r4, #143	; 0x8f
    f54c:	f00e fc23 	bl	1dd96 <bt_addr_le_copy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    f550:	f001 fb56 	bl	10c00 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
    f554:	7a21      	ldrb	r1, [r4, #8]
    f556:	4a53      	ldr	r2, [pc, #332]	; (f6a4 <bt_hci_le_enh_conn_complete+0x2fc>)
    f558:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
    f55c:	4411      	add	r1, r2
    f55e:	f104 0096 	add.w	r0, r4, #150	; 0x96
    f562:	f00e fc18 	bl	1dd96 <bt_addr_le_copy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
    f566:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
    f56a:	065d      	lsls	r5, r3, #25
    f56c:	d501      	bpl.n	f572 <bt_hci_le_enh_conn_complete+0x1ca>
			bt_le_adv_resume();
    f56e:	f001 fd19 	bl	10fa4 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    f572:	2107      	movs	r1, #7
    f574:	4620      	mov	r0, r4
    f576:	f002 fa05 	bl	11984 <bt_conn_set_state>
	if (is_disconnected) {
    f57a:	b11e      	cbz	r6, f584 <bt_hci_le_enh_conn_complete+0x1dc>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    f57c:	2101      	movs	r1, #1
    f57e:	4620      	mov	r0, r4
    f580:	f002 fa00 	bl	11984 <bt_conn_set_state>
	bt_conn_connected(conn);
    f584:	4620      	mov	r0, r4
    f586:	f00e ff8c 	bl	1e4a2 <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
    f58a:	7b63      	ldrb	r3, [r4, #13]
    f58c:	2b07      	cmp	r3, #7
    f58e:	d174      	bne.n	f67a <bt_hci_le_enh_conn_complete+0x2d2>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    f590:	1d23      	adds	r3, r4, #4
    f592:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    f596:	f413 6f00 	tst.w	r3, #2048	; 0x800
    f59a:	4d42      	ldr	r5, [pc, #264]	; (f6a4 <bt_hci_le_enh_conn_complete+0x2fc>)
    f59c:	d12b      	bne.n	f5f6 <bt_hci_le_enh_conn_complete+0x24e>
    f59e:	78e3      	ldrb	r3, [r4, #3]
    f5a0:	b11b      	cbz	r3, f5aa <bt_hci_le_enh_conn_complete+0x202>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
    f5a2:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    f5a6:	0718      	lsls	r0, r3, #28
    f5a8:	d525      	bpl.n	f5f6 <bt_hci_le_enh_conn_complete+0x24e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    f5aa:	2102      	movs	r1, #2
    f5ac:	f242 0016 	movw	r0, #8214	; 0x2016
    f5b0:	f7ff fde2 	bl	f178 <bt_hci_cmd_create>
	if (!buf) {
    f5b4:	4606      	mov	r6, r0
    f5b6:	2800      	cmp	r0, #0
    f5b8:	d061      	beq.n	f67e <bt_hci_le_enh_conn_complete+0x2d6>
    f5ba:	2102      	movs	r1, #2
    f5bc:	3008      	adds	r0, #8
    f5be:	f010 fc65 	bl	1fe8c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    f5c2:	8823      	ldrh	r3, [r4, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
    f5c4:	2200      	movs	r2, #0
	cp->handle = sys_cpu_to_le16(conn->handle);
    f5c6:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
    f5c8:	4631      	mov	r1, r6
    f5ca:	f242 0016 	movw	r0, #8214	; 0x2016
    f5ce:	f7ff fe0d 	bl	f1ec <bt_hci_cmd_send_sync>
		if (err) {
    f5d2:	b180      	cbz	r0, f5f6 <bt_hci_le_enh_conn_complete+0x24e>
			BT_ERR("Failed read remote features (%d)", err);
    f5d4:	466e      	mov	r6, sp
    f5d6:	b088      	sub	sp, #32
    f5d8:	aa02      	add	r2, sp, #8
    f5da:	4b33      	ldr	r3, [pc, #204]	; (f6a8 <bt_hci_le_enh_conn_complete+0x300>)
    f5dc:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    f5e0:	6153      	str	r3, [r2, #20]
    f5e2:	4b32      	ldr	r3, [pc, #200]	; (f6ac <bt_hci_le_enh_conn_complete+0x304>)
    f5e4:	e9c2 3006 	strd	r3, r0, [r2, #24]
    f5e8:	2304      	movs	r3, #4
    f5ea:	4829      	ldr	r0, [pc, #164]	; (f690 <bt_hci_le_enh_conn_complete+0x2e8>)
    f5ec:	f842 3f10 	str.w	r3, [r2, #16]!
    f5f0:	f00e fbd8 	bl	1dda4 <z_log_msg_static_create.constprop.0>
    f5f4:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    f5f6:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
    f5fa:	07d9      	lsls	r1, r3, #31
    f5fc:	d518      	bpl.n	f630 <bt_hci_le_enh_conn_complete+0x288>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
    f5fe:	2100      	movs	r1, #0
    f600:	2302      	movs	r3, #2
    f602:	4620      	mov	r0, r4
    f604:	461a      	mov	r2, r3
    f606:	9100      	str	r1, [sp, #0]
    f608:	f00e fc20 	bl	1de4c <bt_le_set_phy>
		if (err) {
    f60c:	b180      	cbz	r0, f630 <bt_hci_le_enh_conn_complete+0x288>
			BT_ERR("Failed LE Set PHY (%d)", err);
    f60e:	466e      	mov	r6, sp
    f610:	b088      	sub	sp, #32
    f612:	aa02      	add	r2, sp, #8
    f614:	4b26      	ldr	r3, [pc, #152]	; (f6b0 <bt_hci_le_enh_conn_complete+0x308>)
    f616:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    f61a:	6153      	str	r3, [r2, #20]
    f61c:	4b23      	ldr	r3, [pc, #140]	; (f6ac <bt_hci_le_enh_conn_complete+0x304>)
    f61e:	e9c2 3006 	strd	r3, r0, [r2, #24]
    f622:	2304      	movs	r3, #4
    f624:	481a      	ldr	r0, [pc, #104]	; (f690 <bt_hci_le_enh_conn_complete+0x2e8>)
    f626:	f842 3f10 	str.w	r3, [r2, #16]!
    f62a:	f00e fbbb 	bl	1dda4 <z_log_msg_static_create.constprop.0>
    f62e:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    f630:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    f634:	069a      	lsls	r2, r3, #26
    f636:	d520      	bpl.n	f67a <bt_hci_le_enh_conn_complete+0x2d2>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
    f638:	f8d5 315c 	ldr.w	r3, [r5, #348]	; 0x15c
    f63c:	689b      	ldr	r3, [r3, #8]
    f63e:	079b      	lsls	r3, r3, #30
    f640:	d51b      	bpl.n	f67a <bt_hci_le_enh_conn_complete+0x2d2>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    f642:	1db9      	adds	r1, r7, #6
    f644:	1d38      	adds	r0, r7, #4
    f646:	f7ff fe51 	bl	f2ec <hci_le_read_max_data_len>
			if (!err) {
    f64a:	b9b0      	cbnz	r0, f67a <bt_hci_le_enh_conn_complete+0x2d2>
				err = bt_le_set_data_len(conn,
    f64c:	4620      	mov	r0, r4
    f64e:	88fa      	ldrh	r2, [r7, #6]
    f650:	88b9      	ldrh	r1, [r7, #4]
    f652:	f00e fbdd 	bl	1de10 <bt_le_set_data_len>
				if (err) {
    f656:	b180      	cbz	r0, f67a <bt_hci_le_enh_conn_complete+0x2d2>
					BT_ERR("Failed to set data len (%d)", err);
    f658:	466d      	mov	r5, sp
    f65a:	b088      	sub	sp, #32
    f65c:	aa02      	add	r2, sp, #8
    f65e:	4b15      	ldr	r3, [pc, #84]	; (f6b4 <bt_hci_le_enh_conn_complete+0x30c>)
    f660:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    f664:	6153      	str	r3, [r2, #20]
    f666:	4b11      	ldr	r3, [pc, #68]	; (f6ac <bt_hci_le_enh_conn_complete+0x304>)
    f668:	e9c2 3006 	strd	r3, r0, [r2, #24]
    f66c:	2304      	movs	r3, #4
    f66e:	4808      	ldr	r0, [pc, #32]	; (f690 <bt_hci_le_enh_conn_complete+0x2e8>)
    f670:	f842 3f10 	str.w	r3, [r2, #16]!
    f674:	f00e fb96 	bl	1dda4 <z_log_msg_static_create.constprop.0>
    f678:	46ad      	mov	sp, r5
	bt_conn_unref(conn);
    f67a:	4620      	mov	r0, r4
    f67c:	e6d5      	b.n	f42a <bt_hci_le_enh_conn_complete+0x82>
		return -ENOBUFS;
    f67e:	f06f 0068 	mvn.w	r0, #104	; 0x68
    f682:	e7a7      	b.n	f5d4 <bt_hci_le_enh_conn_complete+0x22c>
    f684:	2000a18e 	.word	0x2000a18e
    f688:	0002465d 	.word	0x0002465d
    f68c:	00024de1 	.word	0x00024de1
    f690:	000227f8 	.word	0x000227f8
    f694:	00024682 	.word	0x00024682
    f698:	00024dfe 	.word	0x00024dfe
    f69c:	0002469f 	.word	0x0002469f
    f6a0:	01000004 	.word	0x01000004
    f6a4:	20008000 	.word	0x20008000
    f6a8:	000246bf 	.word	0x000246bf
    f6ac:	00024dce 	.word	0x00024dce
    f6b0:	000246e4 	.word	0x000246e4
    f6b4:	000246ff 	.word	0x000246ff

0000f6b8 <le_legacy_conn_complete>:
{
    f6b8:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
    f6ba:	6881      	ldr	r1, [r0, #8]
{
    f6bc:	b089      	sub	sp, #36	; 0x24
	enh.status         = evt->status;
    f6be:	780b      	ldrb	r3, [r1, #0]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    f6c0:	a801      	add	r0, sp, #4
	enh.status         = evt->status;
    f6c2:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
    f6c6:	f8b1 3001 	ldrh.w	r3, [r1, #1]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    f6ca:	3104      	adds	r1, #4
	enh.handle         = evt->handle;
    f6cc:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
    f6d0:	f811 3c01 	ldrb.w	r3, [r1, #-1]
    f6d4:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
    f6d8:	f8b1 3007 	ldrh.w	r3, [r1, #7]
    f6dc:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
    f6e0:	f8b1 3009 	ldrh.w	r3, [r1, #9]
    f6e4:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
    f6e8:	f8b1 300b 	ldrh.w	r3, [r1, #11]
    f6ec:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
    f6f0:	7b4b      	ldrb	r3, [r1, #13]
    f6f2:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    f6f6:	f00e fb4e 	bl	1dd96 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
    f6fa:	4907      	ldr	r1, [pc, #28]	; (f718 <le_legacy_conn_complete+0x60>)
    f6fc:	f10d 000b 	add.w	r0, sp, #11
    f700:	f00e fb44 	bl	1dd8c <bt_addr_copy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
    f704:	f10d 0011 	add.w	r0, sp, #17
    f708:	f00e fb40 	bl	1dd8c <bt_addr_copy>
	bt_hci_le_enh_conn_complete(evt);
    f70c:	4668      	mov	r0, sp
    f70e:	f7ff fe4b 	bl	f3a8 <bt_hci_le_enh_conn_complete>
}
    f712:	b009      	add	sp, #36	; 0x24
    f714:	f85d fb04 	ldr.w	pc, [sp], #4
    f718:	000242d1 	.word	0x000242d1

0000f71c <bt_security_err_get>:
	switch (hci_err) {
    f71c:	2829      	cmp	r0, #41	; 0x29
    f71e:	bf9a      	itte	ls
    f720:	4b01      	ldrls	r3, [pc, #4]	; (f728 <bt_security_err_get+0xc>)
    f722:	5c18      	ldrbls	r0, [r3, r0]
{
    f724:	2009      	movhi	r0, #9
}
    f726:	4770      	bx	lr
    f728:	00024aea 	.word	0x00024aea

0000f72c <hci_encrypt_key_refresh_complete>:
{
    f72c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
    f72e:	6883      	ldr	r3, [r0, #8]
{
    f730:	af00      	add	r7, sp, #0
	handle = sys_le16_to_cpu(evt->handle);
    f732:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	uint8_t status = evt->status;
    f736:	781d      	ldrb	r5, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    f738:	4630      	mov	r0, r6
    f73a:	f002 f91b 	bl	11974 <bt_conn_lookup_handle>
	if (!conn) {
    f73e:	4604      	mov	r4, r0
    f740:	b990      	cbnz	r0, f768 <hci_encrypt_key_refresh_complete+0x3c>
		BT_ERR("Unable to look up conn with handle %u", handle);
    f742:	466c      	mov	r4, sp
    f744:	b088      	sub	sp, #32
    f746:	466a      	mov	r2, sp
    f748:	4b21      	ldr	r3, [pc, #132]	; (f7d0 <hci_encrypt_key_refresh_complete+0xa4>)
    f74a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    f74e:	6153      	str	r3, [r2, #20]
    f750:	4b20      	ldr	r3, [pc, #128]	; (f7d4 <hci_encrypt_key_refresh_complete+0xa8>)
    f752:	4821      	ldr	r0, [pc, #132]	; (f7d8 <hci_encrypt_key_refresh_complete+0xac>)
    f754:	e9c2 3606 	strd	r3, r6, [r2, #24]
    f758:	2304      	movs	r3, #4
    f75a:	f842 3f10 	str.w	r3, [r2, #16]!
    f75e:	f00e fb21 	bl	1dda4 <z_log_msg_static_create.constprop.0>
    f762:	46a5      	mov	sp, r4
}
    f764:	46bd      	mov	sp, r7
    f766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (status) {
    f768:	b15d      	cbz	r5, f782 <hci_encrypt_key_refresh_complete+0x56>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
    f76a:	4628      	mov	r0, r5
    f76c:	f7ff ffd6 	bl	f71c <bt_security_err_get>
    f770:	4629      	mov	r1, r5
    f772:	4602      	mov	r2, r0
    f774:	4620      	mov	r0, r4
    f776:	f002 fac5 	bl	11d04 <bt_conn_security_changed>
	bt_conn_unref(conn);
    f77a:	4620      	mov	r0, r4
    f77c:	f00e fe5b 	bl	1e436 <bt_conn_unref>
    f780:	e7f0      	b.n	f764 <hci_encrypt_key_refresh_complete+0x38>
	if (conn->type == BT_CONN_TYPE_LE) {
    f782:	7883      	ldrb	r3, [r0, #2]
    f784:	2b01      	cmp	r3, #1
    f786:	d1f0      	bne.n	f76a <hci_encrypt_key_refresh_complete+0x3e>
		bt_smp_update_keys(conn);
    f788:	f006 fbae 	bl	15ee8 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
    f78c:	4620      	mov	r0, r4
    f78e:	f00e fad9 	bl	1dd44 <update_sec_level>
    f792:	2800      	cmp	r0, #0
    f794:	d1e9      	bne.n	f76a <hci_encrypt_key_refresh_complete+0x3e>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
    f796:	2005      	movs	r0, #5
    f798:	f7ff ffc0 	bl	f71c <bt_security_err_get>
    f79c:	2105      	movs	r1, #5
    f79e:	4602      	mov	r2, r0
    f7a0:	4620      	mov	r0, r4
    f7a2:	f002 faaf 	bl	11d04 <bt_conn_security_changed>
		BT_ERR("Failed to set required security level");
    f7a6:	466d      	mov	r5, sp
    f7a8:	b088      	sub	sp, #32
    f7aa:	466a      	mov	r2, sp
    f7ac:	4b0b      	ldr	r3, [pc, #44]	; (f7dc <hci_encrypt_key_refresh_complete+0xb0>)
    f7ae:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    f7b2:	6153      	str	r3, [r2, #20]
    f7b4:	4b07      	ldr	r3, [pc, #28]	; (f7d4 <hci_encrypt_key_refresh_complete+0xa8>)
    f7b6:	4808      	ldr	r0, [pc, #32]	; (f7d8 <hci_encrypt_key_refresh_complete+0xac>)
    f7b8:	6193      	str	r3, [r2, #24]
    f7ba:	2303      	movs	r3, #3
    f7bc:	f842 3f10 	str.w	r3, [r2, #16]!
    f7c0:	f00e faf0 	bl	1dda4 <z_log_msg_static_create.constprop.0>
		bt_conn_disconnect(conn, status);
    f7c4:	2105      	movs	r1, #5
    f7c6:	46ad      	mov	sp, r5
    f7c8:	4620      	mov	r0, r4
    f7ca:	f00e fe73 	bl	1e4b4 <bt_conn_disconnect>
    f7ce:	e7d4      	b.n	f77a <hci_encrypt_key_refresh_complete+0x4e>
    f7d0:	000243f7 	.word	0x000243f7
    f7d4:	00024d0f 	.word	0x00024d0f
    f7d8:	000227f8 	.word	0x000227f8
    f7dc:	0002471f 	.word	0x0002471f

0000f7e0 <hci_encrypt_change>:
{
    f7e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
    f7e4:	6886      	ldr	r6, [r0, #8]
{
    f7e6:	af00      	add	r7, sp, #0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    f7e8:	f8b6 8001 	ldrh.w	r8, [r6, #1]
	uint8_t status = evt->status;
    f7ec:	7835      	ldrb	r5, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
    f7ee:	4640      	mov	r0, r8
    f7f0:	f002 f8c0 	bl	11974 <bt_conn_lookup_handle>
	if (!conn) {
    f7f4:	4604      	mov	r4, r0
    f7f6:	b998      	cbnz	r0, f820 <hci_encrypt_change+0x40>
		BT_ERR("Unable to look up conn with handle %u", handle);
    f7f8:	466c      	mov	r4, sp
    f7fa:	b088      	sub	sp, #32
    f7fc:	466a      	mov	r2, sp
    f7fe:	4b27      	ldr	r3, [pc, #156]	; (f89c <hci_encrypt_change+0xbc>)
    f800:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    f804:	6153      	str	r3, [r2, #20]
    f806:	4b26      	ldr	r3, [pc, #152]	; (f8a0 <hci_encrypt_change+0xc0>)
    f808:	4826      	ldr	r0, [pc, #152]	; (f8a4 <hci_encrypt_change+0xc4>)
    f80a:	e9c2 3806 	strd	r3, r8, [r2, #24]
    f80e:	2304      	movs	r3, #4
    f810:	f842 3f10 	str.w	r3, [r2, #16]!
    f814:	f00e fac6 	bl	1dda4 <z_log_msg_static_create.constprop.0>
    f818:	46a5      	mov	sp, r4
}
    f81a:	46bd      	mov	sp, r7
    f81c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (status) {
    f820:	b15d      	cbz	r5, f83a <hci_encrypt_change+0x5a>
		bt_conn_security_changed(conn, status,
    f822:	4628      	mov	r0, r5
    f824:	f7ff ff7a 	bl	f71c <bt_security_err_get>
    f828:	4629      	mov	r1, r5
    f82a:	4602      	mov	r2, r0
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
    f82c:	4620      	mov	r0, r4
    f82e:	f002 fa69 	bl	11d04 <bt_conn_security_changed>
	bt_conn_unref(conn);
    f832:	4620      	mov	r0, r4
    f834:	f00e fdff 	bl	1e436 <bt_conn_unref>
    f838:	e7ef      	b.n	f81a <hci_encrypt_change+0x3a>
	if (conn->type == BT_CONN_TYPE_LE) {
    f83a:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
    f83c:	78f3      	ldrb	r3, [r6, #3]
	if (conn->type == BT_CONN_TYPE_LE) {
    f83e:	2a01      	cmp	r2, #1
	conn->encrypt = evt->encrypt;
    f840:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
    f842:	d005      	beq.n	f850 <hci_encrypt_change+0x70>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
    f844:	2000      	movs	r0, #0
    f846:	f7ff ff69 	bl	f71c <bt_security_err_get>
    f84a:	2100      	movs	r1, #0
    f84c:	4602      	mov	r2, r0
    f84e:	e7ed      	b.n	f82c <hci_encrypt_change+0x4c>
		if (conn->encrypt) {
    f850:	b10b      	cbz	r3, f856 <hci_encrypt_change+0x76>
			bt_smp_update_keys(conn);
    f852:	f006 fb49 	bl	15ee8 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
    f856:	4620      	mov	r0, r4
    f858:	f00e fa74 	bl	1dd44 <update_sec_level>
    f85c:	2800      	cmp	r0, #0
    f85e:	d1f1      	bne.n	f844 <hci_encrypt_change+0x64>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
    f860:	2005      	movs	r0, #5
    f862:	f7ff ff5b 	bl	f71c <bt_security_err_get>
    f866:	2105      	movs	r1, #5
    f868:	4602      	mov	r2, r0
    f86a:	4620      	mov	r0, r4
    f86c:	f002 fa4a 	bl	11d04 <bt_conn_security_changed>
		BT_ERR("Failed to set required security level");
    f870:	466d      	mov	r5, sp
    f872:	b088      	sub	sp, #32
    f874:	466a      	mov	r2, sp
    f876:	4b0c      	ldr	r3, [pc, #48]	; (f8a8 <hci_encrypt_change+0xc8>)
    f878:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    f87c:	6153      	str	r3, [r2, #20]
    f87e:	4b08      	ldr	r3, [pc, #32]	; (f8a0 <hci_encrypt_change+0xc0>)
    f880:	4808      	ldr	r0, [pc, #32]	; (f8a4 <hci_encrypt_change+0xc4>)
    f882:	6193      	str	r3, [r2, #24]
    f884:	2303      	movs	r3, #3
    f886:	f842 3f10 	str.w	r3, [r2, #16]!
    f88a:	f00e fa8b 	bl	1dda4 <z_log_msg_static_create.constprop.0>
		bt_conn_disconnect(conn, status);
    f88e:	2105      	movs	r1, #5
    f890:	46ad      	mov	sp, r5
    f892:	4620      	mov	r0, r4
    f894:	f00e fe0e 	bl	1e4b4 <bt_conn_disconnect>
    f898:	e7cb      	b.n	f832 <hci_encrypt_change+0x52>
    f89a:	bf00      	nop
    f89c:	000243f7 	.word	0x000243f7
    f8a0:	00024cfc 	.word	0x00024cfc
    f8a4:	000227f8 	.word	0x000227f8
    f8a8:	0002471f 	.word	0x0002471f

0000f8ac <bt_send>:
	return bt_dev.drv->send(buf);
    f8ac:	4b02      	ldr	r3, [pc, #8]	; (f8b8 <bt_send+0xc>)
    f8ae:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
    f8b2:	695b      	ldr	r3, [r3, #20]
    f8b4:	4718      	bx	r3
    f8b6:	bf00      	nop
    f8b8:	20008000 	.word	0x20008000

0000f8bc <bt_hci_cmd_send>:
{
    f8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f8be:	4605      	mov	r5, r0
	if (!buf) {
    f8c0:	460c      	mov	r4, r1
{
    f8c2:	af00      	add	r7, sp, #0
	if (!buf) {
    f8c4:	b919      	cbnz	r1, f8ce <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    f8c6:	f7ff fc57 	bl	f178 <bt_hci_cmd_create>
		if (!buf) {
    f8ca:	4604      	mov	r4, r0
    f8cc:	b328      	cbz	r0, f91a <bt_hci_cmd_send+0x5e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    f8ce:	f640 4335 	movw	r3, #3125	; 0xc35
    f8d2:	429d      	cmp	r5, r3
    f8d4:	d11b      	bne.n	f90e <bt_hci_cmd_send+0x52>
		err = bt_send(buf);
    f8d6:	4620      	mov	r0, r4
    f8d8:	f7ff ffe8 	bl	f8ac <bt_send>
		if (err) {
    f8dc:	4605      	mov	r5, r0
    f8de:	b198      	cbz	r0, f908 <bt_hci_cmd_send+0x4c>
			BT_ERR("Unable to send to driver (err %d)", err);
    f8e0:	466e      	mov	r6, sp
    f8e2:	b088      	sub	sp, #32
    f8e4:	466a      	mov	r2, sp
    f8e6:	4b0e      	ldr	r3, [pc, #56]	; (f920 <bt_hci_cmd_send+0x64>)
    f8e8:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    f8ec:	6153      	str	r3, [r2, #20]
    f8ee:	4b0d      	ldr	r3, [pc, #52]	; (f924 <bt_hci_cmd_send+0x68>)
    f8f0:	e9c2 3006 	strd	r3, r0, [r2, #24]
    f8f4:	2304      	movs	r3, #4
    f8f6:	480c      	ldr	r0, [pc, #48]	; (f928 <bt_hci_cmd_send+0x6c>)
    f8f8:	f842 3f10 	str.w	r3, [r2, #16]!
    f8fc:	f00e fa52 	bl	1dda4 <z_log_msg_static_create.constprop.0>
			net_buf_unref(buf);
    f900:	4620      	mov	r0, r4
    f902:	46b5      	mov	sp, r6
    f904:	f006 fd1a 	bl	1633c <net_buf_unref>
}
    f908:	4628      	mov	r0, r5
    f90a:	46bd      	mov	sp, r7
    f90c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    f90e:	4621      	mov	r1, r4
    f910:	4806      	ldr	r0, [pc, #24]	; (f92c <bt_hci_cmd_send+0x70>)
    f912:	f010 fa88 	bl	1fe26 <net_buf_put>
	return 0;
    f916:	2500      	movs	r5, #0
    f918:	e7f6      	b.n	f908 <bt_hci_cmd_send+0x4c>
			return -ENOBUFS;
    f91a:	f06f 0568 	mvn.w	r5, #104	; 0x68
    f91e:	e7f3      	b.n	f908 <bt_hci_cmd_send+0x4c>
    f920:	00024749 	.word	0x00024749
    f924:	00024e2f 	.word	0x00024e2f
    f928:	000227f8 	.word	0x000227f8
    f92c:	20008144 	.word	0x20008144

0000f930 <bt_hci_host_num_completed_packets>:
{
    f930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f934:	4604      	mov	r4, r0
	uint16_t handle = acl(buf)->handle;
    f936:	8ac5      	ldrh	r5, [r0, #22]
	uint8_t index = acl(buf)->index;
    f938:	7d46      	ldrb	r6, [r0, #21]
{
    f93a:	af00      	add	r7, sp, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    f93c:	7980      	ldrb	r0, [r0, #6]
    f93e:	f006 fc3b 	bl	161b8 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
    f942:	4621      	mov	r1, r4
    f944:	f011 fc14 	bl	21170 <k_queue_prepend>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    f948:	4b30      	ldr	r3, [pc, #192]	; (fa0c <bt_hci_host_num_completed_packets+0xdc>)
    f94a:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
    f94e:	069b      	lsls	r3, r3, #26
    f950:	d52d      	bpl.n	f9ae <bt_hci_host_num_completed_packets+0x7e>
	conn = bt_conn_lookup_index(index);
    f952:	4630      	mov	r0, r6
    f954:	f002 fbd0 	bl	120f8 <bt_conn_lookup_index>
	if (!conn) {
    f958:	4604      	mov	r4, r0
    f95a:	b988      	cbnz	r0, f980 <bt_hci_host_num_completed_packets+0x50>
		BT_WARN("Unable to look up conn with index 0x%02x", index);
    f95c:	466c      	mov	r4, sp
    f95e:	b088      	sub	sp, #32
    f960:	466a      	mov	r2, sp
    f962:	4b2b      	ldr	r3, [pc, #172]	; (fa10 <bt_hci_host_num_completed_packets+0xe0>)
    f964:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    f968:	6153      	str	r3, [r2, #20]
    f96a:	4b2a      	ldr	r3, [pc, #168]	; (fa14 <bt_hci_host_num_completed_packets+0xe4>)
    f96c:	e9c2 3606 	strd	r3, r6, [r2, #24]
    f970:	2304      	movs	r3, #4
    f972:	f842 3f10 	str.w	r3, [r2, #16]!
		BT_ERR("Unable to allocate new HCI command");
    f976:	4828      	ldr	r0, [pc, #160]	; (fa18 <bt_hci_host_num_completed_packets+0xe8>)
    f978:	f00e fa14 	bl	1dda4 <z_log_msg_static_create.constprop.0>
    f97c:	46a5      	mov	sp, r4
		return;
    f97e:	e016      	b.n	f9ae <bt_hci_host_num_completed_packets+0x7e>
	if (conn->state != BT_CONN_CONNECTED &&
    f980:	7b43      	ldrb	r3, [r0, #13]
    f982:	3b07      	subs	r3, #7
    f984:	2b01      	cmp	r3, #1
    f986:	d915      	bls.n	f9b4 <bt_hci_host_num_completed_packets+0x84>
		BT_WARN("Not reporting packet for non-connected conn");
    f988:	466d      	mov	r5, sp
    f98a:	b088      	sub	sp, #32
    f98c:	466a      	mov	r2, sp
    f98e:	4b23      	ldr	r3, [pc, #140]	; (fa1c <bt_hci_host_num_completed_packets+0xec>)
    f990:	4821      	ldr	r0, [pc, #132]	; (fa18 <bt_hci_host_num_completed_packets+0xe8>)
    f992:	6153      	str	r3, [r2, #20]
    f994:	4b1f      	ldr	r3, [pc, #124]	; (fa14 <bt_hci_host_num_completed_packets+0xe4>)
    f996:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    f99a:	6193      	str	r3, [r2, #24]
    f99c:	2303      	movs	r3, #3
    f99e:	f842 3f10 	str.w	r3, [r2, #16]!
    f9a2:	f00e f9ff 	bl	1dda4 <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
    f9a6:	4620      	mov	r0, r4
    f9a8:	46ad      	mov	sp, r5
    f9aa:	f00e fd44 	bl	1e436 <bt_conn_unref>
}
    f9ae:	46bd      	mov	sp, r7
    f9b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_conn_unref(conn);
    f9b4:	f00e fd3f 	bl	1e436 <bt_conn_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS,
    f9b8:	2105      	movs	r1, #5
    f9ba:	f640 4035 	movw	r0, #3125	; 0xc35
    f9be:	f7ff fbdb 	bl	f178 <bt_hci_cmd_create>
	if (!buf) {
    f9c2:	4604      	mov	r4, r0
    f9c4:	b960      	cbnz	r0, f9e0 <bt_hci_host_num_completed_packets+0xb0>
		BT_ERR("Unable to allocate new HCI command");
    f9c6:	466c      	mov	r4, sp
    f9c8:	b088      	sub	sp, #32
    f9ca:	466a      	mov	r2, sp
    f9cc:	4b14      	ldr	r3, [pc, #80]	; (fa20 <bt_hci_host_num_completed_packets+0xf0>)
    f9ce:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    f9d2:	6153      	str	r3, [r2, #20]
    f9d4:	4b0f      	ldr	r3, [pc, #60]	; (fa14 <bt_hci_host_num_completed_packets+0xe4>)
    f9d6:	6193      	str	r3, [r2, #24]
    f9d8:	2303      	movs	r3, #3
    f9da:	f842 3f10 	str.w	r3, [r2, #16]!
    f9de:	e7ca      	b.n	f976 <bt_hci_host_num_completed_packets+0x46>
	return net_buf_simple_add(&buf->b, len);
    f9e0:	f100 0808 	add.w	r8, r0, #8
    f9e4:	2101      	movs	r1, #1
    f9e6:	4640      	mov	r0, r8
    f9e8:	f010 fa50 	bl	1fe8c <net_buf_simple_add>
	cp->num_handles = sys_cpu_to_le16(1);
    f9ec:	2601      	movs	r6, #1
    f9ee:	2104      	movs	r1, #4
    f9f0:	7006      	strb	r6, [r0, #0]
    f9f2:	4640      	mov	r0, r8
    f9f4:	f010 fa4a 	bl	1fe8c <net_buf_simple_add>
	hc->count  = sys_cpu_to_le16(1);
    f9f8:	2300      	movs	r3, #0
	hc->handle = sys_cpu_to_le16(handle);
    f9fa:	8005      	strh	r5, [r0, #0]
	hc->count  = sys_cpu_to_le16(1);
    f9fc:	7086      	strb	r6, [r0, #2]
    f9fe:	70c3      	strb	r3, [r0, #3]
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
    fa00:	4621      	mov	r1, r4
    fa02:	f640 4035 	movw	r0, #3125	; 0xc35
    fa06:	f7ff ff59 	bl	f8bc <bt_hci_cmd_send>
    fa0a:	e7d0      	b.n	f9ae <bt_hci_host_num_completed_packets+0x7e>
    fa0c:	20008000 	.word	0x20008000
    fa10:	0002476f 	.word	0x0002476f
    fa14:	00024e3f 	.word	0x00024e3f
    fa18:	000227f8 	.word	0x000227f8
    fa1c:	0002479c 	.word	0x0002479c
    fa20:	000247cc 	.word	0x000247cc

0000fa24 <le_ltk_request>:
{
    fa24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fa28:	b086      	sub	sp, #24
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
    fa2a:	6885      	ldr	r5, [r0, #8]
{
    fa2c:	af02      	add	r7, sp, #8
	handle = sys_le16_to_cpu(evt->handle);
    fa2e:	882e      	ldrh	r6, [r5, #0]
    fa30:	fa1f f886 	uxth.w	r8, r6
	conn = bt_conn_lookup_handle(handle);
    fa34:	4640      	mov	r0, r8
    fa36:	f001 ff9d 	bl	11974 <bt_conn_lookup_handle>
	if (!conn) {
    fa3a:	4604      	mov	r4, r0
    fa3c:	b9a0      	cbnz	r0, fa68 <le_ltk_request+0x44>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    fa3e:	466c      	mov	r4, sp
    fa40:	b088      	sub	sp, #32
    fa42:	aa02      	add	r2, sp, #8
    fa44:	4b33      	ldr	r3, [pc, #204]	; (fb14 <le_ltk_request+0xf0>)
    fa46:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    fa4a:	6153      	str	r3, [r2, #20]
    fa4c:	4b32      	ldr	r3, [pc, #200]	; (fb18 <le_ltk_request+0xf4>)
    fa4e:	4833      	ldr	r0, [pc, #204]	; (fb1c <le_ltk_request+0xf8>)
    fa50:	e9c2 3806 	strd	r3, r8, [r2, #24]
    fa54:	2304      	movs	r3, #4
    fa56:	f842 3f10 	str.w	r3, [r2, #16]!
    fa5a:	f00e f9a3 	bl	1dda4 <z_log_msg_static_create.constprop.0>
    fa5e:	46a5      	mov	sp, r4
}
    fa60:	3710      	adds	r7, #16
    fa62:	46bd      	mov	sp, r7
    fa64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
    fa68:	f8d5 2002 	ldr.w	r2, [r5, #2]
    fa6c:	f8d5 3006 	ldr.w	r3, [r5, #6]
    fa70:	9701      	str	r7, [sp, #4]
    fa72:	8969      	ldrh	r1, [r5, #10]
    fa74:	9100      	str	r1, [sp, #0]
    fa76:	f010 f828 	bl	1faca <bt_smp_request_ltk>
    fa7a:	b398      	cbz	r0, fae4 <le_ltk_request+0xc0>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    fa7c:	2112      	movs	r1, #18
    fa7e:	f242 001a 	movw	r0, #8218	; 0x201a
    fa82:	f7ff fb79 	bl	f178 <bt_hci_cmd_create>
	if (!buf) {
    fa86:	4605      	mov	r5, r0
    fa88:	b998      	cbnz	r0, fab2 <le_ltk_request+0x8e>
		BT_ERR("Out of command buffers");
    fa8a:	466d      	mov	r5, sp
    fa8c:	b088      	sub	sp, #32
    fa8e:	aa02      	add	r2, sp, #8
    fa90:	4b23      	ldr	r3, [pc, #140]	; (fb20 <le_ltk_request+0xfc>)
    fa92:	6153      	str	r3, [r2, #20]
    fa94:	4b23      	ldr	r3, [pc, #140]	; (fb24 <le_ltk_request+0x100>)
		BT_ERR("Out of command buffers");
    fa96:	6193      	str	r3, [r2, #24]
    fa98:	2303      	movs	r3, #3
    fa9a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    fa9e:	481f      	ldr	r0, [pc, #124]	; (fb1c <le_ltk_request+0xf8>)
    faa0:	f842 3f10 	str.w	r3, [r2, #16]!
    faa4:	f00e f97e 	bl	1dda4 <z_log_msg_static_create.constprop.0>
    faa8:	46ad      	mov	sp, r5
	bt_conn_unref(conn);
    faaa:	4620      	mov	r0, r4
    faac:	f00e fcc3 	bl	1e436 <bt_conn_unref>
    fab0:	e7d6      	b.n	fa60 <le_ltk_request+0x3c>
    fab2:	2112      	movs	r1, #18
    fab4:	3008      	adds	r0, #8
    fab6:	f010 f9e9 	bl	1fe8c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
    faba:	4603      	mov	r3, r0
    fabc:	463a      	mov	r2, r7
    fabe:	f823 6b02 	strh.w	r6, [r3], #2
    fac2:	f107 0c10 	add.w	ip, r7, #16
    fac6:	4616      	mov	r6, r2
    fac8:	ce03      	ldmia	r6!, {r0, r1}
    faca:	4566      	cmp	r6, ip
    facc:	6018      	str	r0, [r3, #0]
    face:	6059      	str	r1, [r3, #4]
    fad0:	4632      	mov	r2, r6
    fad2:	f103 0308 	add.w	r3, r3, #8
    fad6:	d1f6      	bne.n	fac6 <le_ltk_request+0xa2>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    fad8:	4629      	mov	r1, r5
    fada:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    fade:	f7ff feed 	bl	f8bc <bt_hci_cmd_send>
    fae2:	e7e2      	b.n	faaa <le_ltk_request+0x86>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    fae4:	2102      	movs	r1, #2
    fae6:	f242 001b 	movw	r0, #8219	; 0x201b
    faea:	f7ff fb45 	bl	f178 <bt_hci_cmd_create>
	if (!buf) {
    faee:	4605      	mov	r5, r0
    faf0:	b930      	cbnz	r0, fb00 <le_ltk_request+0xdc>
		BT_ERR("Out of command buffers");
    faf2:	466d      	mov	r5, sp
    faf4:	b088      	sub	sp, #32
    faf6:	aa02      	add	r2, sp, #8
    faf8:	4b09      	ldr	r3, [pc, #36]	; (fb20 <le_ltk_request+0xfc>)
    fafa:	6153      	str	r3, [r2, #20]
    fafc:	4b0a      	ldr	r3, [pc, #40]	; (fb28 <le_ltk_request+0x104>)
    fafe:	e7ca      	b.n	fa96 <le_ltk_request+0x72>
    fb00:	2102      	movs	r1, #2
    fb02:	3008      	adds	r0, #8
    fb04:	f010 f9c2 	bl	1fe8c <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    fb08:	4629      	mov	r1, r5
	cp->handle = sys_cpu_to_le16(handle);
    fb0a:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    fb0c:	f242 001b 	movw	r0, #8219	; 0x201b
    fb10:	e7e5      	b.n	fade <le_ltk_request+0xba>
    fb12:	bf00      	nop
    fb14:	00024362 	.word	0x00024362
    fb18:	00024cd8 	.word	0x00024cd8
    fb1c:	000227f8 	.word	0x000227f8
    fb20:	000247f3 	.word	0x000247f3
    fb24:	00024ccb 	.word	0x00024ccb
    fb28:	00024cba 	.word	0x00024cba

0000fb2c <le_conn_param_req>:
{
    fb2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    fb2e:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    fb30:	6883      	ldr	r3, [r0, #8]
{
    fb32:	af00      	add	r7, sp, #0
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    fb34:	78d9      	ldrb	r1, [r3, #3]
    fb36:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    fb38:	881e      	ldrh	r6, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    fb3a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    fb3e:	803a      	strh	r2, [r7, #0]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    fb40:	7959      	ldrb	r1, [r3, #5]
    fb42:	791a      	ldrb	r2, [r3, #4]
	handle = sys_le16_to_cpu(evt->handle);
    fb44:	b2b4      	uxth	r4, r6
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    fb46:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    fb4a:	807a      	strh	r2, [r7, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    fb4c:	799a      	ldrb	r2, [r3, #6]
    fb4e:	79d9      	ldrb	r1, [r3, #7]
	conn = bt_conn_lookup_handle(handle);
    fb50:	4620      	mov	r0, r4
	param.latency = sys_le16_to_cpu(evt->latency);
    fb52:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    fb56:	80ba      	strh	r2, [r7, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    fb58:	7a1a      	ldrb	r2, [r3, #8]
    fb5a:	7a5b      	ldrb	r3, [r3, #9]
    fb5c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    fb60:	80fb      	strh	r3, [r7, #6]
	conn = bt_conn_lookup_handle(handle);
    fb62:	f001 ff07 	bl	11974 <bt_conn_lookup_handle>
	if (!conn) {
    fb66:	4605      	mov	r5, r0
    fb68:	b9b8      	cbnz	r0, fb9a <le_conn_param_req+0x6e>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    fb6a:	466d      	mov	r5, sp
    fb6c:	b088      	sub	sp, #32
    fb6e:	466a      	mov	r2, sp
    fb70:	4b1f      	ldr	r3, [pc, #124]	; (fbf0 <le_conn_param_req+0xc4>)
    fb72:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    fb76:	6153      	str	r3, [r2, #20]
    fb78:	4b1e      	ldr	r3, [pc, #120]	; (fbf4 <le_conn_param_req+0xc8>)
    fb7a:	481f      	ldr	r0, [pc, #124]	; (fbf8 <le_conn_param_req+0xcc>)
    fb7c:	e9c2 3406 	strd	r3, r4, [r2, #24]
    fb80:	2304      	movs	r3, #4
    fb82:	f842 3f10 	str.w	r3, [r2, #16]!
    fb86:	f00e f90d 	bl	1dda4 <z_log_msg_static_create.constprop.0>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    fb8a:	2102      	movs	r1, #2
    fb8c:	46ad      	mov	sp, r5
    fb8e:	4620      	mov	r0, r4
    fb90:	f00e f9a8 	bl	1dee4 <le_conn_param_neg_reply>
}
    fb94:	370c      	adds	r7, #12
    fb96:	46bd      	mov	sp, r7
    fb98:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
    fb9a:	4639      	mov	r1, r7
    fb9c:	f002 f84a 	bl	11c34 <le_param_req>
    fba0:	b938      	cbnz	r0, fbb2 <le_conn_param_req+0x86>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    fba2:	211e      	movs	r1, #30
    fba4:	4620      	mov	r0, r4
    fba6:	f00e f99d 	bl	1dee4 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    fbaa:	4628      	mov	r0, r5
    fbac:	f00e fc43 	bl	1e436 <bt_conn_unref>
    fbb0:	e7f0      	b.n	fb94 <le_conn_param_req+0x68>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    fbb2:	210e      	movs	r1, #14
    fbb4:	f242 0020 	movw	r0, #8224	; 0x2020
    fbb8:	f7ff fade 	bl	f178 <bt_hci_cmd_create>
	if (!buf) {
    fbbc:	4604      	mov	r4, r0
    fbbe:	2800      	cmp	r0, #0
    fbc0:	d0f3      	beq.n	fbaa <le_conn_param_req+0x7e>
    fbc2:	210e      	movs	r1, #14
    fbc4:	3008      	adds	r0, #8
    fbc6:	f010 f961 	bl	1fe8c <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
    fbca:	2300      	movs	r3, #0
	cp->handle = sys_cpu_to_le16(handle);
    fbcc:	8006      	strh	r6, [r0, #0]
    fbce:	f8c0 300a 	str.w	r3, [r0, #10]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    fbd2:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    fbd4:	4621      	mov	r1, r4
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    fbd6:	8043      	strh	r3, [r0, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    fbd8:	887b      	ldrh	r3, [r7, #2]
    fbda:	8083      	strh	r3, [r0, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    fbdc:	88bb      	ldrh	r3, [r7, #4]
    fbde:	80c3      	strh	r3, [r0, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    fbe0:	88fb      	ldrh	r3, [r7, #6]
    fbe2:	8103      	strh	r3, [r0, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    fbe4:	f242 0020 	movw	r0, #8224	; 0x2020
    fbe8:	f7ff fe68 	bl	f8bc <bt_hci_cmd_send>
    fbec:	e7dd      	b.n	fbaa <le_conn_param_req+0x7e>
    fbee:	bf00      	nop
    fbf0:	00024362 	.word	0x00024362
    fbf4:	00024c7e 	.word	0x00024c7e
    fbf8:	000227f8 	.word	0x000227f8

0000fbfc <hci_tx_thread>:
{
    fbfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    fc00:	f8df 816c 	ldr.w	r8, [pc, #364]	; fd70 <hci_tx_thread+0x174>
{
    fc04:	b083      	sub	sp, #12
		BT_ASSERT(err == 0);
    fc06:	f8df 916c 	ldr.w	r9, [pc, #364]	; fd74 <hci_tx_thread+0x178>
			ev_count += bt_conn_prepare_events(&events[1]);
    fc0a:	f108 0a14 	add.w	sl, r8, #20
{
    fc0e:	af00      	add	r7, sp, #0
		events[0].state = K_POLL_STATE_NOT_READY;
    fc10:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    fc14:	4650      	mov	r0, sl
		events[0].state = K_POLL_STATE_NOT_READY;
    fc16:	f36f 3394 	bfc	r3, #14, #7
    fc1a:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    fc1e:	f001 fe71 	bl	11904 <bt_conn_prepare_events>
    fc22:	1c45      	adds	r5, r0, #1
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    fc24:	f04f 32ff 	mov.w	r2, #4294967295
    fc28:	f04f 33ff 	mov.w	r3, #4294967295
    fc2c:	4629      	mov	r1, r5
    fc2e:	4850      	ldr	r0, [pc, #320]	; (fd70 <hci_tx_thread+0x174>)
    fc30:	f00a feca 	bl	1a9c8 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    fc34:	b160      	cbz	r0, fc50 <hci_tx_thread+0x54>
    fc36:	f640 13da 	movw	r3, #2522	; 0x9da
    fc3a:	464a      	mov	r2, r9
    fc3c:	494e      	ldr	r1, [pc, #312]	; (fd78 <hci_tx_thread+0x17c>)
    fc3e:	484f      	ldr	r0, [pc, #316]	; (fd7c <hci_tx_thread+0x180>)
    fc40:	f00c fe85 	bl	1c94e <assert_print>
    fc44:	4040      	eors	r0, r0
    fc46:	f380 8811 	msr	BASEPRI, r0
    fc4a:	f04f 0003 	mov.w	r0, #3
    fc4e:	df02      	svc	2
{
    fc50:	4e47      	ldr	r6, [pc, #284]	; (fd70 <hci_tx_thread+0x174>)
	for (; count; ev++, count--) {
    fc52:	b915      	cbnz	r5, fc5a <hci_tx_thread+0x5e>
	z_impl_k_yield();
    fc54:	f00a fb92 	bl	1a37c <z_impl_k_yield>
	while (1) {
    fc58:	e7da      	b.n	fc10 <hci_tx_thread+0x14>
		switch (ev->state) {
    fc5a:	68f3      	ldr	r3, [r6, #12]
    fc5c:	f3c3 3386 	ubfx	r3, r3, #14, #7
    fc60:	2b01      	cmp	r3, #1
    fc62:	d969      	bls.n	fd38 <hci_tx_thread+0x13c>
    fc64:	2b04      	cmp	r3, #4
    fc66:	d171      	bne.n	fd4c <hci_tx_thread+0x150>
			if (ev->tag == BT_EVENT_CMD_TX) {
    fc68:	7b33      	ldrb	r3, [r6, #12]
    fc6a:	2b00      	cmp	r3, #0
    fc6c:	d167      	bne.n	fd3e <hci_tx_thread+0x142>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    fc6e:	2200      	movs	r2, #0
    fc70:	2300      	movs	r3, #0
    fc72:	4843      	ldr	r0, [pc, #268]	; (fd80 <hci_tx_thread+0x184>)
    fc74:	f010 f86f 	bl	1fd56 <net_buf_get>
	BT_ASSERT(buf);
    fc78:	4604      	mov	r4, r0
    fc7a:	b960      	cbnz	r0, fc96 <hci_tx_thread+0x9a>
    fc7c:	f640 1373 	movw	r3, #2419	; 0x973
    fc80:	464a      	mov	r2, r9
    fc82:	4940      	ldr	r1, [pc, #256]	; (fd84 <hci_tx_thread+0x188>)
    fc84:	483d      	ldr	r0, [pc, #244]	; (fd7c <hci_tx_thread+0x180>)
    fc86:	f00c fe62 	bl	1c94e <assert_print>
    fc8a:	4040      	eors	r0, r0
    fc8c:	f380 8811 	msr	BASEPRI, r0
    fc90:	f04f 0003 	mov.w	r0, #3
    fc94:	df02      	svc	2
	if (bt_dev.sent_cmd) {
    fc96:	f8df b0f0 	ldr.w	fp, [pc, #240]	; fd88 <hci_tx_thread+0x18c>
	return z_impl_k_sem_take(sem, timeout);
    fc9a:	f04f 32ff 	mov.w	r2, #4294967295
    fc9e:	f04f 33ff 	mov.w	r3, #4294967295
    fca2:	483a      	ldr	r0, [pc, #232]	; (fd8c <hci_tx_thread+0x190>)
    fca4:	f009 feee 	bl	19a84 <z_impl_k_sem_take>
    fca8:	f8db 2138 	ldr.w	r2, [fp, #312]	; 0x138
    fcac:	b1c2      	cbz	r2, fce0 <hci_tx_thread+0xe4>
		BT_ERR("Uncleared pending sent_cmd");
    fcae:	f8c7 d004 	str.w	sp, [r7, #4]
    fcb2:	b088      	sub	sp, #32
    fcb4:	466a      	mov	r2, sp
    fcb6:	4936      	ldr	r1, [pc, #216]	; (fd90 <hci_tx_thread+0x194>)
    fcb8:	4836      	ldr	r0, [pc, #216]	; (fd94 <hci_tx_thread+0x198>)
    fcba:	6151      	str	r1, [r2, #20]
    fcbc:	4936      	ldr	r1, [pc, #216]	; (fd98 <hci_tx_thread+0x19c>)
    fcbe:	6191      	str	r1, [r2, #24]
    fcc0:	2103      	movs	r1, #3
    fcc2:	f842 1f10 	str.w	r1, [r2, #16]!
    fcc6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    fcca:	f00e f86b 	bl	1dda4 <z_log_msg_static_create.constprop.0>
    fcce:	f8d7 d004 	ldr.w	sp, [r7, #4]
		net_buf_unref(bt_dev.sent_cmd);
    fcd2:	f8db 0138 	ldr.w	r0, [fp, #312]	; 0x138
    fcd6:	f006 fb31 	bl	1633c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    fcda:	2200      	movs	r2, #0
    fcdc:	f8cb 2138 	str.w	r2, [fp, #312]	; 0x138
	bt_dev.sent_cmd = net_buf_ref(buf);
    fce0:	4620      	mov	r0, r4
    fce2:	f010 f8ad 	bl	1fe40 <net_buf_ref>
    fce6:	f8cb 0138 	str.w	r0, [fp, #312]	; 0x138
	err = bt_send(buf);
    fcea:	4620      	mov	r0, r4
    fcec:	f7ff fdde 	bl	f8ac <bt_send>
	if (err) {
    fcf0:	b310      	cbz	r0, fd38 <hci_tx_thread+0x13c>
		BT_ERR("Unable to send to driver (err %d)", err);
    fcf2:	46eb      	mov	fp, sp
    fcf4:	b088      	sub	sp, #32
    fcf6:	466a      	mov	r2, sp
    fcf8:	4b28      	ldr	r3, [pc, #160]	; (fd9c <hci_tx_thread+0x1a0>)
    fcfa:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    fcfe:	6153      	str	r3, [r2, #20]
    fd00:	4b25      	ldr	r3, [pc, #148]	; (fd98 <hci_tx_thread+0x19c>)
    fd02:	e9c2 3006 	strd	r3, r0, [r2, #24]
    fd06:	2304      	movs	r3, #4
    fd08:	4822      	ldr	r0, [pc, #136]	; (fd94 <hci_tx_thread+0x198>)
    fd0a:	f842 3f10 	str.w	r3, [r2, #16]!
    fd0e:	f00e f849 	bl	1dda4 <z_log_msg_static_create.constprop.0>
    fd12:	46dd      	mov	sp, fp
	z_impl_k_sem_give(sem);
    fd14:	481d      	ldr	r0, [pc, #116]	; (fd8c <hci_tx_thread+0x190>)
    fd16:	f009 fe8f 	bl	19a38 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    fd1a:	4620      	mov	r0, r4
    fd1c:	f006 fa54 	bl	161c8 <net_buf_id>
    fd20:	220c      	movs	r2, #12
    fd22:	4b1f      	ldr	r3, [pc, #124]	; (fda0 <hci_tx_thread+0x1a4>)
    fd24:	211f      	movs	r1, #31
    fd26:	fb02 3000 	mla	r0, r2, r0, r3
    fd2a:	4622      	mov	r2, r4
    fd2c:	8840      	ldrh	r0, [r0, #2]
    fd2e:	f7ff f8b1 	bl	ee94 <hci_cmd_done>
		net_buf_unref(buf);
    fd32:	4620      	mov	r0, r4
    fd34:	f006 fb02 	bl	1633c <net_buf_unref>
	for (; count; ev++, count--) {
    fd38:	3614      	adds	r6, #20
    fd3a:	3d01      	subs	r5, #1
    fd3c:	e789      	b.n	fc52 <hci_tx_thread+0x56>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    fd3e:	2b01      	cmp	r3, #1
    fd40:	d1fa      	bne.n	fd38 <hci_tx_thread+0x13c>
					conn = CONTAINER_OF(ev->fifo,
    fd42:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
    fd44:	3838      	subs	r0, #56	; 0x38
    fd46:	f002 f955 	bl	11ff4 <bt_conn_process_tx>
    fd4a:	e7f5      	b.n	fd38 <hci_tx_thread+0x13c>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    fd4c:	466c      	mov	r4, sp
    fd4e:	b088      	sub	sp, #32
    fd50:	466a      	mov	r2, sp
    fd52:	4914      	ldr	r1, [pc, #80]	; (fda4 <hci_tx_thread+0x1a8>)
    fd54:	480f      	ldr	r0, [pc, #60]	; (fd94 <hci_tx_thread+0x198>)
    fd56:	6151      	str	r1, [r2, #20]
    fd58:	4913      	ldr	r1, [pc, #76]	; (fda8 <hci_tx_thread+0x1ac>)
		switch (ev->state) {
    fd5a:	e9c2 1306 	strd	r1, r3, [r2, #24]
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    fd5e:	2304      	movs	r3, #4
    fd60:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    fd64:	f842 3f10 	str.w	r3, [r2, #16]!
    fd68:	f00e f81c 	bl	1dda4 <z_log_msg_static_create.constprop.0>
    fd6c:	46a5      	mov	sp, r4
    fd6e:	e7e3      	b.n	fd38 <hci_tx_thread+0x13c>
    fd70:	20008394 	.word	0x20008394
    fd74:	00024447 	.word	0x00024447
    fd78:	000245f0 	.word	0x000245f0
    fd7c:	00024494 	.word	0x00024494
    fd80:	20008144 	.word	0x20008144
    fd84:	0002430c 	.word	0x0002430c
    fd88:	20008000 	.word	0x20008000
    fd8c:	20008120 	.word	0x20008120
    fd90:	0002480e 	.word	0x0002480e
    fd94:	000227f8 	.word	0x000227f8
    fd98:	00024b14 	.word	0x00024b14
    fd9c:	00024749 	.word	0x00024749
    fda0:	20009d44 	.word	0x20009d44
    fda4:	0002482d 	.word	0x0002482d
    fda8:	00024b1d 	.word	0x00024b1d

0000fdac <hci_event_prio>:
{
    fdac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fdb0:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
    fdb2:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
    fdb6:	4630      	mov	r0, r6
    fdb8:	f010 f8a8 	bl	1ff0c <net_buf_simple_headroom>
	state->len = buf->len;
    fdbc:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    fdc0:	4605      	mov	r5, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
    fdc2:	f1b8 0f01 	cmp.w	r8, #1
    fdc6:	d80c      	bhi.n	fde2 <hci_event_prio+0x36>
    fdc8:	f640 5377 	movw	r3, #3447	; 0xd77
    fdcc:	4a1b      	ldr	r2, [pc, #108]	; (fe3c <hci_event_prio+0x90>)
    fdce:	491c      	ldr	r1, [pc, #112]	; (fe40 <hci_event_prio+0x94>)
    fdd0:	481c      	ldr	r0, [pc, #112]	; (fe44 <hci_event_prio+0x98>)
    fdd2:	f00c fdbc 	bl	1c94e <assert_print>
    fdd6:	4040      	eors	r0, r0
    fdd8:	f380 8811 	msr	BASEPRI, r0
    fddc:	f04f 0003 	mov.w	r0, #3
    fde0:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    fde2:	4630      	mov	r0, r6
    fde4:	2102      	movs	r1, #2
    fde6:	f010 f881 	bl	1feec <net_buf_simple_pull_mem>
    fdea:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    fdec:	7800      	ldrb	r0, [r0, #0]
    fdee:	f00d ff97 	bl	1dd20 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    fdf2:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    fdf4:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    fdf6:	d40c      	bmi.n	fe12 <hci_event_prio+0x66>
    fdf8:	f640 537b 	movw	r3, #3451	; 0xd7b
    fdfc:	4a0f      	ldr	r2, [pc, #60]	; (fe3c <hci_event_prio+0x90>)
    fdfe:	4912      	ldr	r1, [pc, #72]	; (fe48 <hci_event_prio+0x9c>)
    fe00:	4810      	ldr	r0, [pc, #64]	; (fe44 <hci_event_prio+0x98>)
    fe02:	f00c fda4 	bl	1c94e <assert_print>
    fe06:	4040      	eors	r0, r0
    fe08:	f380 8811 	msr	BASEPRI, r0
    fe0c:	f04f 0003 	mov.w	r0, #3
    fe10:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    fe12:	2305      	movs	r3, #5
    fe14:	4621      	mov	r1, r4
    fe16:	4a0d      	ldr	r2, [pc, #52]	; (fe4c <hci_event_prio+0xa0>)
    fe18:	7838      	ldrb	r0, [r7, #0]
    fe1a:	f7fe feed 	bl	ebf8 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    fe1e:	07b3      	lsls	r3, r6, #30
    fe20:	d507      	bpl.n	fe32 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
    fe22:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
    fe24:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    fe28:	fa13 f585 	uxtah	r5, r3, r5
    fe2c:	60a5      	str	r5, [r4, #8]
}
    fe2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    fe32:	4620      	mov	r0, r4
}
    fe34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    fe38:	f006 ba80 	b.w	1633c <net_buf_unref>
    fe3c:	00024447 	.word	0x00024447
    fe40:	0002447b 	.word	0x0002447b
    fe44:	00024494 	.word	0x00024494
    fe48:	00024852 	.word	0x00024852
    fe4c:	00022e90 	.word	0x00022e90

0000fe50 <bt_recv>:
{
    fe50:	b5b0      	push	{r4, r5, r7, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    fe52:	7d03      	ldrb	r3, [r0, #20]
    fe54:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    fe56:	2b01      	cmp	r3, #1
{
    fe58:	af00      	add	r7, sp, #0
	switch (bt_buf_get_type(buf)) {
    fe5a:	d006      	beq.n	fe6a <bt_recv+0x1a>
    fe5c:	2b03      	cmp	r3, #3
    fe5e:	d112      	bne.n	fe86 <bt_recv+0x36>
			rx_queue_put(buf);
    fe60:	f7fe fdde 	bl	ea20 <rx_queue_put>
		return 0;
    fe64:	2000      	movs	r0, #0
}
    fe66:	46bd      	mov	sp, r7
    fe68:	bdb0      	pop	{r4, r5, r7, pc}
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
    fe6a:	6883      	ldr	r3, [r0, #8]
    fe6c:	7818      	ldrb	r0, [r3, #0]
    fe6e:	f00d ff57 	bl	1dd20 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
    fe72:	07c2      	lsls	r2, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
    fe74:	4605      	mov	r5, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
    fe76:	d502      	bpl.n	fe7e <bt_recv+0x2e>
			hci_event_prio(buf);
    fe78:	4620      	mov	r0, r4
    fe7a:	f7ff ff97 	bl	fdac <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    fe7e:	07ab      	lsls	r3, r5, #30
    fe80:	d5f0      	bpl.n	fe64 <bt_recv+0x14>
			rx_queue_put(buf);
    fe82:	4620      	mov	r0, r4
    fe84:	e7ec      	b.n	fe60 <bt_recv+0x10>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    fe86:	466d      	mov	r5, sp
    fe88:	b088      	sub	sp, #32
    fe8a:	466a      	mov	r2, sp
    fe8c:	4909      	ldr	r1, [pc, #36]	; (feb4 <bt_recv+0x64>)
    fe8e:	480a      	ldr	r0, [pc, #40]	; (feb8 <bt_recv+0x68>)
    fe90:	6151      	str	r1, [r2, #20]
    fe92:	490a      	ldr	r1, [pc, #40]	; (febc <bt_recv+0x6c>)
	switch (bt_buf_get_type(buf)) {
    fe94:	e9c2 1306 	strd	r1, r3, [r2, #24]
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    fe98:	2304      	movs	r3, #4
    fe9a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    fe9e:	f842 3f10 	str.w	r3, [r2, #16]!
    fea2:	f00d ff7f 	bl	1dda4 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
    fea6:	4620      	mov	r0, r4
    fea8:	46ad      	mov	sp, r5
    feaa:	f006 fa47 	bl	1633c <net_buf_unref>
		return -EINVAL;
    feae:	f06f 0015 	mvn.w	r0, #21
    feb2:	e7d8      	b.n	fe66 <bt_recv+0x16>
    feb4:	0002486b 	.word	0x0002486b
    feb8:	000227f8 	.word	0x000227f8
    febc:	00024d68 	.word	0x00024d68

0000fec0 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    fec0:	4a08      	ldr	r2, [pc, #32]	; (fee4 <bt_hci_driver_register+0x24>)
{
    fec2:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    fec4:	f8d2 015c 	ldr.w	r0, [r2, #348]	; 0x15c
    fec8:	b930      	cbnz	r0, fed8 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    feca:	68d9      	ldr	r1, [r3, #12]
    fecc:	b139      	cbz	r1, fede <bt_hci_driver_register+0x1e>
    fece:	6959      	ldr	r1, [r3, #20]
    fed0:	b129      	cbz	r1, fede <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    fed2:	f8c2 315c 	str.w	r3, [r2, #348]	; 0x15c
	return 0;
    fed6:	4770      	bx	lr
		return -EALREADY;
    fed8:	f06f 0077 	mvn.w	r0, #119	; 0x77
    fedc:	4770      	bx	lr
		return -EINVAL;
    fede:	f06f 0015 	mvn.w	r0, #21
}
    fee2:	4770      	bx	lr
    fee4:	20008000 	.word	0x20008000

0000fee8 <bt_finalize_init>:
{
    fee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    feec:	4d48      	ldr	r5, [pc, #288]	; (10010 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x10>)
{
    feee:	b083      	sub	sp, #12
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    fef0:	2104      	movs	r1, #4
    fef2:	af00      	add	r7, sp, #0
    fef4:	4847      	ldr	r0, [pc, #284]	; (10014 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x14>)
    fef6:	f00d ff3e 	bl	1dd76 <atomic_or>
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    fefa:	4c47      	ldr	r4, [pc, #284]	; (10018 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x18>)
    fefc:	79ea      	ldrb	r2, [r5, #7]
    fefe:	4b47      	ldr	r3, [pc, #284]	; (1001c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x1c>)
    ff00:	4628      	mov	r0, r5
    ff02:	2a01      	cmp	r2, #1
    ff04:	bf88      	it	hi
    ff06:	461c      	movhi	r4, r3
    ff08:	46e8      	mov	r8, sp
    ff0a:	f7fe fbbd 	bl	e688 <bt_addr_le_str>
    ff0e:	b08a      	sub	sp, #40	; 0x28
    ff10:	466b      	mov	r3, sp
    ff12:	4943      	ldr	r1, [pc, #268]	; (10020 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x20>)
    ff14:	4e43      	ldr	r6, [pc, #268]	; (10024 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x24>)
    ff16:	6159      	str	r1, [r3, #20]
    ff18:	4943      	ldr	r1, [pc, #268]	; (10028 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x28>)
    ff1a:	e9c3 6406 	strd	r6, r4, [r3, #24]
    ff1e:	6079      	str	r1, [r7, #4]
    ff20:	6218      	str	r0, [r3, #32]
    ff22:	f103 0210 	add.w	r2, r3, #16
    ff26:	1d38      	adds	r0, r7, #4
    ff28:	f103 0123 	add.w	r1, r3, #35	; 0x23
    ff2c:	f103 0427 	add.w	r4, r3, #39	; 0x27
    ff30:	f810 cb01 	ldrb.w	ip, [r0], #1
    ff34:	f801 cf01 	strb.w	ip, [r1, #1]!
    ff38:	42a1      	cmp	r1, r4
    ff3a:	d1f9      	bne.n	ff30 <bt_finalize_init+0x48>
	for (i = 1; i < bt_dev.id_count; i++) {
    ff3c:	2401      	movs	r4, #1
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    ff3e:	493b      	ldr	r1, [pc, #236]	; (1002c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x2c>)
    ff40:	483b      	ldr	r0, [pc, #236]	; (10030 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x30>)
    ff42:	6119      	str	r1, [r3, #16]
    ff44:	f44f 5143 	mov.w	r1, #12480	; 0x30c0
    ff48:	f00d ff2c 	bl	1dda4 <z_log_msg_static_create.constprop.0>
		BT_INFO("Identity[%d]: %s",
    ff4c:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 10034 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x34>
    ff50:	46c5      	mov	sp, r8
    ff52:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 10030 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x30>
    ff56:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 10010 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x10>
	for (i = 1; i < bt_dev.id_count; i++) {
    ff5a:	79ea      	ldrb	r2, [r5, #7]
    ff5c:	f108 0807 	add.w	r8, r8, #7
    ff60:	4294      	cmp	r4, r2
    ff62:	db3d      	blt.n	ffe0 <bt_finalize_init+0xf8>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    ff64:	f895 8068 	ldrb.w	r8, [r5, #104]	; 0x68
    ff68:	46ea      	mov	sl, sp
    ff6a:	4640      	mov	r0, r8
    ff6c:	f7fe fc84 	bl	e878 <ver_str>
    ff70:	b08c      	sub	sp, #48	; 0x30
    ff72:	466c      	mov	r4, sp
    ff74:	f8b5 206a 	ldrh.w	r2, [r5, #106]	; 0x6a
    ff78:	f8b5 306e 	ldrh.w	r3, [r5, #110]	; 0x6e
    ff7c:	f240 3901 	movw	r9, #769	; 0x301
    ff80:	e9c4 0807 	strd	r0, r8, [r4, #28]
    ff84:	46a0      	mov	r8, r4
    ff86:	e9c4 2309 	strd	r2, r3, [r4, #36]	; 0x24
    ff8a:	492b      	ldr	r1, [pc, #172]	; (10038 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x38>)
    ff8c:	4b2b      	ldr	r3, [pc, #172]	; (1003c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x3c>)
    ff8e:	e9c4 1605 	strd	r1, r6, [r4, #20]
    ff92:	f8a4 902c 	strh.w	r9, [r4, #44]	; 0x2c
    ff96:	f848 3f10 	str.w	r3, [r8, #16]!
    ff9a:	4642      	mov	r2, r8
    ff9c:	f44f 5173 	mov.w	r1, #15552	; 0x3cc0
    ffa0:	4823      	ldr	r0, [pc, #140]	; (10030 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x30>)
    ffa2:	f00d feff 	bl	1dda4 <z_log_msg_static_create.constprop.0>
    ffa6:	46d5      	mov	sp, sl
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    ffa8:	f895 a069 	ldrb.w	sl, [r5, #105]	; 0x69
    ffac:	4650      	mov	r0, sl
    ffae:	f7fe fc63 	bl	e878 <ver_str>
    ffb2:	46a5      	mov	sp, r4
    ffb4:	f8b5 306c 	ldrh.w	r3, [r5, #108]	; 0x6c
    ffb8:	4a21      	ldr	r2, [pc, #132]	; (10040 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x40>)
    ffba:	6263      	str	r3, [r4, #36]	; 0x24
    ffbc:	4b21      	ldr	r3, [pc, #132]	; (10044 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x44>)
    ffbe:	e9c4 2605 	strd	r2, r6, [r4, #20]
    ffc2:	e9c4 0a07 	strd	r0, sl, [r4, #28]
    ffc6:	4642      	mov	r2, r8
    ffc8:	f44f 5153 	mov.w	r1, #13504	; 0x34c0
    ffcc:	4818      	ldr	r0, [pc, #96]	; (10030 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x30>)
    ffce:	f8a4 9028 	strh.w	r9, [r4, #40]	; 0x28
    ffd2:	6123      	str	r3, [r4, #16]
    ffd4:	f00d fee6 	bl	1dda4 <z_log_msg_static_create.constprop.0>
}
    ffd8:	370c      	adds	r7, #12
    ffda:	46bd      	mov	sp, r7
    ffdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		BT_INFO("Identity[%d]: %s",
    ffe0:	4640      	mov	r0, r8
    ffe2:	f7fe fb51 	bl	e688 <bt_addr_le_str>
    ffe6:	46eb      	mov	fp, sp
    ffe8:	b08a      	sub	sp, #40	; 0x28
    ffea:	466a      	mov	r2, sp
    ffec:	f240 4102 	movw	r1, #1026	; 0x402
    fff0:	4b15      	ldr	r3, [pc, #84]	; (10048 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x48>)
    fff2:	e9c2 4007 	strd	r4, r0, [r2, #28]
    fff6:	8491      	strh	r1, [r2, #36]	; 0x24
    fff8:	e9c2 3605 	strd	r3, r6, [r2, #20]
    fffc:	f44f 5133 	mov.w	r1, #11456	; 0x2cc0
   10000:	4650      	mov	r0, sl
   10002:	f842 9f10 	str.w	r9, [r2, #16]!
   10006:	f00d fecd 	bl	1dda4 <z_log_msg_static_create.constprop.0>
	for (i = 1; i < bt_dev.id_count; i++) {
   1000a:	3401      	adds	r4, #1
   1000c:	46dd      	mov	sp, fp
   1000e:	e7a4      	b.n	ff5a <bt_finalize_init+0x72>
   10010:	20008000 	.word	0x20008000
   10014:	200080cc 	.word	0x200080cc
   10018:	00023606 	.word	0x00023606
   1001c:	00024883 	.word	0x00024883
   10020:	00024887 	.word	0x00024887
   10024:	00024c25 	.word	0x00024c25
   10028:	04020301 	.word	0x04020301
   1002c:	02000005 	.word	0x02000005
   10030:	000227f8 	.word	0x000227f8
   10034:	01000005 	.word	0x01000005
   10038:	000248af 	.word	0x000248af
   1003c:	01000007 	.word	0x01000007
   10040:	000248f1 	.word	0x000248f1
   10044:	01000006 	.word	0x01000006
   10048:	0002489a 	.word	0x0002489a

0001004c <init_work>:
{
   1004c:	b510      	push	{r4, lr}
	err = bt_init();
   1004e:	f7f9 f987 	bl	9360 <bt_init>
	if (ready_cb) {
   10052:	4b03      	ldr	r3, [pc, #12]	; (10060 <init_work+0x14>)
   10054:	681b      	ldr	r3, [r3, #0]
   10056:	b113      	cbz	r3, 1005e <init_work+0x12>
}
   10058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   1005c:	4718      	bx	r3
}
   1005e:	bd10      	pop	{r4, pc}
   10060:	20009dbc 	.word	0x20009dbc

00010064 <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
   10064:	b5f0      	push	{r4, r5, r6, r7, lr}
   10066:	b089      	sub	sp, #36	; 0x24
	int err;

	if (!bt_dev.drv) {
   10068:	4d3e      	ldr	r5, [pc, #248]	; (10164 <bt_enable+0x100>)
{
   1006a:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   1006c:	f8d5 315c 	ldr.w	r3, [r5, #348]	; 0x15c
{
   10070:	af08      	add	r7, sp, #32
	if (!bt_dev.drv) {
   10072:	b9ab      	cbnz	r3, 100a0 <bt_enable+0x3c>
		BT_ERR("No HCI driver registered");
   10074:	466c      	mov	r4, sp
   10076:	b088      	sub	sp, #32
   10078:	4622      	mov	r2, r4
   1007a:	4b3b      	ldr	r3, [pc, #236]	; (10168 <bt_enable+0x104>)
   1007c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   10080:	6163      	str	r3, [r4, #20]
   10082:	4b3a      	ldr	r3, [pc, #232]	; (1016c <bt_enable+0x108>)
   10084:	483a      	ldr	r0, [pc, #232]	; (10170 <bt_enable+0x10c>)
   10086:	61a3      	str	r3, [r4, #24]
   10088:	2303      	movs	r3, #3
   1008a:	f842 3f10 	str.w	r3, [r2, #16]!
   1008e:	f00d fe89 	bl	1dda4 <z_log_msg_static_create.constprop.0>
   10092:	46a5      	mov	sp, r4
		return -ENODEV;
   10094:	f06f 0412 	mvn.w	r4, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   10098:	4620      	mov	r0, r4
   1009a:	3704      	adds	r7, #4
   1009c:	46bd      	mov	sp, r7
   1009e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   100a0:	f06f 0102 	mvn.w	r1, #2
   100a4:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   100a8:	f00d fe7f 	bl	1ddaa <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   100ac:	2101      	movs	r1, #1
   100ae:	f00d fe62 	bl	1dd76 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   100b2:	ea10 0401 	ands.w	r4, r0, r1
   100b6:	d152      	bne.n	1015e <bt_enable+0xfa>
	ready_cb = cb;
   100b8:	4b2e      	ldr	r3, [pc, #184]	; (10174 <bt_enable+0x110>)
   100ba:	601e      	str	r6, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   100bc:	460a      	mov	r2, r1
   100be:	f505 7090 	add.w	r0, r5, #288	; 0x120
   100c2:	f011 f89e 	bl	21202 <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
   100c6:	f505 70a2 	add.w	r0, r5, #324	; 0x144
   100ca:	f011 f83a 	bl	21142 <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   100ce:	2200      	movs	r2, #0
   100d0:	2300      	movs	r3, #0
   100d2:	e9cd 2306 	strd	r2, r3, [sp, #24]
   100d6:	f06f 0308 	mvn.w	r3, #8
   100da:	f44f 6280 	mov.w	r2, #1024	; 0x400
   100de:	e9cd 4302 	strd	r4, r3, [sp, #8]
   100e2:	e9cd 4400 	strd	r4, r4, [sp]
   100e6:	4b24      	ldr	r3, [pc, #144]	; (10178 <bt_enable+0x114>)
   100e8:	4924      	ldr	r1, [pc, #144]	; (1017c <bt_enable+0x118>)
   100ea:	9404      	str	r4, [sp, #16]
   100ec:	4824      	ldr	r0, [pc, #144]	; (10180 <bt_enable+0x11c>)
   100ee:	f009 fb15 	bl	1971c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   100f2:	4924      	ldr	r1, [pc, #144]	; (10184 <bt_enable+0x120>)
   100f4:	4822      	ldr	r0, [pc, #136]	; (10180 <bt_enable+0x11c>)
   100f6:	f010 ff95 	bl	21024 <z_impl_k_thread_name_set>
	k_work_queue_init(&bt_workq);
   100fa:	4823      	ldr	r0, [pc, #140]	; (10188 <bt_enable+0x124>)
   100fc:	f011 f941 	bl	21382 <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
   10100:	f06f 0307 	mvn.w	r3, #7
   10104:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
   10108:	4920      	ldr	r1, [pc, #128]	; (1018c <bt_enable+0x128>)
   1010a:	481f      	ldr	r0, [pc, #124]	; (10188 <bt_enable+0x124>)
   1010c:	9400      	str	r4, [sp, #0]
   1010e:	f009 fe15 	bl	19d3c <k_work_queue_start>
   10112:	491f      	ldr	r1, [pc, #124]	; (10190 <bt_enable+0x12c>)
   10114:	481c      	ldr	r0, [pc, #112]	; (10188 <bt_enable+0x124>)
   10116:	f010 ff85 	bl	21024 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   1011a:	f8d5 315c 	ldr.w	r3, [r5, #348]	; 0x15c
   1011e:	68db      	ldr	r3, [r3, #12]
   10120:	4798      	blx	r3
	if (err) {
   10122:	4604      	mov	r4, r0
   10124:	b188      	cbz	r0, 1014a <bt_enable+0xe6>
		BT_ERR("HCI driver open failed (%d)", err);
   10126:	466d      	mov	r5, sp
   10128:	b088      	sub	sp, #32
   1012a:	462a      	mov	r2, r5
   1012c:	4b19      	ldr	r3, [pc, #100]	; (10194 <bt_enable+0x130>)
   1012e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   10132:	616b      	str	r3, [r5, #20]
   10134:	4b0d      	ldr	r3, [pc, #52]	; (1016c <bt_enable+0x108>)
   10136:	e9c5 3006 	strd	r3, r0, [r5, #24]
   1013a:	2304      	movs	r3, #4
   1013c:	480c      	ldr	r0, [pc, #48]	; (10170 <bt_enable+0x10c>)
   1013e:	f842 3f10 	str.w	r3, [r2, #16]!
   10142:	f00d fe2f 	bl	1dda4 <z_log_msg_static_create.constprop.0>
   10146:	46ad      	mov	sp, r5
		return err;
   10148:	e7a6      	b.n	10098 <bt_enable+0x34>
	if (!cb) {
   1014a:	b91e      	cbnz	r6, 10154 <bt_enable+0xf0>
		return bt_init();
   1014c:	f7f9 f908 	bl	9360 <bt_init>
   10150:	4604      	mov	r4, r0
   10152:	e7a1      	b.n	10098 <bt_enable+0x34>
	k_work_submit(&bt_dev.init);
   10154:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   10158:	f009 fdea 	bl	19d30 <k_work_submit>
	return 0;
   1015c:	e79c      	b.n	10098 <bt_enable+0x34>
		return -EALREADY;
   1015e:	f06f 0477 	mvn.w	r4, #119	; 0x77
   10162:	e799      	b.n	10098 <bt_enable+0x34>
   10164:	20008000 	.word	0x20008000
   10168:	00024a89 	.word	0x00024a89
   1016c:	00024b2c 	.word	0x00024b2c
   10170:	000227f8 	.word	0x000227f8
   10174:	20009dbc 	.word	0x20009dbc
   10178:	0000fbfd 	.word	0x0000fbfd
   1017c:	2000bab0 	.word	0x2000bab0
   10180:	20009530 	.word	0x20009530
   10184:	00024aa6 	.word	0x00024aa6
   10188:	200095b8 	.word	0x200095b8
   1018c:	2000beb0 	.word	0x2000beb0
   10190:	00024aac 	.word	0x00024aac
   10194:	00024ab2 	.word	0x00024ab2

00010198 <bt_is_ready>:
   10198:	4b02      	ldr	r3, [pc, #8]	; (101a4 <bt_is_ready+0xc>)
   1019a:	e8d3 0faf 	lda	r0, [r3]
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   1019e:	f3c0 0080 	ubfx	r0, r0, #2, #1
   101a2:	4770      	bx	lr
   101a4:	200080cc 	.word	0x200080cc

000101a8 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   101a8:	4800      	ldr	r0, [pc, #0]	; (101ac <bt_get_name+0x4>)
   101aa:	4770      	bx	lr
   101ac:	00024ad2 	.word	0x00024ad2

000101b0 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   101b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   101b2:	4606      	mov	r6, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   101b4:	2500      	movs	r5, #0
   101b6:	4f09      	ldr	r7, [pc, #36]	; (101dc <id_find+0x2c>)
   101b8:	79fb      	ldrb	r3, [r7, #7]
   101ba:	b2ec      	uxtb	r4, r5
   101bc:	42a3      	cmp	r3, r4
   101be:	d802      	bhi.n	101c6 <id_find+0x16>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   101c0:	f06f 0001 	mvn.w	r0, #1
   101c4:	e009      	b.n	101da <id_find+0x2a>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
   101c6:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   101ca:	4630      	mov	r0, r6
   101cc:	4439      	add	r1, r7
   101ce:	f00d feb0 	bl	1df32 <bt_addr_le_eq>
   101d2:	3501      	adds	r5, #1
   101d4:	2800      	cmp	r0, #0
   101d6:	d0ef      	beq.n	101b8 <id_find+0x8>
   101d8:	4620      	mov	r0, r4
}
   101da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   101dc:	20008000 	.word	0x20008000

000101e0 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   101e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   101e2:	4604      	mov	r4, r0
{
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   101e4:	460d      	mov	r5, r1
   101e6:	b171      	cbz	r1, 10206 <id_create.constprop.0+0x26>
   101e8:	4628      	mov	r0, r5
   101ea:	4912      	ldr	r1, [pc, #72]	; (10234 <id_create.constprop.0+0x54>)
   101ec:	f00d fea1 	bl	1df32 <bt_addr_le_eq>
   101f0:	b948      	cbnz	r0, 10206 <id_create.constprop.0+0x26>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   101f2:	4629      	mov	r1, r5
   101f4:	4810      	ldr	r0, [pc, #64]	; (10238 <id_create.constprop.0+0x58>)
   101f6:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   101fa:	4420      	add	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   101fc:	f00d fea6 	bl	1df4c <bt_addr_le_copy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
   10200:	2000      	movs	r0, #0
}
   10202:	b003      	add	sp, #12
   10204:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   10206:	4668      	mov	r0, sp
   10208:	f00d fd7c 	bl	1dd04 <bt_addr_le_create_static>
			if (err) {
   1020c:	2800      	cmp	r0, #0
   1020e:	d1f8      	bne.n	10202 <id_create.constprop.0+0x22>
		} while (id_find(&new_addr) >= 0);
   10210:	4668      	mov	r0, sp
   10212:	f7ff ffcd 	bl	101b0 <id_find>
   10216:	2800      	cmp	r0, #0
   10218:	daf5      	bge.n	10206 <id_create.constprop.0+0x26>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   1021a:	4b07      	ldr	r3, [pc, #28]	; (10238 <id_create.constprop.0+0x58>)
   1021c:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
   10220:	4669      	mov	r1, sp
   10222:	4418      	add	r0, r3
   10224:	f00d fe92 	bl	1df4c <bt_addr_le_copy>
		if (addr) {
   10228:	2d00      	cmp	r5, #0
   1022a:	d0e9      	beq.n	10200 <id_create.constprop.0+0x20>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   1022c:	4601      	mov	r1, r0
   1022e:	4628      	mov	r0, r5
   10230:	e7e4      	b.n	101fc <id_create.constprop.0+0x1c>
   10232:	bf00      	nop
   10234:	000242c4 	.word	0x000242c4
   10238:	20008000 	.word	0x20008000

0001023c <bt_id_add.part.0>:
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   1023c:	2100      	movs	r1, #0
void bt_id_add(struct bt_keys *keys)
   1023e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10242:	b083      	sub	sp, #12
   10244:	4604      	mov	r4, r0
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   10246:	2206      	movs	r2, #6
   10248:	4608      	mov	r0, r1
void bt_id_add(struct bt_keys *keys)
   1024a:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   1024c:	f001 fdec 	bl	11e28 <bt_conn_lookup_state_le>
	if (conn) {
   10250:	4606      	mov	r6, r0
   10252:	b190      	cbz	r0, 1027a <bt_id_add.part.0+0x3e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   10254:	4b5c      	ldr	r3, [pc, #368]	; (103c8 <bt_id_add.part.0+0x18c>)
   10256:	e8d3 1fef 	ldaex	r1, [r3]
   1025a:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
   1025e:	e8c3 1fe2 	stlex	r2, r1, [r3]
   10262:	2a00      	cmp	r2, #0
   10264:	d1f7      	bne.n	10256 <bt_id_add.part.0+0x1a>
	keys->state |= flag;
   10266:	7a23      	ldrb	r3, [r4, #8]
   10268:	f043 0301 	orr.w	r3, r3, #1
   1026c:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
   1026e:	f00e f8e2 	bl	1e436 <bt_conn_unref>
}
   10272:	370c      	adds	r7, #12
   10274:	46bd      	mov	sp, r7
   10276:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (bt_dev.le.rl_entries) {
   1027a:	4d54      	ldr	r5, [pc, #336]	; (103cc <bt_id_add.part.0+0x190>)
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   1027c:	4601      	mov	r1, r0
   1027e:	4854      	ldr	r0, [pc, #336]	; (103d0 <bt_id_add.part.0+0x194>)
   10280:	f000 fcb8 	bl	10bf4 <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries) {
   10284:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   10288:	b1a3      	cbz	r3, 102b4 <bt_id_add.part.0+0x78>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   1028a:	4630      	mov	r0, r6
   1028c:	f00d fea4 	bl	1dfd8 <addr_res_enable>
		if (err) {
   10290:	b180      	cbz	r0, 102b4 <bt_id_add.part.0+0x78>
			BT_WARN("Failed to disable address resolution");
   10292:	466c      	mov	r4, sp
   10294:	b088      	sub	sp, #32
   10296:	466a      	mov	r2, sp
   10298:	4b4e      	ldr	r3, [pc, #312]	; (103d4 <bt_id_add.part.0+0x198>)
   1029a:	6153      	str	r3, [r2, #20]
   1029c:	4b4e      	ldr	r3, [pc, #312]	; (103d8 <bt_id_add.part.0+0x19c>)
		BT_WARN("Set privacy mode command is not supported");
   1029e:	6193      	str	r3, [r2, #24]
   102a0:	2303      	movs	r3, #3
   102a2:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   102a6:	f842 3f10 	str.w	r3, [r2, #16]!
		BT_ERR("Failed to set privacy mode");
   102aa:	484c      	ldr	r0, [pc, #304]	; (103dc <bt_id_add.part.0+0x1a0>)
   102ac:	f00d fe91 	bl	1dfd2 <z_log_msg_static_create.constprop.0>
   102b0:	46a5      	mov	sp, r4
		goto done;
   102b2:	e02c      	b.n	1030e <bt_id_add.part.0+0xd2>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   102b4:	f895 2119 	ldrb.w	r2, [r5, #281]	; 0x119
   102b8:	f895 3118 	ldrb.w	r3, [r5, #280]	; 0x118
   102bc:	429a      	cmp	r2, r3
   102be:	d138      	bne.n	10332 <bt_id_add.part.0+0xf6>
		BT_WARN("Resolving list size exceeded. Switching to host.");
   102c0:	466e      	mov	r6, sp
   102c2:	b088      	sub	sp, #32
   102c4:	466a      	mov	r2, sp
   102c6:	f04f 0803 	mov.w	r8, #3
   102ca:	4b45      	ldr	r3, [pc, #276]	; (103e0 <bt_id_add.part.0+0x1a4>)
   102cc:	f8df 9108 	ldr.w	r9, [pc, #264]	; 103d8 <bt_id_add.part.0+0x19c>
   102d0:	6153      	str	r3, [r2, #20]
   102d2:	f8c2 9018 	str.w	r9, [r2, #24]
   102d6:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   102da:	4840      	ldr	r0, [pc, #256]	; (103dc <bt_id_add.part.0+0x1a0>)
   102dc:	f842 8f10 	str.w	r8, [r2, #16]!
   102e0:	f00d fe77 	bl	1dfd2 <z_log_msg_static_create.constprop.0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   102e4:	2200      	movs	r2, #0
   102e6:	46b5      	mov	sp, r6
   102e8:	4611      	mov	r1, r2
   102ea:	f242 0029 	movw	r0, #8233	; 0x2029
   102ee:	f7fe ff7d 	bl	f1ec <bt_hci_cmd_send_sync>
		if (err) {
   102f2:	b1a0      	cbz	r0, 1031e <bt_id_add.part.0+0xe2>
			BT_ERR("Failed to clear resolution list");
   102f4:	b088      	sub	sp, #32
   102f6:	466a      	mov	r2, sp
   102f8:	4b3a      	ldr	r3, [pc, #232]	; (103e4 <bt_id_add.part.0+0x1a8>)
   102fa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   102fe:	e9c2 3905 	strd	r3, r9, [r2, #20]
   10302:	4836      	ldr	r0, [pc, #216]	; (103dc <bt_id_add.part.0+0x1a0>)
   10304:	f842 8f10 	str.w	r8, [r2, #16]!
   10308:	f00d fe63 	bl	1dfd2 <z_log_msg_static_create.constprop.0>
   1030c:	46b5      	mov	sp, r6
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   1030e:	2001      	movs	r0, #1
   10310:	f00d fe62 	bl	1dfd8 <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   10314:	2100      	movs	r1, #0
   10316:	4834      	ldr	r0, [pc, #208]	; (103e8 <bt_id_add.part.0+0x1ac>)
   10318:	f000 fc6c 	bl	10bf4 <bt_le_ext_adv_foreach>
   1031c:	e7a9      	b.n	10272 <bt_id_add.part.0+0x36>
		bt_dev.le.rl_entries++;
   1031e:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   10322:	3301      	adds	r3, #1
   10324:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   10328:	7a23      	ldrb	r3, [r4, #8]
   1032a:	f043 0304 	orr.w	r3, r3, #4
   1032e:	7223      	strb	r3, [r4, #8]
		goto done;
   10330:	e7ed      	b.n	1030e <bt_id_add.part.0+0xd2>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   10332:	4622      	mov	r2, r4
   10334:	f104 0801 	add.w	r8, r4, #1
   10338:	4641      	mov	r1, r8
   1033a:	f812 0b2a 	ldrb.w	r0, [r2], #42
   1033e:	f00d fe0c 	bl	1df5a <hci_id_add>
	if (err) {
   10342:	4606      	mov	r6, r0
   10344:	b160      	cbz	r0, 10360 <bt_id_add.part.0+0x124>
		BT_ERR("Failed to add IRK to controller");
   10346:	466c      	mov	r4, sp
   10348:	b088      	sub	sp, #32
   1034a:	466a      	mov	r2, sp
   1034c:	4b27      	ldr	r3, [pc, #156]	; (103ec <bt_id_add.part.0+0x1b0>)
		BT_ERR("Failed to set privacy mode");
   1034e:	6153      	str	r3, [r2, #20]
   10350:	4b21      	ldr	r3, [pc, #132]	; (103d8 <bt_id_add.part.0+0x19c>)
   10352:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   10356:	6193      	str	r3, [r2, #24]
   10358:	2303      	movs	r3, #3
   1035a:	f842 3f10 	str.w	r3, [r2, #16]!
   1035e:	e7a4      	b.n	102aa <bt_id_add.part.0+0x6e>
	bt_dev.le.rl_entries++;
   10360:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   10364:	3301      	adds	r3, #1
   10366:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
	keys->state |= BT_KEYS_ID_ADDED;
   1036a:	7a23      	ldrb	r3, [r4, #8]
   1036c:	f043 0304 	orr.w	r3, r3, #4
   10370:	7223      	strb	r3, [r4, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   10372:	f895 309f 	ldrb.w	r3, [r5, #159]	; 0x9f
   10376:	075b      	lsls	r3, r3, #29
   10378:	d406      	bmi.n	10388 <bt_id_add.part.0+0x14c>
		BT_WARN("Set privacy mode command is not supported");
   1037a:	466c      	mov	r4, sp
   1037c:	b088      	sub	sp, #32
   1037e:	466a      	mov	r2, sp
   10380:	4b1b      	ldr	r3, [pc, #108]	; (103f0 <bt_id_add.part.0+0x1b4>)
   10382:	6153      	str	r3, [r2, #20]
   10384:	4b1b      	ldr	r3, [pc, #108]	; (103f4 <bt_id_add.part.0+0x1b8>)
   10386:	e78a      	b.n	1029e <bt_id_add.part.0+0x62>
	bt_addr_le_copy(&cp.id_addr, addr);
   10388:	4641      	mov	r1, r8
   1038a:	4638      	mov	r0, r7
   1038c:	f00d fdde 	bl	1df4c <bt_addr_le_copy>
	cp.mode = mode;
   10390:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   10392:	2108      	movs	r1, #8
   10394:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
   10398:	71fb      	strb	r3, [r7, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   1039a:	f7fe feed 	bl	f178 <bt_hci_cmd_create>
	if (!buf) {
   1039e:	4604      	mov	r4, r0
   103a0:	b160      	cbz	r0, 103bc <bt_id_add.part.0+0x180>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   103a2:	2208      	movs	r2, #8
   103a4:	4639      	mov	r1, r7
   103a6:	4410      	add	r0, r2
   103a8:	f00f fd76 	bl	1fe98 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   103ac:	4632      	mov	r2, r6
   103ae:	4621      	mov	r1, r4
   103b0:	f242 004e 	movw	r0, #8270	; 0x204e
   103b4:	f7fe ff1a 	bl	f1ec <bt_hci_cmd_send_sync>
	if (err) {
   103b8:	2800      	cmp	r0, #0
   103ba:	d0a8      	beq.n	1030e <bt_id_add.part.0+0xd2>
		BT_ERR("Failed to set privacy mode");
   103bc:	466c      	mov	r4, sp
   103be:	b088      	sub	sp, #32
   103c0:	466a      	mov	r2, sp
   103c2:	4b0d      	ldr	r3, [pc, #52]	; (103f8 <bt_id_add.part.0+0x1bc>)
   103c4:	e7c3      	b.n	1034e <bt_id_add.part.0+0x112>
   103c6:	bf00      	nop
   103c8:	200080cc 	.word	0x200080cc
   103cc:	20008000 	.word	0x20008000
   103d0:	0001e089 	.word	0x0001e089
   103d4:	00024ea8 	.word	0x00024ea8
   103d8:	0002518c 	.word	0x0002518c
   103dc:	00022808 	.word	0x00022808
   103e0:	00024ed1 	.word	0x00024ed1
   103e4:	00024f06 	.word	0x00024f06
   103e8:	0001e009 	.word	0x0001e009
   103ec:	00024f2a 	.word	0x00024f2a
   103f0:	00024f4e 	.word	0x00024f4e
   103f4:	00025178 	.word	0x00025178
   103f8:	00024f7c 	.word	0x00024f7c

000103fc <set_random_address>:
{
   103fc:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   103fe:	2206      	movs	r2, #6
   10400:	4911      	ldr	r1, [pc, #68]	; (10448 <set_random_address+0x4c>)
   10402:	4605      	mov	r5, r0
   10404:	f011 fb33 	bl	21a6e <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   10408:	b1c8      	cbz	r0, 1043e <set_random_address+0x42>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   1040a:	2106      	movs	r1, #6
   1040c:	f242 0005 	movw	r0, #8197	; 0x2005
   10410:	f7fe feb2 	bl	f178 <bt_hci_cmd_create>
	if (!buf) {
   10414:	4604      	mov	r4, r0
   10416:	b1a0      	cbz	r0, 10442 <set_random_address+0x46>
   10418:	2206      	movs	r2, #6
   1041a:	4629      	mov	r1, r5
   1041c:	3008      	adds	r0, #8
   1041e:	f00f fd3b 	bl	1fe98 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   10422:	2200      	movs	r2, #0
   10424:	4621      	mov	r1, r4
   10426:	f242 0005 	movw	r0, #8197	; 0x2005
   1042a:	f7fe fedf 	bl	f1ec <bt_hci_cmd_send_sync>
	if (err) {
   1042e:	b938      	cbnz	r0, 10440 <set_random_address+0x44>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
   10430:	4805      	ldr	r0, [pc, #20]	; (10448 <set_random_address+0x4c>)
   10432:	4629      	mov	r1, r5
   10434:	f00d fd85 	bl	1df42 <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   10438:	2301      	movs	r3, #1
   1043a:	f800 3c01 	strb.w	r3, [r0, #-1]
		return 0;
   1043e:	2000      	movs	r0, #0
}
   10440:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   10442:	f06f 0068 	mvn.w	r0, #104	; 0x68
   10446:	e7fb      	b.n	10440 <set_random_address+0x44>
   10448:	20008061 	.word	0x20008061

0001044c <bt_id_del.part.0>:
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   1044c:	2100      	movs	r1, #0
void bt_id_del(struct bt_keys *keys)
   1044e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   10452:	2206      	movs	r2, #6
void bt_id_del(struct bt_keys *keys)
   10454:	4604      	mov	r4, r0
   10456:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   10458:	4608      	mov	r0, r1
   1045a:	f001 fce5 	bl	11e28 <bt_conn_lookup_state_le>
	if (conn) {
   1045e:	4605      	mov	r5, r0
   10460:	b188      	cbz	r0, 10486 <bt_id_del.part.0+0x3a>
   10462:	4b3d      	ldr	r3, [pc, #244]	; (10558 <bt_id_del.part.0+0x10c>)
   10464:	e8d3 1fef 	ldaex	r1, [r3]
   10468:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
   1046c:	e8c3 1fe2 	stlex	r2, r1, [r3]
   10470:	2a00      	cmp	r2, #0
   10472:	d1f7      	bne.n	10464 <bt_id_del.part.0+0x18>
	keys->state |= flag;
   10474:	7a23      	ldrb	r3, [r4, #8]
   10476:	f043 0302 	orr.w	r3, r3, #2
   1047a:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
   1047c:	f00d ffdb 	bl	1e436 <bt_conn_unref>
}
   10480:	46bd      	mov	sp, r7
   10482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   10486:	4601      	mov	r1, r0
   10488:	4834      	ldr	r0, [pc, #208]	; (1055c <bt_id_del.part.0+0x110>)
   1048a:	f000 fbb3 	bl	10bf4 <bt_le_ext_adv_foreach>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   1048e:	4628      	mov	r0, r5
   10490:	f00d fda2 	bl	1dfd8 <addr_res_enable>
	if (err) {
   10494:	4d32      	ldr	r5, [pc, #200]	; (10560 <bt_id_del.part.0+0x114>)
   10496:	4606      	mov	r6, r0
   10498:	b190      	cbz	r0, 104c0 <bt_id_del.part.0+0x74>
		BT_ERR("Disabling address resolution failed (err %d)", err);
   1049a:	466c      	mov	r4, sp
   1049c:	b088      	sub	sp, #32
   1049e:	466b      	mov	r3, sp
   104a0:	4a30      	ldr	r2, [pc, #192]	; (10564 <bt_id_del.part.0+0x118>)
   104a2:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   104a6:	615a      	str	r2, [r3, #20]
   104a8:	4a2f      	ldr	r2, [pc, #188]	; (10568 <bt_id_del.part.0+0x11c>)
   104aa:	e9c3 2006 	strd	r2, r0, [r3, #24]
   104ae:	461a      	mov	r2, r3
   104b0:	2304      	movs	r3, #4
   104b2:	f842 3f10 	str.w	r3, [r2, #16]!
		BT_ERR("Failed to remove IRK from controller");
   104b6:	482d      	ldr	r0, [pc, #180]	; (1056c <bt_id_del.part.0+0x120>)
   104b8:	f00d fd8b 	bl	1dfd2 <z_log_msg_static_create.constprop.0>
   104bc:	46a5      	mov	sp, r4
		goto done;
   104be:	e011      	b.n	104e4 <bt_id_del.part.0+0x98>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   104c0:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   104c4:	f895 2118 	ldrb.w	r2, [r5, #280]	; 0x118
   104c8:	429a      	cmp	r2, r3
   104ca:	d216      	bcs.n	104fa <bt_id_del.part.0+0xae>
		bt_dev.le.rl_entries--;
   104cc:	3b01      	subs	r3, #1
   104ce:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   104d2:	7a23      	ldrb	r3, [r4, #8]
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   104d4:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
   104d6:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   104da:	2002      	movs	r0, #2
   104dc:	4924      	ldr	r1, [pc, #144]	; (10570 <bt_id_del.part.0+0x124>)
		keys->state &= ~BT_KEYS_ID_ADDED;
   104de:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   104e0:	f005 fde2 	bl	160a8 <bt_keys_foreach_type>
	if (bt_dev.le.rl_entries) {
   104e4:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   104e8:	b113      	cbz	r3, 104f0 <bt_id_del.part.0+0xa4>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   104ea:	2001      	movs	r0, #1
   104ec:	f00d fd74 	bl	1dfd8 <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   104f0:	2100      	movs	r1, #0
   104f2:	4820      	ldr	r0, [pc, #128]	; (10574 <bt_id_del.part.0+0x128>)
   104f4:	f000 fb7e 	bl	10bf4 <bt_le_ext_adv_foreach>
   104f8:	e7c2      	b.n	10480 <bt_id_del.part.0+0x34>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   104fa:	2107      	movs	r1, #7
   104fc:	f242 0028 	movw	r0, #8232	; 0x2028
   10500:	f7fe fe3a 	bl	f178 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
   10504:	f104 0901 	add.w	r9, r4, #1
	if (!buf) {
   10508:	4680      	mov	r8, r0
   1050a:	b960      	cbnz	r0, 10526 <bt_id_del.part.0+0xda>
		BT_ERR("Failed to remove IRK from controller");
   1050c:	466c      	mov	r4, sp
   1050e:	b088      	sub	sp, #32
   10510:	466a      	mov	r2, sp
   10512:	4b19      	ldr	r3, [pc, #100]	; (10578 <bt_id_del.part.0+0x12c>)
   10514:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   10518:	6153      	str	r3, [r2, #20]
   1051a:	4b13      	ldr	r3, [pc, #76]	; (10568 <bt_id_del.part.0+0x11c>)
   1051c:	6193      	str	r3, [r2, #24]
   1051e:	2303      	movs	r3, #3
   10520:	f842 3f10 	str.w	r3, [r2, #16]!
   10524:	e7c7      	b.n	104b6 <bt_id_del.part.0+0x6a>
	return net_buf_simple_add(&buf->b, len);
   10526:	2107      	movs	r1, #7
   10528:	3008      	adds	r0, #8
   1052a:	f00f fcaf 	bl	1fe8c <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   1052e:	4649      	mov	r1, r9
   10530:	f00d fd0c 	bl	1df4c <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   10534:	4632      	mov	r2, r6
   10536:	4641      	mov	r1, r8
   10538:	f242 0028 	movw	r0, #8232	; 0x2028
   1053c:	f7fe fe56 	bl	f1ec <bt_hci_cmd_send_sync>
	if (err) {
   10540:	2800      	cmp	r0, #0
   10542:	d1e3      	bne.n	1050c <bt_id_del.part.0+0xc0>
	bt_dev.le.rl_entries--;
   10544:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   10548:	3b01      	subs	r3, #1
   1054a:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
	keys->state &= ~BT_KEYS_ID_ADDED;
   1054e:	7a23      	ldrb	r3, [r4, #8]
   10550:	f023 0304 	bic.w	r3, r3, #4
   10554:	7223      	strb	r3, [r4, #8]
   10556:	e7c5      	b.n	104e4 <bt_id_del.part.0+0x98>
   10558:	200080cc 	.word	0x200080cc
   1055c:	0001e089 	.word	0x0001e089
   10560:	20008000 	.word	0x20008000
   10564:	00024f9b 	.word	0x00024f9b
   10568:	0002516e 	.word	0x0002516e
   1056c:	00022808 	.word	0x00022808
   10570:	0001dfbd 	.word	0x0001dfbd
   10574:	0001e009 	.word	0x0001e009
   10578:	00024fcc 	.word	0x00024fcc

0001057c <bt_id_pending_keys_update>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1057c:	4b08      	ldr	r3, [pc, #32]	; (105a0 <bt_id_pending_keys_update+0x24>)
   1057e:	e8d3 2fef 	ldaex	r2, [r3]
   10582:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
   10586:	e8c3 1fe0 	stlex	r0, r1, [r3]
   1058a:	2800      	cmp	r0, #0
   1058c:	d1f7      	bne.n	1057e <bt_id_pending_keys_update+0x2>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   1058e:	0413      	lsls	r3, r2, #16
   10590:	d504      	bpl.n	1059c <bt_id_pending_keys_update+0x20>
			bt_keys_foreach_type(BT_KEYS_IRK, pending_id_update, NULL);
   10592:	2200      	movs	r2, #0
   10594:	2002      	movs	r0, #2
   10596:	4903      	ldr	r1, [pc, #12]	; (105a4 <bt_id_pending_keys_update+0x28>)
   10598:	f005 bd86 	b.w	160a8 <bt_keys_foreach_type>
}
   1059c:	4770      	bx	lr
   1059e:	bf00      	nop
   105a0:	200080cc 	.word	0x200080cc
   105a4:	0001e10b 	.word	0x0001e10b

000105a8 <bt_id_find_conflict>:
	struct bt_id_conflict conflict = {
   105a8:	2300      	movs	r3, #0
{
   105aa:	b507      	push	{r0, r1, r2, lr}
	bt_keys_foreach_type(BT_KEYS_IRK, find_rl_conflict, &conflict);
   105ac:	4905      	ldr	r1, [pc, #20]	; (105c4 <bt_id_find_conflict+0x1c>)
	struct bt_id_conflict conflict = {
   105ae:	e9cd 0300 	strd	r0, r3, [sp]
	bt_keys_foreach_type(BT_KEYS_IRK, find_rl_conflict, &conflict);
   105b2:	466a      	mov	r2, sp
   105b4:	2002      	movs	r0, #2
   105b6:	f005 fd77 	bl	160a8 <bt_keys_foreach_type>
}
   105ba:	9801      	ldr	r0, [sp, #4]
   105bc:	b003      	add	sp, #12
   105be:	f85d fb04 	ldr.w	pc, [sp], #4
   105c2:	bf00      	nop
   105c4:	0001e02f 	.word	0x0001e02f

000105c8 <bt_id_add>:
	CHECKIF(keys == NULL) {
   105c8:	4603      	mov	r3, r0
{
   105ca:	b410      	push	{r4}
	CHECKIF(keys == NULL) {
   105cc:	b170      	cbz	r0, 105ec <bt_id_add+0x24>
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   105ce:	490a      	ldr	r1, [pc, #40]	; (105f8 <bt_id_add+0x30>)
   105d0:	f891 4118 	ldrb.w	r4, [r1, #280]	; 0x118
   105d4:	f891 2119 	ldrb.w	r2, [r1, #281]	; 0x119
   105d8:	b10c      	cbz	r4, 105de <bt_id_add+0x16>
   105da:	4294      	cmp	r4, r2
   105dc:	d208      	bcs.n	105f0 <bt_id_add+0x28>
		bt_dev.le.rl_entries++;
   105de:	3201      	adds	r2, #1
   105e0:	f881 2119 	strb.w	r2, [r1, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   105e4:	7a1a      	ldrb	r2, [r3, #8]
   105e6:	f042 0204 	orr.w	r2, r2, #4
   105ea:	721a      	strb	r2, [r3, #8]
}
   105ec:	bc10      	pop	{r4}
   105ee:	4770      	bx	lr
   105f0:	bc10      	pop	{r4}
   105f2:	f7ff be23 	b.w	1023c <bt_id_add.part.0>
   105f6:	bf00      	nop
   105f8:	20008000 	.word	0x20008000

000105fc <bt_id_del>:
	CHECKIF(keys == NULL) {
   105fc:	4603      	mov	r3, r0
{
   105fe:	b410      	push	{r4}
	CHECKIF(keys == NULL) {
   10600:	b198      	cbz	r0, 1062a <bt_id_del+0x2e>
	if (!bt_dev.le.rl_size ||
   10602:	4c0b      	ldr	r4, [pc, #44]	; (10630 <bt_id_del+0x34>)
   10604:	f894 1118 	ldrb.w	r1, [r4, #280]	; 0x118
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   10608:	f894 2119 	ldrb.w	r2, [r4, #281]	; 0x119
	if (!bt_dev.le.rl_size ||
   1060c:	b129      	cbz	r1, 1061a <bt_id_del+0x1e>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   1060e:	3101      	adds	r1, #1
	if (!bt_dev.le.rl_size ||
   10610:	428a      	cmp	r2, r1
   10612:	dc03      	bgt.n	1061c <bt_id_del+0x20>
}
   10614:	bc10      	pop	{r4}
   10616:	f7ff bf19 	b.w	1044c <bt_id_del.part.0>
		if (bt_dev.le.rl_entries > 0) {
   1061a:	b112      	cbz	r2, 10622 <bt_id_del+0x26>
			bt_dev.le.rl_entries--;
   1061c:	3a01      	subs	r2, #1
   1061e:	f884 2119 	strb.w	r2, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   10622:	7a1a      	ldrb	r2, [r3, #8]
   10624:	f022 0204 	bic.w	r2, r2, #4
   10628:	721a      	strb	r2, [r3, #8]
}
   1062a:	bc10      	pop	{r4}
   1062c:	4770      	bx	lr
   1062e:	bf00      	nop
   10630:	20008000 	.word	0x20008000

00010634 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   10634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10636:	460d      	mov	r5, r1
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   10638:	4604      	mov	r4, r0
{
   1063a:	af00      	add	r7, sp, #0
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   1063c:	b920      	cbnz	r0, 10648 <bt_id_create+0x14>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   1063e:	b34d      	cbz	r5, 10694 <bt_id_create+0x60>
			return -EINVAL;
   10640:	f06f 0015 	mvn.w	r0, #21
	} else {
		bt_dev.id_count++;
	}

	return new_id;
}
   10644:	46bd      	mov	sp, r7
   10646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   10648:	4923      	ldr	r1, [pc, #140]	; (106d8 <bt_id_create+0xa4>)
   1064a:	f00d fc72 	bl	1df32 <bt_addr_le_eq>
   1064e:	2800      	cmp	r0, #0
   10650:	d1f5      	bne.n	1063e <bt_id_create+0xa>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   10652:	7823      	ldrb	r3, [r4, #0]
   10654:	2b01      	cmp	r3, #1
   10656:	d104      	bne.n	10662 <bt_id_create+0x2e>
   10658:	79a3      	ldrb	r3, [r4, #6]
   1065a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1065e:	2bc0      	cmp	r3, #192	; 0xc0
   10660:	d010      	beq.n	10684 <bt_id_create+0x50>
			BT_ERR("Only static random identity address supported");
   10662:	466c      	mov	r4, sp
   10664:	b088      	sub	sp, #32
   10666:	466a      	mov	r2, sp
   10668:	4b1c      	ldr	r3, [pc, #112]	; (106dc <bt_id_create+0xa8>)
   1066a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1066e:	6153      	str	r3, [r2, #20]
   10670:	4b1b      	ldr	r3, [pc, #108]	; (106e0 <bt_id_create+0xac>)
   10672:	481c      	ldr	r0, [pc, #112]	; (106e4 <bt_id_create+0xb0>)
   10674:	6193      	str	r3, [r2, #24]
   10676:	2303      	movs	r3, #3
   10678:	f842 3f10 	str.w	r3, [r2, #16]!
   1067c:	f00d fca9 	bl	1dfd2 <z_log_msg_static_create.constprop.0>
   10680:	46a5      	mov	sp, r4
			return -EINVAL;
   10682:	e7dd      	b.n	10640 <bt_id_create+0xc>
		if (id_find(addr) >= 0) {
   10684:	4620      	mov	r0, r4
   10686:	f7ff fd93 	bl	101b0 <id_find>
   1068a:	2800      	cmp	r0, #0
   1068c:	dbd7      	blt.n	1063e <bt_id_create+0xa>
			return -EALREADY;
   1068e:	f06f 0077 	mvn.w	r0, #119	; 0x77
   10692:	e7d7      	b.n	10644 <bt_id_create+0x10>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   10694:	4d14      	ldr	r5, [pc, #80]	; (106e8 <bt_id_create+0xb4>)
   10696:	79eb      	ldrb	r3, [r5, #7]
   10698:	2b01      	cmp	r3, #1
   1069a:	d01a      	beq.n	106d2 <bt_id_create+0x9e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1069c:	f105 03cc 	add.w	r3, r5, #204	; 0xcc
   106a0:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   106a4:	07db      	lsls	r3, r3, #31
   106a6:	d50b      	bpl.n	106c0 <bt_id_create+0x8c>
	new_id = bt_dev.id_count;
   106a8:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
   106aa:	4621      	mov	r1, r4
   106ac:	4630      	mov	r0, r6
   106ae:	f7ff fd97 	bl	101e0 <id_create.constprop.0>
	if (err) {
   106b2:	2800      	cmp	r0, #0
   106b4:	d1c6      	bne.n	10644 <bt_id_create+0x10>
		bt_dev.id_count++;
   106b6:	79eb      	ldrb	r3, [r5, #7]
	new_id = bt_dev.id_count;
   106b8:	4630      	mov	r0, r6
		bt_dev.id_count++;
   106ba:	3301      	adds	r3, #1
   106bc:	71eb      	strb	r3, [r5, #7]
	return new_id;
   106be:	e7c1      	b.n	10644 <bt_id_create+0x10>
		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
   106c0:	2c00      	cmp	r4, #0
   106c2:	d0bd      	beq.n	10640 <bt_id_create+0xc>
   106c4:	4620      	mov	r0, r4
   106c6:	4904      	ldr	r1, [pc, #16]	; (106d8 <bt_id_create+0xa4>)
   106c8:	f00d fc33 	bl	1df32 <bt_addr_le_eq>
   106cc:	2800      	cmp	r0, #0
   106ce:	d0eb      	beq.n	106a8 <bt_id_create+0x74>
   106d0:	e7b6      	b.n	10640 <bt_id_create+0xc>
		return -ENOMEM;
   106d2:	f06f 000b 	mvn.w	r0, #11
   106d6:	e7b5      	b.n	10644 <bt_id_create+0x10>
   106d8:	000242c4 	.word	0x000242c4
   106dc:	00024ff5 	.word	0x00024ff5
   106e0:	00025161 	.word	0x00025161
   106e4:	00022808 	.word	0x00022808
   106e8:	20008000 	.word	0x20008000

000106ec <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   106ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   106ee:	b083      	sub	sp, #12
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
   106f0:	4604      	mov	r4, r0
{
   106f2:	af00      	add	r7, sp, #0
	CHECKIF(addr == NULL) {
   106f4:	b998      	cbnz	r0, 1071e <bt_id_read_public_addr+0x32>
		BT_WARN("Invalid input parameters");
   106f6:	466c      	mov	r4, sp
   106f8:	b088      	sub	sp, #32
   106fa:	466a      	mov	r2, sp
   106fc:	4b1d      	ldr	r3, [pc, #116]	; (10774 <bt_id_read_public_addr+0x88>)
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
	if (err) {
		BT_WARN("Failed to read public address");
   106fe:	6153      	str	r3, [r2, #20]
   10700:	4b1d      	ldr	r3, [pc, #116]	; (10778 <bt_id_read_public_addr+0x8c>)
   10702:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   10706:	6193      	str	r3, [r2, #24]
   10708:	2303      	movs	r3, #3
   1070a:	481c      	ldr	r0, [pc, #112]	; (1077c <bt_id_read_public_addr+0x90>)
   1070c:	f842 3f10 	str.w	r3, [r2, #16]!
   10710:	f00d fc5f 	bl	1dfd2 <z_log_msg_static_create.constprop.0>
   10714:	46a5      	mov	sp, r4
		return 0U;
   10716:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   10718:	370c      	adds	r7, #12
   1071a:	46bd      	mov	sp, r7
   1071c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   1071e:	2100      	movs	r1, #0
   10720:	f241 0009 	movw	r0, #4105	; 0x1009
   10724:	1d3a      	adds	r2, r7, #4
   10726:	f7fe fd61 	bl	f1ec <bt_hci_cmd_send_sync>
	if (err) {
   1072a:	4606      	mov	r6, r0
   1072c:	b120      	cbz	r0, 10738 <bt_id_read_public_addr+0x4c>
		BT_WARN("Failed to read public address");
   1072e:	466c      	mov	r4, sp
   10730:	b088      	sub	sp, #32
   10732:	466a      	mov	r2, sp
   10734:	4b12      	ldr	r3, [pc, #72]	; (10780 <bt_id_read_public_addr+0x94>)
   10736:	e7e2      	b.n	106fe <bt_id_read_public_addr+0x12>
	rp = (void *)rsp->data;
   10738:	687b      	ldr	r3, [r7, #4]
   1073a:	2206      	movs	r2, #6
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   1073c:	689d      	ldr	r5, [r3, #8]
   1073e:	4911      	ldr	r1, [pc, #68]	; (10784 <bt_id_read_public_addr+0x98>)
   10740:	3501      	adds	r5, #1
   10742:	4628      	mov	r0, r5
   10744:	f011 f993 	bl	21a6e <memcmp>
   10748:	b918      	cbnz	r0, 10752 <bt_id_read_public_addr+0x66>
		net_buf_unref(rsp);
   1074a:	6878      	ldr	r0, [r7, #4]
   1074c:	f005 fdf6 	bl	1633c <net_buf_unref>
		return 0U;
   10750:	e7e1      	b.n	10716 <bt_id_read_public_addr+0x2a>
   10752:	2206      	movs	r2, #6
   10754:	4628      	mov	r0, r5
   10756:	490c      	ldr	r1, [pc, #48]	; (10788 <bt_id_read_public_addr+0x9c>)
   10758:	f011 f989 	bl	21a6e <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   1075c:	2800      	cmp	r0, #0
   1075e:	d0f4      	beq.n	1074a <bt_id_read_public_addr+0x5e>
	bt_addr_copy(&addr->a, &rp->bdaddr);
   10760:	4629      	mov	r1, r5
   10762:	1c60      	adds	r0, r4, #1
   10764:	f00d fbed 	bl	1df42 <bt_addr_copy>
	net_buf_unref(rsp);
   10768:	6878      	ldr	r0, [r7, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   1076a:	7026      	strb	r6, [r4, #0]
	net_buf_unref(rsp);
   1076c:	f005 fde6 	bl	1633c <net_buf_unref>
	return 1U;
   10770:	2001      	movs	r0, #1
   10772:	e7d1      	b.n	10718 <bt_id_read_public_addr+0x2c>
   10774:	00025027 	.word	0x00025027
   10778:	0002514a 	.word	0x0002514a
   1077c:	00022808 	.word	0x00022808
   10780:	00025044 	.word	0x00025044
   10784:	000242d1 	.word	0x000242d1
   10788:	000242cb 	.word	0x000242cb

0001078c <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   1078c:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   1078e:	4668      	mov	r0, sp
   10790:	f7ff ffac 	bl	106ec <bt_id_read_public_addr>
   10794:	4b04      	ldr	r3, [pc, #16]	; (107a8 <bt_setup_public_id_addr+0x1c>)
   10796:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   10798:	b118      	cbz	r0, 107a2 <bt_setup_public_id_addr+0x16>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
   1079a:	4669      	mov	r1, sp
   1079c:	2000      	movs	r0, #0
   1079e:	f7ff fd1f 	bl	101e0 <id_create.constprop.0>
}
   107a2:	b003      	add	sp, #12
   107a4:	f85d fb04 	ldr.w	pc, [sp], #4
   107a8:	20008000 	.word	0x20008000

000107ac <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   107ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   107b0:	b082      	sub	sp, #8
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   107b2:	4b2d      	ldr	r3, [pc, #180]	; (10868 <bt_read_static_addr+0xbc>)
{
   107b4:	4605      	mov	r5, r0
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   107b6:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
{
   107ba:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   107bc:	07db      	lsls	r3, r3, #31
{
   107be:	af00      	add	r7, sp, #0
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   107c0:	d415      	bmi.n	107ee <bt_read_static_addr+0x42>
		BT_WARN("Read Static Addresses command not available");
   107c2:	466c      	mov	r4, sp
   107c4:	b088      	sub	sp, #32
   107c6:	466a      	mov	r2, sp
   107c8:	4b28      	ldr	r3, [pc, #160]	; (1086c <bt_read_static_addr+0xc0>)
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
	if (err) {
		BT_WARN("Failed to read static addresses");
   107ca:	6153      	str	r3, [r2, #20]
   107cc:	4b28      	ldr	r3, [pc, #160]	; (10870 <bt_read_static_addr+0xc4>)
   107ce:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   107d2:	6193      	str	r3, [r2, #24]
   107d4:	2303      	movs	r3, #3
   107d6:	4827      	ldr	r0, [pc, #156]	; (10874 <bt_read_static_addr+0xc8>)
   107d8:	f842 3f10 	str.w	r3, [r2, #16]!
   107dc:	f00d fbf9 	bl	1dfd2 <z_log_msg_static_create.constprop.0>
   107e0:	46a5      	mov	sp, r4
		return 0;
   107e2:	2400      	movs	r4, #0
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
   107e4:	4620      	mov	r0, r4
   107e6:	3708      	adds	r7, #8
   107e8:	46bd      	mov	sp, r7
   107ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   107ee:	2100      	movs	r1, #0
   107f0:	f64f 4009 	movw	r0, #64521	; 0xfc09
   107f4:	1d3a      	adds	r2, r7, #4
   107f6:	f7fe fcf9 	bl	f1ec <bt_hci_cmd_send_sync>
	if (err) {
   107fa:	4603      	mov	r3, r0
   107fc:	b120      	cbz	r0, 10808 <bt_read_static_addr+0x5c>
		BT_WARN("Failed to read static addresses");
   107fe:	466c      	mov	r4, sp
   10800:	b088      	sub	sp, #32
   10802:	466a      	mov	r2, sp
   10804:	4b1c      	ldr	r3, [pc, #112]	; (10878 <bt_read_static_addr+0xcc>)
   10806:	e7e0      	b.n	107ca <bt_read_static_addr+0x1e>
	rp = (void *)rsp->data;
   10808:	6878      	ldr	r0, [r7, #4]
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   1080a:	f04f 0c16 	mov.w	ip, #22
	rp = (void *)rsp->data;
   1080e:	6882      	ldr	r2, [r0, #8]
	cnt = MIN(rp->num_addrs, size);
   10810:	7854      	ldrb	r4, [r2, #1]
   10812:	3202      	adds	r2, #2
   10814:	42b4      	cmp	r4, r6
   10816:	bf28      	it	cs
   10818:	4634      	movcs	r4, r6
	for (i = 0; i < cnt; i++) {
   1081a:	429c      	cmp	r4, r3
   1081c:	dc14      	bgt.n	10848 <bt_read_static_addr+0x9c>
	net_buf_unref(rsp);
   1081e:	f005 fd8d 	bl	1633c <net_buf_unref>
	if (!cnt) {
   10822:	2c00      	cmp	r4, #0
   10824:	d1de      	bne.n	107e4 <bt_read_static_addr+0x38>
		BT_WARN("No static addresses stored in controller");
   10826:	466d      	mov	r5, sp
   10828:	b088      	sub	sp, #32
   1082a:	466a      	mov	r2, sp
   1082c:	4b13      	ldr	r3, [pc, #76]	; (1087c <bt_read_static_addr+0xd0>)
   1082e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   10832:	6153      	str	r3, [r2, #20]
   10834:	4b0e      	ldr	r3, [pc, #56]	; (10870 <bt_read_static_addr+0xc4>)
   10836:	480f      	ldr	r0, [pc, #60]	; (10874 <bt_read_static_addr+0xc8>)
   10838:	6193      	str	r3, [r2, #24]
   1083a:	2303      	movs	r3, #3
   1083c:	f842 3f10 	str.w	r3, [r2, #16]!
   10840:	f00d fbc7 	bl	1dfd2 <z_log_msg_static_create.constprop.0>
   10844:	46ad      	mov	sp, r5
   10846:	e7cd      	b.n	107e4 <bt_read_static_addr+0x38>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   10848:	4611      	mov	r1, r2
   1084a:	fb0c 5603 	mla	r6, ip, r3, r5
   1084e:	f102 0e14 	add.w	lr, r2, #20
   10852:	f851 8b04 	ldr.w	r8, [r1], #4
   10856:	4571      	cmp	r1, lr
   10858:	f846 8b04 	str.w	r8, [r6], #4
   1085c:	d1f9      	bne.n	10852 <bt_read_static_addr+0xa6>
   1085e:	8809      	ldrh	r1, [r1, #0]
	for (i = 0; i < cnt; i++) {
   10860:	3301      	adds	r3, #1
   10862:	8031      	strh	r1, [r6, #0]
   10864:	3216      	adds	r2, #22
   10866:	e7d8      	b.n	1081a <bt_read_static_addr+0x6e>
   10868:	20008000 	.word	0x20008000
   1086c:	00025066 	.word	0x00025066
   10870:	00025136 	.word	0x00025136
   10874:	00022808 	.word	0x00022808
   10878:	00025096 	.word	0x00025096
   1087c:	000250ba 	.word	0x000250ba

00010880 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   10880:	b570      	push	{r4, r5, r6, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   10882:	4d15      	ldr	r5, [pc, #84]	; (108d8 <bt_setup_random_id_addr+0x58>)
{
   10884:	b088      	sub	sp, #32
	if (!bt_dev.id_count) {
   10886:	79ec      	ldrb	r4, [r5, #7]
   10888:	b92c      	cbnz	r4, 10896 <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   1088a:	2101      	movs	r1, #1
   1088c:	a802      	add	r0, sp, #8
   1088e:	f7ff ff8d 	bl	107ac <bt_read_static_addr>
   10892:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
   10894:	b9c0      	cbnz	r0, 108c8 <bt_setup_random_id_addr+0x48>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   10896:	2100      	movs	r1, #0
   10898:	4608      	mov	r0, r1
}
   1089a:	b008      	add	sp, #32
   1089c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_id_create(NULL, NULL);
   108a0:	f7ff bec8 	b.w	10634 <bt_id_create>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   108a4:	ab02      	add	r3, sp, #8
   108a6:	fb06 3102 	mla	r1, r6, r2, r3
   108aa:	f10d 0001 	add.w	r0, sp, #1
   108ae:	f00d fb48 	bl	1df42 <bt_addr_copy>
				addr.type = BT_ADDR_LE_RANDOM;
   108b2:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   108b4:	4669      	mov	r1, sp
   108b6:	4610      	mov	r0, r2
				addr.type = BT_ADDR_LE_RANDOM;
   108b8:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   108bc:	f7ff fc90 	bl	101e0 <id_create.constprop.0>
				if (err) {
   108c0:	3401      	adds	r4, #1
   108c2:	b110      	cbz	r0, 108ca <bt_setup_random_id_addr+0x4a>
}
   108c4:	b008      	add	sp, #32
   108c6:	bd70      	pop	{r4, r5, r6, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   108c8:	2616      	movs	r6, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   108ca:	79eb      	ldrb	r3, [r5, #7]
   108cc:	b2e2      	uxtb	r2, r4
   108ce:	4293      	cmp	r3, r2
   108d0:	d8e8      	bhi.n	108a4 <bt_setup_random_id_addr+0x24>
			return 0;
   108d2:	2000      	movs	r0, #0
   108d4:	e7f6      	b.n	108c4 <bt_setup_random_id_addr+0x44>
   108d6:	bf00      	nop
   108d8:	20008000 	.word	0x20008000

000108dc <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   108dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   108e0:	4690      	mov	r8, r2
   108e2:	460e      	mov	r6, r1
   108e4:	461d      	mov	r5, r3
	const bt_addr_le_t *id_addr;
	int err = 0;

	CHECKIF(adv == NULL || own_addr_type == NULL) {
   108e6:	4602      	mov	r2, r0
   108e8:	2800      	cmp	r0, #0
   108ea:	d04b      	beq.n	10984 <bt_id_set_adv_own_addr+0xa8>
   108ec:	2b00      	cmp	r3, #0
   108ee:	d049      	beq.n	10984 <bt_id_set_adv_own_addr+0xa8>
	}

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   108f0:	07cf      	lsls	r7, r1, #31
	id_addr = &bt_dev.id_addr[adv->id];
   108f2:	7804      	ldrb	r4, [r0, #0]
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   108f4:	d531      	bpl.n	1095a <bt_id_set_adv_own_addr+0x7e>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   108f6:	4f25      	ldr	r7, [pc, #148]	; (1098c <bt_id_set_adv_own_addr+0xb0>)
   108f8:	f1b8 0f00 	cmp.w	r8, #0
   108fc:	d013      	beq.n	10926 <bt_id_set_adv_own_addr+0x4a>
   108fe:	0688      	lsls	r0, r1, #26
   10900:	d40a      	bmi.n	10918 <bt_id_set_adv_own_addr+0x3c>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   10902:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   10906:	5cfb      	ldrb	r3, [r7, r3]
   10908:	2b01      	cmp	r3, #1
   1090a:	d015      	beq.n	10938 <bt_id_set_adv_own_addr+0x5c>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   1090c:	702b      	strb	r3, [r5, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   1090e:	06b2      	lsls	r2, r6, #26
   10910:	d50f      	bpl.n	10932 <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   10912:	f043 0302 	orr.w	r3, r3, #2
   10916:	e00b      	b.n	10930 <bt_id_set_adv_own_addr+0x54>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   10918:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
   1091c:	0659      	lsls	r1, r3, #25
   1091e:	d4f0      	bmi.n	10902 <bt_id_set_adv_own_addr+0x26>
			return -ENOTSUP;
   10920:	f06f 0085 	mvn.w	r0, #133	; 0x85
   10924:	e006      	b.n	10934 <bt_id_set_adv_own_addr+0x58>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   10926:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   1092a:	5cfb      	ldrb	r3, [r7, r3]
   1092c:	2b01      	cmp	r3, #1
   1092e:	d003      	beq.n	10938 <bt_id_set_adv_own_addr+0x5c>
			*own_addr_type = id_addr->type;
   10930:	702b      	strb	r3, [r5, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   10932:	2000      	movs	r0, #0
}
   10934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   10938:	2107      	movs	r1, #7
   1093a:	fb01 7104 	mla	r1, r1, r4, r7
   1093e:	4610      	mov	r0, r2
   10940:	3101      	adds	r1, #1
   10942:	f00d fbbf 	bl	1e0c4 <bt_id_set_adv_random_addr>
				if (err) {
   10946:	2800      	cmp	r0, #0
   10948:	d1f4      	bne.n	10934 <bt_id_set_adv_own_addr+0x58>
			*own_addr_type = id_addr->type;
   1094a:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   1094e:	5d3b      	ldrb	r3, [r7, r4]
   10950:	702b      	strb	r3, [r5, #0]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   10952:	f1b8 0f00 	cmp.w	r8, #0
   10956:	d0ec      	beq.n	10932 <bt_id_set_adv_own_addr+0x56>
   10958:	e7d9      	b.n	1090e <bt_id_set_adv_own_addr+0x32>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   1095a:	074b      	lsls	r3, r1, #29
   1095c:	d50e      	bpl.n	1097c <bt_id_set_adv_own_addr+0xa0>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   1095e:	4e0b      	ldr	r6, [pc, #44]	; (1098c <bt_id_set_adv_own_addr+0xb0>)
   10960:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
   10964:	5df3      	ldrb	r3, [r6, r7]
   10966:	2b01      	cmp	r3, #1
   10968:	d1e2      	bne.n	10930 <bt_id_set_adv_own_addr+0x54>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   1096a:	2107      	movs	r1, #7
   1096c:	fb11 3104 	smlabb	r1, r1, r4, r3
   10970:	4431      	add	r1, r6
   10972:	f00d fba7 	bl	1e0c4 <bt_id_set_adv_random_addr>
			*own_addr_type = id_addr->type;
   10976:	5df3      	ldrb	r3, [r6, r7]
   10978:	702b      	strb	r3, [r5, #0]
		if (err) {
   1097a:	e7db      	b.n	10934 <bt_id_set_adv_own_addr+0x58>
			err = bt_id_set_adv_private_addr(adv);
   1097c:	f00d fbaa 	bl	1e0d4 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   10980:	2301      	movs	r3, #1
   10982:	e7f9      	b.n	10978 <bt_id_set_adv_own_addr+0x9c>
		return -EINVAL;
   10984:	f06f 0015 	mvn.w	r0, #21
   10988:	e7d4      	b.n	10934 <bt_id_set_adv_own_addr+0x58>
   1098a:	bf00      	nop
   1098c:	20008000 	.word	0x20008000

00010990 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   10990:	b5b0      	push	{r4, r5, r7, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   10992:	4d18      	ldr	r5, [pc, #96]	; (109f4 <bt_id_init+0x64>)
{
   10994:	af00      	add	r7, sp, #0
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   10996:	79eb      	ldrb	r3, [r5, #7]
   10998:	b11b      	cbz	r3, 109a2 <bt_id_init+0x12>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   1099a:	2400      	movs	r4, #0
}
   1099c:	4620      	mov	r0, r4
   1099e:	46bd      	mov	sp, r7
   109a0:	bdb0      	pop	{r4, r5, r7, pc}
		err = bt_setup_public_id_addr();
   109a2:	f7ff fef3 	bl	1078c <bt_setup_public_id_addr>
		if (err) {
   109a6:	4604      	mov	r4, r0
   109a8:	b180      	cbz	r0, 109cc <bt_id_init+0x3c>
			BT_ERR("Unable to set identity address");
   109aa:	466d      	mov	r5, sp
   109ac:	b088      	sub	sp, #32
   109ae:	466a      	mov	r2, sp
   109b0:	4b11      	ldr	r3, [pc, #68]	; (109f8 <bt_id_init+0x68>)
			BT_ERR("Unable to set random address");
   109b2:	6153      	str	r3, [r2, #20]
   109b4:	4b11      	ldr	r3, [pc, #68]	; (109fc <bt_id_init+0x6c>)
   109b6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   109ba:	6193      	str	r3, [r2, #24]
   109bc:	2303      	movs	r3, #3
   109be:	4810      	ldr	r0, [pc, #64]	; (10a00 <bt_id_init+0x70>)
   109c0:	f842 3f10 	str.w	r3, [r2, #16]!
   109c4:	f00d fb05 	bl	1dfd2 <z_log_msg_static_create.constprop.0>
   109c8:	46ad      	mov	sp, r5
			return err;
   109ca:	e7e7      	b.n	1099c <bt_id_init+0xc>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   109cc:	79eb      	ldrb	r3, [r5, #7]
   109ce:	2b00      	cmp	r3, #0
   109d0:	d1e3      	bne.n	1099a <bt_id_init+0xa>
		err = bt_setup_random_id_addr();
   109d2:	f7ff ff55 	bl	10880 <bt_setup_random_id_addr>
		if (err) {
   109d6:	4604      	mov	r4, r0
   109d8:	2800      	cmp	r0, #0
   109da:	d1e6      	bne.n	109aa <bt_id_init+0x1a>
		err = set_random_address(&bt_dev.id_addr[0].a);
   109dc:	1c68      	adds	r0, r5, #1
   109de:	f7ff fd0d 	bl	103fc <set_random_address>
		if (err) {
   109e2:	4604      	mov	r4, r0
   109e4:	2800      	cmp	r0, #0
   109e6:	d0d9      	beq.n	1099c <bt_id_init+0xc>
			BT_ERR("Unable to set random address");
   109e8:	466d      	mov	r5, sp
   109ea:	b088      	sub	sp, #32
   109ec:	466a      	mov	r2, sp
   109ee:	4b05      	ldr	r3, [pc, #20]	; (10a04 <bt_id_init+0x74>)
   109f0:	e7df      	b.n	109b2 <bt_id_init+0x22>
   109f2:	bf00      	nop
   109f4:	20008000 	.word	0x20008000
   109f8:	000250e7 	.word	0x000250e7
   109fc:	0002512b 	.word	0x0002512b
   10a00:	00022808 	.word	0x00022808
   10a04:	0002510a 	.word	0x0002510a

00010a08 <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
   10a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10a0c:	b085      	sub	sp, #20
   10a0e:	460c      	mov	r4, r1
   10a10:	af00      	add	r7, sp, #0
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   10a12:	2120      	movs	r1, #32
{
   10a14:	4616      	mov	r6, r2
   10a16:	60b8      	str	r0, [r7, #8]
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   10a18:	f7fe fbae 	bl	f178 <bt_hci_cmd_create>
	if (!buf) {
   10a1c:	4605      	mov	r5, r0
   10a1e:	2800      	cmp	r0, #0
   10a20:	d066      	beq.n	10af0 <hci_set_ad+0xe8>
   10a22:	2120      	movs	r1, #32
   10a24:	3008      	adds	r0, #8
   10a26:	f00f fa31 	bl	1fe8c <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   10a2a:	2220      	movs	r2, #32
   10a2c:	4682      	mov	sl, r0
   10a2e:	2100      	movs	r1, #0
   10a30:	f011 f83a 	bl	21aa8 <memset>
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));

	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   10a34:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
	uint8_t set_data_len = 0;
   10a38:	2600      	movs	r6, #0
	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   10a3a:	f10a 0b01 	add.w	fp, sl, #1
	for (size_t i = 0; i < ad_len; i++) {
   10a3e:	60fb      	str	r3, [r7, #12]
		for (size_t j = 0; j < ad[i].len; j++) {
   10a40:	2300      	movs	r3, #0
   10a42:	f8d4 9000 	ldr.w	r9, [r4]
   10a46:	6862      	ldr	r2, [r4, #4]
   10a48:	4293      	cmp	r3, r2
   10a4a:	d30b      	bcc.n	10a64 <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
   10a4c:	68fb      	ldr	r3, [r7, #12]
   10a4e:	3408      	adds	r4, #8
   10a50:	42a3      	cmp	r3, r4
   10a52:	d1f5      	bne.n	10a40 <hci_set_ad+0x38>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   10a54:	2200      	movs	r2, #0
   10a56:	4629      	mov	r1, r5
   10a58:	68b8      	ldr	r0, [r7, #8]
	*data_len = set_data_len;
   10a5a:	f88a 6000 	strb.w	r6, [sl]
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   10a5e:	f7fe fbc5 	bl	f1ec <bt_hci_cmd_send_sync>
   10a62:	e024      	b.n	10aae <hci_set_ad+0xa6>
			size_t len = data[j].data_len;
   10a64:	f899 2001 	ldrb.w	r2, [r9, #1]
			uint8_t type = data[j].type;
   10a68:	1cb0      	adds	r0, r6, #2
			if ((set_data_len + len + 2) > set_data_len_max) {
   10a6a:	1881      	adds	r1, r0, r2
   10a6c:	291f      	cmp	r1, #31
			uint8_t type = data[j].type;
   10a6e:	f899 c000 	ldrb.w	ip, [r9]
			if ((set_data_len + len + 2) > set_data_len_max) {
   10a72:	d922      	bls.n	10aba <hci_set_ad+0xb2>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   10a74:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   10a78:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
   10a7c:	d101      	bne.n	10a82 <hci_set_ad+0x7a>
   10a7e:	2a00      	cmp	r2, #0
   10a80:	dc19      	bgt.n	10ab6 <hci_set_ad+0xae>
					BT_ERR("Too big advertising data");
   10a82:	466c      	mov	r4, sp
   10a84:	b088      	sub	sp, #32
   10a86:	466a      	mov	r2, sp
   10a88:	4b1b      	ldr	r3, [pc, #108]	; (10af8 <hci_set_ad+0xf0>)
   10a8a:	6153      	str	r3, [r2, #20]
   10a8c:	4b1b      	ldr	r3, [pc, #108]	; (10afc <hci_set_ad+0xf4>)
   10a8e:	6193      	str	r3, [r2, #24]
   10a90:	2303      	movs	r3, #3
   10a92:	f842 3f10 	str.w	r3, [r2, #16]!
   10a96:	2300      	movs	r3, #0
   10a98:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   10a9c:	4818      	ldr	r0, [pc, #96]	; (10b00 <hci_set_ad+0xf8>)
   10a9e:	f7fb fc09 	bl	c2b4 <z_impl_z_log_msg_static_create>
		net_buf_unref(buf);
   10aa2:	4628      	mov	r0, r5
   10aa4:	46a5      	mov	sp, r4
   10aa6:	f005 fc49 	bl	1633c <net_buf_unref>
					return -EINVAL;
   10aaa:	f06f 0015 	mvn.w	r0, #21
}
   10aae:	3714      	adds	r7, #20
   10ab0:	46bd      	mov	sp, r7
   10ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
   10ab6:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   10aba:	fa5f f882 	uxtb.w	r8, r2
   10abe:	f108 0101 	add.w	r1, r8, #1
   10ac2:	f80b 1006 	strb.w	r1, [fp, r6]
   10ac6:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
   10ac8:	b2c9      	uxtb	r1, r1
   10aca:	f80b c001 	strb.w	ip, [fp, r1]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   10ace:	f8d9 1004 	ldr.w	r1, [r9, #4]
   10ad2:	fa5b f080 	uxtab	r0, fp, r0
   10ad6:	607b      	str	r3, [r7, #4]
			set_data_len += len;
   10ad8:	f108 0802 	add.w	r8, r8, #2
   10adc:	f010 ffd7 	bl	21a8e <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   10ae0:	687b      	ldr	r3, [r7, #4]
			set_data_len += len;
   10ae2:	44b0      	add	r8, r6
   10ae4:	fa5f f688 	uxtb.w	r6, r8
		for (size_t j = 0; j < ad[i].len; j++) {
   10ae8:	3301      	adds	r3, #1
   10aea:	f109 0908 	add.w	r9, r9, #8
   10aee:	e7aa      	b.n	10a46 <hci_set_ad+0x3e>
		return -ENOBUFS;
   10af0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   10af4:	e7db      	b.n	10aae <hci_set_ad+0xa6>
   10af6:	bf00      	nop
   10af8:	0002519c 	.word	0x0002519c
   10afc:	0002521e 	.word	0x0002521e
   10b00:	000227b8 	.word	0x000227b8

00010b04 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   10b04:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   10b06:	4605      	mov	r5, r0
   10b08:	4b16      	ldr	r3, [pc, #88]	; (10b64 <le_adv_start_add_conn+0x60>)
   10b0a:	f815 2b09 	ldrb.w	r2, [r5], #9
{
   10b0e:	4604      	mov	r4, r0
	bt_dev.adv_conn_id = adv->id;
   10b10:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
   10b14:	460e      	mov	r6, r1
	return memcmp(a, b, sizeof(*a));
   10b16:	2207      	movs	r2, #7
   10b18:	4628      	mov	r0, r5
   10b1a:	4913      	ldr	r1, [pc, #76]	; (10b68 <le_adv_start_add_conn+0x64>)
   10b1c:	f010 ffa7 	bl	21a6e <memcmp>
   10b20:	4603      	mov	r3, r0
   10b22:	7820      	ldrb	r0, [r4, #0]

	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
   10b24:	b96b      	cbnz	r3, 10b42 <le_adv_start_add_conn+0x3e>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   10b26:	4911      	ldr	r1, [pc, #68]	; (10b6c <le_adv_start_add_conn+0x68>)
   10b28:	f001 f912 	bl	11d50 <bt_conn_add_le>
		if (!conn) {
   10b2c:	4604      	mov	r4, r0
   10b2e:	b910      	cbnz	r0, 10b36 <le_adv_start_add_conn+0x32>
			return -ENOMEM;
   10b30:	f06f 000b 	mvn.w	r0, #11
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
	*out_conn = conn;
	return 0;
}
   10b34:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
   10b36:	2104      	movs	r1, #4
   10b38:	f000 ff24 	bl	11984 <bt_conn_set_state>
		return 0;
   10b3c:	2000      	movs	r0, #0
		*out_conn = conn;
   10b3e:	6034      	str	r4, [r6, #0]
   10b40:	e7f8      	b.n	10b34 <le_adv_start_add_conn+0x30>
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   10b42:	4629      	mov	r1, r5
   10b44:	f001 f93c 	bl	11dc0 <bt_conn_exists_le>
   10b48:	b940      	cbnz	r0, 10b5c <le_adv_start_add_conn+0x58>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   10b4a:	7820      	ldrb	r0, [r4, #0]
   10b4c:	4629      	mov	r1, r5
   10b4e:	f001 f8ff 	bl	11d50 <bt_conn_add_le>
	if (!conn) {
   10b52:	4604      	mov	r4, r0
   10b54:	2800      	cmp	r0, #0
   10b56:	d0eb      	beq.n	10b30 <le_adv_start_add_conn+0x2c>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   10b58:	2105      	movs	r1, #5
   10b5a:	e7ed      	b.n	10b38 <le_adv_start_add_conn+0x34>
		return -EINVAL;
   10b5c:	f06f 0015 	mvn.w	r0, #21
   10b60:	e7e8      	b.n	10b34 <le_adv_start_add_conn+0x30>
   10b62:	bf00      	nop
   10b64:	20008000 	.word	0x20008000
   10b68:	000242c4 	.word	0x000242c4
   10b6c:	000242bd 	.word	0x000242bd

00010b70 <valid_adv_param>:
{
   10b70:	b538      	push	{r3, r4, r5, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   10b72:	6843      	ldr	r3, [r0, #4]
{
   10b74:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   10b76:	0558      	lsls	r0, r3, #21
   10b78:	d501      	bpl.n	10b7e <valid_adv_param+0xe>
		return false;
   10b7a:	2000      	movs	r0, #0
}
   10b7c:	bd38      	pop	{r3, r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   10b7e:	6922      	ldr	r2, [r4, #16]
   10b80:	b10a      	cbz	r2, 10b86 <valid_adv_param+0x16>
   10b82:	07d9      	lsls	r1, r3, #31
   10b84:	d5f9      	bpl.n	10b7a <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   10b86:	4d19      	ldr	r5, [pc, #100]	; (10bec <valid_adv_param+0x7c>)
   10b88:	7820      	ldrb	r0, [r4, #0]
   10b8a:	79eb      	ldrb	r3, [r5, #7]
   10b8c:	4283      	cmp	r3, r0
   10b8e:	d9f4      	bls.n	10b7a <valid_adv_param+0xa>
	    bt_addr_le_eq(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   10b90:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   10b94:	2207      	movs	r2, #7
   10b96:	4916      	ldr	r1, [pc, #88]	; (10bf0 <valid_adv_param+0x80>)
   10b98:	4428      	add	r0, r5
   10b9a:	f010 ff68 	bl	21a6e <memcmp>
	if (param->id >= bt_dev.id_count ||
   10b9e:	2800      	cmp	r0, #0
   10ba0:	d0eb      	beq.n	10b7a <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   10ba2:	6860      	ldr	r0, [r4, #4]
   10ba4:	07c2      	lsls	r2, r0, #31
   10ba6:	d406      	bmi.n	10bb6 <valid_adv_param+0x46>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   10ba8:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
   10bac:	2b08      	cmp	r3, #8
   10bae:	d802      	bhi.n	10bb6 <valid_adv_param+0x46>
   10bb0:	68a3      	ldr	r3, [r4, #8]
   10bb2:	2b9f      	cmp	r3, #159	; 0x9f
   10bb4:	d9e1      	bls.n	10b7a <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   10bb6:	f010 0f30 	tst.w	r0, #48	; 0x30
   10bba:	d002      	beq.n	10bc2 <valid_adv_param+0x52>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   10bbc:	6923      	ldr	r3, [r4, #16]
   10bbe:	2b00      	cmp	r3, #0
   10bc0:	d0db      	beq.n	10b7a <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   10bc2:	06c3      	lsls	r3, r0, #27
   10bc4:	d401      	bmi.n	10bca <valid_adv_param+0x5a>
   10bc6:	6923      	ldr	r3, [r4, #16]
   10bc8:	b943      	cbnz	r3, 10bdc <valid_adv_param+0x6c>
		if (param->interval_min > param->interval_max ||
   10bca:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   10bce:	429a      	cmp	r2, r3
   10bd0:	d8d3      	bhi.n	10b7a <valid_adv_param+0xa>
   10bd2:	2a1f      	cmp	r2, #31
   10bd4:	d9d1      	bls.n	10b7a <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   10bd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   10bda:	d8ce      	bhi.n	10b7a <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   10bdc:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   10be0:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   10be4:	bf18      	it	ne
   10be6:	2001      	movne	r0, #1
   10be8:	e7c8      	b.n	10b7c <valid_adv_param+0xc>
   10bea:	bf00      	nop
   10bec:	20008000 	.word	0x20008000
   10bf0:	000242c4 	.word	0x000242c4

00010bf4 <bt_le_ext_adv_foreach>:
{
   10bf4:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
   10bf6:	4801      	ldr	r0, [pc, #4]	; (10bfc <bt_le_ext_adv_foreach+0x8>)
   10bf8:	4718      	bx	r3
   10bfa:	bf00      	nop
   10bfc:	20008018 	.word	0x20008018

00010c00 <bt_le_adv_lookup_legacy>:
}
   10c00:	4800      	ldr	r0, [pc, #0]	; (10c04 <bt_le_adv_lookup_legacy+0x4>)
   10c02:	4770      	bx	lr
   10c04:	20008018 	.word	0x20008018

00010c08 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   10c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10c0c:	b08d      	sub	sp, #52	; 0x34
   10c0e:	af04      	add	r7, sp, #16
   10c10:	e9c7 3200 	strd	r3, r2, [r7]
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
   10c14:	2300      	movs	r3, #0
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   10c16:	f8d1 b010 	ldr.w	fp, [r1, #16]
{
   10c1a:	4606      	mov	r6, r0
	bool dir_adv = (param->peer != NULL), scannable = false;
   10c1c:	ebbb 0403 	subs.w	r4, fp, r3
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10c20:	4892      	ldr	r0, [pc, #584]	; (10e6c <bt_le_adv_start_legacy+0x264>)
   10c22:	bf18      	it	ne
   10c24:	2401      	movne	r4, #1
	struct bt_conn *conn = NULL;
   10c26:	60fb      	str	r3, [r7, #12]
   10c28:	f00d fa8e 	bl	1e148 <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   10c2c:	0743      	lsls	r3, r0, #29
{
   10c2e:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   10c30:	f140 8113 	bpl.w	10e5a <bt_le_adv_start_legacy+0x252>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   10c34:	4608      	mov	r0, r1
   10c36:	f7ff ff9b 	bl	10b70 <valid_adv_param>
   10c3a:	b930      	cbnz	r0, 10c4a <bt_le_adv_start_legacy+0x42>
		return -EINVAL;
   10c3c:	f06f 0415 	mvn.w	r4, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   10c40:	4620      	mov	r0, r4
   10c42:	3724      	adds	r7, #36	; 0x24
   10c44:	46bd      	mov	sp, r7
   10c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   10c4a:	4628      	mov	r0, r5
   10c4c:	f00d fa59 	bl	1e102 <bt_id_adv_random_addr_check>
   10c50:	4682      	mov	sl, r0
   10c52:	2800      	cmp	r0, #0
   10c54:	d0f2      	beq.n	10c3c <bt_le_adv_start_legacy+0x34>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   10c56:	f106 0910 	add.w	r9, r6, #16
   10c5a:	4648      	mov	r0, r9
   10c5c:	f00d fa74 	bl	1e148 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   10c60:	f3c0 13c0 	ubfx	r3, r0, #7, #1
   10c64:	0600      	lsls	r0, r0, #24
   10c66:	f100 80fb 	bmi.w	10e60 <bt_le_adv_start_legacy+0x258>
	(void)memset(&set_param, 0, sizeof(set_param));
   10c6a:	e9c7 3305 	strd	r3, r3, [r7, #20]
   10c6e:	f8c7 301b 	str.w	r3, [r7, #27]
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   10c72:	68ab      	ldr	r3, [r5, #8]
	set_param.channel_map  = get_adv_channel_map(param->options);
   10c74:	6868      	ldr	r0, [r5, #4]
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   10c76:	823b      	strh	r3, [r7, #16]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   10c78:	68eb      	ldr	r3, [r5, #12]
   10c7a:	827b      	strh	r3, [r7, #18]
	set_param.channel_map  = get_adv_channel_map(param->options);
   10c7c:	f00d fa55 	bl	1e12a <get_adv_channel_map>
	if (adv->id != param->id) {
   10c80:	7832      	ldrb	r2, [r6, #0]
   10c82:	782b      	ldrb	r3, [r5, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
   10c84:	7778      	strb	r0, [r7, #29]
	if (adv->id != param->id) {
   10c86:	429a      	cmp	r2, r3
   10c88:	d004      	beq.n	10c94 <bt_le_adv_start_legacy+0x8c>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10c8a:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   10c8e:	4877      	ldr	r0, [pc, #476]	; (10e6c <bt_le_adv_start_legacy+0x264>)
   10c90:	f00d fa5d 	bl	1e14e <atomic_and>
	adv->id = param->id;
   10c94:	782b      	ldrb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   10c96:	4a76      	ldr	r2, [pc, #472]	; (10e70 <bt_le_adv_start_legacy+0x268>)
	adv->id = param->id;
   10c98:	7033      	strb	r3, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
   10c9a:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   10c9e:	4630      	mov	r0, r6
   10ca0:	4622      	mov	r2, r4
   10ca2:	6869      	ldr	r1, [r5, #4]
   10ca4:	f107 0315 	add.w	r3, r7, #21
   10ca8:	f7ff fe18 	bl	108dc <bt_id_set_adv_own_addr>
	if (err) {
   10cac:	4604      	mov	r4, r0
   10cae:	2800      	cmp	r0, #0
   10cb0:	d1c6      	bne.n	10c40 <bt_le_adv_start_legacy+0x38>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   10cb2:	f106 0009 	add.w	r0, r6, #9
	if (dir_adv) {
   10cb6:	f1bb 0f00 	cmp.w	fp, #0
   10cba:	d013      	beq.n	10ce4 <bt_le_adv_start_legacy+0xdc>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   10cbc:	6929      	ldr	r1, [r5, #16]
   10cbe:	f00d fa51 	bl	1e164 <bt_addr_le_copy>
	name_type = get_adv_name_type_param(param);
   10cc2:	4628      	mov	r0, r5
   10cc4:	f00d fada 	bl	1e27c <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   10cc8:	686b      	ldr	r3, [r5, #4]
	name_type = get_adv_name_type_param(param);
   10cca:	4680      	mov	r8, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   10ccc:	07d9      	lsls	r1, r3, #31
   10cce:	d416      	bmi.n	10cfe <bt_le_adv_start_legacy+0xf6>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   10cd0:	059b      	lsls	r3, r3, #22
   10cd2:	d404      	bmi.n	10cde <bt_le_adv_start_legacy+0xd6>
   10cd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10cd6:	b913      	cbnz	r3, 10cde <bt_le_adv_start_legacy+0xd6>
   10cd8:	f1b8 0f02 	cmp.w	r8, #2
   10cdc:	d15e      	bne.n	10d9c <bt_le_adv_start_legacy+0x194>
		set_param.type = BT_HCI_ADV_SCAN_IND;
   10cde:	2302      	movs	r3, #2
   10ce0:	753b      	strb	r3, [r7, #20]
   10ce2:	e018      	b.n	10d16 <bt_le_adv_start_legacy+0x10e>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   10ce4:	4963      	ldr	r1, [pc, #396]	; (10e74 <bt_le_adv_start_legacy+0x26c>)
   10ce6:	f00d fa3d 	bl	1e164 <bt_addr_le_copy>
	name_type = get_adv_name_type_param(param);
   10cea:	4628      	mov	r0, r5
   10cec:	f00d fac6 	bl	1e27c <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   10cf0:	686b      	ldr	r3, [r5, #4]
	name_type = get_adv_name_type_param(param);
   10cf2:	4680      	mov	r8, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   10cf4:	07da      	lsls	r2, r3, #31
   10cf6:	d5eb      	bpl.n	10cd0 <bt_le_adv_start_legacy+0xc8>
			set_param.type = BT_HCI_ADV_IND;
   10cf8:	f887 b014 	strb.w	fp, [r7, #20]
   10cfc:	e00b      	b.n	10d16 <bt_le_adv_start_legacy+0x10e>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
   10cfe:	f013 0f10 	tst.w	r3, #16
   10d02:	bf0c      	ite	eq
   10d04:	2301      	moveq	r3, #1
   10d06:	2304      	movne	r3, #4
			bt_addr_le_copy(&set_param.direct_addr, param->peer);
   10d08:	6929      	ldr	r1, [r5, #16]
   10d0a:	f107 0016 	add.w	r0, r7, #22
   10d0e:	753b      	strb	r3, [r7, #20]
	bool dir_adv = (param->peer != NULL), scannable = false;
   10d10:	46a2      	mov	sl, r4
			bt_addr_le_copy(&set_param.direct_addr, param->peer);
   10d12:	f00d fa27 	bl	1e164 <bt_addr_le_copy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   10d16:	210f      	movs	r1, #15
   10d18:	f242 0006 	movw	r0, #8198	; 0x2006
   10d1c:	f7fe fa2c 	bl	f178 <bt_hci_cmd_create>
	if (!buf) {
   10d20:	4604      	mov	r4, r0
   10d22:	2800      	cmp	r0, #0
   10d24:	f000 809f 	beq.w	10e66 <bt_le_adv_start_legacy+0x25e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   10d28:	220f      	movs	r2, #15
   10d2a:	f107 0110 	add.w	r1, r7, #16
   10d2e:	3008      	adds	r0, #8
   10d30:	f00f f8b2 	bl	1fe98 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   10d34:	4621      	mov	r1, r4
   10d36:	2200      	movs	r2, #0
   10d38:	f242 0006 	movw	r0, #8198	; 0x2006
   10d3c:	f7fe fa56 	bl	f1ec <bt_hci_cmd_send_sync>
	if (err) {
   10d40:	4604      	mov	r4, r0
   10d42:	2800      	cmp	r0, #0
   10d44:	f47f af7c 	bne.w	10c40 <bt_le_adv_start_legacy+0x38>
	if (!dir_adv) {
   10d48:	f1bb 0f00 	cmp.w	fp, #0
   10d4c:	d02b      	beq.n	10da6 <bt_le_adv_start_legacy+0x19e>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   10d4e:	686b      	ldr	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10d50:	07dc      	lsls	r4, r3, #31
   10d52:	d436      	bmi.n	10dc2 <bt_le_adv_start_legacy+0x1ba>
	return bt_le_adv_set_enable_legacy(adv, enable);
   10d54:	2101      	movs	r1, #1
   10d56:	4630      	mov	r0, r6
   10d58:	f00d faa0 	bl	1e29c <bt_le_adv_set_enable_legacy>
	if (err) {
   10d5c:	4604      	mov	r4, r0
   10d5e:	2800      	cmp	r0, #0
   10d60:	d073      	beq.n	10e4a <bt_le_adv_start_legacy+0x242>
		BT_ERR("Failed to start advertiser");
   10d62:	466d      	mov	r5, sp
   10d64:	b088      	sub	sp, #32
   10d66:	aa04      	add	r2, sp, #16
   10d68:	4b43      	ldr	r3, [pc, #268]	; (10e78 <bt_le_adv_start_legacy+0x270>)
   10d6a:	6153      	str	r3, [r2, #20]
   10d6c:	4b43      	ldr	r3, [pc, #268]	; (10e7c <bt_le_adv_start_legacy+0x274>)
   10d6e:	6193      	str	r3, [r2, #24]
   10d70:	2303      	movs	r3, #3
   10d72:	f842 3f10 	str.w	r3, [r2, #16]!
   10d76:	2300      	movs	r3, #0
   10d78:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   10d7c:	4840      	ldr	r0, [pc, #256]	; (10e80 <bt_le_adv_start_legacy+0x278>)
   10d7e:	f7fb fa99 	bl	c2b4 <z_impl_z_log_msg_static_create>
   10d82:	46ad      	mov	sp, r5
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   10d84:	68fd      	ldr	r5, [r7, #12]
   10d86:	2d00      	cmp	r5, #0
   10d88:	f43f af5a 	beq.w	10c40 <bt_le_adv_start_legacy+0x38>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10d8c:	4628      	mov	r0, r5
   10d8e:	2100      	movs	r1, #0
   10d90:	f000 fdf8 	bl	11984 <bt_conn_set_state>
			bt_conn_unref(conn);
   10d94:	4628      	mov	r0, r5
   10d96:	f00d fb4e 	bl	1e436 <bt_conn_unref>
   10d9a:	e751      	b.n	10c40 <bt_le_adv_start_legacy+0x38>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   10d9c:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
   10d9e:	f8d7 a048 	ldr.w	sl, [r7, #72]	; 0x48
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   10da2:	753b      	strb	r3, [r7, #20]
   10da4:	e7b7      	b.n	10d16 <bt_le_adv_start_legacy+0x10e>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   10da6:	e9cd a801 	strd	sl, r8, [sp, #4]
   10daa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   10dac:	4630      	mov	r0, r6
   10dae:	9300      	str	r3, [sp, #0]
   10db0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10db2:	e9d7 2100 	ldrd	r2, r1, [r7]
   10db6:	f00d f9ef 	bl	1e198 <le_adv_update.constprop.0>
		if (err) {
   10dba:	4604      	mov	r4, r0
   10dbc:	2800      	cmp	r0, #0
   10dbe:	d0c6      	beq.n	10d4e <bt_le_adv_start_legacy+0x146>
   10dc0:	e73e      	b.n	10c40 <bt_le_adv_start_legacy+0x38>
		err = le_adv_start_add_conn(adv, &conn);
   10dc2:	4630      	mov	r0, r6
   10dc4:	f107 010c 	add.w	r1, r7, #12
   10dc8:	f7ff fe9c 	bl	10b04 <le_adv_start_add_conn>
		if (err) {
   10dcc:	4604      	mov	r4, r0
   10dce:	2800      	cmp	r0, #0
   10dd0:	d0c0      	beq.n	10d54 <bt_le_adv_start_legacy+0x14c>
			if (err == -ENOMEM && !dir_adv &&
   10dd2:	f110 0f0c 	cmn.w	r0, #12
   10dd6:	f47f af33 	bne.w	10c40 <bt_le_adv_start_legacy+0x38>
   10dda:	f1bb 0f00 	cmp.w	fp, #0
   10dde:	f47f af2f 	bne.w	10c40 <bt_le_adv_start_legacy+0x38>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   10de2:	686b      	ldr	r3, [r5, #4]
			if (err == -ENOMEM && !dir_adv &&
   10de4:	0798      	lsls	r0, r3, #30
   10de6:	f53f af2b 	bmi.w	10c40 <bt_le_adv_start_legacy+0x38>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   10dea:	686c      	ldr	r4, [r5, #4]
   10dec:	f084 0402 	eor.w	r4, r4, #2
   10df0:	f3c4 0440 	ubfx	r4, r4, #1, #1
   10df4:	f004 0201 	and.w	r2, r4, #1
   10df8:	210e      	movs	r1, #14
   10dfa:	4648      	mov	r0, r9
   10dfc:	f00d f9b9 	bl	1e172 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   10e00:	f108 33ff 	add.w	r3, r8, #4294967295
   10e04:	425a      	negs	r2, r3
   10e06:	415a      	adcs	r2, r3
   10e08:	2108      	movs	r1, #8
   10e0a:	4648      	mov	r0, r9
   10e0c:	f00d f9b1 	bl	1e172 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   10e10:	f1a8 0102 	sub.w	r1, r8, #2
   10e14:	424a      	negs	r2, r1
   10e16:	414a      	adcs	r2, r1
   10e18:	4648      	mov	r0, r9
   10e1a:	2109      	movs	r1, #9
   10e1c:	f00d f9a9 	bl	1e172 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   10e20:	686a      	ldr	r2, [r5, #4]
   10e22:	210a      	movs	r1, #10
   10e24:	4648      	mov	r0, r9
   10e26:	f002 0201 	and.w	r2, r2, #1
   10e2a:	f00d f9a2 	bl	1e172 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   10e2e:	4652      	mov	r2, sl
   10e30:	210b      	movs	r1, #11
   10e32:	4648      	mov	r0, r9
   10e34:	f00d f99d 	bl	1e172 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   10e38:	686a      	ldr	r2, [r5, #4]
   10e3a:	210d      	movs	r1, #13
   10e3c:	4648      	mov	r0, r9
   10e3e:	f3c2 0280 	ubfx	r2, r2, #2, #1
   10e42:	f00d f996 	bl	1e172 <atomic_set_bit_to>
	return 0;
   10e46:	2400      	movs	r4, #0
   10e48:	e6fa      	b.n	10c40 <bt_le_adv_start_legacy+0x38>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   10e4a:	68f8      	ldr	r0, [r7, #12]
   10e4c:	b108      	cbz	r0, 10e52 <bt_le_adv_start_legacy+0x24a>
		bt_conn_unref(conn);
   10e4e:	f00d faf2 	bl	1e436 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   10e52:	f1bb 0f00 	cmp.w	fp, #0
   10e56:	d1cd      	bne.n	10df4 <bt_le_adv_start_legacy+0x1ec>
   10e58:	e7c7      	b.n	10dea <bt_le_adv_start_legacy+0x1e2>
		return -EAGAIN;
   10e5a:	f06f 040a 	mvn.w	r4, #10
   10e5e:	e6ef      	b.n	10c40 <bt_le_adv_start_legacy+0x38>
		return -EALREADY;
   10e60:	f06f 0477 	mvn.w	r4, #119	; 0x77
   10e64:	e6ec      	b.n	10c40 <bt_le_adv_start_legacy+0x38>
		return -ENOBUFS;
   10e66:	f06f 0468 	mvn.w	r4, #104	; 0x68
   10e6a:	e6e9      	b.n	10c40 <bt_le_adv_start_legacy+0x38>
   10e6c:	200080cc 	.word	0x200080cc
   10e70:	20008000 	.word	0x20008000
   10e74:	000242c4 	.word	0x000242c4
   10e78:	000251b9 	.word	0x000251b9
   10e7c:	00025207 	.word	0x00025207
   10e80:	000227b8 	.word	0x000227b8

00010e84 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   10e84:	b573      	push	{r0, r1, r4, r5, r6, lr}
   10e86:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   10e88:	9a06      	ldr	r2, [sp, #24]
{
   10e8a:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   10e8c:	e9cd 3200 	strd	r3, r2, [sp]
   10e90:	462b      	mov	r3, r5
   10e92:	460a      	mov	r2, r1
   10e94:	4601      	mov	r1, r0
   10e96:	4811      	ldr	r0, [pc, #68]	; (10edc <bt_le_adv_start+0x58>)
   10e98:	f7ff feb6 	bl	10c08 <bt_le_adv_start_legacy>
   10e9c:	4621      	mov	r1, r4
   10e9e:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   10ea0:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   10ea2:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   10ea6:	429d      	cmp	r5, r3
   10ea8:	d102      	bne.n	10eb0 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   10eaa:	4630      	mov	r0, r6
   10eac:	b002      	add	sp, #8
   10eae:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   10eb0:	880a      	ldrh	r2, [r1, #0]
   10eb2:	4282      	cmp	r2, r0
   10eb4:	d104      	bne.n	10ec0 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   10eb6:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   10eb8:	b112      	cbz	r2, 10ec0 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   10eba:	7812      	ldrb	r2, [r2, #0]
   10ebc:	07d2      	lsls	r2, r2, #31
   10ebe:	d402      	bmi.n	10ec6 <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   10ec0:	3301      	adds	r3, #1
   10ec2:	3108      	adds	r1, #8
   10ec4:	e7ef      	b.n	10ea6 <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   10ec6:	4906      	ldr	r1, [pc, #24]	; (10ee0 <bt_le_adv_start+0x5c>)
   10ec8:	4806      	ldr	r0, [pc, #24]	; (10ee4 <bt_le_adv_start+0x60>)
   10eca:	f010 fa60 	bl	2138e <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   10ece:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   10ed2:	2300      	movs	r3, #0
   10ed4:	4803      	ldr	r0, [pc, #12]	; (10ee4 <bt_le_adv_start+0x60>)
   10ed6:	f009 f805 	bl	19ee4 <k_work_reschedule>
   10eda:	e7e6      	b.n	10eaa <bt_le_adv_start+0x26>
   10edc:	20008018 	.word	0x20008018
   10ee0:	00010f6d 	.word	0x00010f6d
   10ee4:	20008030 	.word	0x20008030

00010ee8 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   10ee8:	b510      	push	{r4, lr}
	if (!adv) {
		BT_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
   10eea:	481a      	ldr	r0, [pc, #104]	; (10f54 <bt_le_adv_stop+0x6c>)
   10eec:	f00d f9fd 	bl	1e2ea <bt_le_lim_adv_cancel_timeout>
   10ef0:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   10ef4:	4818      	ldr	r0, [pc, #96]	; (10f58 <bt_le_adv_stop+0x70>)
   10ef6:	f00d f92a 	bl	1e14e <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10efa:	4817      	ldr	r0, [pc, #92]	; (10f58 <bt_le_adv_stop+0x70>)
   10efc:	f00d f924 	bl	1e148 <atomic_get>
   10f00:	4603      	mov	r3, r0
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   10f02:	061a      	lsls	r2, r3, #24
   10f04:	f3c0 10c0 	ubfx	r0, r0, #7, #1
   10f08:	d523      	bpl.n	10f52 <bt_le_adv_stop+0x6a>
   10f0a:	4813      	ldr	r0, [pc, #76]	; (10f58 <bt_le_adv_stop+0x70>)
   10f0c:	f00d f91c 	bl	1e148 <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10f10:	0543      	lsls	r3, r0, #21
   10f12:	d514      	bpl.n	10f3e <bt_le_adv_stop+0x56>
   10f14:	2207      	movs	r2, #7
   10f16:	4911      	ldr	r1, [pc, #68]	; (10f5c <bt_le_adv_stop+0x74>)
   10f18:	4811      	ldr	r0, [pc, #68]	; (10f60 <bt_le_adv_stop+0x78>)
   10f1a:	f010 fda8 	bl	21a6e <memcmp>
   10f1e:	4b11      	ldr	r3, [pc, #68]	; (10f64 <bt_le_adv_stop+0x7c>)
	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
   10f20:	b998      	cbnz	r0, 10f4a <bt_le_adv_stop+0x62>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   10f22:	2204      	movs	r2, #4
   10f24:	4910      	ldr	r1, [pc, #64]	; (10f68 <bt_le_adv_stop+0x80>)
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   10f26:	7e18      	ldrb	r0, [r3, #24]
   10f28:	f000 ff7e 	bl	11e28 <bt_conn_lookup_state_le>
   10f2c:	4604      	mov	r4, r0
	if (conn) {
   10f2e:	b130      	cbz	r0, 10f3e <bt_le_adv_stop+0x56>
		conn->err = status;
   10f30:	2100      	movs	r1, #0
   10f32:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10f34:	f000 fd26 	bl	11984 <bt_conn_set_state>
		bt_conn_unref(conn);
   10f38:	4620      	mov	r0, r4
   10f3a:	f00d fa7c 	bl	1e436 <bt_conn_unref>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   10f3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = bt_le_adv_set_enable_legacy(adv, false);
   10f42:	2100      	movs	r1, #0
   10f44:	4803      	ldr	r0, [pc, #12]	; (10f54 <bt_le_adv_stop+0x6c>)
   10f46:	f00d b9a9 	b.w	1e29c <bt_le_adv_set_enable_legacy>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   10f4a:	2205      	movs	r2, #5
   10f4c:	f103 0121 	add.w	r1, r3, #33	; 0x21
   10f50:	e7e9      	b.n	10f26 <bt_le_adv_stop+0x3e>
}
   10f52:	bd10      	pop	{r4, pc}
   10f54:	20008018 	.word	0x20008018
   10f58:	20008028 	.word	0x20008028
   10f5c:	000242c4 	.word	0x000242c4
   10f60:	20008021 	.word	0x20008021
   10f64:	20008000 	.word	0x20008000
   10f68:	000242bd 	.word	0x000242bd

00010f6c <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
   10f6c:	b580      	push	{r7, lr}
   10f6e:	af00      	add	r7, sp, #0
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   10f70:	f7ff ffba 	bl	10ee8 <bt_le_adv_stop>
#endif
	BT_WARN("Failed to stop advertising: %d", err);
   10f74:	b088      	sub	sp, #32
   10f76:	466a      	mov	r2, sp
   10f78:	4b07      	ldr	r3, [pc, #28]	; (10f98 <adv_timeout+0x2c>)
   10f7a:	6153      	str	r3, [r2, #20]
   10f7c:	4b07      	ldr	r3, [pc, #28]	; (10f9c <adv_timeout+0x30>)
   10f7e:	e9c2 3006 	strd	r3, r0, [r2, #24]
   10f82:	2304      	movs	r3, #4
   10f84:	f842 3f10 	str.w	r3, [r2, #16]!
   10f88:	2300      	movs	r3, #0
   10f8a:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   10f8e:	4804      	ldr	r0, [pc, #16]	; (10fa0 <adv_timeout+0x34>)
   10f90:	f7fb f990 	bl	c2b4 <z_impl_z_log_msg_static_create>
}
   10f94:	46bd      	mov	sp, r7
   10f96:	bd80      	pop	{r7, pc}
   10f98:	000251d8 	.word	0x000251d8
   10f9c:	000251fb 	.word	0x000251fb
   10fa0:	000227b8 	.word	0x000227b8

00010fa4 <bt_le_adv_resume>:
{
   10fa4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   10fa6:	4c1e      	ldr	r4, [pc, #120]	; (11020 <bt_le_adv_resume+0x7c>)
   10fa8:	4620      	mov	r0, r4
   10faa:	f00d f8cd 	bl	1e148 <atomic_get>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   10fae:	0440      	lsls	r0, r0, #17
   10fb0:	d534      	bpl.n	1101c <bt_le_adv_resume+0x78>
   10fb2:	4620      	mov	r0, r4
   10fb4:	f00d f8c8 	bl	1e148 <atomic_get>
   10fb8:	0601      	lsls	r1, r0, #24
   10fba:	d42f      	bmi.n	1101c <bt_le_adv_resume+0x78>
   10fbc:	4620      	mov	r0, r4
   10fbe:	f00d f8c3 	bl	1e148 <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   10fc2:	0542      	lsls	r2, r0, #21
   10fc4:	d52a      	bpl.n	1101c <bt_le_adv_resume+0x78>
	err = le_adv_start_add_conn(adv, &conn);
   10fc6:	a901      	add	r1, sp, #4
   10fc8:	f1a4 0010 	sub.w	r0, r4, #16
   10fcc:	f7ff fd9a 	bl	10b04 <le_adv_start_add_conn>
	if (err) {
   10fd0:	4605      	mov	r5, r0
   10fd2:	bb18      	cbnz	r0, 1101c <bt_le_adv_resume+0x78>
	return bt_le_adv_set_enable_legacy(adv, enable);
   10fd4:	2101      	movs	r1, #1
   10fd6:	f1a4 0010 	sub.w	r0, r4, #16
   10fda:	f00d f95f 	bl	1e29c <bt_le_adv_set_enable_legacy>
	bt_conn_unref(conn);
   10fde:	9e01      	ldr	r6, [sp, #4]
	if (err) {
   10fe0:	b928      	cbnz	r0, 10fee <bt_le_adv_resume+0x4a>
	bt_conn_unref(conn);
   10fe2:	4630      	mov	r0, r6
}
   10fe4:	b002      	add	sp, #8
   10fe6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   10fea:	f00d ba24 	b.w	1e436 <bt_conn_unref>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10fee:	4629      	mov	r1, r5
   10ff0:	4630      	mov	r0, r6
   10ff2:	f000 fcc7 	bl	11984 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10ff6:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   10ffa:	4620      	mov	r0, r4
   10ffc:	f00d f8a7 	bl	1e14e <atomic_and>
   11000:	4605      	mov	r5, r0
	bt_conn_unref(conn);
   11002:	4630      	mov	r0, r6
   11004:	f00d fa17 	bl	1e436 <bt_conn_unref>
	if (persist_paused) {
   11008:	046b      	lsls	r3, r5, #17
   1100a:	d507      	bpl.n	1101c <bt_le_adv_resume+0x78>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1100c:	e8d4 3fef 	ldaex	r3, [r4]
   11010:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   11014:	e8c4 3fe2 	stlex	r2, r3, [r4]
   11018:	2a00      	cmp	r2, #0
   1101a:	d1f7      	bne.n	1100c <bt_le_adv_resume+0x68>
}
   1101c:	b002      	add	sp, #8
   1101e:	bd70      	pop	{r4, r5, r6, pc}
   11020:	20008028 	.word	0x20008028

00011024 <prng_reseed.constprop.0>:

#include "hci_core.h"

static struct tc_hmac_prng_struct prng;

static int prng_reseed(struct tc_hmac_prng_struct *h)
   11024:	b5b0      	push	{r4, r5, r7, lr}
   11026:	b08c      	sub	sp, #48	; 0x30
   11028:	af02      	add	r7, sp, #8
{
	uint8_t seed[32];
	int64_t extra;
	int ret;

	ret = bt_hci_le_rand(seed, sizeof(seed));
   1102a:	2120      	movs	r1, #32
   1102c:	f107 0008 	add.w	r0, r7, #8
   11030:	f7fe f98e 	bl	f350 <bt_hci_le_rand>
	if (ret) {
   11034:	4604      	mov	r4, r0
   11036:	bb50      	cbnz	r0, 1108e <prng_reseed.constprop.0+0x6a>
	return z_impl_k_uptime_ticks();
   11038:	f010 fb57 	bl	216ea <z_impl_k_uptime_ticks>
			return ((t * to_hz + off) / from_hz);
   1103c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   11040:	fba0 2305 	umull	r2, r3, r0, r5
   11044:	fb05 3101 	mla	r1, r5, r1, r3
		return ret;
	}

	extra = k_uptime_get();

	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
   11048:	2308      	movs	r3, #8
   1104a:	0bd2      	lsrs	r2, r2, #15
   1104c:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
   11050:	0bc9      	lsrs	r1, r1, #15
	extra = k_uptime_get();
   11052:	e9c7 2100 	strd	r2, r1, [r7]
	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
   11056:	4810      	ldr	r0, [pc, #64]	; (11098 <prng_reseed.constprop.0+0x74>)
   11058:	9300      	str	r3, [sp, #0]
   1105a:	2220      	movs	r2, #32
   1105c:	463b      	mov	r3, r7
   1105e:	f107 0108 	add.w	r1, r7, #8
   11062:	f00c fd03 	bl	1da6c <tc_hmac_prng_reseed>
				  sizeof(extra));
	if (ret == TC_CRYPTO_FAIL) {
   11066:	b990      	cbnz	r0, 1108e <prng_reseed.constprop.0+0x6a>
		BT_ERR("Failed to re-seed PRNG");
   11068:	466d      	mov	r5, sp
   1106a:	b088      	sub	sp, #32
   1106c:	aa02      	add	r2, sp, #8
   1106e:	4b0b      	ldr	r3, [pc, #44]	; (1109c <prng_reseed.constprop.0+0x78>)
   11070:	6153      	str	r3, [r2, #20]
   11072:	4b0b      	ldr	r3, [pc, #44]	; (110a0 <prng_reseed.constprop.0+0x7c>)
   11074:	6193      	str	r3, [r2, #24]
   11076:	2303      	movs	r3, #3
   11078:	f842 3f10 	str.w	r3, [r2, #16]!
   1107c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11080:	4623      	mov	r3, r4
   11082:	4808      	ldr	r0, [pc, #32]	; (110a4 <prng_reseed.constprop.0+0x80>)
   11084:	f7fb f916 	bl	c2b4 <z_impl_z_log_msg_static_create>
   11088:	f06f 0404 	mvn.w	r4, #4
   1108c:	46ad      	mov	sp, r5
		return -EIO;
	}

	return 0;
}
   1108e:	4620      	mov	r0, r4
   11090:	3728      	adds	r7, #40	; 0x28
   11092:	46bd      	mov	sp, r7
   11094:	bdb0      	pop	{r4, r5, r7, pc}
   11096:	bf00      	nop
   11098:	20009660 	.word	0x20009660
   1109c:	0002523b 	.word	0x0002523b
   110a0:	00025274 	.word	0x00025274
   110a4:	000227d8 	.word	0x000227d8

000110a8 <prng_init>:

int prng_init(void)
{
   110a8:	b5b0      	push	{r4, r5, r7, lr}
   110aa:	b082      	sub	sp, #8
   110ac:	af00      	add	r7, sp, #0
	uint8_t perso[8];
	int ret;

	ret = bt_hci_le_rand(perso, sizeof(perso));
   110ae:	2108      	movs	r1, #8
   110b0:	4638      	mov	r0, r7
   110b2:	f7fe f94d 	bl	f350 <bt_hci_le_rand>
	if (ret) {
   110b6:	4604      	mov	r4, r0
   110b8:	b9c0      	cbnz	r0, 110ec <prng_init+0x44>
		return ret;
	}

	ret = tc_hmac_prng_init(&prng, perso, sizeof(perso));
   110ba:	2208      	movs	r2, #8
   110bc:	4639      	mov	r1, r7
   110be:	480f      	ldr	r0, [pc, #60]	; (110fc <prng_init+0x54>)
   110c0:	f00c fcb4 	bl	1da2c <tc_hmac_prng_init>
	if (ret == TC_CRYPTO_FAIL) {
   110c4:	b9b0      	cbnz	r0, 110f4 <prng_init+0x4c>
		BT_ERR("Failed to initialize PRNG");
   110c6:	466d      	mov	r5, sp
   110c8:	b088      	sub	sp, #32
   110ca:	466a      	mov	r2, sp
   110cc:	4b0c      	ldr	r3, [pc, #48]	; (11100 <prng_init+0x58>)
   110ce:	6153      	str	r3, [r2, #20]
   110d0:	4b0c      	ldr	r3, [pc, #48]	; (11104 <prng_init+0x5c>)
   110d2:	6193      	str	r3, [r2, #24]
   110d4:	2303      	movs	r3, #3
   110d6:	f842 3f10 	str.w	r3, [r2, #16]!
   110da:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   110de:	4623      	mov	r3, r4
   110e0:	4809      	ldr	r0, [pc, #36]	; (11108 <prng_init+0x60>)
   110e2:	f7fb f8e7 	bl	c2b4 <z_impl_z_log_msg_static_create>
		return -EIO;
   110e6:	f06f 0404 	mvn.w	r4, #4
   110ea:	46ad      	mov	sp, r5
	}

	/* re-seed is needed after init */
	return prng_reseed(&prng);
}
   110ec:	4620      	mov	r0, r4
   110ee:	3708      	adds	r7, #8
   110f0:	46bd      	mov	sp, r7
   110f2:	bdb0      	pop	{r4, r5, r7, pc}
	return prng_reseed(&prng);
   110f4:	f7ff ff96 	bl	11024 <prng_reseed.constprop.0>
   110f8:	4604      	mov	r4, r0
   110fa:	e7f7      	b.n	110ec <prng_init+0x44>
   110fc:	20009660 	.word	0x20009660
   11100:	00025256 	.word	0x00025256
   11104:	00025280 	.word	0x00025280
   11108:	000227d8 	.word	0x000227d8

0001110c <bt_rand>:

#if defined(CONFIG_BT_HOST_CRYPTO_PRNG)
int bt_rand(void *buf, size_t len)
{
   1110c:	b538      	push	{r3, r4, r5, lr}
   1110e:	460d      	mov	r5, r1
	int ret;

	CHECKIF(buf == NULL || len == 0) {
   11110:	4604      	mov	r4, r0
   11112:	b198      	cbz	r0, 1113c <bt_rand+0x30>
   11114:	b191      	cbz	r1, 1113c <bt_rand+0x30>
		return -EINVAL;
	}

	ret = tc_hmac_prng_generate(buf, len, &prng);
   11116:	4a0b      	ldr	r2, [pc, #44]	; (11144 <bt_rand+0x38>)
   11118:	f00c fcc1 	bl	1da9e <tc_hmac_prng_generate>
	if (ret == TC_HMAC_PRNG_RESEED_REQ) {
   1111c:	1c43      	adds	r3, r0, #1
   1111e:	d107      	bne.n	11130 <bt_rand+0x24>
		ret = prng_reseed(&prng);
   11120:	f7ff ff80 	bl	11024 <prng_reseed.constprop.0>
		if (ret) {
   11124:	b948      	cbnz	r0, 1113a <bt_rand+0x2e>
			return ret;
		}

		ret = tc_hmac_prng_generate(buf, len, &prng);
   11126:	4629      	mov	r1, r5
   11128:	4620      	mov	r0, r4
   1112a:	4a06      	ldr	r2, [pc, #24]	; (11144 <bt_rand+0x38>)
   1112c:	f00c fcb7 	bl	1da9e <tc_hmac_prng_generate>

	if (ret == TC_CRYPTO_SUCCESS) {
		return 0;
	}

	return -EIO;
   11130:	2801      	cmp	r0, #1
   11132:	bf0c      	ite	eq
   11134:	2000      	moveq	r0, #0
   11136:	f06f 0004 	mvnne.w	r0, #4
}
   1113a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1113c:	f06f 0015 	mvn.w	r0, #21
   11140:	e7fb      	b.n	1113a <bt_rand+0x2e>
   11142:	bf00      	nop
   11144:	20009660 	.word	0x20009660

00011148 <bt_pub_key_is_debug>:
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   11148:	2240      	movs	r2, #64	; 0x40
{
   1114a:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   1114c:	4903      	ldr	r1, [pc, #12]	; (1115c <bt_pub_key_is_debug+0x14>)
   1114e:	f010 fc8e 	bl	21a6e <memcmp>
}
   11152:	fab0 f080 	clz	r0, r0
   11156:	0940      	lsrs	r0, r0, #5
   11158:	bd08      	pop	{r3, pc}
   1115a:	bf00      	nop
   1115c:	00025348 	.word	0x00025348

00011160 <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   11160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   11164:	4b46      	ldr	r3, [pc, #280]	; (11280 <bt_pub_key_gen+0x120>)
{
   11166:	af00      	add	r7, sp, #0
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   11168:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   1116c:	f003 0306 	and.w	r3, r3, #6
   11170:	2b06      	cmp	r3, #6
   11172:	d016      	beq.n	111a2 <bt_pub_key_gen+0x42>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
   11174:	466c      	mov	r4, sp
   11176:	b088      	sub	sp, #32
   11178:	466a      	mov	r2, sp
   1117a:	4b42      	ldr	r3, [pc, #264]	; (11284 <bt_pub_key_gen+0x124>)
   1117c:	6153      	str	r3, [r2, #20]
   1117e:	4b42      	ldr	r3, [pc, #264]	; (11288 <bt_pub_key_gen+0x128>)
   11180:	6193      	str	r3, [r2, #24]
   11182:	2303      	movs	r3, #3
   11184:	f842 3f10 	str.w	r3, [r2, #16]!
   11188:	2300      	movs	r3, #0
   1118a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1118e:	483f      	ldr	r0, [pc, #252]	; (1128c <bt_pub_key_gen+0x12c>)
   11190:	f7fb f890 	bl	c2b4 <z_impl_z_log_msg_static_create>
		return -ENOTSUP;
   11194:	f06f 0585 	mvn.w	r5, #133	; 0x85
   11198:	46a5      	mov	sp, r4
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
   1119a:	4628      	mov	r0, r5
   1119c:	46bd      	mov	sp, r7
   1119e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!new_cb) {
   111a2:	2800      	cmp	r0, #0
   111a4:	d069      	beq.n	1127a <bt_pub_key_gen+0x11a>
	return list->head;
   111a6:	4e3a      	ldr	r6, [pc, #232]	; (11290 <bt_pub_key_gen+0x130>)
   111a8:	6832      	ldr	r2, [r6, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   111aa:	b1d2      	cbz	r2, 111e2 <bt_pub_key_gen+0x82>
   111ac:	1f13      	subs	r3, r2, #4
		if (cb == new_cb) {
   111ae:	4283      	cmp	r3, r0
   111b0:	d113      	bne.n	111da <bt_pub_key_gen+0x7a>
			BT_WARN("Callback already registered");
   111b2:	466c      	mov	r4, sp
   111b4:	b088      	sub	sp, #32
   111b6:	466a      	mov	r2, sp
   111b8:	4b36      	ldr	r3, [pc, #216]	; (11294 <bt_pub_key_gen+0x134>)
   111ba:	6153      	str	r3, [r2, #20]
   111bc:	4b32      	ldr	r3, [pc, #200]	; (11288 <bt_pub_key_gen+0x128>)
   111be:	6193      	str	r3, [r2, #24]
   111c0:	2303      	movs	r3, #3
   111c2:	f842 3f10 	str.w	r3, [r2, #16]!
   111c6:	2300      	movs	r3, #0
   111c8:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   111cc:	482f      	ldr	r0, [pc, #188]	; (1128c <bt_pub_key_gen+0x12c>)
   111ce:	f7fb f871 	bl	c2b4 <z_impl_z_log_msg_static_create>
			return -EALREADY;
   111d2:	f06f 0577 	mvn.w	r5, #119	; 0x77
   111d6:	46a5      	mov	sp, r4
   111d8:	e7df      	b.n	1119a <bt_pub_key_gen+0x3a>
	return node->next;
   111da:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   111dc:	b10b      	cbz	r3, 111e2 <bt_pub_key_gen+0x82>
   111de:	3b04      	subs	r3, #4
   111e0:	e7e5      	b.n	111ae <bt_pub_key_gen+0x4e>
	parent->next = child;
   111e2:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
   111e4:	6872      	ldr	r2, [r6, #4]
	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   111e6:	1d03      	adds	r3, r0, #4
	list->head = node;
   111e8:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   111ea:	b902      	cbnz	r2, 111ee <bt_pub_key_gen+0x8e>
	list->tail = node;
   111ec:	6073      	str	r3, [r6, #4]
   111ee:	4c2a      	ldr	r4, [pc, #168]	; (11298 <bt_pub_key_gen+0x138>)
   111f0:	e8d4 8fef 	ldaex	r8, [r4]
   111f4:	f048 0320 	orr.w	r3, r8, #32
   111f8:	e8c4 3fe2 	stlex	r2, r3, [r4]
   111fc:	2a00      	cmp	r2, #0
   111fe:	d1f7      	bne.n	111f0 <bt_pub_key_gen+0x90>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   11200:	f018 0820 	ands.w	r8, r8, #32
   11204:	d001      	beq.n	1120a <bt_pub_key_gen+0xaa>
	return 0;
   11206:	2500      	movs	r5, #0
   11208:	e7c7      	b.n	1119a <bt_pub_key_gen+0x3a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1120a:	e8d4 3fef 	ldaex	r3, [r4]
   1120e:	f023 0310 	bic.w	r3, r3, #16
   11212:	e8c4 3fe2 	stlex	r2, r3, [r4]
   11216:	2a00      	cmp	r2, #0
   11218:	d1f7      	bne.n	1120a <bt_pub_key_gen+0xaa>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   1121a:	4642      	mov	r2, r8
   1121c:	4641      	mov	r1, r8
   1121e:	f242 0025 	movw	r0, #8229	; 0x2025
   11222:	f7fd ffe3 	bl	f1ec <bt_hci_cmd_send_sync>
	if (err) {
   11226:	4605      	mov	r5, r0
   11228:	2800      	cmp	r0, #0
   1122a:	d0ec      	beq.n	11206 <bt_pub_key_gen+0xa6>
		BT_ERR("Sending LE P256 Public Key command failed");
   1122c:	46e9      	mov	r9, sp
   1122e:	b088      	sub	sp, #32
   11230:	466a      	mov	r2, sp
   11232:	4b1a      	ldr	r3, [pc, #104]	; (1129c <bt_pub_key_gen+0x13c>)
   11234:	6153      	str	r3, [r2, #20]
   11236:	4b14      	ldr	r3, [pc, #80]	; (11288 <bt_pub_key_gen+0x128>)
   11238:	6193      	str	r3, [r2, #24]
   1123a:	2303      	movs	r3, #3
   1123c:	f842 3f10 	str.w	r3, [r2, #16]!
   11240:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11244:	4643      	mov	r3, r8
   11246:	4811      	ldr	r0, [pc, #68]	; (1128c <bt_pub_key_gen+0x12c>)
   11248:	f7fb f834 	bl	c2b4 <z_impl_z_log_msg_static_create>
   1124c:	46cd      	mov	sp, r9
   1124e:	e8d4 3fef 	ldaex	r3, [r4]
   11252:	f023 0320 	bic.w	r3, r3, #32
   11256:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1125a:	2a00      	cmp	r2, #0
   1125c:	d1f7      	bne.n	1124e <bt_pub_key_gen+0xee>
	return list->head;
   1125e:	6834      	ldr	r4, [r6, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   11260:	b13c      	cbz	r4, 11272 <bt_pub_key_gen+0x112>
			if (cb->func) {
   11262:	f854 3c04 	ldr.w	r3, [r4, #-4]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   11266:	3c04      	subs	r4, #4
			if (cb->func) {
   11268:	b10b      	cbz	r3, 1126e <bt_pub_key_gen+0x10e>
				cb->func(NULL);
   1126a:	2000      	movs	r0, #0
   1126c:	4798      	blx	r3
	return node->next;
   1126e:	6864      	ldr	r4, [r4, #4]
   11270:	e7f6      	b.n	11260 <bt_pub_key_gen+0x100>
	list->head = NULL;
   11272:	2300      	movs	r3, #0
	list->tail = NULL;
   11274:	e9c6 3300 	strd	r3, r3, [r6]
		return err;
   11278:	e78f      	b.n	1119a <bt_pub_key_gen+0x3a>
		return -EINVAL;
   1127a:	f06f 0515 	mvn.w	r5, #21
   1127e:	e78c      	b.n	1119a <bt_pub_key_gen+0x3a>
   11280:	20008000 	.word	0x20008000
   11284:	00025294 	.word	0x00025294
   11288:	00025339 	.word	0x00025339
   1128c:	000227e8 	.word	0x000227e8
   11290:	20009dc4 	.word	0x20009dc4
   11294:	000252b7 	.word	0x000252b7
   11298:	200080cc 	.word	0x200080cc
   1129c:	000252d7 	.word	0x000252d7

000112a0 <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   112a0:	4b04      	ldr	r3, [pc, #16]	; (112b4 <bt_pub_key_get+0x14>)
   112a2:	e8d3 3faf 	lda	r3, [r3]

	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
   112a6:	f013 0f10 	tst.w	r3, #16
}
   112aa:	4803      	ldr	r0, [pc, #12]	; (112b8 <bt_pub_key_get+0x18>)
   112ac:	bf08      	it	eq
   112ae:	2000      	moveq	r0, #0
   112b0:	4770      	bx	lr
   112b2:	bf00      	nop
   112b4:	200080cc 	.word	0x200080cc
   112b8:	2000a251 	.word	0x2000a251

000112bc <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
   112bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	if (dh_key_cb == cb) {
   112be:	4e28      	ldr	r6, [pc, #160]	; (11360 <bt_dh_key_gen+0xa4>)
{
   112c0:	4604      	mov	r4, r0
	if (dh_key_cb == cb) {
   112c2:	6833      	ldr	r3, [r6, #0]
{
   112c4:	af00      	add	r7, sp, #0
	if (dh_key_cb == cb) {
   112c6:	428b      	cmp	r3, r1
   112c8:	d043      	beq.n	11352 <bt_dh_key_gen+0x96>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   112ca:	b123      	cbz	r3, 112d6 <bt_dh_key_gen+0x1a>
		return -EBUSY;
   112cc:	f06f 040f 	mvn.w	r4, #15
		BT_WARN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   112d0:	4620      	mov	r0, r4
   112d2:	46bd      	mov	sp, r7
   112d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   112d6:	4b23      	ldr	r3, [pc, #140]	; (11364 <bt_dh_key_gen+0xa8>)
   112d8:	e8d3 2faf 	lda	r2, [r3]
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   112dc:	0692      	lsls	r2, r2, #26
   112de:	d4f5      	bmi.n	112cc <bt_dh_key_gen+0x10>
   112e0:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   112e4:	06db      	lsls	r3, r3, #27
   112e6:	d537      	bpl.n	11358 <bt_dh_key_gen+0x9c>
	dh_key_cb = cb;
   112e8:	6031      	str	r1, [r6, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   112ea:	f242 0026 	movw	r0, #8230	; 0x2026
   112ee:	2140      	movs	r1, #64	; 0x40
   112f0:	f7fd ff42 	bl	f178 <bt_hci_cmd_create>
	if (!buf) {
   112f4:	4605      	mov	r5, r0
   112f6:	b348      	cbz	r0, 1134c <bt_dh_key_gen+0x90>
	return net_buf_simple_add(&buf->b, len);
   112f8:	2140      	movs	r1, #64	; 0x40
   112fa:	3008      	adds	r0, #8
   112fc:	f00e fdc6 	bl	1fe8c <net_buf_simple_add>
   11300:	4623      	mov	r3, r4
   11302:	f104 0240 	add.w	r2, r4, #64	; 0x40
   11306:	f853 1b04 	ldr.w	r1, [r3], #4
   1130a:	4293      	cmp	r3, r2
   1130c:	f840 1b04 	str.w	r1, [r0], #4
   11310:	d1f9      	bne.n	11306 <bt_dh_key_gen+0x4a>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   11312:	2200      	movs	r2, #0
   11314:	4629      	mov	r1, r5
   11316:	f242 0026 	movw	r0, #8230	; 0x2026
   1131a:	f7fd ff67 	bl	f1ec <bt_hci_cmd_send_sync>
	if (err) {
   1131e:	4604      	mov	r4, r0
   11320:	2800      	cmp	r0, #0
   11322:	d0d5      	beq.n	112d0 <bt_dh_key_gen+0x14>
		dh_key_cb = NULL;
   11324:	2300      	movs	r3, #0
		BT_WARN("Failed to generate DHKey (err %d)", err);
   11326:	466d      	mov	r5, sp
   11328:	b088      	sub	sp, #32
   1132a:	466a      	mov	r2, sp
		dh_key_cb = NULL;
   1132c:	6033      	str	r3, [r6, #0]
		BT_WARN("Failed to generate DHKey (err %d)", err);
   1132e:	490e      	ldr	r1, [pc, #56]	; (11368 <bt_dh_key_gen+0xac>)
   11330:	6151      	str	r1, [r2, #20]
   11332:	490e      	ldr	r1, [pc, #56]	; (1136c <bt_dh_key_gen+0xb0>)
   11334:	e9c2 1406 	strd	r1, r4, [r2, #24]
   11338:	2104      	movs	r1, #4
   1133a:	f842 1f10 	str.w	r1, [r2, #16]!
   1133e:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   11342:	480b      	ldr	r0, [pc, #44]	; (11370 <bt_dh_key_gen+0xb4>)
   11344:	f7fa ffb6 	bl	c2b4 <z_impl_z_log_msg_static_create>
   11348:	46ad      	mov	sp, r5
		return err;
   1134a:	e7c1      	b.n	112d0 <bt_dh_key_gen+0x14>
		return -ENOBUFS;
   1134c:	f06f 0468 	mvn.w	r4, #104	; 0x68
   11350:	e7e8      	b.n	11324 <bt_dh_key_gen+0x68>
		return -EALREADY;
   11352:	f06f 0477 	mvn.w	r4, #119	; 0x77
   11356:	e7bb      	b.n	112d0 <bt_dh_key_gen+0x14>
		return -EADDRNOTAVAIL;
   11358:	f06f 047c 	mvn.w	r4, #124	; 0x7c
   1135c:	e7b8      	b.n	112d0 <bt_dh_key_gen+0x14>
   1135e:	bf00      	nop
   11360:	20009dc0 	.word	0x20009dc0
   11364:	200080cc 	.word	0x200080cc
   11368:	00025305 	.word	0x00025305
   1136c:	0002532b 	.word	0x0002532b
   11370:	000227e8 	.word	0x000227e8

00011374 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   11374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11376:	4b19      	ldr	r3, [pc, #100]	; (113dc <bt_hci_evt_le_pkey_complete+0x68>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   11378:	6885      	ldr	r5, [r0, #8]
   1137a:	e8d3 2fef 	ldaex	r2, [r3]
   1137e:	f022 0220 	bic.w	r2, r2, #32
   11382:	e8c3 2fe1 	stlex	r1, r2, [r3]
   11386:	2900      	cmp	r1, #0
   11388:	d1f7      	bne.n	1137a <bt_hci_evt_le_pkey_complete+0x6>

	BT_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   1138a:	782a      	ldrb	r2, [r5, #0]
   1138c:	b98a      	cbnz	r2, 113b2 <bt_hci_evt_le_pkey_complete+0x3e>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
   1138e:	4914      	ldr	r1, [pc, #80]	; (113e0 <bt_hci_evt_le_pkey_complete+0x6c>)
   11390:	1c6a      	adds	r2, r5, #1
   11392:	f105 0041 	add.w	r0, r5, #65	; 0x41
   11396:	f852 4b04 	ldr.w	r4, [r2], #4
   1139a:	4282      	cmp	r2, r0
   1139c:	f841 4b04 	str.w	r4, [r1], #4
   113a0:	d1f9      	bne.n	11396 <bt_hci_evt_le_pkey_complete+0x22>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   113a2:	e8d3 1fef 	ldaex	r1, [r3]
   113a6:	f041 0110 	orr.w	r1, r1, #16
   113aa:	e8c3 1fe2 	stlex	r2, r1, [r3]
   113ae:	2a00      	cmp	r2, #0
   113b0:	d1f7      	bne.n	113a2 <bt_hci_evt_le_pkey_complete+0x2e>
	return list->head;
   113b2:	4e0c      	ldr	r6, [pc, #48]	; (113e4 <bt_hci_evt_le_pkey_complete+0x70>)
   113b4:	6834      	ldr	r4, [r6, #0]
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   113b6:	b16c      	cbz	r4, 113d4 <bt_hci_evt_le_pkey_complete+0x60>
		if (cb->func) {
			cb->func(evt->status ? NULL : pub_key);
   113b8:	4f09      	ldr	r7, [pc, #36]	; (113e0 <bt_hci_evt_le_pkey_complete+0x6c>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   113ba:	3c04      	subs	r4, #4
		if (cb->func) {
   113bc:	6823      	ldr	r3, [r4, #0]
   113be:	b12b      	cbz	r3, 113cc <bt_hci_evt_le_pkey_complete+0x58>
			cb->func(evt->status ? NULL : pub_key);
   113c0:	782a      	ldrb	r2, [r5, #0]
   113c2:	2a00      	cmp	r2, #0
   113c4:	bf0c      	ite	eq
   113c6:	4638      	moveq	r0, r7
   113c8:	2000      	movne	r0, #0
   113ca:	4798      	blx	r3
	return node->next;
   113cc:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   113ce:	b10c      	cbz	r4, 113d4 <bt_hci_evt_le_pkey_complete+0x60>
   113d0:	3c04      	subs	r4, #4
   113d2:	e7f3      	b.n	113bc <bt_hci_evt_le_pkey_complete+0x48>
	list->head = NULL;
   113d4:	2300      	movs	r3, #0
	list->tail = NULL;
   113d6:	e9c6 3300 	strd	r3, r3, [r6]
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   113da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   113dc:	200080cc 	.word	0x200080cc
   113e0:	2000a251 	.word	0x2000a251
   113e4:	20009dc4 	.word	0x20009dc4

000113e8 <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   113e8:	4905      	ldr	r1, [pc, #20]	; (11400 <bt_hci_evt_le_dhkey_complete+0x18>)
   113ea:	680b      	ldr	r3, [r1, #0]
   113ec:	b133      	cbz	r3, 113fc <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   113ee:	6882      	ldr	r2, [r0, #8]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   113f0:	2000      	movs	r0, #0
   113f2:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
   113f4:	7811      	ldrb	r1, [r2, #0]
   113f6:	b901      	cbnz	r1, 113fa <bt_hci_evt_le_dhkey_complete+0x12>
   113f8:	1c50      	adds	r0, r2, #1
   113fa:	4718      	bx	r3
	}
}
   113fc:	4770      	bx	lr
   113fe:	bf00      	nop
   11400:	20009dc0 	.word	0x20009dc0

00011404 <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   11404:	b570      	push	{r4, r5, r6, lr}
   11406:	4604      	mov	r4, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   11408:	4b0a      	ldr	r3, [pc, #40]	; (11434 <notify_connected+0x30>)
   1140a:	681d      	ldr	r5, [r3, #0]
   1140c:	b925      	cbnz	r5, 11418 <notify_connected+0x14>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1140e:	4d0a      	ldr	r5, [pc, #40]	; (11438 <notify_connected+0x34>)
   11410:	4e0a      	ldr	r6, [pc, #40]	; (1143c <notify_connected+0x38>)
   11412:	42b5      	cmp	r5, r6
   11414:	d307      	bcc.n	11426 <notify_connected+0x22>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
   11416:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->connected) {
   11418:	682b      	ldr	r3, [r5, #0]
   1141a:	b113      	cbz	r3, 11422 <notify_connected+0x1e>
			cb->connected(conn, conn->err);
   1141c:	4620      	mov	r0, r4
   1141e:	7b21      	ldrb	r1, [r4, #12]
   11420:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   11422:	69ad      	ldr	r5, [r5, #24]
   11424:	e7f2      	b.n	1140c <notify_connected+0x8>
		if (cb->connected) {
   11426:	682b      	ldr	r3, [r5, #0]
   11428:	b113      	cbz	r3, 11430 <notify_connected+0x2c>
			cb->connected(conn, conn->err);
   1142a:	4620      	mov	r0, r4
   1142c:	7b21      	ldrb	r1, [r4, #12]
   1142e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   11430:	351c      	adds	r5, #28
   11432:	e7ee      	b.n	11412 <notify_connected+0xe>
   11434:	20009dfc 	.word	0x20009dfc
   11438:	00022764 	.word	0x00022764
   1143c:	00022780 	.word	0x00022780

00011440 <bt_conn_create_pdu_timeout.part.0>:
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
   11440:	b580      	push	{r7, lr}
   11442:	af00      	add	r7, sp, #0
		BT_WARN("Unable to allocate buffer within timeout");
   11444:	b088      	sub	sp, #32
   11446:	466a      	mov	r2, sp
   11448:	4b07      	ldr	r3, [pc, #28]	; (11468 <bt_conn_create_pdu_timeout.part.0+0x28>)
   1144a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1144e:	6153      	str	r3, [r2, #20]
   11450:	4b06      	ldr	r3, [pc, #24]	; (1146c <bt_conn_create_pdu_timeout.part.0+0x2c>)
   11452:	4807      	ldr	r0, [pc, #28]	; (11470 <bt_conn_create_pdu_timeout.part.0+0x30>)
   11454:	6193      	str	r3, [r2, #24]
   11456:	2303      	movs	r3, #3
   11458:	f842 3f10 	str.w	r3, [r2, #16]!
   1145c:	f00c ffa5 	bl	1e3aa <z_log_msg_static_create.constprop.0>
}
   11460:	2000      	movs	r0, #0
   11462:	46bd      	mov	sp, r7
   11464:	bd80      	pop	{r7, pc}
   11466:	bf00      	nop
   11468:	0002538f 	.word	0x0002538f
   1146c:	00025606 	.word	0x00025606
   11470:	000227d0 	.word	0x000227d0

00011474 <tx_notify>:
{
   11474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11478:	4604      	mov	r4, r0
	tx->cb = NULL;
   1147a:	f04f 0800 	mov.w	r8, #0
	k_fifo_put(&free_tx, tx);
   1147e:	4f14      	ldr	r7, [pc, #80]	; (114d0 <tx_notify+0x5c>)
	__asm__ volatile(
   11480:	f04f 0220 	mov.w	r2, #32
   11484:	f3ef 8311 	mrs	r3, BASEPRI
   11488:	f382 8812 	msr	BASEPRI_MAX, r2
   1148c:	f3bf 8f6f 	isb	sy
	return list->head;
   11490:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   11492:	b929      	cbnz	r1, 114a0 <tx_notify+0x2c>
	__asm__ volatile(
   11494:	f383 8811 	msr	BASEPRI, r3
   11498:	f3bf 8f6f 	isb	sy
}
   1149c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   114a0:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
   114a2:	680a      	ldr	r2, [r1, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   114a4:	4281      	cmp	r1, r0
	list->tail = node;
   114a6:	bf08      	it	eq
   114a8:	6262      	streq	r2, [r4, #36]	; 0x24
	list->head = node;
   114aa:	6222      	str	r2, [r4, #32]
   114ac:	f383 8811 	msr	BASEPRI, r3
   114b0:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   114b4:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	k_fifo_put(&free_tx, tx);
   114b8:	4638      	mov	r0, r7
	tx->user_data = NULL;
   114ba:	e9c1 8801 	strd	r8, r8, [r1, #4]
	tx->pending_no_cb = 0U;
   114be:	f8c1 800c 	str.w	r8, [r1, #12]
	k_fifo_put(&free_tx, tx);
   114c2:	f00f fe4a 	bl	2115a <k_queue_append>
		cb(conn, user_data, 0);
   114c6:	2200      	movs	r2, #0
   114c8:	4631      	mov	r1, r6
   114ca:	4620      	mov	r0, r4
   114cc:	47a8      	blx	r5
	while (1) {
   114ce:	e7d7      	b.n	11480 <tx_notify+0xc>
   114d0:	2000897c 	.word	0x2000897c

000114d4 <conn_tx_destroy>:
	tx->cb = NULL;
   114d4:	2200      	movs	r2, #0
{
   114d6:	b570      	push	{r4, r5, r6, lr}
   114d8:	4604      	mov	r4, r0
	void *user_data = tx->user_data;
   114da:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
   114de:	60ca      	str	r2, [r1, #12]
	tx->user_data = NULL;
   114e0:	e9c1 2201 	strd	r2, r2, [r1, #4]
	k_fifo_put(&free_tx, tx);
   114e4:	4805      	ldr	r0, [pc, #20]	; (114fc <conn_tx_destroy+0x28>)
   114e6:	f00f fe38 	bl	2115a <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
   114ea:	4631      	mov	r1, r6
   114ec:	4620      	mov	r0, r4
   114ee:	462b      	mov	r3, r5
}
   114f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb(conn, user_data, -ESHUTDOWN);
   114f4:	f06f 026d 	mvn.w	r2, #109	; 0x6d
   114f8:	4718      	bx	r3
   114fa:	bf00      	nop
   114fc:	2000897c 	.word	0x2000897c

00011500 <send_frag>:
{
   11500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11504:	4604      	mov	r4, r0
   11506:	460e      	mov	r6, r1
   11508:	4692      	mov	sl, r2
   1150a:	4699      	mov	r9, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   1150c:	694d      	ldr	r5, [r1, #20]
{
   1150e:	af00      	add	r7, sp, #0
	return z_impl_k_sem_take(sem, timeout);
   11510:	f04f 33ff 	mov.w	r3, #4294967295
   11514:	f04f 32ff 	mov.w	r2, #4294967295
   11518:	4846      	ldr	r0, [pc, #280]	; (11634 <send_frag+0x134>)
   1151a:	f008 fab3 	bl	19a84 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   1151e:	7b63      	ldrb	r3, [r4, #13]
   11520:	2b07      	cmp	r3, #7
   11522:	d17a      	bne.n	1161a <send_frag+0x11a>
	__asm__ volatile(
   11524:	f04f 0320 	mov.w	r3, #32
   11528:	f3ef 8211 	mrs	r2, BASEPRI
   1152c:	f383 8812 	msr	BASEPRI_MAX, r3
   11530:	f3bf 8f6f 	isb	sy
	if (tx) {
   11534:	2d00      	cmp	r5, #0
   11536:	d050      	beq.n	115da <send_frag+0xda>
	parent->next = child;
   11538:	2300      	movs	r3, #0
   1153a:	602b      	str	r3, [r5, #0]
	return list->tail;
   1153c:	69a3      	ldr	r3, [r4, #24]
Z_GENLIST_APPEND(slist, snode)
   1153e:	2b00      	cmp	r3, #0
   11540:	d148      	bne.n	115d4 <send_frag+0xd4>
	list->head = node;
   11542:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   11546:	f382 8811 	msr	BASEPRI, r2
   1154a:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   1154e:	2104      	movs	r1, #4
   11550:	f106 0008 	add.w	r0, r6, #8
   11554:	f00e fcb1 	bl	1feba <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   11558:	8823      	ldrh	r3, [r4, #0]
   1155a:	f00a 0afd 	and.w	sl, sl, #253	; 0xfd
   1155e:	ea43 3a0a 	orr.w	sl, r3, sl, lsl #12
   11562:	f8a0 a000 	strh.w	sl, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   11566:	89b3      	ldrh	r3, [r6, #12]
   11568:	3b04      	subs	r3, #4
   1156a:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1156c:	2302      	movs	r3, #2
	return bt_send(buf);
   1156e:	4630      	mov	r0, r6
   11570:	7533      	strb	r3, [r6, #20]
   11572:	f7fe f99b 	bl	f8ac <bt_send>
	if (err) {
   11576:	2800      	cmp	r0, #0
   11578:	d059      	beq.n	1162e <send_frag+0x12e>
		BT_ERR("Unable to send to driver (err %d)", err);
   1157a:	46ea      	mov	sl, sp
   1157c:	b088      	sub	sp, #32
   1157e:	466a      	mov	r2, sp
   11580:	4b2d      	ldr	r3, [pc, #180]	; (11638 <send_frag+0x138>)
   11582:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   11586:	6153      	str	r3, [r2, #20]
   11588:	4b2c      	ldr	r3, [pc, #176]	; (1163c <send_frag+0x13c>)
   1158a:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1158e:	2304      	movs	r3, #4
   11590:	482b      	ldr	r0, [pc, #172]	; (11640 <send_frag+0x140>)
   11592:	f842 3f10 	str.w	r3, [r2, #16]!
   11596:	f00c ff08 	bl	1e3aa <z_log_msg_static_create.constprop.0>
   1159a:	46d5      	mov	sp, sl
	__asm__ volatile(
   1159c:	f04f 0320 	mov.w	r3, #32
   115a0:	f3ef 8a11 	mrs	sl, BASEPRI
   115a4:	f383 8812 	msr	BASEPRI_MAX, r3
   115a8:	f3bf 8f6f 	isb	sy
		if (tx) {
   115ac:	b315      	cbz	r5, 115f4 <send_frag+0xf4>
			sys_slist_find_and_remove(&conn->tx_pending, &tx->node);
   115ae:	4629      	mov	r1, r5
   115b0:	f104 0014 	add.w	r0, r4, #20
   115b4:	f00c fed3 	bl	1e35e <sys_slist_find_and_remove>
	__asm__ volatile(
   115b8:	f38a 8811 	msr	BASEPRI, sl
   115bc:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   115c0:	481c      	ldr	r0, [pc, #112]	; (11634 <send_frag+0x134>)
   115c2:	f008 fa39 	bl	19a38 <z_impl_k_sem_give>
		tx_data(buf)->tx = NULL;
   115c6:	2300      	movs	r3, #0
		conn_tx_destroy(conn, tx);
   115c8:	4629      	mov	r1, r5
   115ca:	4620      	mov	r0, r4
		tx_data(buf)->tx = NULL;
   115cc:	6173      	str	r3, [r6, #20]
		conn_tx_destroy(conn, tx);
   115ce:	f7ff ff81 	bl	114d4 <conn_tx_destroy>
   115d2:	e01b      	b.n	1160c <send_frag+0x10c>
	parent->next = child;
   115d4:	601d      	str	r5, [r3, #0]
	list->tail = node;
   115d6:	61a5      	str	r5, [r4, #24]
}
   115d8:	e7b5      	b.n	11546 <send_frag+0x46>
	return list->tail;
   115da:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   115dc:	b133      	cbz	r3, 115ec <send_frag+0xec>
			pending_no_cb = &tail_tx->pending_no_cb;
   115de:	f103 080c 	add.w	r8, r3, #12
   115e2:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   115e4:	3301      	adds	r3, #1
   115e6:	f8c8 3000 	str.w	r3, [r8]
   115ea:	e7ac      	b.n	11546 <send_frag+0x46>
			pending_no_cb = &conn->pending_no_cb;
   115ec:	69e3      	ldr	r3, [r4, #28]
   115ee:	f104 081c 	add.w	r8, r4, #28
   115f2:	e7f7      	b.n	115e4 <send_frag+0xe4>
			(*pending_no_cb)--;
   115f4:	f8d8 3000 	ldr.w	r3, [r8]
   115f8:	3b01      	subs	r3, #1
   115fa:	f8c8 3000 	str.w	r3, [r8]
   115fe:	f38a 8811 	msr	BASEPRI, sl
   11602:	f3bf 8f6f 	isb	sy
   11606:	480b      	ldr	r0, [pc, #44]	; (11634 <send_frag+0x134>)
   11608:	f008 fa16 	bl	19a38 <z_impl_k_sem_give>
	if (always_consume) {
   1160c:	f1b9 0f00 	cmp.w	r9, #0
   11610:	d109      	bne.n	11626 <send_frag+0x126>
	return false;
   11612:	2000      	movs	r0, #0
}
   11614:	46bd      	mov	sp, r7
   11616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1161a:	4806      	ldr	r0, [pc, #24]	; (11634 <send_frag+0x134>)
   1161c:	f008 fa0c 	bl	19a38 <z_impl_k_sem_give>
	if (tx) {
   11620:	2d00      	cmp	r5, #0
   11622:	d1d0      	bne.n	115c6 <send_frag+0xc6>
   11624:	e7f2      	b.n	1160c <send_frag+0x10c>
		net_buf_unref(buf);
   11626:	4630      	mov	r0, r6
   11628:	f004 fe88 	bl	1633c <net_buf_unref>
   1162c:	e7f1      	b.n	11612 <send_frag+0x112>
	return true;
   1162e:	2001      	movs	r0, #1
   11630:	e7f0      	b.n	11614 <send_frag+0x114>
   11632:	bf00      	nop
   11634:	20008100 	.word	0x20008100
   11638:	00024749 	.word	0x00024749
   1163c:	00025633 	.word	0x00025633
   11640:	000227d0 	.word	0x000227d0

00011644 <bt_conn_get_pkts>:
}
   11644:	4800      	ldr	r0, [pc, #0]	; (11648 <bt_conn_get_pkts+0x4>)
   11646:	4770      	bx	lr
   11648:	20008100 	.word	0x20008100

0001164c <bt_conn_new>:
{
   1164c:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   1164e:	2200      	movs	r2, #0
   11650:	4604      	mov	r4, r0
   11652:	428a      	cmp	r2, r1
   11654:	d102      	bne.n	1165c <bt_conn_new+0x10>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   11656:	2400      	movs	r4, #0
}
   11658:	4620      	mov	r0, r4
   1165a:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1165c:	2001      	movs	r0, #1
   1165e:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
   11662:	e8d3 5fef 	ldaex	r5, [r3]
   11666:	2d00      	cmp	r5, #0
   11668:	d104      	bne.n	11674 <bt_conn_new+0x28>
   1166a:	e8c3 0fec 	stlex	ip, r0, [r3]
   1166e:	f1bc 0f00 	cmp.w	ip, #0
   11672:	d1f6      	bne.n	11662 <bt_conn_new+0x16>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   11674:	d002      	beq.n	1167c <bt_conn_new+0x30>
   11676:	34c0      	adds	r4, #192	; 0xc0
	for (i = 0; i < size; i++) {
   11678:	4402      	add	r2, r0
   1167a:	e7ea      	b.n	11652 <bt_conn_new+0x6>
	if (!conn) {
   1167c:	2c00      	cmp	r4, #0
   1167e:	d0ea      	beq.n	11656 <bt_conn_new+0xa>
__ssp_bos_icheck3(memset, void *, int)
   11680:	22b8      	movs	r2, #184	; 0xb8
   11682:	2100      	movs	r1, #0
   11684:	4620      	mov	r0, r4
   11686:	f010 fa0f 	bl	21aa8 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   1168a:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1168e:	4904      	ldr	r1, [pc, #16]	; (116a0 <bt_conn_new+0x54>)
   11690:	f00f fe7d 	bl	2138e <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   11694:	4903      	ldr	r1, [pc, #12]	; (116a4 <bt_conn_new+0x58>)
   11696:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1169a:	f00f fe34 	bl	21306 <k_work_init>
	return conn;
   1169e:	e7db      	b.n	11658 <bt_conn_new+0xc>
   116a0:	00011ed5 	.word	0x00011ed5
   116a4:	0001e3b1 	.word	0x0001e3b1

000116a8 <bt_conn_recv>:
{
   116a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   116ac:	4616      	mov	r6, r2
   116ae:	af00      	add	r7, sp, #0
   116b0:	4604      	mov	r4, r0
   116b2:	460d      	mov	r5, r1
	tx_notify(conn);
   116b4:	f7ff fede 	bl	11474 <tx_notify>
	switch (flags) {
   116b8:	2e01      	cmp	r6, #1
   116ba:	d038      	beq.n	1172e <bt_conn_recv+0x86>
   116bc:	2e02      	cmp	r6, #2
   116be:	d17b      	bne.n	117b8 <bt_conn_recv+0x110>
		if (conn->rx) {
   116c0:	6923      	ldr	r3, [r4, #16]
   116c2:	b193      	cbz	r3, 116ea <bt_conn_recv+0x42>
			BT_ERR("Unexpected first L2CAP frame");
   116c4:	466e      	mov	r6, sp
   116c6:	b088      	sub	sp, #32
   116c8:	466a      	mov	r2, sp
   116ca:	4b48      	ldr	r3, [pc, #288]	; (117ec <bt_conn_recv+0x144>)
   116cc:	4848      	ldr	r0, [pc, #288]	; (117f0 <bt_conn_recv+0x148>)
   116ce:	6153      	str	r3, [r2, #20]
   116d0:	4b48      	ldr	r3, [pc, #288]	; (117f4 <bt_conn_recv+0x14c>)
   116d2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   116d6:	6193      	str	r3, [r2, #24]
   116d8:	2303      	movs	r3, #3
   116da:	f842 3f10 	str.w	r3, [r2, #16]!
   116de:	f00c fe64 	bl	1e3aa <z_log_msg_static_create.constprop.0>
			bt_conn_reset_rx_state(conn);
   116e2:	4620      	mov	r0, r4
   116e4:	46b5      	mov	sp, r6
   116e6:	f00c fe66 	bl	1e3b6 <bt_conn_reset_rx_state>
		conn->rx = buf;
   116ea:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   116ec:	6921      	ldr	r1, [r4, #16]
   116ee:	8988      	ldrh	r0, [r1, #12]
   116f0:	2801      	cmp	r0, #1
   116f2:	d937      	bls.n	11764 <bt_conn_recv+0xbc>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   116f4:	688b      	ldr	r3, [r1, #8]
   116f6:	881b      	ldrh	r3, [r3, #0]
   116f8:	3304      	adds	r3, #4
   116fa:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   116fc:	4298      	cmp	r0, r3
   116fe:	d331      	bcc.n	11764 <bt_conn_recv+0xbc>
	if (conn->rx->len > acl_total_len) {
   11700:	d96d      	bls.n	117de <bt_conn_recv+0x136>
		BT_ERR("ACL len mismatch (%u > %u)",
   11702:	466d      	mov	r5, sp
   11704:	b08a      	sub	sp, #40	; 0x28
   11706:	466a      	mov	r2, sp
   11708:	6213      	str	r3, [r2, #32]
   1170a:	2305      	movs	r3, #5
   1170c:	493a      	ldr	r1, [pc, #232]	; (117f8 <bt_conn_recv+0x150>)
   1170e:	6151      	str	r1, [r2, #20]
   11710:	4938      	ldr	r1, [pc, #224]	; (117f4 <bt_conn_recv+0x14c>)
   11712:	e9c2 1006 	strd	r1, r0, [r2, #24]
   11716:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   1171a:	4835      	ldr	r0, [pc, #212]	; (117f0 <bt_conn_recv+0x148>)
   1171c:	f842 3f10 	str.w	r3, [r2, #16]!
   11720:	f00c fe43 	bl	1e3aa <z_log_msg_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   11724:	4620      	mov	r0, r4
   11726:	46ad      	mov	sp, r5
   11728:	f00c fe45 	bl	1e3b6 <bt_conn_reset_rx_state>
		return;
   1172c:	e01a      	b.n	11764 <bt_conn_recv+0xbc>
		if (!conn->rx) {
   1172e:	6920      	ldr	r0, [r4, #16]
   11730:	b998      	cbnz	r0, 1175a <bt_conn_recv+0xb2>
			BT_ERR("Unexpected L2CAP continuation");
   11732:	466e      	mov	r6, sp
   11734:	b088      	sub	sp, #32
   11736:	466a      	mov	r2, sp
   11738:	4b30      	ldr	r3, [pc, #192]	; (117fc <bt_conn_recv+0x154>)
   1173a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1173e:	6153      	str	r3, [r2, #20]
   11740:	4b2c      	ldr	r3, [pc, #176]	; (117f4 <bt_conn_recv+0x14c>)
   11742:	482b      	ldr	r0, [pc, #172]	; (117f0 <bt_conn_recv+0x148>)
   11744:	6193      	str	r3, [r2, #24]
   11746:	2303      	movs	r3, #3
   11748:	f842 3f10 	str.w	r3, [r2, #16]!
   1174c:	f00c fe2d 	bl	1e3aa <z_log_msg_static_create.constprop.0>
   11750:	46b5      	mov	sp, r6
		bt_conn_reset_rx_state(conn);
   11752:	4620      	mov	r0, r4
   11754:	f00c fe2f 	bl	1e3b6 <bt_conn_reset_rx_state>
   11758:	e001      	b.n	1175e <bt_conn_recv+0xb6>
		if (!buf->len) {
   1175a:	89ae      	ldrh	r6, [r5, #12]
   1175c:	b92e      	cbnz	r6, 1176a <bt_conn_recv+0xc2>
		net_buf_unref(buf);
   1175e:	4628      	mov	r0, r5
   11760:	f004 fdec 	bl	1633c <net_buf_unref>
}
   11764:	46bd      	mov	sp, r7
   11766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   1176a:	3008      	adds	r0, #8
   1176c:	f00e fbd2 	bl	1ff14 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   11770:	4286      	cmp	r6, r0
   11772:	d917      	bls.n	117a4 <bt_conn_recv+0xfc>
			BT_ERR("Not enough buffer space for L2CAP data");
   11774:	466e      	mov	r6, sp
   11776:	b088      	sub	sp, #32
   11778:	466a      	mov	r2, sp
   1177a:	4b21      	ldr	r3, [pc, #132]	; (11800 <bt_conn_recv+0x158>)
   1177c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11780:	6153      	str	r3, [r2, #20]
   11782:	4b1c      	ldr	r3, [pc, #112]	; (117f4 <bt_conn_recv+0x14c>)
   11784:	481a      	ldr	r0, [pc, #104]	; (117f0 <bt_conn_recv+0x148>)
   11786:	6193      	str	r3, [r2, #24]
   11788:	2303      	movs	r3, #3
   1178a:	f842 3f10 	str.w	r3, [r2, #16]!
   1178e:	f00c fe0c 	bl	1e3aa <z_log_msg_static_create.constprop.0>
			bt_l2cap_recv(conn, conn->rx, false);
   11792:	2200      	movs	r2, #0
   11794:	46b5      	mov	sp, r6
   11796:	4620      	mov	r0, r4
   11798:	6921      	ldr	r1, [r4, #16]
   1179a:	f000 fde9 	bl	12370 <bt_l2cap_recv>
			conn->rx = NULL;
   1179e:	2300      	movs	r3, #0
   117a0:	6123      	str	r3, [r4, #16]
			net_buf_unref(buf);
   117a2:	e7dc      	b.n	1175e <bt_conn_recv+0xb6>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   117a4:	6920      	ldr	r0, [r4, #16]
   117a6:	89aa      	ldrh	r2, [r5, #12]
   117a8:	68a9      	ldr	r1, [r5, #8]
   117aa:	3008      	adds	r0, #8
   117ac:	f00e fb74 	bl	1fe98 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   117b0:	4628      	mov	r0, r5
   117b2:	f004 fdc3 	bl	1633c <net_buf_unref>
		break;
   117b6:	e799      	b.n	116ec <bt_conn_recv+0x44>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   117b8:	46e8      	mov	r8, sp
   117ba:	b088      	sub	sp, #32
   117bc:	466b      	mov	r3, sp
   117be:	4a11      	ldr	r2, [pc, #68]	; (11804 <bt_conn_recv+0x15c>)
   117c0:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   117c4:	615a      	str	r2, [r3, #20]
   117c6:	4a0b      	ldr	r2, [pc, #44]	; (117f4 <bt_conn_recv+0x14c>)
   117c8:	4809      	ldr	r0, [pc, #36]	; (117f0 <bt_conn_recv+0x148>)
	switch (flags) {
   117ca:	e9c3 2606 	strd	r2, r6, [r3, #24]
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   117ce:	461a      	mov	r2, r3
   117d0:	2304      	movs	r3, #4
   117d2:	f842 3f10 	str.w	r3, [r2, #16]!
   117d6:	f00c fde8 	bl	1e3aa <z_log_msg_static_create.constprop.0>
   117da:	46c5      	mov	sp, r8
   117dc:	e7b9      	b.n	11752 <bt_conn_recv+0xaa>
	conn->rx = NULL;
   117de:	2300      	movs	r3, #0
	bt_l2cap_recv(conn, buf, true);
   117e0:	2201      	movs	r2, #1
   117e2:	4620      	mov	r0, r4
	conn->rx = NULL;
   117e4:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   117e6:	f000 fdc3 	bl	12370 <bt_l2cap_recv>
		__ASSERT(false, "Invalid connection type %u", conn->type);
   117ea:	e7bb      	b.n	11764 <bt_conn_recv+0xbc>
   117ec:	000253bc 	.word	0x000253bc
   117f0:	000227d0 	.word	0x000227d0
   117f4:	0002564d 	.word	0x0002564d
   117f8:	0002544c 	.word	0x0002544c
   117fc:	000253dd 	.word	0x000253dd
   11800:	000253ff 	.word	0x000253ff
   11804:	0002542a 	.word	0x0002542a

00011808 <bt_conn_send_cb>:
{
   11808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1180c:	4699      	mov	r9, r3
	if (conn->state != BT_CONN_CONNECTED) {
   1180e:	7b43      	ldrb	r3, [r0, #13]
{
   11810:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   11812:	2b07      	cmp	r3, #7
{
   11814:	4688      	mov	r8, r1
   11816:	4616      	mov	r6, r2
   11818:	af00      	add	r7, sp, #0
	if (conn->state != BT_CONN_CONNECTED) {
   1181a:	d012      	beq.n	11842 <bt_conn_send_cb+0x3a>
		BT_ERR("not connected!");
   1181c:	466c      	mov	r4, sp
   1181e:	b088      	sub	sp, #32
   11820:	466a      	mov	r2, sp
   11822:	4b31      	ldr	r3, [pc, #196]	; (118e8 <bt_conn_send_cb+0xe0>)
   11824:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11828:	6153      	str	r3, [r2, #20]
   1182a:	4b30      	ldr	r3, [pc, #192]	; (118ec <bt_conn_send_cb+0xe4>)
   1182c:	4830      	ldr	r0, [pc, #192]	; (118f0 <bt_conn_send_cb+0xe8>)
   1182e:	6193      	str	r3, [r2, #24]
   11830:	2303      	movs	r3, #3
   11832:	f842 3f10 	str.w	r3, [r2, #16]!
   11836:	f00c fdb8 	bl	1e3aa <z_log_msg_static_create.constprop.0>
   1183a:	46a5      	mov	sp, r4
		return -ENOTCONN;
   1183c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   11840:	e023      	b.n	1188a <bt_conn_send_cb+0x82>
	if (cb) {
   11842:	2a00      	cmp	r2, #0
   11844:	d04d      	beq.n	118e2 <bt_conn_send_cb+0xda>
	return z_impl_z_current_get();
   11846:	f008 fe35 	bl	1a4b4 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   1184a:	4b2a      	ldr	r3, [pc, #168]	; (118f4 <bt_conn_send_cb+0xec>)
   1184c:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   1184e:	482a      	ldr	r0, [pc, #168]	; (118f8 <bt_conn_send_cb+0xf0>)
   11850:	bf07      	ittee	eq
   11852:	2200      	moveq	r2, #0
   11854:	2300      	moveq	r3, #0
   11856:	f04f 32ff 	movne.w	r2, #4294967295
   1185a:	f04f 33ff 	movne.w	r3, #4294967295
   1185e:	f008 f8b7 	bl	199d0 <z_impl_k_queue_get>
   11862:	4604      	mov	r4, r0
		if (!tx) {
   11864:	b9a0      	cbnz	r0, 11890 <bt_conn_send_cb+0x88>
			BT_ERR("Unable to allocate TX context");
   11866:	466c      	mov	r4, sp
   11868:	b088      	sub	sp, #32
   1186a:	466a      	mov	r2, sp
   1186c:	4b23      	ldr	r3, [pc, #140]	; (118fc <bt_conn_send_cb+0xf4>)
   1186e:	4820      	ldr	r0, [pc, #128]	; (118f0 <bt_conn_send_cb+0xe8>)
   11870:	6153      	str	r3, [r2, #20]
   11872:	4b1e      	ldr	r3, [pc, #120]	; (118ec <bt_conn_send_cb+0xe4>)
   11874:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11878:	6193      	str	r3, [r2, #24]
   1187a:	2303      	movs	r3, #3
   1187c:	f842 3f10 	str.w	r3, [r2, #16]!
   11880:	f00c fd93 	bl	1e3aa <z_log_msg_static_create.constprop.0>
			return -ENOBUFS;
   11884:	f06f 0068 	mvn.w	r0, #104	; 0x68
   11888:	46a5      	mov	sp, r4
}
   1188a:	46bd      	mov	sp, r7
   1188c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   11890:	7b6b      	ldrb	r3, [r5, #13]
   11892:	2b07      	cmp	r3, #7
   11894:	d018      	beq.n	118c8 <bt_conn_send_cb+0xc0>
			BT_WARN("Disconnected while allocating context");
   11896:	466d      	mov	r5, sp
   11898:	b088      	sub	sp, #32
   1189a:	466a      	mov	r2, sp
   1189c:	4b18      	ldr	r3, [pc, #96]	; (11900 <bt_conn_send_cb+0xf8>)
   1189e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   118a2:	6153      	str	r3, [r2, #20]
   118a4:	4b11      	ldr	r3, [pc, #68]	; (118ec <bt_conn_send_cb+0xe4>)
   118a6:	4812      	ldr	r0, [pc, #72]	; (118f0 <bt_conn_send_cb+0xe8>)
   118a8:	6193      	str	r3, [r2, #24]
   118aa:	2303      	movs	r3, #3
   118ac:	f842 3f10 	str.w	r3, [r2, #16]!
   118b0:	f00c fd7b 	bl	1e3aa <z_log_msg_static_create.constprop.0>
	tx->cb = NULL;
   118b4:	2300      	movs	r3, #0
   118b6:	46ad      	mov	sp, r5
	k_fifo_put(&free_tx, tx);
   118b8:	4621      	mov	r1, r4
	tx->user_data = NULL;
   118ba:	e9c4 3301 	strd	r3, r3, [r4, #4]
	k_fifo_put(&free_tx, tx);
   118be:	480e      	ldr	r0, [pc, #56]	; (118f8 <bt_conn_send_cb+0xf0>)
	tx->pending_no_cb = 0U;
   118c0:	60e3      	str	r3, [r4, #12]
	k_fifo_put(&free_tx, tx);
   118c2:	f00f fc4a 	bl	2115a <k_queue_append>
}
   118c6:	e7b9      	b.n	1183c <bt_conn_send_cb+0x34>
		tx->pending_no_cb = 0U;
   118c8:	2300      	movs	r3, #0
		tx->user_data = user_data;
   118ca:	e9c0 6901 	strd	r6, r9, [r0, #4]
		tx->pending_no_cb = 0U;
   118ce:	60c3      	str	r3, [r0, #12]
	net_buf_put(&conn->tx_queue, buf);
   118d0:	f105 0038 	add.w	r0, r5, #56	; 0x38
   118d4:	4641      	mov	r1, r8
		tx_data(buf)->tx = tx;
   118d6:	f8c8 4014 	str.w	r4, [r8, #20]
	net_buf_put(&conn->tx_queue, buf);
   118da:	f00e faa4 	bl	1fe26 <net_buf_put>
	return 0;
   118de:	2000      	movs	r0, #0
   118e0:	e7d3      	b.n	1188a <bt_conn_send_cb+0x82>
   118e2:	4614      	mov	r4, r2
   118e4:	e7f4      	b.n	118d0 <bt_conn_send_cb+0xc8>
   118e6:	bf00      	nop
   118e8:	0002546b 	.word	0x0002546b
   118ec:	0002563d 	.word	0x0002563d
   118f0:	000227d0 	.word	0x000227d0
   118f4:	20009c08 	.word	0x20009c08
   118f8:	2000897c 	.word	0x2000897c
   118fc:	0002547e 	.word	0x0002547e
   11900:	000254a0 	.word	0x000254a0

00011904 <bt_conn_prepare_events>:
{
   11904:	b570      	push	{r4, r5, r6, lr}
   11906:	4604      	mov	r4, r0
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_POLL_SIGNAL_INIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_init(sig);
   11908:	4817      	ldr	r0, [pc, #92]	; (11968 <bt_conn_prepare_events+0x64>)
   1190a:	f010 f88d 	bl	21a28 <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   1190e:	2200      	movs	r2, #0
   11910:	2101      	movs	r1, #1
   11912:	4620      	mov	r0, r4
   11914:	4b14      	ldr	r3, [pc, #80]	; (11968 <bt_conn_prepare_events+0x64>)
   11916:	f010 f86a 	bl	219ee <k_poll_event_init>
		if (!conn_prepare_events(conn, &events[ev_count])) {
   1191a:	f104 0614 	add.w	r6, r4, #20
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1191e:	4b13      	ldr	r3, [pc, #76]	; (1196c <bt_conn_prepare_events+0x68>)
   11920:	e8d3 2faf 	lda	r2, [r3]
	if (!atomic_get(&conn->ref)) {
   11924:	b90a      	cbnz	r2, 1192a <bt_conn_prepare_events+0x26>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   11926:	2001      	movs	r0, #1
}
   11928:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   1192a:	f1a3 05b8 	sub.w	r5, r3, #184	; 0xb8
   1192e:	f813 3cab 	ldrb.w	r3, [r3, #-171]
   11932:	b953      	cbnz	r3, 1194a <bt_conn_prepare_events+0x46>
   11934:	f06f 0140 	mvn.w	r1, #64	; 0x40
   11938:	1d28      	adds	r0, r5, #4
   1193a:	f00c fd2b 	bl	1e394 <atomic_and>
   1193e:	0643      	lsls	r3, r0, #25
   11940:	d503      	bpl.n	1194a <bt_conn_prepare_events+0x46>
		conn_cleanup(conn);
   11942:	4628      	mov	r0, r5
   11944:	f00c fd40 	bl	1e3c8 <conn_cleanup>
		return -ENOTCONN;
   11948:	e7ed      	b.n	11926 <bt_conn_prepare_events+0x22>
	if (conn->state != BT_CONN_CONNECTED) {
   1194a:	7b6b      	ldrb	r3, [r5, #13]
   1194c:	2b07      	cmp	r3, #7
   1194e:	d1ea      	bne.n	11926 <bt_conn_prepare_events+0x22>
	k_poll_event_init(&events[0],
   11950:	4630      	mov	r0, r6
   11952:	4b07      	ldr	r3, [pc, #28]	; (11970 <bt_conn_prepare_events+0x6c>)
   11954:	2200      	movs	r2, #0
   11956:	2104      	movs	r1, #4
   11958:	f010 f849 	bl	219ee <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   1195c:	2301      	movs	r3, #1
			ev_count++;
   1195e:	2002      	movs	r0, #2
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   11960:	f884 3020 	strb.w	r3, [r4, #32]
	return ev_count;
   11964:	e7e0      	b.n	11928 <bt_conn_prepare_events+0x24>
   11966:	bf00      	nop
   11968:	200083e0 	.word	0x200083e0
   1196c:	20009850 	.word	0x20009850
   11970:	200097d0 	.word	0x200097d0

00011974 <bt_conn_lookup_handle>:
{
   11974:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   11976:	2101      	movs	r1, #1
   11978:	4801      	ldr	r0, [pc, #4]	; (11980 <bt_conn_lookup_handle+0xc>)
   1197a:	f00c bd70 	b.w	1e45e <conn_lookup_handle>
   1197e:	bf00      	nop
   11980:	20009798 	.word	0x20009798

00011984 <bt_conn_set_state>:
{
   11984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == state) {
   11986:	7b46      	ldrb	r6, [r0, #13]
{
   11988:	4604      	mov	r4, r0
	if (conn->state == state) {
   1198a:	428e      	cmp	r6, r1
{
   1198c:	460d      	mov	r5, r1
   1198e:	af00      	add	r7, sp, #0
	if (conn->state == state) {
   11990:	d11b      	bne.n	119ca <bt_conn_set_state+0x46>
	switch (state) {
   11992:	2e08      	cmp	r6, #8
   11994:	bf98      	it	ls
   11996:	4b6c      	ldrls	r3, [pc, #432]	; (11b48 <bt_conn_set_state+0x1c4>)
		BT_WARN("no transition %s", state2str(state));
   11998:	466c      	mov	r4, sp
   1199a:	b08a      	sub	sp, #40	; 0x28
   1199c:	bf94      	ite	ls
   1199e:	f853 3026 	ldrls.w	r3, [r3, r6, lsl #2]
	if (conn->state == state) {
   119a2:	4b6a      	ldrhi	r3, [pc, #424]	; (11b4c <bt_conn_set_state+0x1c8>)
		BT_WARN("no transition %s", state2str(state));
   119a4:	466a      	mov	r2, sp
   119a6:	496a      	ldr	r1, [pc, #424]	; (11b50 <bt_conn_set_state+0x1cc>)
   119a8:	6151      	str	r1, [r2, #20]
   119aa:	496a      	ldr	r1, [pc, #424]	; (11b54 <bt_conn_set_state+0x1d0>)
   119ac:	e9c2 1306 	strd	r1, r3, [r2, #24]
   119b0:	f240 3301 	movw	r3, #769	; 0x301
   119b4:	f44f 5112 	mov.w	r1, #9344	; 0x2480
   119b8:	8413      	strh	r3, [r2, #32]
   119ba:	4b67      	ldr	r3, [pc, #412]	; (11b58 <bt_conn_set_state+0x1d4>)
   119bc:	f842 3f10 	str.w	r3, [r2, #16]!
		BT_WARN("no valid (%u) state was set", state);
   119c0:	4866      	ldr	r0, [pc, #408]	; (11b5c <bt_conn_set_state+0x1d8>)
   119c2:	f00c fcf2 	bl	1e3aa <z_log_msg_static_create.constprop.0>
   119c6:	46a5      	mov	sp, r4
   119c8:	e040      	b.n	11a4c <bt_conn_set_state+0xc8>
	conn->state = state;
   119ca:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   119cc:	b926      	cbnz	r6, 119d8 <bt_conn_set_state+0x54>
		if (conn->type != BT_CONN_TYPE_ISO) {
   119ce:	7883      	ldrb	r3, [r0, #2]
   119d0:	2b08      	cmp	r3, #8
   119d2:	d001      	beq.n	119d8 <bt_conn_set_state+0x54>
			bt_conn_ref(conn);
   119d4:	f00c fd1b 	bl	1e40e <bt_conn_ref>
	switch (conn->state) {
   119d8:	7b63      	ldrb	r3, [r4, #13]
   119da:	2b08      	cmp	r3, #8
   119dc:	f200 80ae 	bhi.w	11b3c <bt_conn_set_state+0x1b8>
   119e0:	e8df f003 	tbb	[pc, r3]
   119e4:	34340536 	.word	0x34340536
   119e8:	1c343434 	.word	0x1c343434
   119ec:	34          	.byte	0x34
   119ed:	00          	.byte	0x00
		tx->pending_no_cb = 0U;
   119ee:	2600      	movs	r6, #0
	z_impl_k_sem_give(sem);
   119f0:	4d5b      	ldr	r5, [pc, #364]	; (11b60 <bt_conn_set_state+0x1dc>)
	__asm__ volatile(
   119f2:	f04f 0220 	mov.w	r2, #32
   119f6:	f3ef 8311 	mrs	r3, BASEPRI
   119fa:	f382 8812 	msr	BASEPRI_MAX, r2
   119fe:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   11a02:	69e2      	ldr	r2, [r4, #28]
   11a04:	2a00      	cmp	r2, #0
   11a06:	d075      	beq.n	11af4 <bt_conn_set_state+0x170>
			conn->pending_no_cb--;
   11a08:	3a01      	subs	r2, #1
   11a0a:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
   11a0c:	f383 8811 	msr	BASEPRI, r3
   11a10:	f3bf 8f6f 	isb	sy
   11a14:	4628      	mov	r0, r5
   11a16:	f008 f80f 	bl	19a38 <z_impl_k_sem_give>
}
   11a1a:	e7ea      	b.n	119f2 <bt_conn_set_state+0x6e>
		if (conn->type == BT_CONN_TYPE_SCO) {
   11a1c:	78a3      	ldrb	r3, [r4, #2]
   11a1e:	2b04      	cmp	r3, #4
   11a20:	d014      	beq.n	11a4c <bt_conn_set_state+0xc8>
	z_impl_k_queue_init(queue);
   11a22:	f104 0038 	add.w	r0, r4, #56	; 0x38
   11a26:	f00f fb8c 	bl	21142 <z_impl_k_queue_init>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   11a2a:	2100      	movs	r1, #0
   11a2c:	484d      	ldr	r0, [pc, #308]	; (11b64 <bt_conn_set_state+0x1e0>)
   11a2e:	f009 f827 	bl	1aa80 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   11a32:	2300      	movs	r3, #0
	list->tail = NULL;
   11a34:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   11a38:	78e3      	ldrb	r3, [r4, #3]
   11a3a:	2b01      	cmp	r3, #1
   11a3c:	d106      	bne.n	11a4c <bt_conn_set_state+0xc8>
			k_work_schedule(&conn->deferred_work,
   11a3e:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   11a42:	2300      	movs	r3, #0
   11a44:	f104 0058 	add.w	r0, r4, #88	; 0x58
   11a48:	f008 fa18 	bl	19e7c <k_work_schedule>
}
   11a4c:	46bd      	mov	sp, r7
   11a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
   11a50:	78a3      	ldrb	r3, [r4, #2]
   11a52:	2b04      	cmp	r3, #4
   11a54:	d103      	bne.n	11a5e <bt_conn_set_state+0xda>
			bt_conn_unref(conn);
   11a56:	4620      	mov	r0, r4
   11a58:	f00c fced 	bl	1e436 <bt_conn_unref>
			break;
   11a5c:	e7f6      	b.n	11a4c <bt_conn_set_state+0xc8>
		switch (old_state) {
   11a5e:	2e08      	cmp	r6, #8
   11a60:	d8f4      	bhi.n	11a4c <bt_conn_set_state+0xc8>
   11a62:	a301      	add	r3, pc, #4	; (adr r3, 11a68 <bt_conn_set_state+0xe4>)
   11a64:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   11a68:	00011ad9 	.word	0x00011ad9
   11a6c:	00011a8d 	.word	0x00011a8d
   11a70:	00011acb 	.word	0x00011acb
   11a74:	00011a57 	.word	0x00011a57
   11a78:	00011a57 	.word	0x00011a57
   11a7c:	00011acb 	.word	0x00011acb
   11a80:	00011acb 	.word	0x00011acb
   11a84:	00011a4d 	.word	0x00011a4d
   11a88:	00011ad9 	.word	0x00011ad9
			tx_notify(conn);
   11a8c:	4620      	mov	r0, r4
   11a8e:	f7ff fcf1 	bl	11474 <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   11a92:	78a3      	ldrb	r3, [r4, #2]
   11a94:	2b01      	cmp	r3, #1
   11a96:	d10a      	bne.n	11aae <bt_conn_set_state+0x12a>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   11a98:	f104 0558 	add.w	r5, r4, #88	; 0x58
   11a9c:	4628      	mov	r0, r5
   11a9e:	f00f fc82 	bl	213a6 <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   11aa2:	f010 0f0c 	tst.w	r0, #12
   11aa6:	d002      	beq.n	11aae <bt_conn_set_state+0x12a>
				k_work_cancel_delayable(&conn->deferred_work);
   11aa8:	4628      	mov	r0, r5
   11aaa:	f00f fc7e 	bl	213aa <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11aae:	3404      	adds	r4, #4
   11ab0:	e8d4 3fef 	ldaex	r3, [r4]
   11ab4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11ab8:	e8c4 3fe2 	stlex	r2, r3, [r4]
   11abc:	2a00      	cmp	r2, #0
   11abe:	d1f7      	bne.n	11ab0 <bt_conn_set_state+0x12c>
   11ac0:	2100      	movs	r1, #0
   11ac2:	4828      	ldr	r0, [pc, #160]	; (11b64 <bt_conn_set_state+0x1e0>)
   11ac4:	f008 ffdc 	bl	1aa80 <z_impl_k_poll_signal_raise>
   11ac8:	e7c0      	b.n	11a4c <bt_conn_set_state+0xc8>
			if (conn->err) {
   11aca:	7b23      	ldrb	r3, [r4, #12]
   11acc:	2b00      	cmp	r3, #0
   11ace:	d0c2      	beq.n	11a56 <bt_conn_set_state+0xd2>
				notify_connected(conn);
   11ad0:	4620      	mov	r0, r4
   11ad2:	f7ff fc97 	bl	11404 <notify_connected>
   11ad6:	e7be      	b.n	11a56 <bt_conn_set_state+0xd2>
			BT_WARN("Invalid (%u) old state", state);
   11ad8:	466c      	mov	r4, sp
   11ada:	b088      	sub	sp, #32
   11adc:	466a      	mov	r2, sp
   11ade:	4b22      	ldr	r3, [pc, #136]	; (11b68 <bt_conn_set_state+0x1e4>)
		BT_WARN("no valid (%u) state was set", state);
   11ae0:	6153      	str	r3, [r2, #20]
   11ae2:	4b1c      	ldr	r3, [pc, #112]	; (11b54 <bt_conn_set_state+0x1d0>)
   11ae4:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   11ae8:	e9c2 3506 	strd	r3, r5, [r2, #24]
   11aec:	2304      	movs	r3, #4
   11aee:	f842 3f10 	str.w	r3, [r2, #16]!
   11af2:	e765      	b.n	119c0 <bt_conn_set_state+0x3c>
	return list->head;
   11af4:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   11af6:	b921      	cbnz	r1, 11b02 <bt_conn_set_state+0x17e>
   11af8:	f383 8811 	msr	BASEPRI, r3
   11afc:	f3bf 8f6f 	isb	sy
		if (!node) {
   11b00:	e7a4      	b.n	11a4c <bt_conn_set_state+0xc8>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   11b02:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   11b04:	680a      	ldr	r2, [r1, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   11b06:	4281      	cmp	r1, r0
	list->tail = node;
   11b08:	bf08      	it	eq
   11b0a:	61a2      	streq	r2, [r4, #24]
	list->head = node;
   11b0c:	6162      	str	r2, [r4, #20]
   11b0e:	f383 8811 	msr	BASEPRI, r3
   11b12:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   11b16:	f04f 0220 	mov.w	r2, #32
   11b1a:	f3ef 8311 	mrs	r3, BASEPRI
   11b1e:	f382 8812 	msr	BASEPRI_MAX, r2
   11b22:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   11b26:	68ca      	ldr	r2, [r1, #12]
   11b28:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   11b2a:	60ce      	str	r6, [r1, #12]
	__asm__ volatile(
   11b2c:	f383 8811 	msr	BASEPRI, r3
   11b30:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   11b34:	4620      	mov	r0, r4
   11b36:	f7ff fccd 	bl	114d4 <conn_tx_destroy>
   11b3a:	e76b      	b.n	11a14 <bt_conn_set_state+0x90>
		BT_WARN("no valid (%u) state was set", state);
   11b3c:	466c      	mov	r4, sp
   11b3e:	b088      	sub	sp, #32
   11b40:	466a      	mov	r2, sp
   11b42:	4b0a      	ldr	r3, [pc, #40]	; (11b6c <bt_conn_set_state+0x1e8>)
   11b44:	e7cc      	b.n	11ae0 <bt_conn_set_state+0x15c>
   11b46:	bf00      	nop
   11b48:	00022f48 	.word	0x00022f48
   11b4c:	000254ca 	.word	0x000254ca
   11b50:	000254d4 	.word	0x000254d4
   11b54:	00025621 	.word	0x00025621
   11b58:	01000004 	.word	0x01000004
   11b5c:	000227d0 	.word	0x000227d0
   11b60:	20008100 	.word	0x20008100
   11b64:	200083e0 	.word	0x200083e0
   11b68:	000254e9 	.word	0x000254e9
   11b6c:	00025504 	.word	0x00025504

00011b70 <bt_conn_index>:
		index = conn - acl_conns;
   11b70:	4b03      	ldr	r3, [pc, #12]	; (11b80 <bt_conn_index+0x10>)
   11b72:	1ac0      	subs	r0, r0, r3
   11b74:	4b03      	ldr	r3, [pc, #12]	; (11b84 <bt_conn_index+0x14>)
   11b76:	1180      	asrs	r0, r0, #6
   11b78:	4358      	muls	r0, r3
}
   11b7a:	b2c0      	uxtb	r0, r0
   11b7c:	4770      	bx	lr
   11b7e:	bf00      	nop
   11b80:	20009798 	.word	0x20009798
   11b84:	aaaaaaab 	.word	0xaaaaaaab

00011b88 <bt_conn_create_pdu_timeout>:
{
   11b88:	b538      	push	{r3, r4, r5, lr}
   11b8a:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
   11b8c:	4908      	ldr	r1, [pc, #32]	; (11bb0 <bt_conn_create_pdu_timeout+0x28>)
   11b8e:	2800      	cmp	r0, #0
   11b90:	bf08      	it	eq
   11b92:	4608      	moveq	r0, r1
   11b94:	f00e f8da 	bl	1fd4c <net_buf_alloc_fixed>
	if (!buf) {
   11b98:	4604      	mov	r4, r0
   11b9a:	b918      	cbnz	r0, 11ba4 <bt_conn_create_pdu_timeout+0x1c>
}
   11b9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11ba0:	f7ff bc4e 	b.w	11440 <bt_conn_create_pdu_timeout.part.0>
	net_buf_simple_reserve(&buf->b, reserve);
   11ba4:	1d69      	adds	r1, r5, #5
   11ba6:	3008      	adds	r0, #8
   11ba8:	f00e f8ef 	bl	1fd8a <net_buf_simple_reserve>
   11bac:	4620      	mov	r0, r4
   11bae:	bd38      	pop	{r3, r4, r5, pc}
   11bb0:	200089c0 	.word	0x200089c0

00011bb4 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   11bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11bb6:	4604      	mov	r4, r0
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   11bb8:	3004      	adds	r0, #4
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11bba:	e8d0 3faf 	lda	r3, [r0]
   11bbe:	05db      	lsls	r3, r3, #23
   11bc0:	d511      	bpl.n	11be6 <notify_le_param_updated+0x32>
	    conn->le.interval >= conn->le.interval_min &&
   11bc2:	f8b4 309e 	ldrh.w	r3, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   11bc6:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	; 0xa0
   11bca:	429a      	cmp	r2, r3
   11bcc:	d80b      	bhi.n	11be6 <notify_le_param_updated+0x32>
	    conn->le.interval >= conn->le.interval_min &&
   11bce:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	; 0xa2
   11bd2:	429a      	cmp	r2, r3
   11bd4:	d307      	bcc.n	11be6 <notify_le_param_updated+0x32>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   11bd6:	e9d4 2329 	ldrd	r2, r3, [r4, #164]	; 0xa4
   11bda:	429a      	cmp	r2, r3
   11bdc:	d103      	bne.n	11be6 <notify_le_param_updated+0x32>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   11bde:	f46f 7180 	mvn.w	r1, #256	; 0x100
   11be2:	f00c fbd7 	bl	1e394 <atomic_and>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   11be6:	4b10      	ldr	r3, [pc, #64]	; (11c28 <notify_le_param_updated+0x74>)
   11be8:	681d      	ldr	r5, [r3, #0]
   11bea:	b925      	cbnz	r5, 11bf6 <notify_le_param_updated+0x42>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   11bec:	4d0f      	ldr	r5, [pc, #60]	; (11c2c <notify_le_param_updated+0x78>)
   11bee:	4f10      	ldr	r7, [pc, #64]	; (11c30 <notify_le_param_updated+0x7c>)
   11bf0:	42bd      	cmp	r5, r7
   11bf2:	d30c      	bcc.n	11c0e <notify_le_param_updated+0x5a>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   11bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
   11bf6:	68ee      	ldr	r6, [r5, #12]
   11bf8:	b13e      	cbz	r6, 11c0a <notify_le_param_updated+0x56>
			cb->le_param_updated(conn, conn->le.interval,
   11bfa:	4620      	mov	r0, r4
   11bfc:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   11c00:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   11c04:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   11c08:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   11c0a:	69ad      	ldr	r5, [r5, #24]
   11c0c:	e7ed      	b.n	11bea <notify_le_param_updated+0x36>
		if (cb->le_param_updated) {
   11c0e:	68ee      	ldr	r6, [r5, #12]
   11c10:	b13e      	cbz	r6, 11c22 <notify_le_param_updated+0x6e>
			cb->le_param_updated(conn, conn->le.interval,
   11c12:	4620      	mov	r0, r4
   11c14:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   11c18:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   11c1c:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   11c20:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   11c22:	351c      	adds	r5, #28
   11c24:	e7e4      	b.n	11bf0 <notify_le_param_updated+0x3c>
   11c26:	bf00      	nop
   11c28:	20009dfc 	.word	0x20009dfc
   11c2c:	00022764 	.word	0x00022764
   11c30:	00022780 	.word	0x00022780

00011c34 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   11c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11c38:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   11c3a:	4608      	mov	r0, r1
{
   11c3c:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   11c3e:	f00c f930 	bl	1dea2 <bt_le_conn_params_valid>
   11c42:	4605      	mov	r5, r0
   11c44:	b918      	cbnz	r0, 11c4e <le_param_req+0x1a>
		return false;
   11c46:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   11c48:	4628      	mov	r0, r5
   11c4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   11c4e:	4b13      	ldr	r3, [pc, #76]	; (11c9c <le_param_req+0x68>)
   11c50:	681e      	ldr	r6, [r3, #0]
   11c52:	b946      	cbnz	r6, 11c66 <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   11c54:	4e12      	ldr	r6, [pc, #72]	; (11ca0 <le_param_req+0x6c>)
   11c56:	f8df 804c 	ldr.w	r8, [pc, #76]	; 11ca4 <le_param_req+0x70>
   11c5a:	4546      	cmp	r6, r8
   11c5c:	d2f4      	bcs.n	11c48 <le_param_req+0x14>
		if (!cb->le_param_req) {
   11c5e:	68b3      	ldr	r3, [r6, #8]
   11c60:	b983      	cbnz	r3, 11c84 <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   11c62:	361c      	adds	r6, #28
   11c64:	e7f9      	b.n	11c5a <le_param_req+0x26>
		if (!cb->le_param_req) {
   11c66:	68b3      	ldr	r3, [r6, #8]
   11c68:	b90b      	cbnz	r3, 11c6e <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
   11c6a:	69b6      	ldr	r6, [r6, #24]
   11c6c:	e7f1      	b.n	11c52 <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   11c6e:	4621      	mov	r1, r4
   11c70:	4638      	mov	r0, r7
   11c72:	4798      	blx	r3
   11c74:	2800      	cmp	r0, #0
   11c76:	d0e6      	beq.n	11c46 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   11c78:	4620      	mov	r0, r4
   11c7a:	f00c f912 	bl	1dea2 <bt_le_conn_params_valid>
   11c7e:	2800      	cmp	r0, #0
   11c80:	d1f3      	bne.n	11c6a <le_param_req+0x36>
   11c82:	e7e0      	b.n	11c46 <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   11c84:	4621      	mov	r1, r4
   11c86:	4638      	mov	r0, r7
   11c88:	4798      	blx	r3
   11c8a:	2800      	cmp	r0, #0
   11c8c:	d0db      	beq.n	11c46 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   11c8e:	4620      	mov	r0, r4
   11c90:	f00c f907 	bl	1dea2 <bt_le_conn_params_valid>
   11c94:	2800      	cmp	r0, #0
   11c96:	d1e4      	bne.n	11c62 <le_param_req+0x2e>
   11c98:	e7d5      	b.n	11c46 <le_param_req+0x12>
   11c9a:	bf00      	nop
   11c9c:	20009dfc 	.word	0x20009dfc
   11ca0:	00022764 	.word	0x00022764
   11ca4:	00022780 	.word	0x00022780

00011ca8 <bt_conn_identity_resolved>:

#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
   11ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   11cac:	78c3      	ldrb	r3, [r0, #3]
{
   11cae:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   11cb0:	b973      	cbnz	r3, 11cd0 <bt_conn_identity_resolved+0x28>
		rpa = &conn->le.resp_addr;
   11cb2:	f100 0696 	add.w	r6, r0, #150	; 0x96
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   11cb6:	4b10      	ldr	r3, [pc, #64]	; (11cf8 <bt_conn_identity_resolved+0x50>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   11cb8:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
   11cbc:	681d      	ldr	r5, [r3, #0]
   11cbe:	b955      	cbnz	r5, 11cd6 <bt_conn_identity_resolved+0x2e>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   11cc0:	4d0e      	ldr	r5, [pc, #56]	; (11cfc <bt_conn_identity_resolved+0x54>)
   11cc2:	4f0f      	ldr	r7, [pc, #60]	; (11d00 <bt_conn_identity_resolved+0x58>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   11cc4:	f104 0888 	add.w	r8, r4, #136	; 0x88
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   11cc8:	42bd      	cmp	r5, r7
   11cca:	d30c      	bcc.n	11ce6 <bt_conn_identity_resolved+0x3e>
		}
	}
}
   11ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rpa = &conn->le.init_addr;
   11cd0:	f100 068f 	add.w	r6, r0, #143	; 0x8f
   11cd4:	e7ef      	b.n	11cb6 <bt_conn_identity_resolved+0xe>
		if (cb->identity_resolved) {
   11cd6:	692b      	ldr	r3, [r5, #16]
   11cd8:	b11b      	cbz	r3, 11ce2 <bt_conn_identity_resolved+0x3a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   11cda:	463a      	mov	r2, r7
   11cdc:	4631      	mov	r1, r6
   11cde:	4620      	mov	r0, r4
   11ce0:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   11ce2:	69ad      	ldr	r5, [r5, #24]
   11ce4:	e7eb      	b.n	11cbe <bt_conn_identity_resolved+0x16>
		if (cb->identity_resolved) {
   11ce6:	692b      	ldr	r3, [r5, #16]
   11ce8:	b11b      	cbz	r3, 11cf2 <bt_conn_identity_resolved+0x4a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   11cea:	4642      	mov	r2, r8
   11cec:	4631      	mov	r1, r6
   11cee:	4620      	mov	r0, r4
   11cf0:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   11cf2:	351c      	adds	r5, #28
   11cf4:	e7e8      	b.n	11cc8 <bt_conn_identity_resolved+0x20>
   11cf6:	bf00      	nop
   11cf8:	20009dfc 	.word	0x20009dfc
   11cfc:	00022764 	.word	0x00022764
   11d00:	00022780 	.word	0x00022780

00011d04 <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
   11d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	conn->required_sec_level = conn->sec_level;
   11d06:	7a43      	ldrb	r3, [r0, #9]
{
   11d08:	4604      	mov	r4, r0
	conn->required_sec_level = conn->sec_level;
   11d0a:	7283      	strb	r3, [r0, #10]
{
   11d0c:	4616      	mov	r6, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
	bt_l2cap_security_changed(conn, hci_err);
   11d0e:	f00c fcb6 	bl	1e67e <bt_l2cap_security_changed>
	if (IS_ENABLED(CONFIG_BT_ISO_CENTRAL)) {
		bt_iso_security_changed(conn, hci_err);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   11d12:	4b0c      	ldr	r3, [pc, #48]	; (11d44 <bt_conn_security_changed+0x40>)
   11d14:	681d      	ldr	r5, [r3, #0]
   11d16:	b925      	cbnz	r5, 11d22 <bt_conn_security_changed+0x1e>
		if (cb->security_changed) {
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   11d18:	4d0b      	ldr	r5, [pc, #44]	; (11d48 <bt_conn_security_changed+0x44>)
   11d1a:	4f0c      	ldr	r7, [pc, #48]	; (11d4c <bt_conn_security_changed+0x48>)
   11d1c:	42bd      	cmp	r5, r7
   11d1e:	d308      	bcc.n	11d32 <bt_conn_security_changed+0x2e>
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
   11d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->security_changed) {
   11d22:	696b      	ldr	r3, [r5, #20]
   11d24:	b11b      	cbz	r3, 11d2e <bt_conn_security_changed+0x2a>
			cb->security_changed(conn, conn->sec_level, err);
   11d26:	4632      	mov	r2, r6
   11d28:	4620      	mov	r0, r4
   11d2a:	7a61      	ldrb	r1, [r4, #9]
   11d2c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   11d2e:	69ad      	ldr	r5, [r5, #24]
   11d30:	e7f1      	b.n	11d16 <bt_conn_security_changed+0x12>
		if (cb->security_changed) {
   11d32:	696b      	ldr	r3, [r5, #20]
   11d34:	b11b      	cbz	r3, 11d3e <bt_conn_security_changed+0x3a>
			cb->security_changed(conn, conn->sec_level, err);
   11d36:	4632      	mov	r2, r6
   11d38:	4620      	mov	r0, r4
   11d3a:	7a61      	ldrb	r1, [r4, #9]
   11d3c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   11d3e:	351c      	adds	r5, #28
   11d40:	e7ec      	b.n	11d1c <bt_conn_security_changed+0x18>
   11d42:	bf00      	nop
   11d44:	20009dfc 	.word	0x20009dfc
   11d48:	00022764 	.word	0x00022764
   11d4c:	00022780 	.word	0x00022780

00011d50 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   11d50:	b538      	push	{r3, r4, r5, lr}
   11d52:	4605      	mov	r5, r0
   11d54:	460c      	mov	r4, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   11d56:	480b      	ldr	r0, [pc, #44]	; (11d84 <bt_conn_add_le+0x34>)
   11d58:	2101      	movs	r1, #1
   11d5a:	f7ff fc77 	bl	1164c <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   11d5e:	b180      	cbz	r0, 11d82 <bt_conn_add_le+0x32>
		return NULL;
	}

	conn->id = id;
   11d60:	7205      	strb	r5, [r0, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   11d62:	6823      	ldr	r3, [r4, #0]
   11d64:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
   11d68:	88a3      	ldrh	r3, [r4, #4]
   11d6a:	f8a0 308c 	strh.w	r3, [r0, #140]	; 0x8c
   11d6e:	79a3      	ldrb	r3, [r4, #6]
   11d70:	f880 308e 	strb.w	r3, [r0, #142]	; 0x8e
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
   11d74:	2301      	movs	r3, #1
   11d76:	7243      	strb	r3, [r0, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   11d78:	7283      	strb	r3, [r0, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   11d7a:	7083      	strb	r3, [r0, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   11d7c:	4b02      	ldr	r3, [pc, #8]	; (11d88 <bt_conn_add_le+0x38>)
   11d7e:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   11d82:	bd38      	pop	{r3, r4, r5, pc}
   11d84:	20009798 	.word	0x20009798
   11d88:	00280018 	.word	0x00280018

00011d8c <bt_conn_lookup_addr_le>:

	return bt_addr_le_eq(peer, &conn->le.init_addr);
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   11d8c:	b570      	push	{r4, r5, r6, lr}
   11d8e:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   11d90:	480a      	ldr	r0, [pc, #40]	; (11dbc <bt_conn_lookup_addr_le+0x30>)
{
   11d92:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   11d94:	f00c fb3b 	bl	1e40e <bt_conn_ref>
   11d98:	4604      	mov	r4, r0

		if (!conn) {
   11d9a:	b120      	cbz	r0, 11da6 <bt_conn_lookup_addr_le+0x1a>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   11d9c:	7883      	ldrb	r3, [r0, #2]
   11d9e:	2b01      	cmp	r3, #1
   11da0:	d004      	beq.n	11dac <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
			bt_conn_unref(conn);
   11da2:	f00c fb48 	bl	1e436 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   11da6:	2400      	movs	r4, #0
}
   11da8:	4620      	mov	r0, r4
   11daa:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   11dac:	4632      	mov	r2, r6
   11dae:	4629      	mov	r1, r5
   11db0:	f00c fbce 	bl	1e550 <bt_conn_is_peer_addr_le>
   11db4:	2800      	cmp	r0, #0
   11db6:	d1f7      	bne.n	11da8 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   11db8:	4620      	mov	r0, r4
   11dba:	e7f2      	b.n	11da2 <bt_conn_lookup_addr_le+0x16>
   11dbc:	20009798 	.word	0x20009798

00011dc0 <bt_conn_exists_le>:
{
   11dc0:	b5b0      	push	{r4, r5, r7, lr}
   11dc2:	af00      	add	r7, sp, #0
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   11dc4:	f7ff ffe2 	bl	11d8c <bt_conn_lookup_addr_le>
	if (conn) {
   11dc8:	4604      	mov	r4, r0
   11dca:	b1f8      	cbz	r0, 11e0c <bt_conn_exists_le+0x4c>
		BT_WARN("Found valid connection in %s state",
   11dcc:	7b43      	ldrb	r3, [r0, #13]
   11dce:	466d      	mov	r5, sp
   11dd0:	2b08      	cmp	r3, #8
   11dd2:	bf98      	it	ls
   11dd4:	4a0e      	ldrls	r2, [pc, #56]	; (11e10 <bt_conn_exists_le+0x50>)
   11dd6:	b08a      	sub	sp, #40	; 0x28
   11dd8:	bf94      	ite	ls
   11dda:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   11dde:	4b0d      	ldrhi	r3, [pc, #52]	; (11e14 <bt_conn_exists_le+0x54>)
   11de0:	466a      	mov	r2, sp
   11de2:	490d      	ldr	r1, [pc, #52]	; (11e18 <bt_conn_exists_le+0x58>)
   11de4:	480d      	ldr	r0, [pc, #52]	; (11e1c <bt_conn_exists_le+0x5c>)
   11de6:	6151      	str	r1, [r2, #20]
   11de8:	490d      	ldr	r1, [pc, #52]	; (11e20 <bt_conn_exists_le+0x60>)
   11dea:	e9c2 1306 	strd	r1, r3, [r2, #24]
   11dee:	f240 3301 	movw	r3, #769	; 0x301
   11df2:	8413      	strh	r3, [r2, #32]
   11df4:	4b0b      	ldr	r3, [pc, #44]	; (11e24 <bt_conn_exists_le+0x64>)
   11df6:	f44f 5112 	mov.w	r1, #9344	; 0x2480
   11dfa:	f842 3f10 	str.w	r3, [r2, #16]!
   11dfe:	f00c fad4 	bl	1e3aa <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
   11e02:	4620      	mov	r0, r4
   11e04:	46ad      	mov	sp, r5
   11e06:	f00c fb16 	bl	1e436 <bt_conn_unref>
		return true;
   11e0a:	2001      	movs	r0, #1
}
   11e0c:	46bd      	mov	sp, r7
   11e0e:	bdb0      	pop	{r4, r5, r7, pc}
   11e10:	00022f48 	.word	0x00022f48
   11e14:	000254ca 	.word	0x000254ca
   11e18:	00025524 	.word	0x00025524
   11e1c:	000227d0 	.word	0x000227d0
   11e20:	000255f4 	.word	0x000255f4
   11e24:	01000004 	.word	0x01000004

00011e28 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   11e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11e2a:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   11e2c:	480e      	ldr	r0, [pc, #56]	; (11e68 <bt_conn_lookup_state_le+0x40>)
{
   11e2e:	460e      	mov	r6, r1
   11e30:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   11e32:	f00c faec 	bl	1e40e <bt_conn_ref>

		if (!conn) {
   11e36:	4604      	mov	r4, r0
   11e38:	b120      	cbz	r0, 11e44 <bt_conn_lookup_state_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   11e3a:	7883      	ldrb	r3, [r0, #2]
   11e3c:	2b01      	cmp	r3, #1
   11e3e:	d003      	beq.n	11e48 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   11e40:	f00c faf9 	bl	1e436 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   11e44:	2400      	movs	r4, #0
   11e46:	e00d      	b.n	11e64 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   11e48:	b136      	cbz	r6, 11e58 <bt_conn_lookup_state_le+0x30>
   11e4a:	4632      	mov	r2, r6
   11e4c:	4629      	mov	r1, r5
   11e4e:	f00c fb7f 	bl	1e550 <bt_conn_is_peer_addr_le>
   11e52:	b908      	cbnz	r0, 11e58 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   11e54:	4620      	mov	r0, r4
   11e56:	e7f3      	b.n	11e40 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   11e58:	7b63      	ldrb	r3, [r4, #13]
   11e5a:	42bb      	cmp	r3, r7
   11e5c:	d1fa      	bne.n	11e54 <bt_conn_lookup_state_le+0x2c>
   11e5e:	7a23      	ldrb	r3, [r4, #8]
   11e60:	42ab      	cmp	r3, r5
   11e62:	d1f7      	bne.n	11e54 <bt_conn_lookup_state_le+0x2c>
}
   11e64:	4620      	mov	r0, r4
   11e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11e68:	20009798 	.word	0x20009798

00011e6c <send_conn_le_param_update>:
{
   11e6c:	b538      	push	{r3, r4, r5, lr}
   11e6e:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   11e70:	4608      	mov	r0, r1
{
   11e72:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   11e74:	f00c f815 	bl	1dea2 <bt_le_conn_params_valid>
   11e78:	b338      	cbz	r0, 11eca <send_conn_le_param_update+0x5e>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   11e7a:	4b15      	ldr	r3, [pc, #84]	; (11ed0 <send_conn_le_param_update+0x64>)
   11e7c:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   11e80:	0799      	lsls	r1, r3, #30
   11e82:	d407      	bmi.n	11e94 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   11e84:	78e3      	ldrb	r3, [r4, #3]
   11e86:	b173      	cbz	r3, 11ea6 <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
   11e88:	4629      	mov	r1, r5
   11e8a:	4620      	mov	r0, r4
}
   11e8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   11e90:	f000 bab0 	b.w	123f4 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   11e94:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
   11e98:	079a      	lsls	r2, r3, #30
   11e9a:	d5f3      	bpl.n	11e84 <send_conn_le_param_update+0x18>
   11e9c:	1d23      	adds	r3, r4, #4
   11e9e:	e8d3 3faf 	lda	r3, [r3]
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   11ea2:	059b      	lsls	r3, r3, #22
   11ea4:	d4ee      	bmi.n	11e84 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   11ea6:	4629      	mov	r1, r5
   11ea8:	4620      	mov	r0, r4
   11eaa:	f00c fb73 	bl	1e594 <bt_conn_le_conn_update>
		if (rc == 0) {
   11eae:	b958      	cbnz	r0, 11ec8 <send_conn_le_param_update+0x5c>
			conn->le.interval_min = param->interval_min;
   11eb0:	882b      	ldrh	r3, [r5, #0]
   11eb2:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
   11eb6:	886b      	ldrh	r3, [r5, #2]
   11eb8:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
   11ebc:	88ab      	ldrh	r3, [r5, #4]
   11ebe:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   11ec2:	88eb      	ldrh	r3, [r5, #6]
   11ec4:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   11ec8:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   11eca:	f06f 0015 	mvn.w	r0, #21
   11ece:	e7fb      	b.n	11ec8 <send_conn_le_param_update+0x5c>
   11ed0:	20008000 	.word	0x20008000

00011ed4 <deferred_work>:
{
   11ed4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   11ed6:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
   11eda:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   11edc:	f1a0 0558 	sub.w	r5, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   11ee0:	b9fb      	cbnz	r3, 11f22 <deferred_work+0x4e>
		bt_l2cap_disconnected(conn);
   11ee2:	4628      	mov	r0, r5
   11ee4:	f00c fbb3 	bl	1e64e <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   11ee8:	4b20      	ldr	r3, [pc, #128]	; (11f6c <deferred_work+0x98>)
   11eea:	681e      	ldr	r6, [r3, #0]
   11eec:	b94e      	cbnz	r6, 11f02 <deferred_work+0x2e>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   11eee:	4e20      	ldr	r6, [pc, #128]	; (11f70 <deferred_work+0x9c>)
   11ef0:	4f20      	ldr	r7, [pc, #128]	; (11f74 <deferred_work+0xa0>)
   11ef2:	42be      	cmp	r6, r7
   11ef4:	d30d      	bcc.n	11f12 <deferred_work+0x3e>
		bt_conn_unref(conn);
   11ef6:	4628      	mov	r0, r5
}
   11ef8:	b003      	add	sp, #12
   11efa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   11efe:	f00c ba9a 	b.w	1e436 <bt_conn_unref>
		if (cb->disconnected) {
   11f02:	6873      	ldr	r3, [r6, #4]
   11f04:	b11b      	cbz	r3, 11f0e <deferred_work+0x3a>
			cb->disconnected(conn, conn->err);
   11f06:	4628      	mov	r0, r5
   11f08:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   11f0c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   11f0e:	69b6      	ldr	r6, [r6, #24]
   11f10:	e7ec      	b.n	11eec <deferred_work+0x18>
		if (cb->disconnected) {
   11f12:	6873      	ldr	r3, [r6, #4]
   11f14:	b11b      	cbz	r3, 11f1e <deferred_work+0x4a>
			cb->disconnected(conn, conn->err);
   11f16:	4628      	mov	r0, r5
   11f18:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   11f1c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   11f1e:	361c      	adds	r6, #28
   11f20:	e7e7      	b.n	11ef2 <deferred_work+0x1e>
	if (conn->type != BT_CONN_TYPE_LE) {
   11f22:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   11f26:	2b01      	cmp	r3, #1
   11f28:	d118      	bne.n	11f5c <deferred_work+0x88>
	if (atomic_test_and_clear_bit(conn->flags,
   11f2a:	f1a0 0654 	sub.w	r6, r0, #84	; 0x54
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   11f2e:	f46f 7180 	mvn.w	r1, #256	; 0x100
   11f32:	4630      	mov	r0, r6
   11f34:	f00c fa2e 	bl	1e394 <atomic_and>
   11f38:	05c3      	lsls	r3, r0, #23
   11f3a:	d511      	bpl.n	11f60 <deferred_work+0x8c>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   11f3c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   11f3e:	9300      	str	r3, [sp, #0]
   11f40:	6d23      	ldr	r3, [r4, #80]	; 0x50
   11f42:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
   11f44:	4669      	mov	r1, sp
   11f46:	4628      	mov	r0, r5
   11f48:	f7ff ff90 	bl	11e6c <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11f4c:	e8d6 3fef 	ldaex	r3, [r6]
   11f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   11f54:	e8c6 3fe2 	stlex	r2, r3, [r6]
   11f58:	2a00      	cmp	r2, #0
   11f5a:	d1f7      	bne.n	11f4c <deferred_work+0x78>
}
   11f5c:	b003      	add	sp, #12
   11f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		param = BT_LE_CONN_PARAM(
   11f60:	466b      	mov	r3, sp
   11f62:	4a05      	ldr	r2, [pc, #20]	; (11f78 <deferred_work+0xa4>)
   11f64:	6810      	ldr	r0, [r2, #0]
   11f66:	6851      	ldr	r1, [r2, #4]
   11f68:	c303      	stmia	r3!, {r0, r1}
   11f6a:	e7eb      	b.n	11f44 <deferred_work+0x70>
   11f6c:	20009dfc 	.word	0x20009dfc
   11f70:	00022764 	.word	0x00022764
   11f74:	00022780 	.word	0x00022780
   11f78:	00022954 	.word	0x00022954

00011f7c <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   11f7c:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   11f7e:	4801      	ldr	r0, [pc, #4]	; (11f84 <bt_conn_create_frag_timeout+0x8>)
   11f80:	f7ff be02 	b.w	11b88 <bt_conn_create_pdu_timeout>
   11f84:	20008a44 	.word	0x20008a44

00011f88 <create_frag>:
{
   11f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11f8c:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   11f8e:	f04f 33ff 	mov.w	r3, #4294967295
   11f92:	f04f 32ff 	mov.w	r2, #4294967295
   11f96:	2000      	movs	r0, #0
{
   11f98:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   11f9a:	f7ff ffef 	bl	11f7c <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   11f9e:	7b73      	ldrb	r3, [r6, #13]
		frag = bt_conn_create_frag(0);
   11fa0:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   11fa2:	2b07      	cmp	r3, #7
   11fa4:	f04f 0600 	mov.w	r6, #0
   11fa8:	d005      	beq.n	11fb6 <create_frag+0x2e>
		net_buf_unref(frag);
   11faa:	f004 f9c7 	bl	1633c <net_buf_unref>
		return NULL;
   11fae:	4635      	mov	r5, r6
}
   11fb0:	4628      	mov	r0, r5
   11fb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   11fb6:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
   11fb8:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   11fbc:	4e0c      	ldr	r6, [pc, #48]	; (11ff0 <create_frag+0x68>)
   11fbe:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   11fc0:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   11fc4:	f00d ffa6 	bl	1ff14 <net_buf_simple_tailroom>
   11fc8:	4580      	cmp	r8, r0
   11fca:	d20c      	bcs.n	11fe6 <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   11fcc:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   11fd0:	f854 1f08 	ldr.w	r1, [r4, #8]!
   11fd4:	4632      	mov	r2, r6
   11fd6:	4638      	mov	r0, r7
   11fd8:	f00d ff5e 	bl	1fe98 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   11fdc:	4631      	mov	r1, r6
   11fde:	4620      	mov	r0, r4
   11fe0:	f00d ff7c 	bl	1fedc <net_buf_simple_pull>
   11fe4:	e7e4      	b.n	11fb0 <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   11fe6:	4638      	mov	r0, r7
   11fe8:	f00d ff94 	bl	1ff14 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   11fec:	b286      	uxth	r6, r0
   11fee:	e7ef      	b.n	11fd0 <create_frag+0x48>
   11ff0:	20008000 	.word	0x20008000

00011ff4 <bt_conn_process_tx>:
{
   11ff4:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   11ff6:	7b43      	ldrb	r3, [r0, #13]
{
   11ff8:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   11ffa:	b95b      	cbnz	r3, 12014 <bt_conn_process_tx+0x20>
   11ffc:	f06f 0140 	mvn.w	r1, #64	; 0x40
   12000:	3004      	adds	r0, #4
   12002:	f00c f9c7 	bl	1e394 <atomic_and>
   12006:	0643      	lsls	r3, r0, #25
   12008:	d504      	bpl.n	12014 <bt_conn_process_tx+0x20>
		conn_cleanup(conn);
   1200a:	4620      	mov	r0, r4
}
   1200c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   12010:	f00c b9da 	b.w	1e3c8 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   12014:	2200      	movs	r2, #0
   12016:	2300      	movs	r3, #0
   12018:	f104 0038 	add.w	r0, r4, #56	; 0x38
   1201c:	f00d fe9b 	bl	1fd56 <net_buf_get>
	BT_ASSERT(buf);
   12020:	4605      	mov	r5, r0
   12022:	b960      	cbnz	r0, 1203e <bt_conn_process_tx+0x4a>
   12024:	f44f 7347 	mov.w	r3, #796	; 0x31c
   12028:	4a22      	ldr	r2, [pc, #136]	; (120b4 <bt_conn_process_tx+0xc0>)
   1202a:	4923      	ldr	r1, [pc, #140]	; (120b8 <bt_conn_process_tx+0xc4>)
   1202c:	4823      	ldr	r0, [pc, #140]	; (120bc <bt_conn_process_tx+0xc8>)
   1202e:	f00a fc8e 	bl	1c94e <assert_print>
   12032:	4040      	eors	r0, r0
   12034:	f380 8811 	msr	BASEPRI, r0
   12038:	f04f 0003 	mov.w	r0, #3
   1203c:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   1203e:	4e20      	ldr	r6, [pc, #128]	; (120c0 <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
   12040:	89aa      	ldrh	r2, [r5, #12]
   12042:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   12046:	429a      	cmp	r2, r3
   12048:	d807      	bhi.n	1205a <bt_conn_process_tx+0x66>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   1204a:	2300      	movs	r3, #0
   1204c:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   1204e:	4629      	mov	r1, r5
   12050:	4620      	mov	r0, r4
   12052:	f7ff fa55 	bl	11500 <send_frag>
	if (!send_buf(conn, buf)) {
   12056:	b968      	cbnz	r0, 12074 <bt_conn_process_tx+0x80>
   12058:	e005      	b.n	12066 <bt_conn_process_tx+0x72>
	frag = create_frag(conn, buf);
   1205a:	4629      	mov	r1, r5
   1205c:	4620      	mov	r0, r4
   1205e:	f7ff ff93 	bl	11f88 <create_frag>
	if (!frag) {
   12062:	4601      	mov	r1, r0
   12064:	b938      	cbnz	r0, 12076 <bt_conn_process_tx+0x82>
		tx_data(buf)->tx = NULL;
   12066:	2300      	movs	r3, #0
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   12068:	696e      	ldr	r6, [r5, #20]
		net_buf_unref(buf);
   1206a:	4628      	mov	r0, r5
		tx_data(buf)->tx = NULL;
   1206c:	616b      	str	r3, [r5, #20]
		net_buf_unref(buf);
   1206e:	f004 f965 	bl	1633c <net_buf_unref>
		if (tx) {
   12072:	b9ce      	cbnz	r6, 120a8 <bt_conn_process_tx+0xb4>
}
   12074:	bd70      	pop	{r4, r5, r6, pc}
	if (!send_frag(conn, frag, FRAG_START, true)) {
   12076:	2301      	movs	r3, #1
   12078:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   1207a:	4620      	mov	r0, r4
   1207c:	f7ff fa40 	bl	11500 <send_frag>
   12080:	2800      	cmp	r0, #0
   12082:	d0f0      	beq.n	12066 <bt_conn_process_tx+0x72>
	while (buf->len > conn_mtu(conn)) {
   12084:	89aa      	ldrh	r2, [r5, #12]
   12086:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   1208a:	429a      	cmp	r2, r3
   1208c:	d802      	bhi.n	12094 <bt_conn_process_tx+0xa0>
	return send_frag(conn, buf, FRAG_END, false);
   1208e:	2300      	movs	r3, #0
   12090:	2203      	movs	r2, #3
   12092:	e7dc      	b.n	1204e <bt_conn_process_tx+0x5a>
		frag = create_frag(conn, buf);
   12094:	4629      	mov	r1, r5
   12096:	4620      	mov	r0, r4
   12098:	f7ff ff76 	bl	11f88 <create_frag>
		if (!frag) {
   1209c:	4601      	mov	r1, r0
   1209e:	2800      	cmp	r0, #0
   120a0:	d0e1      	beq.n	12066 <bt_conn_process_tx+0x72>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   120a2:	2301      	movs	r3, #1
   120a4:	461a      	mov	r2, r3
   120a6:	e7e8      	b.n	1207a <bt_conn_process_tx+0x86>
			conn_tx_destroy(conn, tx);
   120a8:	4631      	mov	r1, r6
   120aa:	4620      	mov	r0, r4
}
   120ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			conn_tx_destroy(conn, tx);
   120b0:	f7ff ba10 	b.w	114d4 <conn_tx_destroy>
   120b4:	0002554b 	.word	0x0002554b
   120b8:	0002430c 	.word	0x0002430c
   120bc:	00024494 	.word	0x00024494
   120c0:	20008000 	.word	0x20008000

000120c4 <bt_conn_auth_cb_register>:
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
   120c4:	4b0b      	ldr	r3, [pc, #44]	; (120f4 <bt_conn_auth_cb_register+0x30>)
   120c6:	b158      	cbz	r0, 120e0 <bt_conn_auth_cb_register+0x1c>
		bt_auth = NULL;
		return 0;
	}

	if (bt_auth) {
   120c8:	681a      	ldr	r2, [r3, #0]
   120ca:	b962      	cbnz	r2, 120e6 <bt_conn_auth_cb_register+0x22>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
   120cc:	6902      	ldr	r2, [r0, #16]
   120ce:	b93a      	cbnz	r2, 120e0 <bt_conn_auth_cb_register+0x1c>
   120d0:	6802      	ldr	r2, [r0, #0]
   120d2:	b95a      	cbnz	r2, 120ec <bt_conn_auth_cb_register+0x28>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
   120d4:	6842      	ldr	r2, [r0, #4]
   120d6:	b94a      	cbnz	r2, 120ec <bt_conn_auth_cb_register+0x28>
   120d8:	6882      	ldr	r2, [r0, #8]
   120da:	b93a      	cbnz	r2, 120ec <bt_conn_auth_cb_register+0x28>
   120dc:	6942      	ldr	r2, [r0, #20]
   120de:	b92a      	cbnz	r2, 120ec <bt_conn_auth_cb_register+0x28>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
   120e0:	6018      	str	r0, [r3, #0]
		return 0;
   120e2:	2000      	movs	r0, #0
   120e4:	4770      	bx	lr
		return -EALREADY;
   120e6:	f06f 0077 	mvn.w	r0, #119	; 0x77
   120ea:	4770      	bx	lr
		return -EINVAL;
   120ec:	f06f 0015 	mvn.w	r0, #21
	return 0;
}
   120f0:	4770      	bx	lr
   120f2:	bf00      	nop
   120f4:	20009e08 	.word	0x20009e08

000120f8 <bt_conn_lookup_index>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

struct bt_conn *bt_conn_lookup_index(uint8_t index)
{
	if (index >= ARRAY_SIZE(acl_conns)) {
   120f8:	b910      	cbnz	r0, 12100 <bt_conn_lookup_index+0x8>
		return NULL;
	}

	return bt_conn_ref(&acl_conns[index]);
   120fa:	4802      	ldr	r0, [pc, #8]	; (12104 <bt_conn_lookup_index+0xc>)
   120fc:	f00c b987 	b.w	1e40e <bt_conn_ref>
}
   12100:	2000      	movs	r0, #0
   12102:	4770      	bx	lr
   12104:	20009798 	.word	0x20009798

00012108 <bt_conn_init>:

int bt_conn_init(void)
{
   12108:	b510      	push	{r4, lr}
	z_impl_k_queue_init(queue);
   1210a:	480c      	ldr	r0, [pc, #48]	; (1213c <bt_conn_init+0x34>)
   1210c:	f00f f819 	bl	21142 <z_impl_k_queue_init>
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   12110:	490b      	ldr	r1, [pc, #44]	; (12140 <bt_conn_init+0x38>)
   12112:	480a      	ldr	r0, [pc, #40]	; (1213c <bt_conn_init+0x34>)
   12114:	f00f f821 	bl	2115a <k_queue_append>
   12118:	490a      	ldr	r1, [pc, #40]	; (12144 <bt_conn_init+0x3c>)
   1211a:	4808      	ldr	r0, [pc, #32]	; (1213c <bt_conn_init+0x34>)
   1211c:	f00f f81d 	bl	2115a <k_queue_append>
   12120:	4909      	ldr	r1, [pc, #36]	; (12148 <bt_conn_init+0x40>)
   12122:	4806      	ldr	r0, [pc, #24]	; (1213c <bt_conn_init+0x34>)
   12124:	f00f f819 	bl	2115a <k_queue_append>
	}

	bt_att_init();
   12128:	f001 f8f6 	bl	13318 <bt_att_init>

	err = bt_smp_init();
   1212c:	f003 ff7e 	bl	1602c <bt_smp_init>
	if (err) {
   12130:	4604      	mov	r4, r0
   12132:	b908      	cbnz	r0, 12138 <bt_conn_init+0x30>
		return err;
	}

	bt_l2cap_init();
   12134:	f00c faee 	bl	1e714 <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   12138:	4620      	mov	r0, r4
   1213a:	bd10      	pop	{r4, pc}
   1213c:	2000897c 	.word	0x2000897c
   12140:	20009dcc 	.word	0x20009dcc
   12144:	20009ddc 	.word	0x20009ddc
   12148:	20009dec 	.word	0x20009dec

0001214c <l2cap_create_le_sig_pdu.part.0>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
		bt_l2cap_chan_del(chan);
	}
}

static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   1214c:	b580      	push	{r7, lr}
   1214e:	af00      	add	r7, sp, #0
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
	if (!buf) {
		/* If it was not possible to allocate a buffer within the
		 * timeout return NULL.
		 */
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   12150:	b088      	sub	sp, #32
   12152:	466a      	mov	r2, sp
   12154:	4b07      	ldr	r3, [pc, #28]	; (12174 <l2cap_create_le_sig_pdu.part.0+0x28>)
   12156:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1215a:	6153      	str	r3, [r2, #20]
   1215c:	4b06      	ldr	r3, [pc, #24]	; (12178 <l2cap_create_le_sig_pdu.part.0+0x2c>)
   1215e:	e9c2 3006 	strd	r3, r0, [r2, #24]
   12162:	2304      	movs	r3, #4
   12164:	4805      	ldr	r0, [pc, #20]	; (1217c <l2cap_create_le_sig_pdu.part.0+0x30>)
   12166:	f842 3f10 	str.w	r3, [r2, #16]!
   1216a:	f00c fa3c 	bl	1e5e6 <z_log_msg_static_create.constprop.0>
	hdr->code = code;
	hdr->ident = ident;
	hdr->len = sys_cpu_to_le16(len);

	return buf;
}
   1216e:	2000      	movs	r0, #0
   12170:	46bd      	mov	sp, r7
   12172:	bd80      	pop	{r7, pc}
   12174:	00025659 	.word	0x00025659
   12178:	000257f3 	.word	0x000257f3
   1217c:	00022818 	.word	0x00022818

00012180 <l2cap_accept.part.0>:
	 */
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   12180:	b580      	push	{r7, lr}
   12182:	af00      	add	r7, sp, #0
		*chan = &l2cap->chan.chan;

		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);
   12184:	b088      	sub	sp, #32
   12186:	466a      	mov	r2, sp
   12188:	4b08      	ldr	r3, [pc, #32]	; (121ac <l2cap_accept.part.0+0x2c>)
   1218a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1218e:	6153      	str	r3, [r2, #20]
   12190:	4b07      	ldr	r3, [pc, #28]	; (121b0 <l2cap_accept.part.0+0x30>)
   12192:	e9c2 3006 	strd	r3, r0, [r2, #24]
   12196:	2304      	movs	r3, #4
   12198:	4806      	ldr	r0, [pc, #24]	; (121b4 <l2cap_accept.part.0+0x34>)
   1219a:	f842 3f10 	str.w	r3, [r2, #16]!
   1219e:	f00c fa22 	bl	1e5e6 <z_log_msg_static_create.constprop.0>

	return -ENOMEM;
}
   121a2:	f06f 000b 	mvn.w	r0, #11
   121a6:	46bd      	mov	sp, r7
   121a8:	bd80      	pop	{r7, pc}
   121aa:	bf00      	nop
   121ac:	00025685 	.word	0x00025685
   121b0:	000257e6 	.word	0x000257e6
   121b4:	00022818 	.word	0x00022818

000121b8 <l2cap_accept>:
		if (l2cap->chan.chan.conn) {
   121b8:	4b04      	ldr	r3, [pc, #16]	; (121cc <l2cap_accept+0x14>)
   121ba:	681a      	ldr	r2, [r3, #0]
   121bc:	b10a      	cbz	r2, 121c2 <l2cap_accept+0xa>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   121be:	f7ff bfdf 	b.w	12180 <l2cap_accept.part.0>
		l2cap->chan.chan.ops = &ops;
   121c2:	4803      	ldr	r0, [pc, #12]	; (121d0 <l2cap_accept+0x18>)
   121c4:	6058      	str	r0, [r3, #4]
}
   121c6:	4610      	mov	r0, r2
		*chan = &l2cap->chan.chan;
   121c8:	600b      	str	r3, [r1, #0]
}
   121ca:	4770      	bx	lr
   121cc:	20009e0c 	.word	0x20009e0c
   121d0:	00022f8c 	.word	0x00022f8c

000121d4 <bt_l2cap_connected>:
{
   121d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   121d6:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   121d8:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   121da:	4d1f      	ldr	r5, [pc, #124]	; (12258 <bt_l2cap_connected+0x84>)
   121dc:	4f1f      	ldr	r7, [pc, #124]	; (1225c <bt_l2cap_connected+0x88>)
   121de:	42bd      	cmp	r5, r7
   121e0:	d301      	bcc.n	121e6 <bt_l2cap_connected+0x12>
}
   121e2:	b003      	add	sp, #12
   121e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (fchan->accept(conn, &chan) < 0) {
   121e6:	4620      	mov	r0, r4
   121e8:	686b      	ldr	r3, [r5, #4]
   121ea:	a901      	add	r1, sp, #4
   121ec:	4798      	blx	r3
   121ee:	2800      	cmp	r0, #0
   121f0:	db2c      	blt.n	1224c <bt_l2cap_connected+0x78>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   121f2:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   121f4:	882a      	ldrh	r2, [r5, #0]
   121f6:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
   121f8:	849a      	strh	r2, [r3, #36]	; 0x24
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   121fa:	68a8      	ldr	r0, [r5, #8]
   121fc:	f103 0210 	add.w	r2, r3, #16
   12200:	e8d2 1fef 	ldaex	r1, [r2]
   12204:	e8c2 6fec 	stlex	ip, r6, [r2]
   12208:	f1bc 0f00 	cmp.w	ip, #0
   1220c:	d1f8      	bne.n	12200 <bt_l2cap_connected+0x2c>
	parent->next = child;
   1220e:	609e      	str	r6, [r3, #8]
	return list->tail;
   12210:	6d61      	ldr	r1, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
   12212:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
   12216:	b9d9      	cbnz	r1, 12250 <bt_l2cap_connected+0x7c>
	list->head = node;
   12218:	e9c4 2214 	strd	r2, r2, [r4, #80]	; 0x50
	chan->conn = conn;
   1221c:	601c      	str	r4, [r3, #0]
	chan->destroy = destroy;
   1221e:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
   12220:	9801      	ldr	r0, [sp, #4]
   12222:	6843      	ldr	r3, [r0, #4]
   12224:	681b      	ldr	r3, [r3, #0]
   12226:	b103      	cbz	r3, 1222a <bt_l2cap_connected+0x56>
			chan->ops->connected(chan);
   12228:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1222a:	9b01      	ldr	r3, [sp, #4]
   1222c:	3310      	adds	r3, #16
   1222e:	e8d3 1fef 	ldaex	r1, [r3]
   12232:	f041 0101 	orr.w	r1, r1, #1
   12236:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1223a:	2a00      	cmp	r2, #0
   1223c:	d1f7      	bne.n	1222e <bt_l2cap_connected+0x5a>
		if (chan->ops->status) {
   1223e:	9801      	ldr	r0, [sp, #4]
   12240:	6843      	ldr	r3, [r0, #4]
   12242:	69db      	ldr	r3, [r3, #28]
   12244:	b113      	cbz	r3, 1224c <bt_l2cap_connected+0x78>
			chan->ops->status(chan, chan->status);
   12246:	f100 0110 	add.w	r1, r0, #16
   1224a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1224c:	350c      	adds	r5, #12
   1224e:	e7c6      	b.n	121de <bt_l2cap_connected+0xa>
	parent->next = child;
   12250:	600a      	str	r2, [r1, #0]
	list->tail = node;
   12252:	6562      	str	r2, [r4, #84]	; 0x54
}
   12254:	e7e2      	b.n	1221c <bt_l2cap_connected+0x48>
   12256:	bf00      	nop
   12258:	00022740 	.word	0x00022740
   1225c:	00022764 	.word	0x00022764

00012260 <l2cap_recv>:
{
   12260:	b5f0      	push	{r4, r5, r6, r7, lr}
   12262:	b083      	sub	sp, #12
	if (buf->len < sizeof(*hdr)) {
   12264:	898b      	ldrh	r3, [r1, #12]
{
   12266:	4606      	mov	r6, r0
	if (buf->len < sizeof(*hdr)) {
   12268:	2b03      	cmp	r3, #3
{
   1226a:	460d      	mov	r5, r1
   1226c:	af02      	add	r7, sp, #8
	if (buf->len < sizeof(*hdr)) {
   1226e:	d80c      	bhi.n	1228a <l2cap_recv+0x2a>
		BT_ERR("Too small L2CAP signaling PDU");
   12270:	466c      	mov	r4, sp
   12272:	b088      	sub	sp, #32
   12274:	aa02      	add	r2, sp, #8
   12276:	4b36      	ldr	r3, [pc, #216]	; (12350 <l2cap_recv+0xf0>)
		BT_ERR("Invalid ident value in L2CAP PDU");
   12278:	6153      	str	r3, [r2, #20]
   1227a:	4b36      	ldr	r3, [pc, #216]	; (12354 <l2cap_recv+0xf4>)
		BT_ERR("Too small LE conn param rsp");
   1227c:	6193      	str	r3, [r2, #24]
   1227e:	2303      	movs	r3, #3
   12280:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12284:	f842 3f10 	str.w	r3, [r2, #16]!
   12288:	e017      	b.n	122ba <l2cap_recv+0x5a>
	return net_buf_simple_pull_mem(&buf->b, len);
   1228a:	2104      	movs	r1, #4
   1228c:	f105 0008 	add.w	r0, r5, #8
   12290:	f00d fe2c 	bl	1feec <net_buf_simple_pull_mem>
	if (buf->len != len) {
   12294:	89a9      	ldrh	r1, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
   12296:	8843      	ldrh	r3, [r0, #2]
   12298:	4604      	mov	r4, r0
	if (buf->len != len) {
   1229a:	4299      	cmp	r1, r3
   1229c:	d015      	beq.n	122ca <l2cap_recv+0x6a>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   1229e:	466c      	mov	r4, sp
   122a0:	b08a      	sub	sp, #40	; 0x28
   122a2:	aa02      	add	r2, sp, #8
   122a4:	482c      	ldr	r0, [pc, #176]	; (12358 <l2cap_recv+0xf8>)
   122a6:	6213      	str	r3, [r2, #32]
   122a8:	6150      	str	r0, [r2, #20]
   122aa:	482a      	ldr	r0, [pc, #168]	; (12354 <l2cap_recv+0xf4>)
   122ac:	2305      	movs	r3, #5
   122ae:	e9c2 0106 	strd	r0, r1, [r2, #24]
   122b2:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   122b6:	f842 3f10 	str.w	r3, [r2, #16]!
   122ba:	4828      	ldr	r0, [pc, #160]	; (1235c <l2cap_recv+0xfc>)
   122bc:	f00c f993 	bl	1e5e6 <z_log_msg_static_create.constprop.0>
   122c0:	46a5      	mov	sp, r4
}
   122c2:	2000      	movs	r0, #0
   122c4:	3704      	adds	r7, #4
   122c6:	46bd      	mov	sp, r7
   122c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
   122ca:	7843      	ldrb	r3, [r0, #1]
   122cc:	b923      	cbnz	r3, 122d8 <l2cap_recv+0x78>
		BT_ERR("Invalid ident value in L2CAP PDU");
   122ce:	466c      	mov	r4, sp
   122d0:	b088      	sub	sp, #32
   122d2:	aa02      	add	r2, sp, #8
   122d4:	4b22      	ldr	r3, [pc, #136]	; (12360 <l2cap_recv+0x100>)
   122d6:	e7cf      	b.n	12278 <l2cap_recv+0x18>
	switch (hdr->code) {
   122d8:	7803      	ldrb	r3, [r0, #0]
   122da:	2b01      	cmp	r3, #1
   122dc:	d0f1      	beq.n	122c2 <l2cap_recv+0x62>
   122de:	2b13      	cmp	r3, #19
   122e0:	d108      	bne.n	122f4 <l2cap_recv+0x94>
	if (buf->len < sizeof(*rsp)) {
   122e2:	2901      	cmp	r1, #1
   122e4:	d8ed      	bhi.n	122c2 <l2cap_recv+0x62>
		BT_ERR("Too small LE conn param rsp");
   122e6:	466c      	mov	r4, sp
   122e8:	b088      	sub	sp, #32
   122ea:	aa02      	add	r2, sp, #8
   122ec:	4b1d      	ldr	r3, [pc, #116]	; (12364 <l2cap_recv+0x104>)
   122ee:	6153      	str	r3, [r2, #20]
   122f0:	4b1d      	ldr	r3, [pc, #116]	; (12368 <l2cap_recv+0x108>)
   122f2:	e7c3      	b.n	1227c <l2cap_recv+0x1c>
		BT_WARN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   122f4:	466d      	mov	r5, sp
   122f6:	b088      	sub	sp, #32
   122f8:	aa02      	add	r2, sp, #8
   122fa:	491c      	ldr	r1, [pc, #112]	; (1236c <l2cap_recv+0x10c>)
   122fc:	4817      	ldr	r0, [pc, #92]	; (1235c <l2cap_recv+0xfc>)
   122fe:	6151      	str	r1, [r2, #20]
   12300:	4914      	ldr	r1, [pc, #80]	; (12354 <l2cap_recv+0xf4>)
	switch (hdr->code) {
   12302:	e9c2 1306 	strd	r1, r3, [r2, #24]
		BT_WARN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   12306:	2304      	movs	r3, #4
   12308:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1230c:	f842 3f10 	str.w	r3, [r2, #16]!
   12310:	f00c f969 	bl	1e5e6 <z_log_msg_static_create.constprop.0>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   12314:	2202      	movs	r2, #2
   12316:	46ad      	mov	sp, r5
   12318:	7861      	ldrb	r1, [r4, #1]
   1231a:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   1231c:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1231e:	f00c f965 	bl	1e5ec <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   12322:	4604      	mov	r4, r0
   12324:	2800      	cmp	r0, #0
   12326:	d0cc      	beq.n	122c2 <l2cap_recv+0x62>
	return net_buf_simple_add(&buf->b, len);
   12328:	2102      	movs	r1, #2
   1232a:	3008      	adds	r0, #8
   1232c:	f00d fdae 	bl	1fe8c <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   12330:	2300      	movs	r3, #0
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   12332:	4622      	mov	r2, r4
   12334:	7003      	strb	r3, [r0, #0]
   12336:	7043      	strb	r3, [r0, #1]
   12338:	2105      	movs	r1, #5
   1233a:	4628      	mov	r0, r5
   1233c:	9300      	str	r3, [sp, #0]
   1233e:	f00c f9be 	bl	1e6be <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   12342:	2800      	cmp	r0, #0
   12344:	d0bd      	beq.n	122c2 <l2cap_recv+0x62>
		net_buf_unref(buf);
   12346:	4620      	mov	r0, r4
   12348:	f003 fff8 	bl	1633c <net_buf_unref>
   1234c:	e7b9      	b.n	122c2 <l2cap_recv+0x62>
   1234e:	bf00      	nop
   12350:	000256b0 	.word	0x000256b0
   12354:	000257db 	.word	0x000257db
   12358:	000256d2 	.word	0x000256d2
   1235c:	00022818 	.word	0x00022818
   12360:	000256f7 	.word	0x000256f7
   12364:	0002571c 	.word	0x0002571c
   12368:	000257c9 	.word	0x000257c9
   1236c:	0002573c 	.word	0x0002573c

00012370 <bt_l2cap_recv>:
{
   12370:	b5b0      	push	{r4, r5, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   12372:	898b      	ldrh	r3, [r1, #12]
{
   12374:	4605      	mov	r5, r0
	if (buf->len < sizeof(*hdr)) {
   12376:	2b03      	cmp	r3, #3
{
   12378:	460c      	mov	r4, r1
   1237a:	af00      	add	r7, sp, #0
	if (buf->len < sizeof(*hdr)) {
   1237c:	d814      	bhi.n	123a8 <bt_l2cap_recv+0x38>
		BT_ERR("Too small L2CAP PDU received");
   1237e:	466d      	mov	r5, sp
   12380:	b088      	sub	sp, #32
   12382:	466a      	mov	r2, sp
   12384:	4b17      	ldr	r3, [pc, #92]	; (123e4 <bt_l2cap_recv+0x74>)
   12386:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1238a:	6153      	str	r3, [r2, #20]
   1238c:	4b16      	ldr	r3, [pc, #88]	; (123e8 <bt_l2cap_recv+0x78>)
   1238e:	6193      	str	r3, [r2, #24]
   12390:	2303      	movs	r3, #3
   12392:	f842 3f10 	str.w	r3, [r2, #16]!
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
   12396:	4815      	ldr	r0, [pc, #84]	; (123ec <bt_l2cap_recv+0x7c>)
   12398:	f00c f925 	bl	1e5e6 <z_log_msg_static_create.constprop.0>
   1239c:	46ad      	mov	sp, r5
	net_buf_unref(buf);
   1239e:	4620      	mov	r0, r4
   123a0:	f003 ffcc 	bl	1633c <net_buf_unref>
}
   123a4:	46bd      	mov	sp, r7
   123a6:	bdb0      	pop	{r4, r5, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   123a8:	2104      	movs	r1, #4
   123aa:	f104 0008 	add.w	r0, r4, #8
   123ae:	f00d fd9d 	bl	1feec <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   123b2:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   123b4:	4628      	mov	r0, r5
   123b6:	f00c f9a4 	bl	1e702 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   123ba:	b968      	cbnz	r0, 123d8 <bt_l2cap_recv+0x68>
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
   123bc:	466d      	mov	r5, sp
   123be:	b088      	sub	sp, #32
   123c0:	466a      	mov	r2, sp
   123c2:	4b0b      	ldr	r3, [pc, #44]	; (123f0 <bt_l2cap_recv+0x80>)
   123c4:	6153      	str	r3, [r2, #20]
   123c6:	4b08      	ldr	r3, [pc, #32]	; (123e8 <bt_l2cap_recv+0x78>)
   123c8:	e9c2 3106 	strd	r3, r1, [r2, #24]
   123cc:	2304      	movs	r3, #4
   123ce:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   123d2:	f842 3f10 	str.w	r3, [r2, #16]!
   123d6:	e7de      	b.n	12396 <bt_l2cap_recv+0x26>
	chan->ops->recv(chan, buf);
   123d8:	6843      	ldr	r3, [r0, #4]
   123da:	4621      	mov	r1, r4
   123dc:	695b      	ldr	r3, [r3, #20]
   123de:	4798      	blx	r3
   123e0:	e7dd      	b.n	1239e <bt_l2cap_recv+0x2e>
   123e2:	bf00      	nop
   123e4:	00025768 	.word	0x00025768
   123e8:	0002580b 	.word	0x0002580b
   123ec:	00022818 	.word	0x00022818
   123f0:	00025789 	.word	0x00025789

000123f4 <bt_l2cap_update_conn_param>:
{
   123f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   123f6:	4b17      	ldr	r3, [pc, #92]	; (12454 <bt_l2cap_update_conn_param+0x60>)
{
   123f8:	460e      	mov	r6, r1
	ident++;
   123fa:	7819      	ldrb	r1, [r3, #0]
{
   123fc:	4605      	mov	r5, r0
	ident++;
   123fe:	3101      	adds	r1, #1
   12400:	b2c9      	uxtb	r1, r1
   12402:	2901      	cmp	r1, #1
   12404:	bf38      	it	cc
   12406:	2101      	movcc	r1, #1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   12408:	2208      	movs	r2, #8
   1240a:	2012      	movs	r0, #18
	ident++;
   1240c:	7019      	strb	r1, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   1240e:	f00c f8ed 	bl	1e5ec <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   12412:	4604      	mov	r4, r0
   12414:	b1d0      	cbz	r0, 1244c <bt_l2cap_update_conn_param+0x58>
	return net_buf_simple_add(&buf->b, len);
   12416:	2108      	movs	r1, #8
   12418:	4408      	add	r0, r1
   1241a:	f00d fd37 	bl	1fe8c <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   1241e:	8833      	ldrh	r3, [r6, #0]
   12420:	4622      	mov	r2, r4
   12422:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   12424:	8873      	ldrh	r3, [r6, #2]
   12426:	2105      	movs	r1, #5
   12428:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   1242a:	88b3      	ldrh	r3, [r6, #4]
   1242c:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   1242e:	88f3      	ldrh	r3, [r6, #6]
   12430:	80c3      	strh	r3, [r0, #6]
   12432:	2300      	movs	r3, #0
   12434:	4628      	mov	r0, r5
   12436:	9300      	str	r3, [sp, #0]
   12438:	f00c f941 	bl	1e6be <bt_l2cap_send_cb>
	if (err) {
   1243c:	4605      	mov	r5, r0
   1243e:	b110      	cbz	r0, 12446 <bt_l2cap_update_conn_param+0x52>
		net_buf_unref(buf);
   12440:	4620      	mov	r0, r4
   12442:	f003 ff7b 	bl	1633c <net_buf_unref>
}
   12446:	4628      	mov	r0, r5
   12448:	b002      	add	sp, #8
   1244a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   1244c:	f06f 050b 	mvn.w	r5, #11
   12450:	e7f9      	b.n	12446 <bt_l2cap_update_conn_param+0x52>
   12452:	bf00      	nop
   12454:	2000a291 	.word	0x2000a291

00012458 <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   12458:	2823      	cmp	r0, #35	; 0x23
   1245a:	d81f      	bhi.n	1249c <att_op_get_type+0x44>
   1245c:	281a      	cmp	r0, #26
   1245e:	d804      	bhi.n	1246a <att_op_get_type+0x12>
   12460:	1e43      	subs	r3, r0, #1
   12462:	2b18      	cmp	r3, #24
   12464:	d90e      	bls.n	12484 <att_op_get_type+0x2c>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
   12466:	2006      	movs	r0, #6
   12468:	4770      	bx	lr
	switch (op) {
   1246a:	f1a0 031b 	sub.w	r3, r0, #27
   1246e:	2b08      	cmp	r3, #8
   12470:	d81e      	bhi.n	124b0 <att_op_get_type+0x58>
   12472:	e8df f003 	tbb	[pc, r3]
   12476:	1d05      	.short	0x1d05
   12478:	191d231b 	.word	0x191d231b
   1247c:	1d25      	.short	0x1d25
   1247e:	05          	.byte	0x05
   1247f:	00          	.byte	0x00
		return ATT_NOTIFICATION;
   12480:	2003      	movs	r0, #3
   12482:	4770      	bx	lr
   12484:	2301      	movs	r3, #1
	switch (op) {
   12486:	4a0f      	ldr	r2, [pc, #60]	; (124c4 <att_op_get_type+0x6c>)
   12488:	4083      	lsls	r3, r0
   1248a:	401a      	ands	r2, r3
   1248c:	b9c2      	cbnz	r2, 124c0 <att_op_get_type+0x68>
   1248e:	4a0e      	ldr	r2, [pc, #56]	; (124c8 <att_op_get_type+0x70>)
   12490:	401a      	ands	r2, r3
	return ATT_UNKNOWN;
   12492:	2a00      	cmp	r2, #0
   12494:	bf14      	ite	ne
   12496:	2001      	movne	r0, #1
   12498:	2006      	moveq	r0, #6
   1249a:	4770      	bx	lr
	switch (op) {
   1249c:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   124a0:	2b52      	cmp	r3, #82	; 0x52
   124a2:	d105      	bne.n	124b0 <att_op_get_type+0x58>
		return ATT_COMMAND;
   124a4:	2000      	movs	r0, #0
}
   124a6:	4770      	bx	lr
		return ATT_REQUEST;
   124a8:	2001      	movs	r0, #1
   124aa:	4770      	bx	lr
		return ATT_INDICATION;
   124ac:	2005      	movs	r0, #5
   124ae:	4770      	bx	lr
		return ATT_COMMAND;
   124b0:	f010 0f40 	tst.w	r0, #64	; 0x40
   124b4:	bf0c      	ite	eq
   124b6:	2006      	moveq	r0, #6
   124b8:	2000      	movne	r0, #0
   124ba:	4770      	bx	lr
	switch (op) {
   124bc:	2004      	movs	r0, #4
   124be:	4770      	bx	lr
		return ATT_RESPONSE;
   124c0:	2002      	movs	r0, #2
   124c2:	4770      	bx	lr
   124c4:	028aaaaa 	.word	0x028aaaaa
   124c8:	01455554 	.word	0x01455554

000124cc <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   124cc:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   124ce:	3804      	subs	r0, #4
   124d0:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   124d2:	a901      	add	r1, sp, #4
   124d4:	4802      	ldr	r0, [pc, #8]	; (124e0 <bt_att_released+0x14>)
   124d6:	f00e fd76 	bl	20fc6 <k_mem_slab_free>
}
   124da:	b003      	add	sp, #12
   124dc:	f85d fb04 	ldr.w	pc, [sp], #4
   124e0:	20008880 	.word	0x20008880

000124e4 <tx_meta_data_free>:
{
   124e4:	b510      	push	{r4, lr}
   124e6:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
   124e8:	2100      	movs	r1, #0
   124ea:	2214      	movs	r2, #20
   124ec:	f00f fadc 	bl	21aa8 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   124f0:	4621      	mov	r1, r4
}
   124f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
   124f6:	4801      	ldr	r0, [pc, #4]	; (124fc <tx_meta_data_free+0x18>)
   124f8:	f00e be2f 	b.w	2115a <k_queue_append>
   124fc:	20008964 	.word	0x20008964

00012500 <find_type_cb>:
{
   12500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12504:	b093      	sub	sp, #76	; 0x4c
	struct bt_att_chan *chan = data->chan;
   12506:	f8d2 a000 	ldr.w	sl, [r2]
{
   1250a:	af02      	add	r7, sp, #8
	struct bt_conn *conn = chan->chan.chan.conn;
   1250c:	f8da 3004 	ldr.w	r3, [sl, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   12510:	2500      	movs	r5, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   12512:	607b      	str	r3, [r7, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   12514:	f642 0301 	movw	r3, #10241	; 0x2801
{
   12518:	4680      	mov	r8, r0
   1251a:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1251c:	6800      	ldr	r0, [r0, #0]
   1251e:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   12522:	85fb      	strh	r3, [r7, #46]	; 0x2e
   12524:	f107 012c 	add.w	r1, r7, #44	; 0x2c
{
   12528:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1252a:	f00b fb9d 	bl	1dc68 <bt_uuid_cmp>
   1252e:	2800      	cmp	r0, #0
   12530:	d072      	beq.n	12618 <find_type_cb+0x118>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   12532:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   12536:	f8d8 0000 	ldr.w	r0, [r8]
   1253a:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   1253e:	85fb      	strh	r3, [r7, #46]	; 0x2e
   12540:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   12544:	f00b fb90 	bl	1dc68 <bt_uuid_cmp>
   12548:	b138      	cbz	r0, 1255a <find_type_cb+0x5a>
		if (data->group &&
   1254a:	68a3      	ldr	r3, [r4, #8]
   1254c:	b11b      	cbz	r3, 12556 <find_type_cb+0x56>
   1254e:	885a      	ldrh	r2, [r3, #2]
   12550:	42b2      	cmp	r2, r6
   12552:	d200      	bcs.n	12556 <find_type_cb+0x56>
	data->group->end_handle = sys_cpu_to_le16(handle);
   12554:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   12556:	2001      	movs	r0, #1
   12558:	e009      	b.n	1256e <find_type_cb+0x6e>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1255a:	6861      	ldr	r1, [r4, #4]
   1255c:	4608      	mov	r0, r1
   1255e:	f00c f8e4 	bl	1e72a <net_buf_frags_len>
   12562:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   12566:	1a1b      	subs	r3, r3, r0
   12568:	2b03      	cmp	r3, #3
   1256a:	d804      	bhi.n	12576 <find_type_cb+0x76>
		return BT_GATT_ITER_STOP;
   1256c:	2000      	movs	r0, #0
}
   1256e:	3744      	adds	r7, #68	; 0x44
   12570:	46bd      	mov	sp, r7
   12572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   12576:	4608      	mov	r0, r1
   12578:	f00d fc66 	bl	1fe48 <net_buf_frag_last>
   1257c:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1257e:	6860      	ldr	r0, [r4, #4]
   12580:	f00c f8d3 	bl	1e72a <net_buf_frags_len>
   12584:	f8ba b02a 	ldrh.w	fp, [sl, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   12588:	f105 0908 	add.w	r9, r5, #8
   1258c:	ebab 0b00 	sub.w	fp, fp, r0
   12590:	4648      	mov	r0, r9
   12592:	f00d fcbf 	bl	1ff14 <net_buf_simple_tailroom>
   12596:	4558      	cmp	r0, fp
   12598:	d941      	bls.n	1261e <find_type_cb+0x11e>
   1259a:	6860      	ldr	r0, [r4, #4]
   1259c:	f00c f8c5 	bl	1e72a <net_buf_frags_len>
   125a0:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   125a4:	1a18      	subs	r0, r3, r0
	if (!len) {
   125a6:	b970      	cbnz	r0, 125c6 <find_type_cb+0xc6>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   125a8:	6863      	ldr	r3, [r4, #4]
   125aa:	7998      	ldrb	r0, [r3, #6]
   125ac:	f003 fe04 	bl	161b8 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   125b0:	2200      	movs	r2, #0
   125b2:	2300      	movs	r3, #0
   125b4:	f00d fbca 	bl	1fd4c <net_buf_alloc_fixed>
		if (!frag) {
   125b8:	4605      	mov	r5, r0
   125ba:	2800      	cmp	r0, #0
   125bc:	d0d6      	beq.n	1256c <find_type_cb+0x6c>
		net_buf_frag_add(data->buf, frag);
   125be:	4601      	mov	r1, r0
   125c0:	6860      	ldr	r0, [r4, #4]
   125c2:	f00d fc52 	bl	1fe6a <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   125c6:	2300      	movs	r3, #0
   125c8:	9300      	str	r3, [sp, #0]
   125ca:	4641      	mov	r1, r8
   125cc:	f8d8 a004 	ldr.w	sl, [r8, #4]
   125d0:	2310      	movs	r3, #16
   125d2:	6878      	ldr	r0, [r7, #4]
   125d4:	f107 0208 	add.w	r2, r7, #8
   125d8:	47d0      	blx	sl
	if (read < 0) {
   125da:	f1b0 0800 	subs.w	r8, r0, #0
   125de:	db1b      	blt.n	12618 <find_type_cb+0x118>
	if (read != data->value_len) {
   125e0:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   125e2:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   125e4:	4542      	cmp	r2, r8
   125e6:	d043      	beq.n	12670 <find_type_cb+0x170>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   125e8:	4601      	mov	r1, r0
   125ea:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   125ee:	f00b fb69 	bl	1dcc4 <bt_uuid_create>
   125f2:	b9c0      	cbnz	r0, 12626 <find_type_cb+0x126>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   125f4:	466d      	mov	r5, sp
   125f6:	b088      	sub	sp, #32
   125f8:	7c23      	ldrb	r3, [r4, #16]
   125fa:	aa02      	add	r2, sp, #8
   125fc:	491f      	ldr	r1, [pc, #124]	; (1267c <find_type_cb+0x17c>)
   125fe:	6151      	str	r1, [r2, #20]
   12600:	491f      	ldr	r1, [pc, #124]	; (12680 <find_type_cb+0x180>)
   12602:	e9c2 1306 	strd	r1, r3, [r2, #24]
			BT_WARN("Unable to create UUID: size %d", read);
   12606:	2304      	movs	r3, #4
   12608:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1260c:	481d      	ldr	r0, [pc, #116]	; (12684 <find_type_cb+0x184>)
   1260e:	f842 3f10 	str.w	r3, [r2, #16]!
   12612:	f00c f979 	bl	1e908 <z_log_msg_static_create.constprop.0>
   12616:	46ad      	mov	sp, r5
	data->group = NULL;
   12618:	2300      	movs	r3, #0
   1261a:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   1261c:	e79b      	b.n	12556 <find_type_cb+0x56>
	return net_buf_simple_tailroom(&buf->b);
   1261e:	4648      	mov	r0, r9
   12620:	f00d fc78 	bl	1ff14 <net_buf_simple_tailroom>
   12624:	e7bf      	b.n	125a6 <find_type_cb+0xa6>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   12626:	fa5f f288 	uxtb.w	r2, r8
   1262a:	f107 0108 	add.w	r1, r7, #8
   1262e:	f107 0018 	add.w	r0, r7, #24
   12632:	f00b fb47 	bl	1dcc4 <bt_uuid_create>
   12636:	b940      	cbnz	r0, 1264a <find_type_cb+0x14a>
			BT_WARN("Unable to create UUID: size %d", read);
   12638:	466d      	mov	r5, sp
   1263a:	b088      	sub	sp, #32
   1263c:	aa02      	add	r2, sp, #8
   1263e:	4b12      	ldr	r3, [pc, #72]	; (12688 <find_type_cb+0x188>)
   12640:	6153      	str	r3, [r2, #20]
   12642:	4b0f      	ldr	r3, [pc, #60]	; (12680 <find_type_cb+0x180>)
   12644:	e9c2 3806 	strd	r3, r8, [r2, #24]
   12648:	e7dd      	b.n	12606 <find_type_cb+0x106>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   1264a:	f107 0118 	add.w	r1, r7, #24
   1264e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   12652:	f00b fb09 	bl	1dc68 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   12656:	2800      	cmp	r0, #0
   12658:	d1de      	bne.n	12618 <find_type_cb+0x118>
	data->err = 0x00;
   1265a:	2300      	movs	r3, #0
	return net_buf_simple_add(&buf->b, len);
   1265c:	2104      	movs	r1, #4
   1265e:	7463      	strb	r3, [r4, #17]
   12660:	f105 0008 	add.w	r0, r5, #8
   12664:	f00d fc12 	bl	1fe8c <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   12668:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1266a:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1266c:	68a3      	ldr	r3, [r4, #8]
   1266e:	e771      	b.n	12554 <find_type_cb+0x54>
	} else if (memcmp(data->value, uuid, read)) {
   12670:	f107 0108 	add.w	r1, r7, #8
   12674:	f00f f9fb 	bl	21a6e <memcmp>
   12678:	e7ed      	b.n	12656 <find_type_cb+0x156>
   1267a:	bf00      	nop
   1267c:	00025819 	.word	0x00025819
   12680:	00025a3e 	.word	0x00025a3e
   12684:	000227c0 	.word	0x000227c0
   12688:	0002583c 	.word	0x0002583c

0001268c <chan_send>:
{
   1268c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12690:	b082      	sub	sp, #8
   12692:	4606      	mov	r6, r0
   12694:	460c      	mov	r4, r1
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   12696:	f8d1 9014 	ldr.w	r9, [r1, #20]
	hdr = (void *)buf->data;
   1269a:	688b      	ldr	r3, [r1, #8]
{
   1269c:	af02      	add	r7, sp, #8
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   1269e:	2102      	movs	r1, #2
   126a0:	3090      	adds	r0, #144	; 0x90
   126a2:	f00c f85c 	bl	1e75e <atomic_test_bit>
   126a6:	2800      	cmp	r0, #0
   126a8:	d04a      	beq.n	12740 <chan_send+0xb4>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   126aa:	781b      	ldrb	r3, [r3, #0]
   126ac:	2bd2      	cmp	r3, #210	; 0xd2
   126ae:	d120      	bne.n	126f2 <chan_send+0x66>
		err = bt_smp_sign(chan->att->conn, buf);
   126b0:	6833      	ldr	r3, [r6, #0]
   126b2:	4621      	mov	r1, r4
   126b4:	6818      	ldr	r0, [r3, #0]
   126b6:	f00d fa92 	bl	1fbde <bt_smp_sign>
		if (err) {
   126ba:	4605      	mov	r5, r0
   126bc:	b1c8      	cbz	r0, 126f2 <chan_send+0x66>
			BT_ERR("Error signing data");
   126be:	466e      	mov	r6, sp
   126c0:	b088      	sub	sp, #32
   126c2:	aa02      	add	r2, sp, #8
   126c4:	4b20      	ldr	r3, [pc, #128]	; (12748 <chan_send+0xbc>)
   126c6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   126ca:	6153      	str	r3, [r2, #20]
   126cc:	4b1f      	ldr	r3, [pc, #124]	; (1274c <chan_send+0xc0>)
   126ce:	4820      	ldr	r0, [pc, #128]	; (12750 <chan_send+0xc4>)
   126d0:	6193      	str	r3, [r2, #24]
   126d2:	2303      	movs	r3, #3
   126d4:	f842 3f10 	str.w	r3, [r2, #16]!
   126d8:	f00c f916 	bl	1e908 <z_log_msg_static_create.constprop.0>
   126dc:	46b5      	mov	sp, r6
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   126de:	6960      	ldr	r0, [r4, #20]
   126e0:	f7ff ff00 	bl	124e4 <tx_meta_data_free>
			net_buf_unref(buf);
   126e4:	4620      	mov	r0, r4
   126e6:	f003 fe29 	bl	1633c <net_buf_unref>
}
   126ea:	4628      	mov	r0, r5
   126ec:	46bd      	mov	sp, r7
   126ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	state->offset = net_buf_simple_headroom(buf);
   126f2:	f104 0008 	add.w	r0, r4, #8
   126f6:	f00d fc09 	bl	1ff0c <net_buf_simple_headroom>
	state->len = buf->len;
   126fa:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
	data->att_chan = chan;
   126fe:	f8c9 6000 	str.w	r6, [r9]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   12702:	6833      	ldr	r3, [r6, #0]
	state->offset = net_buf_simple_headroom(buf);
   12704:	4680      	mov	r8, r0
   12706:	681d      	ldr	r5, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   12708:	68a3      	ldr	r3, [r4, #8]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1270a:	2104      	movs	r1, #4
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   1270c:	7818      	ldrb	r0, [r3, #0]
   1270e:	f7ff fea3 	bl	12458 <att_op_get_type>
	switch (op_type) {
   12712:	2805      	cmp	r0, #5
   12714:	bf98      	it	ls
   12716:	4b0f      	ldrls	r3, [pc, #60]	; (12754 <chan_send+0xc8>)
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   12718:	4622      	mov	r2, r4
   1271a:	bf94      	ite	ls
   1271c:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   12720:	4b0d      	ldrhi	r3, [pc, #52]	; (12758 <chan_send+0xcc>)
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   12722:	4628      	mov	r0, r5
   12724:	f8cd 9000 	str.w	r9, [sp]
   12728:	f00b ffc9 	bl	1e6be <bt_l2cap_send_cb>
	if (err) {
   1272c:	4605      	mov	r5, r0
   1272e:	2800      	cmp	r0, #0
   12730:	d0db      	beq.n	126ea <chan_send+0x5e>
	buf->data = buf->__buf + state->offset;
   12732:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
   12734:	f8a4 a00c 	strh.w	sl, [r4, #12]
	buf->data = buf->__buf + state->offset;
   12738:	fa13 f388 	uxtah	r3, r3, r8
   1273c:	60a3      	str	r3, [r4, #8]
}
   1273e:	e7d4      	b.n	126ea <chan_send+0x5e>
		return -EINVAL;
   12740:	f06f 0515 	mvn.w	r5, #21
   12744:	e7d1      	b.n	126ea <chan_send+0x5e>
   12746:	bf00      	nop
   12748:	0002585f 	.word	0x0002585f
   1274c:	00025a66 	.word	0x00025a66
   12750:	000227c0 	.word	0x000227c0
   12754:	00022fb4 	.word	0x00022fb4
   12758:	0001eced 	.word	0x0001eced

0001275c <att_get>:
{
   1275c:	b598      	push	{r3, r4, r7, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1275e:	7b43      	ldrb	r3, [r0, #13]
{
   12760:	af00      	add	r7, sp, #0
	if (conn->state != BT_CONN_CONNECTED) {
   12762:	2b07      	cmp	r3, #7
   12764:	d012      	beq.n	1278c <att_get+0x30>
		BT_WARN("Not connected");
   12766:	466c      	mov	r4, sp
   12768:	b088      	sub	sp, #32
   1276a:	466a      	mov	r2, sp
   1276c:	4b11      	ldr	r3, [pc, #68]	; (127b4 <att_get+0x58>)
   1276e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   12772:	6153      	str	r3, [r2, #20]
   12774:	4b10      	ldr	r3, [pc, #64]	; (127b8 <att_get+0x5c>)
   12776:	6193      	str	r3, [r2, #24]
   12778:	2303      	movs	r3, #3
   1277a:	f842 3f10 	str.w	r3, [r2, #16]!
		BT_ERR("Unable to find ATT channel");
   1277e:	480f      	ldr	r0, [pc, #60]	; (127bc <att_get+0x60>)
   12780:	f00c f8c2 	bl	1e908 <z_log_msg_static_create.constprop.0>
		return NULL;
   12784:	2000      	movs	r0, #0
   12786:	46a5      	mov	sp, r4
}
   12788:	46bd      	mov	sp, r7
   1278a:	bd98      	pop	{r3, r4, r7, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1278c:	2104      	movs	r1, #4
   1278e:	f00b ffb8 	bl	1e702 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   12792:	b960      	cbnz	r0, 127ae <att_get+0x52>
		BT_ERR("Unable to find ATT channel");
   12794:	466c      	mov	r4, sp
   12796:	b088      	sub	sp, #32
   12798:	466a      	mov	r2, sp
   1279a:	4b09      	ldr	r3, [pc, #36]	; (127c0 <att_get+0x64>)
   1279c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   127a0:	6153      	str	r3, [r2, #20]
   127a2:	4b05      	ldr	r3, [pc, #20]	; (127b8 <att_get+0x5c>)
   127a4:	6193      	str	r3, [r2, #24]
   127a6:	2303      	movs	r3, #3
   127a8:	f842 3f10 	str.w	r3, [r2, #16]!
   127ac:	e7e7      	b.n	1277e <att_get+0x22>
	return att_chan->att;
   127ae:	f850 0c04 	ldr.w	r0, [r0, #-4]
   127b2:	e7e9      	b.n	12788 <att_get+0x2c>
   127b4:	00025876 	.word	0x00025876
   127b8:	00025a8b 	.word	0x00025a8b
   127bc:	000227c0 	.word	0x000227c0
   127c0:	00025888 	.word	0x00025888

000127c4 <bt_att_connected>:
{
   127c4:	b510      	push	{r4, lr}
   127c6:	4604      	mov	r4, r0
   127c8:	f100 038c 	add.w	r3, r0, #140	; 0x8c
   127cc:	e8d3 1fef 	ldaex	r1, [r3]
   127d0:	f041 0104 	orr.w	r1, r1, #4
   127d4:	e8c3 1fe2 	stlex	r2, r1, [r3]
   127d8:	2a00      	cmp	r2, #0
   127da:	d1f7      	bne.n	127cc <bt_att_connected+0x8>
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   127dc:	2317      	movs	r3, #23
	att_chan_mtu_updated(att_chan);
   127de:	1f20      	subs	r0, r4, #4
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   127e0:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   127e2:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   127e4:	f00b fffd 	bl	1e7e2 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   127e8:	f104 00ac 	add.w	r0, r4, #172	; 0xac
   127ec:	4903      	ldr	r1, [pc, #12]	; (127fc <bt_att_connected+0x38>)
   127ee:	f00e fdce 	bl	2138e <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   127f2:	6820      	ldr	r0, [r4, #0]
}
   127f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
   127f8:	f001 bdda 	b.w	143b0 <bt_gatt_connected>
   127fc:	00013535 	.word	0x00013535

00012800 <read_group_cb>:
{
   12800:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   12804:	f04f 0800 	mov.w	r8, #0
   12808:	f44f 5320 	mov.w	r3, #10240	; 0x2800
{
   1280c:	4605      	mov	r5, r0
   1280e:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   12810:	6800      	ldr	r0, [r0, #0]
   12812:	a902      	add	r1, sp, #8
{
   12814:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   12816:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   12818:	f88d 8008 	strb.w	r8, [sp, #8]
   1281c:	f8ad 300a 	strh.w	r3, [sp, #10]
   12820:	f00b fa22 	bl	1dc68 <bt_uuid_cmp>
   12824:	b1a0      	cbz	r0, 12850 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   12826:	f642 0301 	movw	r3, #10241	; 0x2801
   1282a:	6828      	ldr	r0, [r5, #0]
   1282c:	a903      	add	r1, sp, #12
   1282e:	f88d 800c 	strb.w	r8, [sp, #12]
   12832:	f8ad 300e 	strh.w	r3, [sp, #14]
   12836:	f00b fa17 	bl	1dc68 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1283a:	b148      	cbz	r0, 12850 <read_group_cb+0x50>
		if (data->group &&
   1283c:	6923      	ldr	r3, [r4, #16]
   1283e:	b11b      	cbz	r3, 12848 <read_group_cb+0x48>
   12840:	885a      	ldrh	r2, [r3, #2]
   12842:	42b2      	cmp	r2, r6
   12844:	d200      	bcs.n	12848 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   12846:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   12848:	2001      	movs	r0, #1
}
   1284a:	b004      	add	sp, #16
   1284c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   12850:	6861      	ldr	r1, [r4, #4]
   12852:	6828      	ldr	r0, [r5, #0]
   12854:	f00b fa08 	bl	1dc68 <bt_uuid_cmp>
   12858:	b110      	cbz	r0, 12860 <read_group_cb+0x60>
		data->group = NULL;
   1285a:	2300      	movs	r3, #0
   1285c:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   1285e:	e7f3      	b.n	12848 <read_group_cb+0x48>
	if (data->rsp->len &&
   12860:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   12862:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   12864:	781a      	ldrb	r2, [r3, #0]
   12866:	b132      	cbz	r2, 12876 <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   12868:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   1286a:	8981      	ldrh	r1, [r0, #12]
   1286c:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   1286e:	4293      	cmp	r3, r2
   12870:	da01      	bge.n	12876 <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
   12872:	2000      	movs	r0, #0
   12874:	e7e9      	b.n	1284a <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
   12876:	2104      	movs	r1, #4
   12878:	3008      	adds	r0, #8
   1287a:	f00d fb07 	bl	1fe8c <net_buf_simple_add>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   1287e:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   12880:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   12882:	6923      	ldr	r3, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   12884:	4629      	mov	r1, r5
	data->group->end_handle = sys_cpu_to_le16(handle);
   12886:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   12888:	4b07      	ldr	r3, [pc, #28]	; (128a8 <read_group_cb+0xa8>)
   1288a:	9401      	str	r4, [sp, #4]
   1288c:	9300      	str	r3, [sp, #0]
   1288e:	4638      	mov	r0, r7
   12890:	2300      	movs	r3, #0
   12892:	68a2      	ldr	r2, [r4, #8]
   12894:	f00c f87c 	bl	1e990 <att_chan_read>
	if (read < 0) {
   12898:	2800      	cmp	r0, #0
   1289a:	dbea      	blt.n	12872 <read_group_cb+0x72>
	if (!data->group) {
   1289c:	6920      	ldr	r0, [r4, #16]
   1289e:	3800      	subs	r0, #0
   128a0:	bf18      	it	ne
   128a2:	2001      	movne	r0, #1
   128a4:	e7d1      	b.n	1284a <read_group_cb+0x4a>
   128a6:	bf00      	nop
   128a8:	0001e849 	.word	0x0001e849

000128ac <read_type_cb>:
{
   128ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   128b0:	6817      	ldr	r7, [r2, #0]
{
   128b2:	4605      	mov	r5, r0
   128b4:	4688      	mov	r8, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   128b6:	6800      	ldr	r0, [r0, #0]
   128b8:	6851      	ldr	r1, [r2, #4]
{
   128ba:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   128bc:	687e      	ldr	r6, [r7, #4]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   128be:	f00b f9d3 	bl	1dc68 <bt_uuid_cmp>
   128c2:	4681      	mov	r9, r0
   128c4:	2800      	cmp	r0, #0
   128c6:	d13c      	bne.n	12942 <read_type_cb+0x96>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   128c8:	4630      	mov	r0, r6
   128ca:	2295      	movs	r2, #149	; 0x95
   128cc:	4629      	mov	r1, r5
   128ce:	f00c fd8d 	bl	1f3ec <bt_gatt_check_perm>
   128d2:	4606      	mov	r6, r0
   128d4:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   128d6:	b140      	cbz	r0, 128ea <read_type_cb+0x3e>
		if (data->rsp->len) {
   128d8:	68e3      	ldr	r3, [r4, #12]
   128da:	781b      	ldrb	r3, [r3, #0]
   128dc:	b10b      	cbz	r3, 128e2 <read_type_cb+0x36>
			data->err = 0x00;
   128de:	f884 9014 	strb.w	r9, [r4, #20]
		return BT_GATT_ITER_STOP;
   128e2:	2000      	movs	r0, #0
}
   128e4:	b003      	add	sp, #12
   128e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   128ea:	68a0      	ldr	r0, [r4, #8]
   128ec:	f00d faac 	bl	1fe48 <net_buf_frag_last>
   128f0:	2102      	movs	r1, #2
   128f2:	3008      	adds	r0, #8
   128f4:	f00d faca 	bl	1fe8c <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   128f8:	4b13      	ldr	r3, [pc, #76]	; (12948 <read_type_cb+0x9c>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   128fa:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   128fc:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   12900:	9300      	str	r3, [sp, #0]
   12902:	9401      	str	r4, [sp, #4]
   12904:	4633      	mov	r3, r6
   12906:	4629      	mov	r1, r5
   12908:	4638      	mov	r0, r7
   1290a:	68a2      	ldr	r2, [r4, #8]
   1290c:	f00c f840 	bl	1e990 <att_chan_read>
	if (read < 0) {
   12910:	2800      	cmp	r0, #0
   12912:	da07      	bge.n	12924 <read_type_cb+0x78>
	if (err < 0 && err >= -0xff) {
   12914:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   12918:	bf32      	itee	cc
   1291a:	200e      	movcc	r0, #14
		return -err;
   1291c:	4240      	negcs	r0, r0
   1291e:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(read);
   12920:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   12922:	e7de      	b.n	128e2 <read_type_cb+0x36>
	if (!data->item) {
   12924:	6923      	ldr	r3, [r4, #16]
   12926:	2b00      	cmp	r3, #0
   12928:	d0db      	beq.n	128e2 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1292a:	68a0      	ldr	r0, [r4, #8]
   1292c:	f00b fefd 	bl	1e72a <net_buf_frags_len>
   12930:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   12932:	1a18      	subs	r0, r3, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   12934:	68e3      	ldr	r3, [r4, #12]
   12936:	781b      	ldrb	r3, [r3, #0]
   12938:	4298      	cmp	r0, r3
   1293a:	bf94      	ite	ls
   1293c:	2000      	movls	r0, #0
   1293e:	2001      	movhi	r0, #1
   12940:	e7d0      	b.n	128e4 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   12942:	2001      	movs	r0, #1
   12944:	e7ce      	b.n	128e4 <read_type_cb+0x38>
   12946:	bf00      	nop
   12948:	0001e73b 	.word	0x0001e73b

0001294c <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   1294c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12950:	b082      	sub	sp, #8
   12952:	af00      	add	r7, sp, #0
   12954:	4604      	mov	r4, r0
   12956:	460e      	mov	r6, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   12958:	2200      	movs	r2, #0
   1295a:	2300      	movs	r3, #0
   1295c:	4639      	mov	r1, r7
   1295e:	483c      	ldr	r0, [pc, #240]	; (12a50 <bt_att_accept+0x104>)
   12960:	f006 fe7e 	bl	19660 <k_mem_slab_alloc>
   12964:	4605      	mov	r5, r0
   12966:	b1b8      	cbz	r0, 12998 <bt_att_accept+0x4c>
		BT_ERR("No available ATT context for conn %p", conn);
   12968:	466d      	mov	r5, sp
   1296a:	b088      	sub	sp, #32
   1296c:	466a      	mov	r2, sp
   1296e:	4b39      	ldr	r3, [pc, #228]	; (12a54 <bt_att_accept+0x108>)
   12970:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   12974:	6153      	str	r3, [r2, #20]
   12976:	4b38      	ldr	r3, [pc, #224]	; (12a58 <bt_att_accept+0x10c>)
   12978:	4838      	ldr	r0, [pc, #224]	; (12a5c <bt_att_accept+0x110>)
   1297a:	e9c2 3406 	strd	r3, r4, [r2, #24]
   1297e:	2304      	movs	r3, #4
   12980:	f842 3f10 	str.w	r3, [r2, #16]!
   12984:	f00b ffc0 	bl	1e908 <z_log_msg_static_create.constprop.0>
   12988:	46ad      	mov	sp, r5
		return -ENOMEM;
   1298a:	f06f 050b 	mvn.w	r5, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   1298e:	4628      	mov	r0, r5
   12990:	3708      	adds	r7, #8
   12992:	46bd      	mov	sp, r7
   12994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_z_current_get();
   12998:	f007 fd8c 	bl	1a4b4 <z_impl_z_current_get>
	att_handle_rsp_thread = k_current_get();
   1299c:	4b30      	ldr	r3, [pc, #192]	; (12a60 <bt_att_accept+0x114>)
	(void)memset(att, 0, sizeof(*att));
   1299e:	f8d7 8000 	ldr.w	r8, [r7]
   129a2:	4629      	mov	r1, r5
	att_handle_rsp_thread = k_current_get();
   129a4:	6018      	str	r0, [r3, #0]
   129a6:	2228      	movs	r2, #40	; 0x28
   129a8:	f108 0004 	add.w	r0, r8, #4
   129ac:	f00f f87c 	bl	21aa8 <memset>
	att->conn = conn;
   129b0:	f8c8 4000 	str.w	r4, [r8]
	sys_slist_init(&att->reqs);
   129b4:	683c      	ldr	r4, [r7, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   129b6:	2200      	movs	r2, #0
	list->tail = NULL;
   129b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
   129bc:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
   129c0:	2300      	movs	r3, #0
   129c2:	4828      	ldr	r0, [pc, #160]	; (12a64 <bt_att_accept+0x118>)
   129c4:	1d39      	adds	r1, r7, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   129c6:	607d      	str	r5, [r7, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   129c8:	f006 fe4a 	bl	19660 <k_mem_slab_alloc>
   129cc:	4605      	mov	r5, r0
   129ce:	b190      	cbz	r0, 129f6 <bt_att_accept+0xaa>
		BT_WARN("No available ATT channel for conn %p", att->conn);
   129d0:	6823      	ldr	r3, [r4, #0]
   129d2:	466c      	mov	r4, sp
   129d4:	b088      	sub	sp, #32
   129d6:	466a      	mov	r2, sp
   129d8:	4923      	ldr	r1, [pc, #140]	; (12a68 <bt_att_accept+0x11c>)
   129da:	4820      	ldr	r0, [pc, #128]	; (12a5c <bt_att_accept+0x110>)
   129dc:	6151      	str	r1, [r2, #20]
   129de:	4923      	ldr	r1, [pc, #140]	; (12a6c <bt_att_accept+0x120>)
   129e0:	e9c2 1306 	strd	r1, r3, [r2, #24]
   129e4:	2304      	movs	r3, #4
   129e6:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   129ea:	f842 3f10 	str.w	r3, [r2, #16]!
   129ee:	f00b ff8b 	bl	1e908 <z_log_msg_static_create.constprop.0>
   129f2:	46a5      	mov	sp, r4
	if (!chan) {
   129f4:	e7c9      	b.n	1298a <bt_att_accept+0x3e>
	(void)memset(chan, 0, sizeof(*chan));
   129f6:	687b      	ldr	r3, [r7, #4]
   129f8:	4601      	mov	r1, r0
   129fa:	22e8      	movs	r2, #232	; 0xe8
   129fc:	4618      	mov	r0, r3
   129fe:	f00f f853 	bl	21aa8 <memset>
	chan->chan.chan.ops = &ops;
   12a02:	4a1b      	ldr	r2, [pc, #108]	; (12a70 <bt_att_accept+0x124>)
   12a04:	6082      	str	r2, [r0, #8]
	z_impl_k_queue_init(queue);
   12a06:	3098      	adds	r0, #152	; 0x98
   12a08:	f00e fb9b 	bl	21142 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   12a0c:	687b      	ldr	r3, [r7, #4]
   12a0e:	3390      	adds	r3, #144	; 0x90
   12a10:	e8d3 2fef 	ldaex	r2, [r3]
   12a14:	e8c3 5fe1 	stlex	r1, r5, [r3]
   12a18:	2900      	cmp	r1, #0
   12a1a:	d1f9      	bne.n	12a10 <bt_att_accept+0xc4>
	chan->att = att;
   12a1c:	687b      	ldr	r3, [r7, #4]
   12a1e:	601c      	str	r4, [r3, #0]
	if (sys_slist_is_empty(&att->chans)) {
   12a20:	6a63      	ldr	r3, [r4, #36]	; 0x24
	att_chan_attach(att, chan);
   12a22:	f8d7 8004 	ldr.w	r8, [r7, #4]
	if (sys_slist_is_empty(&att->chans)) {
   12a26:	b91b      	cbnz	r3, 12a30 <bt_att_accept+0xe4>
   12a28:	f104 000c 	add.w	r0, r4, #12
   12a2c:	f00e fb89 	bl	21142 <z_impl_k_queue_init>
	return list->head;
   12a30:	6a62      	ldr	r2, [r4, #36]	; 0x24
	sys_slist_prepend(&att->chans, &chan->node);
   12a32:	f108 03e0 	add.w	r3, r8, #224	; 0xe0
	parent->next = child;
   12a36:	f8c8 20e0 	str.w	r2, [r8, #224]	; 0xe0
Z_GENLIST_PREPEND(slist, snode)
   12a3a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	list->head = node;
   12a3c:	6263      	str	r3, [r4, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
   12a3e:	b902      	cbnz	r2, 12a42 <bt_att_accept+0xf6>
	list->tail = node;
   12a40:	62a3      	str	r3, [r4, #40]	; 0x28
	return chan;
   12a42:	687b      	ldr	r3, [r7, #4]
	if (!chan) {
   12a44:	2b00      	cmp	r3, #0
   12a46:	d0a0      	beq.n	1298a <bt_att_accept+0x3e>
	*ch = &chan->chan.chan;
   12a48:	3304      	adds	r3, #4
   12a4a:	6033      	str	r3, [r6, #0]
	return 0;
   12a4c:	e79f      	b.n	1298e <bt_att_accept+0x42>
   12a4e:	bf00      	nop
   12a50:	20008864 	.word	0x20008864
   12a54:	000258a7 	.word	0x000258a7
   12a58:	00025a7d 	.word	0x00025a7d
   12a5c:	000227c0 	.word	0x000227c0
   12a60:	20009ed4 	.word	0x20009ed4
   12a64:	20008880 	.word	0x20008880
   12a68:	000258d0 	.word	0x000258d0
   12a6c:	00025a70 	.word	0x00025a70
   12a70:	200083f0 	.word	0x200083f0

00012a74 <bt_att_chan_create_pdu>:
{
   12a74:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   12a78:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   12a7a:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   12a7c:	1c53      	adds	r3, r2, #1
   12a7e:	428b      	cmp	r3, r1
{
   12a80:	af00      	add	r7, sp, #0
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   12a82:	d916      	bls.n	12ab2 <bt_att_chan_create_pdu+0x3e>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   12a84:	466c      	mov	r4, sp
   12a86:	b08a      	sub	sp, #40	; 0x28
   12a88:	466a      	mov	r2, sp
   12a8a:	482e      	ldr	r0, [pc, #184]	; (12b44 <bt_att_chan_create_pdu+0xd0>)
   12a8c:	6213      	str	r3, [r2, #32]
   12a8e:	6150      	str	r0, [r2, #20]
   12a90:	482d      	ldr	r0, [pc, #180]	; (12b48 <bt_att_chan_create_pdu+0xd4>)
   12a92:	2305      	movs	r3, #5
   12a94:	e9c2 0106 	strd	r0, r1, [r2, #24]
   12a98:	f44f 5122 	mov.w	r1, #10368	; 0x2880
   12a9c:	f842 3f10 	str.w	r3, [r2, #16]!
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   12aa0:	482a      	ldr	r0, [pc, #168]	; (12b4c <bt_att_chan_create_pdu+0xd8>)
   12aa2:	f00b ff31 	bl	1e908 <z_log_msg_static_create.constprop.0>
   12aa6:	46a5      	mov	sp, r4
		return NULL;
   12aa8:	2400      	movs	r4, #0
}
   12aaa:	4620      	mov	r0, r4
   12aac:	46bd      	mov	sp, r7
   12aae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	switch (att_op_get_type(op)) {
   12ab2:	4628      	mov	r0, r5
   12ab4:	f7ff fcd0 	bl	12458 <att_op_get_type>
   12ab8:	2802      	cmp	r0, #2
   12aba:	d01b      	beq.n	12af4 <bt_att_chan_create_pdu+0x80>
   12abc:	2804      	cmp	r0, #4
   12abe:	d019      	beq.n	12af4 <bt_att_chan_create_pdu+0x80>
		timeout = K_FOREVER;
   12ac0:	f04f 38ff 	mov.w	r8, #4294967295
   12ac4:	f04f 39ff 	mov.w	r9, #4294967295
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   12ac8:	2100      	movs	r1, #0
   12aca:	4642      	mov	r2, r8
   12acc:	464b      	mov	r3, r9
   12ace:	4608      	mov	r0, r1
   12ad0:	f00b fdf2 	bl	1e6b8 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   12ad4:	4604      	mov	r4, r0
   12ad6:	b990      	cbnz	r0, 12afe <bt_att_chan_create_pdu+0x8a>
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   12ad8:	466c      	mov	r4, sp
   12ada:	b088      	sub	sp, #32
   12adc:	466a      	mov	r2, sp
   12ade:	4b1c      	ldr	r3, [pc, #112]	; (12b50 <bt_att_chan_create_pdu+0xdc>)
   12ae0:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   12ae4:	6153      	str	r3, [r2, #20]
   12ae6:	4b18      	ldr	r3, [pc, #96]	; (12b48 <bt_att_chan_create_pdu+0xd4>)
   12ae8:	e9c2 3506 	strd	r3, r5, [r2, #24]
   12aec:	2304      	movs	r3, #4
   12aee:	f842 3f10 	str.w	r3, [r2, #16]!
   12af2:	e7d5      	b.n	12aa0 <bt_att_chan_create_pdu+0x2c>
	switch (att_op_get_type(op)) {
   12af4:	f44f 2870 	mov.w	r8, #983040	; 0xf0000
   12af8:	f04f 0900 	mov.w	r9, #0
   12afc:	e7e4      	b.n	12ac8 <bt_att_chan_create_pdu+0x54>
	return z_impl_k_queue_get(queue, timeout);
   12afe:	4815      	ldr	r0, [pc, #84]	; (12b54 <bt_att_chan_create_pdu+0xe0>)
   12b00:	4642      	mov	r2, r8
   12b02:	464b      	mov	r3, r9
   12b04:	f006 ff64 	bl	199d0 <z_impl_k_queue_get>
	if (!data) {
   12b08:	b998      	cbnz	r0, 12b32 <bt_att_chan_create_pdu+0xbe>
		BT_WARN("Unable to allocate ATT TX meta");
   12b0a:	466d      	mov	r5, sp
   12b0c:	b088      	sub	sp, #32
   12b0e:	466a      	mov	r2, sp
   12b10:	4b11      	ldr	r3, [pc, #68]	; (12b58 <bt_att_chan_create_pdu+0xe4>)
   12b12:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   12b16:	6153      	str	r3, [r2, #20]
   12b18:	4b0b      	ldr	r3, [pc, #44]	; (12b48 <bt_att_chan_create_pdu+0xd4>)
   12b1a:	480c      	ldr	r0, [pc, #48]	; (12b4c <bt_att_chan_create_pdu+0xd8>)
   12b1c:	6193      	str	r3, [r2, #24]
   12b1e:	2303      	movs	r3, #3
   12b20:	f842 3f10 	str.w	r3, [r2, #16]!
   12b24:	f00b fef0 	bl	1e908 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   12b28:	4620      	mov	r0, r4
   12b2a:	46ad      	mov	sp, r5
   12b2c:	f003 fc06 	bl	1633c <net_buf_unref>
		return NULL;
   12b30:	e7ba      	b.n	12aa8 <bt_att_chan_create_pdu+0x34>
	bt_att_tx_meta_data(buf) = data;
   12b32:	6160      	str	r0, [r4, #20]
   12b34:	2101      	movs	r1, #1
   12b36:	f104 0008 	add.w	r0, r4, #8
   12b3a:	f00d f9a7 	bl	1fe8c <net_buf_simple_add>
	hdr->code = op;
   12b3e:	7005      	strb	r5, [r0, #0]
	return buf;
   12b40:	e7b3      	b.n	12aaa <bt_att_chan_create_pdu+0x36>
   12b42:	bf00      	nop
   12b44:	000258f9 	.word	0x000258f9
   12b48:	00025aa5 	.word	0x00025aa5
   12b4c:	000227c0 	.word	0x000227c0
   12b50:	00025659 	.word	0x00025659
   12b54:	20008964 	.word	0x20008964
   12b58:	00025922 	.word	0x00025922

00012b5c <bt_att_recv>:
{
   12b5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (buf->len < sizeof(*hdr)) {
   12b60:	898b      	ldrh	r3, [r1, #12]
{
   12b62:	4605      	mov	r5, r0
   12b64:	4689      	mov	r9, r1
   12b66:	af00      	add	r7, sp, #0
	if (buf->len < sizeof(*hdr)) {
   12b68:	b99b      	cbnz	r3, 12b92 <bt_att_recv+0x36>
		BT_ERR("Too small ATT PDU received");
   12b6a:	466c      	mov	r4, sp
   12b6c:	b088      	sub	sp, #32
   12b6e:	466a      	mov	r2, sp
   12b70:	4b52      	ldr	r3, [pc, #328]	; (12cbc <bt_att_recv+0x160>)
   12b72:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12b76:	6153      	str	r3, [r2, #20]
   12b78:	4b51      	ldr	r3, [pc, #324]	; (12cc0 <bt_att_recv+0x164>)
   12b7a:	6193      	str	r3, [r2, #24]
   12b7c:	2303      	movs	r3, #3
   12b7e:	f842 3f10 	str.w	r3, [r2, #16]!
			BT_WARN("Ignoring unexpected request");
   12b82:	4850      	ldr	r0, [pc, #320]	; (12cc4 <bt_att_recv+0x168>)
   12b84:	f00b fec0 	bl	1e908 <z_log_msg_static_create.constprop.0>
   12b88:	46a5      	mov	sp, r4
}
   12b8a:	2000      	movs	r0, #0
   12b8c:	46bd      	mov	sp, r7
   12b8e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   12b92:	2101      	movs	r1, #1
   12b94:	f109 0008 	add.w	r0, r9, #8
   12b98:	f00d f9a8 	bl	1feec <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   12b9c:	f855 3c04 	ldr.w	r3, [r5, #-4]
   12ba0:	4604      	mov	r4, r0
   12ba2:	2b00      	cmp	r3, #0
   12ba4:	d0f1      	beq.n	12b8a <bt_att_recv+0x2e>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   12ba6:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   12ba8:	7801      	ldrb	r1, [r0, #0]
   12baa:	f8df b11c 	ldr.w	fp, [pc, #284]	; 12cc8 <bt_att_recv+0x16c>
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   12bae:	1f2e      	subs	r6, r5, #4
		if (hdr->code == handlers[i].op) {
   12bb0:	f81b 0033 	ldrb.w	r0, [fp, r3, lsl #3]
   12bb4:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
   12bb8:	4288      	cmp	r0, r1
   12bba:	eb0b 02c3 	add.w	r2, fp, r3, lsl #3
   12bbe:	d118      	bne.n	12bf2 <bt_att_recv+0x96>
		if (handler->type == ATT_REQUEST &&
   12bc0:	f892 8002 	ldrb.w	r8, [r2, #2]
   12bc4:	f1b8 0f01 	cmp.w	r8, #1
   12bc8:	d137      	bne.n	12c3a <bt_att_recv+0xde>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   12bca:	2100      	movs	r1, #0
   12bcc:	f105 008c 	add.w	r0, r5, #140	; 0x8c
   12bd0:	f00b ff84 	bl	1eadc <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   12bd4:	2800      	cmp	r0, #0
   12bd6:	d03e      	beq.n	12c56 <bt_att_recv+0xfa>
			BT_WARN("Ignoring unexpected request");
   12bd8:	466c      	mov	r4, sp
   12bda:	b088      	sub	sp, #32
   12bdc:	466a      	mov	r2, sp
   12bde:	4b3b      	ldr	r3, [pc, #236]	; (12ccc <bt_att_recv+0x170>)
   12be0:	6153      	str	r3, [r2, #20]
   12be2:	4b37      	ldr	r3, [pc, #220]	; (12cc0 <bt_att_recv+0x164>)
   12be4:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   12be8:	6193      	str	r3, [r2, #24]
   12bea:	2303      	movs	r3, #3
   12bec:	f842 3f10 	str.w	r3, [r2, #16]!
   12bf0:	e7c7      	b.n	12b82 <bt_att_recv+0x26>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   12bf2:	3301      	adds	r3, #1
   12bf4:	2b0e      	cmp	r3, #14
   12bf6:	d1db      	bne.n	12bb0 <bt_att_recv+0x54>
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   12bf8:	466d      	mov	r5, sp
   12bfa:	b088      	sub	sp, #32
   12bfc:	466a      	mov	r2, sp
   12bfe:	4b34      	ldr	r3, [pc, #208]	; (12cd0 <bt_att_recv+0x174>)
   12c00:	4830      	ldr	r0, [pc, #192]	; (12cc4 <bt_att_recv+0x168>)
   12c02:	6153      	str	r3, [r2, #20]
   12c04:	4b2e      	ldr	r3, [pc, #184]	; (12cc0 <bt_att_recv+0x164>)
   12c06:	e9c2 3106 	strd	r3, r1, [r2, #24]
   12c0a:	2304      	movs	r3, #4
   12c0c:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   12c10:	f842 3f10 	str.w	r3, [r2, #16]!
   12c14:	f00b fe78 	bl	1e908 <z_log_msg_static_create.constprop.0>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   12c18:	7821      	ldrb	r1, [r4, #0]
   12c1a:	46ad      	mov	sp, r5
   12c1c:	4608      	mov	r0, r1
   12c1e:	f7ff fc1b 	bl	12458 <att_op_get_type>
   12c22:	2800      	cmp	r0, #0
   12c24:	d0b1      	beq.n	12b8a <bt_att_recv+0x2e>
   12c26:	2805      	cmp	r0, #5
   12c28:	d0af      	beq.n	12b8a <bt_att_recv+0x2e>
	if (!req) {
   12c2a:	2900      	cmp	r1, #0
   12c2c:	d0ad      	beq.n	12b8a <bt_att_recv+0x2e>
   12c2e:	2306      	movs	r3, #6
   12c30:	2200      	movs	r2, #0
   12c32:	4630      	mov	r0, r6
   12c34:	f00c f8c0 	bl	1edb8 <send_err_rsp.part.0>
   12c38:	e7a7      	b.n	12b8a <bt_att_recv+0x2e>
		} else if (handler->type == ATT_INDICATION &&
   12c3a:	f1b8 0f05 	cmp.w	r8, #5
   12c3e:	d10a      	bne.n	12c56 <bt_att_recv+0xfa>
			   atomic_test_and_set_bit(att_chan->flags,
   12c40:	2101      	movs	r1, #1
   12c42:	f105 008c 	add.w	r0, r5, #140	; 0x8c
   12c46:	f00b ff49 	bl	1eadc <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   12c4a:	b120      	cbz	r0, 12c56 <bt_att_recv+0xfa>
			BT_WARN("Ignoring unexpected indication");
   12c4c:	466c      	mov	r4, sp
   12c4e:	b088      	sub	sp, #32
   12c50:	466a      	mov	r2, sp
   12c52:	4b20      	ldr	r3, [pc, #128]	; (12cd4 <bt_att_recv+0x178>)
   12c54:	e7c4      	b.n	12be0 <bt_att_recv+0x84>
	if (buf->len < handler->expect_len) {
   12c56:	44da      	add	sl, fp
   12c58:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   12c5c:	f89a 2001 	ldrb.w	r2, [sl, #1]
   12c60:	429a      	cmp	r2, r3
   12c62:	d919      	bls.n	12c98 <bt_att_recv+0x13c>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   12c64:	46e8      	mov	r8, sp
   12c66:	b08a      	sub	sp, #40	; 0x28
   12c68:	466a      	mov	r2, sp
   12c6a:	7821      	ldrb	r1, [r4, #0]
   12c6c:	481a      	ldr	r0, [pc, #104]	; (12cd8 <bt_att_recv+0x17c>)
   12c6e:	6211      	str	r1, [r2, #32]
   12c70:	6150      	str	r0, [r2, #20]
   12c72:	4813      	ldr	r0, [pc, #76]	; (12cc0 <bt_att_recv+0x164>)
   12c74:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   12c78:	e9c2 0306 	strd	r0, r3, [r2, #24]
   12c7c:	2305      	movs	r3, #5
   12c7e:	4811      	ldr	r0, [pc, #68]	; (12cc4 <bt_att_recv+0x168>)
   12c80:	f842 3f10 	str.w	r3, [r2, #16]!
   12c84:	f00b fe40 	bl	1e908 <z_log_msg_static_create.constprop.0>
	if (handler->type == ATT_REQUEST && err) {
   12c88:	f89a 3002 	ldrb.w	r3, [sl, #2]
   12c8c:	46c5      	mov	sp, r8
   12c8e:	2b01      	cmp	r3, #1
   12c90:	f47f af7b 	bne.w	12b8a <bt_att_recv+0x2e>
		err = BT_ATT_ERR_INVALID_PDU;
   12c94:	2304      	movs	r3, #4
   12c96:	e00c      	b.n	12cb2 <bt_att_recv+0x156>
		err = handler->func(att_chan, buf);
   12c98:	f8da 3004 	ldr.w	r3, [sl, #4]
   12c9c:	4649      	mov	r1, r9
   12c9e:	4630      	mov	r0, r6
   12ca0:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   12ca2:	f1b8 0f01 	cmp.w	r8, #1
		err = handler->func(att_chan, buf);
   12ca6:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   12ca8:	f47f af6f 	bne.w	12b8a <bt_att_recv+0x2e>
   12cac:	2800      	cmp	r0, #0
   12cae:	f43f af6c 	beq.w	12b8a <bt_att_recv+0x2e>
		send_err_rsp(att_chan, hdr->code, 0, err);
   12cb2:	7821      	ldrb	r1, [r4, #0]
	if (!req) {
   12cb4:	2900      	cmp	r1, #0
   12cb6:	f43f af68 	beq.w	12b8a <bt_att_recv+0x2e>
   12cba:	e7b9      	b.n	12c30 <bt_att_recv+0xd4>
   12cbc:	00025945 	.word	0x00025945
   12cc0:	00025a5a 	.word	0x00025a5a
   12cc4:	000227c0 	.word	0x000227c0
   12cc8:	00022fcc 	.word	0x00022fcc
   12ccc:	00025982 	.word	0x00025982
   12cd0:	00025964 	.word	0x00025964
   12cd4:	000259a2 	.word	0x000259a2
   12cd8:	000259c5 	.word	0x000259c5

00012cdc <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   12cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
   12cde:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   12ce0:	6803      	ldr	r3, [r0, #0]
   12ce2:	460d      	mov	r5, r1
   12ce4:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   12ce6:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   12ce8:	bf18      	it	ne
   12cea:	2101      	movne	r1, #1
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   12cec:	b087      	sub	sp, #28
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   12cee:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   12cf0:	4617      	mov	r7, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   12cf2:	f00c fc3c 	bl	1f56e <bt_gatt_change_aware>
   12cf6:	b948      	cbnz	r0, 12d0c <att_write_rsp.constprop.0+0x30>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   12cf8:	2105      	movs	r1, #5
   12cfa:	f104 0090 	add.w	r0, r4, #144	; 0x90
   12cfe:	f00b feed 	bl	1eadc <atomic_test_and_set_bit>
   12d02:	2800      	cmp	r0, #0
   12d04:	d048      	beq.n	12d98 <att_write_rsp.constprop.0+0xbc>
			return 0;
   12d06:	2000      	movs	r0, #0
}
   12d08:	b007      	add	sp, #28
   12d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!handle) {
   12d0c:	2e00      	cmp	r6, #0
   12d0e:	d045      	beq.n	12d9c <att_write_rsp.constprop.0+0xc0>
	(void)memset(&data, 0, sizeof(data));
   12d10:	2218      	movs	r2, #24
   12d12:	2100      	movs	r1, #0
   12d14:	4668      	mov	r0, sp
   12d16:	f00e fec7 	bl	21aa8 <memset>
	if (rsp) {
   12d1a:	bb67      	cbnz	r7, 12d76 <att_write_rsp.constprop.0+0x9a>
	data.conn = chan->att->conn;
   12d1c:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   12d1e:	4631      	mov	r1, r6
	data.conn = chan->att->conn;
   12d20:	681b      	ldr	r3, [r3, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   12d22:	4630      	mov	r0, r6
	data.conn = chan->att->conn;
   12d24:	9300      	str	r3, [sp, #0]
	data.offset = offset;
   12d26:	2300      	movs	r3, #0
   12d28:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
   12d2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   12d2e:	4a1c      	ldr	r2, [pc, #112]	; (12da0 <att_write_rsp.constprop.0+0xc4>)
	data.value = value;
   12d30:	9303      	str	r3, [sp, #12]
	data.len = len;
   12d32:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
	data.req = req;
   12d36:	f88d 5008 	strb.w	r5, [sp, #8]
	data.len = len;
   12d3a:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   12d3e:	2301      	movs	r3, #1
   12d40:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   12d44:	466b      	mov	r3, sp
   12d46:	f00b fd41 	bl	1e7cc <bt_gatt_foreach_attr>
	if (data.err) {
   12d4a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   12d4e:	b1e3      	cbz	r3, 12d8a <att_write_rsp.constprop.0+0xae>
		if (rsp) {
   12d50:	2f00      	cmp	r7, #0
   12d52:	d0d8      	beq.n	12d06 <att_write_rsp.constprop.0+0x2a>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   12d54:	9b01      	ldr	r3, [sp, #4]
   12d56:	6958      	ldr	r0, [r3, #20]
   12d58:	f7ff fbc4 	bl	124e4 <tx_meta_data_free>
			net_buf_unref(data.buf);
   12d5c:	9801      	ldr	r0, [sp, #4]
   12d5e:	f003 faed 	bl	1633c <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   12d62:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (!req) {
   12d66:	2d00      	cmp	r5, #0
   12d68:	d0cd      	beq.n	12d06 <att_write_rsp.constprop.0+0x2a>
   12d6a:	4632      	mov	r2, r6
   12d6c:	4629      	mov	r1, r5
   12d6e:	4620      	mov	r0, r4
   12d70:	f00c f822 	bl	1edb8 <send_err_rsp.part.0>
   12d74:	e7c7      	b.n	12d06 <att_write_rsp.constprop.0+0x2a>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   12d76:	2200      	movs	r2, #0
   12d78:	4639      	mov	r1, r7
   12d7a:	4620      	mov	r0, r4
   12d7c:	f7ff fe7a 	bl	12a74 <bt_att_chan_create_pdu>
   12d80:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   12d82:	2800      	cmp	r0, #0
   12d84:	d1ca      	bne.n	12d1c <att_write_rsp.constprop.0+0x40>
			return BT_ATT_ERR_UNLIKELY;
   12d86:	200e      	movs	r0, #14
   12d88:	e7be      	b.n	12d08 <att_write_rsp.constprop.0+0x2c>
	if (data.buf) {
   12d8a:	9901      	ldr	r1, [sp, #4]
   12d8c:	2900      	cmp	r1, #0
   12d8e:	d0ba      	beq.n	12d06 <att_write_rsp.constprop.0+0x2a>
		bt_att_chan_send_rsp(chan, data.buf);
   12d90:	4620      	mov	r0, r4
   12d92:	f00b fdef 	bl	1e974 <bt_att_chan_send_rsp>
   12d96:	e7b6      	b.n	12d06 <att_write_rsp.constprop.0+0x2a>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   12d98:	2012      	movs	r0, #18
   12d9a:	e7b5      	b.n	12d08 <att_write_rsp.constprop.0+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   12d9c:	2001      	movs	r0, #1
   12d9e:	e7b3      	b.n	12d08 <att_write_rsp.constprop.0+0x2c>
   12da0:	0001e76b 	.word	0x0001e76b

00012da4 <bt_att_create_pdu>:
{
   12da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12da6:	af00      	add	r7, sp, #0
   12da8:	460e      	mov	r6, r1
   12daa:	4615      	mov	r5, r2
	att = att_get(conn);
   12dac:	f7ff fcd6 	bl	1275c <att_get>
	if (!att) {
   12db0:	b1f0      	cbz	r0, 12df0 <bt_att_create_pdu+0x4c>
	return list->head;
   12db2:	6a43      	ldr	r3, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   12db4:	4618      	mov	r0, r3
   12db6:	b11b      	cbz	r3, 12dc0 <bt_att_create_pdu+0x1c>
	return node->next;
   12db8:	f850 39e0 	ldr.w	r3, [r0], #-224
   12dbc:	b103      	cbz	r3, 12dc0 <bt_att_create_pdu+0x1c>
   12dbe:	3be0      	subs	r3, #224	; 0xe0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   12dc0:	1c6c      	adds	r4, r5, #1
   12dc2:	4622      	mov	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   12dc4:	b118      	cbz	r0, 12dce <bt_att_create_pdu+0x2a>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   12dc6:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   12dc8:	42a1      	cmp	r1, r4
   12dca:	d21b      	bcs.n	12e04 <bt_att_create_pdu+0x60>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   12dcc:	b993      	cbnz	r3, 12df4 <bt_att_create_pdu+0x50>
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   12dce:	466d      	mov	r5, sp
   12dd0:	b088      	sub	sp, #32
   12dd2:	466a      	mov	r2, sp
   12dd4:	4b0f      	ldr	r3, [pc, #60]	; (12e14 <bt_att_create_pdu+0x70>)
   12dd6:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   12dda:	6153      	str	r3, [r2, #20]
   12ddc:	4b0e      	ldr	r3, [pc, #56]	; (12e18 <bt_att_create_pdu+0x74>)
   12dde:	480f      	ldr	r0, [pc, #60]	; (12e1c <bt_att_create_pdu+0x78>)
   12de0:	e9c2 3406 	strd	r3, r4, [r2, #24]
   12de4:	2304      	movs	r3, #4
   12de6:	f842 3f10 	str.w	r3, [r2, #16]!
   12dea:	f00b fd8d 	bl	1e908 <z_log_msg_static_create.constprop.0>
   12dee:	46ad      	mov	sp, r5
		return NULL;
   12df0:	2000      	movs	r0, #0
   12df2:	e00b      	b.n	12e0c <bt_att_create_pdu+0x68>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   12df4:	4618      	mov	r0, r3
   12df6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   12dfa:	b14b      	cbz	r3, 12e10 <bt_att_create_pdu+0x6c>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   12dfc:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   12dfe:	3be0      	subs	r3, #224	; 0xe0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   12e00:	428a      	cmp	r2, r1
   12e02:	d8f7      	bhi.n	12df4 <bt_att_create_pdu+0x50>
		return bt_att_chan_create_pdu(chan, op, len);
   12e04:	462a      	mov	r2, r5
   12e06:	4631      	mov	r1, r6
   12e08:	f7ff fe34 	bl	12a74 <bt_att_chan_create_pdu>
}
   12e0c:	46bd      	mov	sp, r7
   12e0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   12e10:	4614      	mov	r4, r2
   12e12:	e7d8      	b.n	12dc6 <bt_att_create_pdu+0x22>
   12e14:	000259e8 	.word	0x000259e8
   12e18:	00025a93 	.word	0x00025a93
   12e1c:	000227c0 	.word	0x000227c0

00012e20 <att_read_group_req>:
{
   12e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   12e24:	898e      	ldrh	r6, [r1, #12]
{
   12e26:	4604      	mov	r4, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   12e28:	3e04      	subs	r6, #4
   12e2a:	b2f6      	uxtb	r6, r6
	if (uuid_len != 2 && uuid_len != 16) {
   12e2c:	2e02      	cmp	r6, #2
{
   12e2e:	4608      	mov	r0, r1
   12e30:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   12e32:	d001      	beq.n	12e38 <att_read_group_req+0x18>
   12e34:	2e10      	cmp	r6, #16
   12e36:	d16a      	bne.n	12f0e <att_read_group_req+0xee>
   12e38:	2104      	movs	r1, #4
   12e3a:	3008      	adds	r0, #8
   12e3c:	f00d f856 	bl	1feec <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   12e40:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   12e44:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   12e46:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   12e48:	1d01      	adds	r1, r0, #4
   12e4a:	4632      	mov	r2, r6
   12e4c:	4640      	mov	r0, r8
   12e4e:	f00a ff39 	bl	1dcc4 <bt_uuid_create>
   12e52:	2800      	cmp	r0, #0
   12e54:	d05d      	beq.n	12f12 <att_read_group_req+0xf2>
	if (!start || !end) {
   12e56:	2d00      	cmp	r5, #0
   12e58:	d03a      	beq.n	12ed0 <att_read_group_req+0xb0>
   12e5a:	2600      	movs	r6, #0
   12e5c:	2f00      	cmp	r7, #0
   12e5e:	d036      	beq.n	12ece <att_read_group_req+0xae>
	if (start > end) {
   12e60:	42bd      	cmp	r5, r7
   12e62:	d835      	bhi.n	12ed0 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   12e64:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   12e68:	4640      	mov	r0, r8
   12e6a:	a901      	add	r1, sp, #4
   12e6c:	f88d 6004 	strb.w	r6, [sp, #4]
   12e70:	f8ad 3006 	strh.w	r3, [sp, #6]
   12e74:	f00a fef8 	bl	1dc68 <bt_uuid_cmp>
   12e78:	bb70      	cbnz	r0, 12ed8 <att_read_group_req+0xb8>
	struct bt_conn *conn = chan->chan.chan.conn;
   12e7a:	6866      	ldr	r6, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   12e7c:	2214      	movs	r2, #20
   12e7e:	2100      	movs	r1, #0
   12e80:	a807      	add	r0, sp, #28
   12e82:	f00e fe11 	bl	21aa8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   12e86:	2201      	movs	r2, #1
   12e88:	2111      	movs	r1, #17
   12e8a:	4630      	mov	r0, r6
   12e8c:	f7ff ff8a 	bl	12da4 <bt_att_create_pdu>
   12e90:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   12e92:	2800      	cmp	r0, #0
   12e94:	d03d      	beq.n	12f12 <att_read_group_req+0xf2>
	return net_buf_simple_add(&buf->b, len);
   12e96:	2101      	movs	r1, #1
   12e98:	3008      	adds	r0, #8
	data.uuid = uuid;
   12e9a:	e9cd 4807 	strd	r4, r8, [sp, #28]
   12e9e:	f00c fff5 	bl	1fe8c <net_buf_simple_add>
	data.rsp->len = 0U;
   12ea2:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   12ea4:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   12ea6:	4639      	mov	r1, r7
	data.rsp->len = 0U;
   12ea8:	7003      	strb	r3, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   12eaa:	4a1b      	ldr	r2, [pc, #108]	; (12f18 <att_read_group_req+0xf8>)
	data.group = NULL;
   12eac:	930b      	str	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   12eae:	4628      	mov	r0, r5
   12eb0:	ab07      	add	r3, sp, #28
   12eb2:	f00b fc8b 	bl	1e7cc <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   12eb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12eb8:	781b      	ldrb	r3, [r3, #0]
   12eba:	bb1b      	cbnz	r3, 12f04 <att_read_group_req+0xe4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   12ebc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12ebe:	6958      	ldr	r0, [r3, #20]
   12ec0:	f7ff fb10 	bl	124e4 <tx_meta_data_free>
		net_buf_unref(data.buf);
   12ec4:	9809      	ldr	r0, [sp, #36]	; 0x24
   12ec6:	f003 fa39 	bl	1633c <net_buf_unref>
	if (!req) {
   12eca:	230a      	movs	r3, #10
   12ecc:	e001      	b.n	12ed2 <att_read_group_req+0xb2>
			*err = 0U;
   12ece:	463d      	mov	r5, r7
	if (!req) {
   12ed0:	2301      	movs	r3, #1
   12ed2:	462a      	mov	r2, r5
   12ed4:	2110      	movs	r1, #16
   12ed6:	e00e      	b.n	12ef6 <att_read_group_req+0xd6>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   12ed8:	f642 0301 	movw	r3, #10241	; 0x2801
   12edc:	4640      	mov	r0, r8
   12ede:	a907      	add	r1, sp, #28
   12ee0:	f88d 601c 	strb.w	r6, [sp, #28]
   12ee4:	f8ad 301e 	strh.w	r3, [sp, #30]
   12ee8:	f00a febe 	bl	1dc68 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   12eec:	2800      	cmp	r0, #0
   12eee:	d0c4      	beq.n	12e7a <att_read_group_req+0x5a>
	if (!req) {
   12ef0:	2310      	movs	r3, #16
   12ef2:	462a      	mov	r2, r5
   12ef4:	4619      	mov	r1, r3
   12ef6:	4620      	mov	r0, r4
   12ef8:	f00b ff5e 	bl	1edb8 <send_err_rsp.part.0>
		return 0;
   12efc:	2000      	movs	r0, #0
}
   12efe:	b00c      	add	sp, #48	; 0x30
   12f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf);
   12f04:	4620      	mov	r0, r4
   12f06:	9909      	ldr	r1, [sp, #36]	; 0x24
   12f08:	f00b fd34 	bl	1e974 <bt_att_chan_send_rsp>
	return 0;
   12f0c:	e7f6      	b.n	12efc <att_read_group_req+0xdc>
		return BT_ATT_ERR_INVALID_PDU;
   12f0e:	2004      	movs	r0, #4
   12f10:	e7f5      	b.n	12efe <att_read_group_req+0xde>
		return BT_ATT_ERR_UNLIKELY;
   12f12:	200e      	movs	r0, #14
   12f14:	e7f3      	b.n	12efe <att_read_group_req+0xde>
   12f16:	bf00      	nop
   12f18:	00012801 	.word	0x00012801

00012f1c <att_read_mult_vl_req>:
{
   12f1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   12f20:	6846      	ldr	r6, [r0, #4]
{
   12f22:	4604      	mov	r4, r0
   12f24:	460d      	mov	r5, r1
   12f26:	b085      	sub	sp, #20
	if (!bt_gatt_change_aware(conn, true)) {
   12f28:	2101      	movs	r1, #1
   12f2a:	4630      	mov	r0, r6
   12f2c:	f00c fb1f 	bl	1f56e <bt_gatt_change_aware>
   12f30:	b950      	cbnz	r0, 12f48 <att_read_mult_vl_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   12f32:	2105      	movs	r1, #5
   12f34:	f104 0090 	add.w	r0, r4, #144	; 0x90
   12f38:	f00b fdd0 	bl	1eadc <atomic_test_and_set_bit>
   12f3c:	2800      	cmp	r0, #0
   12f3e:	d13b      	bne.n	12fb8 <att_read_mult_vl_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   12f40:	2012      	movs	r0, #18
}
   12f42:	b005      	add	sp, #20
   12f44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   12f48:	2210      	movs	r2, #16
   12f4a:	2100      	movs	r1, #0
   12f4c:	4668      	mov	r0, sp
   12f4e:	f00e fdab 	bl	21aa8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   12f52:	2200      	movs	r2, #0
   12f54:	2121      	movs	r1, #33	; 0x21
   12f56:	4630      	mov	r0, r6
   12f58:	f7ff ff24 	bl	12da4 <bt_att_create_pdu>
   12f5c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   12f5e:	b368      	cbz	r0, 12fbc <att_read_mult_vl_req+0xa0>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   12f60:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   12f64:	f8df 9058 	ldr.w	r9, [pc, #88]	; 12fc0 <att_read_mult_vl_req+0xa4>
	data.chan = chan;
   12f68:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   12f6a:	f105 0708 	add.w	r7, r5, #8
	while (buf->len >= sizeof(uint16_t)) {
   12f6e:	89ab      	ldrh	r3, [r5, #12]
   12f70:	2b01      	cmp	r3, #1
   12f72:	d804      	bhi.n	12f7e <att_read_mult_vl_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   12f74:	4620      	mov	r0, r4
   12f76:	9902      	ldr	r1, [sp, #8]
   12f78:	f00b fcfc 	bl	1e974 <bt_att_chan_send_rsp>
	return 0;
   12f7c:	e01c      	b.n	12fb8 <att_read_mult_vl_req+0x9c>
   12f7e:	4638      	mov	r0, r7
   12f80:	f00c ffbc 	bl	1fefc <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   12f84:	466b      	mov	r3, sp
   12f86:	464a      	mov	r2, r9
   12f88:	4601      	mov	r1, r0
   12f8a:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   12f8c:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   12f90:	f00b fc1c 	bl	1e7cc <bt_gatt_foreach_attr>
		if (data.err) {
   12f94:	f89d 300c 	ldrb.w	r3, [sp, #12]
   12f98:	2b00      	cmp	r3, #0
   12f9a:	d0e8      	beq.n	12f6e <att_read_mult_vl_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   12f9c:	9b02      	ldr	r3, [sp, #8]
   12f9e:	6958      	ldr	r0, [r3, #20]
   12fa0:	f7ff faa0 	bl	124e4 <tx_meta_data_free>
			net_buf_unref(data.buf);
   12fa4:	9802      	ldr	r0, [sp, #8]
   12fa6:	f003 f9c9 	bl	1633c <net_buf_unref>
	if (!req) {
   12faa:	4632      	mov	r2, r6
   12fac:	2120      	movs	r1, #32
   12fae:	4620      	mov	r0, r4
   12fb0:	f89d 300c 	ldrb.w	r3, [sp, #12]
   12fb4:	f00b ff00 	bl	1edb8 <send_err_rsp.part.0>
			return 0;
   12fb8:	2000      	movs	r0, #0
   12fba:	e7c2      	b.n	12f42 <att_read_mult_vl_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   12fbc:	200e      	movs	r0, #14
   12fbe:	e7c0      	b.n	12f42 <att_read_mult_vl_req+0x26>
   12fc0:	0001eb45 	.word	0x0001eb45

00012fc4 <att_read_mult_req>:
{
   12fc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   12fc8:	6846      	ldr	r6, [r0, #4]
{
   12fca:	4604      	mov	r4, r0
   12fcc:	460d      	mov	r5, r1
   12fce:	b085      	sub	sp, #20
	if (!bt_gatt_change_aware(conn, true)) {
   12fd0:	2101      	movs	r1, #1
   12fd2:	4630      	mov	r0, r6
   12fd4:	f00c facb 	bl	1f56e <bt_gatt_change_aware>
   12fd8:	b950      	cbnz	r0, 12ff0 <att_read_mult_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   12fda:	2105      	movs	r1, #5
   12fdc:	f104 0090 	add.w	r0, r4, #144	; 0x90
   12fe0:	f00b fd7c 	bl	1eadc <atomic_test_and_set_bit>
   12fe4:	2800      	cmp	r0, #0
   12fe6:	d13b      	bne.n	13060 <att_read_mult_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   12fe8:	2012      	movs	r0, #18
}
   12fea:	b005      	add	sp, #20
   12fec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   12ff0:	2210      	movs	r2, #16
   12ff2:	2100      	movs	r1, #0
   12ff4:	4668      	mov	r0, sp
   12ff6:	f00e fd57 	bl	21aa8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   12ffa:	2200      	movs	r2, #0
   12ffc:	210f      	movs	r1, #15
   12ffe:	4630      	mov	r0, r6
   13000:	f7ff fed0 	bl	12da4 <bt_att_create_pdu>
   13004:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   13006:	b368      	cbz	r0, 13064 <att_read_mult_req+0xa0>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   13008:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1300c:	f8df 9058 	ldr.w	r9, [pc, #88]	; 13068 <att_read_mult_req+0xa4>
	data.chan = chan;
   13010:	9400      	str	r4, [sp, #0]
   13012:	f105 0708 	add.w	r7, r5, #8
	while (buf->len >= sizeof(uint16_t)) {
   13016:	89ab      	ldrh	r3, [r5, #12]
   13018:	2b01      	cmp	r3, #1
   1301a:	d804      	bhi.n	13026 <att_read_mult_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   1301c:	4620      	mov	r0, r4
   1301e:	9902      	ldr	r1, [sp, #8]
   13020:	f00b fca8 	bl	1e974 <bt_att_chan_send_rsp>
	return 0;
   13024:	e01c      	b.n	13060 <att_read_mult_req+0x9c>
   13026:	4638      	mov	r0, r7
   13028:	f00c ff68 	bl	1fefc <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1302c:	466b      	mov	r3, sp
   1302e:	464a      	mov	r2, r9
   13030:	4601      	mov	r1, r0
   13032:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   13034:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   13038:	f00b fbc8 	bl	1e7cc <bt_gatt_foreach_attr>
		if (data.err) {
   1303c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   13040:	2b00      	cmp	r3, #0
   13042:	d0e8      	beq.n	13016 <att_read_mult_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   13044:	9b02      	ldr	r3, [sp, #8]
   13046:	6958      	ldr	r0, [r3, #20]
   13048:	f7ff fa4c 	bl	124e4 <tx_meta_data_free>
			net_buf_unref(data.buf);
   1304c:	9802      	ldr	r0, [sp, #8]
   1304e:	f003 f975 	bl	1633c <net_buf_unref>
	if (!req) {
   13052:	4632      	mov	r2, r6
   13054:	210e      	movs	r1, #14
   13056:	4620      	mov	r0, r4
   13058:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1305c:	f00b feac 	bl	1edb8 <send_err_rsp.part.0>
			return 0;
   13060:	2000      	movs	r0, #0
   13062:	e7c2      	b.n	12fea <att_read_mult_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   13064:	200e      	movs	r0, #14
   13066:	e7c0      	b.n	12fea <att_read_mult_req+0x26>
   13068:	0001eaff 	.word	0x0001eaff

0001306c <att_read_rsp>:
{
   1306c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   13070:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   13074:	4604      	mov	r4, r0
   13076:	460e      	mov	r6, r1
	if (!bt_gatt_change_aware(conn, true)) {
   13078:	4640      	mov	r0, r8
   1307a:	2101      	movs	r1, #1
{
   1307c:	4617      	mov	r7, r2
   1307e:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
   13080:	f00c fa75 	bl	1f56e <bt_gatt_change_aware>
   13084:	b948      	cbnz	r0, 1309a <att_read_rsp+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   13086:	2105      	movs	r1, #5
   13088:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1308c:	f00b fd26 	bl	1eadc <atomic_test_and_set_bit>
   13090:	bb78      	cbnz	r0, 130f2 <att_read_rsp+0x86>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   13092:	2012      	movs	r0, #18
}
   13094:	b004      	add	sp, #16
   13096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   1309a:	b38d      	cbz	r5, 13100 <att_read_rsp+0x94>
	(void)memset(&data, 0, sizeof(data));
   1309c:	2210      	movs	r2, #16
   1309e:	2100      	movs	r1, #0
   130a0:	4668      	mov	r0, sp
   130a2:	f00e fd01 	bl	21aa8 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   130a6:	2200      	movs	r2, #0
   130a8:	4639      	mov	r1, r7
   130aa:	4640      	mov	r0, r8
   130ac:	f7ff fe7a 	bl	12da4 <bt_att_create_pdu>
   130b0:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   130b2:	b338      	cbz	r0, 13104 <att_read_rsp+0x98>
	data.offset = offset;
   130b4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   130b8:	4629      	mov	r1, r5
	data.offset = offset;
   130ba:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   130be:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   130c0:	4628      	mov	r0, r5
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   130c2:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   130c6:	4a10      	ldr	r2, [pc, #64]	; (13108 <att_read_rsp+0x9c>)
   130c8:	466b      	mov	r3, sp
	data.chan = chan;
   130ca:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   130cc:	f00b fb7e 	bl	1e7cc <bt_gatt_foreach_attr>
	if (data.err) {
   130d0:	f89d 300c 	ldrb.w	r3, [sp, #12]
   130d4:	b17b      	cbz	r3, 130f6 <att_read_rsp+0x8a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   130d6:	9b02      	ldr	r3, [sp, #8]
   130d8:	6958      	ldr	r0, [r3, #20]
   130da:	f7ff fa03 	bl	124e4 <tx_meta_data_free>
		net_buf_unref(data.buf);
   130de:	9802      	ldr	r0, [sp, #8]
   130e0:	f003 f92c 	bl	1633c <net_buf_unref>
	if (!req) {
   130e4:	462a      	mov	r2, r5
   130e6:	4631      	mov	r1, r6
   130e8:	4620      	mov	r0, r4
   130ea:	f89d 300c 	ldrb.w	r3, [sp, #12]
   130ee:	f00b fe63 	bl	1edb8 <send_err_rsp.part.0>
			return 0;
   130f2:	2000      	movs	r0, #0
   130f4:	e7ce      	b.n	13094 <att_read_rsp+0x28>
	bt_att_chan_send_rsp(chan, data.buf);
   130f6:	4620      	mov	r0, r4
   130f8:	9902      	ldr	r1, [sp, #8]
   130fa:	f00b fc3b 	bl	1e974 <bt_att_chan_send_rsp>
	return 0;
   130fe:	e7f8      	b.n	130f2 <att_read_rsp+0x86>
		return BT_ATT_ERR_INVALID_HANDLE;
   13100:	2001      	movs	r0, #1
   13102:	e7c7      	b.n	13094 <att_read_rsp+0x28>
		return BT_ATT_ERR_UNLIKELY;
   13104:	200e      	movs	r0, #14
   13106:	e7c5      	b.n	13094 <att_read_rsp+0x28>
   13108:	0001eaff 	.word	0x0001eaff

0001310c <att_read_type_req>:
{
   1310c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   13110:	898d      	ldrh	r5, [r1, #12]
{
   13112:	4604      	mov	r4, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   13114:	3d04      	subs	r5, #4
   13116:	b2ed      	uxtb	r5, r5
	if (uuid_len != 2 && uuid_len != 16) {
   13118:	2d02      	cmp	r5, #2
{
   1311a:	4608      	mov	r0, r1
   1311c:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   1311e:	d001      	beq.n	13124 <att_read_type_req+0x18>
   13120:	2d10      	cmp	r5, #16
   13122:	d150      	bne.n	131c6 <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   13124:	2104      	movs	r1, #4
   13126:	3008      	adds	r0, #8
   13128:	f00c fee0 	bl	1feec <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1312c:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   13130:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   13132:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   13134:	1d01      	adds	r1, r0, #4
   13136:	462a      	mov	r2, r5
   13138:	4640      	mov	r0, r8
   1313a:	f00a fdc3 	bl	1dcc4 <bt_uuid_create>
   1313e:	b188      	cbz	r0, 13164 <att_read_type_req+0x58>
	if (!start || !end) {
   13140:	b19e      	cbz	r6, 1316a <att_read_type_req+0x5e>
   13142:	b18f      	cbz	r7, 13168 <att_read_type_req+0x5c>
	if (start > end) {
   13144:	42b7      	cmp	r7, r6
   13146:	d310      	bcc.n	1316a <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   13148:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   1314a:	6865      	ldr	r5, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   1314c:	2100      	movs	r1, #0
   1314e:	eb0d 0002 	add.w	r0, sp, r2
   13152:	f00e fca9 	bl	21aa8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   13156:	2201      	movs	r2, #1
   13158:	2109      	movs	r1, #9
   1315a:	4628      	mov	r0, r5
   1315c:	f7ff fe22 	bl	12da4 <bt_att_create_pdu>
   13160:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   13162:	b960      	cbnz	r0, 1317e <att_read_type_req+0x72>
		return BT_ATT_ERR_UNLIKELY;
   13164:	200e      	movs	r0, #14
   13166:	e007      	b.n	13178 <att_read_type_req+0x6c>
			*err = 0U;
   13168:	463e      	mov	r6, r7
	if (!req) {
   1316a:	2301      	movs	r3, #1
   1316c:	4632      	mov	r2, r6
   1316e:	2108      	movs	r1, #8
   13170:	4620      	mov	r0, r4
   13172:	f00b fe21 	bl	1edb8 <send_err_rsp.part.0>
		return 0;
   13176:	2000      	movs	r0, #0
}
   13178:	b00c      	add	sp, #48	; 0x30
   1317a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   1317e:	2101      	movs	r1, #1
   13180:	3008      	adds	r0, #8
	data.uuid = uuid;
   13182:	e9cd 4806 	strd	r4, r8, [sp, #24]
   13186:	f00c fe81 	bl	1fe8c <net_buf_simple_add>
	data.rsp->len = 0U;
   1318a:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1318c:	9009      	str	r0, [sp, #36]	; 0x24
	data.rsp->len = 0U;
   1318e:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   13190:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   13192:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   13194:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   13198:	4630      	mov	r0, r6
   1319a:	ab06      	add	r3, sp, #24
   1319c:	4a0b      	ldr	r2, [pc, #44]	; (131cc <att_read_type_req+0xc0>)
   1319e:	f00b fb15 	bl	1e7cc <bt_gatt_foreach_attr>
	if (data.err) {
   131a2:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   131a6:	b14b      	cbz	r3, 131bc <att_read_type_req+0xb0>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   131a8:	9b08      	ldr	r3, [sp, #32]
   131aa:	6958      	ldr	r0, [r3, #20]
   131ac:	f7ff f99a 	bl	124e4 <tx_meta_data_free>
		net_buf_unref(data.buf);
   131b0:	9808      	ldr	r0, [sp, #32]
   131b2:	f003 f8c3 	bl	1633c <net_buf_unref>
	if (!req) {
   131b6:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   131ba:	e7d7      	b.n	1316c <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   131bc:	4620      	mov	r0, r4
   131be:	9908      	ldr	r1, [sp, #32]
   131c0:	f00b fbd8 	bl	1e974 <bt_att_chan_send_rsp>
	return 0;
   131c4:	e7d7      	b.n	13176 <att_read_type_req+0x6a>
		return BT_ATT_ERR_INVALID_PDU;
   131c6:	2004      	movs	r0, #4
   131c8:	e7d6      	b.n	13178 <att_read_type_req+0x6c>
   131ca:	bf00      	nop
   131cc:	000128ad 	.word	0x000128ad

000131d0 <att_find_type_req>:
{
   131d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   131d4:	460f      	mov	r7, r1
   131d6:	4604      	mov	r4, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   131d8:	2106      	movs	r1, #6
   131da:	b086      	sub	sp, #24
   131dc:	f107 0008 	add.w	r0, r7, #8
   131e0:	f00c fe84 	bl	1feec <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   131e4:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   131e6:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   131ea:	8882      	ldrh	r2, [r0, #4]
	value = buf->data;
   131ec:	f8d7 9008 	ldr.w	r9, [r7, #8]
	if (!start || !end) {
   131f0:	b1c5      	cbz	r5, 13224 <att_find_type_req+0x54>
   131f2:	2300      	movs	r3, #0
   131f4:	f1b8 0f00 	cmp.w	r8, #0
   131f8:	d013      	beq.n	13222 <att_find_type_req+0x52>
	if (start > end) {
   131fa:	4545      	cmp	r5, r8
   131fc:	d812      	bhi.n	13224 <att_find_type_req+0x54>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   131fe:	f88d 3000 	strb.w	r3, [sp]
   13202:	f88d 3004 	strb.w	r3, [sp, #4]
   13206:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1320a:	4668      	mov	r0, sp
   1320c:	a901      	add	r1, sp, #4
   1320e:	f8ad 2002 	strh.w	r2, [sp, #2]
   13212:	f8ad 3006 	strh.w	r3, [sp, #6]
   13216:	f00a fd27 	bl	1dc68 <bt_uuid_cmp>
   1321a:	4606      	mov	r6, r0
   1321c:	b160      	cbz	r0, 13238 <att_find_type_req+0x68>
	if (!req) {
   1321e:	230a      	movs	r3, #10
   13220:	e001      	b.n	13226 <att_find_type_req+0x56>
			*err = 0U;
   13222:	4645      	mov	r5, r8
	if (!req) {
   13224:	2301      	movs	r3, #1
   13226:	462a      	mov	r2, r5
   13228:	2106      	movs	r1, #6
   1322a:	4620      	mov	r0, r4
   1322c:	f00b fdc4 	bl	1edb8 <send_err_rsp.part.0>
		return 0;
   13230:	2000      	movs	r0, #0
}
   13232:	b006      	add	sp, #24
   13234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct bt_conn *conn = chan->chan.chan.conn;
   13238:	f8d4 a004 	ldr.w	sl, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   1323c:	4601      	mov	r1, r0
   1323e:	2214      	movs	r2, #20
   13240:	a801      	add	r0, sp, #4
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   13242:	7b3f      	ldrb	r7, [r7, #12]
	(void)memset(&data, 0, sizeof(data));
   13244:	f00e fc30 	bl	21aa8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   13248:	4632      	mov	r2, r6
   1324a:	2107      	movs	r1, #7
   1324c:	4650      	mov	r0, sl
   1324e:	f7ff fda9 	bl	12da4 <bt_att_create_pdu>
   13252:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   13254:	b1f8      	cbz	r0, 13296 <att_find_type_req+0xc6>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   13256:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   13258:	4641      	mov	r1, r8
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1325a:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1325e:	4628      	mov	r0, r5
   13260:	ab01      	add	r3, sp, #4
   13262:	4a0e      	ldr	r2, [pc, #56]	; (1329c <att_find_type_req+0xcc>)
	data.value = value;
   13264:	e9cd 6903 	strd	r6, r9, [sp, #12]
	data.chan = chan;
   13268:	9401      	str	r4, [sp, #4]
	data.value_len = value_len;
   1326a:	f88d 7014 	strb.w	r7, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1326e:	f00b faad 	bl	1e7cc <bt_gatt_foreach_attr>
	if (data.err) {
   13272:	f89d 3015 	ldrb.w	r3, [sp, #21]
   13276:	b14b      	cbz	r3, 1328c <att_find_type_req+0xbc>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   13278:	9b02      	ldr	r3, [sp, #8]
   1327a:	6958      	ldr	r0, [r3, #20]
   1327c:	f7ff f932 	bl	124e4 <tx_meta_data_free>
		net_buf_unref(data.buf);
   13280:	9802      	ldr	r0, [sp, #8]
   13282:	f003 f85b 	bl	1633c <net_buf_unref>
	if (!req) {
   13286:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1328a:	e7cc      	b.n	13226 <att_find_type_req+0x56>
	bt_att_chan_send_rsp(chan, data.buf);
   1328c:	4620      	mov	r0, r4
   1328e:	9902      	ldr	r1, [sp, #8]
   13290:	f00b fb70 	bl	1e974 <bt_att_chan_send_rsp>
	return 0;
   13294:	e7cc      	b.n	13230 <att_find_type_req+0x60>
		return BT_ATT_ERR_UNLIKELY;
   13296:	200e      	movs	r0, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   13298:	e7cb      	b.n	13232 <att_find_type_req+0x62>
   1329a:	bf00      	nop
   1329c:	00012501 	.word	0x00012501

000132a0 <att_find_info_req>:
{
   132a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   132a2:	688b      	ldr	r3, [r1, #8]
{
   132a4:	4604      	mov	r4, r0
	start_handle = sys_le16_to_cpu(req->start_handle);
   132a6:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   132a8:	885e      	ldrh	r6, [r3, #2]
{
   132aa:	b085      	sub	sp, #20
	if (!start || !end) {
   132ac:	b195      	cbz	r5, 132d4 <att_find_info_req+0x34>
   132ae:	b186      	cbz	r6, 132d2 <att_find_info_req+0x32>
	if (start > end) {
   132b0:	42b5      	cmp	r5, r6
   132b2:	d80f      	bhi.n	132d4 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   132b4:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   132b6:	2210      	movs	r2, #16
   132b8:	2100      	movs	r1, #0
   132ba:	4668      	mov	r0, sp
   132bc:	f00e fbf4 	bl	21aa8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   132c0:	2200      	movs	r2, #0
   132c2:	2105      	movs	r1, #5
   132c4:	4638      	mov	r0, r7
   132c6:	f7ff fd6d 	bl	12da4 <bt_att_create_pdu>
   132ca:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   132cc:	b958      	cbnz	r0, 132e6 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   132ce:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   132d0:	e007      	b.n	132e2 <att_find_info_req+0x42>
			*err = 0U;
   132d2:	4635      	mov	r5, r6
	if (!req) {
   132d4:	2301      	movs	r3, #1
   132d6:	462a      	mov	r2, r5
   132d8:	2104      	movs	r1, #4
   132da:	4620      	mov	r0, r4
   132dc:	f00b fd6c 	bl	1edb8 <send_err_rsp.part.0>
		return 0;
   132e0:	2000      	movs	r0, #0
}
   132e2:	b005      	add	sp, #20
   132e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   132e6:	466b      	mov	r3, sp
   132e8:	4631      	mov	r1, r6
   132ea:	4628      	mov	r0, r5
   132ec:	4a09      	ldr	r2, [pc, #36]	; (13314 <att_find_info_req+0x74>)
	data.chan = chan;
   132ee:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   132f0:	f00b fa6c 	bl	1e7cc <bt_gatt_foreach_attr>
	if (!data.rsp) {
   132f4:	9b02      	ldr	r3, [sp, #8]
   132f6:	b943      	cbnz	r3, 1330a <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   132f8:	9b01      	ldr	r3, [sp, #4]
   132fa:	6958      	ldr	r0, [r3, #20]
   132fc:	f7ff f8f2 	bl	124e4 <tx_meta_data_free>
		net_buf_unref(data.buf);
   13300:	9801      	ldr	r0, [sp, #4]
   13302:	f003 f81b 	bl	1633c <net_buf_unref>
	if (!req) {
   13306:	230a      	movs	r3, #10
   13308:	e7e5      	b.n	132d6 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
   1330a:	4620      	mov	r0, r4
   1330c:	9901      	ldr	r1, [sp, #4]
   1330e:	f00b fb31 	bl	1e974 <bt_att_chan_send_rsp>
	return 0;
   13312:	e7e5      	b.n	132e0 <att_find_info_req+0x40>
   13314:	0001e869 	.word	0x0001e869

00013318 <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   13318:	b538      	push	{r3, r4, r5, lr}
	z_impl_k_queue_init(queue);
   1331a:	4c0b      	ldr	r4, [pc, #44]	; (13348 <bt_att_init+0x30>)
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   1331c:	4d0b      	ldr	r5, [pc, #44]	; (1334c <bt_att_init+0x34>)
   1331e:	4620      	mov	r0, r4
   13320:	f00d ff0f 	bl	21142 <z_impl_k_queue_init>
   13324:	4629      	mov	r1, r5
   13326:	4620      	mov	r0, r4
   13328:	f00d ff17 	bl	2115a <k_queue_append>
   1332c:	4620      	mov	r0, r4
   1332e:	f105 0114 	add.w	r1, r5, #20
   13332:	f00d ff12 	bl	2115a <k_queue_append>
   13336:	4620      	mov	r0, r4
   13338:	f105 0128 	add.w	r1, r5, #40	; 0x28
   1333c:	f00d ff0d 	bl	2115a <k_queue_append>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   13340:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_init();
   13344:	f000 bb3c 	b.w	139c0 <bt_gatt_init>
   13348:	20008964 	.word	0x20008964
   1334c:	20009e98 	.word	0x20009e98

00013350 <bt_att_req_alloc>:
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
	struct bt_att_req *req = NULL;
   13350:	2300      	movs	r3, #0
{
   13352:	b537      	push	{r0, r1, r2, r4, r5, lr}
   13354:	4605      	mov	r5, r0
   13356:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   13358:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   1335a:	f007 f8ab 	bl	1a4b4 <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   1335e:	4b0c      	ldr	r3, [pc, #48]	; (13390 <bt_att_req_alloc+0x40>)
		 */
		timeout = K_NO_WAIT;
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   13360:	a901      	add	r1, sp, #4
	if (k_current_get() == att_handle_rsp_thread) {
   13362:	681b      	ldr	r3, [r3, #0]
   13364:	4283      	cmp	r3, r0
		timeout = K_NO_WAIT;
   13366:	bf04      	itt	eq
   13368:	2500      	moveq	r5, #0
   1336a:	462c      	moveq	r4, r5
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1336c:	462a      	mov	r2, r5
   1336e:	4623      	mov	r3, r4
   13370:	4808      	ldr	r0, [pc, #32]	; (13394 <bt_att_req_alloc+0x44>)
   13372:	f006 f975 	bl	19660 <k_mem_slab_alloc>
   13376:	4601      	mov	r1, r0
   13378:	b940      	cbnz	r0, 1338c <bt_att_req_alloc+0x3c>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   1337a:	9b01      	ldr	r3, [sp, #4]
   1337c:	221c      	movs	r2, #28
   1337e:	4618      	mov	r0, r3
   13380:	f00e fb92 	bl	21aa8 <memset>
   13384:	4603      	mov	r3, r0

	return req;
}
   13386:	4618      	mov	r0, r3
   13388:	b003      	add	sp, #12
   1338a:	bd30      	pop	{r4, r5, pc}
		return NULL;
   1338c:	2300      	movs	r3, #0
   1338e:	e7fa      	b.n	13386 <bt_att_req_alloc+0x36>
   13390:	20009ed4 	.word	0x20009ed4
   13394:	2000889c 	.word	0x2000889c

00013398 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   13398:	b507      	push	{r0, r1, r2, lr}
	BT_DBG("req %p", req);

	if (req->buf) {
   1339a:	6883      	ldr	r3, [r0, #8]
{
   1339c:	9001      	str	r0, [sp, #4]
	if (req->buf) {
   1339e:	b14b      	cbz	r3, 133b4 <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   133a0:	6958      	ldr	r0, [r3, #20]
   133a2:	f7ff f89f 	bl	124e4 <tx_meta_data_free>
		net_buf_unref(req->buf);
   133a6:	9b01      	ldr	r3, [sp, #4]
   133a8:	6898      	ldr	r0, [r3, #8]
   133aa:	f002 ffc7 	bl	1633c <net_buf_unref>
		req->buf = NULL;
   133ae:	2200      	movs	r2, #0
   133b0:	9b01      	ldr	r3, [sp, #4]
   133b2:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   133b4:	4803      	ldr	r0, [pc, #12]	; (133c4 <bt_att_req_free+0x2c>)
   133b6:	a901      	add	r1, sp, #4
   133b8:	f00d fe05 	bl	20fc6 <k_mem_slab_free>
}
   133bc:	b003      	add	sp, #12
   133be:	f85d fb04 	ldr.w	pc, [sp], #4
   133c2:	bf00      	nop
   133c4:	2000889c 	.word	0x2000889c

000133c8 <att_handle_rsp>:
{
   133c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   133cc:	4604      	mov	r4, r0
   133ce:	b083      	sub	sp, #12
	k_work_cancel_delayable(&chan->timeout_work);
   133d0:	30b0      	adds	r0, #176	; 0xb0
{
   133d2:	af02      	add	r7, sp, #8
   133d4:	460e      	mov	r6, r1
   133d6:	4690      	mov	r8, r2
   133d8:	461d      	mov	r5, r3
	k_work_cancel_delayable(&chan->timeout_work);
   133da:	f00d ffe6 	bl	213aa <k_work_cancel_delayable>
	if (!chan->req) {
   133de:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   133e2:	b9b8      	cbnz	r0, 13414 <att_handle_rsp+0x4c>
		BT_WARN("No pending ATT request");
   133e4:	466d      	mov	r5, sp
   133e6:	b088      	sub	sp, #32
   133e8:	aa02      	add	r2, sp, #8
   133ea:	4b1c      	ldr	r3, [pc, #112]	; (1345c <att_handle_rsp+0x94>)
   133ec:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   133f0:	6153      	str	r3, [r2, #20]
   133f2:	4b1b      	ldr	r3, [pc, #108]	; (13460 <att_handle_rsp+0x98>)
   133f4:	481b      	ldr	r0, [pc, #108]	; (13464 <att_handle_rsp+0x9c>)
   133f6:	6193      	str	r3, [r2, #24]
   133f8:	2303      	movs	r3, #3
   133fa:	f842 3f10 	str.w	r3, [r2, #16]!
   133fe:	f00b fa83 	bl	1e908 <z_log_msg_static_create.constprop.0>
   13402:	46ad      	mov	sp, r5
	att_req_send_process(chan->att);
   13404:	6820      	ldr	r0, [r4, #0]
   13406:	f00b fc05 	bl	1ec14 <att_req_send_process>
}
   1340a:	2000      	movs	r0, #0
   1340c:	3704      	adds	r7, #4
   1340e:	46bd      	mov	sp, r7
   13410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (chan->req == &cancel) {
   13414:	4b14      	ldr	r3, [pc, #80]	; (13468 <att_handle_rsp+0xa0>)
   13416:	f04f 0900 	mov.w	r9, #0
   1341a:	4298      	cmp	r0, r3
   1341c:	d102      	bne.n	13424 <att_handle_rsp+0x5c>
		chan->req = NULL;
   1341e:	f8c4 9094 	str.w	r9, [r4, #148]	; 0x94
   13422:	e7ef      	b.n	13404 <att_handle_rsp+0x3c>
	func = chan->req->func;
   13424:	f8d0 a004 	ldr.w	sl, [r0, #4]
	chan->req->func = NULL;
   13428:	f8c0 9004 	str.w	r9, [r0, #4]
	params = chan->req->user_data;
   1342c:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   13430:	f8d0 b018 	ldr.w	fp, [r0, #24]
	bt_att_req_free(chan->req);
   13434:	f7ff ffb0 	bl	13398 <bt_att_req_free>
	att_req_send_process(chan->att);
   13438:	6820      	ldr	r0, [r4, #0]
	chan->req = NULL;
   1343a:	f8c4 9094 	str.w	r9, [r4, #148]	; 0x94
	att_req_send_process(chan->att);
   1343e:	f00b fbe9 	bl	1ec14 <att_req_send_process>
	if (func) {
   13442:	f1ba 0f00 	cmp.w	sl, #0
   13446:	d0e0      	beq.n	1340a <att_handle_rsp+0x42>
		func(chan->att->conn, err, pdu, len, params);
   13448:	6820      	ldr	r0, [r4, #0]
   1344a:	f8cd b000 	str.w	fp, [sp]
   1344e:	4643      	mov	r3, r8
   13450:	4632      	mov	r2, r6
   13452:	4629      	mov	r1, r5
   13454:	6800      	ldr	r0, [r0, #0]
   13456:	47d0      	blx	sl
   13458:	e7d7      	b.n	1340a <att_handle_rsp+0x42>
   1345a:	bf00      	nop
   1345c:	00025a07 	.word	0x00025a07
   13460:	00025a4b 	.word	0x00025a4b
   13464:	000227c0 	.word	0x000227c0
   13468:	20009ed8 	.word	0x20009ed8

0001346c <bt_att_disconnected>:
{
   1346c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
   13470:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
   13474:	4604      	mov	r4, r0
	if (!att_chan->att) {
   13476:	2e00      	cmp	r6, #0
   13478:	d056      	beq.n	13528 <bt_att_disconnected+0xbc>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   1347a:	f100 01dc 	add.w	r1, r0, #220	; 0xdc
   1347e:	f106 0024 	add.w	r0, r6, #36	; 0x24
   13482:	f00b fb10 	bl	1eaa6 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   13486:	1f27      	subs	r7, r4, #4
   13488:	f104 0894 	add.w	r8, r4, #148	; 0x94
   1348c:	2200      	movs	r2, #0
   1348e:	2300      	movs	r3, #0
   13490:	4640      	mov	r0, r8
   13492:	f00c fc60 	bl	1fd56 <net_buf_get>
   13496:	4605      	mov	r5, r0
   13498:	bb28      	cbnz	r0, 134e6 <bt_att_disconnected+0x7a>
	if (chan->req) {
   1349a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   1349e:	b12b      	cbz	r3, 134ac <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   134a0:	4602      	mov	r2, r0
   134a2:	4601      	mov	r1, r0
   134a4:	230e      	movs	r3, #14
   134a6:	4638      	mov	r0, r7
   134a8:	f7ff ff8e 	bl	133c8 <att_handle_rsp>
	chan->att = NULL;
   134ac:	2300      	movs	r3, #0
   134ae:	f844 3c04 	str.w	r3, [r4, #-4]
	if (!sys_slist_is_empty(&att->chans)) {
   134b2:	6a73      	ldr	r3, [r6, #36]	; 0x24
   134b4:	2b00      	cmp	r3, #0
   134b6:	d137      	bne.n	13528 <bt_att_disconnected+0xbc>
	att_reset(att);
   134b8:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   134ba:	9803      	ldr	r0, [sp, #12]
   134bc:	2200      	movs	r2, #0
   134be:	2300      	movs	r3, #0
   134c0:	300c      	adds	r0, #12
   134c2:	f00c fc48 	bl	1fd56 <net_buf_get>
   134c6:	4605      	mov	r5, r0
   134c8:	b9a0      	cbnz	r0, 134f4 <bt_att_disconnected+0x88>
	while (!sys_slist_is_empty(&att->reqs)) {
   134ca:	9803      	ldr	r0, [sp, #12]
	return list->head;
   134cc:	6845      	ldr	r5, [r0, #4]
   134ce:	b9c5      	cbnz	r5, 13502 <bt_att_disconnected+0x96>
	att->conn = NULL;
   134d0:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   134d2:	a903      	add	r1, sp, #12
   134d4:	4816      	ldr	r0, [pc, #88]	; (13530 <bt_att_disconnected+0xc4>)
   134d6:	f00d fd76 	bl	20fc6 <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   134da:	6820      	ldr	r0, [r4, #0]
}
   134dc:	b004      	add	sp, #16
   134de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   134e2:	f000 bfbd 	b.w	14460 <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   134e6:	6968      	ldr	r0, [r5, #20]
   134e8:	f7fe fffc 	bl	124e4 <tx_meta_data_free>
		net_buf_unref(buf);
   134ec:	4628      	mov	r0, r5
   134ee:	f002 ff25 	bl	1633c <net_buf_unref>
   134f2:	e7cb      	b.n	1348c <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   134f4:	6968      	ldr	r0, [r5, #20]
   134f6:	f7fe fff5 	bl	124e4 <tx_meta_data_free>
		net_buf_unref(buf);
   134fa:	4628      	mov	r0, r5
   134fc:	f002 ff1e 	bl	1633c <net_buf_unref>
   13500:	e7db      	b.n	134ba <bt_att_disconnected+0x4e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   13502:	6882      	ldr	r2, [r0, #8]
	return node->next;
   13504:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   13506:	4295      	cmp	r5, r2
	list->head = node;
   13508:	6043      	str	r3, [r0, #4]
	list->tail = node;
   1350a:	bf08      	it	eq
   1350c:	6083      	streq	r3, [r0, #8]
		if (req->func) {
   1350e:	686e      	ldr	r6, [r5, #4]
   13510:	b136      	cbz	r6, 13520 <bt_att_disconnected+0xb4>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   13512:	69ab      	ldr	r3, [r5, #24]
   13514:	210e      	movs	r1, #14
   13516:	9300      	str	r3, [sp, #0]
   13518:	2300      	movs	r3, #0
   1351a:	6800      	ldr	r0, [r0, #0]
   1351c:	461a      	mov	r2, r3
   1351e:	47b0      	blx	r6
		bt_att_req_free(req);
   13520:	4628      	mov	r0, r5
   13522:	f7ff ff39 	bl	13398 <bt_att_req_free>
   13526:	e7d0      	b.n	134ca <bt_att_disconnected+0x5e>
}
   13528:	b004      	add	sp, #16
   1352a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1352e:	bf00      	nop
   13530:	20008864 	.word	0x20008864

00013534 <att_timeout>:
{
   13534:	b5b0      	push	{r4, r5, r7, lr}
   13536:	af00      	add	r7, sp, #0
	BT_ERR("ATT Timeout");
   13538:	466d      	mov	r5, sp
   1353a:	b088      	sub	sp, #32
{
   1353c:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
   1353e:	466a      	mov	r2, sp
   13540:	4b09      	ldr	r3, [pc, #36]	; (13568 <att_timeout+0x34>)
   13542:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13546:	6153      	str	r3, [r2, #20]
   13548:	4b08      	ldr	r3, [pc, #32]	; (1356c <att_timeout+0x38>)
   1354a:	4809      	ldr	r0, [pc, #36]	; (13570 <att_timeout+0x3c>)
   1354c:	6193      	str	r3, [r2, #24]
   1354e:	2303      	movs	r3, #3
   13550:	f842 3f10 	str.w	r3, [r2, #16]!
   13554:	f00b f9d8 	bl	1e908 <z_log_msg_static_create.constprop.0>
	bt_att_disconnected(&chan->chan.chan);
   13558:	f1a4 00ac 	sub.w	r0, r4, #172	; 0xac
   1355c:	46ad      	mov	sp, r5
   1355e:	f7ff ff85 	bl	1346c <bt_att_disconnected>
}
   13562:	46bd      	mov	sp, r7
   13564:	bdb0      	pop	{r4, r5, r7, pc}
   13566:	bf00      	nop
   13568:	00025a22 	.word	0x00025a22
   1356c:	00025a32 	.word	0x00025a32
   13570:	000227c0 	.word	0x000227c0

00013574 <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   13574:	b570      	push	{r4, r5, r6, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   13576:	4606      	mov	r6, r0
   13578:	4d13      	ldr	r5, [pc, #76]	; (135c8 <find_cf_cfg+0x54>)
   1357a:	b140      	cbz	r0, 1358e <find_cf_cfg+0x1a>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
				return cfg;
			}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1357c:	462a      	mov	r2, r5
   1357e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   13582:	1e6c      	subs	r4, r5, #1
   13584:	f00a ffe4 	bl	1e550 <bt_conn_is_peer_addr_le>
   13588:	b198      	cbz	r0, 135b2 <find_cf_cfg+0x3e>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1358a:	4620      	mov	r0, r4
   1358c:	e00c      	b.n	135a8 <find_cf_cfg+0x34>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1358e:	4628      	mov	r0, r5
   13590:	490e      	ldr	r1, [pc, #56]	; (135cc <find_cf_cfg+0x58>)
   13592:	f00b fddc 	bl	1f14e <bt_addr_le_eq>
   13596:	b940      	cbnz	r0, 135aa <find_cf_cfg+0x36>
   13598:	490c      	ldr	r1, [pc, #48]	; (135cc <find_cf_cfg+0x58>)
   1359a:	f105 0010 	add.w	r0, r5, #16
   1359e:	f00b fdd6 	bl	1f14e <bt_addr_le_eq>
   135a2:	b120      	cbz	r0, 135ae <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   135a4:	f105 000f 	add.w	r0, r5, #15
			return cfg;
		}
	}

	return NULL;
}
   135a8:	bd70      	pop	{r4, r5, r6, pc}
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   135aa:	1e68      	subs	r0, r5, #1
   135ac:	e7fc      	b.n	135a8 <find_cf_cfg+0x34>
	return NULL;
   135ae:	2000      	movs	r0, #0
   135b0:	e7fa      	b.n	135a8 <find_cf_cfg+0x34>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   135b2:	4630      	mov	r0, r6
   135b4:	7c21      	ldrb	r1, [r4, #16]
   135b6:	f104 0211 	add.w	r2, r4, #17
   135ba:	f00a ffc9 	bl	1e550 <bt_conn_is_peer_addr_le>
   135be:	2800      	cmp	r0, #0
   135c0:	d0f5      	beq.n	135ae <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   135c2:	f104 0010 	add.w	r0, r4, #16
   135c6:	e7ef      	b.n	135a8 <find_cf_cfg+0x34>
   135c8:	20009f0d 	.word	0x20009f0d
   135cc:	000242c4 	.word	0x000242c4

000135d0 <find_sc_cfg>:
{
   135d0:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
   135d2:	4c0e      	ldr	r4, [pc, #56]	; (1360c <find_sc_cfg+0x3c>)
{
   135d4:	4605      	mov	r5, r0
		if (id == sc_cfg[i].id &&
   135d6:	7823      	ldrb	r3, [r4, #0]
{
   135d8:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
   135da:	4283      	cmp	r3, r0
   135dc:	d00c      	beq.n	135f8 <find_sc_cfg+0x28>
   135de:	7b23      	ldrb	r3, [r4, #12]
   135e0:	42ab      	cmp	r3, r5
   135e2:	d110      	bne.n	13606 <find_sc_cfg+0x36>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   135e4:	4631      	mov	r1, r6
   135e6:	480a      	ldr	r0, [pc, #40]	; (13610 <find_sc_cfg+0x40>)
   135e8:	f00b fdb1 	bl	1f14e <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   135ec:	b158      	cbz	r0, 13606 <find_sc_cfg+0x36>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   135ee:	2301      	movs	r3, #1
			return &sc_cfg[i];
   135f0:	220c      	movs	r2, #12
   135f2:	fb02 4003 	mla	r0, r2, r3, r4
   135f6:	e007      	b.n	13608 <find_sc_cfg+0x38>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   135f8:	1c60      	adds	r0, r4, #1
   135fa:	f00b fda8 	bl	1f14e <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   135fe:	2800      	cmp	r0, #0
   13600:	d0ed      	beq.n	135de <find_sc_cfg+0xe>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   13602:	2300      	movs	r3, #0
   13604:	e7f4      	b.n	135f0 <find_sc_cfg+0x20>
	return NULL;
   13606:	2000      	movs	r0, #0
}
   13608:	bd70      	pop	{r4, r5, r6, pc}
   1360a:	bf00      	nop
   1360c:	2000a190 	.word	0x2000a190
   13610:	2000a19d 	.word	0x2000a19d

00013614 <find_ccc_cfg>:
	return next;
}

static struct bt_gatt_ccc_cfg *find_ccc_cfg(const struct bt_conn *conn,
					    struct _bt_gatt_ccc *ccc)
{
   13614:	b538      	push	{r3, r4, r5, lr}
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];

		if (conn) {
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
						    &cfg->peer)) {
   13616:	1c4a      	adds	r2, r1, #1
{
   13618:	460c      	mov	r4, r1
		if (conn) {
   1361a:	4605      	mov	r5, r0
   1361c:	b968      	cbnz	r0, 1363a <find_ccc_cfg+0x26>
				return cfg;
			}
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1361e:	4610      	mov	r0, r2
   13620:	490d      	ldr	r1, [pc, #52]	; (13658 <find_ccc_cfg+0x44>)
   13622:	f00b fd94 	bl	1f14e <bt_addr_le_eq>
   13626:	b930      	cbnz	r0, 13636 <find_ccc_cfg+0x22>
   13628:	490b      	ldr	r1, [pc, #44]	; (13658 <find_ccc_cfg+0x44>)
   1362a:	f104 000b 	add.w	r0, r4, #11
   1362e:	f00b fd8e 	bl	1f14e <bt_addr_le_eq>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   13632:	b170      	cbz	r0, 13652 <find_ccc_cfg+0x3e>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   13634:	340a      	adds	r4, #10
   13636:	4620      	mov	r0, r4
   13638:	e00c      	b.n	13654 <find_ccc_cfg+0x40>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1363a:	7809      	ldrb	r1, [r1, #0]
   1363c:	f00a ff88 	bl	1e550 <bt_conn_is_peer_addr_le>
   13640:	2800      	cmp	r0, #0
   13642:	d1f8      	bne.n	13636 <find_ccc_cfg+0x22>
   13644:	4628      	mov	r0, r5
   13646:	7aa1      	ldrb	r1, [r4, #10]
   13648:	f104 020b 	add.w	r2, r4, #11
   1364c:	f00a ff80 	bl	1e550 <bt_conn_is_peer_addr_le>
   13650:	e7ef      	b.n	13632 <find_ccc_cfg+0x1e>
			return cfg;
		}
	}

	return NULL;
   13652:	2000      	movs	r0, #0
}
   13654:	bd38      	pop	{r3, r4, r5, pc}
   13656:	bf00      	nop
   13658:	000242c4 	.word	0x000242c4

0001365c <read_ppcp>:
{
   1365c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1365e:	4619      	mov	r1, r3
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   13660:	f44f 1328 	mov.w	r3, #2752512	; 0x2a0000
{
   13664:	4610      	mov	r0, r2
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   13666:	4a06      	ldr	r2, [pc, #24]	; (13680 <read_ppcp+0x24>)
   13668:	e9cd 2302 	strd	r2, r3, [sp, #8]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   1366c:	2308      	movs	r3, #8
   1366e:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   13672:	9300      	str	r3, [sp, #0]
   13674:	446b      	add	r3, sp
   13676:	f00b fd7e 	bl	1f176 <bt_gatt_attr_read.constprop.0>
}
   1367a:	b005      	add	sp, #20
   1367c:	f85d fb04 	ldr.w	pc, [sp], #4
   13680:	00280018 	.word	0x00280018

00013684 <bt_gatt_attr_write_ccc>:
}

ssize_t bt_gatt_attr_write_ccc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, const void *buf,
			       uint16_t len, uint16_t offset, uint8_t flags)
{
   13684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13688:	af00      	add	r7, sp, #0
   1368a:	461e      	mov	r6, r3
   1368c:	8c3b      	ldrh	r3, [r7, #32]
   1368e:	4682      	mov	sl, r0
   13690:	4688      	mov	r8, r1
	struct _bt_gatt_ccc *ccc = attr->user_data;
   13692:	f8d1 900c 	ldr.w	r9, [r1, #12]
	struct bt_gatt_ccc_cfg *cfg;
	bool value_changed;
	uint16_t value;

	if (offset) {
   13696:	2b00      	cmp	r3, #0
   13698:	d151      	bne.n	1373e <bt_gatt_attr_write_ccc+0xba>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (!len || len > sizeof(uint16_t)) {
   1369a:	1e73      	subs	r3, r6, #1
   1369c:	2b01      	cmp	r3, #1
   1369e:	d851      	bhi.n	13744 <bt_gatt_attr_write_ccc+0xc0>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (len < sizeof(uint16_t)) {
   136a0:	2e01      	cmp	r6, #1
		value = *(uint8_t *)buf;
	} else {
		value = sys_get_le16(buf);
	}

	cfg = find_ccc_cfg(conn, ccc);
   136a2:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
   136a4:	7815      	ldrb	r5, [r2, #0]
   136a6:	bf18      	it	ne
   136a8:	8815      	ldrhne	r5, [r2, #0]
	cfg = find_ccc_cfg(conn, ccc);
   136aa:	f7ff ffb3 	bl	13614 <find_ccc_cfg>
	if (!cfg) {
   136ae:	4604      	mov	r4, r0
   136b0:	bb20      	cbnz	r0, 136fc <bt_gatt_attr_write_ccc+0x78>
		/* If there's no existing entry, but the new value is zero,
		 * we don't need to do anything, since a disabled CCC is
		 * behaviorally the same as no written CCC.
		 */
		if (!value) {
   136b2:	b91d      	cbnz	r5, 136bc <bt_gatt_attr_write_ccc+0x38>
			return len;
   136b4:	4630      	mov	r0, r6
	if (!value) {
		clear_ccc_cfg(cfg);
	}

	return len;
}
   136b6:	46bd      	mov	sp, r7
   136b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   136bc:	4649      	mov	r1, r9
   136be:	f7ff ffa9 	bl	13614 <find_ccc_cfg>
		if (!cfg) {
   136c2:	4604      	mov	r4, r0
   136c4:	b990      	cbnz	r0, 136ec <bt_gatt_attr_write_ccc+0x68>
			BT_WARN("No space to store CCC cfg");
   136c6:	466c      	mov	r4, sp
   136c8:	b088      	sub	sp, #32
   136ca:	466a      	mov	r2, sp
   136cc:	4b1f      	ldr	r3, [pc, #124]	; (1374c <bt_gatt_attr_write_ccc+0xc8>)
   136ce:	4820      	ldr	r0, [pc, #128]	; (13750 <bt_gatt_attr_write_ccc+0xcc>)
   136d0:	6153      	str	r3, [r2, #20]
   136d2:	4b20      	ldr	r3, [pc, #128]	; (13754 <bt_gatt_attr_write_ccc+0xd0>)
   136d4:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   136d8:	6193      	str	r3, [r2, #24]
   136da:	2303      	movs	r3, #3
   136dc:	f842 3f10 	str.w	r3, [r2, #16]!
   136e0:	f00b fdd1 	bl	1f286 <z_log_msg_static_create.constprop.0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   136e4:	f06f 0010 	mvn.w	r0, #16
   136e8:	46a5      	mov	sp, r4
   136ea:	e7e4      	b.n	136b6 <bt_gatt_attr_write_ccc+0x32>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   136ec:	f10a 0188 	add.w	r1, sl, #136	; 0x88
   136f0:	3001      	adds	r0, #1
   136f2:	f00b fd34 	bl	1f15e <bt_addr_le_copy>
		cfg->id = conn->id;
   136f6:	f89a 3008 	ldrb.w	r3, [sl, #8]
   136fa:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   136fc:	f8d9 301c 	ldr.w	r3, [r9, #28]
   13700:	b98b      	cbnz	r3, 13726 <bt_gatt_attr_write_ccc+0xa2>
	cfg->value = value;
   13702:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   13704:	f8b9 3014 	ldrh.w	r3, [r9, #20]
   13708:	42ab      	cmp	r3, r5
   1370a:	d003      	beq.n	13714 <bt_gatt_attr_write_ccc+0x90>
		gatt_ccc_changed(attr, ccc);
   1370c:	4649      	mov	r1, r9
   1370e:	4640      	mov	r0, r8
   13710:	f00b fca5 	bl	1f05e <gatt_ccc_changed>
	if (!value) {
   13714:	2d00      	cmp	r5, #0
   13716:	d1cd      	bne.n	136b4 <bt_gatt_attr_write_ccc+0x30>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   13718:	490f      	ldr	r1, [pc, #60]	; (13758 <bt_gatt_attr_write_ccc+0xd4>)
   1371a:	1c60      	adds	r0, r4, #1
   1371c:	f00b fd1f 	bl	1f15e <bt_addr_le_copy>
	cfg->id = 0U;
   13720:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   13722:	8125      	strh	r5, [r4, #8]
}
   13724:	e7c6      	b.n	136b4 <bt_gatt_attr_write_ccc+0x30>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   13726:	462a      	mov	r2, r5
   13728:	4641      	mov	r1, r8
   1372a:	4650      	mov	r0, sl
   1372c:	4798      	blx	r3
		if (write < 0) {
   1372e:	2800      	cmp	r0, #0
   13730:	dbc1      	blt.n	136b6 <bt_gatt_attr_write_ccc+0x32>
		if (write != sizeof(value) && write != 1) {
   13732:	3801      	subs	r0, #1
   13734:	2801      	cmp	r0, #1
   13736:	d9e4      	bls.n	13702 <bt_gatt_attr_write_ccc+0x7e>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   13738:	f06f 000d 	mvn.w	r0, #13
   1373c:	e7bb      	b.n	136b6 <bt_gatt_attr_write_ccc+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1373e:	f06f 0006 	mvn.w	r0, #6
   13742:	e7b8      	b.n	136b6 <bt_gatt_attr_write_ccc+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   13744:	f06f 000c 	mvn.w	r0, #12
   13748:	e7b5      	b.n	136b6 <bt_gatt_attr_write_ccc+0x32>
   1374a:	bf00      	nop
   1374c:	00025ac3 	.word	0x00025ac3
   13750:	000227f0 	.word	0x000227f0
   13754:	00025cc4 	.word	0x00025cc4
   13758:	000242c4 	.word	0x000242c4

0001375c <clear_cf_cfg>:
{
   1375c:	4602      	mov	r2, r0
   1375e:	b508      	push	{r3, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   13760:	4907      	ldr	r1, [pc, #28]	; (13780 <clear_cf_cfg+0x24>)
   13762:	3001      	adds	r0, #1
   13764:	f00b fcfb 	bl	1f15e <bt_addr_le_copy>
   13768:	2300      	movs	r3, #0
   1376a:	320c      	adds	r2, #12
   1376c:	f802 3c04 	strb.w	r3, [r2, #-4]
   13770:	e8d2 1fef 	ldaex	r1, [r2]
   13774:	e8c2 3fe0 	stlex	r0, r3, [r2]
   13778:	2800      	cmp	r0, #0
   1377a:	d1f9      	bne.n	13770 <clear_cf_cfg+0x14>
}
   1377c:	bd08      	pop	{r3, pc}
   1377e:	bf00      	nop
   13780:	000242c4 	.word	0x000242c4

00013784 <sc_save>:
{
   13784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13788:	af00      	add	r7, sp, #0
   1378a:	4681      	mov	r9, r0
   1378c:	4688      	mov	r8, r1
   1378e:	4616      	mov	r6, r2
   13790:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   13792:	f7ff ff1d 	bl	135d0 <find_sc_cfg>
	if (!cfg) {
   13796:	4604      	mov	r4, r0
   13798:	b9e0      	cbnz	r0, 137d4 <sc_save+0x50>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1379a:	4915      	ldr	r1, [pc, #84]	; (137f0 <sc_save+0x6c>)
   1379c:	f7ff ff18 	bl	135d0 <find_sc_cfg>
		if (!cfg) {
   137a0:	4604      	mov	r4, r0
   137a2:	b990      	cbnz	r0, 137ca <sc_save+0x46>
			BT_ERR("unable to save SC: no cfg left");
   137a4:	466c      	mov	r4, sp
   137a6:	b088      	sub	sp, #32
   137a8:	466a      	mov	r2, sp
   137aa:	4b12      	ldr	r3, [pc, #72]	; (137f4 <sc_save+0x70>)
   137ac:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   137b0:	6153      	str	r3, [r2, #20]
   137b2:	4b11      	ldr	r3, [pc, #68]	; (137f8 <sc_save+0x74>)
   137b4:	4811      	ldr	r0, [pc, #68]	; (137fc <sc_save+0x78>)
   137b6:	6193      	str	r3, [r2, #24]
   137b8:	2303      	movs	r3, #3
   137ba:	f842 3f10 	str.w	r3, [r2, #16]!
   137be:	f00b fd62 	bl	1f286 <z_log_msg_static_create.constprop.0>
   137c2:	46a5      	mov	sp, r4
}
   137c4:	46bd      	mov	sp, r7
   137c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		bt_addr_le_copy(&cfg->peer, peer);
   137ca:	4641      	mov	r1, r8
		cfg->id = id;
   137cc:	f800 9b01 	strb.w	r9, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   137d0:	f00b fcc5 	bl	1f15e <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   137d4:	8922      	ldrh	r2, [r4, #8]
   137d6:	8963      	ldrh	r3, [r4, #10]
   137d8:	b91a      	cbnz	r2, 137e2 <sc_save+0x5e>
   137da:	b92b      	cbnz	r3, 137e8 <sc_save+0x64>
		cfg->data.start = start;
   137dc:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   137de:	8165      	strh	r5, [r4, #10]
   137e0:	e7f0      	b.n	137c4 <sc_save+0x40>
	if (new_start >= *start && new_end <= *end) {
   137e2:	4296      	cmp	r6, r2
		*start = new_start;
   137e4:	bf38      	it	cc
   137e6:	8126      	strhcc	r6, [r4, #8]
	if (new_start >= *start && new_end <= *end) {
   137e8:	429d      	cmp	r5, r3
   137ea:	d9eb      	bls.n	137c4 <sc_save+0x40>
   137ec:	e7f7      	b.n	137de <sc_save+0x5a>
   137ee:	bf00      	nop
   137f0:	000242c4 	.word	0x000242c4
   137f4:	00025ae1 	.word	0x00025ae1
   137f8:	00025cdb 	.word	0x00025cdb
   137fc:	000227f0 	.word	0x000227f0

00013800 <cf_write>:
{
   13800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13804:	af00      	add	r7, sp, #0
   13806:	4698      	mov	r8, r3
   13808:	8c3b      	ldrh	r3, [r7, #32]
   1380a:	4606      	mov	r6, r0
	if (offset > sizeof(cfg->data)) {
   1380c:	2b01      	cmp	r3, #1
{
   1380e:	4691      	mov	r9, r2
	if (offset > sizeof(cfg->data)) {
   13810:	d844      	bhi.n	1389c <cf_write+0x9c>
	if (offset + len > sizeof(cfg->data)) {
   13812:	4443      	add	r3, r8
   13814:	2b01      	cmp	r3, #1
   13816:	4645      	mov	r5, r8
   13818:	dc43      	bgt.n	138a2 <cf_write+0xa2>
	cfg = find_cf_cfg(conn);
   1381a:	f7ff feab 	bl	13574 <find_cf_cfg>
	if (!cfg) {
   1381e:	4604      	mov	r4, r0
   13820:	b9c8      	cbnz	r0, 13856 <cf_write+0x56>
		cfg = find_cf_cfg(NULL);
   13822:	f7ff fea7 	bl	13574 <find_cf_cfg>
	if (!cfg) {
   13826:	4604      	mov	r4, r0
   13828:	b9a8      	cbnz	r0, 13856 <cf_write+0x56>
		BT_WARN("No space to store Client Supported Features");
   1382a:	466c      	mov	r4, sp
   1382c:	b088      	sub	sp, #32
   1382e:	466a      	mov	r2, sp
   13830:	4b1f      	ldr	r3, [pc, #124]	; (138b0 <cf_write+0xb0>)
   13832:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   13836:	6153      	str	r3, [r2, #20]
   13838:	4b1e      	ldr	r3, [pc, #120]	; (138b4 <cf_write+0xb4>)
   1383a:	481f      	ldr	r0, [pc, #124]	; (138b8 <cf_write+0xb8>)
   1383c:	6193      	str	r3, [r2, #24]
   1383e:	2303      	movs	r3, #3
   13840:	f842 3f10 	str.w	r3, [r2, #16]!
   13844:	f00b fd1f 	bl	1f286 <z_log_msg_static_create.constprop.0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   13848:	f06f 0510 	mvn.w	r5, #16
   1384c:	46a5      	mov	sp, r4
}
   1384e:	4628      	mov	r0, r5
   13850:	46bd      	mov	sp, r7
   13852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   13856:	f1b8 0f00 	cmp.w	r8, #0
   1385a:	d012      	beq.n	13882 <cf_write+0x82>
		    !(value[i / 8] & BIT(i % 8))) {
   1385c:	2300      	movs	r3, #0
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1385e:	7a21      	ldrb	r1, [r4, #8]
		    !(value[i / 8] & BIT(i % 8))) {
   13860:	f899 2000 	ldrb.w	r2, [r9]
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   13864:	fa21 f003 	lsr.w	r0, r1, r3
   13868:	07c0      	lsls	r0, r0, #31
   1386a:	d503      	bpl.n	13874 <cf_write+0x74>
		    !(value[i / 8] & BIT(i % 8))) {
   1386c:	fa22 f003 	lsr.w	r0, r2, r3
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   13870:	07c0      	lsls	r0, r0, #31
   13872:	d519      	bpl.n	138a8 <cf_write+0xa8>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   13874:	3301      	adds	r3, #1
   13876:	2b03      	cmp	r3, #3
   13878:	d1f4      	bne.n	13864 <cf_write+0x64>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   1387a:	f002 0207 	and.w	r2, r2, #7
   1387e:	4311      	orrs	r1, r2
   13880:	7221      	strb	r1, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   13882:	f106 0188 	add.w	r1, r6, #136	; 0x88
   13886:	1c60      	adds	r0, r4, #1
   13888:	f00b fc69 	bl	1f15e <bt_addr_le_copy>
	cfg->id = conn->id;
   1388c:	4620      	mov	r0, r4
   1388e:	7a33      	ldrb	r3, [r6, #8]
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   13890:	2100      	movs	r1, #0
	cfg->id = conn->id;
   13892:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   13896:	f00b fd1a 	bl	1f2ce <atomic_set_bit>
	return len;
   1389a:	e7d8      	b.n	1384e <cf_write+0x4e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1389c:	f06f 0506 	mvn.w	r5, #6
   138a0:	e7d5      	b.n	1384e <cf_write+0x4e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   138a2:	f06f 050c 	mvn.w	r5, #12
   138a6:	e7d2      	b.n	1384e <cf_write+0x4e>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   138a8:	f06f 0512 	mvn.w	r5, #18
   138ac:	e7cf      	b.n	1384e <cf_write+0x4e>
   138ae:	bf00      	nop
   138b0:	00025b04 	.word	0x00025b04
   138b4:	00025ce3 	.word	0x00025ce3
   138b8:	000227f0 	.word	0x000227f0

000138bc <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   138bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   138c0:	4b28      	ldr	r3, [pc, #160]	; (13964 <disconnected_cb+0xa8>)
{
   138c2:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   138c4:	6882      	ldr	r2, [r0, #8]
{
   138c6:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   138c8:	429a      	cmp	r2, r3
   138ca:	d12b      	bne.n	13924 <disconnected_cb+0x68>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
   138cc:	68c5      	ldr	r5, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
   138ce:	8aab      	ldrh	r3, [r5, #20]
   138d0:	b343      	cbz	r3, 13924 <disconnected_cb+0x68>
		return BT_GATT_ITER_CONTINUE;
	}

	/* Checking if all values are disabled */
	value_used = false;
   138d2:	f04f 0800 	mov.w	r8, #0
   138d6:	1c6c      	adds	r4, r5, #1
   138d8:	f105 0915 	add.w	r9, r5, #21

	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];

		/* Ignore configurations with disabled value */
		if (!cfg->value) {
   138dc:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   138e0:	b19b      	cbz	r3, 1390a <disconnected_cb+0x4e>
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   138e2:	4622      	mov	r2, r4
   138e4:	4630      	mov	r0, r6
   138e6:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   138ea:	f00a fe31 	bl	1e550 <bt_conn_is_peer_addr_le>
   138ee:	b9e0      	cbnz	r0, 1392a <disconnected_cb+0x6e>
			struct bt_conn *tmp;

			/* Skip if there is another peer connected */
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   138f0:	4621      	mov	r1, r4
   138f2:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   138f6:	f7fe fa49 	bl	11d8c <bt_conn_lookup_addr_le>
			if (tmp) {
   138fa:	b130      	cbz	r0, 1390a <disconnected_cb+0x4e>
				if (tmp->state == BT_CONN_CONNECTED) {
   138fc:	7b43      	ldrb	r3, [r0, #13]
					value_used = true;
   138fe:	2b07      	cmp	r3, #7
   13900:	bf08      	it	eq
   13902:	f04f 0801 	moveq.w	r8, #1
				}

				bt_conn_unref(tmp);
   13906:	f00a fd96 	bl	1e436 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1390a:	340a      	adds	r4, #10
   1390c:	454c      	cmp	r4, r9
   1390e:	d1e5      	bne.n	138dc <disconnected_cb+0x20>
			}
		}
	}

	/* If all values are now disabled, reset value while disconnected */
	if (!value_used) {
   13910:	f1b8 0f00 	cmp.w	r8, #0
   13914:	d106      	bne.n	13924 <disconnected_cb+0x68>
		ccc->value = 0U;
		if (ccc->cfg_changed) {
   13916:	69ab      	ldr	r3, [r5, #24]
		ccc->value = 0U;
   13918:	f8a5 8014 	strh.w	r8, [r5, #20]
		if (ccc->cfg_changed) {
   1391c:	b113      	cbz	r3, 13924 <disconnected_cb+0x68>
			ccc->cfg_changed(attr, ccc->value);
   1391e:	4641      	mov	r1, r8
   13920:	4638      	mov	r0, r7
   13922:	4798      	blx	r3

		BT_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   13924:	2001      	movs	r0, #1
   13926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1392a:	f106 0a88 	add.w	sl, r6, #136	; 0x88
   1392e:	4651      	mov	r1, sl
   13930:	7a30      	ldrb	r0, [r6, #8]
   13932:	f00a faf5 	bl	1df20 <bt_addr_le_is_bonded>
   13936:	b978      	cbnz	r0, 13958 <disconnected_cb+0x9c>
				if (ccc == &sc_ccc) {
   13938:	4b0b      	ldr	r3, [pc, #44]	; (13968 <disconnected_cb+0xac>)
   1393a:	429d      	cmp	r5, r3
   1393c:	d102      	bne.n	13944 <disconnected_cb+0x88>
					sc_clear(conn);
   1393e:	4630      	mov	r0, r6
   13940:	f00b fca4 	bl	1f28c <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   13944:	4620      	mov	r0, r4
   13946:	4909      	ldr	r1, [pc, #36]	; (1396c <disconnected_cb+0xb0>)
   13948:	f00b fc09 	bl	1f15e <bt_addr_le_copy>
	cfg->id = 0U;
   1394c:	2300      	movs	r3, #0
   1394e:	f804 3c01 	strb.w	r3, [r4, #-1]
	cfg->value = 0U;
   13952:	f8a4 3007 	strh.w	r3, [r4, #7]
}
   13956:	e7d8      	b.n	1390a <disconnected_cb+0x4e>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   13958:	4651      	mov	r1, sl
   1395a:	4620      	mov	r0, r4
   1395c:	f00b fbff 	bl	1f15e <bt_addr_le_copy>
   13960:	e7d3      	b.n	1390a <disconnected_cb+0x4e>
   13962:	bf00      	nop
   13964:	00013685 	.word	0x00013685
   13968:	20008430 	.word	0x20008430
   1396c:	000242c4 	.word	0x000242c4

00013970 <sc_indicate_rsp>:
{
   13970:	b510      	push	{r4, lr}
   13972:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13974:	4811      	ldr	r0, [pc, #68]	; (139bc <sc_indicate_rsp+0x4c>)
   13976:	e8d0 3fef 	ldaex	r3, [r0]
   1397a:	f023 0302 	bic.w	r3, r3, #2
   1397e:	e8c0 3fe2 	stlex	r2, r3, [r0]
   13982:	2a00      	cmp	r2, #0
   13984:	d1f7      	bne.n	13976 <sc_indicate_rsp+0x6>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13986:	e8d0 3faf 	lda	r3, [r0]
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1398a:	07da      	lsls	r2, r3, #31
   1398c:	d504      	bpl.n	13998 <sc_indicate_rsp+0x28>
	k_work_reschedule(&gatt_sc.work, timeout);
   1398e:	2200      	movs	r2, #0
   13990:	2300      	movs	r3, #0
   13992:	3830      	subs	r0, #48	; 0x30
   13994:	f006 faa6 	bl	19ee4 <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   13998:	4620      	mov	r0, r4
   1399a:	f00b fb33 	bl	1f004 <bt_att_fixed_chan_only>
   1399e:	b160      	cbz	r0, 139ba <sc_indicate_rsp+0x4a>
		cfg = find_cf_cfg(conn);
   139a0:	4620      	mov	r0, r4
   139a2:	f7ff fde7 	bl	13574 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   139a6:	b140      	cbz	r0, 139ba <sc_indicate_rsp+0x4a>
   139a8:	7a03      	ldrb	r3, [r0, #8]
   139aa:	07db      	lsls	r3, r3, #31
   139ac:	d505      	bpl.n	139ba <sc_indicate_rsp+0x4a>
}
   139ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   139b2:	2100      	movs	r1, #0
   139b4:	300c      	adds	r0, #12
   139b6:	f00b bc8a 	b.w	1f2ce <atomic_set_bit>
}
   139ba:	bd10      	pop	{r4, pc}
   139bc:	20009910 	.word	0x20009910

000139c0 <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   139c0:	2201      	movs	r2, #1
{
   139c2:	b510      	push	{r4, lr}
   139c4:	4b1b      	ldr	r3, [pc, #108]	; (13a34 <bt_gatt_init+0x74>)
   139c6:	e8d3 1fef 	ldaex	r1, [r3]
   139ca:	2900      	cmp	r1, #0
   139cc:	d103      	bne.n	139d6 <bt_gatt_init+0x16>
   139ce:	e8c3 2fe0 	stlex	r0, r2, [r3]
   139d2:	2800      	cmp	r0, #0
   139d4:	d1f7      	bne.n	139c6 <bt_gatt_init+0x6>
	if (!atomic_cas(&init, 0, 1)) {
   139d6:	d12c      	bne.n	13a32 <bt_gatt_init+0x72>
   139d8:	4b17      	ldr	r3, [pc, #92]	; (13a38 <bt_gatt_init+0x78>)
   139da:	e8d3 1fef 	ldaex	r1, [r3]
   139de:	2900      	cmp	r1, #0
   139e0:	d103      	bne.n	139ea <bt_gatt_init+0x2a>
   139e2:	e8c3 2fe0 	stlex	r0, r2, [r3]
   139e6:	2800      	cmp	r0, #0
   139e8:	d1f7      	bne.n	139da <bt_gatt_init+0x1a>
	if (!atomic_cas(&service_init, 0, 1)) {
   139ea:	d108      	bne.n	139fe <bt_gatt_init+0x3e>
   139ec:	2000      	movs	r0, #0
   139ee:	4913      	ldr	r1, [pc, #76]	; (13a3c <bt_gatt_init+0x7c>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   139f0:	4a13      	ldr	r2, [pc, #76]	; (13a40 <bt_gatt_init+0x80>)
   139f2:	880b      	ldrh	r3, [r1, #0]
   139f4:	4c13      	ldr	r4, [pc, #76]	; (13a44 <bt_gatt_init+0x84>)
   139f6:	42a2      	cmp	r2, r4
   139f8:	d315      	bcc.n	13a26 <bt_gatt_init+0x66>
   139fa:	b100      	cbz	r0, 139fe <bt_gatt_init+0x3e>
   139fc:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   139fe:	2200      	movs	r2, #0
   13a00:	4b11      	ldr	r3, [pc, #68]	; (13a48 <bt_gatt_init+0x88>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   13a02:	4912      	ldr	r1, [pc, #72]	; (13a4c <bt_gatt_init+0x8c>)
   13a04:	4812      	ldr	r0, [pc, #72]	; (13a50 <bt_gatt_init+0x90>)
	list->tail = NULL;
   13a06:	e9c3 2200 	strd	r2, r2, [r3]
   13a0a:	f00d fcc0 	bl	2138e <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   13a0e:	f44f 72a4 	mov.w	r2, #328	; 0x148
   13a12:	2300      	movs	r3, #0
   13a14:	480e      	ldr	r0, [pc, #56]	; (13a50 <bt_gatt_init+0x90>)
   13a16:	f7fa fe91 	bl	e73c <bt_long_wq_schedule>
}
   13a1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
   13a1e:	490d      	ldr	r1, [pc, #52]	; (13a54 <bt_gatt_init+0x94>)
   13a20:	480d      	ldr	r0, [pc, #52]	; (13a58 <bt_gatt_init+0x98>)
   13a22:	f00d bcb4 	b.w	2138e <k_work_init_delayable>
		last_static_handle += svc->attr_count;
   13a26:	6850      	ldr	r0, [r2, #4]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   13a28:	3208      	adds	r2, #8
		last_static_handle += svc->attr_count;
   13a2a:	4403      	add	r3, r0
   13a2c:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   13a2e:	2001      	movs	r0, #1
   13a30:	e7e1      	b.n	139f6 <bt_gatt_init+0x36>
}
   13a32:	bd10      	pop	{r4, pc}
   13a34:	20009f30 	.word	0x20009f30
   13a38:	20009f2c 	.word	0x20009f2c
   13a3c:	2000a1a8 	.word	0x2000a1a8
   13a40:	00022780 	.word	0x00022780
   13a44:	000227a8 	.word	0x000227a8
   13a48:	20009f34 	.word	0x20009f34
   13a4c:	0001f3e9 	.word	0x0001f3e9
   13a50:	20009868 	.word	0x20009868
   13a54:	00013ed9 	.word	0x00013ed9
   13a58:	200098e0 	.word	0x200098e0

00013a5c <bt_gatt_attr_get_handle>:
	if (!attr) {
   13a5c:	4603      	mov	r3, r0
{
   13a5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   13a62:	b148      	cbz	r0, 13a78 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
   13a64:	8a00      	ldrh	r0, [r0, #16]
   13a66:	b938      	cbnz	r0, 13a78 <bt_gatt_attr_get_handle+0x1c>
	uint16_t handle = 1;
   13a68:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   13a6a:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   13a6e:	4911      	ldr	r1, [pc, #68]	; (13ab4 <bt_gatt_attr_get_handle+0x58>)
   13a70:	f8df e044 	ldr.w	lr, [pc, #68]	; 13ab8 <bt_gatt_attr_get_handle+0x5c>
   13a74:	4571      	cmp	r1, lr
   13a76:	d301      	bcc.n	13a7c <bt_gatt_attr_get_handle+0x20>
}
   13a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   13a7c:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   13a80:	42bb      	cmp	r3, r7
   13a82:	d304      	bcc.n	13a8e <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   13a84:	fb0c 7206 	mla	r2, ip, r6, r7
   13a88:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   13a8a:	4293      	cmp	r3, r2
   13a8c:	d90e      	bls.n	13aac <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
   13a8e:	4434      	add	r4, r6
   13a90:	b2a2      	uxth	r2, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   13a92:	4614      	mov	r4, r2
   13a94:	3108      	adds	r1, #8
   13a96:	e7ed      	b.n	13a74 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   13a98:	fb0c 7805 	mla	r8, ip, r5, r7
   13a9c:	4543      	cmp	r3, r8
   13a9e:	d007      	beq.n	13ab0 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   13aa0:	3501      	adds	r5, #1
   13aa2:	1962      	adds	r2, r4, r5
   13aa4:	42b5      	cmp	r5, r6
   13aa6:	b292      	uxth	r2, r2
   13aa8:	d1f6      	bne.n	13a98 <bt_gatt_attr_get_handle+0x3c>
   13aaa:	e7f2      	b.n	13a92 <bt_gatt_attr_get_handle+0x36>
   13aac:	2500      	movs	r5, #0
   13aae:	e7f8      	b.n	13aa2 <bt_gatt_attr_get_handle+0x46>
   13ab0:	4610      	mov	r0, r2
   13ab2:	e7e1      	b.n	13a78 <bt_gatt_attr_get_handle+0x1c>
   13ab4:	00022780 	.word	0x00022780
   13ab8:	000227a8 	.word	0x000227a8

00013abc <bt_gatt_foreach_attr_type>:
{
   13abc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ac0:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   13ac2:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
   13ac6:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   13aca:	4607      	mov	r7, r0
		num_matches = UINT16_MAX;
   13acc:	2d00      	cmp	r5, #0
   13ace:	bf08      	it	eq
   13ad0:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   13ad2:	4b24      	ldr	r3, [pc, #144]	; (13b64 <bt_gatt_foreach_attr_type+0xa8>)
{
   13ad4:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   13ad6:	881b      	ldrh	r3, [r3, #0]
{
   13ad8:	9100      	str	r1, [sp, #0]
	if (start_handle <= last_static_handle) {
   13ada:	4283      	cmp	r3, r0
   13adc:	d23c      	bcs.n	13b58 <bt_gatt_foreach_attr_type+0x9c>
}
   13ade:	b003      	add	sp, #12
   13ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   13ae4:	6873      	ldr	r3, [r6, #4]
   13ae6:	4423      	add	r3, r4
   13ae8:	42bb      	cmp	r3, r7
   13aea:	d232      	bcs.n	13b52 <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
   13aec:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   13aee:	3608      	adds	r6, #8
   13af0:	4b1d      	ldr	r3, [pc, #116]	; (13b68 <bt_gatt_foreach_attr_type+0xac>)
   13af2:	429e      	cmp	r6, r3
   13af4:	d3f6      	bcc.n	13ae4 <bt_gatt_foreach_attr_type+0x28>
   13af6:	e7f2      	b.n	13ade <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   13af8:	4640      	mov	r0, r8
   13afa:	5889      	ldr	r1, [r1, r2]
   13afc:	9301      	str	r3, [sp, #4]
   13afe:	f00a f8b3 	bl	1dc68 <bt_uuid_cmp>
   13b02:	9b01      	ldr	r3, [sp, #4]
   13b04:	b190      	cbz	r0, 13b2c <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   13b06:	3401      	adds	r4, #1
   13b08:	f10a 0a01 	add.w	sl, sl, #1
   13b0c:	b2a4      	uxth	r4, r4
   13b0e:	6873      	ldr	r3, [r6, #4]
   13b10:	4553      	cmp	r3, sl
   13b12:	d9ec      	bls.n	13aee <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   13b14:	9b00      	ldr	r3, [sp, #0]
   13b16:	429c      	cmp	r4, r3
   13b18:	d8e1      	bhi.n	13ade <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   13b1a:	42bc      	cmp	r4, r7
				if (gatt_foreach_iter(&static_svc->attrs[i],
   13b1c:	6831      	ldr	r1, [r6, #0]
	if (handle < start_handle) {
   13b1e:	d3f2      	bcc.n	13b06 <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   13b20:	fb0b f20a 	mul.w	r2, fp, sl
   13b24:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   13b26:	f1b8 0f00 	cmp.w	r8, #0
   13b2a:	d1e5      	bne.n	13af8 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
   13b2c:	f1b9 0f00 	cmp.w	r9, #0
   13b30:	d10b      	bne.n	13b4a <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
   13b32:	3d01      	subs	r5, #1
	result = func(attr, handle, user_data);
   13b34:	4618      	mov	r0, r3
	*num_matches -= 1;
   13b36:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   13b38:	4621      	mov	r1, r4
   13b3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   13b3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13b3e:	4798      	blx	r3
	if (!*num_matches) {
   13b40:	2d00      	cmp	r5, #0
   13b42:	d0cc      	beq.n	13ade <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   13b44:	2800      	cmp	r0, #0
   13b46:	d1de      	bne.n	13b06 <bt_gatt_foreach_attr_type+0x4a>
   13b48:	e7c9      	b.n	13ade <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   13b4a:	68da      	ldr	r2, [r3, #12]
   13b4c:	4591      	cmp	r9, r2
   13b4e:	d1da      	bne.n	13b06 <bt_gatt_foreach_attr_type+0x4a>
   13b50:	e7ef      	b.n	13b32 <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   13b52:	f04f 0a00 	mov.w	sl, #0
   13b56:	e7da      	b.n	13b0e <bt_gatt_foreach_attr_type+0x52>
		uint16_t handle = 1;
   13b58:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   13b5a:	f04f 0b14 	mov.w	fp, #20
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   13b5e:	4e03      	ldr	r6, [pc, #12]	; (13b6c <bt_gatt_foreach_attr_type+0xb0>)
   13b60:	e7c6      	b.n	13af0 <bt_gatt_foreach_attr_type+0x34>
   13b62:	bf00      	nop
   13b64:	2000a1a8 	.word	0x2000a1a8
   13b68:	000227a8 	.word	0x000227a8
   13b6c:	00022780 	.word	0x00022780

00013b70 <db_hash_gen.constprop.0>:
	uint8_t key[16] = {};
   13b70:	2300      	movs	r3, #0
static void db_hash_gen(bool store)
   13b72:	b590      	push	{r4, r7, lr}
   13b74:	b0c9      	sub	sp, #292	; 0x124
   13b76:	af00      	add	r7, sp, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   13b78:	4639      	mov	r1, r7
   13b7a:	f107 0270 	add.w	r2, r7, #112	; 0x70
   13b7e:	f107 0010 	add.w	r0, r7, #16
	uint8_t key[16] = {};
   13b82:	e9c7 3300 	strd	r3, r3, [r7]
   13b86:	e9c7 3302 	strd	r3, r3, [r7, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   13b8a:	f009 fce4 	bl	1d556 <tc_cmac_setup>
   13b8e:	b998      	cbnz	r0, 13bb8 <db_hash_gen.constprop.0+0x48>
		BT_ERR("Unable to setup AES CMAC");
   13b90:	466c      	mov	r4, sp
   13b92:	b088      	sub	sp, #32
   13b94:	466a      	mov	r2, sp
   13b96:	4b1d      	ldr	r3, [pc, #116]	; (13c0c <db_hash_gen.constprop.0+0x9c>)
		BT_ERR("Unable to calculate hash");
   13b98:	6153      	str	r3, [r2, #20]
   13b9a:	4b1d      	ldr	r3, [pc, #116]	; (13c10 <db_hash_gen.constprop.0+0xa0>)
   13b9c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13ba0:	6193      	str	r3, [r2, #24]
   13ba2:	2303      	movs	r3, #3
   13ba4:	481b      	ldr	r0, [pc, #108]	; (13c14 <db_hash_gen.constprop.0+0xa4>)
   13ba6:	f842 3f10 	str.w	r3, [r2, #16]!
   13baa:	f00b fb6c 	bl	1f286 <z_log_msg_static_create.constprop.0>
   13bae:	46a5      	mov	sp, r4
}
   13bb0:	f507 7792 	add.w	r7, r7, #292	; 0x124
   13bb4:	46bd      	mov	sp, r7
   13bb6:	bd90      	pop	{r4, r7, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   13bb8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13bbc:	2001      	movs	r0, #1
   13bbe:	4a16      	ldr	r2, [pc, #88]	; (13c18 <db_hash_gen.constprop.0+0xa8>)
   13bc0:	f107 0310 	add.w	r3, r7, #16
   13bc4:	f00b fc05 	bl	1f3d2 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   13bc8:	4814      	ldr	r0, [pc, #80]	; (13c1c <db_hash_gen.constprop.0+0xac>)
   13bca:	f107 0110 	add.w	r1, r7, #16
   13bce:	f009 fd57 	bl	1d680 <tc_cmac_final>
   13bd2:	b920      	cbnz	r0, 13bde <db_hash_gen.constprop.0+0x6e>
		BT_ERR("Unable to calculate hash");
   13bd4:	466c      	mov	r4, sp
   13bd6:	b088      	sub	sp, #32
   13bd8:	466a      	mov	r2, sp
   13bda:	4b11      	ldr	r3, [pc, #68]	; (13c20 <db_hash_gen.constprop.0+0xb0>)
   13bdc:	e7dc      	b.n	13b98 <db_hash_gen.constprop.0+0x28>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   13bde:	2208      	movs	r2, #8
   13be0:	4b0e      	ldr	r3, [pc, #56]	; (13c1c <db_hash_gen.constprop.0+0xac>)
   13be2:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   13be6:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   13be8:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
	for (i = 0; i < (length/2); i++) {
   13bec:	3a01      	subs	r2, #1
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   13bee:	f803 4b01 	strb.w	r4, [r3], #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   13bf2:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
   13bf4:	d1f7      	bne.n	13be6 <db_hash_gen.constprop.0+0x76>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13bf6:	4b0b      	ldr	r3, [pc, #44]	; (13c24 <db_hash_gen.constprop.0+0xb4>)
   13bf8:	e8d3 1fef 	ldaex	r1, [r3]
   13bfc:	f041 0104 	orr.w	r1, r1, #4
   13c00:	e8c3 1fe2 	stlex	r2, r1, [r3]
   13c04:	2a00      	cmp	r2, #0
   13c06:	d0d3      	beq.n	13bb0 <db_hash_gen.constprop.0+0x40>
   13c08:	e7f6      	b.n	13bf8 <db_hash_gen.constprop.0+0x88>
   13c0a:	bf00      	nop
   13c0c:	00025b34 	.word	0x00025b34
   13c10:	00025cec 	.word	0x00025cec
   13c14:	000227f0 	.word	0x000227f0
   13c18:	0001f0a9 	.word	0x0001f0a9
   13c1c:	20009858 	.word	0x20009858
   13c20:	00025b51 	.word	0x00025b51
   13c24:	20009910 	.word	0x20009910

00013c28 <db_hash_read>:
{
   13c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   13c2c:	4914      	ldr	r1, [pc, #80]	; (13c80 <db_hash_read+0x58>)
{
   13c2e:	4606      	mov	r6, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   13c30:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   13c34:	4614      	mov	r4, r2
   13c36:	461d      	mov	r5, r3
   13c38:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   13c3c:	f00d fbc9 	bl	213d2 <k_work_cancel_delayable_sync>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13c40:	4b10      	ldr	r3, [pc, #64]	; (13c84 <db_hash_read+0x5c>)
   13c42:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   13c46:	0759      	lsls	r1, r3, #29
   13c48:	d401      	bmi.n	13c4e <db_hash_read+0x26>
		db_hash_gen(true);
   13c4a:	f7ff ff91 	bl	13b70 <db_hash_gen.constprop.0>
	cfg = find_cf_cfg(conn);
   13c4e:	4630      	mov	r0, r6
   13c50:	f7ff fc90 	bl	13574 <find_cf_cfg>
	if (cfg &&
   13c54:	b150      	cbz	r0, 13c6c <db_hash_read+0x44>
   13c56:	7a03      	ldrb	r3, [r0, #8]
   13c58:	07da      	lsls	r2, r3, #31
   13c5a:	d507      	bpl.n	13c6c <db_hash_read+0x44>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   13c5c:	300c      	adds	r0, #12
   13c5e:	e8d0 3faf 	lda	r3, [r0]
	    CF_ROBUST_CACHING(cfg) &&
   13c62:	07db      	lsls	r3, r3, #31
   13c64:	d402      	bmi.n	13c6c <db_hash_read+0x44>
		atomic_set_bit(cfg->flags, CF_DB_HASH_READ);
   13c66:	2101      	movs	r1, #1
   13c68:	f00b fb31 	bl	1f2ce <atomic_set_bit>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   13c6c:	2310      	movs	r3, #16
   13c6e:	463a      	mov	r2, r7
   13c70:	9306      	str	r3, [sp, #24]
   13c72:	4629      	mov	r1, r5
   13c74:	4620      	mov	r0, r4
}
   13c76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   13c7a:	4b03      	ldr	r3, [pc, #12]	; (13c88 <db_hash_read+0x60>)
   13c7c:	f00b ba7b 	b.w	1f176 <bt_gatt_attr_read.constprop.0>
   13c80:	20009898 	.word	0x20009898
   13c84:	20009910 	.word	0x20009910
   13c88:	20009858 	.word	0x20009858

00013c8c <bt_gatt_attr_next>:
	struct bt_gatt_attr *next = NULL;
   13c8c:	2300      	movs	r3, #0
{
   13c8e:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   13c90:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   13c92:	f7ff fee3 	bl	13a5c <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   13c96:	1c41      	adds	r1, r0, #1
   13c98:	b289      	uxth	r1, r1
   13c9a:	4608      	mov	r0, r1
   13c9c:	4a03      	ldr	r2, [pc, #12]	; (13cac <bt_gatt_attr_next+0x20>)
   13c9e:	ab01      	add	r3, sp, #4
   13ca0:	f00b fb97 	bl	1f3d2 <bt_gatt_foreach_attr>
}
   13ca4:	9801      	ldr	r0, [sp, #4]
   13ca6:	b003      	add	sp, #12
   13ca8:	f85d fb04 	ldr.w	pc, [sp], #4
   13cac:	0001f059 	.word	0x0001f059

00013cb0 <gatt_indicate>:
{
   13cb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13cb4:	4615      	mov	r5, r2
   13cb6:	468a      	mov	sl, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   13cb8:	2294      	movs	r2, #148	; 0x94
   13cba:	6869      	ldr	r1, [r5, #4]
{
   13cbc:	af00      	add	r7, sp, #0
   13cbe:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   13cc0:	f00b fb94 	bl	1f3ec <bt_gatt_check_perm>
   13cc4:	4681      	mov	r9, r0
   13cc6:	b1a8      	cbz	r0, 13cf4 <gatt_indicate+0x44>
		BT_WARN("Link is not encrypted");
   13cc8:	466c      	mov	r4, sp
   13cca:	b088      	sub	sp, #32
   13ccc:	466a      	mov	r2, sp
   13cce:	4b40      	ldr	r3, [pc, #256]	; (13dd0 <gatt_indicate+0x120>)
   13cd0:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   13cd4:	6153      	str	r3, [r2, #20]
   13cd6:	4b3f      	ldr	r3, [pc, #252]	; (13dd4 <gatt_indicate+0x124>)
   13cd8:	483f      	ldr	r0, [pc, #252]	; (13dd8 <gatt_indicate+0x128>)
   13cda:	6193      	str	r3, [r2, #24]
   13cdc:	2303      	movs	r3, #3
   13cde:	f842 3f10 	str.w	r3, [r2, #16]!
   13ce2:	f00b fad0 	bl	1f286 <z_log_msg_static_create.constprop.0>
		return -EPERM;
   13ce6:	f04f 35ff 	mov.w	r5, #4294967295
   13cea:	46a5      	mov	sp, r4
}
   13cec:	4628      	mov	r0, r5
   13cee:	46bd      	mov	sp, r7
   13cf0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   13cf4:	2202      	movs	r2, #2
   13cf6:	4630      	mov	r0, r6
   13cf8:	6869      	ldr	r1, [r5, #4]
   13cfa:	f00b fbab 	bl	1f454 <bt_gatt_is_subscribed>
   13cfe:	b990      	cbnz	r0, 13d26 <gatt_indicate+0x76>
			BT_WARN("Device is not subscribed to characteristic");
   13d00:	466c      	mov	r4, sp
   13d02:	b088      	sub	sp, #32
   13d04:	466a      	mov	r2, sp
   13d06:	4b35      	ldr	r3, [pc, #212]	; (13ddc <gatt_indicate+0x12c>)
   13d08:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   13d0c:	6153      	str	r3, [r2, #20]
   13d0e:	4b31      	ldr	r3, [pc, #196]	; (13dd4 <gatt_indicate+0x124>)
   13d10:	4831      	ldr	r0, [pc, #196]	; (13dd8 <gatt_indicate+0x128>)
   13d12:	6193      	str	r3, [r2, #24]
   13d14:	2303      	movs	r3, #3
   13d16:	f842 3f10 	str.w	r3, [r2, #16]!
   13d1a:	f00b fab4 	bl	1f286 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   13d1e:	f06f 0515 	mvn.w	r5, #21
   13d22:	46a5      	mov	sp, r4
   13d24:	e7e2      	b.n	13cec <gatt_indicate+0x3c>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   13d26:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   13d2a:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   13d2c:	f8b5 8014 	ldrh.w	r8, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   13d30:	f7ff fb0e 	bl	13350 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   13d34:	f108 0802 	add.w	r8, r8, #2
	if (!req) {
   13d38:	4604      	mov	r4, r0
   13d3a:	b308      	cbz	r0, 13d80 <gatt_indicate+0xd0>
	req->att_op = op;
   13d3c:	211d      	movs	r1, #29
	req->func = func;
   13d3e:	4b28      	ldr	r3, [pc, #160]	; (13de0 <gatt_indicate+0x130>)
	req->len = len;
   13d40:	f8c0 8014 	str.w	r8, [r0, #20]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   13d44:	4642      	mov	r2, r8
	req->att_op = op;
   13d46:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
   13d48:	f8c0 900c 	str.w	r9, [r0, #12]
	req->func = func;
   13d4c:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   13d4e:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   13d50:	4630      	mov	r0, r6
   13d52:	f7ff f827 	bl	12da4 <bt_att_create_pdu>
	if (!buf) {
   13d56:	4680      	mov	r8, r0
   13d58:	b9a8      	cbnz	r0, 13d86 <gatt_indicate+0xd6>
		BT_WARN("No buffer available to send indication");
   13d5a:	466d      	mov	r5, sp
   13d5c:	b088      	sub	sp, #32
   13d5e:	466a      	mov	r2, sp
   13d60:	4b20      	ldr	r3, [pc, #128]	; (13de4 <gatt_indicate+0x134>)
   13d62:	481d      	ldr	r0, [pc, #116]	; (13dd8 <gatt_indicate+0x128>)
   13d64:	6153      	str	r3, [r2, #20]
   13d66:	4b1b      	ldr	r3, [pc, #108]	; (13dd4 <gatt_indicate+0x124>)
   13d68:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   13d6c:	6193      	str	r3, [r2, #24]
   13d6e:	2303      	movs	r3, #3
   13d70:	f842 3f10 	str.w	r3, [r2, #16]!
   13d74:	f00b fa87 	bl	1f286 <z_log_msg_static_create.constprop.0>
		bt_att_req_free(req);
   13d78:	4620      	mov	r0, r4
   13d7a:	46ad      	mov	sp, r5
   13d7c:	f7ff fb0c 	bl	13398 <bt_att_req_free>
		return -ENOMEM;
   13d80:	f06f 050b 	mvn.w	r5, #11
   13d84:	e7b2      	b.n	13cec <gatt_indicate+0x3c>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   13d86:	2301      	movs	r3, #1
   13d88:	464a      	mov	r2, r9
   13d8a:	4649      	mov	r1, r9
	return net_buf_simple_add(&buf->b, len);
   13d8c:	f108 0b08 	add.w	fp, r8, #8
   13d90:	f00b f95b 	bl	1f04a <bt_att_set_tx_meta_data>
   13d94:	2102      	movs	r1, #2
   13d96:	4658      	mov	r0, fp
   13d98:	f00c f878 	bl	1fe8c <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   13d9c:	4681      	mov	r9, r0
   13d9e:	f829 ab02 	strh.w	sl, [r9], #2
   13da2:	8aa9      	ldrh	r1, [r5, #20]
   13da4:	4658      	mov	r0, fp
   13da6:	f00c f871 	bl	1fe8c <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   13daa:	8aaa      	ldrh	r2, [r5, #20]
   13dac:	6929      	ldr	r1, [r5, #16]
   13dae:	4648      	mov	r0, r9
   13db0:	f00d fe6d 	bl	21a8e <memcpy>
	err = bt_att_req_send(conn, req);
   13db4:	4621      	mov	r1, r4
   13db6:	4630      	mov	r0, r6
	req->buf = buf;
   13db8:	f8c4 8008 	str.w	r8, [r4, #8]
	err = bt_att_req_send(conn, req);
   13dbc:	f00b f90d 	bl	1efda <bt_att_req_send>
	if (err) {
   13dc0:	4605      	mov	r5, r0
   13dc2:	2800      	cmp	r0, #0
   13dc4:	d092      	beq.n	13cec <gatt_indicate+0x3c>
		bt_att_req_free(req);
   13dc6:	4620      	mov	r0, r4
   13dc8:	f7ff fae6 	bl	13398 <bt_att_req_free>
   13dcc:	e78e      	b.n	13cec <gatt_indicate+0x3c>
   13dce:	bf00      	nop
   13dd0:	00025b6e 	.word	0x00025b6e
   13dd4:	00025cac 	.word	0x00025cac
   13dd8:	000227f0 	.word	0x000227f0
   13ddc:	00025b88 	.word	0x00025b88
   13de0:	0001f07b 	.word	0x0001f07b
   13de4:	00025bb7 	.word	0x00025bb7

00013de8 <bt_gatt_indicate>:
{
   13de8:	b530      	push	{r4, r5, lr}
   13dea:	4604      	mov	r4, r0
   13dec:	460d      	mov	r5, r1
   13dee:	b08b      	sub	sp, #44	; 0x2c
   13df0:	4b36      	ldr	r3, [pc, #216]	; (13ecc <bt_gatt_indicate+0xe4>)
   13df2:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   13df6:	075a      	lsls	r2, r3, #29
   13df8:	d561      	bpl.n	13ebe <bt_gatt_indicate+0xd6>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   13dfa:	b110      	cbz	r0, 13e02 <bt_gatt_indicate+0x1a>
   13dfc:	7b43      	ldrb	r3, [r0, #13]
   13dfe:	2b07      	cmp	r3, #7
   13e00:	d160      	bne.n	13ec4 <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
   13e02:	6868      	ldr	r0, [r5, #4]
   13e04:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   13e06:	f7ff fe29 	bl	13a5c <bt_gatt_attr_get_handle>
	if (params->uuid) {
   13e0a:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   13e0c:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   13e10:	b33a      	cbz	r2, 13e62 <bt_gatt_indicate+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   13e12:	a905      	add	r1, sp, #20
   13e14:	9102      	str	r1, [sp, #8]
   13e16:	492e      	ldr	r1, [pc, #184]	; (13ed0 <bt_gatt_indicate+0xe8>)
	found->attr = NULL;
   13e18:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   13e1a:	9101      	str	r1, [sp, #4]
   13e1c:	2101      	movs	r1, #1
   13e1e:	9100      	str	r1, [sp, #0]
   13e20:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   13e24:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   13e26:	f7ff fe49 	bl	13abc <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   13e2a:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   13e2c:	b91b      	cbnz	r3, 13e36 <bt_gatt_indicate+0x4e>
			return -ENOENT;
   13e2e:	f06f 0001 	mvn.w	r0, #1
}
   13e32:	b00b      	add	sp, #44	; 0x2c
   13e34:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   13e36:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   13e38:	9b05      	ldr	r3, [sp, #20]
   13e3a:	a904      	add	r1, sp, #16
   13e3c:	6818      	ldr	r0, [r3, #0]
   13e3e:	2300      	movs	r3, #0
   13e40:	f88d 3010 	strb.w	r3, [sp, #16]
   13e44:	f642 0303 	movw	r3, #10243	; 0x2803
   13e48:	f8ad 3012 	strh.w	r3, [sp, #18]
   13e4c:	f009 ff0c 	bl	1dc68 <bt_uuid_cmp>
   13e50:	b970      	cbnz	r0, 13e70 <bt_gatt_indicate+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   13e52:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   13e54:	68c3      	ldr	r3, [r0, #12]
   13e56:	799b      	ldrb	r3, [r3, #6]
   13e58:	069b      	lsls	r3, r3, #26
   13e5a:	d405      	bmi.n	13e68 <bt_gatt_indicate+0x80>
			return -EINVAL;
   13e5c:	f06f 0015 	mvn.w	r0, #21
   13e60:	e7e7      	b.n	13e32 <bt_gatt_indicate+0x4a>
		if (!data.handle) {
   13e62:	2800      	cmp	r0, #0
   13e64:	d1e8      	bne.n	13e38 <bt_gatt_indicate+0x50>
   13e66:	e7e2      	b.n	13e2e <bt_gatt_indicate+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   13e68:	f00b fa6c 	bl	1f344 <bt_gatt_attr_value_handle>
   13e6c:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   13e70:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   13e74:	b13c      	cbz	r4, 13e86 <bt_gatt_indicate+0x9e>
		params->_ref = 1;
   13e76:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   13e78:	4601      	mov	r1, r0
   13e7a:	462a      	mov	r2, r5
   13e7c:	4620      	mov	r0, r4
		params->_ref = 1;
   13e7e:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
   13e80:	f7ff ff16 	bl	13cb0 <gatt_indicate>
   13e84:	e7d5      	b.n	13e32 <bt_gatt_indicate+0x4a>
	data.err = -ENOTCONN;
   13e86:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   13e8a:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   13e8c:	2302      	movs	r3, #2
   13e8e:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   13e92:	f642 1302 	movw	r3, #10498	; 0x2902
   13e96:	f8ad 3012 	strh.w	r3, [sp, #18]
   13e9a:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   13e9c:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   13e9e:	9302      	str	r3, [sp, #8]
   13ea0:	4b0c      	ldr	r3, [pc, #48]	; (13ed4 <bt_gatt_indicate+0xec>)
   13ea2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13ea6:	9301      	str	r3, [sp, #4]
   13ea8:	2301      	movs	r3, #1
   13eaa:	aa04      	add	r2, sp, #16
   13eac:	9300      	str	r3, [sp, #0]
   13eae:	4623      	mov	r3, r4
	data.ind_params = params;
   13eb0:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   13eb2:	f88d 4010 	strb.w	r4, [sp, #16]
   13eb6:	f7ff fe01 	bl	13abc <bt_gatt_foreach_attr_type>
	return data.err;
   13eba:	9807      	ldr	r0, [sp, #28]
   13ebc:	e7b9      	b.n	13e32 <bt_gatt_indicate+0x4a>
		return -EAGAIN;
   13ebe:	f06f 000a 	mvn.w	r0, #10
   13ec2:	e7b6      	b.n	13e32 <bt_gatt_indicate+0x4a>
		return -ENOTCONN;
   13ec4:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   13ec8:	e7b3      	b.n	13e32 <bt_gatt_indicate+0x4a>
   13eca:	bf00      	nop
   13ecc:	200080cc 	.word	0x200080cc
   13ed0:	0001f0a1 	.word	0x0001f0a1
   13ed4:	0001425d 	.word	0x0001425d

00013ed8 <sc_process>:
{
   13ed8:	4603      	mov	r3, r0
   13eda:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
   13edc:	f850 2c08 	ldr.w	r2, [r0, #-8]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   13ee0:	f1a0 0120 	sub.w	r1, r0, #32
	sc_range[0] = sys_cpu_to_le16(sc->start);
   13ee4:	9201      	str	r2, [sp, #4]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   13ee6:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13eea:	e8d4 2fef 	ldaex	r2, [r4]
   13eee:	f022 0201 	bic.w	r2, r2, #1
   13ef2:	e8c4 2fe0 	stlex	r0, r2, [r4]
   13ef6:	2800      	cmp	r0, #0
   13ef8:	d1f7      	bne.n	13eea <sc_process+0x12>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   13efa:	4a0d      	ldr	r2, [pc, #52]	; (13f30 <sc_process+0x58>)
	sc->start = 0U;
   13efc:	2000      	movs	r0, #0
	sc->params.attr = &_1_gatt_svc.attrs[2];
   13efe:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   13f02:	4a0c      	ldr	r2, [pc, #48]	; (13f34 <sc_process+0x5c>)
	sc->start = 0U;
   13f04:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->params.func = sc_indicate_rsp;
   13f08:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   13f0c:	aa01      	add	r2, sp, #4
   13f0e:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   13f12:	2204      	movs	r2, #4
	sc->end = 0U;
   13f14:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.len = sizeof(sc_range);
   13f18:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   13f1c:	f7ff ff64 	bl	13de8 <bt_gatt_indicate>
   13f20:	b918      	cbnz	r0, 13f2a <sc_process+0x52>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
   13f22:	2101      	movs	r1, #1
   13f24:	4620      	mov	r0, r4
   13f26:	f00b f9d2 	bl	1f2ce <atomic_set_bit>
}
   13f2a:	b002      	add	sp, #8
   13f2c:	bd10      	pop	{r4, pc}
   13f2e:	bf00      	nop
   13f30:	00023064 	.word	0x00023064
   13f34:	00013971 	.word	0x00013971

00013f38 <update_ccc>:
{
   13f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f3c:	b083      	sub	sp, #12
   13f3e:	4690      	mov	r8, r2
	struct bt_conn *conn = data->conn;
   13f40:	6814      	ldr	r4, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   13f42:	4b44      	ldr	r3, [pc, #272]	; (14054 <update_ccc+0x11c>)
   13f44:	6882      	ldr	r2, [r0, #8]
{
   13f46:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   13f48:	429a      	cmp	r2, r3
{
   13f4a:	af00      	add	r7, sp, #0
	if (attr->write != bt_gatt_attr_write_ccc) {
   13f4c:	d17c      	bne.n	14048 <update_ccc+0x110>
	ccc = attr->user_data;
   13f4e:	f8d0 900c 	ldr.w	r9, [r0, #12]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   13f52:	f109 0601 	add.w	r6, r9, #1
   13f56:	f109 0a15 	add.w	sl, r9, #21
		if (!cfg->value ||
   13f5a:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   13f5e:	b303      	cbz	r3, 13fa2 <update_ccc+0x6a>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   13f60:	4632      	mov	r2, r6
   13f62:	4620      	mov	r0, r4
   13f64:	f816 1c01 	ldrb.w	r1, [r6, #-1]
   13f68:	f00a faf2 	bl	1e550 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   13f6c:	b1c8      	cbz	r0, 13fa2 <update_ccc+0x6a>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   13f6e:	f44f 7295 	mov.w	r2, #298	; 0x12a
   13f72:	4629      	mov	r1, r5
   13f74:	4620      	mov	r0, r4
   13f76:	f00b fa39 	bl	1f3ec <bt_gatt_check_perm>
		if (err) {
   13f7a:	b340      	cbz	r0, 13fce <update_ccc+0x96>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   13f7c:	2803      	cmp	r0, #3
   13f7e:	d114      	bne.n	13faa <update_ccc+0x72>
				BT_WARN("CCC %p not writable", attr);
   13f80:	46eb      	mov	fp, sp
   13f82:	b088      	sub	sp, #32
   13f84:	466a      	mov	r2, sp
   13f86:	4b34      	ldr	r3, [pc, #208]	; (14058 <update_ccc+0x120>)
   13f88:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   13f8c:	6153      	str	r3, [r2, #20]
   13f8e:	4b33      	ldr	r3, [pc, #204]	; (1405c <update_ccc+0x124>)
   13f90:	4833      	ldr	r0, [pc, #204]	; (14060 <update_ccc+0x128>)
   13f92:	e9c2 3506 	strd	r3, r5, [r2, #24]
   13f96:	2304      	movs	r3, #4
   13f98:	f842 3f10 	str.w	r3, [r2, #16]!
   13f9c:	f00b f973 	bl	1f286 <z_log_msg_static_create.constprop.0>
   13fa0:	46dd      	mov	sp, fp
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   13fa2:	360a      	adds	r6, #10
   13fa4:	45b2      	cmp	sl, r6
   13fa6:	d1d8      	bne.n	13f5a <update_ccc+0x22>
   13fa8:	e04e      	b.n	14048 <update_ccc+0x110>
			sec = BT_SECURITY_L2;
   13faa:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   13fac:	4620      	mov	r0, r4
			sec = BT_SECURITY_L2;
   13fae:	bf0c      	ite	eq
   13fb0:	f04f 0b03 	moveq.w	fp, #3
   13fb4:	f04f 0b02 	movne.w	fp, #2
			    bt_conn_get_security(conn) < sec) {
   13fb8:	f00a fac8 	bl	1e54c <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   13fbc:	4583      	cmp	fp, r0
   13fbe:	d906      	bls.n	13fce <update_ccc+0x96>
				if (data->sec < sec) {
   13fc0:	f898 3004 	ldrb.w	r3, [r8, #4]
   13fc4:	455b      	cmp	r3, fp
   13fc6:	d2ec      	bcs.n	13fa2 <update_ccc+0x6a>
					data->sec = sec;
   13fc8:	f888 b004 	strb.w	fp, [r8, #4]
   13fcc:	e7e9      	b.n	13fa2 <update_ccc+0x6a>
		gatt_ccc_changed(attr, ccc);
   13fce:	4649      	mov	r1, r9
   13fd0:	4628      	mov	r0, r5
   13fd2:	f00b f844 	bl	1f05e <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   13fd6:	4b23      	ldr	r3, [pc, #140]	; (14064 <update_ccc+0x12c>)
   13fd8:	4599      	cmp	r9, r3
   13fda:	d135      	bne.n	14048 <update_ccc+0x110>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   13fdc:	7a20      	ldrb	r0, [r4, #8]
   13fde:	f104 0188 	add.w	r1, r4, #136	; 0x88
   13fe2:	f7ff faf5 	bl	135d0 <find_sc_cfg>
	if (!cfg) {
   13fe6:	2800      	cmp	r0, #0
   13fe8:	d02e      	beq.n	14048 <update_ccc+0x110>
	if (!(cfg->data.start || cfg->data.end)) {
   13fea:	8902      	ldrh	r2, [r0, #8]
   13fec:	8943      	ldrh	r3, [r0, #10]
   13fee:	ea52 0103 	orrs.w	r1, r2, r3
   13ff2:	d029      	beq.n	14048 <update_ccc+0x110>
	index = bt_conn_index(conn);
   13ff4:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   13ff6:	80ba      	strh	r2, [r7, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   13ff8:	80fb      	strh	r3, [r7, #6]
	index = bt_conn_index(conn);
   13ffa:	f7fd fdb9 	bl	11b70 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   13ffe:	2318      	movs	r3, #24
   14000:	4919      	ldr	r1, [pc, #100]	; (14068 <update_ccc+0x130>)
   14002:	4a1a      	ldr	r2, [pc, #104]	; (1406c <update_ccc+0x134>)
   14004:	fb03 1300 	mla	r3, r3, r0, r1
   14008:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   1400a:	4a19      	ldr	r2, [pc, #100]	; (14070 <update_ccc+0x138>)
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1400c:	b200      	sxth	r0, r0
	sc_restore_params[index].func = sc_restore_rsp;
   1400e:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   14010:	1d3a      	adds	r2, r7, #4
   14012:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   14014:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   14016:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1401a:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   1401e:	4620      	mov	r0, r4
	sc_restore_params[index].len = sizeof(sc_range);
   14020:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   14022:	f7ff fee1 	bl	13de8 <bt_gatt_indicate>
   14026:	b178      	cbz	r0, 14048 <update_ccc+0x110>
		BT_ERR("SC restore indication failed");
   14028:	466c      	mov	r4, sp
   1402a:	b088      	sub	sp, #32
   1402c:	466a      	mov	r2, sp
   1402e:	4b11      	ldr	r3, [pc, #68]	; (14074 <update_ccc+0x13c>)
   14030:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14034:	6153      	str	r3, [r2, #20]
   14036:	4b10      	ldr	r3, [pc, #64]	; (14078 <update_ccc+0x140>)
   14038:	4809      	ldr	r0, [pc, #36]	; (14060 <update_ccc+0x128>)
   1403a:	6193      	str	r3, [r2, #24]
   1403c:	2303      	movs	r3, #3
   1403e:	f842 3f10 	str.w	r3, [r2, #16]!
   14042:	f00b f920 	bl	1f286 <z_log_msg_static_create.constprop.0>
   14046:	46a5      	mov	sp, r4
}
   14048:	2001      	movs	r0, #1
   1404a:	370c      	adds	r7, #12
   1404c:	46bd      	mov	sp, r7
   1404e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14052:	bf00      	nop
   14054:	00013685 	.word	0x00013685
   14058:	00025be2 	.word	0x00025be2
   1405c:	00025c83 	.word	0x00025c83
   14060:	000227f0 	.word	0x000227f0
   14064:	20008430 	.word	0x20008430
   14068:	20009ef4 	.word	0x20009ef4
   1406c:	00023064 	.word	0x00023064
   14070:	0001f2e3 	.word	0x0001f2e3
   14074:	00025bfa 	.word	0x00025bfa
   14078:	00025c78 	.word	0x00025c78

0001407c <gatt_notify>:
{
   1407c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14080:	4614      	mov	r4, r2
   14082:	4689      	mov	r9, r1
   14084:	af00      	add	r7, sp, #0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   14086:	2294      	movs	r2, #148	; 0x94
   14088:	6861      	ldr	r1, [r4, #4]
{
   1408a:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1408c:	f00b f9ae 	bl	1f3ec <bt_gatt_check_perm>
   14090:	b1a0      	cbz	r0, 140bc <gatt_notify+0x40>
		BT_WARN("Link is not encrypted");
   14092:	466c      	mov	r4, sp
   14094:	b088      	sub	sp, #32
   14096:	466a      	mov	r2, sp
   14098:	4b31      	ldr	r3, [pc, #196]	; (14160 <gatt_notify+0xe4>)
   1409a:	4832      	ldr	r0, [pc, #200]	; (14164 <gatt_notify+0xe8>)
   1409c:	6153      	str	r3, [r2, #20]
   1409e:	4b32      	ldr	r3, [pc, #200]	; (14168 <gatt_notify+0xec>)
   140a0:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   140a4:	6193      	str	r3, [r2, #24]
   140a6:	2303      	movs	r3, #3
   140a8:	f842 3f10 	str.w	r3, [r2, #16]!
   140ac:	f00b f8eb 	bl	1f286 <z_log_msg_static_create.constprop.0>
		return -EPERM;
   140b0:	f04f 30ff 	mov.w	r0, #4294967295
   140b4:	46a5      	mov	sp, r4
}
   140b6:	46bd      	mov	sp, r7
   140b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   140bc:	2201      	movs	r2, #1
   140be:	4630      	mov	r0, r6
   140c0:	6861      	ldr	r1, [r4, #4]
   140c2:	f00b f9c7 	bl	1f454 <bt_gatt_is_subscribed>
   140c6:	b990      	cbnz	r0, 140ee <gatt_notify+0x72>
			BT_WARN("Device is not subscribed to characteristic");
   140c8:	466c      	mov	r4, sp
   140ca:	b088      	sub	sp, #32
   140cc:	466a      	mov	r2, sp
   140ce:	4b27      	ldr	r3, [pc, #156]	; (1416c <gatt_notify+0xf0>)
   140d0:	4824      	ldr	r0, [pc, #144]	; (14164 <gatt_notify+0xe8>)
   140d2:	6153      	str	r3, [r2, #20]
   140d4:	4b24      	ldr	r3, [pc, #144]	; (14168 <gatt_notify+0xec>)
   140d6:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   140da:	6193      	str	r3, [r2, #24]
   140dc:	2303      	movs	r3, #3
   140de:	f842 3f10 	str.w	r3, [r2, #16]!
   140e2:	f00b f8d0 	bl	1f286 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   140e6:	f06f 0015 	mvn.w	r0, #21
   140ea:	46a5      	mov	sp, r4
   140ec:	e7e3      	b.n	140b6 <gatt_notify+0x3a>
				sizeof(*nfy) + params->len);
   140ee:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   140f0:	211b      	movs	r1, #27
   140f2:	4630      	mov	r0, r6
   140f4:	3202      	adds	r2, #2
   140f6:	f7fe fe55 	bl	12da4 <bt_att_create_pdu>
	if (!buf) {
   140fa:	4605      	mov	r5, r0
   140fc:	b990      	cbnz	r0, 14124 <gatt_notify+0xa8>
		BT_WARN("No buffer available to send notification");
   140fe:	466c      	mov	r4, sp
   14100:	b088      	sub	sp, #32
   14102:	466a      	mov	r2, sp
   14104:	4b1a      	ldr	r3, [pc, #104]	; (14170 <gatt_notify+0xf4>)
   14106:	4817      	ldr	r0, [pc, #92]	; (14164 <gatt_notify+0xe8>)
   14108:	6153      	str	r3, [r2, #20]
   1410a:	4b17      	ldr	r3, [pc, #92]	; (14168 <gatt_notify+0xec>)
   1410c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   14110:	6193      	str	r3, [r2, #24]
   14112:	2303      	movs	r3, #3
   14114:	f842 3f10 	str.w	r3, [r2, #16]!
   14118:	f00b f8b5 	bl	1f286 <z_log_msg_static_create.constprop.0>
		return -ENOMEM;
   1411c:	f06f 000b 	mvn.w	r0, #11
   14120:	46a5      	mov	sp, r4
   14122:	e7c8      	b.n	140b6 <gatt_notify+0x3a>
   14124:	f100 0a08 	add.w	sl, r0, #8
   14128:	2102      	movs	r1, #2
   1412a:	4650      	mov	r0, sl
   1412c:	f00b feae 	bl	1fe8c <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   14130:	4680      	mov	r8, r0
   14132:	f828 9b02 	strh.w	r9, [r8], #2
   14136:	89a1      	ldrh	r1, [r4, #12]
   14138:	4650      	mov	r0, sl
   1413a:	f00b fea7 	bl	1fe8c <net_buf_simple_add>
   1413e:	89a2      	ldrh	r2, [r4, #12]
   14140:	68a1      	ldr	r1, [r4, #8]
   14142:	4640      	mov	r0, r8
   14144:	f00d fca3 	bl	21a8e <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   14148:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   1414c:	4628      	mov	r0, r5
   1414e:	2301      	movs	r3, #1
   14150:	f00a ff7b 	bl	1f04a <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   14154:	4629      	mov	r1, r5
   14156:	4630      	mov	r0, r6
   14158:	f00a ff01 	bl	1ef5e <bt_att_send>
   1415c:	e7ab      	b.n	140b6 <gatt_notify+0x3a>
   1415e:	bf00      	nop
   14160:	00025b6e 	.word	0x00025b6e
   14164:	000227f0 	.word	0x000227f0
   14168:	00025ca0 	.word	0x00025ca0
   1416c:	00025b88 	.word	0x00025b88
   14170:	00025c1b 	.word	0x00025c1b

00014174 <bt_gatt_notify_cb>:
{
   14174:	b530      	push	{r4, r5, lr}
   14176:	4604      	mov	r4, r0
   14178:	460d      	mov	r5, r1
   1417a:	b08b      	sub	sp, #44	; 0x2c
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1417c:	4b34      	ldr	r3, [pc, #208]	; (14250 <bt_gatt_notify_cb+0xdc>)
   1417e:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   14182:	075a      	lsls	r2, r3, #29
   14184:	d55d      	bpl.n	14242 <bt_gatt_notify_cb+0xce>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   14186:	b110      	cbz	r0, 1418e <bt_gatt_notify_cb+0x1a>
   14188:	7b43      	ldrb	r3, [r0, #13]
   1418a:	2b07      	cmp	r3, #7
   1418c:	d15c      	bne.n	14248 <bt_gatt_notify_cb+0xd4>
	data.attr = params->attr;
   1418e:	6868      	ldr	r0, [r5, #4]
   14190:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   14192:	f7ff fc63 	bl	13a5c <bt_gatt_attr_get_handle>
	if (params->uuid) {
   14196:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   14198:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1419c:	b33a      	cbz	r2, 141ee <bt_gatt_notify_cb+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1419e:	a905      	add	r1, sp, #20
   141a0:	9102      	str	r1, [sp, #8]
   141a2:	492c      	ldr	r1, [pc, #176]	; (14254 <bt_gatt_notify_cb+0xe0>)
	found->attr = NULL;
   141a4:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   141a6:	9101      	str	r1, [sp, #4]
   141a8:	2101      	movs	r1, #1
   141aa:	9100      	str	r1, [sp, #0]
   141ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   141b0:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   141b2:	f7ff fc83 	bl	13abc <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   141b6:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   141b8:	b91b      	cbnz	r3, 141c2 <bt_gatt_notify_cb+0x4e>
			return -ENOENT;
   141ba:	f06f 0001 	mvn.w	r0, #1
}
   141be:	b00b      	add	sp, #44	; 0x2c
   141c0:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   141c2:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   141c4:	9b05      	ldr	r3, [sp, #20]
   141c6:	a904      	add	r1, sp, #16
   141c8:	6818      	ldr	r0, [r3, #0]
   141ca:	2300      	movs	r3, #0
   141cc:	f88d 3010 	strb.w	r3, [sp, #16]
   141d0:	f642 0303 	movw	r3, #10243	; 0x2803
   141d4:	f8ad 3012 	strh.w	r3, [sp, #18]
   141d8:	f009 fd46 	bl	1dc68 <bt_uuid_cmp>
   141dc:	b970      	cbnz	r0, 141fc <bt_gatt_notify_cb+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   141de:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   141e0:	68c3      	ldr	r3, [r0, #12]
   141e2:	799b      	ldrb	r3, [r3, #6]
   141e4:	06db      	lsls	r3, r3, #27
   141e6:	d405      	bmi.n	141f4 <bt_gatt_notify_cb+0x80>
			return -EINVAL;
   141e8:	f06f 0015 	mvn.w	r0, #21
   141ec:	e7e7      	b.n	141be <bt_gatt_notify_cb+0x4a>
		if (!data.handle) {
   141ee:	2800      	cmp	r0, #0
   141f0:	d1e8      	bne.n	141c4 <bt_gatt_notify_cb+0x50>
   141f2:	e7e2      	b.n	141ba <bt_gatt_notify_cb+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   141f4:	f00b f8a6 	bl	1f344 <bt_gatt_attr_value_handle>
   141f8:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_notify(conn, data.handle, params);
   141fc:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   14200:	b12c      	cbz	r4, 1420e <bt_gatt_notify_cb+0x9a>
		return gatt_notify(conn, data.handle, params);
   14202:	4601      	mov	r1, r0
   14204:	462a      	mov	r2, r5
   14206:	4620      	mov	r0, r4
   14208:	f7ff ff38 	bl	1407c <gatt_notify>
   1420c:	e7d7      	b.n	141be <bt_gatt_notify_cb+0x4a>
	data.err = -ENOTCONN;
   1420e:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   14212:	f642 1202 	movw	r2, #10498	; 0x2902
	data.err = -ENOTCONN;
   14216:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   14218:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1421a:	f8ad 2012 	strh.w	r2, [sp, #18]
   1421e:	aa05      	add	r2, sp, #20
   14220:	9202      	str	r2, [sp, #8]
   14222:	4a0d      	ldr	r2, [pc, #52]	; (14258 <bt_gatt_notify_cb+0xe4>)
	data.type = BT_GATT_CCC_NOTIFY;
   14224:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   14228:	e9cd 3200 	strd	r3, r2, [sp]
   1422c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14230:	4623      	mov	r3, r4
   14232:	aa04      	add	r2, sp, #16
	data.nfy_params = params;
   14234:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   14236:	f88d 4010 	strb.w	r4, [sp, #16]
   1423a:	f7ff fc3f 	bl	13abc <bt_gatt_foreach_attr_type>
	return data.err;
   1423e:	9807      	ldr	r0, [sp, #28]
   14240:	e7bd      	b.n	141be <bt_gatt_notify_cb+0x4a>
		return -EAGAIN;
   14242:	f06f 000a 	mvn.w	r0, #10
   14246:	e7ba      	b.n	141be <bt_gatt_notify_cb+0x4a>
		return -ENOTCONN;
   14248:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1424c:	e7b7      	b.n	141be <bt_gatt_notify_cb+0x4a>
   1424e:	bf00      	nop
   14250:	200080cc 	.word	0x200080cc
   14254:	0001f0a1 	.word	0x0001f0a1
   14258:	0001425d 	.word	0x0001425d

0001425c <notify_cb>:
{
   1425c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14260:	b083      	sub	sp, #12
   14262:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   14264:	4b4b      	ldr	r3, [pc, #300]	; (14394 <notify_cb+0x138>)
   14266:	6882      	ldr	r2, [r0, #8]
{
   14268:	4680      	mov	r8, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1426a:	429a      	cmp	r2, r3
{
   1426c:	af00      	add	r7, sp, #0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1426e:	d137      	bne.n	142e0 <notify_cb+0x84>
	ccc = attr->user_data;
   14270:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   14274:	4b48      	ldr	r3, [pc, #288]	; (14398 <notify_cb+0x13c>)
   14276:	459a      	cmp	sl, r3
   14278:	d11a      	bne.n	142b0 <notify_cb+0x54>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1427a:	2600      	movs	r6, #0
   1427c:	4c47      	ldr	r4, [pc, #284]	; (1439c <notify_cb+0x140>)
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1427e:	f8df 9120 	ldr.w	r9, [pc, #288]	; 143a0 <notify_cb+0x144>
   14282:	4649      	mov	r1, r9
   14284:	4620      	mov	r0, r4
   14286:	f00a ff62 	bl	1f14e <bt_addr_le_eq>
   1428a:	b978      	cbnz	r0, 142ac <notify_cb+0x50>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   1428c:	2207      	movs	r2, #7
   1428e:	4621      	mov	r1, r4
   14290:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   14294:	f7fd fdc8 	bl	11e28 <bt_conn_lookup_state_le>
			if (!conn) {
   14298:	bb38      	cbnz	r0, 142ea <notify_cb+0x8e>
				sc = (struct sc_data *)data->ind_params->data;
   1429a:	692b      	ldr	r3, [r5, #16]
				sc_save(cfg->id, &cfg->peer,
   1429c:	4621      	mov	r1, r4
				sc = (struct sc_data *)data->ind_params->data;
   1429e:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   142a0:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   142a4:	8853      	ldrh	r3, [r2, #2]
   142a6:	8812      	ldrh	r2, [r2, #0]
   142a8:	f7ff fa6c 	bl	13784 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   142ac:	340c      	adds	r4, #12
   142ae:	b1d6      	cbz	r6, 142e6 <notify_cb+0x8a>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   142b0:	f10a 0601 	add.w	r6, sl, #1
   142b4:	f10a 0b15 	add.w	fp, sl, #21
		if (cfg->value != data->type) {
   142b8:	f8b6 2007 	ldrh.w	r2, [r6, #7]
   142bc:	89ab      	ldrh	r3, [r5, #12]
   142be:	429a      	cmp	r2, r3
   142c0:	d10b      	bne.n	142da <notify_cb+0x7e>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   142c2:	4631      	mov	r1, r6
   142c4:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   142c8:	f7fd fd60 	bl	11d8c <bt_conn_lookup_addr_le>
		if (!conn) {
   142cc:	4604      	mov	r4, r0
   142ce:	b120      	cbz	r0, 142da <notify_cb+0x7e>
		if (conn->state != BT_CONN_CONNECTED) {
   142d0:	7b43      	ldrb	r3, [r0, #13]
   142d2:	2b07      	cmp	r3, #7
   142d4:	d00c      	beq.n	142f0 <notify_cb+0x94>
			bt_conn_unref(conn);
   142d6:	f00a f8ae 	bl	1e436 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   142da:	360a      	adds	r6, #10
   142dc:	45b3      	cmp	fp, r6
   142de:	d1eb      	bne.n	142b8 <notify_cb+0x5c>
		return BT_GATT_ITER_CONTINUE;
   142e0:	f04f 0901 	mov.w	r9, #1
   142e4:	e050      	b.n	14388 <notify_cb+0x12c>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   142e6:	2601      	movs	r6, #1
   142e8:	e7cb      	b.n	14282 <notify_cb+0x26>
			bt_conn_unref(conn);
   142ea:	f00a f8a4 	bl	1e436 <bt_conn_unref>
   142ee:	e7dd      	b.n	142ac <notify_cb+0x50>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   142f0:	f8da 3020 	ldr.w	r3, [sl, #32]
   142f4:	b123      	cbz	r3, 14300 <notify_cb+0xa4>
   142f6:	4641      	mov	r1, r8
   142f8:	4798      	blx	r3
   142fa:	b908      	cbnz	r0, 14300 <notify_cb+0xa4>
			bt_conn_unref(conn);
   142fc:	4620      	mov	r0, r4
   142fe:	e7ea      	b.n	142d6 <notify_cb+0x7a>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   14300:	2294      	movs	r2, #148	; 0x94
   14302:	4641      	mov	r1, r8
   14304:	4620      	mov	r0, r4
   14306:	f00b f871 	bl	1f3ec <bt_gatt_check_perm>
   1430a:	4681      	mov	r9, r0
   1430c:	b180      	cbz	r0, 14330 <notify_cb+0xd4>
			BT_WARN("Link is not encrypted");
   1430e:	46e9      	mov	r9, sp
   14310:	b088      	sub	sp, #32
   14312:	466a      	mov	r2, sp
   14314:	4b23      	ldr	r3, [pc, #140]	; (143a4 <notify_cb+0x148>)
   14316:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1431a:	6153      	str	r3, [r2, #20]
   1431c:	4b22      	ldr	r3, [pc, #136]	; (143a8 <notify_cb+0x14c>)
   1431e:	4823      	ldr	r0, [pc, #140]	; (143ac <notify_cb+0x150>)
   14320:	6193      	str	r3, [r2, #24]
   14322:	2303      	movs	r3, #3
   14324:	f842 3f10 	str.w	r3, [r2, #16]!
   14328:	f00a ffad 	bl	1f286 <z_log_msg_static_create.constprop.0>
   1432c:	46cd      	mov	sp, r9
			bt_conn_unref(conn);
   1432e:	e7e5      	b.n	142fc <notify_cb+0xa0>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   14330:	89ab      	ldrh	r3, [r5, #12]
   14332:	2b02      	cmp	r3, #2
   14334:	d115      	bne.n	14362 <notify_cb+0x106>
   14336:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   1433a:	079a      	lsls	r2, r3, #30
   1433c:	d405      	bmi.n	1434a <notify_cb+0xee>
		bt_conn_unref(conn);
   1433e:	4620      	mov	r0, r4
   14340:	f00a f879 	bl	1e436 <bt_conn_unref>
		data->err = 0;
   14344:	2300      	movs	r3, #0
   14346:	60ab      	str	r3, [r5, #8]
   14348:	e7c7      	b.n	142da <notify_cb+0x7e>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   1434a:	4620      	mov	r0, r4
   1434c:	692a      	ldr	r2, [r5, #16]
   1434e:	88a9      	ldrh	r1, [r5, #4]
   14350:	f7ff fcae 	bl	13cb0 <gatt_indicate>
			if (err == 0) {
   14354:	4603      	mov	r3, r0
   14356:	b980      	cbnz	r0, 1437a <notify_cb+0x11e>
				data->ind_params->_ref++;
   14358:	692a      	ldr	r2, [r5, #16]
   1435a:	7d93      	ldrb	r3, [r2, #22]
   1435c:	3301      	adds	r3, #1
   1435e:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   14360:	e7ed      	b.n	1433e <notify_cb+0xe2>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   14362:	2b01      	cmp	r3, #1
   14364:	d1eb      	bne.n	1433e <notify_cb+0xe2>
   14366:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   1436a:	07db      	lsls	r3, r3, #31
   1436c:	d5e7      	bpl.n	1433e <notify_cb+0xe2>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   1436e:	4620      	mov	r0, r4
   14370:	692a      	ldr	r2, [r5, #16]
   14372:	88a9      	ldrh	r1, [r5, #4]
   14374:	f7ff fe82 	bl	1407c <gatt_notify>
   14378:	4603      	mov	r3, r0
		bt_conn_unref(conn);
   1437a:	4620      	mov	r0, r4
   1437c:	607b      	str	r3, [r7, #4]
   1437e:	f00a f85a 	bl	1e436 <bt_conn_unref>
		if (err < 0) {
   14382:	687b      	ldr	r3, [r7, #4]
   14384:	2b00      	cmp	r3, #0
   14386:	dadd      	bge.n	14344 <notify_cb+0xe8>
}
   14388:	4648      	mov	r0, r9
   1438a:	370c      	adds	r7, #12
   1438c:	46bd      	mov	sp, r7
   1438e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14392:	bf00      	nop
   14394:	00013685 	.word	0x00013685
   14398:	20008430 	.word	0x20008430
   1439c:	2000a191 	.word	0x2000a191
   143a0:	000242c4 	.word	0x000242c4
   143a4:	00025b6e 	.word	0x00025b6e
   143a8:	00025cba 	.word	0x00025cba
   143ac:	000227f0 	.word	0x000227f0

000143b0 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   143b0:	b590      	push	{r4, r7, lr}
   143b2:	b083      	sub	sp, #12
   143b4:	af00      	add	r7, sp, #0
   143b6:	4604      	mov	r4, r0
	struct conn_data data;

	BT_DBG("conn %p", conn);

	data.conn = conn;
   143b8:	6038      	str	r0, [r7, #0]
	data.sec = BT_SECURITY_L1;
   143ba:	2001      	movs	r0, #1
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   143bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
   143c0:	463b      	mov	r3, r7
   143c2:	4a11      	ldr	r2, [pc, #68]	; (14408 <bt_gatt_connected+0x58>)
	data.sec = BT_SECURITY_L1;
   143c4:	7138      	strb	r0, [r7, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   143c6:	f00b f804 	bl	1f3d2 <bt_gatt_foreach_attr>
	 * enabling encryption will fail.
	 */
	if (IS_ENABLED(CONFIG_BT_SMP) &&
	    (conn->role == BT_HCI_ROLE_CENTRAL ||
	     IS_ENABLED(CONFIG_BT_GATT_AUTO_SEC_REQ)) &&
	    bt_conn_get_security(conn) < data.sec) {
   143ca:	4620      	mov	r0, r4
   143cc:	f00a f8be 	bl	1e54c <bt_conn_get_security>
   143d0:	7939      	ldrb	r1, [r7, #4]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   143d2:	4288      	cmp	r0, r1
   143d4:	d214      	bcs.n	14400 <bt_gatt_connected+0x50>
		int err = bt_conn_set_security(conn, data.sec);
   143d6:	4620      	mov	r0, r4
   143d8:	f00a f88c 	bl	1e4f4 <bt_conn_set_security>

		if (err) {
   143dc:	b180      	cbz	r0, 14400 <bt_gatt_connected+0x50>
			BT_WARN("Failed to set security for bonded peer (%d)",
   143de:	466c      	mov	r4, sp
   143e0:	b088      	sub	sp, #32
   143e2:	466a      	mov	r2, sp
   143e4:	4b09      	ldr	r3, [pc, #36]	; (1440c <bt_gatt_connected+0x5c>)
   143e6:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   143ea:	6153      	str	r3, [r2, #20]
   143ec:	4b08      	ldr	r3, [pc, #32]	; (14410 <bt_gatt_connected+0x60>)
   143ee:	e9c2 3006 	strd	r3, r0, [r2, #24]
   143f2:	2304      	movs	r3, #4
   143f4:	4807      	ldr	r0, [pc, #28]	; (14414 <bt_gatt_connected+0x64>)
   143f6:	f842 3f10 	str.w	r3, [r2, #16]!
   143fa:	f00a ff44 	bl	1f286 <z_log_msg_static_create.constprop.0>
   143fe:	46a5      	mov	sp, r4
	if (err) {
		BT_WARN("MTU Exchange failed (err %d)", err);
	}
#endif /* CONFIG_BT_GATT_AUTO_UPDATE_MTU */
#endif /* CONFIG_BT_GATT_CLIENT */
}
   14400:	370c      	adds	r7, #12
   14402:	46bd      	mov	sp, r7
   14404:	bd90      	pop	{r4, r7, pc}
   14406:	bf00      	nop
   14408:	00013f39 	.word	0x00013f39
   1440c:	00025c48 	.word	0x00025c48
   14410:	00025c8e 	.word	0x00025c8e
   14414:	000227f0 	.word	0x000227f0

00014418 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   14418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1441a:	4605      	mov	r5, r0
   1441c:	460e      	mov	r6, r1
   1441e:	4617      	mov	r7, r2
	return list->head;
   14420:	4b06      	ldr	r3, [pc, #24]	; (1443c <bt_gatt_att_max_mtu_changed+0x24>)
   14422:	681c      	ldr	r4, [r3, #0]
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   14424:	b14c      	cbz	r4, 1443a <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   14426:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1442a:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   1442c:	b11b      	cbz	r3, 14436 <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   1442e:	463a      	mov	r2, r7
   14430:	4631      	mov	r1, r6
   14432:	4628      	mov	r0, r5
   14434:	4798      	blx	r3
	return node->next;
   14436:	6864      	ldr	r4, [r4, #4]
   14438:	e7f4      	b.n	14424 <bt_gatt_att_max_mtu_changed+0xc>
		}
	}
}
   1443a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1443c:	20009f34 	.word	0x20009f34

00014440 <bt_gatt_encrypt_change>:

void bt_gatt_encrypt_change(struct bt_conn *conn)
{
   14440:	b507      	push	{r0, r1, r2, lr}
	struct conn_data data;

	BT_DBG("conn %p", conn);

	data.conn = conn;
   14442:	9000      	str	r0, [sp, #0]
	data.sec = BT_SECURITY_L1;
   14444:	2001      	movs	r0, #1

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   14446:	466b      	mov	r3, sp
   14448:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1444c:	4a03      	ldr	r2, [pc, #12]	; (1445c <bt_gatt_encrypt_change+0x1c>)
	data.sec = BT_SECURITY_L1;
   1444e:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   14452:	f00a ffbe 	bl	1f3d2 <bt_gatt_foreach_attr>
}
   14456:	b003      	add	sp, #12
   14458:	f85d fb04 	ldr.w	pc, [sp], #4
   1445c:	00013f39 	.word	0x00013f39

00014460 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   14460:	b570      	push	{r4, r5, r6, lr}
   14462:	4604      	mov	r4, r0
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   14464:	4603      	mov	r3, r0
   14466:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1446a:	2001      	movs	r0, #1
   1446c:	4a0d      	ldr	r2, [pc, #52]	; (144a4 <bt_gatt_disconnected+0x44>)
   1446e:	f00a ffb0 	bl	1f3d2 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   14472:	4620      	mov	r0, r4
   14474:	f7ff f87e 	bl	13574 <find_cf_cfg>
	if (!cfg) {
   14478:	4605      	mov	r5, r0
   1447a:	b188      	cbz	r0, 144a0 <bt_gatt_disconnected+0x40>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1447c:	f104 0688 	add.w	r6, r4, #136	; 0x88
   14480:	4631      	mov	r1, r6
   14482:	7a20      	ldrb	r0, [r4, #8]
   14484:	f009 fd4c 	bl	1df20 <bt_addr_le_is_bonded>
   14488:	b920      	cbnz	r0, 14494 <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
   1448a:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   1448c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
   14490:	f7ff b964 	b.w	1375c <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   14494:	4631      	mov	r1, r6
   14496:	1c68      	adds	r0, r5, #1
}
   14498:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1449c:	f00a be5f 	b.w	1f15e <bt_addr_le_copy>
}
   144a0:	bd70      	pop	{r4, r5, r6, pc}
   144a2:	bf00      	nop
   144a4:	000138bd 	.word	0x000138bd

000144a8 <smp_find>:

	return 0;
}

static struct bt_smp *smp_find(int flag)
{
   144a8:	b508      	push	{r3, lr}
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   144aa:	4b05      	ldr	r3, [pc, #20]	; (144c0 <smp_find+0x18>)
{
   144ac:	4601      	mov	r1, r0
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   144ae:	4618      	mov	r0, r3
   144b0:	f00b f8a5 	bl	1f5fe <atomic_test_bit>
			return &bt_smp_pool[i];
		}
	}

	return NULL;
   144b4:	3b04      	subs	r3, #4
   144b6:	2800      	cmp	r0, #0
}
   144b8:	bf14      	ite	ne
   144ba:	4618      	movne	r0, r3
   144bc:	2000      	moveq	r0, #0
   144be:	bd08      	pop	{r3, pc}
   144c0:	2000991c 	.word	0x2000991c

000144c4 <latch_auth_cb>:
	atomic_ptr_cas(&smp->auth_cb, BT_SMP_AUTH_CB_UNINITIALIZED, (atomic_ptr_val_t)bt_auth);
   144c4:	4b08      	ldr	r3, [pc, #32]	; (144e8 <latch_auth_cb+0x24>)
   144c6:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   144ca:	681a      	ldr	r2, [r3, #0]
   144cc:	4b07      	ldr	r3, [pc, #28]	; (144ec <latch_auth_cb+0x28>)
   144ce:	e8d0 1fef 	ldaex	r1, [r0]
   144d2:	4299      	cmp	r1, r3
   144d4:	d104      	bne.n	144e0 <latch_auth_cb+0x1c>
   144d6:	e8c0 2fec 	stlex	ip, r2, [r0]
   144da:	f1bc 0f00 	cmp.w	ip, #0
   144de:	d1f6      	bne.n	144ce <latch_auth_cb+0xa>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   144e0:	e8d0 0faf 	lda	r0, [r0]
}
   144e4:	4770      	bx	lr
   144e6:	bf00      	nop
   144e8:	20009e08 	.word	0x20009e08
   144ec:	20009918 	.word	0x20009918

000144f0 <get_io_capa>:
{
   144f0:	b508      	push	{r3, lr}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   144f2:	f7ff ffe7 	bl	144c4 <latch_auth_cb>
	if (!smp_auth_cb) {
   144f6:	4603      	mov	r3, r0
   144f8:	b1c8      	cbz	r0, 1452e <get_io_capa+0x3e>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   144fa:	e9d0 1200 	ldrd	r1, r2, [r0]
   144fe:	b921      	cbnz	r1, 1450a <get_io_capa+0x1a>
			return BT_SMP_IO_KEYBOARD_ONLY;
   14500:	2a00      	cmp	r2, #0
   14502:	bf0c      	ite	eq
   14504:	2003      	moveq	r0, #3
   14506:	2002      	movne	r0, #2
   14508:	e010      	b.n	1452c <get_io_capa+0x3c>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   1450a:	b132      	cbz	r2, 1451a <get_io_capa+0x2a>
   1450c:	6883      	ldr	r3, [r0, #8]
   1450e:	b913      	cbnz	r3, 14516 <get_io_capa+0x26>
	    (smp_auth_cb->passkey_confirm || !sc_supported)) {
   14510:	4b09      	ldr	r3, [pc, #36]	; (14538 <get_io_capa+0x48>)
   14512:	781b      	ldrb	r3, [r3, #0]
   14514:	b933      	cbnz	r3, 14524 <get_io_capa+0x34>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   14516:	2004      	movs	r0, #4
   14518:	e008      	b.n	1452c <get_io_capa+0x3c>
	if (sc_supported && smp_auth_cb->passkey_display &&
   1451a:	4907      	ldr	r1, [pc, #28]	; (14538 <get_io_capa+0x48>)
   1451c:	7808      	ldrb	r0, [r1, #0]
   1451e:	b128      	cbz	r0, 1452c <get_io_capa+0x3c>
   14520:	689b      	ldr	r3, [r3, #8]
   14522:	b933      	cbnz	r3, 14532 <get_io_capa+0x42>
	if (smp_auth_cb->passkey_entry) {
   14524:	3a00      	subs	r2, #0
   14526:	bf18      	it	ne
   14528:	2201      	movne	r2, #1
   1452a:	0050      	lsls	r0, r2, #1
}
   1452c:	bd08      	pop	{r3, pc}
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   1452e:	2003      	movs	r0, #3
   14530:	e7fc      	b.n	1452c <get_io_capa+0x3c>
		return BT_SMP_IO_DISPLAY_YESNO;
   14532:	2001      	movs	r0, #1
   14534:	e7fa      	b.n	1452c <get_io_capa+0x3c>
   14536:	bf00      	nop
   14538:	2000a292 	.word	0x2000a292

0001453c <get_auth>:
{
   1453c:	b510      	push	{r4, lr}
	if (sc_supported) {
   1453e:	4b0c      	ldr	r3, [pc, #48]	; (14570 <get_auth+0x34>)
   14540:	781b      	ldrb	r3, [r3, #0]
   14542:	b17b      	cbz	r3, 14564 <get_auth+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
   14544:	f001 040f 	and.w	r4, r1, #15
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   14548:	f7ff ffd2 	bl	144f0 <get_io_capa>
	if (bondable) {
   1454c:	4b09      	ldr	r3, [pc, #36]	; (14574 <get_auth+0x38>)
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1454e:	2803      	cmp	r0, #3
	if (bondable) {
   14550:	781b      	ldrb	r3, [r3, #0]
		auth &= ~(BT_SMP_AUTH_MITM);
   14552:	bf0c      	ite	eq
   14554:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
   14558:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
   1455c:	b12b      	cbz	r3, 1456a <get_auth+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
   1455e:	f044 0001 	orr.w	r0, r4, #1
}
   14562:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
   14564:	f001 0407 	and.w	r4, r1, #7
   14568:	e7ee      	b.n	14548 <get_auth+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
   1456a:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
   1456e:	e7f8      	b.n	14562 <get_auth+0x26>
   14570:	2000a292 	.word	0x2000a292
   14574:	2000880c 	.word	0x2000880c

00014578 <bt_smp_pkey_ready.part.0>:
	}

	return 0;
}

static void bt_smp_pkey_ready(const uint8_t *pkey)
   14578:	b580      	push	{r7, lr}
   1457a:	af00      	add	r7, sp, #0
	BT_DBG("");

	sc_public_key = pkey;

	if (!pkey) {
		BT_WARN("Public key not available");
   1457c:	b088      	sub	sp, #32
   1457e:	466a      	mov	r2, sp
   14580:	4b06      	ldr	r3, [pc, #24]	; (1459c <bt_smp_pkey_ready.part.0+0x24>)
   14582:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   14586:	6153      	str	r3, [r2, #20]
   14588:	4b05      	ldr	r3, [pc, #20]	; (145a0 <bt_smp_pkey_ready.part.0+0x28>)
   1458a:	4806      	ldr	r0, [pc, #24]	; (145a4 <bt_smp_pkey_ready.part.0+0x2c>)
   1458c:	6193      	str	r3, [r2, #24]
   1458e:	2303      	movs	r3, #3
   14590:	f842 3f10 	str.w	r3, [r2, #16]!
   14594:	f00b f8a9 	bl	1f6ea <z_log_msg_static_create.constprop.0>
		if (err) {
			smp_error(smp, err);
		}
#endif /* CONFIG_BT_PERIPHERAL */
	}
}
   14598:	46bd      	mov	sp, r7
   1459a:	bd80      	pop	{r7, pc}
   1459c:	00025d07 	.word	0x00025d07
   145a0:	00026135 	.word	0x00026135
   145a4:	00022828 	.word	0x00022828

000145a8 <smp_chan_get.part.0>:
static struct bt_smp *smp_chan_get(struct bt_conn *conn)
   145a8:	b580      	push	{r7, lr}
   145aa:	af00      	add	r7, sp, #0
		BT_ERR("Unable to find SMP channel");
   145ac:	b088      	sub	sp, #32
   145ae:	466a      	mov	r2, sp
   145b0:	4b07      	ldr	r3, [pc, #28]	; (145d0 <smp_chan_get.part.0+0x28>)
   145b2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   145b6:	6153      	str	r3, [r2, #20]
   145b8:	4b06      	ldr	r3, [pc, #24]	; (145d4 <smp_chan_get.part.0+0x2c>)
   145ba:	4807      	ldr	r0, [pc, #28]	; (145d8 <smp_chan_get.part.0+0x30>)
   145bc:	6193      	str	r3, [r2, #24]
   145be:	2303      	movs	r3, #3
   145c0:	f842 3f10 	str.w	r3, [r2, #16]!
   145c4:	f00b f891 	bl	1f6ea <z_log_msg_static_create.constprop.0>
}
   145c8:	2000      	movs	r0, #0
   145ca:	46bd      	mov	sp, r7
   145cc:	bd80      	pop	{r7, pc}
   145ce:	bf00      	nop
   145d0:	00025d24 	.word	0x00025d24
   145d4:	00026313 	.word	0x00026313
   145d8:	00022828 	.word	0x00022828

000145dc <bt_smp_accept.part.0>:
	} else {
		conn->le.keys->flags &= ~BT_KEYS_SC;
	}
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   145dc:	b580      	push	{r7, lr}
   145de:	af00      	add	r7, sp, #0
		*chan = &smp->chan.chan;

		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);
   145e0:	b088      	sub	sp, #32
   145e2:	466a      	mov	r2, sp
   145e4:	4b08      	ldr	r3, [pc, #32]	; (14608 <bt_smp_accept.part.0+0x2c>)
   145e6:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   145ea:	6153      	str	r3, [r2, #20]
   145ec:	4b07      	ldr	r3, [pc, #28]	; (1460c <bt_smp_accept.part.0+0x30>)
   145ee:	e9c2 3006 	strd	r3, r0, [r2, #24]
   145f2:	2304      	movs	r3, #4
   145f4:	4806      	ldr	r0, [pc, #24]	; (14610 <bt_smp_accept.part.0+0x34>)
   145f6:	f842 3f10 	str.w	r3, [r2, #16]!
   145fa:	f00b f876 	bl	1f6ea <z_log_msg_static_create.constprop.0>

	return -ENOMEM;
}
   145fe:	f06f 000b 	mvn.w	r0, #11
   14602:	46bd      	mov	sp, r7
   14604:	bd80      	pop	{r7, pc}
   14606:	bf00      	nop
   14608:	00025d43 	.word	0x00025d43
   1460c:	00026295 	.word	0x00026295
   14610:	00022828 	.word	0x00022828

00014614 <bt_smp_accept>:
		if (smp->chan.chan.conn) {
   14614:	4b05      	ldr	r3, [pc, #20]	; (1462c <bt_smp_accept+0x18>)
   14616:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
   1461a:	b10a      	cbz	r2, 14620 <bt_smp_accept+0xc>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1461c:	f7ff bfde 	b.w	145dc <bt_smp_accept.part.0>
		smp->chan.chan.ops = &ops;
   14620:	4803      	ldr	r0, [pc, #12]	; (14630 <bt_smp_accept+0x1c>)
		*chan = &smp->chan.chan;
   14622:	33ec      	adds	r3, #236	; 0xec
		smp->chan.chan.ops = &ops;
   14624:	6058      	str	r0, [r3, #4]
}
   14626:	4610      	mov	r0, r2
		*chan = &smp->chan.chan;
   14628:	600b      	str	r3, [r1, #0]
}
   1462a:	4770      	bx	lr
   1462c:	20009918 	.word	0x20009918
   14630:	00023168 	.word	0x00023168

00014634 <smp_init>:
{
   14634:	b538      	push	{r3, r4, r5, lr}
   14636:	4605      	mov	r5, r0
__ssp_bos_icheck3(memset, void *, int)
   14638:	22ec      	movs	r2, #236	; 0xec
   1463a:	2100      	movs	r1, #0
   1463c:	f00d fa34 	bl	21aa8 <memset>
	if (bt_rand(smp->prnd, 16)) {
   14640:	2110      	movs	r1, #16
   14642:	f105 0027 	add.w	r0, r5, #39	; 0x27
   14646:	f7fc fd61 	bl	1110c <bt_rand>
   1464a:	4604      	mov	r4, r0
   1464c:	b948      	cbnz	r0, 14662 <smp_init+0x2e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   1464e:	2105      	movs	r1, #5
   14650:	4628      	mov	r0, r5
   14652:	f00b f8db 	bl	1f80c <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   14656:	f7fc fe23 	bl	112a0 <bt_pub_key_get>
   1465a:	4b03      	ldr	r3, [pc, #12]	; (14668 <smp_init+0x34>)
   1465c:	6018      	str	r0, [r3, #0]
}
   1465e:	4620      	mov	r0, r4
   14660:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   14662:	2408      	movs	r4, #8
   14664:	e7fb      	b.n	1465e <smp_init+0x2a>
   14666:	bf00      	nop
   14668:	20009f3c 	.word	0x20009f3c

0001466c <smp_dhkey_generate>:
{
   1466c:	b5b0      	push	{r4, r5, r7, lr}
   1466e:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   14670:	1d05      	adds	r5, r0, #4
   14672:	2108      	movs	r1, #8
   14674:	4628      	mov	r0, r5
{
   14676:	af00      	add	r7, sp, #0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   14678:	f00b f8c8 	bl	1f80c <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   1467c:	490e      	ldr	r1, [pc, #56]	; (146b8 <smp_dhkey_generate+0x4c>)
   1467e:	f104 0057 	add.w	r0, r4, #87	; 0x57
   14682:	f7fc fe1b 	bl	112bc <bt_dh_key_gen>
	if (err) {
   14686:	b1a0      	cbz	r0, 146b2 <smp_dhkey_generate+0x46>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   14688:	2108      	movs	r1, #8
   1468a:	4628      	mov	r0, r5
   1468c:	f00a ffde 	bl	1f64c <atomic_clear_bit>
		BT_ERR("Failed to generate DHKey");
   14690:	466c      	mov	r4, sp
   14692:	b088      	sub	sp, #32
   14694:	466a      	mov	r2, sp
   14696:	4b09      	ldr	r3, [pc, #36]	; (146bc <smp_dhkey_generate+0x50>)
   14698:	4809      	ldr	r0, [pc, #36]	; (146c0 <smp_dhkey_generate+0x54>)
   1469a:	6153      	str	r3, [r2, #20]
   1469c:	4b09      	ldr	r3, [pc, #36]	; (146c4 <smp_dhkey_generate+0x58>)
   1469e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   146a2:	6193      	str	r3, [r2, #24]
   146a4:	2303      	movs	r3, #3
   146a6:	f842 3f10 	str.w	r3, [r2, #16]!
   146aa:	f00b f81e 	bl	1f6ea <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   146ae:	2008      	movs	r0, #8
   146b0:	46a5      	mov	sp, r4
}
   146b2:	46bd      	mov	sp, r7
   146b4:	bdb0      	pop	{r4, r5, r7, pc}
   146b6:	bf00      	nop
   146b8:	0001fbe5 	.word	0x0001fbe5
   146bc:	00025d6c 	.word	0x00025d6c
   146c0:	00022828 	.word	0x00022828
   146c4:	00026251 	.word	0x00026251

000146c8 <smp_ident_info>:
{
   146c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   146ca:	4605      	mov	r5, r0
   146cc:	460b      	mov	r3, r1
   146ce:	af00      	add	r7, sp, #0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   146d0:	210d      	movs	r1, #13
   146d2:	3004      	adds	r0, #4
   146d4:	f00a ff93 	bl	1f5fe <atomic_test_bit>
   146d8:	b378      	cbz	r0, 1473a <smp_ident_info+0x72>
		struct bt_smp_ident_info *req = (void *)buf->data;
   146da:	689c      	ldr	r4, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   146dc:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   146e0:	2002      	movs	r0, #2
   146e2:	f103 0688 	add.w	r6, r3, #136	; 0x88
   146e6:	4632      	mov	r2, r6
   146e8:	7a19      	ldrb	r1, [r3, #8]
   146ea:	f00b fb0c 	bl	1fd06 <bt_keys_get_type>
		if (!keys) {
   146ee:	b9c8      	cbnz	r0, 14724 <smp_ident_info+0x5c>
			BT_ERR("Unable to get keys for %s",
   146f0:	4630      	mov	r0, r6
   146f2:	f7f9 ffc9 	bl	e688 <bt_addr_le_str>
   146f6:	466c      	mov	r4, sp
   146f8:	b08a      	sub	sp, #40	; 0x28
   146fa:	466a      	mov	r2, sp
   146fc:	4b12      	ldr	r3, [pc, #72]	; (14748 <smp_ident_info+0x80>)
   146fe:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   14702:	6153      	str	r3, [r2, #20]
   14704:	4b11      	ldr	r3, [pc, #68]	; (1474c <smp_ident_info+0x84>)
   14706:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1470a:	f240 3301 	movw	r3, #769	; 0x301
   1470e:	8413      	strh	r3, [r2, #32]
   14710:	4b0f      	ldr	r3, [pc, #60]	; (14750 <smp_ident_info+0x88>)
   14712:	4810      	ldr	r0, [pc, #64]	; (14754 <smp_ident_info+0x8c>)
   14714:	f842 3f10 	str.w	r3, [r2, #16]!
   14718:	f00a ffe7 	bl	1f6ea <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   1471c:	2008      	movs	r0, #8
   1471e:	46a5      	mov	sp, r4
}
   14720:	46bd      	mov	sp, r7
   14722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   14724:	4622      	mov	r2, r4
   14726:	f100 032a 	add.w	r3, r0, #42	; 0x2a
   1472a:	f104 0110 	add.w	r1, r4, #16
   1472e:	f852 0b04 	ldr.w	r0, [r2], #4
   14732:	428a      	cmp	r2, r1
   14734:	f843 0b04 	str.w	r0, [r3], #4
   14738:	d1f9      	bne.n	1472e <smp_ident_info+0x66>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   1473a:	4628      	mov	r0, r5
   1473c:	2109      	movs	r1, #9
   1473e:	f00b f865 	bl	1f80c <atomic_set_bit>
	return 0;
   14742:	2000      	movs	r0, #0
   14744:	e7ec      	b.n	14720 <smp_ident_info+0x58>
   14746:	bf00      	nop
   14748:	00025d89 	.word	0x00025d89
   1474c:	0002621b 	.word	0x0002621b
   14750:	01000004 	.word	0x01000004
   14754:	00022828 	.word	0x00022828

00014758 <smp_encrypt_info>:
{
   14758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1475a:	4605      	mov	r5, r0
   1475c:	460b      	mov	r3, r1
   1475e:	af00      	add	r7, sp, #0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   14760:	210d      	movs	r1, #13
   14762:	3004      	adds	r0, #4
   14764:	f00a ff4b 	bl	1f5fe <atomic_test_bit>
   14768:	b378      	cbz	r0, 147ca <smp_encrypt_info+0x72>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   1476a:	689c      	ldr	r4, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   1476c:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   14770:	2004      	movs	r0, #4
   14772:	f103 0688 	add.w	r6, r3, #136	; 0x88
   14776:	4632      	mov	r2, r6
   14778:	7a19      	ldrb	r1, [r3, #8]
   1477a:	f00b fac4 	bl	1fd06 <bt_keys_get_type>
		if (!keys) {
   1477e:	b9c8      	cbnz	r0, 147b4 <smp_encrypt_info+0x5c>
			BT_ERR("Unable to get keys for %s",
   14780:	4630      	mov	r0, r6
   14782:	f7f9 ff81 	bl	e688 <bt_addr_le_str>
   14786:	466c      	mov	r4, sp
   14788:	b08a      	sub	sp, #40	; 0x28
   1478a:	466a      	mov	r2, sp
   1478c:	4b12      	ldr	r3, [pc, #72]	; (147d8 <smp_encrypt_info+0x80>)
   1478e:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   14792:	6153      	str	r3, [r2, #20]
   14794:	4b11      	ldr	r3, [pc, #68]	; (147dc <smp_encrypt_info+0x84>)
   14796:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1479a:	f240 3301 	movw	r3, #769	; 0x301
   1479e:	8413      	strh	r3, [r2, #32]
   147a0:	4b0f      	ldr	r3, [pc, #60]	; (147e0 <smp_encrypt_info+0x88>)
   147a2:	4810      	ldr	r0, [pc, #64]	; (147e4 <smp_encrypt_info+0x8c>)
   147a4:	f842 3f10 	str.w	r3, [r2, #16]!
   147a8:	f00a ff9f 	bl	1f6ea <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   147ac:	2008      	movs	r0, #8
   147ae:	46a5      	mov	sp, r4
}
   147b0:	46bd      	mov	sp, r7
   147b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   147b4:	4622      	mov	r2, r4
   147b6:	f100 031a 	add.w	r3, r0, #26
   147ba:	f104 0110 	add.w	r1, r4, #16
   147be:	f852 0b04 	ldr.w	r0, [r2], #4
   147c2:	428a      	cmp	r2, r1
   147c4:	f843 0b04 	str.w	r0, [r3], #4
   147c8:	d1f9      	bne.n	147be <smp_encrypt_info+0x66>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_CENTRAL_IDENT);
   147ca:	4628      	mov	r0, r5
   147cc:	2107      	movs	r1, #7
   147ce:	f00b f81d 	bl	1f80c <atomic_set_bit>
	return 0;
   147d2:	2000      	movs	r0, #0
   147d4:	e7ec      	b.n	147b0 <smp_encrypt_info+0x58>
   147d6:	bf00      	nop
   147d8:	00025d89 	.word	0x00025d89
   147dc:	000261f8 	.word	0x000261f8
   147e0:	01000004 	.word	0x01000004
   147e4:	00022828 	.word	0x00022828

000147e8 <smp_send_pairing_confirm>:
{
   147e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   147ea:	b083      	sub	sp, #12
	switch (smp->method) {
   147ec:	7a04      	ldrb	r4, [r0, #8]
{
   147ee:	4605      	mov	r5, r0
	switch (smp->method) {
   147f0:	2c02      	cmp	r4, #2
{
   147f2:	af02      	add	r7, sp, #8
	switch (smp->method) {
   147f4:	d823      	bhi.n	1483e <smp_send_pairing_confirm+0x56>
   147f6:	b144      	cbz	r4, 1480a <smp_send_pairing_confirm+0x22>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   147f8:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
   147fc:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   14800:	40dc      	lsrs	r4, r3
   14802:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   14806:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   1480a:	2103      	movs	r1, #3
   1480c:	4628      	mov	r0, r5
   1480e:	f00b f80d 	bl	1f82c <smp_create_pdu.constprop.0>
	if (!buf) {
   14812:	4606      	mov	r6, r0
   14814:	b330      	cbz	r0, 14864 <smp_send_pairing_confirm+0x7c>
   14816:	2110      	movs	r1, #16
   14818:	3008      	adds	r0, #8
   1481a:	f00b fb37 	bl	1fe8c <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   1481e:	9000      	str	r0, [sp, #0]
   14820:	4819      	ldr	r0, [pc, #100]	; (14888 <smp_send_pairing_confirm+0xa0>)
   14822:	4623      	mov	r3, r4
   14824:	6800      	ldr	r0, [r0, #0]
   14826:	f105 0227 	add.w	r2, r5, #39	; 0x27
   1482a:	f105 0157 	add.w	r1, r5, #87	; 0x57
   1482e:	f00a ffc8 	bl	1f7c2 <smp_f4>
   14832:	4604      	mov	r4, r0
   14834:	b1e0      	cbz	r0, 14870 <smp_send_pairing_confirm+0x88>
		net_buf_unref(buf);
   14836:	4630      	mov	r0, r6
   14838:	f001 fd80 	bl	1633c <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   1483c:	e012      	b.n	14864 <smp_send_pairing_confirm+0x7c>
	switch (smp->method) {
   1483e:	2c03      	cmp	r4, #3
   14840:	d014      	beq.n	1486c <smp_send_pairing_confirm+0x84>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   14842:	466d      	mov	r5, sp
   14844:	b088      	sub	sp, #32
   14846:	aa02      	add	r2, sp, #8
   14848:	4b10      	ldr	r3, [pc, #64]	; (1488c <smp_send_pairing_confirm+0xa4>)
   1484a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1484e:	6153      	str	r3, [r2, #20]
   14850:	4b0f      	ldr	r3, [pc, #60]	; (14890 <smp_send_pairing_confirm+0xa8>)
   14852:	4810      	ldr	r0, [pc, #64]	; (14894 <smp_send_pairing_confirm+0xac>)
	switch (smp->method) {
   14854:	e9c2 3406 	strd	r3, r4, [r2, #24]
		BT_ERR("Unknown pairing method (%u)", smp->method);
   14858:	2304      	movs	r3, #4
   1485a:	f842 3f10 	str.w	r3, [r2, #16]!
   1485e:	f00a ff44 	bl	1f6ea <z_log_msg_static_create.constprop.0>
   14862:	46ad      	mov	sp, r5
		return BT_SMP_ERR_UNSPECIFIED;
   14864:	2008      	movs	r0, #8
}
   14866:	3704      	adds	r7, #4
   14868:	46bd      	mov	sp, r7
   1486a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (smp->method) {
   1486c:	2400      	movs	r4, #0
   1486e:	e7cc      	b.n	1480a <smp_send_pairing_confirm+0x22>
	smp_send(smp, buf, NULL, NULL);
   14870:	4602      	mov	r2, r0
   14872:	4631      	mov	r1, r6
   14874:	4628      	mov	r0, r5
   14876:	f00a ff1b 	bl	1f6b0 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1487a:	1d28      	adds	r0, r5, #4
   1487c:	4621      	mov	r1, r4
   1487e:	f00a fee5 	bl	1f64c <atomic_clear_bit>
	return 0;
   14882:	4620      	mov	r0, r4
   14884:	e7ef      	b.n	14866 <smp_send_pairing_confirm+0x7e>
   14886:	bf00      	nop
   14888:	20009f3c 	.word	0x20009f3c
   1488c:	00025da7 	.word	0x00025da7
   14890:	000262fa 	.word	0x000262fa
   14894:	00022828 	.word	0x00022828

00014898 <smp_public_key_periph>:
{
   14898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1489c:	4604      	mov	r4, r0
   1489e:	af00      	add	r7, sp, #0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   148a0:	f7ff fe10 	bl	144c4 <latch_auth_cb>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   148a4:	1d25      	adds	r5, r4, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   148a6:	4606      	mov	r6, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   148a8:	210e      	movs	r1, #14
   148aa:	4628      	mov	r0, r5
   148ac:	f00a fea7 	bl	1f5fe <atomic_test_bit>
   148b0:	b9c8      	cbnz	r0, 148e6 <smp_public_key_periph+0x4e>
	    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   148b2:	4b56      	ldr	r3, [pc, #344]	; (14a0c <smp_public_key_periph+0x174>)
   148b4:	2220      	movs	r2, #32
   148b6:	6819      	ldr	r1, [r3, #0]
   148b8:	f104 0057 	add.w	r0, r4, #87	; 0x57
   148bc:	f00d f8d7 	bl	21a6e <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   148c0:	b988      	cbnz	r0, 148e6 <smp_public_key_periph+0x4e>
		BT_WARN("Remote public key rejected");
   148c2:	466c      	mov	r4, sp
   148c4:	b088      	sub	sp, #32
   148c6:	466a      	mov	r2, sp
   148c8:	4b51      	ldr	r3, [pc, #324]	; (14a10 <smp_public_key_periph+0x178>)
   148ca:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   148ce:	6153      	str	r3, [r2, #20]
   148d0:	4b50      	ldr	r3, [pc, #320]	; (14a14 <smp_public_key_periph+0x17c>)
   148d2:	6193      	str	r3, [r2, #24]
   148d4:	2303      	movs	r3, #3
   148d6:	f842 3f10 	str.w	r3, [r2, #16]!
		BT_ERR("Unknown pairing method (%u)", smp->method);
   148da:	484f      	ldr	r0, [pc, #316]	; (14a18 <smp_public_key_periph+0x180>)
   148dc:	f00a ff05 	bl	1f6ea <z_log_msg_static_create.constprop.0>
   148e0:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   148e2:	2008      	movs	r0, #8
   148e4:	e034      	b.n	14950 <smp_public_key_periph+0xb8>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   148e6:	210c      	movs	r1, #12
   148e8:	4620      	mov	r0, r4
   148ea:	f00a ff9f 	bl	1f82c <smp_create_pdu.constprop.0>
	if (!req_buf) {
   148ee:	4680      	mov	r8, r0
   148f0:	2800      	cmp	r0, #0
   148f2:	d0f6      	beq.n	148e2 <smp_public_key_periph+0x4a>
   148f4:	2140      	movs	r1, #64	; 0x40
   148f6:	3008      	adds	r0, #8
   148f8:	f00b fac8 	bl	1fe8c <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   148fc:	4b43      	ldr	r3, [pc, #268]	; (14a0c <smp_public_key_periph+0x174>)
   148fe:	4602      	mov	r2, r0
   14900:	681b      	ldr	r3, [r3, #0]
   14902:	4601      	mov	r1, r0
   14904:	f103 0020 	add.w	r0, r3, #32
   14908:	f853 cb04 	ldr.w	ip, [r3], #4
   1490c:	4283      	cmp	r3, r0
   1490e:	f841 cb04 	str.w	ip, [r1], #4
   14912:	d1f9      	bne.n	14908 <smp_public_key_periph+0x70>
   14914:	3220      	adds	r2, #32
   14916:	f103 0120 	add.w	r1, r3, #32
   1491a:	f853 0b04 	ldr.w	r0, [r3], #4
   1491e:	428b      	cmp	r3, r1
   14920:	f842 0b04 	str.w	r0, [r2], #4
   14924:	d1f9      	bne.n	1491a <smp_public_key_periph+0x82>
	smp_send(smp, req_buf, NULL, NULL);
   14926:	2200      	movs	r2, #0
   14928:	4641      	mov	r1, r8
   1492a:	4620      	mov	r0, r4
   1492c:	f00a fec0 	bl	1f6b0 <smp_send.constprop.0>
	switch (smp->method) {
   14930:	7a23      	ldrb	r3, [r4, #8]
   14932:	2b05      	cmp	r3, #5
   14934:	d859      	bhi.n	149ea <smp_public_key_periph+0x152>
   14936:	e8df f003 	tbb	[pc, r3]
   1493a:	3a03      	.short	0x3a03
   1493c:	5558030e 	.word	0x5558030e
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   14940:	2104      	movs	r1, #4
   14942:	4620      	mov	r0, r4
   14944:	f00a ff62 	bl	1f80c <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
   14948:	f7ff ff4e 	bl	147e8 <smp_send_pairing_confirm>
		if (err) {
   1494c:	2800      	cmp	r0, #0
   1494e:	d03d      	beq.n	149cc <smp_public_key_periph+0x134>
}
   14950:	46bd      	mov	sp, r7
   14952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   14956:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   14958:	f8d4 80ec 	ldr.w	r8, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1495c:	f7ff fdb2 	bl	144c4 <latch_auth_cb>
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   14960:	2104      	movs	r1, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   14962:	4606      	mov	r6, r0
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   14964:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   14968:	f7fc fbd0 	bl	1110c <bt_rand>
   1496c:	2800      	cmp	r0, #0
   1496e:	d1b8      	bne.n	148e2 <smp_public_key_periph+0x4a>
		smp->passkey %= 1000000;
   14970:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   14974:	4a29      	ldr	r2, [pc, #164]	; (14a1c <smp_public_key_periph+0x184>)
	smp->passkey_round = 0U;
   14976:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
		smp->passkey %= 1000000;
   1497a:	fbb3 f1f2 	udiv	r1, r3, r2
   1497e:	fb02 3311 	mls	r3, r2, r1, r3
   14982:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	if (smp_auth_cb && smp_auth_cb->passkey_display) {
   14986:	b156      	cbz	r6, 1499e <smp_public_key_periph+0x106>
   14988:	6833      	ldr	r3, [r6, #0]
   1498a:	b143      	cbz	r3, 1499e <smp_public_key_periph+0x106>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1498c:	210b      	movs	r1, #11
   1498e:	4628      	mov	r0, r5
   14990:	f00a ff3c 	bl	1f80c <atomic_set_bit>
		smp_auth_cb->passkey_display(conn, smp->passkey);
   14994:	4640      	mov	r0, r8
   14996:	6833      	ldr	r3, [r6, #0]
   14998:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   1499c:	4798      	blx	r3
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1499e:	2103      	movs	r1, #3
   149a0:	4620      	mov	r0, r4
   149a2:	f00a ff33 	bl	1f80c <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   149a6:	210e      	movs	r1, #14
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   149a8:	f00a ff30 	bl	1f80c <atomic_set_bit>
		break;
   149ac:	e00e      	b.n	149cc <smp_public_key_periph+0x134>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   149ae:	4620      	mov	r0, r4
   149b0:	2103      	movs	r1, #3
   149b2:	f00a ff2b 	bl	1f80c <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   149b6:	210e      	movs	r1, #14
   149b8:	f00a ff28 	bl	1f80c <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   149bc:	4628      	mov	r0, r5
   149be:	210a      	movs	r1, #10
   149c0:	f00a ff24 	bl	1f80c <atomic_set_bit>
		smp_auth_cb->passkey_entry(smp->chan.chan.conn);
   149c4:	6873      	ldr	r3, [r6, #4]
   149c6:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   149ca:	4798      	blx	r3
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   149cc:	4628      	mov	r0, r5
   149ce:	2107      	movs	r1, #7
   149d0:	f00a ff1c 	bl	1f80c <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   149d4:	2008      	movs	r0, #8
   149d6:	f7ff fd67 	bl	144a8 <smp_find>
   149da:	b9a0      	cbnz	r0, 14a06 <smp_public_key_periph+0x16e>
		return smp_dhkey_generate(smp);
   149dc:	4620      	mov	r0, r4
   149de:	f7ff fe45 	bl	1466c <smp_dhkey_generate>
   149e2:	e7b5      	b.n	14950 <smp_public_key_periph+0xb8>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   149e4:	2104      	movs	r1, #4
   149e6:	4620      	mov	r0, r4
   149e8:	e7de      	b.n	149a8 <smp_public_key_periph+0x110>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   149ea:	466c      	mov	r4, sp
   149ec:	b088      	sub	sp, #32
   149ee:	466a      	mov	r2, sp
   149f0:	490b      	ldr	r1, [pc, #44]	; (14a20 <smp_public_key_periph+0x188>)
   149f2:	6151      	str	r1, [r2, #20]
   149f4:	4907      	ldr	r1, [pc, #28]	; (14a14 <smp_public_key_periph+0x17c>)
	switch (smp->method) {
   149f6:	e9c2 1306 	strd	r1, r3, [r2, #24]
		BT_ERR("Unknown pairing method (%u)", smp->method);
   149fa:	2304      	movs	r3, #4
   149fc:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   14a00:	f842 3f10 	str.w	r3, [r2, #16]!
   14a04:	e769      	b.n	148da <smp_public_key_periph+0x42>
	return 0;
   14a06:	2000      	movs	r0, #0
   14a08:	e7a2      	b.n	14950 <smp_public_key_periph+0xb8>
   14a0a:	bf00      	nop
   14a0c:	20009f3c 	.word	0x20009f3c
   14a10:	00025dc7 	.word	0x00025dc7
   14a14:	00026264 	.word	0x00026264
   14a18:	00022828 	.word	0x00022828
   14a1c:	000f4240 	.word	0x000f4240
   14a20:	00025da7 	.word	0x00025da7

00014a24 <smp_public_key>:
{
   14a24:	b5b0      	push	{r4, r5, r7, lr}
   14a26:	4605      	mov	r5, r0
   14a28:	460c      	mov	r4, r1
   14a2a:	af00      	add	r7, sp, #0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   14a2c:	f7ff fd4a 	bl	144c4 <latch_auth_cb>
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   14a30:	f105 0057 	add.w	r0, r5, #87	; 0x57
   14a34:	4602      	mov	r2, r0
   14a36:	68a3      	ldr	r3, [r4, #8]
   14a38:	f103 0120 	add.w	r1, r3, #32
   14a3c:	f853 4b04 	ldr.w	r4, [r3], #4
   14a40:	428b      	cmp	r3, r1
   14a42:	f842 4b04 	str.w	r4, [r2], #4
   14a46:	d1f9      	bne.n	14a3c <smp_public_key+0x18>
   14a48:	f105 0277 	add.w	r2, r5, #119	; 0x77
   14a4c:	f103 0120 	add.w	r1, r3, #32
   14a50:	f853 4b04 	ldr.w	r4, [r3], #4
   14a54:	428b      	cmp	r3, r1
   14a56:	f842 4b04 	str.w	r4, [r2], #4
   14a5a:	d1f9      	bne.n	14a50 <smp_public_key+0x2c>
	if (bt_pub_key_is_debug(smp->pkey)) {
   14a5c:	f7fc fb74 	bl	11148 <bt_pub_key_is_debug>
   14a60:	b948      	cbnz	r0, 14a76 <smp_public_key+0x52>
	if (!sc_public_key) {
   14a62:	4b1e      	ldr	r3, [pc, #120]	; (14adc <smp_public_key+0xb8>)
   14a64:	681c      	ldr	r4, [r3, #0]
   14a66:	2c00      	cmp	r4, #0
   14a68:	d134      	bne.n	14ad4 <smp_public_key+0xb0>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   14a6a:	1d28      	adds	r0, r5, #4
   14a6c:	2106      	movs	r1, #6
   14a6e:	f00a fecd 	bl	1f80c <atomic_set_bit>
	return 0;
   14a72:	4620      	mov	r0, r4
		return 0;
   14a74:	e02c      	b.n	14ad0 <smp_public_key+0xac>
		BT_INFO("Remote is using Debug Public key");
   14a76:	466c      	mov	r4, sp
   14a78:	b088      	sub	sp, #32
   14a7a:	466a      	mov	r2, sp
   14a7c:	4b18      	ldr	r3, [pc, #96]	; (14ae0 <smp_public_key+0xbc>)
   14a7e:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
   14a82:	6153      	str	r3, [r2, #20]
   14a84:	4b17      	ldr	r3, [pc, #92]	; (14ae4 <smp_public_key+0xc0>)
   14a86:	4818      	ldr	r0, [pc, #96]	; (14ae8 <smp_public_key+0xc4>)
   14a88:	6193      	str	r3, [r2, #24]
   14a8a:	2303      	movs	r3, #3
   14a8c:	f842 3f10 	str.w	r3, [r2, #16]!
   14a90:	f00a fe2b 	bl	1f6ea <z_log_msg_static_create.constprop.0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   14a94:	210e      	movs	r1, #14
   14a96:	46a5      	mov	sp, r4
   14a98:	1d28      	adds	r0, r5, #4
   14a9a:	f00a feb7 	bl	1f80c <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   14a9e:	f8d5 40ec 	ldr.w	r4, [r5, #236]	; 0xec
	if (!conn->le.keys) {
   14aa2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   14aa6:	b933      	cbnz	r3, 14ab6 <smp_public_key+0x92>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   14aa8:	7a20      	ldrb	r0, [r4, #8]
   14aaa:	f104 0188 	add.w	r1, r4, #136	; 0x88
   14aae:	f001 fad3 	bl	16058 <bt_keys_get_addr>
   14ab2:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys ||
   14ab6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   14aba:	2b00      	cmp	r3, #0
   14abc:	d0d1      	beq.n	14a62 <smp_public_key+0x3e>
   14abe:	89da      	ldrh	r2, [r3, #14]
   14ac0:	f002 0224 	and.w	r2, r2, #36	; 0x24
   14ac4:	2a00      	cmp	r2, #0
   14ac6:	d0cc      	beq.n	14a62 <smp_public_key+0x3e>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   14ac8:	7b5b      	ldrb	r3, [r3, #13]
   14aca:	079b      	lsls	r3, r3, #30
   14acc:	d4c9      	bmi.n	14a62 <smp_public_key+0x3e>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   14ace:	2003      	movs	r0, #3
}
   14ad0:	46bd      	mov	sp, r7
   14ad2:	bdb0      	pop	{r4, r5, r7, pc}
	err = smp_public_key_periph(smp);
   14ad4:	4628      	mov	r0, r5
   14ad6:	f7ff fedf 	bl	14898 <smp_public_key_periph>
	if (err) {
   14ada:	e7f9      	b.n	14ad0 <smp_public_key+0xac>
   14adc:	20009f3c 	.word	0x20009f3c
   14ae0:	00025de6 	.word	0x00025de6
   14ae4:	0002627a 	.word	0x0002627a
   14ae8:	00022828 	.word	0x00022828

00014aec <smp_pairing_req>:
{
   14aec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14af0:	b083      	sub	sp, #12
   14af2:	460d      	mov	r5, r1
   14af4:	af00      	add	r7, sp, #0
   14af6:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   14af8:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   14afc:	f7ff fce2 	bl	144c4 <latch_auth_cb>
	struct bt_smp_pairing *req = (void *)buf->data;
   14b00:	f8d5 9008 	ldr.w	r9, [r5, #8]
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   14b04:	4680      	mov	r8, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   14b06:	f899 3003 	ldrb.w	r3, [r9, #3]
   14b0a:	3b07      	subs	r3, #7
   14b0c:	2b09      	cmp	r3, #9
   14b0e:	d904      	bls.n	14b1a <smp_pairing_req+0x2e>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   14b10:	2006      	movs	r0, #6
}
   14b12:	370c      	adds	r7, #12
   14b14:	46bd      	mov	sp, r7
   14b16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   14b1a:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
   14b1e:	b15b      	cbz	r3, 14b38 <smp_pairing_req+0x4c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   14b20:	1d25      	adds	r5, r4, #4
   14b22:	210f      	movs	r1, #15
   14b24:	4628      	mov	r0, r5
   14b26:	f00a fd6a 	bl	1f5fe <atomic_test_bit>
   14b2a:	b980      	cbnz	r0, 14b4e <smp_pairing_req+0x62>
		int ret = smp_init(smp);
   14b2c:	4620      	mov	r0, r4
   14b2e:	f7ff fd81 	bl	14634 <smp_init>
		if (ret) {
   14b32:	b160      	cbz	r0, 14b4e <smp_pairing_req+0x62>
			return ret;
   14b34:	b2c0      	uxtb	r0, r0
   14b36:	e7ec      	b.n	14b12 <smp_pairing_req+0x26>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   14b38:	7a30      	ldrb	r0, [r6, #8]
   14b3a:	f106 0188 	add.w	r1, r6, #136	; 0x88
   14b3e:	f001 fa8b 	bl	16058 <bt_keys_get_addr>
   14b42:	f8c6 00b4 	str.w	r0, [r6, #180]	; 0xb4
		if (!conn->le.keys) {
   14b46:	2800      	cmp	r0, #0
   14b48:	d1ea      	bne.n	14b20 <smp_pairing_req+0x34>
			return BT_SMP_ERR_UNSPECIFIED;
   14b4a:	2008      	movs	r0, #8
   14b4c:	e7e1      	b.n	14b12 <smp_pairing_req+0x26>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   14b4e:	2301      	movs	r3, #1
   14b50:	7263      	strb	r3, [r4, #9]
   14b52:	f8d9 3000 	ldr.w	r3, [r9]
	rsp->auth_req = get_auth(smp, req->auth_req);
   14b56:	4620      	mov	r0, r4
   14b58:	f8c4 300a 	str.w	r3, [r4, #10]
   14b5c:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   14b60:	81e3      	strh	r3, [r4, #14]
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   14b62:	2302      	movs	r3, #2
   14b64:	7423      	strb	r3, [r4, #16]
	rsp->auth_req = get_auth(smp, req->auth_req);
   14b66:	f899 1002 	ldrb.w	r1, [r9, #2]
   14b6a:	f7ff fce7 	bl	1453c <get_auth>
   14b6e:	74e0      	strb	r0, [r4, #19]
	rsp->io_capability = get_io_capa(smp);
   14b70:	4620      	mov	r0, r4
   14b72:	f7ff fcbd 	bl	144f0 <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   14b76:	4ba8      	ldr	r3, [pc, #672]	; (14e18 <smp_pairing_req+0x32c>)
	rsp->io_capability = get_io_capa(smp);
   14b78:	7460      	strb	r0, [r4, #17]
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   14b7a:	781b      	ldrb	r3, [r3, #0]
   14b7c:	74a3      	strb	r3, [r4, #18]
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   14b7e:	2310      	movs	r3, #16
   14b80:	7523      	strb	r3, [r4, #20]
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
   14b82:	f899 3004 	ldrb.w	r3, [r9, #4]
   14b86:	f003 0303 	and.w	r3, r3, #3
   14b8a:	7563      	strb	r3, [r4, #21]
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   14b8c:	f899 3005 	ldrb.w	r3, [r9, #5]
   14b90:	f003 0301 	and.w	r3, r3, #1
   14b94:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   14b96:	7ce3      	ldrb	r3, [r4, #19]
   14b98:	071b      	lsls	r3, r3, #28
   14b9a:	d50d      	bpl.n	14bb8 <smp_pairing_req+0xcc>
   14b9c:	f899 3002 	ldrb.w	r3, [r9, #2]
   14ba0:	0718      	lsls	r0, r3, #28
   14ba2:	d509      	bpl.n	14bb8 <smp_pairing_req+0xcc>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   14ba4:	2105      	movs	r1, #5
   14ba6:	4628      	mov	r0, r5
   14ba8:	f00a fe30 	bl	1f80c <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
   14bac:	7d63      	ldrb	r3, [r4, #21]
   14bae:	f003 0302 	and.w	r3, r3, #2
   14bb2:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist &= SEND_KEYS_SC;
   14bb4:	2300      	movs	r3, #0
   14bb6:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   14bb8:	7ce3      	ldrb	r3, [r4, #19]
   14bba:	0699      	lsls	r1, r3, #26
   14bbc:	d507      	bpl.n	14bce <smp_pairing_req+0xe2>
   14bbe:	f899 3002 	ldrb.w	r3, [r9, #2]
   14bc2:	069a      	lsls	r2, r3, #26
   14bc4:	d503      	bpl.n	14bce <smp_pairing_req+0xe2>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   14bc6:	2114      	movs	r1, #20
   14bc8:	4628      	mov	r0, r5
   14bca:	f00a fe1f 	bl	1f80c <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
   14bce:	7da3      	ldrb	r3, [r4, #22]
   14bd0:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist = rsp->init_key_dist;
   14bd4:	7d63      	ldrb	r3, [r4, #21]
   14bd6:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   14bda:	7ce3      	ldrb	r3, [r4, #19]
   14bdc:	07db      	lsls	r3, r3, #31
   14bde:	d507      	bpl.n	14bf0 <smp_pairing_req+0x104>
   14be0:	f899 3002 	ldrb.w	r3, [r9, #2]
   14be4:	07d8      	lsls	r0, r3, #31
   14be6:	d503      	bpl.n	14bf0 <smp_pairing_req+0x104>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   14be8:	210d      	movs	r1, #13
   14bea:	4628      	mov	r0, r5
   14bec:	f00a fe0e 	bl	1f80c <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   14bf0:	2103      	movs	r1, #3
   14bf2:	4628      	mov	r0, r5
   14bf4:	f00a fe0a 	bl	1f80c <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   14bf8:	2105      	movs	r1, #5
	smp->method = get_pair_method(smp, req->io_capability);
   14bfa:	f899 9000 	ldrb.w	r9, [r9]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   14bfe:	f00a fcfe 	bl	1f5fe <atomic_test_bit>
   14c02:	bb40      	cbnz	r0, 14c56 <smp_pairing_req+0x16a>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   14c04:	f1b9 0f04 	cmp.w	r9, #4
   14c08:	d845      	bhi.n	14c96 <smp_pairing_req+0x1aa>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   14c0a:	7ae3      	ldrb	r3, [r4, #11]
   14c0c:	7ca2      	ldrb	r2, [r4, #18]
   14c0e:	4013      	ands	r3, r2
   14c10:	07d9      	lsls	r1, r3, #31
   14c12:	d43e      	bmi.n	14c92 <smp_pairing_req+0x1a6>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   14c14:	7b21      	ldrb	r1, [r4, #12]
   14c16:	7ce3      	ldrb	r3, [r4, #19]
   14c18:	4319      	orrs	r1, r3
   14c1a:	f011 0104 	ands.w	r1, r1, #4
   14c1e:	d011      	beq.n	14c44 <smp_pairing_req+0x158>
	method = gen_method_legacy[remote_io][get_io_capa(smp)];
   14c20:	4620      	mov	r0, r4
   14c22:	f7ff fc65 	bl	144f0 <get_io_capa>
   14c26:	4b7d      	ldr	r3, [pc, #500]	; (14e1c <smp_pairing_req+0x330>)
   14c28:	eb09 0989 	add.w	r9, r9, r9, lsl #2
   14c2c:	4499      	add	r9, r3
   14c2e:	f819 1000 	ldrb.w	r1, [r9, r0]
	if (method == PASSKEY_ROLE) {
   14c32:	2904      	cmp	r1, #4
   14c34:	d106      	bne.n	14c44 <smp_pairing_req+0x158>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   14c36:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   14c3a:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_DISPLAY;
   14c3c:	2b00      	cmp	r3, #0
   14c3e:	bf14      	ite	ne
   14c40:	2101      	movne	r1, #1
   14c42:	2102      	moveq	r1, #2
	smp->method = get_pair_method(smp, req->io_capability);
   14c44:	7221      	strb	r1, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   14c46:	4620      	mov	r0, r4
   14c48:	f8d6 10b4 	ldr.w	r1, [r6, #180]	; 0xb4
   14c4c:	f00a fcdd 	bl	1f60a <update_keys_check>
   14c50:	bb18      	cbnz	r0, 14c9a <smp_pairing_req+0x1ae>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   14c52:	2003      	movs	r0, #3
   14c54:	e75d      	b.n	14b12 <smp_pairing_req+0x26>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   14c56:	7b23      	ldrb	r3, [r4, #12]
   14c58:	7ce0      	ldrb	r0, [r4, #19]
   14c5a:	ea03 0200 	and.w	r2, r3, r0
   14c5e:	0712      	lsls	r2, r2, #28
   14c60:	d506      	bpl.n	14c70 <smp_pairing_req+0x184>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   14c62:	7ae2      	ldrb	r2, [r4, #11]
   14c64:	f894 c012 	ldrb.w	ip, [r4, #18]
   14c68:	ea42 020c 	orr.w	r2, r2, ip
   14c6c:	07d2      	lsls	r2, r2, #31
   14c6e:	d4e9      	bmi.n	14c44 <smp_pairing_req+0x158>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   14c70:	f1b9 0f04 	cmp.w	r9, #4
   14c74:	d80f      	bhi.n	14c96 <smp_pairing_req+0x1aa>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   14c76:	ea43 0100 	orr.w	r1, r3, r0
   14c7a:	f011 0104 	ands.w	r1, r1, #4
   14c7e:	d0e1      	beq.n	14c44 <smp_pairing_req+0x158>
	return gen_method_sc[remote_io][get_io_capa(smp)];
   14c80:	4620      	mov	r0, r4
   14c82:	f7ff fc35 	bl	144f0 <get_io_capa>
   14c86:	4b66      	ldr	r3, [pc, #408]	; (14e20 <smp_pairing_req+0x334>)
   14c88:	eb09 0989 	add.w	r9, r9, r9, lsl #2
   14c8c:	444b      	add	r3, r9
   14c8e:	5c19      	ldrb	r1, [r3, r0]
   14c90:	e7d8      	b.n	14c44 <smp_pairing_req+0x158>
		return LEGACY_OOB;
   14c92:	2106      	movs	r1, #6
   14c94:	e7d6      	b.n	14c44 <smp_pairing_req+0x158>
		return JUST_WORKS;
   14c96:	2100      	movs	r1, #0
   14c98:	e7d4      	b.n	14c44 <smp_pairing_req+0x158>
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   14c9a:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   14c9e:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
   14ca0:	2b03      	cmp	r3, #3
   14ca2:	d043      	beq.n	14d2c <smp_pairing_req+0x240>
   14ca4:	d831      	bhi.n	14d0a <smp_pairing_req+0x21e>
   14ca6:	3b01      	subs	r3, #1
   14ca8:	2b01      	cmp	r3, #1
   14caa:	f63f af4e 	bhi.w	14b4a <smp_pairing_req+0x5e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   14cae:	2105      	movs	r1, #5
   14cb0:	4628      	mov	r0, r5
   14cb2:	f00a fca4 	bl	1f5fe <atomic_test_bit>
   14cb6:	2800      	cmp	r0, #0
   14cb8:	f040 80c8 	bne.w	14e4c <smp_pairing_req+0x360>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   14cbc:	4620      	mov	r0, r4
   14cbe:	f7ff fc01 	bl	144c4 <latch_auth_cb>
   14cc2:	4680      	mov	r8, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   14cc4:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   14cc6:	f8d4 90ec 	ldr.w	r9, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   14cca:	f7ff fbfb 	bl	144c4 <latch_auth_cb>
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   14cce:	f109 0188 	add.w	r1, r9, #136	; 0x88
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   14cd2:	4606      	mov	r6, r0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   14cd4:	f899 0008 	ldrb.w	r0, [r9, #8]
   14cd8:	f001 fa5e 	bl	16198 <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   14cdc:	7a23      	ldrb	r3, [r4, #8]
   14cde:	b348      	cbz	r0, 14d34 <smp_pairing_req+0x248>
   14ce0:	7b42      	ldrb	r2, [r0, #13]
   14ce2:	07d2      	lsls	r2, r2, #31
   14ce4:	d526      	bpl.n	14d34 <smp_pairing_req+0x248>
   14ce6:	bb2b      	cbnz	r3, 14d34 <smp_pairing_req+0x248>
		BT_ERR("JustWorks failed, authenticated keys present");
   14ce8:	466c      	mov	r4, sp
   14cea:	b088      	sub	sp, #32
   14cec:	466a      	mov	r2, sp
   14cee:	4b4d      	ldr	r3, [pc, #308]	; (14e24 <smp_pairing_req+0x338>)
   14cf0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14cf4:	6153      	str	r3, [r2, #20]
   14cf6:	4b4c      	ldr	r3, [pc, #304]	; (14e28 <smp_pairing_req+0x33c>)
   14cf8:	6193      	str	r3, [r2, #24]
   14cfa:	2303      	movs	r3, #3
   14cfc:	f842 3f10 	str.w	r3, [r2, #16]!
		BT_ERR("Unknown pairing method (%u)", smp->method);
   14d00:	484a      	ldr	r0, [pc, #296]	; (14e2c <smp_pairing_req+0x340>)
   14d02:	f00a fcf2 	bl	1f6ea <z_log_msg_static_create.constprop.0>
   14d06:	46a5      	mov	sp, r4
	if (ret) {
   14d08:	e71f      	b.n	14b4a <smp_pairing_req+0x5e>
	switch (sec) {
   14d0a:	2b04      	cmp	r3, #4
   14d0c:	f47f af1d 	bne.w	14b4a <smp_pairing_req+0x5e>
	return MIN(req->max_key_size, rsp->max_key_size);
   14d10:	7d23      	ldrb	r3, [r4, #20]
   14d12:	7b62      	ldrb	r2, [r4, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   14d14:	4293      	cmp	r3, r2
   14d16:	bf28      	it	cs
   14d18:	4613      	movcs	r3, r2
   14d1a:	2b10      	cmp	r3, #16
   14d1c:	f47f aef8 	bne.w	14b10 <smp_pairing_req+0x24>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   14d20:	2105      	movs	r1, #5
   14d22:	4628      	mov	r0, r5
   14d24:	f00a fc6b 	bl	1f5fe <atomic_test_bit>
   14d28:	2800      	cmp	r0, #0
   14d2a:	d092      	beq.n	14c52 <smp_pairing_req+0x166>
		if (smp->method == JUST_WORKS) {
   14d2c:	7a23      	ldrb	r3, [r4, #8]
   14d2e:	2b00      	cmp	r3, #0
   14d30:	d1bd      	bne.n	14cae <smp_pairing_req+0x1c2>
   14d32:	e78e      	b.n	14c52 <smp_pairing_req+0x166>
	switch (smp->method) {
   14d34:	2b06      	cmp	r3, #6
   14d36:	d85f      	bhi.n	14df8 <smp_pairing_req+0x30c>
   14d38:	e8df f003 	tbb	[pc, r3]
   14d3c:	5e2f5617 	.word	0x5e2f5617
   14d40:	5e5e      	.short	0x5e5e
   14d42:	04          	.byte	0x04
   14d43:	00          	.byte	0x00
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   14d44:	2e00      	cmp	r6, #0
   14d46:	d065      	beq.n	14e14 <smp_pairing_req+0x328>
   14d48:	68f3      	ldr	r3, [r6, #12]
   14d4a:	2b00      	cmp	r3, #0
   14d4c:	d062      	beq.n	14e14 <smp_pairing_req+0x328>
			struct bt_conn_oob_info info = {
   14d4e:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   14d50:	210a      	movs	r1, #10
   14d52:	4628      	mov	r0, r5
			struct bt_conn_oob_info info = {
   14d54:	80bb      	strh	r3, [r7, #4]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   14d56:	f00a fd59 	bl	1f80c <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   14d5a:	68f3      	ldr	r3, [r6, #12]
   14d5c:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   14d60:	1d39      	adds	r1, r7, #4
   14d62:	4798      	blx	r3
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   14d64:	7a23      	ldrb	r3, [r4, #8]
   14d66:	2b00      	cmp	r3, #0
   14d68:	d166      	bne.n	14e38 <smp_pairing_req+0x34c>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   14d6a:	210f      	movs	r1, #15
   14d6c:	4628      	mov	r0, r5
   14d6e:	f00a fc46 	bl	1f5fe <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   14d72:	2800      	cmp	r0, #0
   14d74:	d160      	bne.n	14e38 <smp_pairing_req+0x34c>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   14d76:	f1b8 0f00 	cmp.w	r8, #0
   14d7a:	d05d      	beq.n	14e38 <smp_pairing_req+0x34c>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   14d7c:	f8d8 3014 	ldr.w	r3, [r8, #20]
   14d80:	2b00      	cmp	r3, #0
   14d82:	d059      	beq.n	14e38 <smp_pairing_req+0x34c>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   14d84:	4628      	mov	r0, r5
   14d86:	210a      	movs	r1, #10
   14d88:	f00a fd40 	bl	1f80c <atomic_set_bit>
		smp_auth_cb->pairing_confirm(smp->chan.chan.conn);
   14d8c:	f8d8 3014 	ldr.w	r3, [r8, #20]
   14d90:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
		smp_auth_cb->pairing_confirm(conn);
   14d94:	4798      	blx	r3
		return 0;
   14d96:	2000      	movs	r0, #0
   14d98:	e6bb      	b.n	14b12 <smp_pairing_req+0x26>
			if (bt_rand(&passkey, sizeof(passkey))) {
   14d9a:	2104      	movs	r1, #4
   14d9c:	1878      	adds	r0, r7, r1
   14d9e:	f7fc f9b5 	bl	1110c <bt_rand>
   14da2:	2800      	cmp	r0, #0
   14da4:	f47f aed1 	bne.w	14b4a <smp_pairing_req+0x5e>
			passkey %= 1000000;
   14da8:	687b      	ldr	r3, [r7, #4]
   14daa:	4a21      	ldr	r2, [pc, #132]	; (14e30 <smp_pairing_req+0x344>)
   14dac:	fbb3 f1f2 	udiv	r1, r3, r2
   14db0:	fb02 3311 	mls	r3, r2, r1, r3
   14db4:	607b      	str	r3, [r7, #4]
		if (smp_auth_cb && smp_auth_cb->passkey_display) {
   14db6:	b14e      	cbz	r6, 14dcc <smp_pairing_req+0x2e0>
   14db8:	6833      	ldr	r3, [r6, #0]
   14dba:	b13b      	cbz	r3, 14dcc <smp_pairing_req+0x2e0>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   14dbc:	210b      	movs	r1, #11
   14dbe:	4628      	mov	r0, r5
   14dc0:	f00a fd24 	bl	1f80c <atomic_set_bit>
			smp_auth_cb->passkey_display(conn, passkey);
   14dc4:	4648      	mov	r0, r9
   14dc6:	6833      	ldr	r3, [r6, #0]
   14dc8:	6879      	ldr	r1, [r7, #4]
   14dca:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   14dcc:	687b      	ldr	r3, [r7, #4]
	dst[1] = val >> 8;
   14dce:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
   14dd2:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	sys_put_le16(val >> 16, &dst[2]);
   14dd6:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   14dd8:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	dst[1] = val >> 8;
   14ddc:	0a1b      	lsrs	r3, r3, #8
   14dde:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
   14de2:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	if (ret) {
   14de6:	e7bd      	b.n	14d64 <smp_pairing_req+0x278>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   14de8:	4628      	mov	r0, r5
   14dea:	210a      	movs	r1, #10
   14dec:	f00a fd0e 	bl	1f80c <atomic_set_bit>
		smp_auth_cb->passkey_entry(conn);
   14df0:	4648      	mov	r0, r9
   14df2:	6873      	ldr	r3, [r6, #4]
   14df4:	4798      	blx	r3
	if (ret) {
   14df6:	e7b5      	b.n	14d64 <smp_pairing_req+0x278>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   14df8:	466c      	mov	r4, sp
   14dfa:	b088      	sub	sp, #32
   14dfc:	466a      	mov	r2, sp
   14dfe:	490d      	ldr	r1, [pc, #52]	; (14e34 <smp_pairing_req+0x348>)
   14e00:	6151      	str	r1, [r2, #20]
   14e02:	4909      	ldr	r1, [pc, #36]	; (14e28 <smp_pairing_req+0x33c>)
	switch (smp->method) {
   14e04:	e9c2 1306 	strd	r1, r3, [r2, #24]
		BT_ERR("Unknown pairing method (%u)", smp->method);
   14e08:	2304      	movs	r3, #4
   14e0a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   14e0e:	f842 3f10 	str.w	r3, [r2, #16]!
   14e12:	e775      	b.n	14d00 <smp_pairing_req+0x214>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   14e14:	2002      	movs	r0, #2
   14e16:	e67c      	b.n	14b12 <smp_pairing_req+0x26>
   14e18:	2000a293 	.word	0x2000a293
   14e1c:	00026339 	.word	0x00026339
   14e20:	00026320 	.word	0x00026320
   14e24:	00025e0b 	.word	0x00025e0b
   14e28:	00026181 	.word	0x00026181
   14e2c:	00022828 	.word	0x00022828
   14e30:	000f4240 	.word	0x000f4240
   14e34:	00025da7 	.word	0x00025da7
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   14e38:	2103      	movs	r1, #3
   14e3a:	4620      	mov	r0, r4
   14e3c:	f00a fce6 	bl	1f80c <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   14e40:	210e      	movs	r1, #14
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   14e42:	f00a fce3 	bl	1f80c <atomic_set_bit>
	return send_pairing_rsp(smp);
   14e46:	f00a fd10 	bl	1f86a <send_pairing_rsp>
   14e4a:	e662      	b.n	14b12 <smp_pairing_req+0x26>
	if (!IS_ENABLED(CONFIG_BT_SMP_SC_PAIR_ONLY) &&
   14e4c:	7a23      	ldrb	r3, [r4, #8]
   14e4e:	b993      	cbnz	r3, 14e76 <smp_pairing_req+0x38a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   14e50:	210f      	movs	r1, #15
   14e52:	4628      	mov	r0, r5
   14e54:	f00a fbd3 	bl	1f5fe <atomic_test_bit>
	    (DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   14e58:	b968      	cbnz	r0, 14e76 <smp_pairing_req+0x38a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   14e5a:	f1b8 0f00 	cmp.w	r8, #0
   14e5e:	d00a      	beq.n	14e76 <smp_pairing_req+0x38a>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   14e60:	f8d8 3014 	ldr.w	r3, [r8, #20]
   14e64:	b13b      	cbz	r3, 14e76 <smp_pairing_req+0x38a>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   14e66:	4628      	mov	r0, r5
   14e68:	210a      	movs	r1, #10
   14e6a:	f00a fccf 	bl	1f80c <atomic_set_bit>
		smp_auth_cb->pairing_confirm(conn);
   14e6e:	4630      	mov	r0, r6
   14e70:	f8d8 3014 	ldr.w	r3, [r8, #20]
   14e74:	e78e      	b.n	14d94 <smp_pairing_req+0x2a8>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   14e76:	210c      	movs	r1, #12
   14e78:	4620      	mov	r0, r4
   14e7a:	e7e2      	b.n	14e42 <smp_pairing_req+0x356>

00014e7c <compute_and_check_and_send_periph_dhcheck>:
{
   14e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e80:	4604      	mov	r4, r0
   14e82:	b0a3      	sub	sp, #140	; 0x8c
   14e84:	af04      	add	r7, sp, #16
	(void)memset(r, 0, sizeof(r));
   14e86:	2210      	movs	r2, #16
   14e88:	2100      	movs	r1, #0
   14e8a:	4638      	mov	r0, r7
   14e8c:	f00c fe0c 	bl	21aa8 <memset>
	switch (smp->method) {
   14e90:	7a23      	ldrb	r3, [r4, #8]
   14e92:	2b05      	cmp	r3, #5
   14e94:	d849      	bhi.n	14f2a <compute_and_check_and_send_periph_dhcheck+0xae>
   14e96:	e8df f003 	tbb	[pc, r3]
   14e9a:	0306      	.short	0x0306
   14e9c:	38480603 	.word	0x38480603
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   14ea0:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   14ea4:	603b      	str	r3, [r7, #0]
	uint8_t m[53] = { 0x00, /* counter */
   14ea6:	f107 0240 	add.w	r2, r7, #64	; 0x40
   14eaa:	4615      	mov	r5, r2
   14eac:	4b85      	ldr	r3, [pc, #532]	; (150c4 <compute_and_check_and_send_periph_dhcheck+0x248>)
		   &smp->chan.chan.conn->le.init_addr,
   14eae:	f8d4 b0ec 	ldr.w	fp, [r4, #236]	; 0xec
	uint8_t m[53] = { 0x00, /* counter */
   14eb2:	f103 0c30 	add.w	ip, r3, #48	; 0x30
   14eb6:	4616      	mov	r6, r2
   14eb8:	6818      	ldr	r0, [r3, #0]
   14eba:	6859      	ldr	r1, [r3, #4]
   14ebc:	3308      	adds	r3, #8
   14ebe:	c603      	stmia	r6!, {r0, r1}
   14ec0:	4563      	cmp	r3, ip
   14ec2:	4632      	mov	r2, r6
   14ec4:	d1f7      	bne.n	14eb6 <compute_and_check_and_send_periph_dhcheck+0x3a>
   14ec6:	6818      	ldr	r0, [r3, #0]
   14ec8:	791b      	ldrb	r3, [r3, #4]
   14eca:	6030      	str	r0, [r6, #0]
   14ecc:	7133      	strb	r3, [r6, #4]
	sys_memcpy_swap(ws, w, 32);
   14ece:	f107 0620 	add.w	r6, r7, #32
   14ed2:	2220      	movs	r2, #32
   14ed4:	4630      	mov	r0, r6
   14ed6:	f104 0197 	add.w	r1, r4, #151	; 0x97
   14eda:	f00a fb84 	bl	1f5e6 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
   14ede:	2220      	movs	r2, #32
   14ee0:	4631      	mov	r1, r6
   14ee2:	4879      	ldr	r0, [pc, #484]	; (150c8 <compute_and_check_and_send_periph_dhcheck+0x24c>)
   14ee4:	f107 0310 	add.w	r3, r7, #16
   14ee8:	f00a fbbb 	bl	1f662 <bt_smp_aes_cmac>
	if (err) {
   14eec:	2800      	cmp	r0, #0
   14eee:	d032      	beq.n	14f56 <compute_and_check_and_send_periph_dhcheck+0xda>
		BT_ERR("Calculate LTK failed");
   14ef0:	466c      	mov	r4, sp
   14ef2:	b088      	sub	sp, #32
   14ef4:	aa04      	add	r2, sp, #16
   14ef6:	4b75      	ldr	r3, [pc, #468]	; (150cc <compute_and_check_and_send_periph_dhcheck+0x250>)
   14ef8:	6153      	str	r3, [r2, #20]
   14efa:	4b75      	ldr	r3, [pc, #468]	; (150d0 <compute_and_check_and_send_periph_dhcheck+0x254>)
   14efc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14f00:	6193      	str	r3, [r2, #24]
   14f02:	2303      	movs	r3, #3
   14f04:	f842 3f10 	str.w	r3, [r2, #16]!
   14f08:	e01c      	b.n	14f44 <compute_and_check_and_send_periph_dhcheck+0xc8>
		if (smp->oobd_remote) {
   14f0a:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
   14f0e:	2b00      	cmp	r3, #0
   14f10:	d0c9      	beq.n	14ea6 <compute_and_check_and_send_periph_dhcheck+0x2a>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   14f12:	463d      	mov	r5, r7
   14f14:	f103 0610 	add.w	r6, r3, #16
   14f18:	462a      	mov	r2, r5
   14f1a:	6818      	ldr	r0, [r3, #0]
   14f1c:	6859      	ldr	r1, [r3, #4]
   14f1e:	3308      	adds	r3, #8
   14f20:	c203      	stmia	r2!, {r0, r1}
   14f22:	42b3      	cmp	r3, r6
   14f24:	4615      	mov	r5, r2
   14f26:	d1f7      	bne.n	14f18 <compute_and_check_and_send_periph_dhcheck+0x9c>
   14f28:	e7bd      	b.n	14ea6 <compute_and_check_and_send_periph_dhcheck+0x2a>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   14f2a:	466c      	mov	r4, sp
   14f2c:	b088      	sub	sp, #32
   14f2e:	aa04      	add	r2, sp, #16
   14f30:	4968      	ldr	r1, [pc, #416]	; (150d4 <compute_and_check_and_send_periph_dhcheck+0x258>)
   14f32:	6151      	str	r1, [r2, #20]
   14f34:	4966      	ldr	r1, [pc, #408]	; (150d0 <compute_and_check_and_send_periph_dhcheck+0x254>)
	switch (smp->method) {
   14f36:	e9c2 1306 	strd	r1, r3, [r2, #24]
		BT_ERR("Unknown pairing method (%u)", smp->method);
   14f3a:	2304      	movs	r3, #4
   14f3c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   14f40:	f842 3f10 	str.w	r3, [r2, #16]!
		BT_ERR("Calculate LTK failed");
   14f44:	4864      	ldr	r0, [pc, #400]	; (150d8 <compute_and_check_and_send_periph_dhcheck+0x25c>)
   14f46:	f00a fbd0 	bl	1f6ea <z_log_msg_static_create.constprop.0>
   14f4a:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   14f4c:	2008      	movs	r0, #8
}
   14f4e:	377c      	adds	r7, #124	; 0x7c
   14f50:	46bd      	mov	sp, r7
   14f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   14f56:	f104 0937 	add.w	r9, r4, #55	; 0x37
	sys_memcpy_swap(m + 5, n1, 16);
   14f5a:	2210      	movs	r2, #16
   14f5c:	4649      	mov	r1, r9
   14f5e:	f107 0045 	add.w	r0, r7, #69	; 0x45
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   14f62:	f104 0a27 	add.w	sl, r4, #39	; 0x27
	sys_memcpy_swap(m + 5, n1, 16);
   14f66:	f00a fb3e 	bl	1f5e6 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   14f6a:	2210      	movs	r2, #16
   14f6c:	4651      	mov	r1, sl
   14f6e:	f107 0055 	add.w	r0, r7, #85	; 0x55
   14f72:	f00a fb38 	bl	1f5e6 <sys_memcpy_swap>
	m[37] = a1->type;
   14f76:	f89b 308f 	ldrb.w	r3, [fp, #143]	; 0x8f
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   14f7a:	2206      	movs	r2, #6
	m[37] = a1->type;
   14f7c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   14f80:	f10b 0190 	add.w	r1, fp, #144	; 0x90
   14f84:	f107 0066 	add.w	r0, r7, #102	; 0x66
   14f88:	f00a fb2d 	bl	1f5e6 <sys_memcpy_swap>
	m[44] = a2->type;
   14f8c:	f89b 3096 	ldrb.w	r3, [fp, #150]	; 0x96
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   14f90:	2206      	movs	r2, #6
	m[44] = a2->type;
   14f92:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   14f96:	f10b 0197 	add.w	r1, fp, #151	; 0x97
   14f9a:	f107 006d 	add.w	r0, r7, #109	; 0x6d
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   14f9e:	f104 08c7 	add.w	r8, r4, #199	; 0xc7
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   14fa2:	f00a fb20 	bl	1f5e6 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
   14fa6:	4643      	mov	r3, r8
   14fa8:	2235      	movs	r2, #53	; 0x35
   14faa:	4629      	mov	r1, r5
   14fac:	f107 0010 	add.w	r0, r7, #16
   14fb0:	f00a fb57 	bl	1f662 <bt_smp_aes_cmac>
	if (err) {
   14fb4:	2800      	cmp	r0, #0
   14fb6:	d19b      	bne.n	14ef0 <compute_and_check_and_send_periph_dhcheck+0x74>
	sys_mem_swap(mackey, 16);
   14fb8:	4640      	mov	r0, r8
   14fba:	f00a fba4 	bl	1f706 <sys_mem_swap.constprop.0>
	m[0] = 0x01;
   14fbe:	2301      	movs	r3, #1
		   smp->tk)) {
   14fc0:	f104 0b47 	add.w	fp, r4, #71	; 0x47
	m[0] = 0x01;
   14fc4:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
   14fc8:	2235      	movs	r2, #53	; 0x35
   14fca:	465b      	mov	r3, fp
   14fcc:	4629      	mov	r1, r5
   14fce:	f107 0010 	add.w	r0, r7, #16
   14fd2:	f00a fb46 	bl	1f662 <bt_smp_aes_cmac>
	if (err) {
   14fd6:	2800      	cmp	r0, #0
   14fd8:	d18a      	bne.n	14ef0 <compute_and_check_and_send_periph_dhcheck+0x74>
	sys_mem_swap(ltk, 16);
   14fda:	4658      	mov	r0, fp
   14fdc:	f00a fb93 	bl	1f706 <sys_mem_swap.constprop.0>
		   &smp->chan.chan.conn->le.resp_addr,
   14fe0:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   14fe4:	4651      	mov	r1, sl
		   &smp->chan.chan.conn->le.init_addr, e)) {
   14fe6:	f103 028f 	add.w	r2, r3, #143	; 0x8f
		   &smp->chan.chan.conn->le.resp_addr,
   14fea:	3396      	adds	r3, #150	; 0x96
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   14fec:	9301      	str	r3, [sp, #4]
   14fee:	f104 0311 	add.w	r3, r4, #17
   14ff2:	9202      	str	r2, [sp, #8]
   14ff4:	9300      	str	r3, [sp, #0]
   14ff6:	464a      	mov	r2, r9
   14ff8:	463b      	mov	r3, r7
   14ffa:	4640      	mov	r0, r8
   14ffc:	9503      	str	r5, [sp, #12]
   14ffe:	f00a fb90 	bl	1f722 <smp_f6>
   15002:	b120      	cbz	r0, 1500e <compute_and_check_and_send_periph_dhcheck+0x192>
		BT_ERR("Calculate local DHKey check failed");
   15004:	466c      	mov	r4, sp
   15006:	b088      	sub	sp, #32
   15008:	aa04      	add	r2, sp, #16
   1500a:	4b34      	ldr	r3, [pc, #208]	; (150dc <compute_and_check_and_send_periph_dhcheck+0x260>)
   1500c:	e774      	b.n	14ef8 <compute_and_check_and_send_periph_dhcheck+0x7c>
	if (smp->method == LE_SC_OOB) {
   1500e:	7a23      	ldrb	r3, [r4, #8]
   15010:	2b05      	cmp	r3, #5
   15012:	d10e      	bne.n	15032 <compute_and_check_and_send_periph_dhcheck+0x1b6>
		if (smp->oobd_local) {
   15014:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
   15018:	b311      	cbz	r1, 15060 <compute_and_check_and_send_periph_dhcheck+0x1e4>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   1501a:	460b      	mov	r3, r1
   1501c:	46bc      	mov	ip, r7
   1501e:	f101 0e10 	add.w	lr, r1, #16
   15022:	4662      	mov	r2, ip
   15024:	6818      	ldr	r0, [r3, #0]
   15026:	6859      	ldr	r1, [r3, #4]
   15028:	3308      	adds	r3, #8
   1502a:	c203      	stmia	r2!, {r0, r1}
   1502c:	4573      	cmp	r3, lr
   1502e:	4694      	mov	ip, r2
   15030:	d1f7      	bne.n	15022 <compute_and_check_and_send_periph_dhcheck+0x1a6>
		   &smp->chan.chan.conn->le.init_addr,
   15032:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   15036:	4649      	mov	r1, r9
		   &smp->chan.chan.conn->le.resp_addr, re)) {
   15038:	f103 0296 	add.w	r2, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
   1503c:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   1503e:	9301      	str	r3, [sp, #4]
   15040:	f104 030a 	add.w	r3, r4, #10
   15044:	9202      	str	r2, [sp, #8]
   15046:	9300      	str	r3, [sp, #0]
   15048:	4652      	mov	r2, sl
   1504a:	463b      	mov	r3, r7
   1504c:	4640      	mov	r0, r8
   1504e:	9603      	str	r6, [sp, #12]
   15050:	f00a fb67 	bl	1f722 <smp_f6>
   15054:	b148      	cbz	r0, 1506a <compute_and_check_and_send_periph_dhcheck+0x1ee>
		BT_ERR("Calculate remote DHKey check failed");
   15056:	466c      	mov	r4, sp
   15058:	b088      	sub	sp, #32
   1505a:	aa04      	add	r2, sp, #16
   1505c:	4b20      	ldr	r3, [pc, #128]	; (150e0 <compute_and_check_and_send_periph_dhcheck+0x264>)
   1505e:	e74b      	b.n	14ef8 <compute_and_check_and_send_periph_dhcheck+0x7c>
			memset(r, 0, sizeof(r));
   15060:	2210      	movs	r2, #16
   15062:	4638      	mov	r0, r7
   15064:	f00c fd20 	bl	21aa8 <memset>
   15068:	e7e3      	b.n	15032 <compute_and_check_and_send_periph_dhcheck+0x1b6>
	if (memcmp(smp->e, re, 16)) {
   1506a:	2210      	movs	r2, #16
   1506c:	4631      	mov	r1, r6
   1506e:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   15072:	f00c fcfc 	bl	21a6e <memcmp>
   15076:	bb10      	cbnz	r0, 150be <compute_and_check_and_send_periph_dhcheck+0x242>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   15078:	210d      	movs	r1, #13
   1507a:	4620      	mov	r0, r4
   1507c:	f00a fbd6 	bl	1f82c <smp_create_pdu.constprop.0>
	if (!buf) {
   15080:	4606      	mov	r6, r0
   15082:	2800      	cmp	r0, #0
   15084:	f43f af62 	beq.w	14f4c <compute_and_check_and_send_periph_dhcheck+0xd0>
   15088:	2110      	movs	r1, #16
   1508a:	3008      	adds	r0, #8
   1508c:	f00a fefe 	bl	1fe8c <net_buf_simple_add>
   15090:	4603      	mov	r3, r0
   15092:	f107 0c50 	add.w	ip, r7, #80	; 0x50
   15096:	462a      	mov	r2, r5
   15098:	ca03      	ldmia	r2!, {r0, r1}
   1509a:	4562      	cmp	r2, ip
   1509c:	6018      	str	r0, [r3, #0]
   1509e:	6059      	str	r1, [r3, #4]
   150a0:	4615      	mov	r5, r2
   150a2:	f103 0308 	add.w	r3, r3, #8
   150a6:	d1f6      	bne.n	15096 <compute_and_check_and_send_periph_dhcheck+0x21a>
	smp_send(smp, buf, NULL, NULL);
   150a8:	2200      	movs	r2, #0
   150aa:	4631      	mov	r1, r6
   150ac:	4620      	mov	r0, r4
   150ae:	f00a faff 	bl	1f6b0 <smp_send.constprop.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   150b2:	1d20      	adds	r0, r4, #4
   150b4:	2101      	movs	r1, #1
   150b6:	f00a fba9 	bl	1f80c <atomic_set_bit>
	return 0;
   150ba:	2000      	movs	r0, #0
   150bc:	e747      	b.n	14f4e <compute_and_check_and_send_periph_dhcheck+0xd2>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   150be:	200b      	movs	r0, #11
   150c0:	e745      	b.n	14f4e <compute_and_check_and_send_periph_dhcheck+0xd2>
   150c2:	bf00      	nop
   150c4:	0002295c 	.word	0x0002295c
   150c8:	000262b6 	.word	0x000262b6
   150cc:	00025e3c 	.word	0x00025e3c
   150d0:	000262c6 	.word	0x000262c6
   150d4:	00025da7 	.word	0x00025da7
   150d8:	00022828 	.word	0x00022828
   150dc:	00025e55 	.word	0x00025e55
   150e0:	00025e7c 	.word	0x00025e7c

000150e4 <bt_smp_connected>:
{
   150e4:	b538      	push	{r3, r4, r5, lr}
   150e6:	4604      	mov	r4, r0
	k_work_init_delayable(&smp->work, smp_timeout);
   150e8:	4908      	ldr	r1, [pc, #32]	; (1510c <bt_smp_connected+0x28>)
   150ea:	f1a0 05ec 	sub.w	r5, r0, #236	; 0xec
   150ee:	308c      	adds	r0, #140	; 0x8c
   150f0:	f00c f94d 	bl	2138e <k_work_init_delayable>
	smp_reset(smp);
   150f4:	4628      	mov	r0, r5
   150f6:	f00a fc32 	bl	1f95e <smp_reset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   150fa:	4b05      	ldr	r3, [pc, #20]	; (15110 <bt_smp_connected+0x2c>)
   150fc:	34bc      	adds	r4, #188	; 0xbc
   150fe:	e8d4 2fef 	ldaex	r2, [r4]
   15102:	e8c4 3fe1 	stlex	r1, r3, [r4]
   15106:	2900      	cmp	r1, #0
   15108:	d1f9      	bne.n	150fe <bt_smp_connected+0x1a>
}
   1510a:	bd38      	pop	{r3, r4, r5, pc}
   1510c:	00015e9d 	.word	0x00015e9d
   15110:	20009918 	.word	0x20009918

00015114 <smp_pairing_confirm>:
{
   15114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   15116:	1d06      	adds	r6, r0, #4
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   15118:	688d      	ldr	r5, [r1, #8]
{
   1511a:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1511c:	210b      	movs	r1, #11
   1511e:	4630      	mov	r0, r6
{
   15120:	af00      	add	r7, sp, #0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   15122:	f00a fa93 	bl	1f64c <atomic_clear_bit>
   15126:	462b      	mov	r3, r5
   15128:	f104 0217 	add.w	r2, r4, #23
   1512c:	f105 0110 	add.w	r1, r5, #16
   15130:	f853 0b04 	ldr.w	r0, [r3], #4
   15134:	428b      	cmp	r3, r1
   15136:	f842 0b04 	str.w	r0, [r2], #4
   1513a:	d1f9      	bne.n	15130 <smp_pairing_confirm+0x1c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1513c:	2105      	movs	r1, #5
   1513e:	4630      	mov	r0, r6
   15140:	f00a fa5d 	bl	1f5fe <atomic_test_bit>
   15144:	b920      	cbnz	r0, 15150 <smp_pairing_confirm+0x3c>
		return legacy_pairing_confirm(smp);
   15146:	4620      	mov	r0, r4
   15148:	f00a fc7f 	bl	1fa4a <legacy_pairing_confirm>
}
   1514c:	46bd      	mov	sp, r7
   1514e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (smp->method) {
   15150:	7a23      	ldrb	r3, [r4, #8]
   15152:	2b01      	cmp	r3, #1
   15154:	d008      	beq.n	15168 <smp_pairing_confirm+0x54>
   15156:	2b02      	cmp	r3, #2
   15158:	d112      	bne.n	15180 <smp_pairing_confirm+0x6c>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1515a:	2104      	movs	r1, #4
   1515c:	4620      	mov	r0, r4
   1515e:	f00a fb55 	bl	1f80c <atomic_set_bit>
		return smp_send_pairing_confirm(smp);
   15162:	f7ff fb41 	bl	147e8 <smp_send_pairing_confirm>
   15166:	e7f1      	b.n	1514c <smp_pairing_confirm+0x38>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   15168:	210a      	movs	r1, #10
   1516a:	4630      	mov	r0, r6
   1516c:	f00a fa47 	bl	1f5fe <atomic_test_bit>
   15170:	2800      	cmp	r0, #0
   15172:	d0f2      	beq.n	1515a <smp_pairing_confirm+0x46>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   15174:	4630      	mov	r0, r6
   15176:	2100      	movs	r1, #0
   15178:	f00a fb48 	bl	1f80c <atomic_set_bit>
			return 0;
   1517c:	2000      	movs	r0, #0
   1517e:	e7e5      	b.n	1514c <smp_pairing_confirm+0x38>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   15180:	466c      	mov	r4, sp
   15182:	b088      	sub	sp, #32
   15184:	466a      	mov	r2, sp
   15186:	4908      	ldr	r1, [pc, #32]	; (151a8 <smp_pairing_confirm+0x94>)
   15188:	4808      	ldr	r0, [pc, #32]	; (151ac <smp_pairing_confirm+0x98>)
   1518a:	6151      	str	r1, [r2, #20]
   1518c:	4908      	ldr	r1, [pc, #32]	; (151b0 <smp_pairing_confirm+0x9c>)
	switch (smp->method) {
   1518e:	e9c2 1306 	strd	r1, r3, [r2, #24]
		BT_ERR("Unknown pairing method (%u)", smp->method);
   15192:	2304      	movs	r3, #4
   15194:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   15198:	f842 3f10 	str.w	r3, [r2, #16]!
   1519c:	f00a faa5 	bl	1f6ea <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   151a0:	2008      	movs	r0, #8
   151a2:	46a5      	mov	sp, r4
   151a4:	e7d2      	b.n	1514c <smp_pairing_confirm+0x38>
   151a6:	bf00      	nop
   151a8:	00025da7 	.word	0x00025da7
   151ac:	00022828 	.word	0x00022828
   151b0:	00026193 	.word	0x00026193

000151b4 <smp_pairing_random>:
{
   151b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   151b8:	b09d      	sub	sp, #116	; 0x74
   151ba:	4604      	mov	r4, r0
   151bc:	af04      	add	r7, sp, #16
   151be:	460e      	mov	r6, r1
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   151c0:	f7ff f980 	bl	144c4 <latch_auth_cb>
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   151c4:	f104 0937 	add.w	r9, r4, #55	; 0x37
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   151c8:	4605      	mov	r5, r0
   151ca:	464a      	mov	r2, r9
   151cc:	68b3      	ldr	r3, [r6, #8]
   151ce:	f103 0110 	add.w	r1, r3, #16
   151d2:	f853 0b04 	ldr.w	r0, [r3], #4
   151d6:	428b      	cmp	r3, r1
   151d8:	f842 0b04 	str.w	r0, [r2], #4
   151dc:	d1f9      	bne.n	151d2 <smp_pairing_random+0x1e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   151de:	1d26      	adds	r6, r4, #4
   151e0:	2105      	movs	r1, #5
   151e2:	4630      	mov	r0, r6
   151e4:	f00a fa0b 	bl	1f5fe <atomic_test_bit>
   151e8:	2800      	cmp	r0, #0
   151ea:	d156      	bne.n	1529a <smp_pairing_random+0xe6>
	struct bt_conn *conn = smp->chan.chan.conn;
   151ec:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   151f0:	f104 0847 	add.w	r8, r4, #71	; 0x47
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   151f4:	f103 0296 	add.w	r2, r3, #150	; 0x96
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   151f8:	f107 0510 	add.w	r5, r7, #16
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   151fc:	338f      	adds	r3, #143	; 0x8f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   151fe:	9201      	str	r2, [sp, #4]
   15200:	9300      	str	r3, [sp, #0]
   15202:	4649      	mov	r1, r9
   15204:	4640      	mov	r0, r8
   15206:	9502      	str	r5, [sp, #8]
   15208:	f104 0310 	add.w	r3, r4, #16
   1520c:	f104 0209 	add.w	r2, r4, #9
   15210:	f00a fbc0 	bl	1f994 <smp_c1>
	if (err) {
   15214:	2800      	cmp	r0, #0
   15216:	d16d      	bne.n	152f4 <smp_pairing_random+0x140>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   15218:	2210      	movs	r2, #16
   1521a:	4629      	mov	r1, r5
   1521c:	f104 0017 	add.w	r0, r4, #23
   15220:	f00c fc25 	bl	21a6e <memcmp>
   15224:	2800      	cmp	r0, #0
   15226:	f040 80a2 	bne.w	1536e <smp_pairing_random+0x1ba>
	memcpy(out, r2, 8);
   1522a:	462b      	mov	r3, r5
   1522c:	f8d4 0037 	ldr.w	r0, [r4, #55]	; 0x37
   15230:	f8d9 1004 	ldr.w	r1, [r9, #4]
	return bt_encrypt_le(k, out, out);
   15234:	462a      	mov	r2, r5
	memcpy(out, r2, 8);
   15236:	c303      	stmia	r3!, {r0, r1}
	memcpy(out + 8, r1, 8);
   15238:	f8d4 0027 	ldr.w	r0, [r4, #39]	; 0x27
   1523c:	f8d4 102b 	ldr.w	r1, [r4, #43]	; 0x2b
   15240:	f107 0318 	add.w	r3, r7, #24
   15244:	c303      	stmia	r3!, {r0, r1}
	return bt_encrypt_le(k, out, out);
   15246:	4629      	mov	r1, r5
   15248:	4640      	mov	r0, r8
   1524a:	f009 f851 	bl	1e2f0 <bt_encrypt_le>
		if (err) {
   1524e:	b180      	cbz	r0, 15272 <smp_pairing_random+0xbe>
			BT_ERR("Calculate STK failed");
   15250:	466c      	mov	r4, sp
   15252:	b088      	sub	sp, #32
   15254:	aa04      	add	r2, sp, #16
   15256:	4b75      	ldr	r3, [pc, #468]	; (1542c <smp_pairing_random+0x278>)
   15258:	6153      	str	r3, [r2, #20]
   1525a:	4b75      	ldr	r3, [pc, #468]	; (15430 <smp_pairing_random+0x27c>)
		BT_ERR("Calculate confirm failed");
   1525c:	6193      	str	r3, [r2, #24]
   1525e:	2303      	movs	r3, #3
   15260:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15264:	f842 3f10 	str.w	r3, [r2, #16]!
		BT_ERR("Unknown pairing method (%u)", smp->method);
   15268:	4872      	ldr	r0, [pc, #456]	; (15434 <smp_pairing_random+0x280>)
   1526a:	f00a fa3e 	bl	1f6ea <z_log_msg_static_create.constprop.0>
   1526e:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   15270:	e040      	b.n	152f4 <smp_pairing_random+0x140>
   15272:	4643      	mov	r3, r8
   15274:	f107 0c20 	add.w	ip, r7, #32
   15278:	462a      	mov	r2, r5
   1527a:	ca03      	ldmia	r2!, {r0, r1}
   1527c:	4562      	cmp	r2, ip
   1527e:	6018      	str	r0, [r3, #0]
   15280:	6059      	str	r1, [r3, #4]
   15282:	4615      	mov	r5, r2
   15284:	f103 0308 	add.w	r3, r3, #8
   15288:	d1f6      	bne.n	15278 <smp_pairing_random+0xc4>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1528a:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1528c:	4630      	mov	r0, r6
   1528e:	f00a fabd 	bl	1f80c <atomic_set_bit>
	return smp_send_pairing_random(smp);
   15292:	4620      	mov	r0, r4
   15294:	f00a fb03 	bl	1f89e <smp_send_pairing_random>
   15298:	e02d      	b.n	152f6 <smp_pairing_random+0x142>
	switch (smp->method) {
   1529a:	7a23      	ldrb	r3, [r4, #8]
   1529c:	2b05      	cmp	r3, #5
   1529e:	f200 80b5 	bhi.w	1540c <smp_pairing_random+0x258>
   152a2:	e8df f003 	tbb	[pc, r3]
   152a6:	423c      	.short	0x423c
   152a8:	8ab30342 	.word	0x8ab30342
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
   152ac:	4b62      	ldr	r3, [pc, #392]	; (15438 <smp_pairing_random+0x284>)
	sys_memcpy_swap(m, u, 32);
   152ae:	2220      	movs	r2, #32
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
   152b0:	f8d3 8000 	ldr.w	r8, [r3]
	sys_memcpy_swap(m, u, 32);
   152b4:	f104 0157 	add.w	r1, r4, #87	; 0x57
   152b8:	f107 0010 	add.w	r0, r7, #16
   152bc:	f00a f993 	bl	1f5e6 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   152c0:	2220      	movs	r2, #32
   152c2:	4641      	mov	r1, r8
   152c4:	f107 0030 	add.w	r0, r7, #48	; 0x30
   152c8:	f00a f98d 	bl	1f5e6 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   152cc:	2210      	movs	r2, #16
   152ce:	f104 0127 	add.w	r1, r4, #39	; 0x27
   152d2:	f107 0050 	add.w	r0, r7, #80	; 0x50
   152d6:	f00a f986 	bl	1f5e6 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   152da:	2210      	movs	r2, #16
   152dc:	4649      	mov	r1, r9
   152de:	4638      	mov	r0, r7
   152e0:	f00a f981 	bl	1f5e6 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
   152e4:	463b      	mov	r3, r7
   152e6:	2250      	movs	r2, #80	; 0x50
   152e8:	4638      	mov	r0, r7
   152ea:	f107 0110 	add.w	r1, r7, #16
   152ee:	f00a f9b8 	bl	1f662 <bt_smp_aes_cmac>
	if (err) {
   152f2:	b120      	cbz	r0, 152fe <smp_pairing_random+0x14a>
			return BT_SMP_ERR_UNSPECIFIED;
   152f4:	2008      	movs	r0, #8
}
   152f6:	3764      	adds	r7, #100	; 0x64
   152f8:	46bd      	mov	sp, r7
   152fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	memcpy(passkey, xs + 12, 4);
   152fe:	68fb      	ldr	r3, [r7, #12]
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   15300:	210a      	movs	r1, #10
   15302:	4630      	mov	r0, r6
   15304:	fa93 f883 	rev.w	r8, r3
   15308:	f00a fa80 	bl	1f80c <atomic_set_bit>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1530c:	4b4b      	ldr	r3, [pc, #300]	; (1543c <smp_pairing_random+0x288>)
		smp_auth_cb->passkey_confirm(smp->chan.chan.conn, passkey);
   1530e:	68aa      	ldr	r2, [r5, #8]
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   15310:	fbb8 f1f3 	udiv	r1, r8, r3
		smp_auth_cb->passkey_confirm(smp->chan.chan.conn, passkey);
   15314:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   15318:	fb03 8111 	mls	r1, r3, r1, r8
   1531c:	4790      	blx	r2
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   1531e:	210d      	movs	r1, #13
   15320:	4620      	mov	r0, r4
   15322:	f00a fa73 	bl	1f80c <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   15326:	2110      	movs	r1, #16
   15328:	e7b0      	b.n	1528c <smp_pairing_random+0xd8>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1532a:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   1532e:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   15332:	4941      	ldr	r1, [pc, #260]	; (15438 <smp_pairing_random+0x284>)
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   15334:	40d3      	lsrs	r3, r2
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   15336:	f107 0510 	add.w	r5, r7, #16
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1533a:	f003 0301 	and.w	r3, r3, #1
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1533e:	9500      	str	r5, [sp, #0]
   15340:	464a      	mov	r2, r9
   15342:	6809      	ldr	r1, [r1, #0]
   15344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   15348:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1534c:	f00a fa39 	bl	1f7c2 <smp_f4>
   15350:	b130      	cbz	r0, 15360 <smp_pairing_random+0x1ac>
		BT_ERR("Calculate confirm failed");
   15352:	466c      	mov	r4, sp
   15354:	b088      	sub	sp, #32
   15356:	aa04      	add	r2, sp, #16
   15358:	4b39      	ldr	r3, [pc, #228]	; (15440 <smp_pairing_random+0x28c>)
   1535a:	6153      	str	r3, [r2, #20]
   1535c:	4b39      	ldr	r3, [pc, #228]	; (15444 <smp_pairing_random+0x290>)
   1535e:	e77d      	b.n	1525c <smp_pairing_random+0xa8>
	if (memcmp(smp->pcnf, cfm, 16)) {
   15360:	2210      	movs	r2, #16
   15362:	4629      	mov	r1, r5
   15364:	f104 0017 	add.w	r0, r4, #23
   15368:	f00c fb81 	bl	21a6e <memcmp>
   1536c:	b108      	cbz	r0, 15372 <smp_pairing_random+0x1be>
		return BT_SMP_ERR_CONFIRM_FAILED;
   1536e:	2004      	movs	r0, #4
   15370:	e7c1      	b.n	152f6 <smp_pairing_random+0x142>
		atomic_set_bit(smp->allowed_cmds,
   15372:	2103      	movs	r1, #3
   15374:	4620      	mov	r0, r4
   15376:	f00a fa49 	bl	1f80c <atomic_set_bit>
		err = smp_send_pairing_random(smp);
   1537a:	f00a fa90 	bl	1f89e <smp_send_pairing_random>
		if (err) {
   1537e:	2800      	cmp	r0, #0
   15380:	d1b9      	bne.n	152f6 <smp_pairing_random+0x142>
		smp->passkey_round++;
   15382:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   15386:	3301      	adds	r3, #1
   15388:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
   1538a:	2b14      	cmp	r3, #20
		smp->passkey_round++;
   1538c:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
		if (smp->passkey_round == 20U) {
   15390:	d109      	bne.n	153a6 <smp_pairing_random+0x1f2>
			atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   15392:	210d      	movs	r1, #13
   15394:	4620      	mov	r0, r4
   15396:	f00a fa39 	bl	1f80c <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1539a:	2110      	movs	r1, #16
   1539c:	4630      	mov	r0, r6
   1539e:	f00a fa35 	bl	1f80c <atomic_set_bit>
			return 0;
   153a2:	2000      	movs	r0, #0
   153a4:	e7a7      	b.n	152f6 <smp_pairing_random+0x142>
		if (bt_rand(smp->prnd, 16)) {
   153a6:	2110      	movs	r1, #16
   153a8:	f104 0027 	add.w	r0, r4, #39	; 0x27
   153ac:	f7fb feae 	bl	1110c <bt_rand>
   153b0:	3800      	subs	r0, #0
   153b2:	bf18      	it	ne
   153b4:	2001      	movne	r0, #1
   153b6:	00c0      	lsls	r0, r0, #3
   153b8:	e79d      	b.n	152f6 <smp_pairing_random+0x142>
		if (bt_rand(smp->prnd, 16)) {
   153ba:	2110      	movs	r1, #16
   153bc:	f104 0027 	add.w	r0, r4, #39	; 0x27
   153c0:	f7fb fea4 	bl	1110c <bt_rand>
   153c4:	2800      	cmp	r0, #0
   153c6:	d195      	bne.n	152f4 <smp_pairing_random+0x140>
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   153c8:	b375      	cbz	r5, 15428 <smp_pairing_random+0x274>
   153ca:	68eb      	ldr	r3, [r5, #12]
   153cc:	b363      	cbz	r3, 15428 <smp_pairing_random+0x274>
			struct bt_conn_oob_info info = {
   153ce:	4b1e      	ldr	r3, [pc, #120]	; (15448 <smp_pairing_random+0x294>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   153d0:	7ae2      	ldrb	r2, [r4, #11]
			struct bt_conn_oob_info info = {
   153d2:	f8b3 3035 	ldrh.w	r3, [r3, #53]	; 0x35
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   153d6:	07d2      	lsls	r2, r2, #31
			struct bt_conn_oob_info info = {
   153d8:	823b      	strh	r3, [r7, #16]
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   153da:	7ca3      	ldrb	r3, [r4, #18]
   153dc:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   153e0:	d412      	bmi.n	15408 <smp_pairing_random+0x254>
   153e2:	2b00      	cmp	r3, #0
   153e4:	bf14      	ite	ne
   153e6:	2301      	movne	r3, #1
   153e8:	2303      	moveq	r3, #3
	info->lesc.oob_config = oob_config;
   153ea:	747b      	strb	r3, [r7, #17]
			smp->oobd_local = NULL;
   153ec:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   153ee:	4630      	mov	r0, r6
			smp->oobd_remote = NULL;
   153f0:	e9c4 3338 	strd	r3, r3, [r4, #224]	; 0xe0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   153f4:	210c      	movs	r1, #12
   153f6:	f00a fa09 	bl	1f80c <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   153fa:	68eb      	ldr	r3, [r5, #12]
   153fc:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   15400:	f107 0110 	add.w	r1, r7, #16
   15404:	4798      	blx	r3
			return 0;
   15406:	e7cc      	b.n	153a2 <smp_pairing_random+0x1ee>
		if (rsp_oob_present) {
   15408:	005b      	lsls	r3, r3, #1
   1540a:	e7ee      	b.n	153ea <smp_pairing_random+0x236>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1540c:	466c      	mov	r4, sp
   1540e:	b088      	sub	sp, #32
   15410:	aa04      	add	r2, sp, #16
   15412:	490e      	ldr	r1, [pc, #56]	; (1544c <smp_pairing_random+0x298>)
   15414:	6151      	str	r1, [r2, #20]
   15416:	490e      	ldr	r1, [pc, #56]	; (15450 <smp_pairing_random+0x29c>)
	switch (smp->method) {
   15418:	e9c2 1306 	strd	r1, r3, [r2, #24]
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1541c:	2304      	movs	r3, #4
   1541e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   15422:	f842 3f10 	str.w	r3, [r2, #16]!
   15426:	e71f      	b.n	15268 <smp_pairing_random+0xb4>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   15428:	2002      	movs	r0, #2
   1542a:	e764      	b.n	152f6 <smp_pairing_random+0x142>
   1542c:	00025ea4 	.word	0x00025ea4
   15430:	000261bc 	.word	0x000261bc
   15434:	00022828 	.word	0x00022828
   15438:	20009f3c 	.word	0x20009f3c
   1543c:	000f4240 	.word	0x000f4240
   15440:	00025ebd 	.word	0x00025ebd
   15444:	000261a7 	.word	0x000261a7
   15448:	0002295c 	.word	0x0002295c
   1544c:	00025da7 	.word	0x00025da7
   15450:	000261d2 	.word	0x000261d2

00015454 <bt_smp_start_security>:
{
   15454:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
   15458:	78c6      	ldrb	r6, [r0, #3]
{
   1545a:	4604      	mov	r4, r0
	switch (conn->role) {
   1545c:	2e01      	cmp	r6, #1
   1545e:	d005      	beq.n	1546c <bt_smp_start_security+0x18>
		return -EINVAL;
   15460:	f06f 0415 	mvn.w	r4, #21
}
   15464:	4620      	mov	r0, r4
   15466:	b003      	add	sp, #12
   15468:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
   1546c:	f00a f940 	bl	1f6f0 <smp_chan_get>
	if (!smp) {
   15470:	4605      	mov	r5, r0
   15472:	2800      	cmp	r0, #0
   15474:	f000 80ac 	beq.w	155d0 <bt_smp_start_security+0x17c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   15478:	1d07      	adds	r7, r0, #4
   1547a:	2104      	movs	r1, #4
   1547c:	4638      	mov	r0, r7
   1547e:	f00a f8be 	bl	1f5fe <atomic_test_bit>
   15482:	2800      	cmp	r0, #0
   15484:	f040 80a7 	bne.w	155d6 <bt_smp_start_security+0x182>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   15488:	2103      	movs	r1, #3
   1548a:	4638      	mov	r0, r7
   1548c:	f00a f8b7 	bl	1f5fe <atomic_test_bit>
   15490:	b110      	cbz	r0, 15498 <bt_smp_start_security+0x44>
		return -EBUSY;
   15492:	f06f 040f 	mvn.w	r4, #15
   15496:	e7e5      	b.n	15464 <bt_smp_start_security+0x10>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   15498:	4631      	mov	r1, r6
   1549a:	4638      	mov	r0, r7
   1549c:	f00a f8af 	bl	1f5fe <atomic_test_bit>
   154a0:	2800      	cmp	r0, #0
   154a2:	d1f6      	bne.n	15492 <bt_smp_start_security+0x3e>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   154a4:	4628      	mov	r0, r5
   154a6:	f7ff f80d 	bl	144c4 <latch_auth_cb>
	switch (smp->chan.chan.conn->required_sec_level) {
   154aa:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   154ae:	4606      	mov	r6, r0
	switch (smp->chan.chan.conn->required_sec_level) {
   154b0:	7a9b      	ldrb	r3, [r3, #10]
   154b2:	2b03      	cmp	r3, #3
   154b4:	d042      	beq.n	1553c <bt_smp_start_security+0xe8>
   154b6:	d832      	bhi.n	1551e <bt_smp_start_security+0xca>
   154b8:	3b01      	subs	r3, #1
   154ba:	2b01      	cmp	r3, #1
   154bc:	d948      	bls.n	15550 <bt_smp_start_security+0xfc>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   154be:	210a      	movs	r1, #10
   154c0:	1d20      	adds	r0, r4, #4
   154c2:	f00a f89c 	bl	1f5fe <atomic_test_bit>
   154c6:	2800      	cmp	r0, #0
   154c8:	d1ca      	bne.n	15460 <bt_smp_start_security+0xc>
	if (!conn->le.keys) {
   154ca:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   154ce:	b983      	cbnz	r3, 154f2 <bt_smp_start_security+0x9e>
						     conn->id, &conn->le.dst);
   154d0:	f104 0688 	add.w	r6, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   154d4:	4632      	mov	r2, r6
   154d6:	2020      	movs	r0, #32
   154d8:	7a21      	ldrb	r1, [r4, #8]
   154da:	f000 fdf3 	bl	160c4 <bt_keys_find>
   154de:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   154e2:	b930      	cbnz	r0, 154f2 <bt_smp_start_security+0x9e>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   154e4:	4632      	mov	r2, r6
   154e6:	2004      	movs	r0, #4
   154e8:	7a21      	ldrb	r1, [r4, #8]
   154ea:	f000 fdeb 	bl	160c4 <bt_keys_find>
   154ee:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys ||
   154f2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   154f6:	2b00      	cmp	r3, #0
   154f8:	d0b2      	beq.n	15460 <bt_smp_start_security+0xc>
	    !(conn->le.keys->keys & (BT_KEYS_LTK | BT_KEYS_LTK_P256))) {
   154fa:	89da      	ldrh	r2, [r3, #14]
	if (!conn->le.keys ||
   154fc:	f012 0f24 	tst.w	r2, #36	; 0x24
   15500:	d0ae      	beq.n	15460 <bt_smp_start_security+0xc>
	if (conn->required_sec_level >= BT_SECURITY_L3 &&
   15502:	7aa1      	ldrb	r1, [r4, #10]
   15504:	2902      	cmp	r1, #2
   15506:	d923      	bls.n	15550 <bt_smp_start_security+0xfc>
   15508:	7b58      	ldrb	r0, [r3, #13]
   1550a:	07c0      	lsls	r0, r0, #31
   1550c:	d5a8      	bpl.n	15460 <bt_smp_start_security+0xc>
	if (conn->required_sec_level >= BT_SECURITY_L4 &&
   1550e:	2903      	cmp	r1, #3
   15510:	d01e      	beq.n	15550 <bt_smp_start_security+0xfc>
	    !((conn->le.keys->flags & BT_KEYS_AUTHENTICATED) &&
   15512:	0692      	lsls	r2, r2, #26
   15514:	d5a4      	bpl.n	15460 <bt_smp_start_security+0xc>
   15516:	7b1b      	ldrb	r3, [r3, #12]
   15518:	2b10      	cmp	r3, #16
   1551a:	d1a1      	bne.n	15460 <bt_smp_start_security+0xc>
   1551c:	e018      	b.n	15550 <bt_smp_start_security+0xfc>
	switch (smp->chan.chan.conn->required_sec_level) {
   1551e:	2b04      	cmp	r3, #4
   15520:	d1cd      	bne.n	154be <bt_smp_start_security+0x6a>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   15522:	4628      	mov	r0, r5
   15524:	f7fe ffe4 	bl	144f0 <get_io_capa>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   15528:	2803      	cmp	r0, #3
   1552a:	d104      	bne.n	15536 <bt_smp_start_security+0xe2>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1552c:	2e00      	cmp	r6, #0
   1552e:	d0c6      	beq.n	154be <bt_smp_start_security+0x6a>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   15530:	68f3      	ldr	r3, [r6, #12]
   15532:	2b00      	cmp	r3, #0
   15534:	d0c3      	beq.n	154be <bt_smp_start_security+0x6a>
   15536:	4b29      	ldr	r3, [pc, #164]	; (155dc <bt_smp_start_security+0x188>)
   15538:	781b      	ldrb	r3, [r3, #0]
   1553a:	e007      	b.n	1554c <bt_smp_start_security+0xf8>
		return get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1553c:	4628      	mov	r0, r5
   1553e:	f7fe ffd7 	bl	144f0 <get_io_capa>
   15542:	2803      	cmp	r0, #3
   15544:	d104      	bne.n	15550 <bt_smp_start_security+0xfc>
   15546:	2e00      	cmp	r6, #0
   15548:	d0b9      	beq.n	154be <bt_smp_start_security+0x6a>
		       (smp_auth_cb && smp_auth_cb->oob_data_request);
   1554a:	68f3      	ldr	r3, [r6, #12]
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1554c:	2b00      	cmp	r3, #0
   1554e:	d0b6      	beq.n	154be <bt_smp_start_security+0x6a>
	if (!conn->le.keys) {
   15550:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   15554:	b13b      	cbz	r3, 15566 <bt_smp_start_security+0x112>
	if (smp_init(smp) != 0) {
   15556:	4628      	mov	r0, r5
   15558:	f7ff f86c 	bl	14634 <smp_init>
   1555c:	4680      	mov	r8, r0
   1555e:	b170      	cbz	r0, 1557e <bt_smp_start_security+0x12a>
		return -ENOBUFS;
   15560:	f06f 0468 	mvn.w	r4, #104	; 0x68
   15564:	e77e      	b.n	15464 <bt_smp_start_security+0x10>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   15566:	7a20      	ldrb	r0, [r4, #8]
   15568:	f104 0188 	add.w	r1, r4, #136	; 0x88
   1556c:	f000 fd74 	bl	16058 <bt_keys_get_addr>
   15570:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   15574:	2800      	cmp	r0, #0
   15576:	d1ee      	bne.n	15556 <bt_smp_start_security+0x102>
			return -ENOMEM;
   15578:	f06f 040b 	mvn.w	r4, #11
   1557c:	e772      	b.n	15464 <bt_smp_start_security+0x10>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   1557e:	210b      	movs	r1, #11
   15580:	4628      	mov	r0, r5
   15582:	f00a f953 	bl	1f82c <smp_create_pdu.constprop.0>
	if (!req_buf) {
   15586:	4606      	mov	r6, r0
   15588:	2800      	cmp	r0, #0
   1558a:	d0e9      	beq.n	15560 <bt_smp_start_security+0x10c>
   1558c:	2101      	movs	r1, #1
   1558e:	3008      	adds	r0, #8
   15590:	f00a fc7c 	bl	1fe8c <net_buf_simple_add>
	req->auth_req = get_auth(smp, BT_SMP_AUTH_DEFAULT);
   15594:	2109      	movs	r1, #9
   15596:	4681      	mov	r9, r0
   15598:	4628      	mov	r0, r5
   1559a:	f7fe ffcf 	bl	1453c <get_auth>
   1559e:	4643      	mov	r3, r8
   155a0:	f889 0000 	strb.w	r0, [r9]
   155a4:	4632      	mov	r2, r6
   155a6:	4620      	mov	r0, r4
   155a8:	2106      	movs	r1, #6
   155aa:	f8cd 8000 	str.w	r8, [sp]
   155ae:	f009 f886 	bl	1e6be <bt_l2cap_send_cb>
	if (err) {
   155b2:	4604      	mov	r4, r0
   155b4:	b118      	cbz	r0, 155be <bt_smp_start_security+0x16a>
		net_buf_unref(req_buf);
   155b6:	4630      	mov	r0, r6
   155b8:	f000 fec0 	bl	1633c <net_buf_unref>
		return err;
   155bc:	e752      	b.n	15464 <bt_smp_start_security+0x10>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   155be:	4638      	mov	r0, r7
   155c0:	210f      	movs	r1, #15
   155c2:	f00a f923 	bl	1f80c <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   155c6:	2101      	movs	r1, #1
   155c8:	4628      	mov	r0, r5
   155ca:	f00a f91f 	bl	1f80c <atomic_set_bit>
	return 0;
   155ce:	e749      	b.n	15464 <bt_smp_start_security+0x10>
		return -ENOTCONN;
   155d0:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   155d4:	e746      	b.n	15464 <bt_smp_start_security+0x10>
		return -EIO;
   155d6:	f06f 0404 	mvn.w	r4, #4
   155da:	e743      	b.n	15464 <bt_smp_start_security+0x10>
   155dc:	2000a292 	.word	0x2000a292

000155e0 <smp_pairing_complete>:
{
   155e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   155e2:	4606      	mov	r6, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   155e4:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   155e8:	1d04      	adds	r4, r0, #4
	if (!status) {
   155ea:	bb39      	cbnz	r1, 1563c <smp_pairing_complete+0x5c>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   155ec:	210d      	movs	r1, #13
   155ee:	4620      	mov	r0, r4
   155f0:	f00a f805 	bl	1f5fe <atomic_test_bit>
	return list->head;
   155f4:	4b36      	ldr	r3, [pc, #216]	; (156d0 <smp_pairing_complete+0xf0>)
   155f6:	4607      	mov	r7, r0
   155f8:	681b      	ldr	r3, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   155fa:	b19b      	cbz	r3, 15624 <smp_pairing_complete+0x44>
	return node->next;
   155fc:	681c      	ldr	r4, [r3, #0]
   155fe:	b104      	cbz	r4, 15602 <smp_pairing_complete+0x22>
   15600:	3c0c      	subs	r4, #12
			if (listener->pairing_complete) {
   15602:	f853 3c0c 	ldr.w	r3, [r3, #-12]
   15606:	b113      	cbz	r3, 1560e <smp_pairing_complete+0x2e>
				listener->pairing_complete(conn, bond_flag);
   15608:	4639      	mov	r1, r7
   1560a:	4628      	mov	r0, r5
   1560c:	4798      	blx	r3
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   1560e:	b14c      	cbz	r4, 15624 <smp_pairing_complete+0x44>
   15610:	4623      	mov	r3, r4
   15612:	68e4      	ldr	r4, [r4, #12]
   15614:	681b      	ldr	r3, [r3, #0]
   15616:	b11c      	cbz	r4, 15620 <smp_pairing_complete+0x40>
   15618:	3c0c      	subs	r4, #12
			if (listener->pairing_complete) {
   1561a:	2b00      	cmp	r3, #0
   1561c:	d1f4      	bne.n	15608 <smp_pairing_complete+0x28>
   1561e:	e7f7      	b.n	15610 <smp_pairing_complete+0x30>
   15620:	2b00      	cmp	r3, #0
   15622:	d1f1      	bne.n	15608 <smp_pairing_complete+0x28>
	smp_reset(smp);
   15624:	4630      	mov	r0, r6
   15626:	f00a f99a 	bl	1f95e <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   1562a:	7a6a      	ldrb	r2, [r5, #9]
   1562c:	7aab      	ldrb	r3, [r5, #10]
   1562e:	429a      	cmp	r2, r3
   15630:	d04d      	beq.n	156ce <smp_pairing_complete+0xee>
		bt_smp_start_security(conn);
   15632:	4628      	mov	r0, r5
}
   15634:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_smp_start_security(conn);
   15638:	f7ff bf0c 	b.w	15454 <bt_smp_start_security>
	switch (smp_err) {
   1563c:	3901      	subs	r1, #1
   1563e:	b2c9      	uxtb	r1, r1
   15640:	290e      	cmp	r1, #14
   15642:	bf96      	itet	ls
   15644:	4b23      	ldrls	r3, [pc, #140]	; (156d4 <smp_pairing_complete+0xf4>)
	if (!status) {
   15646:	2709      	movhi	r7, #9
   15648:	5c5f      	ldrbls	r7, [r3, r1]
		if (conn->le.keys &&
   1564a:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   1564e:	b143      	cbz	r3, 15662 <smp_pairing_complete+0x82>
   15650:	7b1b      	ldrb	r3, [r3, #12]
   15652:	bb33      	cbnz	r3, 156a2 <smp_pairing_complete+0xc2>
			bt_keys_clear(conn->le.keys);
   15654:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
   15658:	f00a fb69 	bl	1fd2e <bt_keys_clear>
			conn->le.keys = NULL;
   1565c:	2300      	movs	r3, #0
   1565e:	f8c5 30b4 	str.w	r3, [r5, #180]	; 0xb4
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   15662:	2102      	movs	r1, #2
   15664:	4620      	mov	r0, r4
   15666:	f009 ffca 	bl	1f5fe <atomic_test_bit>
   1566a:	b948      	cbnz	r0, 15680 <smp_pairing_complete+0xa0>
	switch (err) {
   1566c:	2f07      	cmp	r7, #7
   1566e:	bf94      	ite	ls
   15670:	4b19      	ldrls	r3, [pc, #100]	; (156d8 <smp_pairing_complete+0xf8>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   15672:	211f      	movhi	r1, #31
			bt_conn_security_changed(conn,
   15674:	463a      	mov	r2, r7
   15676:	4628      	mov	r0, r5
   15678:	bf98      	it	ls
   1567a:	5dd9      	ldrbls	r1, [r3, r7]
   1567c:	f7fc fb42 	bl	11d04 <bt_conn_security_changed>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   15680:	2103      	movs	r1, #3
   15682:	4620      	mov	r0, r4
   15684:	f009 ffbb 	bl	1f5fe <atomic_test_bit>
   15688:	2800      	cmp	r0, #0
   1568a:	d0cb      	beq.n	15624 <smp_pairing_complete+0x44>
	return list->head;
   1568c:	4b10      	ldr	r3, [pc, #64]	; (156d0 <smp_pairing_complete+0xf0>)
   1568e:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   15690:	2b00      	cmp	r3, #0
   15692:	d0c7      	beq.n	15624 <smp_pairing_complete+0x44>
	return node->next;
   15694:	681c      	ldr	r4, [r3, #0]
   15696:	b104      	cbz	r4, 1569a <smp_pairing_complete+0xba>
   15698:	3c0c      	subs	r4, #12
				if (listener->pairing_failed) {
   1569a:	f853 3c08 	ldr.w	r3, [r3, #-8]
   1569e:	b94b      	cbnz	r3, 156b4 <smp_pairing_complete+0xd4>
   156a0:	e00b      	b.n	156ba <smp_pairing_complete+0xda>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   156a2:	2102      	movs	r1, #2
   156a4:	4620      	mov	r0, r4
   156a6:	f009 ffaa 	bl	1f5fe <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   156aa:	2800      	cmp	r0, #0
   156ac:	d1d2      	bne.n	15654 <smp_pairing_complete+0x74>
   156ae:	e7d8      	b.n	15662 <smp_pairing_complete+0x82>
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   156b0:	3c0c      	subs	r4, #12
				if (listener->pairing_failed) {
   156b2:	b123      	cbz	r3, 156be <smp_pairing_complete+0xde>
					listener->pairing_failed(conn, security_err);
   156b4:	4639      	mov	r1, r7
   156b6:	4628      	mov	r0, r5
   156b8:	4798      	blx	r3
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   156ba:	2c00      	cmp	r4, #0
   156bc:	d0b2      	beq.n	15624 <smp_pairing_complete+0x44>
   156be:	4623      	mov	r3, r4
   156c0:	68e4      	ldr	r4, [r4, #12]
   156c2:	685b      	ldr	r3, [r3, #4]
   156c4:	2c00      	cmp	r4, #0
   156c6:	d1f3      	bne.n	156b0 <smp_pairing_complete+0xd0>
				if (listener->pairing_failed) {
   156c8:	2b00      	cmp	r3, #0
   156ca:	d1f3      	bne.n	156b4 <smp_pairing_complete+0xd4>
   156cc:	e7aa      	b.n	15624 <smp_pairing_complete+0x44>
}
   156ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   156d0:	20009e00 	.word	0x20009e00
   156d4:	00026126 	.word	0x00026126
   156d8:	00026115 	.word	0x00026115

000156dc <smp_error>:
{
   156dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   156e0:	1d03      	adds	r3, r0, #4
{
   156e2:	b082      	sub	sp, #8
   156e4:	4605      	mov	r5, r0
   156e6:	4688      	mov	r8, r1
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   156e8:	4618      	mov	r0, r3
   156ea:	2102      	movs	r1, #2
{
   156ec:	af02      	add	r7, sp, #8
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   156ee:	f009 ff86 	bl	1f5fe <atomic_test_bit>
				    !smp->local_dist && !smp->remote_dist);
   156f2:	4604      	mov	r4, r0
   156f4:	b120      	cbz	r0, 15700 <smp_error+0x24>
   156f6:	f8b5 40e8 	ldrh.w	r4, [r5, #232]	; 0xe8
   156fa:	fab4 f484 	clz	r4, r4
   156fe:	0964      	lsrs	r4, r4, #5
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   15700:	2103      	movs	r1, #3
   15702:	4618      	mov	r0, r3
   15704:	f009 ff7b 	bl	1f5fe <atomic_test_bit>
   15708:	b1e8      	cbz	r0, 15746 <smp_error+0x6a>
		smp_pairing_complete(smp, reason);
   1570a:	4641      	mov	r1, r8
   1570c:	4628      	mov	r0, r5
   1570e:	f7ff ff67 	bl	155e0 <smp_pairing_complete>
	if (remote_already_completed) {
   15712:	b32c      	cbz	r4, 15760 <smp_error+0x84>
		BT_WARN("SMP does not allow a pairing failure at this point. Known issue. "
   15714:	466c      	mov	r4, sp
   15716:	b088      	sub	sp, #32
   15718:	aa02      	add	r2, sp, #8
   1571a:	4b20      	ldr	r3, [pc, #128]	; (1579c <smp_error+0xc0>)
   1571c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   15720:	6153      	str	r3, [r2, #20]
   15722:	4b1f      	ldr	r3, [pc, #124]	; (157a0 <smp_error+0xc4>)
   15724:	481f      	ldr	r0, [pc, #124]	; (157a4 <smp_error+0xc8>)
   15726:	6193      	str	r3, [r2, #24]
   15728:	2303      	movs	r3, #3
   1572a:	f842 3f10 	str.w	r3, [r2, #16]!
   1572e:	f009 ffdc 	bl	1f6ea <z_log_msg_static_create.constprop.0>
		bt_conn_disconnect(smp->chan.chan.conn, BT_HCI_ERR_AUTH_FAIL);
   15732:	2105      	movs	r1, #5
   15734:	46a5      	mov	sp, r4
   15736:	f8d5 00ec 	ldr.w	r0, [r5, #236]	; 0xec
   1573a:	f008 febb 	bl	1e4b4 <bt_conn_disconnect>
		return 0;
   1573e:	2000      	movs	r0, #0
}
   15740:	46bd      	mov	sp, r7
   15742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   15746:	2101      	movs	r1, #1
   15748:	4618      	mov	r0, r3
   1574a:	f009 ff58 	bl	1f5fe <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1574e:	2800      	cmp	r0, #0
   15750:	d1db      	bne.n	1570a <smp_error+0x2e>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   15752:	210f      	movs	r1, #15
   15754:	4618      	mov	r0, r3
   15756:	f009 ff52 	bl	1f5fe <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   1575a:	2800      	cmp	r0, #0
   1575c:	d1d5      	bne.n	1570a <smp_error+0x2e>
   1575e:	e7d8      	b.n	15712 <smp_error+0x36>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   15760:	2105      	movs	r1, #5
   15762:	4628      	mov	r0, r5
   15764:	f00a f862 	bl	1f82c <smp_create_pdu.constprop.0>
	if (!buf) {
   15768:	4606      	mov	r6, r0
   1576a:	b198      	cbz	r0, 15794 <smp_error+0xb8>
   1576c:	2101      	movs	r1, #1
   1576e:	3008      	adds	r0, #8
   15770:	f00a fb8c 	bl	1fe8c <net_buf_simple_add>
	rsp->reason = reason;
   15774:	f880 8000 	strb.w	r8, [r0]
   15778:	9400      	str	r4, [sp, #0]
   1577a:	4623      	mov	r3, r4
   1577c:	4632      	mov	r2, r6
   1577e:	2106      	movs	r1, #6
   15780:	f8d5 00ec 	ldr.w	r0, [r5, #236]	; 0xec
   15784:	f008 ff9b 	bl	1e6be <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   15788:	2800      	cmp	r0, #0
   1578a:	d0d8      	beq.n	1573e <smp_error+0x62>
		net_buf_unref(buf);
   1578c:	4630      	mov	r0, r6
   1578e:	f000 fdd5 	bl	1633c <net_buf_unref>
   15792:	e7d4      	b.n	1573e <smp_error+0x62>
		return -ENOBUFS;
   15794:	f06f 0068 	mvn.w	r0, #104	; 0x68
   15798:	e7d2      	b.n	15740 <smp_error+0x64>
   1579a:	bf00      	nop
   1579c:	00025eda 	.word	0x00025eda
   157a0:	000262f0 	.word	0x000262f0
   157a4:	00022828 	.word	0x00022828

000157a8 <bt_smp_recv>:
{
   157a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buf->len < sizeof(*hdr)) {
   157ac:	898b      	ldrh	r3, [r1, #12]
{
   157ae:	4680      	mov	r8, r0
   157b0:	460d      	mov	r5, r1
   157b2:	af00      	add	r7, sp, #0
	if (buf->len < sizeof(*hdr)) {
   157b4:	b99b      	cbnz	r3, 157de <bt_smp_recv+0x36>
		BT_ERR("Too small SMP PDU received");
   157b6:	466c      	mov	r4, sp
   157b8:	b088      	sub	sp, #32
   157ba:	466a      	mov	r2, sp
   157bc:	4b46      	ldr	r3, [pc, #280]	; (158d8 <bt_smp_recv+0x130>)
   157be:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   157c2:	6153      	str	r3, [r2, #20]
   157c4:	4b45      	ldr	r3, [pc, #276]	; (158dc <bt_smp_recv+0x134>)
   157c6:	6193      	str	r3, [r2, #24]
   157c8:	2303      	movs	r3, #3
   157ca:	f842 3f10 	str.w	r3, [r2, #16]!
		BT_WARN("SMP command (code 0x%02x) received after timeout",
   157ce:	4844      	ldr	r0, [pc, #272]	; (158e0 <bt_smp_recv+0x138>)
   157d0:	f009 ff8b 	bl	1f6ea <z_log_msg_static_create.constprop.0>
   157d4:	46a5      	mov	sp, r4
}
   157d6:	2000      	movs	r0, #0
   157d8:	46bd      	mov	sp, r7
   157da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   157de:	2101      	movs	r1, #1
   157e0:	f105 0008 	add.w	r0, r5, #8
   157e4:	f00a fb82 	bl	1feec <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   157e8:	2104      	movs	r1, #4
   157ea:	4606      	mov	r6, r0
   157ec:	f1a8 00e8 	sub.w	r0, r8, #232	; 0xe8
   157f0:	f009 ff05 	bl	1f5fe <atomic_test_bit>
   157f4:	f1a8 04ec 	sub.w	r4, r8, #236	; 0xec
   157f8:	7833      	ldrb	r3, [r6, #0]
   157fa:	b160      	cbz	r0, 15816 <bt_smp_recv+0x6e>
		BT_WARN("SMP command (code 0x%02x) received after timeout",
   157fc:	466c      	mov	r4, sp
   157fe:	b088      	sub	sp, #32
   15800:	466a      	mov	r2, sp
   15802:	4838      	ldr	r0, [pc, #224]	; (158e4 <bt_smp_recv+0x13c>)
   15804:	6150      	str	r0, [r2, #20]
   15806:	4835      	ldr	r0, [pc, #212]	; (158dc <bt_smp_recv+0x134>)
   15808:	e9c2 0306 	strd	r0, r3, [r2, #24]
   1580c:	f842 1f10 	str.w	r1, [r2, #16]!
   15810:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   15814:	e7db      	b.n	157ce <bt_smp_recv+0x26>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   15816:	2b0e      	cmp	r3, #14
   15818:	d904      	bls.n	15824 <bt_smp_recv+0x7c>
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
   1581a:	466c      	mov	r4, sp
   1581c:	b088      	sub	sp, #32
   1581e:	466a      	mov	r2, sp
   15820:	4831      	ldr	r0, [pc, #196]	; (158e8 <bt_smp_recv+0x140>)
   15822:	e7ef      	b.n	15804 <bt_smp_recv+0x5c>
	if (!handlers[hdr->code].func) {
   15824:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 158ec <bt_smp_recv+0x144>
   15828:	f858 2033 	ldr.w	r2, [r8, r3, lsl #3]
   1582c:	b9a2      	cbnz	r2, 15858 <bt_smp_recv+0xb0>
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
   1582e:	466d      	mov	r5, sp
   15830:	b088      	sub	sp, #32
   15832:	466a      	mov	r2, sp
   15834:	482e      	ldr	r0, [pc, #184]	; (158f0 <bt_smp_recv+0x148>)
   15836:	6150      	str	r0, [r2, #20]
   15838:	4828      	ldr	r0, [pc, #160]	; (158dc <bt_smp_recv+0x134>)
   1583a:	e9c2 0306 	strd	r0, r3, [r2, #24]
   1583e:	f842 1f10 	str.w	r1, [r2, #16]!
   15842:	4827      	ldr	r0, [pc, #156]	; (158e0 <bt_smp_recv+0x138>)
   15844:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   15848:	f009 ff4f 	bl	1f6ea <z_log_msg_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   1584c:	2107      	movs	r1, #7
   1584e:	46ad      	mov	sp, r5
		smp_error(smp, err);
   15850:	4620      	mov	r0, r4
   15852:	f7ff ff43 	bl	156dc <smp_error>
   15856:	e7be      	b.n	157d6 <bt_smp_recv+0x2e>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   15858:	4619      	mov	r1, r3
   1585a:	4620      	mov	r0, r4
   1585c:	f00a f86d 	bl	1f93a <atomic_test_and_clear_bit>
   15860:	7833      	ldrb	r3, [r6, #0]
   15862:	b9a8      	cbnz	r0, 15890 <bt_smp_recv+0xe8>
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
   15864:	466d      	mov	r5, sp
   15866:	b088      	sub	sp, #32
   15868:	466a      	mov	r2, sp
   1586a:	4922      	ldr	r1, [pc, #136]	; (158f4 <bt_smp_recv+0x14c>)
   1586c:	481c      	ldr	r0, [pc, #112]	; (158e0 <bt_smp_recv+0x138>)
   1586e:	6151      	str	r1, [r2, #20]
   15870:	491a      	ldr	r1, [pc, #104]	; (158dc <bt_smp_recv+0x134>)
   15872:	e9c2 1306 	strd	r1, r3, [r2, #24]
   15876:	2304      	movs	r3, #4
   15878:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1587c:	f842 3f10 	str.w	r3, [r2, #16]!
   15880:	f009 ff33 	bl	1f6ea <z_log_msg_static_create.constprop.0>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   15884:	7833      	ldrb	r3, [r6, #0]
   15886:	46ad      	mov	sp, r5
   15888:	2b05      	cmp	r3, #5
   1588a:	d0a4      	beq.n	157d6 <bt_smp_recv+0x2e>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1588c:	2108      	movs	r1, #8
   1588e:	e7df      	b.n	15850 <bt_smp_recv+0xa8>
	if (buf->len != handlers[hdr->code].expect_len) {
   15890:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   15894:	89a9      	ldrh	r1, [r5, #12]
   15896:	7912      	ldrb	r2, [r2, #4]
   15898:	428a      	cmp	r2, r1
   1589a:	d013      	beq.n	158c4 <bt_smp_recv+0x11c>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1589c:	466d      	mov	r5, sp
   1589e:	b08a      	sub	sp, #40	; 0x28
   158a0:	466a      	mov	r2, sp
   158a2:	6213      	str	r3, [r2, #32]
   158a4:	2305      	movs	r3, #5
   158a6:	4814      	ldr	r0, [pc, #80]	; (158f8 <bt_smp_recv+0x150>)
   158a8:	6150      	str	r0, [r2, #20]
   158aa:	480c      	ldr	r0, [pc, #48]	; (158dc <bt_smp_recv+0x134>)
   158ac:	e9c2 0106 	strd	r0, r1, [r2, #24]
   158b0:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   158b4:	480a      	ldr	r0, [pc, #40]	; (158e0 <bt_smp_recv+0x138>)
   158b6:	f842 3f10 	str.w	r3, [r2, #16]!
   158ba:	f009 ff16 	bl	1f6ea <z_log_msg_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   158be:	210a      	movs	r1, #10
   158c0:	46ad      	mov	sp, r5
   158c2:	e7c5      	b.n	15850 <bt_smp_recv+0xa8>
	err = handlers[hdr->code].func(smp, buf);
   158c4:	4629      	mov	r1, r5
   158c6:	4620      	mov	r0, r4
   158c8:	f858 3033 	ldr.w	r3, [r8, r3, lsl #3]
   158cc:	4798      	blx	r3
	if (err) {
   158ce:	4601      	mov	r1, r0
   158d0:	2800      	cmp	r0, #0
   158d2:	d080      	beq.n	157d6 <bt_smp_recv+0x2e>
   158d4:	e7bc      	b.n	15850 <bt_smp_recv+0xa8>
   158d6:	bf00      	nop
   158d8:	00025f36 	.word	0x00025f36
   158dc:	00026289 	.word	0x00026289
   158e0:	00022828 	.word	0x00022828
   158e4:	00025f55 	.word	0x00025f55
   158e8:	00025f8a 	.word	0x00025f8a
   158ec:	00023190 	.word	0x00023190
   158f0:	00025fb0 	.word	0x00025fb0
   158f4:	00025fce 	.word	0x00025fce
   158f8:	000259c5 	.word	0x000259c5

000158fc <bt_smp_pkey_ready>:
	sc_public_key = pkey;
   158fc:	4b0c      	ldr	r3, [pc, #48]	; (15930 <bt_smp_pkey_ready+0x34>)
{
   158fe:	b510      	push	{r4, lr}
	sc_public_key = pkey;
   15900:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   15902:	b918      	cbnz	r0, 1590c <bt_smp_pkey_ready+0x10>
}
   15904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   15908:	f7fe be36 	b.w	14578 <bt_smp_pkey_ready.part.0>
	z_impl_k_sem_give(sem);
   1590c:	4809      	ldr	r0, [pc, #36]	; (15934 <bt_smp_pkey_ready+0x38>)
   1590e:	f004 f893 	bl	19a38 <z_impl_k_sem_give>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15912:	4b09      	ldr	r3, [pc, #36]	; (15938 <bt_smp_pkey_ready+0x3c>)
		err = smp_public_key_periph(smp);
   15914:	1f1c      	subs	r4, r3, #4
   15916:	e8d3 3faf 	lda	r3, [r3]
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   1591a:	065b      	lsls	r3, r3, #25
   1591c:	d507      	bpl.n	1592e <bt_smp_pkey_ready+0x32>
		err = smp_public_key_periph(smp);
   1591e:	4620      	mov	r0, r4
   15920:	f7fe ffba 	bl	14898 <smp_public_key_periph>
		if (err) {
   15924:	4601      	mov	r1, r0
   15926:	b110      	cbz	r0, 1592e <bt_smp_pkey_ready+0x32>
			smp_error(smp, err);
   15928:	4620      	mov	r0, r4
   1592a:	f7ff fed7 	bl	156dc <smp_error>
}
   1592e:	bd10      	pop	{r4, pc}
   15930:	20009f3c 	.word	0x20009f3c
   15934:	2000894c 	.word	0x2000894c
   15938:	2000991c 	.word	0x2000991c

0001593c <smp_ident_addr_info>:
{
   1593c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   15940:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   15944:	f8d1 8008 	ldr.w	r8, [r1, #8]
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   15948:	f023 0302 	bic.w	r3, r3, #2
   1594c:	f880 30e9 	strb.w	r3, [r0, #233]	; 0xe9
	struct bt_conn *conn = smp->chan.chan.conn;
   15950:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   15954:	f898 3000 	ldrb.w	r3, [r8]
{
   15958:	4604      	mov	r4, r0
   1595a:	af00      	add	r7, sp, #0
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   1595c:	f105 0988 	add.w	r9, r5, #136	; 0x88
   15960:	b3c3      	cbz	r3, 159d4 <smp_ident_addr_info+0x98>
	if (!bt_addr_le_is_identity(&req->addr)) {
   15962:	f898 3006 	ldrb.w	r3, [r8, #6]
   15966:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1596a:	2bc0      	cmp	r3, #192	; 0xc0
   1596c:	d032      	beq.n	159d4 <smp_ident_addr_info+0x98>
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   1596e:	4640      	mov	r0, r8
   15970:	f7f8 fe8a 	bl	e688 <bt_addr_le_str>
   15974:	466e      	mov	r6, sp
   15976:	b08a      	sub	sp, #40	; 0x28
   15978:	466c      	mov	r4, sp
   1597a:	f240 3a01 	movw	sl, #769	; 0x301
   1597e:	4625      	mov	r5, r4
   15980:	4b5b      	ldr	r3, [pc, #364]	; (15af0 <smp_ident_addr_info+0x1b4>)
   15982:	f8df b170 	ldr.w	fp, [pc, #368]	; 15af4 <smp_ident_addr_info+0x1b8>
   15986:	f8df 8170 	ldr.w	r8, [pc, #368]	; 15af8 <smp_ident_addr_info+0x1bc>
   1598a:	e9c4 b006 	strd	fp, r0, [r4, #24]
   1598e:	6163      	str	r3, [r4, #20]
   15990:	f8a4 a020 	strh.w	sl, [r4, #32]
   15994:	f845 8f10 	str.w	r8, [r5, #16]!
   15998:	462a      	mov	r2, r5
   1599a:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1599e:	4857      	ldr	r0, [pc, #348]	; (15afc <smp_ident_addr_info+0x1c0>)
   159a0:	f009 fea3 	bl	1f6ea <z_log_msg_static_create.constprop.0>
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   159a4:	4648      	mov	r0, r9
   159a6:	46b5      	mov	sp, r6
   159a8:	f7f8 fe6e 	bl	e688 <bt_addr_le_str>
   159ac:	46a5      	mov	sp, r4
   159ae:	4b54      	ldr	r3, [pc, #336]	; (15b00 <smp_ident_addr_info+0x1c4>)
   159b0:	61e0      	str	r0, [r4, #28]
   159b2:	462a      	mov	r2, r5
   159b4:	4851      	ldr	r0, [pc, #324]	; (15afc <smp_ident_addr_info+0x1c0>)
   159b6:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   159ba:	e9c4 3b05 	strd	r3, fp, [r4, #20]
   159be:	f8a4 a020 	strh.w	sl, [r4, #32]
   159c2:	f8c4 8010 	str.w	r8, [r4, #16]
   159c6:	f009 fe90 	bl	1f6ea <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_INVALID_PARAMS;
   159ca:	200a      	movs	r0, #10
   159cc:	46b5      	mov	sp, r6
}
   159ce:	46bd      	mov	sp, r7
   159d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return memcmp(a, b, sizeof(*a));
   159d4:	2207      	movs	r2, #7
   159d6:	4641      	mov	r1, r8
   159d8:	4648      	mov	r0, r9
   159da:	f00c f848 	bl	21a6e <memcmp>
	if (!bt_addr_le_eq(&conn->le.dst, &req->addr)) {
   159de:	b168      	cbz	r0, 159fc <smp_ident_addr_info+0xc0>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   159e0:	4641      	mov	r1, r8
   159e2:	7a28      	ldrb	r0, [r5, #8]
   159e4:	f000 fbd8 	bl	16198 <bt_keys_find_addr>
		if (keys) {
   159e8:	4606      	mov	r6, r0
   159ea:	b138      	cbz	r0, 159fc <smp_ident_addr_info+0xc0>
			if (!update_keys_check(smp, keys)) {
   159ec:	4601      	mov	r1, r0
   159ee:	4620      	mov	r0, r4
   159f0:	f009 fe0b 	bl	1f60a <update_keys_check>
   159f4:	b330      	cbz	r0, 15a44 <smp_ident_addr_info+0x108>
			bt_keys_clear(keys);
   159f6:	4630      	mov	r0, r6
   159f8:	f00a f999 	bl	1fd2e <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   159fc:	210d      	movs	r1, #13
   159fe:	1d20      	adds	r0, r4, #4
   15a00:	f009 fdfd 	bl	1f5fe <atomic_test_bit>
   15a04:	2800      	cmp	r0, #0
   15a06:	d062      	beq.n	15ace <smp_ident_addr_info+0x192>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   15a08:	464a      	mov	r2, r9
   15a0a:	2002      	movs	r0, #2
   15a0c:	7a29      	ldrb	r1, [r5, #8]
   15a0e:	f00a f97a 	bl	1fd06 <bt_keys_get_type>
		if (!keys) {
   15a12:	4606      	mov	r6, r0
   15a14:	b9c0      	cbnz	r0, 15a48 <smp_ident_addr_info+0x10c>
			BT_ERR("Unable to get keys for %s",
   15a16:	4648      	mov	r0, r9
   15a18:	f7f8 fe36 	bl	e688 <bt_addr_le_str>
   15a1c:	466c      	mov	r4, sp
   15a1e:	b08a      	sub	sp, #40	; 0x28
   15a20:	466a      	mov	r2, sp
   15a22:	4b38      	ldr	r3, [pc, #224]	; (15b04 <smp_ident_addr_info+0x1c8>)
   15a24:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   15a28:	6153      	str	r3, [r2, #20]
   15a2a:	4b32      	ldr	r3, [pc, #200]	; (15af4 <smp_ident_addr_info+0x1b8>)
   15a2c:	e9c2 3006 	strd	r3, r0, [r2, #24]
   15a30:	f240 3301 	movw	r3, #769	; 0x301
   15a34:	8413      	strh	r3, [r2, #32]
   15a36:	4b30      	ldr	r3, [pc, #192]	; (15af8 <smp_ident_addr_info+0x1bc>)
   15a38:	4830      	ldr	r0, [pc, #192]	; (15afc <smp_ident_addr_info+0x1c0>)
   15a3a:	f842 3f10 	str.w	r3, [r2, #16]!
   15a3e:	f009 fe54 	bl	1f6ea <z_log_msg_static_create.constprop.0>
   15a42:	46a5      	mov	sp, r4
				return BT_SMP_ERR_UNSPECIFIED;
   15a44:	2008      	movs	r0, #8
   15a46:	e7c2      	b.n	159ce <smp_ident_addr_info+0x92>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   15a48:	78eb      	ldrb	r3, [r5, #3]
   15a4a:	2b00      	cmp	r3, #0
   15a4c:	d139      	bne.n	15ac2 <smp_ident_addr_info+0x186>
			dst = &conn->le.resp_addr;
   15a4e:	f105 0396 	add.w	r3, r5, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
   15a52:	781a      	ldrb	r2, [r3, #0]
   15a54:	2a01      	cmp	r2, #1
   15a56:	d11e      	bne.n	15a96 <smp_ident_addr_info+0x15a>
		if (bt_addr_le_is_rpa(dst)) {
   15a58:	799a      	ldrb	r2, [r3, #6]
   15a5a:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   15a5e:	2a40      	cmp	r2, #64	; 0x40
   15a60:	d119      	bne.n	15a96 <smp_ident_addr_info+0x15a>
   15a62:	f8d3 2001 	ldr.w	r2, [r3, #1]
   15a66:	f8c6 203a 	str.w	r2, [r6, #58]	; 0x3a
   15a6a:	f8b3 3005 	ldrh.w	r3, [r3, #5]
   15a6e:	87f3      	strh	r3, [r6, #62]	; 0x3e
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   15a70:	f895 3088 	ldrb.w	r3, [r5, #136]	; 0x88
   15a74:	b17b      	cbz	r3, 15a96 <smp_ident_addr_info+0x15a>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   15a76:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
   15a7a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   15a7e:	2bc0      	cmp	r3, #192	; 0xc0
   15a80:	d009      	beq.n	15a96 <smp_ident_addr_info+0x15a>
				bt_addr_le_copy(&keys->addr, &req->addr);
   15a82:	4641      	mov	r1, r8
   15a84:	1c70      	adds	r0, r6, #1
   15a86:	f009 fe0a 	bl	1f69e <bt_addr_le_copy>
				bt_addr_le_copy(&conn->le.dst, &req->addr);
   15a8a:	4648      	mov	r0, r9
   15a8c:	f009 fe07 	bl	1f69e <bt_addr_le_copy>
				bt_conn_identity_resolved(conn);
   15a90:	4628      	mov	r0, r5
   15a92:	f7fc f909 	bl	11ca8 <bt_conn_identity_resolved>
	conflict = bt_id_find_conflict(new_bond);
   15a96:	4630      	mov	r0, r6
   15a98:	f7fa fd86 	bl	105a8 <bt_id_find_conflict>
	if (conflict) {
   15a9c:	b1a0      	cbz	r0, 15ac8 <smp_ident_addr_info+0x18c>
		BT_WARN("Refusing new pairing. The old bond must be unpaired first.");
   15a9e:	466d      	mov	r5, sp
   15aa0:	b088      	sub	sp, #32
   15aa2:	466a      	mov	r2, sp
   15aa4:	2403      	movs	r4, #3
   15aa6:	4b18      	ldr	r3, [pc, #96]	; (15b08 <smp_ident_addr_info+0x1cc>)
   15aa8:	4814      	ldr	r0, [pc, #80]	; (15afc <smp_ident_addr_info+0x1c0>)
   15aaa:	6153      	str	r3, [r2, #20]
   15aac:	4b17      	ldr	r3, [pc, #92]	; (15b0c <smp_ident_addr_info+0x1d0>)
   15aae:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   15ab2:	6193      	str	r3, [r2, #24]
   15ab4:	f842 4f10 	str.w	r4, [r2, #16]!
   15ab8:	f009 fe17 	bl	1f6ea <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   15abc:	4620      	mov	r0, r4
   15abe:	46ad      	mov	sp, r5
		if (err) {
   15ac0:	e785      	b.n	159ce <smp_ident_addr_info+0x92>
			dst = &conn->le.init_addr;
   15ac2:	f105 038f 	add.w	r3, r5, #143	; 0x8f
   15ac6:	e7c4      	b.n	15a52 <smp_ident_addr_info+0x116>
	bt_id_add(new_bond);
   15ac8:	4630      	mov	r0, r6
   15aca:	f7fa fd7d 	bl	105c8 <bt_id_add>
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   15ace:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   15ad2:	075b      	lsls	r3, r3, #29
   15ad4:	d503      	bpl.n	15ade <smp_ident_addr_info+0x1a2>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   15ad6:	210a      	movs	r1, #10
   15ad8:	4620      	mov	r0, r4
   15ada:	f009 fe97 	bl	1f80c <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   15ade:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   15ae2:	b109      	cbz	r1, 15ae8 <smp_ident_addr_info+0x1ac>
	return 0;
   15ae4:	2000      	movs	r0, #0
   15ae6:	e772      	b.n	159ce <smp_ident_addr_info+0x92>
		smp_pairing_complete(smp, 0);
   15ae8:	4620      	mov	r0, r4
   15aea:	f7ff fd79 	bl	155e0 <smp_pairing_complete>
   15aee:	e7f9      	b.n	15ae4 <smp_ident_addr_info+0x1a8>
   15af0:	00025fed 	.word	0x00025fed
   15af4:	0002623d 	.word	0x0002623d
   15af8:	01000004 	.word	0x01000004
   15afc:	00022828 	.word	0x00022828
   15b00:	00026005 	.word	0x00026005
   15b04:	00025d89 	.word	0x00025d89
   15b08:	00026011 	.word	0x00026011
   15b0c:	0002622a 	.word	0x0002622a

00015b10 <smp_central_ident>:
{
   15b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15b14:	460b      	mov	r3, r1
   15b16:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   15b18:	f8d0 80ec 	ldr.w	r8, [r0, #236]	; 0xec
{
   15b1c:	af00      	add	r7, sp, #0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   15b1e:	210d      	movs	r1, #13
   15b20:	3004      	adds	r0, #4
   15b22:	f009 fd6c 	bl	1f5fe <atomic_test_bit>
   15b26:	b368      	cbz	r0, 15b84 <smp_central_ident+0x74>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   15b28:	f108 0688 	add.w	r6, r8, #136	; 0x88
   15b2c:	4632      	mov	r2, r6
   15b2e:	2004      	movs	r0, #4
   15b30:	f898 1008 	ldrb.w	r1, [r8, #8]
		struct bt_smp_central_ident *req = (void *)buf->data;
   15b34:	689d      	ldr	r5, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   15b36:	f00a f8e6 	bl	1fd06 <bt_keys_get_type>
		if (!keys) {
   15b3a:	b9d0      	cbnz	r0, 15b72 <smp_central_ident+0x62>
			BT_ERR("Unable to get keys for %s",
   15b3c:	4630      	mov	r0, r6
   15b3e:	f7f8 fda3 	bl	e688 <bt_addr_le_str>
   15b42:	466c      	mov	r4, sp
   15b44:	b08a      	sub	sp, #40	; 0x28
   15b46:	466a      	mov	r2, sp
   15b48:	4b1b      	ldr	r3, [pc, #108]	; (15bb8 <smp_central_ident+0xa8>)
   15b4a:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   15b4e:	6153      	str	r3, [r2, #20]
   15b50:	4b1a      	ldr	r3, [pc, #104]	; (15bbc <smp_central_ident+0xac>)
   15b52:	e9c2 3006 	strd	r3, r0, [r2, #24]
   15b56:	f240 3301 	movw	r3, #769	; 0x301
   15b5a:	8413      	strh	r3, [r2, #32]
   15b5c:	4b18      	ldr	r3, [pc, #96]	; (15bc0 <smp_central_ident+0xb0>)
   15b5e:	4819      	ldr	r0, [pc, #100]	; (15bc4 <smp_central_ident+0xb4>)
   15b60:	f842 3f10 	str.w	r3, [r2, #16]!
   15b64:	f009 fdc1 	bl	1f6ea <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   15b68:	2008      	movs	r0, #8
   15b6a:	46a5      	mov	sp, r4
}
   15b6c:	46bd      	mov	sp, r7
   15b6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15b72:	462a      	mov	r2, r5
   15b74:	f832 3b02 	ldrh.w	r3, [r2], #2
   15b78:	8303      	strh	r3, [r0, #24]
   15b7a:	f8d5 3002 	ldr.w	r3, [r5, #2]
   15b7e:	6103      	str	r3, [r0, #16]
   15b80:	6853      	ldr	r3, [r2, #4]
   15b82:	6143      	str	r3, [r0, #20]
	smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   15b84:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   15b88:	f023 0201 	bic.w	r2, r3, #1
   15b8c:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   15b90:	079a      	lsls	r2, r3, #30
   15b92:	d508      	bpl.n	15ba6 <smp_central_ident+0x96>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   15b94:	2108      	movs	r1, #8
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   15b96:	4620      	mov	r0, r4
   15b98:	f009 fe38 	bl	1f80c <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   15b9c:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   15ba0:	b129      	cbz	r1, 15bae <smp_central_ident+0x9e>
	return 0;
   15ba2:	2000      	movs	r0, #0
   15ba4:	e7e2      	b.n	15b6c <smp_central_ident+0x5c>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   15ba6:	075b      	lsls	r3, r3, #29
   15ba8:	d5f8      	bpl.n	15b9c <smp_central_ident+0x8c>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   15baa:	210a      	movs	r1, #10
   15bac:	e7f3      	b.n	15b96 <smp_central_ident+0x86>
		smp_pairing_complete(smp, 0);
   15bae:	4620      	mov	r0, r4
   15bb0:	f7ff fd16 	bl	155e0 <smp_pairing_complete>
   15bb4:	e7f5      	b.n	15ba2 <smp_central_ident+0x92>
   15bb6:	bf00      	nop
   15bb8:	00025d89 	.word	0x00025d89
   15bbc:	00026209 	.word	0x00026209
   15bc0:	01000004 	.word	0x01000004
   15bc4:	00022828 	.word	0x00022828

00015bc8 <smp_pairing_failed>:
{
   15bc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15bcc:	460e      	mov	r6, r1
   15bce:	af00      	add	r7, sp, #0
   15bd0:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   15bd2:	f8d0 80ec 	ldr.w	r8, [r0, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   15bd6:	f7fe fc75 	bl	144c4 <latch_auth_cb>
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   15bda:	68b6      	ldr	r6, [r6, #8]
	BT_ERR("pairing failed (peer reason 0x%x)", req->reason);
   15bdc:	46e9      	mov	r9, sp
   15bde:	b088      	sub	sp, #32
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   15be0:	4605      	mov	r5, r0
	BT_ERR("pairing failed (peer reason 0x%x)", req->reason);
   15be2:	466a      	mov	r2, sp
   15be4:	7833      	ldrb	r3, [r6, #0]
   15be6:	4915      	ldr	r1, [pc, #84]	; (15c3c <smp_pairing_failed+0x74>)
   15be8:	4815      	ldr	r0, [pc, #84]	; (15c40 <smp_pairing_failed+0x78>)
   15bea:	6151      	str	r1, [r2, #20]
   15bec:	4915      	ldr	r1, [pc, #84]	; (15c44 <smp_pairing_failed+0x7c>)
   15bee:	e9c2 1306 	strd	r1, r3, [r2, #24]
   15bf2:	2304      	movs	r3, #4
   15bf4:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   15bf8:	f842 3f10 	str.w	r3, [r2, #16]!
   15bfc:	f009 fd75 	bl	1f6ea <z_log_msg_static_create.constprop.0>
   15c00:	46cd      	mov	sp, r9
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   15c02:	f104 0904 	add.w	r9, r4, #4
   15c06:	210a      	movs	r1, #10
   15c08:	4648      	mov	r0, r9
   15c0a:	f009 fe96 	bl	1f93a <atomic_test_and_clear_bit>
   15c0e:	b140      	cbz	r0, 15c22 <smp_pairing_failed+0x5a>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   15c10:	b975      	cbnz	r5, 15c30 <smp_pairing_failed+0x68>
	smp_pairing_complete(smp, req->reason);
   15c12:	4620      	mov	r0, r4
   15c14:	7831      	ldrb	r1, [r6, #0]
   15c16:	f7ff fce3 	bl	155e0 <smp_pairing_complete>
}
   15c1a:	2000      	movs	r0, #0
   15c1c:	46bd      	mov	sp, r7
   15c1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   15c22:	210b      	movs	r1, #11
   15c24:	4648      	mov	r0, r9
   15c26:	f009 fe88 	bl	1f93a <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   15c2a:	2800      	cmp	r0, #0
   15c2c:	d1f0      	bne.n	15c10 <smp_pairing_failed+0x48>
   15c2e:	e7f0      	b.n	15c12 <smp_pairing_failed+0x4a>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   15c30:	692b      	ldr	r3, [r5, #16]
   15c32:	2b00      	cmp	r3, #0
   15c34:	d0ed      	beq.n	15c12 <smp_pairing_failed+0x4a>
			smp_auth_cb->cancel(conn);
   15c36:	4640      	mov	r0, r8
   15c38:	4798      	blx	r3
   15c3a:	e7ea      	b.n	15c12 <smp_pairing_failed+0x4a>
   15c3c:	00026050 	.word	0x00026050
   15c40:	00022828 	.word	0x00022828
   15c44:	000261e5 	.word	0x000261e5

00015c48 <bt_smp_encrypt_change>:
{
   15c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c4c:	b089      	sub	sp, #36	; 0x24
	struct bt_conn *conn = chan->conn;
   15c4e:	4605      	mov	r5, r0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   15c50:	f1a0 06e8 	sub.w	r6, r0, #232	; 0xe8
{
   15c54:	4604      	mov	r4, r0
   15c56:	4688      	mov	r8, r1
   15c58:	af00      	add	r7, sp, #0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   15c5a:	2101      	movs	r1, #1
   15c5c:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->conn;
   15c5e:	f855 99ec 	ldr.w	r9, [r5], #-236
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   15c62:	f009 fe6a 	bl	1f93a <atomic_test_and_clear_bit>
   15c66:	b338      	cbz	r0, 15cb8 <bt_smp_encrypt_change+0x70>
	if (hci_status) {
   15c68:	f1b8 0f00 	cmp.w	r8, #0
   15c6c:	d019      	beq.n	15ca2 <bt_smp_encrypt_change+0x5a>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   15c6e:	2103      	movs	r1, #3
   15c70:	4630      	mov	r0, r6
   15c72:	f009 fcc4 	bl	1f5fe <atomic_test_bit>
   15c76:	b1f8      	cbz	r0, 15cb8 <bt_smp_encrypt_change+0x70>
			uint8_t smp_err = smp_err_get(
   15c78:	4640      	mov	r0, r8
   15c7a:	f7f9 fd4f 	bl	f71c <bt_security_err_get>
	switch (auth_err) {
   15c7e:	3801      	subs	r0, #1
   15c80:	b2c0      	uxtb	r0, r0
   15c82:	2808      	cmp	r0, #8
			uint8_t smp_err = smp_err_get(
   15c84:	bf8c      	ite	hi
   15c86:	2400      	movhi	r4, #0
   15c88:	4b7a      	ldrls	r3, [pc, #488]	; (15e74 <bt_smp_encrypt_change+0x22c>)
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   15c8a:	f04f 0102 	mov.w	r1, #2
   15c8e:	bf98      	it	ls
   15c90:	5c1c      	ldrbls	r4, [r3, r0]
   15c92:	4630      	mov	r0, r6
   15c94:	f009 fdba 	bl	1f80c <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
   15c98:	4621      	mov	r1, r4
		smp_pairing_complete(smp, 0);
   15c9a:	4628      	mov	r0, r5
   15c9c:	f7ff fca0 	bl	155e0 <smp_pairing_complete>
   15ca0:	e00a      	b.n	15cb8 <bt_smp_encrypt_change+0x70>
	if (!conn->encrypt) {
   15ca2:	f899 300b 	ldrb.w	r3, [r9, #11]
   15ca6:	b13b      	cbz	r3, 15cb8 <bt_smp_encrypt_change+0x70>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   15ca8:	2103      	movs	r1, #3
   15caa:	4630      	mov	r0, r6
   15cac:	f009 fca7 	bl	1f5fe <atomic_test_bit>
   15cb0:	b930      	cbnz	r0, 15cc0 <bt_smp_encrypt_change+0x78>
		smp_reset(smp);
   15cb2:	4628      	mov	r0, r5
   15cb4:	f009 fe53 	bl	1f95e <smp_reset>
}
   15cb8:	3724      	adds	r7, #36	; 0x24
   15cba:	46bd      	mov	sp, r7
   15cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   15cc0:	2105      	movs	r1, #5
   15cc2:	4630      	mov	r0, r6
   15cc4:	f009 fc9b 	bl	1f5fe <atomic_test_bit>
   15cc8:	b1b8      	cbz	r0, 15cfa <bt_smp_encrypt_change+0xb2>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   15cca:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   15cce:	071a      	lsls	r2, r3, #28
   15cd0:	d507      	bpl.n	15ce2 <bt_smp_encrypt_change+0x9a>
   15cd2:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   15cd6:	071b      	lsls	r3, r3, #28
   15cd8:	d503      	bpl.n	15ce2 <bt_smp_encrypt_change+0x9a>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   15cda:	2111      	movs	r1, #17
   15cdc:	4630      	mov	r0, r6
   15cde:	f009 fd95 	bl	1f80c <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   15ce2:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   15ce6:	f023 0308 	bic.w	r3, r3, #8
   15cea:	f804 3c04 	strb.w	r3, [r4, #-4]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   15cee:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   15cf2:	f023 0308 	bic.w	r3, r3, #8
   15cf6:	f804 3c03 	strb.w	r3, [r4, #-3]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   15cfa:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   15cfe:	07d8      	lsls	r0, r3, #31
   15d00:	d524      	bpl.n	15d4c <bt_smp_encrypt_change+0x104>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   15d02:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   15d04:	4628      	mov	r0, r5
   15d06:	f009 fd81 	bl	1f80c <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   15d0a:	2102      	movs	r1, #2
   15d0c:	4630      	mov	r0, r6
   15d0e:	f009 fd7d 	bl	1f80c <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
   15d12:	6823      	ldr	r3, [r4, #0]
	if (!keys) {
   15d14:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
   15d18:	bb02      	cbnz	r2, 15d5c <bt_smp_encrypt_change+0x114>
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   15d1a:	f103 0088 	add.w	r0, r3, #136	; 0x88
   15d1e:	f7f8 fcb3 	bl	e688 <bt_addr_le_str>
   15d22:	466c      	mov	r4, sp
   15d24:	b08a      	sub	sp, #40	; 0x28
   15d26:	466a      	mov	r2, sp
   15d28:	4b53      	ldr	r3, [pc, #332]	; (15e78 <bt_smp_encrypt_change+0x230>)
   15d2a:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   15d2e:	6153      	str	r3, [r2, #20]
   15d30:	4b52      	ldr	r3, [pc, #328]	; (15e7c <bt_smp_encrypt_change+0x234>)
   15d32:	e9c2 3006 	strd	r3, r0, [r2, #24]
   15d36:	f240 3301 	movw	r3, #769	; 0x301
   15d3a:	8413      	strh	r3, [r2, #32]
   15d3c:	4b50      	ldr	r3, [pc, #320]	; (15e80 <bt_smp_encrypt_change+0x238>)
   15d3e:	4851      	ldr	r0, [pc, #324]	; (15e84 <bt_smp_encrypt_change+0x23c>)
   15d40:	f842 3f10 	str.w	r3, [r2, #16]!
   15d44:	f009 fcd1 	bl	1f6ea <z_log_msg_static_create.constprop.0>
   15d48:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   15d4a:	e7b5      	b.n	15cb8 <bt_smp_encrypt_change+0x70>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   15d4c:	0799      	lsls	r1, r3, #30
   15d4e:	d501      	bpl.n	15d54 <bt_smp_encrypt_change+0x10c>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   15d50:	2108      	movs	r1, #8
   15d52:	e7d7      	b.n	15d04 <bt_smp_encrypt_change+0xbc>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   15d54:	075a      	lsls	r2, r3, #29
   15d56:	d5d8      	bpl.n	15d0a <bt_smp_encrypt_change+0xc2>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   15d58:	210a      	movs	r1, #10
   15d5a:	e7d3      	b.n	15d04 <bt_smp_encrypt_change+0xbc>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   15d5c:	2105      	movs	r1, #5
   15d5e:	f009 fc4e 	bl	1f5fe <atomic_test_bit>
   15d62:	b9e0      	cbnz	r0, 15d9e <bt_smp_encrypt_change+0x156>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
   15d64:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   15d68:	07db      	lsls	r3, r3, #31
   15d6a:	d518      	bpl.n	15d9e <bt_smp_encrypt_change+0x156>
	struct bt_keys *keys = conn->le.keys;
   15d6c:	6823      	ldr	r3, [r4, #0]
		if (bt_rand((void *)&rand, sizeof(rand))) {
   15d6e:	211a      	movs	r1, #26
   15d70:	1d38      	adds	r0, r7, #4
	struct bt_keys *keys = conn->le.keys;
   15d72:	f8d3 80b4 	ldr.w	r8, [r3, #180]	; 0xb4
		if (bt_rand((void *)&rand, sizeof(rand))) {
   15d76:	f7fb f9c9 	bl	1110c <bt_rand>
   15d7a:	4682      	mov	sl, r0
   15d7c:	b1a0      	cbz	r0, 15da8 <bt_smp_encrypt_change+0x160>
			BT_ERR("Unable to get random bytes");
   15d7e:	466e      	mov	r6, sp
   15d80:	b088      	sub	sp, #32
   15d82:	466a      	mov	r2, sp
   15d84:	4b40      	ldr	r3, [pc, #256]	; (15e88 <bt_smp_encrypt_change+0x240>)
			BT_ERR("Unable to allocate Encrypt Info buffer");
   15d86:	6153      	str	r3, [r2, #20]
   15d88:	4b40      	ldr	r3, [pc, #256]	; (15e8c <bt_smp_encrypt_change+0x244>)
   15d8a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15d8e:	6193      	str	r3, [r2, #24]
   15d90:	2303      	movs	r3, #3
   15d92:	483c      	ldr	r0, [pc, #240]	; (15e84 <bt_smp_encrypt_change+0x23c>)
   15d94:	f842 3f10 	str.w	r3, [r2, #16]!
   15d98:	f009 fca7 	bl	1f6ea <z_log_msg_static_create.constprop.0>
   15d9c:	46b5      	mov	sp, r6
	if (!smp->local_dist && !smp->remote_dist) {
   15d9e:	f834 1c04 	ldrh.w	r1, [r4, #-4]
   15da2:	2900      	cmp	r1, #0
   15da4:	d188      	bne.n	15cb8 <bt_smp_encrypt_change+0x70>
   15da6:	e778      	b.n	15c9a <bt_smp_encrypt_change+0x52>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
   15da8:	2106      	movs	r1, #6
   15daa:	4628      	mov	r0, r5
   15dac:	f009 fd3e 	bl	1f82c <smp_create_pdu.constprop.0>
		if (!buf) {
   15db0:	4681      	mov	r9, r0
   15db2:	b920      	cbnz	r0, 15dbe <bt_smp_encrypt_change+0x176>
			BT_ERR("Unable to allocate Encrypt Info buffer");
   15db4:	466e      	mov	r6, sp
   15db6:	b088      	sub	sp, #32
   15db8:	466a      	mov	r2, sp
   15dba:	4b35      	ldr	r3, [pc, #212]	; (15e90 <bt_smp_encrypt_change+0x248>)
   15dbc:	e7e3      	b.n	15d86 <bt_smp_encrypt_change+0x13e>
	return net_buf_simple_add(&buf->b, len);
   15dbe:	2110      	movs	r1, #16
   15dc0:	3008      	adds	r0, #8
   15dc2:	f00a f863 	bl	1fe8c <net_buf_simple_add>
   15dc6:	f898 200c 	ldrb.w	r2, [r8, #12]
   15dca:	1d39      	adds	r1, r7, #4
   15dcc:	4683      	mov	fp, r0
   15dce:	f00b fe5e 	bl	21a8e <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
   15dd2:	f898 000c 	ldrb.w	r0, [r8, #12]
   15dd6:	280f      	cmp	r0, #15
   15dd8:	d805      	bhi.n	15de6 <bt_smp_encrypt_change+0x19e>
__ssp_bos_icheck3(memset, void *, int)
   15dda:	f1c0 0210 	rsb	r2, r0, #16
   15dde:	4651      	mov	r1, sl
   15de0:	4458      	add	r0, fp
   15de2:	f00b fe61 	bl	21aa8 <memset>
		smp_send(smp, buf, NULL, NULL);
   15de6:	4649      	mov	r1, r9
   15de8:	2200      	movs	r2, #0
   15dea:	4628      	mov	r0, r5
   15dec:	f009 fc60 	bl	1f6b0 <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_CENTRAL_IDENT,
   15df0:	2107      	movs	r1, #7
   15df2:	4628      	mov	r0, r5
   15df4:	f009 fd1a 	bl	1f82c <smp_create_pdu.constprop.0>
		if (!buf) {
   15df8:	4681      	mov	r9, r0
   15dfa:	b920      	cbnz	r0, 15e06 <bt_smp_encrypt_change+0x1be>
			BT_ERR("Unable to allocate Central Ident buffer");
   15dfc:	466e      	mov	r6, sp
   15dfe:	b088      	sub	sp, #32
   15e00:	466a      	mov	r2, sp
   15e02:	4b24      	ldr	r3, [pc, #144]	; (15e94 <bt_smp_encrypt_change+0x24c>)
   15e04:	e7bf      	b.n	15d86 <bt_smp_encrypt_change+0x13e>
   15e06:	210a      	movs	r1, #10
   15e08:	3008      	adds	r0, #8
   15e0a:	f00a f83f 	bl	1fe8c <net_buf_simple_add>
   15e0e:	4603      	mov	r3, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   15e10:	f107 0214 	add.w	r2, r7, #20
   15e14:	ca03      	ldmia	r2!, {r0, r1}
   15e16:	f8c3 0002 	str.w	r0, [r3, #2]
   15e1a:	f8c3 1006 	str.w	r1, [r3, #6]
   15e1e:	8bba      	ldrh	r2, [r7, #28]
		smp_send(smp, buf, smp_ident_sent, NULL);
   15e20:	4649      	mov	r1, r9
   15e22:	4628      	mov	r0, r5
   15e24:	801a      	strh	r2, [r3, #0]
   15e26:	4a1c      	ldr	r2, [pc, #112]	; (15e98 <bt_smp_encrypt_change+0x250>)
   15e28:	f009 fc42 	bl	1f6b0 <smp_send.constprop.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   15e2c:	4630      	mov	r0, r6
   15e2e:	210d      	movs	r1, #13
   15e30:	f009 fbe5 	bl	1f5fe <atomic_test_bit>
   15e34:	f107 0614 	add.w	r6, r7, #20
   15e38:	2800      	cmp	r0, #0
   15e3a:	d0b0      	beq.n	15d9e <bt_smp_encrypt_change+0x156>
			bt_keys_add_type(keys, BT_KEYS_PERIPH_LTK);
   15e3c:	2101      	movs	r1, #1
   15e3e:	4640      	mov	r0, r8
   15e40:	f009 ff71 	bl	1fd26 <bt_keys_add_type>
   15e44:	1d3b      	adds	r3, r7, #4
   15e46:	f108 0c4a 	add.w	ip, r8, #74	; 0x4a
   15e4a:	461a      	mov	r2, r3
   15e4c:	ca03      	ldmia	r2!, {r0, r1}
   15e4e:	42b2      	cmp	r2, r6
   15e50:	f8cc 0000 	str.w	r0, [ip]
   15e54:	f8cc 1004 	str.w	r1, [ip, #4]
   15e58:	4613      	mov	r3, r2
   15e5a:	f10c 0c08 	add.w	ip, ip, #8
   15e5e:	d1f4      	bne.n	15e4a <bt_smp_encrypt_change+0x202>
   15e60:	4633      	mov	r3, r6
   15e62:	cb03      	ldmia	r3!, {r0, r1}
   15e64:	8bbb      	ldrh	r3, [r7, #28]
   15e66:	f8c8 0040 	str.w	r0, [r8, #64]	; 0x40
   15e6a:	f8c8 1044 	str.w	r1, [r8, #68]	; 0x44
   15e6e:	f8a8 3048 	strh.w	r3, [r8, #72]	; 0x48
   15e72:	e794      	b.n	15d9e <bt_smp_encrypt_change+0x156>
   15e74:	0002611d 	.word	0x0002611d
   15e78:	00026076 	.word	0x00026076
   15e7c:	0002616a 	.word	0x0002616a
   15e80:	01000004 	.word	0x01000004
   15e84:	00022828 	.word	0x00022828
   15e88:	0002608f 	.word	0x0002608f
   15e8c:	00026153 	.word	0x00026153
   15e90:	000260ae 	.word	0x000260ae
   15e94:	000260d9 	.word	0x000260d9
   15e98:	0001fcd9 	.word	0x0001fcd9

00015e9c <smp_timeout>:
{
   15e9c:	b5b0      	push	{r4, r5, r7, lr}
   15e9e:	af00      	add	r7, sp, #0
	BT_ERR("SMP Timeout");
   15ea0:	466d      	mov	r5, sp
   15ea2:	b088      	sub	sp, #32
{
   15ea4:	4604      	mov	r4, r0
	BT_ERR("SMP Timeout");
   15ea6:	466a      	mov	r2, sp
   15ea8:	4b0c      	ldr	r3, [pc, #48]	; (15edc <smp_timeout+0x40>)
   15eaa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15eae:	6153      	str	r3, [r2, #20]
   15eb0:	4b0b      	ldr	r3, [pc, #44]	; (15ee0 <smp_timeout+0x44>)
   15eb2:	480c      	ldr	r0, [pc, #48]	; (15ee4 <smp_timeout+0x48>)
   15eb4:	6193      	str	r3, [r2, #24]
   15eb6:	2303      	movs	r3, #3
   15eb8:	f842 3f10 	str.w	r3, [r2, #16]!
   15ebc:	f009 fc15 	bl	1f6ea <z_log_msg_static_create.constprop.0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   15ec0:	f5a4 70bc 	sub.w	r0, r4, #376	; 0x178
   15ec4:	46ad      	mov	sp, r5
   15ec6:	2108      	movs	r1, #8
   15ec8:	f7ff fb8a 	bl	155e0 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   15ecc:	2104      	movs	r1, #4
   15ece:	f5a4 70ba 	sub.w	r0, r4, #372	; 0x174
   15ed2:	f009 fc9b 	bl	1f80c <atomic_set_bit>
}
   15ed6:	46bd      	mov	sp, r7
   15ed8:	bdb0      	pop	{r4, r5, r7, pc}
   15eda:	bf00      	nop
   15edc:	00026105 	.word	0x00026105
   15ee0:	00026147 	.word	0x00026147
   15ee4:	00022828 	.word	0x00022828

00015ee8 <bt_smp_update_keys>:
{
   15ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15eec:	af00      	add	r7, sp, #0
   15eee:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   15ef0:	f009 fbfe 	bl	1f6f0 <smp_chan_get>
	if (!smp) {
   15ef4:	4605      	mov	r5, r0
   15ef6:	b370      	cbz	r0, 15f56 <bt_smp_update_keys+0x6e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   15ef8:	1d06      	adds	r6, r0, #4
   15efa:	2103      	movs	r1, #3
   15efc:	4630      	mov	r0, r6
   15efe:	f009 fb7e 	bl	1f5fe <atomic_test_bit>
   15f02:	b340      	cbz	r0, 15f56 <bt_smp_update_keys+0x6e>
	if (conn->le.keys) {
   15f04:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   15f08:	b108      	cbz	r0, 15f0e <bt_smp_update_keys+0x26>
		bt_keys_clear(conn->le.keys);
   15f0a:	f009 ff10 	bl	1fd2e <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   15f0e:	f104 0888 	add.w	r8, r4, #136	; 0x88
   15f12:	4641      	mov	r1, r8
   15f14:	7a20      	ldrb	r0, [r4, #8]
   15f16:	f000 f89f 	bl	16058 <bt_keys_get_addr>
   15f1a:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
   15f1e:	b9e8      	cbnz	r0, 15f5c <bt_smp_update_keys+0x74>
		BT_ERR("Unable to get keys for %s",
   15f20:	4640      	mov	r0, r8
   15f22:	f7f8 fbb1 	bl	e688 <bt_addr_le_str>
   15f26:	466c      	mov	r4, sp
   15f28:	b08a      	sub	sp, #40	; 0x28
   15f2a:	466a      	mov	r2, sp
   15f2c:	4b3b      	ldr	r3, [pc, #236]	; (1601c <bt_smp_update_keys+0x134>)
   15f2e:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   15f32:	6153      	str	r3, [r2, #20]
   15f34:	4b3a      	ldr	r3, [pc, #232]	; (16020 <bt_smp_update_keys+0x138>)
   15f36:	e9c2 3006 	strd	r3, r0, [r2, #24]
   15f3a:	f240 3301 	movw	r3, #769	; 0x301
   15f3e:	8413      	strh	r3, [r2, #32]
   15f40:	4b38      	ldr	r3, [pc, #224]	; (16024 <bt_smp_update_keys+0x13c>)
   15f42:	4839      	ldr	r0, [pc, #228]	; (16028 <bt_smp_update_keys+0x140>)
   15f44:	f842 3f10 	str.w	r3, [r2, #16]!
   15f48:	f009 fbcf 	bl	1f6ea <z_log_msg_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   15f4c:	2108      	movs	r1, #8
   15f4e:	46a5      	mov	sp, r4
   15f50:	4628      	mov	r0, r5
   15f52:	f7ff fbc3 	bl	156dc <smp_error>
}
   15f56:	46bd      	mov	sp, r7
   15f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   15f5c:	210e      	movs	r1, #14
   15f5e:	4630      	mov	r0, r6
   15f60:	f009 fb4d 	bl	1f5fe <atomic_test_bit>
   15f64:	b128      	cbz	r0, 15f72 <bt_smp_update_keys+0x8a>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   15f66:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   15f6a:	7b53      	ldrb	r3, [r2, #13]
   15f6c:	f043 0302 	orr.w	r3, r3, #2
   15f70:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   15f72:	7a2a      	ldrb	r2, [r5, #8]
		conn->le.keys->flags |= BT_KEYS_OOB;
   15f74:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
	switch (smp->method) {
   15f78:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_OOB;
   15f7a:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
   15f7c:	d83a      	bhi.n	15ff4 <bt_smp_update_keys+0x10c>
   15f7e:	2a00      	cmp	r2, #0
   15f80:	d03f      	beq.n	16002 <bt_smp_update_keys+0x11a>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   15f82:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   15f86:	7b53      	ldrb	r3, [r2, #13]
   15f88:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   15f8c:	7353      	strb	r3, [r2, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   15f8e:	7d2b      	ldrb	r3, [r5, #20]
   15f90:	7b69      	ldrb	r1, [r5, #13]
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   15f92:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
	return MIN(req->max_key_size, rsp->max_key_size);
   15f96:	428b      	cmp	r3, r1
   15f98:	bf28      	it	cs
   15f9a:	460b      	movcs	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   15f9c:	4630      	mov	r0, r6
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   15f9e:	7313      	strb	r3, [r2, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   15fa0:	2105      	movs	r1, #5
   15fa2:	f009 fb2c 	bl	1f5fe <atomic_test_bit>
   15fa6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
		conn->le.keys->flags |= BT_KEYS_SC;
   15faa:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   15fac:	b390      	cbz	r0, 16014 <bt_smp_update_keys+0x12c>
		conn->le.keys->flags |= BT_KEYS_SC;
   15fae:	f042 0210 	orr.w	r2, r2, #16
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   15fb2:	210d      	movs	r1, #13
   15fb4:	4630      	mov	r0, r6
		conn->le.keys->flags |= BT_KEYS_SC;
   15fb6:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   15fb8:	f009 fb21 	bl	1f5fe <atomic_test_bit>
   15fbc:	2800      	cmp	r0, #0
   15fbe:	d0ca      	beq.n	15f56 <bt_smp_update_keys+0x6e>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   15fc0:	2120      	movs	r1, #32
   15fc2:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   15fc6:	f009 feae 	bl	1fd26 <bt_keys_add_type>
   15fca:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   15fce:	f105 0247 	add.w	r2, r5, #71	; 0x47
   15fd2:	331a      	adds	r3, #26
   15fd4:	3557      	adds	r5, #87	; 0x57
   15fd6:	f852 1b04 	ldr.w	r1, [r2], #4
   15fda:	42aa      	cmp	r2, r5
   15fdc:	f843 1b04 	str.w	r1, [r3], #4
   15fe0:	d1f9      	bne.n	15fd6 <bt_smp_update_keys+0xee>
__ssp_bos_icheck3(memset, void *, int)
   15fe2:	2300      	movs	r3, #0
   15fe4:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   15fe8:	6113      	str	r3, [r2, #16]
   15fea:	6153      	str	r3, [r2, #20]
   15fec:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   15ff0:	8313      	strh	r3, [r2, #24]
   15ff2:	e7b0      	b.n	15f56 <bt_smp_update_keys+0x6e>
	switch (smp->method) {
   15ff4:	3a05      	subs	r2, #5
   15ff6:	2a01      	cmp	r2, #1
   15ff8:	d803      	bhi.n	16002 <bt_smp_update_keys+0x11a>
		conn->le.keys->flags |= BT_KEYS_OOB;
   15ffa:	f043 0320 	orr.w	r3, r3, #32
   15ffe:	734b      	strb	r3, [r1, #13]
   16000:	e7bf      	b.n	15f82 <bt_smp_update_keys+0x9a>
		conn->le.keys->flags &= ~BT_KEYS_OOB;
   16002:	f023 0320 	bic.w	r3, r3, #32
   16006:	734b      	strb	r3, [r1, #13]
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   16008:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   1600c:	7b53      	ldrb	r3, [r2, #13]
   1600e:	f023 0301 	bic.w	r3, r3, #1
   16012:	e7bb      	b.n	15f8c <bt_smp_update_keys+0xa4>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   16014:	f022 0210 	bic.w	r2, r2, #16
   16018:	735a      	strb	r2, [r3, #13]
   1601a:	e79c      	b.n	15f56 <bt_smp_update_keys+0x6e>
   1601c:	00025d89 	.word	0x00025d89
   16020:	000262a3 	.word	0x000262a3
   16024:	01000004 	.word	0x01000004
   16028:	00022828 	.word	0x00022828

0001602c <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   1602c:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1602e:	4b07      	ldr	r3, [pc, #28]	; (1604c <bt_smp_init+0x20>)
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   16030:	4807      	ldr	r0, [pc, #28]	; (16050 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   16032:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   16036:	f003 0306 	and.w	r3, r3, #6
   1603a:	1f9a      	subs	r2, r3, #6
   1603c:	4253      	negs	r3, r2
   1603e:	4153      	adcs	r3, r2
   16040:	4a04      	ldr	r2, [pc, #16]	; (16054 <bt_smp_init+0x28>)
   16042:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
   16044:	f7fb f88c 	bl	11160 <bt_pub_key_gen>
	}

	return smp_self_test();
}
   16048:	2000      	movs	r0, #0
   1604a:	bd08      	pop	{r3, pc}
   1604c:	20008000 	.word	0x20008000
   16050:	2000846c 	.word	0x2000846c
   16054:	2000a292 	.word	0x2000a292

00016058 <bt_keys_get_addr>:
	return kdata.in_use;
}
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   16058:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   1605a:	4c10      	ldr	r4, [pc, #64]	; (1609c <bt_keys_get_addr+0x44>)
{
   1605c:	4606      	mov	r6, r0
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   1605e:	f814 3b01 	ldrb.w	r3, [r4], #1
{
   16062:	460d      	mov	r5, r1
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   16064:	4283      	cmp	r3, r0
   16066:	d007      	beq.n	16078 <bt_keys_get_addr+0x20>
	return memcmp(a, b, sizeof(*a));
   16068:	2207      	movs	r2, #7
   1606a:	490d      	ldr	r1, [pc, #52]	; (160a0 <bt_keys_get_addr+0x48>)
   1606c:	480d      	ldr	r0, [pc, #52]	; (160a4 <bt_keys_get_addr+0x4c>)
   1606e:	f00b fcfe 	bl	21a6e <memcmp>
			first_free_slot = oldest - &key_pool[0];
		}
	}

#endif  /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */
	if (first_free_slot < ARRAY_SIZE(key_pool)) {
   16072:	b148      	cbz	r0, 16088 <bt_keys_get_addr+0x30>
		return keys;
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
   16074:	2000      	movs	r0, #0
}
   16076:	bd70      	pop	{r4, r5, r6, pc}
   16078:	2207      	movs	r2, #7
   1607a:	4620      	mov	r0, r4
   1607c:	f00b fcf7 	bl	21a6e <memcmp>
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   16080:	2800      	cmp	r0, #0
   16082:	d1f1      	bne.n	16068 <bt_keys_get_addr+0x10>
		keys = &key_pool[i];
   16084:	4805      	ldr	r0, [pc, #20]	; (1609c <bt_keys_get_addr+0x44>)
   16086:	e7f6      	b.n	16076 <bt_keys_get_addr+0x1e>
		keys->id = id;
   16088:	f804 6c01 	strb.w	r6, [r4, #-1]
	memcpy(dst, src, sizeof(*dst));
   1608c:	682b      	ldr	r3, [r5, #0]
   1608e:	6023      	str	r3, [r4, #0]
   16090:	88ab      	ldrh	r3, [r5, #4]
   16092:	80a3      	strh	r3, [r4, #4]
   16094:	79ab      	ldrb	r3, [r5, #6]
   16096:	71a3      	strb	r3, [r4, #6]
}
   16098:	e7f4      	b.n	16084 <bt_keys_get_addr+0x2c>
   1609a:	bf00      	nop
   1609c:	20009f40 	.word	0x20009f40
   160a0:	000242c4 	.word	0x000242c4
   160a4:	20009f41 	.word	0x20009f41

000160a8 <bt_keys_foreach_type>:
	}
}

void bt_keys_foreach_type(enum bt_keys_type type, void (*func)(struct bt_keys *keys, void *data),
			  void *data)
{
   160a8:	b410      	push	{r4}
   160aa:	460b      	mov	r3, r1
   160ac:	4611      	mov	r1, r2
	int i;

	__ASSERT_NO_MSG(func != NULL);

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
   160ae:	4a04      	ldr	r2, [pc, #16]	; (160c0 <bt_keys_foreach_type+0x18>)
   160b0:	89d4      	ldrh	r4, [r2, #14]
   160b2:	4204      	tst	r4, r0
   160b4:	d002      	beq.n	160bc <bt_keys_foreach_type+0x14>
			func(&key_pool[i], data);
   160b6:	4610      	mov	r0, r2
		}
	}
}
   160b8:	bc10      	pop	{r4}
			func(&key_pool[i], data);
   160ba:	4718      	bx	r3
}
   160bc:	bc10      	pop	{r4}
   160be:	4770      	bx	lr
   160c0:	20009f40 	.word	0x20009f40

000160c4 <bt_keys_find>:

struct bt_keys *bt_keys_find(enum bt_keys_type type, uint8_t id, const bt_addr_le_t *addr)
{
   160c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	__ASSERT_NO_MSG(addr != NULL);

	BT_DBG("type %d %s", type, bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   160c8:	2300      	movs	r3, #0
{
   160ca:	4605      	mov	r5, r0
   160cc:	460e      	mov	r6, r1
   160ce:	4617      	mov	r7, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   160d0:	f8df 8030 	ldr.w	r8, [pc, #48]	; 16104 <bt_keys_find+0x40>
   160d4:	f8b8 400e 	ldrh.w	r4, [r8, #14]
   160d8:	f898 2000 	ldrb.w	r2, [r8]
   160dc:	402c      	ands	r4, r5
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   160de:	b113      	cbz	r3, 160e6 <bt_keys_find+0x22>
		    bt_addr_le_eq(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
   160e0:	2000      	movs	r0, #0
}
   160e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   160e6:	2c00      	cmp	r4, #0
   160e8:	d0fa      	beq.n	160e0 <bt_keys_find+0x1c>
   160ea:	4296      	cmp	r6, r2
   160ec:	d1f8      	bne.n	160e0 <bt_keys_find+0x1c>
	return memcmp(a, b, sizeof(*a));
   160ee:	2207      	movs	r2, #7
   160f0:	4639      	mov	r1, r7
   160f2:	4805      	ldr	r0, [pc, #20]	; (16108 <bt_keys_find+0x44>)
   160f4:	f00b fcbb 	bl	21a6e <memcmp>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   160f8:	2301      	movs	r3, #1
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   160fa:	2800      	cmp	r0, #0
   160fc:	d1ea      	bne.n	160d4 <bt_keys_find+0x10>
			return &key_pool[i];
   160fe:	4801      	ldr	r0, [pc, #4]	; (16104 <bt_keys_find+0x40>)
   16100:	e7ef      	b.n	160e2 <bt_keys_find+0x1e>
   16102:	bf00      	nop
   16104:	20009f40 	.word	0x20009f40
   16108:	20009f41 	.word	0x20009f41

0001610c <bt_keys_find_irk>:

	return keys;
}

struct bt_keys *bt_keys_find_irk(uint8_t id, const bt_addr_le_t *addr)
{
   1610c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1610e:	780b      	ldrb	r3, [r1, #0]
   16110:	4606      	mov	r6, r0
   16112:	2b01      	cmp	r3, #1
   16114:	460c      	mov	r4, r1
   16116:	d001      	beq.n	1611c <bt_keys_find_irk+0x10>
	__ASSERT_NO_MSG(addr != NULL);

	BT_DBG("%s", bt_addr_le_str(addr));

	if (!bt_addr_le_is_rpa(addr)) {
		return NULL;
   16118:	2000      	movs	r0, #0
	}

	BT_DBG("No IRK for %s", bt_addr_le_str(addr));

	return NULL;
}
   1611a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   1611c:	798b      	ldrb	r3, [r1, #6]
   1611e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   16122:	2b40      	cmp	r3, #64	; 0x40
   16124:	d1f8      	bne.n	16118 <bt_keys_find_irk+0xc>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   16126:	2300      	movs	r3, #0
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   16128:	4d18      	ldr	r5, [pc, #96]	; (1618c <bt_keys_find_irk+0x80>)
	return memcmp(a, b, sizeof(*a));
   1612a:	f105 073a 	add.w	r7, r5, #58	; 0x3a
   1612e:	89ea      	ldrh	r2, [r5, #14]
		if (key_pool[i].id == id &&
   16130:	7828      	ldrb	r0, [r5, #0]
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   16132:	f002 0202 	and.w	r2, r2, #2
   16136:	b1db      	cbz	r3, 16170 <bt_keys_find_irk+0x64>
   16138:	2300      	movs	r3, #0
   1613a:	89ea      	ldrh	r2, [r5, #14]
		if (key_pool[i].id != id) {
   1613c:	7829      	ldrb	r1, [r5, #0]
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1613e:	f002 0202 	and.w	r2, r2, #2
   16142:	2b00      	cmp	r3, #0
   16144:	d1e8      	bne.n	16118 <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   16146:	2a00      	cmp	r2, #0
   16148:	d0e6      	beq.n	16118 <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
   1614a:	42b1      	cmp	r1, r6
   1614c:	d1e4      	bne.n	16118 <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   1614e:	1c67      	adds	r7, r4, #1
   16150:	4639      	mov	r1, r7
   16152:	480f      	ldr	r0, [pc, #60]	; (16190 <bt_keys_find_irk+0x84>)
   16154:	f007 fd5f 	bl	1dc16 <bt_rpa_irk_matches>
   16158:	2301      	movs	r3, #1
   1615a:	2800      	cmp	r0, #0
   1615c:	d0ed      	beq.n	1613a <bt_keys_find_irk+0x2e>
	memcpy(dst, src, sizeof(*dst));
   1615e:	f8d4 3001 	ldr.w	r3, [r4, #1]
   16162:	f8c5 303a 	str.w	r3, [r5, #58]	; 0x3a
   16166:	f8b4 2005 	ldrh.w	r2, [r4, #5]
   1616a:	4b0a      	ldr	r3, [pc, #40]	; (16194 <bt_keys_find_irk+0x88>)
   1616c:	809a      	strh	r2, [r3, #4]
}
   1616e:	e00b      	b.n	16188 <bt_keys_find_irk+0x7c>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   16170:	2a00      	cmp	r2, #0
   16172:	d0e2      	beq.n	1613a <bt_keys_find_irk+0x2e>
		if (key_pool[i].id == id &&
   16174:	42b0      	cmp	r0, r6
   16176:	d1e0      	bne.n	1613a <bt_keys_find_irk+0x2e>
	return memcmp(a, b, sizeof(*a));
   16178:	2206      	movs	r2, #6
   1617a:	4639      	mov	r1, r7
   1617c:	1c60      	adds	r0, r4, #1
   1617e:	f00b fc76 	bl	21a6e <memcmp>
   16182:	2301      	movs	r3, #1
   16184:	2800      	cmp	r0, #0
   16186:	d1d2      	bne.n	1612e <bt_keys_find_irk+0x22>
			return &key_pool[i];
   16188:	4800      	ldr	r0, [pc, #0]	; (1618c <bt_keys_find_irk+0x80>)
   1618a:	e7c6      	b.n	1611a <bt_keys_find_irk+0xe>
   1618c:	20009f40 	.word	0x20009f40
   16190:	20009f6a 	.word	0x20009f6a
   16194:	20009f7a 	.word	0x20009f7a

00016198 <bt_keys_find_addr>:

struct bt_keys *bt_keys_find_addr(uint8_t id, const bt_addr_le_t *addr)
{
   16198:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(addr != NULL);

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if (key_pool[i].id == id &&
   1619a:	4c06      	ldr	r4, [pc, #24]	; (161b4 <bt_keys_find_addr+0x1c>)
   1619c:	7823      	ldrb	r3, [r4, #0]
   1619e:	4283      	cmp	r3, r0
   161a0:	d104      	bne.n	161ac <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
   161a2:	2207      	movs	r2, #7
   161a4:	1c60      	adds	r0, r4, #1
   161a6:	f00b fc62 	bl	21a6e <memcmp>
   161aa:	b108      	cbz	r0, 161b0 <bt_keys_find_addr+0x18>
		    bt_addr_le_eq(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
   161ac:	2000      	movs	r0, #0
}
   161ae:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   161b0:	4620      	mov	r0, r4
   161b2:	e7fc      	b.n	161ae <bt_keys_find_addr+0x16>
   161b4:	20009f40 	.word	0x20009f40

000161b8 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   161b8:	222c      	movs	r2, #44	; 0x2c
   161ba:	4b02      	ldr	r3, [pc, #8]	; (161c4 <net_buf_pool_get+0xc>)
   161bc:	fb02 3000 	mla	r0, r2, r0, r3
   161c0:	4770      	bx	lr
   161c2:	bf00      	nop
   161c4:	20008994 	.word	0x20008994

000161c8 <net_buf_id>:
int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   161c8:	212c      	movs	r1, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   161ca:	7982      	ldrb	r2, [r0, #6]
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   161cc:	4b05      	ldr	r3, [pc, #20]	; (161e4 <net_buf_id+0x1c>)
   161ce:	fb01 3302 	mla	r3, r1, r2, r3
   161d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   161d4:	7f1b      	ldrb	r3, [r3, #28]
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   161d6:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   161d8:	3317      	adds	r3, #23
   161da:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   161de:	fbb0 f0f3 	udiv	r0, r0, r3
   161e2:	4770      	bx	lr
   161e4:	20008994 	.word	0x20008994

000161e8 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   161e8:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   161ea:	242c      	movs	r4, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   161ec:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   161ee:	4b09      	ldr	r3, [pc, #36]	; (16214 <fixed_data_alloc+0x2c>)
   161f0:	fb04 3302 	mla	r3, r4, r2, r3
   161f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24

	*size = MIN(fixed->data_size, *size);
   161f6:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   161f8:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   161fa:	681a      	ldr	r2, [r3, #0]
   161fc:	4294      	cmp	r4, r2
   161fe:	bf94      	ite	ls
   16200:	600c      	strls	r4, [r1, #0]
   16202:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   16204:	e9d3 5400 	ldrd	r5, r4, [r3]
   16208:	f7ff ffde 	bl	161c8 <net_buf_id>
}
   1620c:	fb05 4000 	mla	r0, r5, r0, r4
   16210:	bd38      	pop	{r3, r4, r5, pc}
   16212:	bf00      	nop
   16214:	20008994 	.word	0x20008994

00016218 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   16218:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1621c:	4605      	mov	r5, r0
   1621e:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   16220:	4610      	mov	r0, r2
   16222:	4619      	mov	r1, r3
{
   16224:	4691      	mov	r9, r2
   16226:	4698      	mov	r8, r3
   16228:	4617      	mov	r7, r2
   1622a:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1622c:	f00b fa63 	bl	216f6 <sys_clock_timeout_end_calc>
   16230:	4682      	mov	sl, r0
   16232:	468b      	mov	fp, r1
	__asm__ volatile(
   16234:	f04f 0320 	mov.w	r3, #32
   16238:	f3ef 8111 	mrs	r1, BASEPRI
   1623c:	f383 8812 	msr	BASEPRI_MAX, r3
   16240:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   16244:	8b6b      	ldrh	r3, [r5, #26]
   16246:	2b00      	cmp	r3, #0
   16248:	d058      	beq.n	162fc <net_buf_alloc_len+0xe4>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1624a:	8b2a      	ldrh	r2, [r5, #24]
   1624c:	429a      	cmp	r2, r3
   1624e:	d93c      	bls.n	162ca <net_buf_alloc_len+0xb2>
   16250:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   16252:	2200      	movs	r2, #0
   16254:	2300      	movs	r3, #0
   16256:	4628      	mov	r0, r5
   16258:	f003 fbba 	bl	199d0 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1625c:	9900      	ldr	r1, [sp, #0]
   1625e:	4604      	mov	r4, r0
   16260:	2800      	cmp	r0, #0
   16262:	d032      	beq.n	162ca <net_buf_alloc_len+0xb2>
	__asm__ volatile(
   16264:	f381 8811 	msr	BASEPRI, r1
   16268:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1626c:	9b01      	ldr	r3, [sp, #4]
   1626e:	2b00      	cmp	r3, #0
   16270:	d055      	beq.n	1631e <net_buf_alloc_len+0x106>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   16272:	ea58 0309 	orrs.w	r3, r8, r9
   16276:	d00f      	beq.n	16298 <net_buf_alloc_len+0x80>
   16278:	f1b8 3fff 	cmp.w	r8, #4294967295
   1627c:	bf08      	it	eq
   1627e:	f1b9 3fff 	cmpeq.w	r9, #4294967295
   16282:	d009      	beq.n	16298 <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   16284:	f004 fad0 	bl	1a828 <sys_clock_tick_get>
   16288:	ebba 0700 	subs.w	r7, sl, r0
   1628c:	eb6b 0601 	sbc.w	r6, fp, r1

			if (remaining <= 0) {
   16290:	2e00      	cmp	r6, #0
   16292:	bfbc      	itt	lt
   16294:	2700      	movlt	r7, #0
   16296:	463e      	movlt	r6, r7
	return pool->alloc->cb->alloc(buf, size, timeout);
   16298:	f04f 082c 	mov.w	r8, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1629c:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1629e:	4d25      	ldr	r5, [pc, #148]	; (16334 <net_buf_alloc_len+0x11c>)
   162a0:	463a      	mov	r2, r7
   162a2:	fb08 5303 	mla	r3, r8, r3, r5
   162a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   162a8:	4620      	mov	r0, r4
   162aa:	681b      	ldr	r3, [r3, #0]
   162ac:	a901      	add	r1, sp, #4
   162ae:	f8d3 9000 	ldr.w	r9, [r3]
   162b2:	4633      	mov	r3, r6
   162b4:	47c8      	blx	r9
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   162b6:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   162b8:	2800      	cmp	r0, #0
   162ba:	d131      	bne.n	16320 <net_buf_alloc_len+0x108>
	k_lifo_put(&pool->free, buf);
   162bc:	79a0      	ldrb	r0, [r4, #6]
   162be:	4621      	mov	r1, r4
   162c0:	fb00 5008 	mla	r0, r0, r8, r5
   162c4:	f00a ff54 	bl	21170 <k_queue_prepend>
}
   162c8:	e024      	b.n	16314 <net_buf_alloc_len+0xfc>
		uninit_count = pool->uninit_count--;
   162ca:	8b68      	ldrh	r0, [r5, #26]
   162cc:	1e43      	subs	r3, r0, #1
   162ce:	836b      	strh	r3, [r5, #26]
   162d0:	f381 8811 	msr	BASEPRI, r1
   162d4:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   162d8:	7f2b      	ldrb	r3, [r5, #28]
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   162da:	8b2a      	ldrh	r2, [r5, #24]
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   162dc:	6aac      	ldr	r4, [r5, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   162de:	3317      	adds	r3, #23
   162e0:	f023 0303 	bic.w	r3, r3, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   162e4:	1a12      	subs	r2, r2, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   162e6:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - _net_buf_pool_list;
   162ea:	4b12      	ldr	r3, [pc, #72]	; (16334 <net_buf_alloc_len+0x11c>)
   162ec:	4a12      	ldr	r2, [pc, #72]	; (16338 <net_buf_alloc_len+0x120>)
   162ee:	1aeb      	subs	r3, r5, r3
   162f0:	109b      	asrs	r3, r3, #2
   162f2:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
   162f4:	71a3      	strb	r3, [r4, #6]
	buf->user_data_size = pool->user_data_size;
   162f6:	7f2b      	ldrb	r3, [r5, #28]
   162f8:	71e3      	strb	r3, [r4, #7]
		goto success;
   162fa:	e7b7      	b.n	1626c <net_buf_alloc_len+0x54>
   162fc:	f381 8811 	msr	BASEPRI, r1
   16300:	f3bf 8f6f 	isb	sy
   16304:	464a      	mov	r2, r9
   16306:	4643      	mov	r3, r8
   16308:	4628      	mov	r0, r5
   1630a:	f003 fb61 	bl	199d0 <z_impl_k_queue_get>
	if (!buf) {
   1630e:	4604      	mov	r4, r0
   16310:	2800      	cmp	r0, #0
   16312:	d1ab      	bne.n	1626c <net_buf_alloc_len+0x54>
		return NULL;
   16314:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   16316:	4620      	mov	r0, r4
   16318:	b003      	add	sp, #12
   1631a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   1631e:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   16320:	2300      	movs	r3, #0
	buf->ref   = 1U;
   16322:	2201      	movs	r2, #1
	buf->frags = NULL;
   16324:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   16326:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   16328:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   1632a:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   1632c:	6923      	ldr	r3, [r4, #16]
   1632e:	81e2      	strh	r2, [r4, #14]
   16330:	60a3      	str	r3, [r4, #8]
	return buf;
   16332:	e7f0      	b.n	16316 <net_buf_alloc_len+0xfe>
   16334:	20008994 	.word	0x20008994
   16338:	ba2e8ba3 	.word	0xba2e8ba3

0001633c <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1633c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16340:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   16342:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   16344:	272c      	movs	r7, #44	; 0x2c
   16346:	4d15      	ldr	r5, [pc, #84]	; (1639c <net_buf_unref+0x60>)
	while (buf) {
   16348:	b90c      	cbnz	r4, 1634e <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1634a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   1634e:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   16350:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   16354:	3b01      	subs	r3, #1
   16356:	b2db      	uxtb	r3, r3
   16358:	7123      	strb	r3, [r4, #4]
   1635a:	2b00      	cmp	r3, #0
   1635c:	d1f5      	bne.n	1634a <net_buf_unref+0xe>
		if (buf->__buf) {
   1635e:	6921      	ldr	r1, [r4, #16]
   16360:	b159      	cbz	r1, 1637a <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   16362:	7963      	ldrb	r3, [r4, #5]
   16364:	079b      	lsls	r3, r3, #30
   16366:	d407      	bmi.n	16378 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   16368:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   1636a:	4620      	mov	r0, r4
   1636c:	fb07 5303 	mla	r3, r7, r3, r5
   16370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   16372:	681b      	ldr	r3, [r3, #0]
   16374:	689b      	ldr	r3, [r3, #8]
   16376:	4798      	blx	r3
			buf->__buf = NULL;
   16378:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   1637a:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1637c:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   1637e:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   16382:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   16384:	6a1b      	ldr	r3, [r3, #32]
   16386:	b11b      	cbz	r3, 16390 <net_buf_unref+0x54>
			pool->destroy(buf);
   16388:	4620      	mov	r0, r4
   1638a:	4798      	blx	r3
{
   1638c:	4644      	mov	r4, r8
   1638e:	e7db      	b.n	16348 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   16390:	4621      	mov	r1, r4
   16392:	fb00 5007 	mla	r0, r0, r7, r5
   16396:	f00a feeb 	bl	21170 <k_queue_prepend>
}
   1639a:	e7f7      	b.n	1638c <net_buf_unref+0x50>
   1639c:	20008994 	.word	0x20008994

000163a0 <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(const struct device *dev)
{
   163a0:	b508      	push	{r3, lr}
   163a2:	4804      	ldr	r0, [pc, #16]	; (163b4 <xoshiro128_initialize+0x14>)
   163a4:	f00a fd78 	bl	20e98 <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
	}
	return 0;
   163a8:	2800      	cmp	r0, #0
}
   163aa:	bf0c      	ite	eq
   163ac:	f06f 0012 	mvneq.w	r0, #18
   163b0:	2000      	movne	r0, #0
   163b2:	bd08      	pop	{r3, pc}
   163b4:	000223d4 	.word	0x000223d4

000163b8 <adc_gain_invert>:
		[ADC_GAIN_64] = {.mul = 1, .div = 64},
		[ADC_GAIN_128] = {.mul = 1, .div = 128},
	};
	int rv = -EINVAL;

	if ((uint8_t)gain < ARRAY_SIZE(gains)) {
   163b8:	2813      	cmp	r0, #19
   163ba:	d80e      	bhi.n	163da <adc_gain_invert+0x22>
		const struct gain_desc *gdp = &gains[gain];

		if ((gdp->mul != 0) && (gdp->div != 0)) {
   163bc:	4a08      	ldr	r2, [pc, #32]	; (163e0 <adc_gain_invert+0x28>)
   163be:	f812 3010 	ldrb.w	r3, [r2, r0, lsl #1]
   163c2:	b153      	cbz	r3, 163da <adc_gain_invert+0x22>
   163c4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
   163c8:	7852      	ldrb	r2, [r2, #1]
   163ca:	b132      	cbz	r2, 163da <adc_gain_invert+0x22>
			*value = (gdp->mul * *value) / gdp->div;
   163cc:	6808      	ldr	r0, [r1, #0]
   163ce:	4343      	muls	r3, r0
   163d0:	fb93 f3f2 	sdiv	r3, r3, r2
			rv = 0;
   163d4:	2000      	movs	r0, #0
			*value = (gdp->mul * *value) / gdp->div;
   163d6:	600b      	str	r3, [r1, #0]
			rv = 0;
   163d8:	4770      	bx	lr
	int rv = -EINVAL;
   163da:	f06f 0015 	mvn.w	r0, #21
		}
	}

	return rv;
}
   163de:	4770      	bx	lr
   163e0:	00026369 	.word	0x00026369

000163e4 <adc_context_start_sampling>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
   163e4:	2201      	movs	r2, #1
   163e6:	4b05      	ldr	r3, [pc, #20]	; (163fc <adc_context_start_sampling+0x18>)
   163e8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
   163ec:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
   163f0:	b109      	cbz	r1, 163f6 <adc_context_start_sampling+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   163f2:	60da      	str	r2, [r3, #12]
}
   163f4:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   163f6:	601a      	str	r2, [r3, #0]
   163f8:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
   163fa:	4770      	bx	lr
   163fc:	4000e000 	.word	0x4000e000

00016400 <adc_nrfx_channel_setup>:
{
   16400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t channel_id = channel_cfg->channel_id;
   16402:	7908      	ldrb	r0, [r1, #4]
{
   16404:	af00      	add	r7, sp, #0
	uint8_t channel_id = channel_cfg->channel_id;
   16406:	f000 041f 	and.w	r4, r0, #31
	if (channel_id >= SAADC_CH_NUM) {
   1640a:	2c07      	cmp	r4, #7
   1640c:	d82c      	bhi.n	16468 <adc_nrfx_channel_setup+0x68>
	switch (channel_cfg->gain) {
   1640e:	780b      	ldrb	r3, [r1, #0]
   16410:	2b0b      	cmp	r3, #11
   16412:	d818      	bhi.n	16446 <adc_nrfx_channel_setup+0x46>
   16414:	e8df f003 	tbb	[pc, r3]
   16418:	07070707 	.word	0x07070707
   1641c:	17170617 	.word	0x17170617
   16420:	15171311 	.word	0x15171311
		config.gain = NRF_SAADC_GAIN1_2;
   16424:	2304      	movs	r3, #4
	switch (channel_cfg->reference) {
   16426:	784a      	ldrb	r2, [r1, #1]
   16428:	2a03      	cmp	r2, #3
   1642a:	d021      	beq.n	16470 <adc_nrfx_channel_setup+0x70>
   1642c:	2a04      	cmp	r2, #4
   1642e:	d034      	beq.n	1649a <adc_nrfx_channel_setup+0x9a>
		LOG_ERR("Selected ADC reference is not valid");
   16430:	466c      	mov	r4, sp
   16432:	b088      	sub	sp, #32
   16434:	466a      	mov	r2, sp
   16436:	4b36      	ldr	r3, [pc, #216]	; (16510 <adc_nrfx_channel_setup+0x110>)
   16438:	e009      	b.n	1644e <adc_nrfx_channel_setup+0x4e>
		config.gain = NRF_SAADC_GAIN1;
   1643a:	2305      	movs	r3, #5
		break;
   1643c:	e7f3      	b.n	16426 <adc_nrfx_channel_setup+0x26>
		config.gain = NRF_SAADC_GAIN2;
   1643e:	2306      	movs	r3, #6
		break;
   16440:	e7f1      	b.n	16426 <adc_nrfx_channel_setup+0x26>
		config.gain = NRF_SAADC_GAIN4;
   16442:	2307      	movs	r3, #7
		break;
   16444:	e7ef      	b.n	16426 <adc_nrfx_channel_setup+0x26>
		LOG_ERR("Selected ADC gain is not valid");
   16446:	466c      	mov	r4, sp
   16448:	b088      	sub	sp, #32
   1644a:	466a      	mov	r2, sp
   1644c:	4b31      	ldr	r3, [pc, #196]	; (16514 <adc_nrfx_channel_setup+0x114>)
   1644e:	6153      	str	r3, [r2, #20]
   16450:	4b31      	ldr	r3, [pc, #196]	; (16518 <adc_nrfx_channel_setup+0x118>)
   16452:	6193      	str	r3, [r2, #24]
   16454:	2303      	movs	r3, #3
   16456:	f842 3f10 	str.w	r3, [r2, #16]!
   1645a:	2300      	movs	r3, #0
   1645c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16460:	482e      	ldr	r0, [pc, #184]	; (1651c <adc_nrfx_channel_setup+0x11c>)
   16462:	f7f5 ff27 	bl	c2b4 <z_impl_z_log_msg_static_create>
   16466:	46a5      	mov	sp, r4
		return -EINVAL;
   16468:	f06f 0015 	mvn.w	r0, #21
}
   1646c:	46bd      	mov	sp, r7
   1646e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (channel_cfg->reference) {
   16470:	2501      	movs	r5, #1
	switch (channel_cfg->acquisition_time) {
   16472:	f244 060a 	movw	r6, #16394	; 0x400a
   16476:	884a      	ldrh	r2, [r1, #2]
   16478:	42b2      	cmp	r2, r6
   1647a:	d042      	beq.n	16502 <adc_nrfx_channel_setup+0x102>
   1647c:	d80f      	bhi.n	1649e <adc_nrfx_channel_setup+0x9e>
   1647e:	f244 0603 	movw	r6, #16387	; 0x4003
   16482:	42b2      	cmp	r2, r6
   16484:	d019      	beq.n	164ba <adc_nrfx_channel_setup+0xba>
   16486:	f244 0605 	movw	r6, #16389	; 0x4005
   1648a:	42b2      	cmp	r2, r6
   1648c:	d037      	beq.n	164fe <adc_nrfx_channel_setup+0xfe>
   1648e:	b3c2      	cbz	r2, 16502 <adc_nrfx_channel_setup+0x102>
		LOG_ERR("Selected ADC acquisition time is not valid");
   16490:	466c      	mov	r4, sp
   16492:	b088      	sub	sp, #32
   16494:	466a      	mov	r2, sp
   16496:	4b22      	ldr	r3, [pc, #136]	; (16520 <adc_nrfx_channel_setup+0x120>)
   16498:	e7d9      	b.n	1644e <adc_nrfx_channel_setup+0x4e>
	nrf_saadc_channel_config_t config = {
   1649a:	2500      	movs	r5, #0
   1649c:	e7e9      	b.n	16472 <adc_nrfx_channel_setup+0x72>
	switch (channel_cfg->acquisition_time) {
   1649e:	f244 0614 	movw	r6, #16404	; 0x4014
   164a2:	42b2      	cmp	r2, r6
   164a4:	d02f      	beq.n	16506 <adc_nrfx_channel_setup+0x106>
   164a6:	f244 0628 	movw	r6, #16424	; 0x4028
   164aa:	42b2      	cmp	r2, r6
   164ac:	d02d      	beq.n	1650a <adc_nrfx_channel_setup+0x10a>
   164ae:	f244 060f 	movw	r6, #16399	; 0x400f
   164b2:	42b2      	cmp	r2, r6
   164b4:	d1ec      	bne.n	16490 <adc_nrfx_channel_setup+0x90>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
   164b6:	2203      	movs	r2, #3
   164b8:	e000      	b.n	164bc <adc_nrfx_channel_setup+0xbc>
	nrf_saadc_channel_config_t config = {
   164ba:	2200      	movs	r2, #0
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   164bc:	f3c0 1040 	ubfx	r0, r0, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
   164c0:	021b      	lsls	r3, r3, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   164c2:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
    p_reg->CH[channel].PSELP = pselp;
   164c6:	2000      	movs	r0, #0
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   164c8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
   164cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    p_reg->CH[channel].CONFIG =
   164d0:	0122      	lsls	r2, r4, #4
   164d2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   164d6:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
   164da:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
   164de:	0123      	lsls	r3, r4, #4
   164e0:	798a      	ldrb	r2, [r1, #6]
   164e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   164e6:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   164ea:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
   164ee:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
   164f2:	4b0c      	ldr	r3, [pc, #48]	; (16524 <adc_nrfx_channel_setup+0x124>)
   164f4:	794a      	ldrb	r2, [r1, #5]
   164f6:	4423      	add	r3, r4
   164f8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	return 0;
   164fc:	e7b6      	b.n	1646c <adc_nrfx_channel_setup+0x6c>
	switch (channel_cfg->acquisition_time) {
   164fe:	2201      	movs	r2, #1
   16500:	e7dc      	b.n	164bc <adc_nrfx_channel_setup+0xbc>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
   16502:	2202      	movs	r2, #2
   16504:	e7da      	b.n	164bc <adc_nrfx_channel_setup+0xbc>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
   16506:	2204      	movs	r2, #4
   16508:	e7d8      	b.n	164bc <adc_nrfx_channel_setup+0xbc>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
   1650a:	2205      	movs	r2, #5
   1650c:	e7d6      	b.n	164bc <adc_nrfx_channel_setup+0xbc>
   1650e:	bf00      	nop
   16510:	000263b4 	.word	0x000263b4
   16514:	00026391 	.word	0x00026391
   16518:	000264fa 	.word	0x000264fa
   1651c:	000227a8 	.word	0x000227a8
   16520:	000263dc 	.word	0x000263dc
   16524:	20008160 	.word	0x20008160

00016528 <adc_nrfx_read>:
}

/* Implementation of the ADC driver API function: adc_read. */
static int adc_nrfx_read(const struct device *dev,
			 const struct adc_sequence *sequence)
{
   16528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1652c:	b082      	sub	sp, #8
   1652e:	460c      	mov	r4, r1
   16530:	af02      	add	r7, sp, #8
	return z_impl_k_sem_take(sem, timeout);
   16532:	f04f 33ff 	mov.w	r3, #4294967295
   16536:	f04f 32ff 	mov.w	r2, #4294967295
   1653a:	487d      	ldr	r0, [pc, #500]	; (16730 <adc_nrfx_read+0x208>)
   1653c:	f003 faa2 	bl	19a84 <z_impl_k_sem_take>
	uint32_t selected_channels = sequence->channels;
   16540:	6866      	ldr	r6, [r4, #4]
	if (!selected_channels ||
   16542:	1e73      	subs	r3, r6, #1
   16544:	2bfe      	cmp	r3, #254	; 0xfe
   16546:	d90d      	bls.n	16564 <adc_nrfx_read+0x3c>
		LOG_ERR("Invalid selection of channels");
   16548:	466c      	mov	r4, sp
   1654a:	b088      	sub	sp, #32
   1654c:	aa02      	add	r2, sp, #8
   1654e:	4b79      	ldr	r3, [pc, #484]	; (16734 <adc_nrfx_read+0x20c>)
   16550:	6153      	str	r3, [r2, #20]
   16552:	4b79      	ldr	r3, [pc, #484]	; (16738 <adc_nrfx_read+0x210>)
		LOG_ERR(
   16554:	6193      	str	r3, [r2, #24]
   16556:	2303      	movs	r3, #3
   16558:	f842 3f10 	str.w	r3, [r2, #16]!
   1655c:	2300      	movs	r3, #0
   1655e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16562:	e019      	b.n	16598 <adc_nrfx_read+0x70>
   16564:	2100      	movs	r1, #0
	active_channels = 0U;
   16566:	460a      	mov	r2, r1
    p_reg->CH[channel].PSELP = pselp;
   16568:	4d74      	ldr	r5, [pc, #464]	; (1673c <adc_nrfx_read+0x214>)
			if (m_data.positive_inputs[channel_id] == 0U) {
   1656a:	f8df c1d4 	ldr.w	ip, [pc, #468]	; 16740 <adc_nrfx_read+0x218>
		if (selected_channels & BIT(channel_id)) {
   1656e:	fa26 f301 	lsr.w	r3, r6, r1
   16572:	f013 0301 	ands.w	r3, r3, #1
   16576:	d041      	beq.n	165fc <adc_nrfx_read+0xd4>
			if (m_data.positive_inputs[channel_id] == 0U) {
   16578:	f81c 3001 	ldrb.w	r3, [ip, r1]
   1657c:	b9cb      	cbnz	r3, 165b2 <adc_nrfx_read+0x8a>
				LOG_ERR("Channel %u not configured",
   1657e:	466c      	mov	r4, sp
   16580:	b088      	sub	sp, #32
   16582:	aa02      	add	r2, sp, #8
   16584:	486f      	ldr	r0, [pc, #444]	; (16744 <adc_nrfx_read+0x21c>)
   16586:	6150      	str	r0, [r2, #20]
   16588:	486b      	ldr	r0, [pc, #428]	; (16738 <adc_nrfx_read+0x210>)
   1658a:	e9c2 0106 	strd	r0, r1, [r2, #24]
   1658e:	2104      	movs	r1, #4
   16590:	f842 1f10 	str.w	r1, [r2, #16]!
   16594:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   16598:	486b      	ldr	r0, [pc, #428]	; (16748 <adc_nrfx_read+0x220>)
   1659a:	f7f5 fe8b 	bl	c2b4 <z_impl_z_log_msg_static_create>
   1659e:	46a5      	mov	sp, r4
		return -EINVAL;
   165a0:	f06f 0415 	mvn.w	r4, #21
	z_impl_k_sem_give(sem);
   165a4:	4862      	ldr	r0, [pc, #392]	; (16730 <adc_nrfx_read+0x208>)
   165a6:	f003 fa47 	bl	19a38 <z_impl_k_sem_give>
	adc_context_lock(&m_data.ctx, false, NULL);
	error = start_read(dev, sequence);
	adc_context_release(&m_data.ctx, error);

	return error;
}
   165aa:	4620      	mov	r0, r4
   165ac:	46bd      	mov	sp, r7
   165ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
   165b2:	f894 e011 	ldrb.w	lr, [r4, #17]

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
   165b6:	eb05 1801 	add.w	r8, r5, r1, lsl #4
   165ba:	f1be 0e00 	subs.w	lr, lr, #0
   165be:	bf18      	it	ne
   165c0:	f04f 0e01 	movne.w	lr, #1
   165c4:	f8d8 0518 	ldr.w	r0, [r8, #1304]	; 0x518
			++active_channels;
   165c8:	3201      	adds	r2, #1
   165ca:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
   165ce:	ea40 600e 	orr.w	r0, r0, lr, lsl #24
   165d2:	f8c8 0518 	str.w	r0, [r8, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
   165d6:	f101 0051 	add.w	r0, r1, #81	; 0x51
   165da:	0100      	lsls	r0, r0, #4
   165dc:	502b      	str	r3, [r5, r0]
   165de:	b2d2      	uxtb	r2, r2
	} while (++channel_id < SAADC_CH_NUM);
   165e0:	3101      	adds	r1, #1
   165e2:	2908      	cmp	r1, #8
   165e4:	d1c3      	bne.n	1656e <adc_nrfx_read+0x46>
	error = set_resolution(sequence);
   165e6:	7c23      	ldrb	r3, [r4, #16]
	switch (sequence->resolution) {
   165e8:	f1a3 0108 	sub.w	r1, r3, #8
   165ec:	2906      	cmp	r1, #6
   165ee:	d81b      	bhi.n	16628 <adc_nrfx_read+0x100>
   165f0:	e8df f001 	tbb	[pc, r1]
   165f4:	1a291a27 	.word	0x1a291a27
   165f8:	1a09      	.short	0x1a09
   165fa:	18          	.byte	0x18
   165fb:	00          	.byte	0x00
   165fc:	f101 0051 	add.w	r0, r1, #81	; 0x51
   16600:	0100      	lsls	r0, r0, #4
   16602:	502b      	str	r3, [r5, r0]
}
   16604:	e7ec      	b.n	165e0 <adc_nrfx_read+0xb8>
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
   16606:	2302      	movs	r3, #2
    p_reg->RESOLUTION = resolution;
   16608:	494c      	ldr	r1, [pc, #304]	; (1673c <adc_nrfx_read+0x214>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   1660a:	2a01      	cmp	r2, #1
   1660c:	f8c1 35f0 	str.w	r3, [r1, #1520]	; 0x5f0
	error = set_oversampling(sequence, active_channels);
   16610:	7c63      	ldrb	r3, [r4, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   16612:	d91a      	bls.n	1664a <adc_nrfx_read+0x122>
   16614:	b1db      	cbz	r3, 1664e <adc_nrfx_read+0x126>
		LOG_ERR(
   16616:	466c      	mov	r4, sp
   16618:	b088      	sub	sp, #32
   1661a:	aa02      	add	r2, sp, #8
   1661c:	4b4b      	ldr	r3, [pc, #300]	; (1674c <adc_nrfx_read+0x224>)
   1661e:	6153      	str	r3, [r2, #20]
   16620:	4b4b      	ldr	r3, [pc, #300]	; (16750 <adc_nrfx_read+0x228>)
   16622:	e797      	b.n	16554 <adc_nrfx_read+0x2c>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
   16624:	2303      	movs	r3, #3
		break;
   16626:	e7ef      	b.n	16608 <adc_nrfx_read+0xe0>
		LOG_ERR("ADC resolution value %d is not valid",
   16628:	466c      	mov	r4, sp
   1662a:	b088      	sub	sp, #32
   1662c:	aa02      	add	r2, sp, #8
   1662e:	4949      	ldr	r1, [pc, #292]	; (16754 <adc_nrfx_read+0x22c>)
   16630:	6151      	str	r1, [r2, #20]
   16632:	4949      	ldr	r1, [pc, #292]	; (16758 <adc_nrfx_read+0x230>)
	switch (sequence->oversampling) {
   16634:	e9c2 1306 	strd	r1, r3, [r2, #24]
		LOG_ERR("Oversampling value %d is not valid",
   16638:	2304      	movs	r3, #4
   1663a:	f842 3f10 	str.w	r3, [r2, #16]!
   1663e:	2300      	movs	r3, #0
   16640:	e7a8      	b.n	16594 <adc_nrfx_read+0x6c>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
   16642:	2300      	movs	r3, #0
   16644:	e7e0      	b.n	16608 <adc_nrfx_read+0xe0>
	switch (sequence->resolution) {
   16646:	2301      	movs	r3, #1
   16648:	e7de      	b.n	16608 <adc_nrfx_read+0xe0>
	switch (sequence->oversampling) {
   1664a:	2b08      	cmp	r3, #8
   1664c:	d81d      	bhi.n	1668a <adc_nrfx_read+0x162>
    p_reg->OVERSAMPLE = oversample;
   1664e:	f8c1 35f4 	str.w	r3, [r1, #1524]	; 0x5f4
	if (sequence->options) {
   16652:	6821      	ldr	r1, [r4, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
   16654:	0053      	lsls	r3, r2, #1
	if (sequence->options) {
   16656:	b9f9      	cbnz	r1, 16698 <adc_nrfx_read+0x170>
	if (sequence->buffer_size < needed_buffer_size) {
   16658:	68e1      	ldr	r1, [r4, #12]
   1665a:	4299      	cmp	r1, r3
   1665c:	d220      	bcs.n	166a0 <adc_nrfx_read+0x178>
		LOG_ERR("Provided buffer is too small (%u/%u)",
   1665e:	466c      	mov	r4, sp
   16660:	b08a      	sub	sp, #40	; 0x28
   16662:	aa02      	add	r2, sp, #8
   16664:	6213      	str	r3, [r2, #32]
   16666:	2305      	movs	r3, #5
   16668:	483c      	ldr	r0, [pc, #240]	; (1675c <adc_nrfx_read+0x234>)
   1666a:	6150      	str	r0, [r2, #20]
   1666c:	483c      	ldr	r0, [pc, #240]	; (16760 <adc_nrfx_read+0x238>)
   1666e:	e9c2 0106 	strd	r0, r1, [r2, #24]
   16672:	f842 3f10 	str.w	r3, [r2, #16]!
   16676:	2300      	movs	r3, #0
   16678:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   1667c:	4832      	ldr	r0, [pc, #200]	; (16748 <adc_nrfx_read+0x220>)
   1667e:	f7f5 fe19 	bl	c2b4 <z_impl_z_log_msg_static_create>
   16682:	46a5      	mov	sp, r4
		return -ENOMEM;
   16684:	f06f 040b 	mvn.w	r4, #11
   16688:	e78c      	b.n	165a4 <adc_nrfx_read+0x7c>
		LOG_ERR("Oversampling value %d is not valid",
   1668a:	466c      	mov	r4, sp
   1668c:	b088      	sub	sp, #32
   1668e:	aa02      	add	r2, sp, #8
   16690:	4934      	ldr	r1, [pc, #208]	; (16764 <adc_nrfx_read+0x23c>)
   16692:	6151      	str	r1, [r2, #20]
   16694:	492e      	ldr	r1, [pc, #184]	; (16750 <adc_nrfx_read+0x228>)
   16696:	e7cd      	b.n	16634 <adc_nrfx_read+0x10c>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
   16698:	8989      	ldrh	r1, [r1, #12]
   1669a:	fb01 3303 	mla	r3, r1, r3, r3
   1669e:	e7db      	b.n	16658 <adc_nrfx_read+0x130>
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
   166a0:	46a4      	mov	ip, r4
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   166a2:	68a1      	ldr	r1, [r4, #8]
   166a4:	4b25      	ldr	r3, [pc, #148]	; (1673c <adc_nrfx_read+0x214>)
   166a6:	4d30      	ldr	r5, [pc, #192]	; (16768 <adc_nrfx_read+0x240>)
   166a8:	f8c3 162c 	str.w	r1, [r3, #1580]	; 0x62c
   166ac:	f105 0674 	add.w	r6, r5, #116	; 0x74
    p_reg->RESULT.MAXCNT = size;
   166b0:	f8c3 2630 	str.w	r2, [r3, #1584]	; 0x630
   166b4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   166b8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   166ba:	f8dc 3000 	ldr.w	r3, [ip]
   166be:	46ac      	mov	ip, r5
   166c0:	6033      	str	r3, [r6, #0]
	ctx->status = 0;
   166c2:	2600      	movs	r6, #0
   166c4:	672e      	str	r6, [r5, #112]	; 0x70

	if (sequence->options) {
   166c6:	6823      	ldr	r3, [r4, #0]
   166c8:	b36b      	cbz	r3, 16726 <adc_nrfx_read+0x1fe>
		ctx->options = *sequence->options;
   166ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   166cc:	f105 0488 	add.w	r4, r5, #136	; 0x88
   166d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
   166d4:	676c      	str	r4, [r5, #116]	; 0x74
		ctx->sampling_index = 0U;
   166d6:	f8a5 6098 	strh.w	r6, [r5, #152]	; 0x98

		if (ctx->options.interval_us != 0U) {
   166da:	b320      	cbz	r0, 16726 <adc_nrfx_read+0x1fe>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   166dc:	e8dc 3fef 	ldaex	r3, [ip]
   166e0:	e8cc 6fe2 	stlex	r2, r6, [ip]
   166e4:	2a00      	cmp	r2, #0
   166e6:	d1f9      	bne.n	166dc <adc_nrfx_read+0x1b4>
   166e8:	4920      	ldr	r1, [pc, #128]	; (1676c <adc_nrfx_read+0x244>)
   166ea:	f44f 4400 	mov.w	r4, #32768	; 0x8000
   166ee:	468c      	mov	ip, r1
   166f0:	4631      	mov	r1, r6
   166f2:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
   166f6:	2300      	movs	r3, #0
   166f8:	fbe0 c104 	umlal	ip, r1, r0, r4
   166fc:	4a1c      	ldr	r2, [pc, #112]	; (16770 <adc_nrfx_read+0x248>)
   166fe:	4660      	mov	r0, ip
   16700:	f7f2 fbec 	bl	8edc <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
   16704:	2200      	movs	r2, #0
   16706:	e9cd 0100 	strd	r0, r1, [sp]
   1670a:	2300      	movs	r3, #0
   1670c:	f105 0008 	add.w	r0, r5, #8
   16710:	f004 f90e 	bl	1a930 <z_impl_k_timer_start>
	return z_impl_k_sem_take(sem, timeout);
   16714:	f04f 32ff 	mov.w	r2, #4294967295
   16718:	f04f 33ff 	mov.w	r3, #4294967295
   1671c:	4815      	ldr	r0, [pc, #84]	; (16774 <adc_nrfx_read+0x24c>)
   1671e:	f003 f9b1 	bl	19a84 <z_impl_k_sem_take>
	return ctx->status;
   16722:	6f2c      	ldr	r4, [r5, #112]	; 0x70
	return error;
   16724:	e73e      	b.n	165a4 <adc_nrfx_read+0x7c>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
   16726:	4810      	ldr	r0, [pc, #64]	; (16768 <adc_nrfx_read+0x240>)
   16728:	f7ff fe5c 	bl	163e4 <adc_context_start_sampling>
   1672c:	e7f2      	b.n	16714 <adc_nrfx_read+0x1ec>
   1672e:	bf00      	nop
   16730:	200081a0 	.word	0x200081a0
   16734:	0002640b 	.word	0x0002640b
   16738:	00026543 	.word	0x00026543
   1673c:	4000e000 	.word	0x4000e000
   16740:	20008200 	.word	0x20008200
   16744:	0002642d 	.word	0x0002642d
   16748:	000227a8 	.word	0x000227a8
   1674c:	00026474 	.word	0x00026474
   16750:	00026523 	.word	0x00026523
   16754:	0002644b 	.word	0x0002644b
   16758:	00026534 	.word	0x00026534
   1675c:	000264d1 	.word	0x000264d1
   16760:	00026511 	.word	0x00026511
   16764:	000264aa 	.word	0x000264aa
   16768:	20008160 	.word	0x20008160
   1676c:	000f423f 	.word	0x000f423f
   16770:	000f4240 	.word	0x000f4240
   16774:	200081b8 	.word	0x200081b8

00016778 <init_saadc>:
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
   16778:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1677a:	2400      	movs	r4, #0
   1677c:	4b0d      	ldr	r3, [pc, #52]	; (167b4 <init_saadc+0x3c>)
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
   1677e:	200e      	movs	r0, #14
   16780:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   16784:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   16788:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
   1678c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
   16790:	2212      	movs	r2, #18
   16792:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   16796:	f7f6 fff9 	bl	d78c <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1679a:	4622      	mov	r2, r4
   1679c:	2101      	movs	r1, #1
   1679e:	200e      	movs	r0, #14
   167a0:	f7f7 f824 	bl	d7ec <z_arm_irq_priority_set>
/**
 * @internal
 */
static inline unsigned int z_impl_k_sem_count_get(struct k_sem *sem)
{
	return sem->count;
   167a4:	4804      	ldr	r0, [pc, #16]	; (167b8 <init_saadc+0x40>)
	if (!k_sem_count_get(&ctx->lock)) {
   167a6:	6c83      	ldr	r3, [r0, #72]	; 0x48
   167a8:	b913      	cbnz	r3, 167b0 <init_saadc+0x38>
	z_impl_k_sem_give(sem);
   167aa:	3040      	adds	r0, #64	; 0x40
   167ac:	f003 f944 	bl	19a38 <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
   167b0:	2000      	movs	r0, #0
   167b2:	bd10      	pop	{r4, pc}
   167b4:	4000e000 	.word	0x4000e000
   167b8:	20008160 	.word	0x20008160

000167bc <saadc_irq_handler>:
{
   167bc:	b538      	push	{r3, r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   167be:	4b2d      	ldr	r3, [pc, #180]	; (16874 <saadc_irq_handler+0xb8>)
   167c0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
   167c4:	2a00      	cmp	r2, #0
   167c6:	d048      	beq.n	1685a <saadc_irq_handler+0x9e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   167c8:	2200      	movs	r2, #0
   167ca:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   167ce:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   167d2:	2101      	movs	r1, #1
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
   167d4:	4c28      	ldr	r4, [pc, #160]	; (16878 <saadc_irq_handler+0xbc>)
   167d6:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
   167d8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   167dc:	6f63      	ldr	r3, [r4, #116]	; 0x74
   167de:	4625      	mov	r5, r4
   167e0:	b3b3      	cbz	r3, 16850 <saadc_irq_handler+0x94>
		adc_sequence_callback callback = ctx->options.callback;
   167e2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
			action = callback(dev,
   167e6:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
		if (callback) {
   167ea:	b133      	cbz	r3, 167fa <saadc_irq_handler+0x3e>
			action = callback(dev,
   167ec:	f104 0174 	add.w	r1, r4, #116	; 0x74
   167f0:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
   167f2:	2801      	cmp	r0, #1
   167f4:	d014      	beq.n	16820 <saadc_irq_handler+0x64>
   167f6:	2802      	cmp	r0, #2
   167f8:	d024      	beq.n	16844 <saadc_irq_handler+0x88>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
   167fa:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
   167fe:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
   16802:	429a      	cmp	r2, r3
   16804:	d91e      	bls.n	16844 <saadc_irq_handler+0x88>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
   16806:	3301      	adds	r3, #1
   16808:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
   1680c:	4b19      	ldr	r3, [pc, #100]	; (16874 <saadc_irq_handler+0xb8>)
   1680e:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
   16812:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
   16816:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
   16818:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   1681c:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
   16820:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   16824:	b923      	cbnz	r3, 16830 <saadc_irq_handler+0x74>
}
   16826:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				adc_context_start_sampling(ctx);
   1682a:	4813      	ldr	r0, [pc, #76]	; (16878 <saadc_irq_handler+0xbc>)
   1682c:	f7ff bdda 	b.w	163e4 <adc_context_start_sampling>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   16830:	e8d5 3fef 	ldaex	r3, [r5]
   16834:	1e5a      	subs	r2, r3, #1
   16836:	e8c5 2fe1 	stlex	r1, r2, [r5]
   1683a:	2900      	cmp	r1, #0
   1683c:	d1f8      	bne.n	16830 <saadc_irq_handler+0x74>
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
   1683e:	2b01      	cmp	r3, #1
   16840:	dcf1      	bgt.n	16826 <saadc_irq_handler+0x6a>
   16842:	bd38      	pop	{r3, r4, r5, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
   16844:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   16848:	b113      	cbz	r3, 16850 <saadc_irq_handler+0x94>
	z_impl_k_timer_stop(timer);
   1684a:	480c      	ldr	r0, [pc, #48]	; (1687c <saadc_irq_handler+0xc0>)
   1684c:	f00a ff81 	bl	21752 <z_impl_k_timer_stop>
   16850:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_sem_give(sem);
   16854:	480a      	ldr	r0, [pc, #40]	; (16880 <saadc_irq_handler+0xc4>)
   16856:	f003 b8ef 	b.w	19a38 <z_impl_k_sem_give>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1685a:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
   1685e:	2900      	cmp	r1, #0
   16860:	d0ef      	beq.n	16842 <saadc_irq_handler+0x86>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16862:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   16866:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1686a:	2201      	movs	r2, #1
   1686c:	609a      	str	r2, [r3, #8]
   1686e:	601a      	str	r2, [r3, #0]
   16870:	605a      	str	r2, [r3, #4]
}
   16872:	e7e6      	b.n	16842 <saadc_irq_handler+0x86>
   16874:	4000e000 	.word	0x4000e000
   16878:	20008160 	.word	0x20008160
   1687c:	20008168 	.word	0x20008168
   16880:	200081b8 	.word	0x200081b8

00016884 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   16884:	4b08      	ldr	r3, [pc, #32]	; (168a8 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   16886:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   16888:	1ac3      	subs	r3, r0, r3
{
   1688a:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1688c:	4907      	ldr	r1, [pc, #28]	; (168ac <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   1688e:	109b      	asrs	r3, r3, #2
{
   16890:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   16892:	4359      	muls	r1, r3
   16894:	2240      	movs	r2, #64	; 0x40
   16896:	4806      	ldr	r0, [pc, #24]	; (168b0 <onoff_stop+0x2c>)
   16898:	f009 fb73 	bl	1ff82 <stop>
	notify(mgr, res);
   1689c:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1689e:	4601      	mov	r1, r0
	notify(mgr, res);
   168a0:	4620      	mov	r0, r4
}
   168a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   168a6:	4718      	bx	r3
   168a8:	20009fb0 	.word	0x20009fb0
   168ac:	b6db6db7 	.word	0xb6db6db7
   168b0:	00022374 	.word	0x00022374

000168b4 <onoff_start>:
static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   168b4:	2340      	movs	r3, #64	; 0x40
{
   168b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   168b8:	4c0b      	ldr	r4, [pc, #44]	; (168e8 <onoff_start+0x34>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   168ba:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
   168bc:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   168be:	460b      	mov	r3, r1
{
   168c0:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   168c2:	490a      	ldr	r1, [pc, #40]	; (168ec <onoff_start+0x38>)
	size_t offset = (size_t)(mgr - data->mgr);
   168c4:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   168c6:	4361      	muls	r1, r4
{
   168c8:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   168ca:	4a09      	ldr	r2, [pc, #36]	; (168f0 <onoff_start+0x3c>)
   168cc:	4809      	ldr	r0, [pc, #36]	; (168f4 <onoff_start+0x40>)
   168ce:	f009 fb84 	bl	1ffda <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   168d2:	1e01      	subs	r1, r0, #0
   168d4:	da05      	bge.n	168e2 <onoff_start+0x2e>
		notify(mgr, err);
   168d6:	4630      	mov	r0, r6
   168d8:	462b      	mov	r3, r5
	}
}
   168da:	b002      	add	sp, #8
   168dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   168e0:	4718      	bx	r3
}
   168e2:	b002      	add	sp, #8
   168e4:	bd70      	pop	{r4, r5, r6, pc}
   168e6:	bf00      	nop
   168e8:	20009fb0 	.word	0x20009fb0
   168ec:	b6db6db7 	.word	0xb6db6db7
   168f0:	00020045 	.word	0x00020045
   168f4:	00022374 	.word	0x00022374

000168f8 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   168f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   168fc:	2200      	movs	r2, #0
   168fe:	2101      	movs	r1, #1
{
   16900:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   16902:	2005      	movs	r0, #5
   16904:	f7f6 ff72 	bl	d7ec <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   16908:	4811      	ldr	r0, [pc, #68]	; (16950 <clk_init+0x58>)
   1690a:	f001 fc8d 	bl	18228 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1690e:	4b11      	ldr	r3, [pc, #68]	; (16954 <clk_init+0x5c>)
   16910:	4298      	cmp	r0, r3
   16912:	d119      	bne.n	16948 <clk_init+0x50>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   16914:	f001 fc98 	bl	18248 <nrfx_clock_enable>
   16918:	2400      	movs	r4, #0
	return &data->mgr[type];
   1691a:	f04f 091c 	mov.w	r9, #28
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1691e:	270c      	movs	r7, #12
		err = onoff_manager_init(get_onoff_manager(dev, i),
   16920:	f8df 8034 	ldr.w	r8, [pc, #52]	; 16958 <clk_init+0x60>
	struct nrf_clock_control_data *data = dev->data;
   16924:	6935      	ldr	r5, [r6, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   16926:	4641      	mov	r1, r8
   16928:	fb09 5004 	mla	r0, r9, r4, r5
   1692c:	f005 ff60 	bl	1c7f0 <onoff_manager_init>
		if (err < 0) {
   16930:	2800      	cmp	r0, #0
   16932:	db07      	blt.n	16944 <clk_init+0x4c>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   16934:	2301      	movs	r3, #1
   16936:	fb07 5504 	mla	r5, r7, r4, r5
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   1693a:	441c      	add	r4, r3
   1693c:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1693e:	67ab      	str	r3, [r5, #120]	; 0x78
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   16940:	d1f0      	bne.n	16924 <clk_init+0x2c>
	}

	return 0;
   16942:	2000      	movs	r0, #0
}
   16944:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
   16948:	f06f 0004 	mvn.w	r0, #4
   1694c:	e7fa      	b.n	16944 <clk_init+0x4c>
   1694e:	bf00      	nop
   16950:	00016991 	.word	0x00016991
   16954:	0bad0000 	.word	0x0bad0000
   16958:	00023220 	.word	0x00023220

0001695c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   1695c:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   1695e:	230c      	movs	r3, #12
	sub_data->cb = NULL;
   16960:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
   16962:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   16964:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   16966:	4808      	ldr	r0, [pc, #32]	; (16988 <clkstarted_handle.constprop.0+0x2c>)
   16968:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   1696a:	3378      	adds	r3, #120	; 0x78
   1696c:	4418      	add	r0, r3
	void *user_data = sub_data->user_data;
   1696e:	e9d4 561c 	ldrd	r5, r6, [r4, #112]	; 0x70
	sub_data->cb = NULL;
   16972:	6722      	str	r2, [r4, #112]	; 0x70
	set_on_state(&sub_data->flags);
   16974:	f009 faf2 	bl	1ff5c <set_on_state>
	if (callback) {
   16978:	b12d      	cbz	r5, 16986 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1697a:	4632      	mov	r2, r6
   1697c:	462b      	mov	r3, r5
}
   1697e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   16982:	4802      	ldr	r0, [pc, #8]	; (1698c <clkstarted_handle.constprop.0+0x30>)
   16984:	4718      	bx	r3
}
   16986:	bd70      	pop	{r4, r5, r6, pc}
   16988:	20009fb0 	.word	0x20009fb0
   1698c:	00022374 	.word	0x00022374

00016990 <clock_event_handler>:
	switch (event) {
   16990:	2805      	cmp	r0, #5
   16992:	d811      	bhi.n	169b8 <clock_event_handler+0x28>
   16994:	e8df f000 	tbb	[pc, r0]
   16998:	10100e03 	.word	0x10100e03
   1699c:	0a0c      	.short	0x0a0c
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1699e:	4b07      	ldr	r3, [pc, #28]	; (169bc <clock_event_handler+0x2c>)
   169a0:	6f98      	ldr	r0, [r3, #120]	; 0x78
   169a2:	f010 0007 	ands.w	r0, r0, #7
   169a6:	d107      	bne.n	169b8 <clock_event_handler+0x28>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   169a8:	f7ff bfd8 	b.w	1695c <clkstarted_handle.constprop.0>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
   169ac:	2002      	movs	r0, #2
   169ae:	e7fb      	b.n	169a8 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
   169b0:	2003      	movs	r0, #3
   169b2:	e7f9      	b.n	169a8 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   169b4:	2001      	movs	r0, #1
   169b6:	e7f7      	b.n	169a8 <clock_event_handler+0x18>
}
   169b8:	4770      	bx	lr
   169ba:	bf00      	nop
   169bc:	20009fb0 	.word	0x20009fb0

000169c0 <generic_hfclk_start>:
{
   169c0:	b508      	push	{r3, lr}
	__asm__ volatile(
   169c2:	f04f 0320 	mov.w	r3, #32
   169c6:	f3ef 8111 	mrs	r1, BASEPRI
   169ca:	f383 8812 	msr	BASEPRI_MAX, r3
   169ce:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   169d2:	4a11      	ldr	r2, [pc, #68]	; (16a18 <generic_hfclk_start+0x58>)
   169d4:	6813      	ldr	r3, [r2, #0]
   169d6:	f043 0002 	orr.w	r0, r3, #2
   169da:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   169dc:	07da      	lsls	r2, r3, #31
   169de:	d408      	bmi.n	169f2 <generic_hfclk_start+0x32>
	__asm__ volatile(
   169e0:	f381 8811 	msr	BASEPRI, r1
   169e4:	f3bf 8f6f 	isb	sy
}
   169e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   169ec:	2001      	movs	r0, #1
   169ee:	f001 bc3f 	b.w	18270 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   169f2:	4b0a      	ldr	r3, [pc, #40]	; (16a1c <generic_hfclk_start+0x5c>)
   169f4:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   169f8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   169fc:	07d3      	lsls	r3, r2, #31
   169fe:	d5ef      	bpl.n	169e0 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   16a00:	4807      	ldr	r0, [pc, #28]	; (16a20 <generic_hfclk_start+0x60>)
   16a02:	f009 faab 	bl	1ff5c <set_on_state>
   16a06:	f381 8811 	msr	BASEPRI, r1
   16a0a:	f3bf 8f6f 	isb	sy
}
   16a0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   16a12:	2000      	movs	r0, #0
   16a14:	f7ff bfa2 	b.w	1695c <clkstarted_handle.constprop.0>
   16a18:	2000a050 	.word	0x2000a050
   16a1c:	40005000 	.word	0x40005000
   16a20:	2000a028 	.word	0x2000a028

00016a24 <api_blocking_start>:
{
   16a24:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   16a26:	2200      	movs	r2, #0
   16a28:	2301      	movs	r3, #1
   16a2a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   16a2e:	ab04      	add	r3, sp, #16
   16a30:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   16a34:	4a09      	ldr	r2, [pc, #36]	; (16a5c <api_blocking_start+0x38>)
   16a36:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   16a38:	f8cd d000 	str.w	sp, [sp]
   16a3c:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   16a40:	f009 faf9 	bl	20036 <api_start>
	if (err < 0) {
   16a44:	2800      	cmp	r0, #0
   16a46:	db05      	blt.n	16a54 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   16a48:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   16a4c:	2300      	movs	r3, #0
   16a4e:	4668      	mov	r0, sp
   16a50:	f003 f818 	bl	19a84 <z_impl_k_sem_take>
}
   16a54:	b007      	add	sp, #28
   16a56:	f85d fb04 	ldr.w	pc, [sp], #4
   16a5a:	bf00      	nop
   16a5c:	0002007b 	.word	0x0002007b

00016a60 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16a60:	4b07      	ldr	r3, [pc, #28]	; (16a80 <generic_hfclk_stop+0x20>)
   16a62:	e8d3 2fef 	ldaex	r2, [r3]
   16a66:	f022 0102 	bic.w	r1, r2, #2
   16a6a:	e8c3 1fe0 	stlex	r0, r1, [r3]
   16a6e:	2800      	cmp	r0, #0
   16a70:	d1f7      	bne.n	16a62 <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   16a72:	07d3      	lsls	r3, r2, #31
   16a74:	d402      	bmi.n	16a7c <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   16a76:	2001      	movs	r0, #1
   16a78:	f009 bc74 	b.w	20364 <nrfx_clock_stop>
}
   16a7c:	4770      	bx	lr
   16a7e:	bf00      	nop
   16a80:	2000a050 	.word	0x2000a050

00016a84 <z_nrf_clock_control_lf_on>:
{
   16a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   16a88:	2201      	movs	r2, #1
   16a8a:	4607      	mov	r7, r0
   16a8c:	4935      	ldr	r1, [pc, #212]	; (16b64 <z_nrf_clock_control_lf_on+0xe0>)
   16a8e:	e8d1 3fef 	ldaex	r3, [r1]
   16a92:	e8c1 2fe0 	stlex	r0, r2, [r1]
   16a96:	2800      	cmp	r0, #0
   16a98:	d1f9      	bne.n	16a8e <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   16a9a:	b933      	cbnz	r3, 16aaa <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   16a9c:	4932      	ldr	r1, [pc, #200]	; (16b68 <z_nrf_clock_control_lf_on+0xe4>)
		err = onoff_request(mgr, &cli);
   16a9e:	4833      	ldr	r0, [pc, #204]	; (16b6c <z_nrf_clock_control_lf_on+0xe8>)
   16aa0:	604b      	str	r3, [r1, #4]
   16aa2:	60cb      	str	r3, [r1, #12]
   16aa4:	608a      	str	r2, [r1, #8]
   16aa6:	f005 feb6 	bl	1c816 <onoff_request>
	switch (start_mode) {
   16aaa:	1e7b      	subs	r3, r7, #1
   16aac:	2b01      	cmp	r3, #1
   16aae:	d828      	bhi.n	16b02 <z_nrf_clock_control_lf_on+0x7e>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   16ab0:	2f01      	cmp	r7, #1
   16ab2:	d106      	bne.n	16ac2 <z_nrf_clock_control_lf_on+0x3e>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   16ab4:	4b2e      	ldr	r3, [pc, #184]	; (16b70 <z_nrf_clock_control_lf_on+0xec>)
   16ab6:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   16aba:	f003 0303 	and.w	r3, r3, #3
   16abe:	2b02      	cmp	r3, #2
   16ac0:	d01f      	beq.n	16b02 <z_nrf_clock_control_lf_on+0x7e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   16ac2:	f00a faa9 	bl	21018 <k_is_in_isr>
   16ac6:	4605      	mov	r5, r0
   16ac8:	b9e8      	cbnz	r0, 16b06 <z_nrf_clock_control_lf_on+0x82>
	return !z_sys_post_kernel;
   16aca:	4b2a      	ldr	r3, [pc, #168]	; (16b74 <z_nrf_clock_control_lf_on+0xf0>)
   16acc:	781b      	ldrb	r3, [r3, #0]
   16ace:	b1d3      	cbz	r3, 16b06 <z_nrf_clock_control_lf_on+0x82>
    p_reg->INTENCLR = mask;
   16ad0:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
   16ad2:	4606      	mov	r6, r0
   16ad4:	4b26      	ldr	r3, [pc, #152]	; (16b70 <z_nrf_clock_control_lf_on+0xec>)
   16ad6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   16ada:	4c25      	ldr	r4, [pc, #148]	; (16b70 <z_nrf_clock_control_lf_on+0xec>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   16adc:	f8df 8098 	ldr.w	r8, [pc, #152]	; 16b78 <z_nrf_clock_control_lf_on+0xf4>
   16ae0:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   16ae4:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   16ae8:	03d2      	lsls	r2, r2, #15
   16aea:	d516      	bpl.n	16b1a <z_nrf_clock_control_lf_on+0x96>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   16aec:	f003 0303 	and.w	r3, r3, #3
   16af0:	2b02      	cmp	r3, #2
   16af2:	d001      	beq.n	16af8 <z_nrf_clock_control_lf_on+0x74>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   16af4:	2f01      	cmp	r7, #1
   16af6:	d110      	bne.n	16b1a <z_nrf_clock_control_lf_on+0x96>
	if (isr_mode) {
   16af8:	b375      	cbz	r5, 16b58 <z_nrf_clock_control_lf_on+0xd4>
   16afa:	f386 8811 	msr	BASEPRI, r6
   16afe:	f3bf 8f6f 	isb	sy
}
   16b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   16b06:	f04f 0320 	mov.w	r3, #32
   16b0a:	f3ef 8611 	mrs	r6, BASEPRI
   16b0e:	f383 8812 	msr	BASEPRI_MAX, r3
   16b12:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   16b16:	2501      	movs	r5, #1
   16b18:	e7df      	b.n	16ada <z_nrf_clock_control_lf_on+0x56>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   16b1a:	b1c5      	cbz	r5, 16b4e <z_nrf_clock_control_lf_on+0xca>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   16b1c:	4630      	mov	r0, r6
   16b1e:	f7f6 fdbd 	bl	d69c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   16b22:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   16b26:	b2db      	uxtb	r3, r3
   16b28:	2b01      	cmp	r3, #1
   16b2a:	d1d9      	bne.n	16ae0 <z_nrf_clock_control_lf_on+0x5c>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   16b2c:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   16b30:	2a00      	cmp	r2, #0
   16b32:	d0d5      	beq.n	16ae0 <z_nrf_clock_control_lf_on+0x5c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16b34:	2200      	movs	r2, #0
   16b36:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   16b3a:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   16b3e:	2202      	movs	r2, #2
   16b40:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
   16b44:	2220      	movs	r2, #32
   16b46:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16b4a:	60a3      	str	r3, [r4, #8]
}
   16b4c:	e7c8      	b.n	16ae0 <z_nrf_clock_control_lf_on+0x5c>
	return z_impl_k_sleep(timeout);
   16b4e:	2100      	movs	r1, #0
   16b50:	2021      	movs	r0, #33	; 0x21
   16b52:	f003 fc95 	bl	1a480 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   16b56:	e7e4      	b.n	16b22 <z_nrf_clock_control_lf_on+0x9e>
    p_reg->INTENSET = mask;
   16b58:	2202      	movs	r2, #2
   16b5a:	4b05      	ldr	r3, [pc, #20]	; (16b70 <z_nrf_clock_control_lf_on+0xec>)
   16b5c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   16b60:	e7cf      	b.n	16b02 <z_nrf_clock_control_lf_on+0x7e>
   16b62:	bf00      	nop
   16b64:	20009fac 	.word	0x20009fac
   16b68:	20009f9c 	.word	0x20009f9c
   16b6c:	20009fcc 	.word	0x20009fcc
   16b70:	40005000 	.word	0x40005000
   16b74:	2000a296 	.word	0x2000a296
   16b78:	e000e100 	.word	0xe000e100

00016b7c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   16b7c:	b508      	push	{r3, lr}
   16b7e:	4807      	ldr	r0, [pc, #28]	; (16b9c <uart_console_init+0x20>)
   16b80:	f00a f98a 	bl	20e98 <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
   16b84:	b138      	cbz	r0, 16b96 <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
   16b86:	4806      	ldr	r0, [pc, #24]	; (16ba0 <uart_console_init+0x24>)
   16b88:	f7f7 fd06 	bl	e598 <__stdout_hook_install>
	__printk_hook_install(console_out);
   16b8c:	4804      	ldr	r0, [pc, #16]	; (16ba0 <uart_console_init+0x24>)
   16b8e:	f7f4 faf7 	bl	b180 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   16b92:	2000      	movs	r0, #0
}
   16b94:	bd08      	pop	{r3, pc}
		return -ENODEV;
   16b96:	f06f 0012 	mvn.w	r0, #18
   16b9a:	e7fb      	b.n	16b94 <uart_console_init+0x18>
   16b9c:	000223ec 	.word	0x000223ec
   16ba0:	00016ba5 	.word	0x00016ba5

00016ba4 <console_out>:
	if ('\n' == c) {
   16ba4:	280a      	cmp	r0, #10
{
   16ba6:	b538      	push	{r3, r4, r5, lr}
   16ba8:	4604      	mov	r4, r0
   16baa:	4d07      	ldr	r5, [pc, #28]	; (16bc8 <console_out+0x24>)
	if ('\n' == c) {
   16bac:	d104      	bne.n	16bb8 <console_out+0x14>
   16bae:	68ab      	ldr	r3, [r5, #8]
   16bb0:	210d      	movs	r1, #13
   16bb2:	4628      	mov	r0, r5
   16bb4:	685b      	ldr	r3, [r3, #4]
   16bb6:	4798      	blx	r3
   16bb8:	68ab      	ldr	r3, [r5, #8]
   16bba:	4803      	ldr	r0, [pc, #12]	; (16bc8 <console_out+0x24>)
   16bbc:	685b      	ldr	r3, [r3, #4]
   16bbe:	b2e1      	uxtb	r1, r4
   16bc0:	4798      	blx	r3
}
   16bc2:	4620      	mov	r0, r4
   16bc4:	bd38      	pop	{r3, r4, r5, pc}
   16bc6:	bf00      	nop
   16bc8:	000223ec 	.word	0x000223ec

00016bcc <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   16bcc:	b530      	push	{r4, r5, lr}
	return port->config;
   16bce:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   16bd0:	f001 041f 	and.w	r4, r1, #31
   16bd4:	7b05      	ldrb	r5, [r0, #12]
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
   16bd6:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   16bda:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   16bdc:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   16be0:	d105      	bne.n	16bee <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   16be2:	4620      	mov	r0, r4
   16be4:	f001 fe4c 	bl	18880 <nrfx_gpiote_trigger_disable>

		return 0;
   16be8:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
   16bea:	b005      	add	sp, #20
   16bec:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   16bee:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   16bf0:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   16bf4:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   16bf8:	d114      	bne.n	16c24 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   16bfa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   16bfe:	bf0c      	ite	eq
   16c00:	2304      	moveq	r3, #4
   16c02:	2305      	movne	r3, #5
   16c04:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   16c08:	2300      	movs	r3, #0
   16c0a:	4620      	mov	r0, r4
   16c0c:	4619      	mov	r1, r3
   16c0e:	aa02      	add	r2, sp, #8
   16c10:	f001 fc74 	bl	184fc <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   16c14:	4b1f      	ldr	r3, [pc, #124]	; (16c94 <gpio_nrfx_pin_interrupt_configure+0xc8>)
   16c16:	4298      	cmp	r0, r3
   16c18:	d138      	bne.n	16c8c <gpio_nrfx_pin_interrupt_configure+0xc0>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   16c1a:	2101      	movs	r1, #1
   16c1c:	4620      	mov	r0, r4
   16c1e:	f001 fde9 	bl	187f4 <nrfx_gpiote_trigger_enable>
	return 0;
   16c22:	e7e1      	b.n	16be8 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   16c24:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   16c28:	d025      	beq.n	16c76 <gpio_nrfx_pin_interrupt_configure+0xaa>
   16c2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   16c2e:	bf14      	ite	ne
   16c30:	2301      	movne	r3, #1
   16c32:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   16c34:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   16c38:	6883      	ldr	r3, [r0, #8]
   16c3a:	40cb      	lsrs	r3, r1
   16c3c:	07d9      	lsls	r1, r3, #31
   16c3e:	d4e3      	bmi.n	16c08 <gpio_nrfx_pin_interrupt_configure+0x3c>
   16c40:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   16c44:	d1e0      	bne.n	16c08 <gpio_nrfx_pin_interrupt_configure+0x3c>
        /* FALLTHROUGH */
        case 0: return NRF_P0;
#endif
#if defined(P1_FEATURE_PINS_PRESENT)
        /* FALLTHROUGH */
        case 1: return NRF_P1;
   16c46:	4a14      	ldr	r2, [pc, #80]	; (16c98 <gpio_nrfx_pin_interrupt_configure+0xcc>)
   16c48:	4814      	ldr	r0, [pc, #80]	; (16c9c <gpio_nrfx_pin_interrupt_configure+0xd0>)
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   16c4a:	0961      	lsrs	r1, r4, #5
        case 1: return NRF_P1;
   16c4c:	2901      	cmp	r1, #1
   16c4e:	bf08      	it	eq
   16c50:	4602      	moveq	r2, r0
    *p_pin = pin_number & 0x1F;
   16c52:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   16c56:	3380      	adds	r3, #128	; 0x80
   16c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   16c5c:	07db      	lsls	r3, r3, #31
   16c5e:	d4d3      	bmi.n	16c08 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   16c60:	f10d 0507 	add.w	r5, sp, #7
   16c64:	4629      	mov	r1, r5
   16c66:	4620      	mov	r0, r4
   16c68:	f001 fd70 	bl	1874c <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   16c6c:	4b0c      	ldr	r3, [pc, #48]	; (16ca0 <gpio_nrfx_pin_interrupt_configure+0xd4>)
   16c6e:	4298      	cmp	r0, r3
   16c70:	d003      	beq.n	16c7a <gpio_nrfx_pin_interrupt_configure+0xae>
		trigger_config.p_in_channel = &ch;
   16c72:	9503      	str	r5, [sp, #12]
   16c74:	e7c8      	b.n	16c08 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   16c76:	2303      	movs	r3, #3
   16c78:	e7dc      	b.n	16c34 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
   16c7a:	4628      	mov	r0, r5
   16c7c:	f001 fdb4 	bl	187e8 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   16c80:	4b04      	ldr	r3, [pc, #16]	; (16c94 <gpio_nrfx_pin_interrupt_configure+0xc8>)
   16c82:	4298      	cmp	r0, r3
   16c84:	d0f5      	beq.n	16c72 <gpio_nrfx_pin_interrupt_configure+0xa6>
				return -ENOMEM;
   16c86:	f06f 000b 	mvn.w	r0, #11
   16c8a:	e7ae      	b.n	16bea <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   16c8c:	f06f 0015 	mvn.w	r0, #21
   16c90:	e7ab      	b.n	16bea <gpio_nrfx_pin_interrupt_configure+0x1e>
   16c92:	bf00      	nop
   16c94:	0bad0000 	.word	0x0bad0000
   16c98:	40842500 	.word	0x40842500
   16c9c:	40842800 	.word	0x40842800
   16ca0:	0bad0004 	.word	0x0bad0004

00016ca4 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   16ca4:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   16ca6:	f001 fd8f 	bl	187c8 <nrfx_gpiote_is_init>
   16caa:	4604      	mov	r4, r0
   16cac:	b968      	cbnz	r0, 16cca <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   16cae:	f001 fd63 	bl	18778 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   16cb2:	4b08      	ldr	r3, [pc, #32]	; (16cd4 <gpio_nrfx_init+0x30>)
   16cb4:	4298      	cmp	r0, r3
   16cb6:	d10a      	bne.n	16cce <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   16cb8:	4621      	mov	r1, r4
   16cba:	4807      	ldr	r0, [pc, #28]	; (16cd8 <gpio_nrfx_init+0x34>)
   16cbc:	f001 fd40 	bl	18740 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   16cc0:	4622      	mov	r2, r4
   16cc2:	2105      	movs	r1, #5
   16cc4:	202f      	movs	r0, #47	; 0x2f
   16cc6:	f7f6 fd91 	bl	d7ec <z_arm_irq_priority_set>
		return 0;
   16cca:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   16ccc:	bd10      	pop	{r4, pc}
		return -EIO;
   16cce:	f06f 0004 	mvn.w	r0, #4
   16cd2:	e7fb      	b.n	16ccc <gpio_nrfx_init+0x28>
   16cd4:	0bad0000 	.word	0x0bad0000
   16cd8:	00016cdd 	.word	0x00016cdd

00016cdc <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   16cdc:	0942      	lsrs	r2, r0, #5
{
   16cde:	4603      	mov	r3, r0
   16ce0:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   16ce2:	d002      	beq.n	16cea <nrfx_gpio_handler+0xe>
   16ce4:	2a01      	cmp	r2, #1
   16ce6:	d017      	beq.n	16d18 <nrfx_gpio_handler+0x3c>
}
   16ce8:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   16cea:	4e0d      	ldr	r6, [pc, #52]	; (16d20 <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
   16cec:	6932      	ldr	r2, [r6, #16]
   16cee:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   16cf0:	2900      	cmp	r1, #0
   16cf2:	d0f9      	beq.n	16ce8 <nrfx_gpio_handler+0xc>
   16cf4:	2501      	movs	r5, #1
    *p_pin = pin_number & 0x1F;
   16cf6:	f003 031f 	and.w	r3, r3, #31
   16cfa:	680c      	ldr	r4, [r1, #0]
   16cfc:	409d      	lsls	r5, r3
   16cfe:	2900      	cmp	r1, #0
   16d00:	d0f2      	beq.n	16ce8 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
   16d02:	688a      	ldr	r2, [r1, #8]
   16d04:	402a      	ands	r2, r5
   16d06:	d002      	beq.n	16d0e <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   16d08:	4630      	mov	r0, r6
   16d0a:	684b      	ldr	r3, [r1, #4]
   16d0c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   16d0e:	b12c      	cbz	r4, 16d1c <nrfx_gpio_handler+0x40>
   16d10:	6823      	ldr	r3, [r4, #0]
   16d12:	4621      	mov	r1, r4
   16d14:	461c      	mov	r4, r3
   16d16:	e7f2      	b.n	16cfe <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   16d18:	4e02      	ldr	r6, [pc, #8]	; (16d24 <nrfx_gpio_handler+0x48>)
   16d1a:	e7e7      	b.n	16cec <nrfx_gpio_handler+0x10>
   16d1c:	4623      	mov	r3, r4
   16d1e:	e7f8      	b.n	16d12 <nrfx_gpio_handler+0x36>
   16d20:	000223a4 	.word	0x000223a4
   16d24:	0002238c 	.word	0x0002238c

00016d28 <gpio_nrfx_pin_configure>:
{
   16d28:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   16d2c:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   16d2e:	f001 051f 	and.w	r5, r1, #31
   16d32:	7b3b      	ldrb	r3, [r7, #12]
{
   16d34:	4614      	mov	r4, r2
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   16d36:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   16d3a:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   16d3c:	4628      	mov	r0, r5
   16d3e:	f10d 0103 	add.w	r1, sp, #3
   16d42:	f001 fd03 	bl	1874c <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   16d46:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   16d4a:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   16d4c:	d10b      	bne.n	16d66 <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   16d4e:	4628      	mov	r0, r5
   16d50:	f001 fdbe 	bl	188d0 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   16d54:	4b3c      	ldr	r3, [pc, #240]	; (16e48 <gpio_nrfx_pin_configure+0x120>)
   16d56:	4598      	cmp	r8, r3
   16d58:	d103      	bne.n	16d62 <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
   16d5a:	f89d 0003 	ldrb.w	r0, [sp, #3]
   16d5e:	f001 fd3d 	bl	187dc <nrfx_gpiote_channel_free>
		return 0;
   16d62:	2000      	movs	r0, #0
   16d64:	e00c      	b.n	16d80 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
   16d66:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   16d68:	4628      	mov	r0, r5
   16d6a:	4619      	mov	r1, r3
   16d6c:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
   16d6e:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   16d72:	f001 fbc3 	bl	184fc <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   16d76:	4b34      	ldr	r3, [pc, #208]	; (16e48 <gpio_nrfx_pin_configure+0x120>)
   16d78:	4298      	cmp	r0, r3
   16d7a:	d004      	beq.n	16d86 <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
   16d7c:	f06f 0015 	mvn.w	r0, #21
}
   16d80:	b004      	add	sp, #16
   16d82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   16d86:	4580      	cmp	r8, r0
   16d88:	d103      	bne.n	16d92 <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
   16d8a:	f89d 0003 	ldrb.w	r0, [sp, #3]
   16d8e:	f001 fd25 	bl	187dc <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   16d92:	03a3      	lsls	r3, r4, #14
   16d94:	d549      	bpl.n	16e2a <gpio_nrfx_pin_configure+0x102>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   16d96:	f240 3306 	movw	r3, #774	; 0x306
   16d9a:	4023      	ands	r3, r4
   16d9c:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   16da0:	d019      	beq.n	16dd6 <gpio_nrfx_pin_configure+0xae>
   16da2:	d80c      	bhi.n	16dbe <gpio_nrfx_pin_configure+0x96>
   16da4:	2b06      	cmp	r3, #6
   16da6:	d017      	beq.n	16dd8 <gpio_nrfx_pin_configure+0xb0>
   16da8:	d804      	bhi.n	16db4 <gpio_nrfx_pin_configure+0x8c>
   16daa:	b1ab      	cbz	r3, 16dd8 <gpio_nrfx_pin_configure+0xb0>
   16dac:	2b02      	cmp	r3, #2
   16dae:	d1e5      	bne.n	16d7c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
   16db0:	2304      	movs	r3, #4
   16db2:	e011      	b.n	16dd8 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   16db4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   16db8:	d1e0      	bne.n	16d7c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
   16dba:	2301      	movs	r3, #1
   16dbc:	e00c      	b.n	16dd8 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   16dbe:	f240 2202 	movw	r2, #514	; 0x202
   16dc2:	4293      	cmp	r3, r2
   16dc4:	d026      	beq.n	16e14 <gpio_nrfx_pin_configure+0xec>
   16dc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   16dca:	d025      	beq.n	16e18 <gpio_nrfx_pin_configure+0xf0>
   16dcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   16dd0:	d1d4      	bne.n	16d7c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
   16dd2:	2302      	movs	r3, #2
   16dd4:	e000      	b.n	16dd8 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
   16dd6:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   16dd8:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   16ddc:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   16de0:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   16de4:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   16de6:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
   16dea:	bf4c      	ite	mi
   16dec:	2303      	movmi	r3, #3
	} else if (flags & GPIO_PULL_DOWN) {
   16dee:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   16df2:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   16df4:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   16df8:	d510      	bpl.n	16e1c <gpio_nrfx_pin_configure+0xf4>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   16dfa:	2301      	movs	r3, #1
   16dfc:	687a      	ldr	r2, [r7, #4]
   16dfe:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   16e00:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   16e02:	2200      	movs	r2, #0
   16e04:	4628      	mov	r0, r5
   16e06:	a901      	add	r1, sp, #4
   16e08:	f001 fc26 	bl	18658 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   16e0c:	4b0e      	ldr	r3, [pc, #56]	; (16e48 <gpio_nrfx_pin_configure+0x120>)
   16e0e:	4298      	cmp	r0, r3
   16e10:	d0a7      	beq.n	16d62 <gpio_nrfx_pin_configure+0x3a>
   16e12:	e7b3      	b.n	16d7c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
   16e14:	2305      	movs	r3, #5
   16e16:	e7df      	b.n	16dd8 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   16e18:	2303      	movs	r3, #3
   16e1a:	e7dd      	b.n	16dd8 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   16e1c:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   16e1e:	bf41      	itttt	mi
   16e20:	2301      	movmi	r3, #1
   16e22:	687a      	ldrmi	r2, [r7, #4]
   16e24:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
   16e26:	60d3      	strmi	r3, [r2, #12]
}
   16e28:	e7eb      	b.n	16e02 <gpio_nrfx_pin_configure+0xda>
	if (flags & GPIO_PULL_UP) {
   16e2a:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   16e2c:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   16e30:	bf4c      	ite	mi
   16e32:	2403      	movmi	r4, #3
	} else if (flags & GPIO_PULL_DOWN) {
   16e34:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   16e38:	461a      	mov	r2, r3
   16e3a:	4628      	mov	r0, r5
   16e3c:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
   16e3e:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   16e42:	f001 fb5b 	bl	184fc <nrfx_gpiote_input_configure>
   16e46:	e7e1      	b.n	16e0c <gpio_nrfx_pin_configure+0xe4>
   16e48:	0bad0000 	.word	0x0bad0000

00016e4c <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   16e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   16e4e:	794b      	ldrb	r3, [r1, #5]
   16e50:	2b01      	cmp	r3, #1
   16e52:	d029      	beq.n	16ea8 <uarte_nrfx_configure+0x5c>
   16e54:	2b03      	cmp	r3, #3
   16e56:	d124      	bne.n	16ea2 <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   16e58:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   16e5a:	798b      	ldrb	r3, [r1, #6]
   16e5c:	2b03      	cmp	r3, #3
   16e5e:	d120      	bne.n	16ea2 <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   16e60:	79ce      	ldrb	r6, [r1, #7]
   16e62:	b10e      	cbz	r6, 16e68 <uarte_nrfx_configure+0x1c>
   16e64:	2e01      	cmp	r6, #1
   16e66:	d11c      	bne.n	16ea2 <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   16e68:	790a      	ldrb	r2, [r1, #4]
   16e6a:	2a01      	cmp	r2, #1
   16e6c:	d01e      	beq.n	16eac <uarte_nrfx_configure+0x60>
   16e6e:	2a02      	cmp	r2, #2
   16e70:	d020      	beq.n	16eb4 <uarte_nrfx_configure+0x68>
   16e72:	b9b2      	cbnz	r2, 16ea2 <uarte_nrfx_configure+0x56>
   16e74:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   16e76:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   16e78:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   16e7a:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   16e7e:	f8d5 c000 	ldr.w	ip, [r5]
	switch (baudrate) {
   16e82:	d06e      	beq.n	16f62 <uarte_nrfx_configure+0x116>
   16e84:	d833      	bhi.n	16eee <uarte_nrfx_configure+0xa2>
   16e86:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16e8a:	d06d      	beq.n	16f68 <uarte_nrfx_configure+0x11c>
   16e8c:	d81c      	bhi.n	16ec8 <uarte_nrfx_configure+0x7c>
   16e8e:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   16e92:	d06b      	beq.n	16f6c <uarte_nrfx_configure+0x120>
   16e94:	d810      	bhi.n	16eb8 <uarte_nrfx_configure+0x6c>
   16e96:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   16e9a:	d06a      	beq.n	16f72 <uarte_nrfx_configure+0x126>
   16e9c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   16ea0:	d06a      	beq.n	16f78 <uarte_nrfx_configure+0x12c>
		return -ENOTSUP;
   16ea2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   16ea6:	e05b      	b.n	16f60 <uarte_nrfx_configure+0x114>
	switch (cfg->stop_bits) {
   16ea8:	2700      	movs	r7, #0
   16eaa:	e7d6      	b.n	16e5a <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
   16eac:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   16eb0:	220e      	movs	r2, #14
   16eb2:	e7e0      	b.n	16e76 <uarte_nrfx_configure+0x2a>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
   16eb4:	2400      	movs	r4, #0
   16eb6:	e7fb      	b.n	16eb0 <uarte_nrfx_configure+0x64>
	switch (baudrate) {
   16eb8:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   16ebc:	d05f      	beq.n	16f7e <uarte_nrfx_configure+0x132>
   16ebe:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   16ec2:	d1ee      	bne.n	16ea2 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   16ec4:	4b38      	ldr	r3, [pc, #224]	; (16fa8 <uarte_nrfx_configure+0x15c>)
   16ec6:	e03c      	b.n	16f42 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   16ec8:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   16ecc:	d05a      	beq.n	16f84 <uarte_nrfx_configure+0x138>
   16ece:	d807      	bhi.n	16ee0 <uarte_nrfx_configure+0x94>
   16ed0:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   16ed4:	d058      	beq.n	16f88 <uarte_nrfx_configure+0x13c>
   16ed6:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   16eda:	d1e2      	bne.n	16ea2 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   16edc:	4b33      	ldr	r3, [pc, #204]	; (16fac <uarte_nrfx_configure+0x160>)
   16ede:	e030      	b.n	16f42 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   16ee0:	f647 2512 	movw	r5, #31250	; 0x7a12
   16ee4:	42ab      	cmp	r3, r5
   16ee6:	d1dc      	bne.n	16ea2 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   16ee8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   16eec:	e029      	b.n	16f42 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   16eee:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   16ef2:	d04b      	beq.n	16f8c <uarte_nrfx_configure+0x140>
   16ef4:	d813      	bhi.n	16f1e <uarte_nrfx_configure+0xd2>
   16ef6:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   16efa:	d04a      	beq.n	16f92 <uarte_nrfx_configure+0x146>
   16efc:	d809      	bhi.n	16f12 <uarte_nrfx_configure+0xc6>
   16efe:	f64d 25c0 	movw	r5, #56000	; 0xdac0
   16f02:	42ab      	cmp	r3, r5
   16f04:	d047      	beq.n	16f96 <uarte_nrfx_configure+0x14a>
   16f06:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   16f0a:	d1ca      	bne.n	16ea2 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   16f0c:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   16f10:	e017      	b.n	16f42 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   16f12:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   16f16:	d1c4      	bne.n	16ea2 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   16f18:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   16f1c:	e011      	b.n	16f42 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   16f1e:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   16f22:	d03b      	beq.n	16f9c <uarte_nrfx_configure+0x150>
   16f24:	d808      	bhi.n	16f38 <uarte_nrfx_configure+0xec>
   16f26:	4d22      	ldr	r5, [pc, #136]	; (16fb0 <uarte_nrfx_configure+0x164>)
   16f28:	42ab      	cmp	r3, r5
   16f2a:	d03a      	beq.n	16fa2 <uarte_nrfx_configure+0x156>
   16f2c:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   16f30:	d1b7      	bne.n	16ea2 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   16f32:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   16f36:	e004      	b.n	16f42 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   16f38:	4d1e      	ldr	r5, [pc, #120]	; (16fb4 <uarte_nrfx_configure+0x168>)
   16f3a:	42ab      	cmp	r3, r5
   16f3c:	d1b1      	bne.n	16ea2 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   16f3e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   16f42:	6905      	ldr	r5, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   16f44:	f8cc 3524 	str.w	r3, [ip, #1316]	; 0x524
	return config->uarte_regs;
   16f48:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->stop
   16f4a:	433a      	orrs	r2, r7
   16f4c:	681b      	ldr	r3, [r3, #0]
                    | (uint32_t)p_cfg->hwfc;
   16f4e:	4334      	orrs	r4, r6
   16f50:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   16f52:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   16f56:	1d2b      	adds	r3, r5, #4
   16f58:	c903      	ldmia	r1, {r0, r1}
   16f5a:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   16f5e:	2000      	movs	r0, #0
}
   16f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   16f62:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   16f66:	e7ec      	b.n	16f42 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   16f68:	4b13      	ldr	r3, [pc, #76]	; (16fb8 <uarte_nrfx_configure+0x16c>)
   16f6a:	e7ea      	b.n	16f42 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   16f6c:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   16f70:	e7e7      	b.n	16f42 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = 0x00014000;
   16f72:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   16f76:	e7e4      	b.n	16f42 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   16f78:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   16f7c:	e7e1      	b.n	16f42 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   16f7e:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   16f82:	e7de      	b.n	16f42 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   16f84:	4b0d      	ldr	r3, [pc, #52]	; (16fbc <uarte_nrfx_configure+0x170>)
   16f86:	e7dc      	b.n	16f42 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   16f88:	4b0d      	ldr	r3, [pc, #52]	; (16fc0 <uarte_nrfx_configure+0x174>)
   16f8a:	e7da      	b.n	16f42 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   16f8c:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   16f90:	e7d7      	b.n	16f42 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   16f92:	4b0c      	ldr	r3, [pc, #48]	; (16fc4 <uarte_nrfx_configure+0x178>)
   16f94:	e7d5      	b.n	16f42 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   16f96:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   16f9a:	e7d2      	b.n	16f42 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   16f9c:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   16fa0:	e7cf      	b.n	16f42 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   16fa2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   16fa6:	e7cc      	b.n	16f42 <uarte_nrfx_configure+0xf6>
   16fa8:	0013b000 	.word	0x0013b000
   16fac:	004ea000 	.word	0x004ea000
   16fb0:	0003d090 	.word	0x0003d090
   16fb4:	000f4240 	.word	0x000f4240
   16fb8:	00275000 	.word	0x00275000
   16fbc:	0075c000 	.word	0x0075c000
   16fc0:	003af000 	.word	0x003af000
   16fc4:	013a9000 	.word	0x013a9000

00016fc8 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   16fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16fcc:	4681      	mov	r9, r0
   16fce:	b082      	sub	sp, #8
   16fd0:	2200      	movs	r2, #0
   16fd2:	2101      	movs	r1, #1
   16fd4:	2008      	movs	r0, #8
   16fd6:	af00      	add	r7, sp, #0
   16fd8:	f7f6 fc08 	bl	d7ec <z_arm_irq_priority_set>
   16fdc:	2008      	movs	r0, #8
   16fde:	f7f6 fbd5 	bl	d78c <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   16fe2:	2100      	movs	r1, #0
	const struct uarte_nrfx_config *config = dev->config;
   16fe4:	f8d9 8004 	ldr.w	r8, [r9, #4]
	struct uarte_nrfx_data *data = dev->data;
   16fe8:	f8d9 6010 	ldr.w	r6, [r9, #16]
	return config->uarte_regs;
   16fec:	f8d8 4000 	ldr.w	r4, [r8]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   16ff0:	1d3a      	adds	r2, r7, #4
   16ff2:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
   16ff6:	f8c6 9000 	str.w	r9, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   16ffa:	f8d8 a00c 	ldr.w	sl, [r8, #12]
   16ffe:	4650      	mov	r0, sl
   17000:	f009 f938 	bl	20274 <pinctrl_lookup_state>
	if (ret < 0) {
   17004:	1e05      	subs	r5, r0, #0
   17006:	db2c      	blt.n	17062 <uarte_0_init+0x9a>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   17008:	687b      	ldr	r3, [r7, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1700a:	f8da 2000 	ldr.w	r2, [sl]
   1700e:	7919      	ldrb	r1, [r3, #4]
   17010:	6818      	ldr	r0, [r3, #0]
   17012:	f000 fd59 	bl	17ac8 <pinctrl_configure_pins>
	if (err < 0) {
   17016:	1e05      	subs	r5, r0, #0
   17018:	db23      	blt.n	17062 <uarte_0_init+0x9a>
	err = uarte_nrfx_configure(dev, &data->uart_config);
   1701a:	4648      	mov	r0, r9
   1701c:	1d31      	adds	r1, r6, #4
   1701e:	f7ff ff15 	bl	16e4c <uarte_nrfx_configure>
	if (err) {
   17022:	4605      	mov	r5, r0
   17024:	b9e8      	cbnz	r0, 17062 <uarte_0_init+0x9a>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   17026:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1702a:	0799      	lsls	r1, r3, #30
   1702c:	d52b      	bpl.n	17086 <uarte_0_init+0xbe>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1702e:	f106 0018 	add.w	r0, r6, #24
   17032:	f001 f9cf 	bl	183d4 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   17036:	4b29      	ldr	r3, [pc, #164]	; (170dc <uarte_0_init+0x114>)
   17038:	4298      	cmp	r0, r3
   1703a:	d017      	beq.n	1706c <uarte_0_init+0xa4>
		LOG_ERR("Failed to allocate PPI Channel");
   1703c:	466c      	mov	r4, sp
   1703e:	b088      	sub	sp, #32
   17040:	466a      	mov	r2, sp
   17042:	4b27      	ldr	r3, [pc, #156]	; (170e0 <uarte_0_init+0x118>)
   17044:	6153      	str	r3, [r2, #20]
   17046:	4b27      	ldr	r3, [pc, #156]	; (170e4 <uarte_0_init+0x11c>)
   17048:	6193      	str	r3, [r2, #24]
   1704a:	2303      	movs	r3, #3
   1704c:	f842 3f10 	str.w	r3, [r2, #16]!
   17050:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17054:	462b      	mov	r3, r5
   17056:	4824      	ldr	r0, [pc, #144]	; (170e8 <uarte_0_init+0x120>)
   17058:	f7f5 f92c 	bl	c2b4 <z_impl_z_log_msg_static_create>
		return -EIO;
   1705c:	f06f 0504 	mvn.w	r5, #4
   17060:	46a5      	mov	sp, r4
UART_NRF_UARTE_DEVICE(0);
   17062:	4628      	mov	r0, r5
   17064:	3708      	adds	r7, #8
   17066:	46bd      	mov	sp, r7
   17068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1706c:	7e33      	ldrb	r3, [r6, #24]
   1706e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   17072:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   17076:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1707a:	2301      	movs	r3, #1
   1707c:	7e32      	ldrb	r2, [r6, #24]
   1707e:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
   17080:	4a1a      	ldr	r2, [pc, #104]	; (170ec <uarte_0_init+0x124>)
   17082:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   17086:	2308      	movs	r3, #8
   17088:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   1708c:	f898 3008 	ldrb.w	r3, [r8, #8]
   17090:	b953      	cbnz	r3, 170a8 <uarte_0_init+0xe0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17092:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   17096:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1709a:	6973      	ldr	r3, [r6, #20]
   1709c:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   170a0:	2301      	movs	r3, #1
   170a2:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   170a6:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   170a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
   170ac:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   170ae:	bf5c      	itt	pl
   170b0:	f44f 7380 	movpl.w	r3, #256	; 0x100
   170b4:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   170b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
   170bc:	06db      	lsls	r3, r3, #27
   170be:	bf44      	itt	mi
   170c0:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   170c4:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   170c8:	6933      	ldr	r3, [r6, #16]
   170ca:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   170ce:	2300      	movs	r3, #0
   170d0:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   170d4:	2301      	movs	r3, #1
   170d6:	60a3      	str	r3, [r4, #8]
   170d8:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   170da:	e7c2      	b.n	17062 <uarte_0_init+0x9a>
   170dc:	0bad0000 	.word	0x0bad0000
   170e0:	000265b8 	.word	0x000265b8
   170e4:	000265db 	.word	0x000265db
   170e8:	000228a8 	.word	0x000228a8
   170ec:	40017000 	.word	0x40017000

000170f0 <uarte_nrfx_poll_out>:
{
   170f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   170f2:	4604      	mov	r4, r0
   170f4:	460d      	mov	r5, r1
	struct uarte_nrfx_data *data = dev->data;
   170f6:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   170f8:	f009 ff8e 	bl	21018 <k_is_in_isr>
   170fc:	b9b0      	cbnz	r0, 1712c <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
   170fe:	4b2e      	ldr	r3, [pc, #184]	; (171b8 <uarte_nrfx_poll_out+0xc8>)
   17100:	781b      	ldrb	r3, [r3, #0]
   17102:	b19b      	cbz	r3, 1712c <uarte_nrfx_poll_out+0x3c>
{
   17104:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   17106:	6860      	ldr	r0, [r4, #4]
   17108:	f009 f82a 	bl	20160 <is_tx_ready.isra.0>
   1710c:	bb00      	cbnz	r0, 17150 <uarte_nrfx_poll_out+0x60>
   1710e:	2001      	movs	r0, #1
   17110:	f009 f926 	bl	20360 <nrfx_busy_wait>
   17114:	3e01      	subs	r6, #1
   17116:	d1f6      	bne.n	17106 <uarte_nrfx_poll_out+0x16>
   17118:	2100      	movs	r1, #0
   1711a:	2021      	movs	r0, #33	; 0x21
   1711c:	f003 f9b0 	bl	1a480 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   17120:	e7f0      	b.n	17104 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
   17122:	f386 8811 	msr	BASEPRI, r6
   17126:	f3bf 8f6f 	isb	sy
}
   1712a:	e7f5      	b.n	17118 <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
   1712c:	f04f 0320 	mov.w	r3, #32
   17130:	f3ef 8611 	mrs	r6, BASEPRI
   17134:	f383 8812 	msr	BASEPRI_MAX, r3
   17138:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1713c:	6860      	ldr	r0, [r4, #4]
   1713e:	4631      	mov	r1, r6
   17140:	f009 f80e 	bl	20160 <is_tx_ready.isra.0>
   17144:	b990      	cbnz	r0, 1716c <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
   17146:	f386 8811 	msr	BASEPRI, r6
   1714a:	f3bf 8f6f 	isb	sy
}
   1714e:	e7ed      	b.n	1712c <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
   17150:	f04f 0320 	mov.w	r3, #32
   17154:	f3ef 8611 	mrs	r6, BASEPRI
   17158:	f383 8812 	msr	BASEPRI_MAX, r3
   1715c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   17160:	6860      	ldr	r0, [r4, #4]
   17162:	4631      	mov	r1, r6
   17164:	f008 fffc 	bl	20160 <is_tx_ready.isra.0>
   17168:	2800      	cmp	r0, #0
   1716a:	d0da      	beq.n	17122 <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
   1716c:	693b      	ldr	r3, [r7, #16]
   1716e:	701d      	strb	r5, [r3, #0]
	const struct uarte_nrfx_config *config = dev->config;
   17170:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   17172:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
   17174:	6813      	ldr	r3, [r2, #0]
   17176:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1717a:	2001      	movs	r0, #1
   1717c:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17180:	2000      	movs	r0, #0
   17182:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   17186:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
   1718a:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1718e:	6852      	ldr	r2, [r2, #4]
   17190:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
   17194:	06d2      	lsls	r2, r2, #27
   17196:	d508      	bpl.n	171aa <uarte_nrfx_poll_out+0xba>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   17198:	2008      	movs	r0, #8
	return config->uarte_regs;
   1719a:	6862      	ldr	r2, [r4, #4]
   1719c:	6812      	ldr	r2, [r2, #0]
   1719e:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
   171a2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   171a6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   171aa:	2201      	movs	r2, #1
   171ac:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
   171ae:	f381 8811 	msr	BASEPRI, r1
   171b2:	f3bf 8f6f 	isb	sy
}
   171b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   171b8:	2000a296 	.word	0x2000a296

000171bc <bt_rpmsg_send>:
		LOG_HEXDUMP_DBG(buf->data, buf->len, "RX buf payload:");
	}
}

static int bt_rpmsg_send(struct net_buf *buf)
{
   171bc:	b5b0      	push	{r4, r5, r7, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   171be:	7d01      	ldrb	r1, [r0, #20]
   171c0:	4604      	mov	r4, r0
	int err;
	uint8_t pkt_indicator;

	BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   171c2:	2902      	cmp	r1, #2
{
   171c4:	af00      	add	r7, sp, #0
	switch (bt_buf_get_type(buf)) {
   171c6:	d01a      	beq.n	171fe <bt_rpmsg_send+0x42>
   171c8:	2904      	cmp	r1, #4
   171ca:	d017      	beq.n	171fc <bt_rpmsg_send+0x40>
   171cc:	b359      	cbz	r1, 17226 <bt_rpmsg_send+0x6a>
		break;
	case BT_BUF_ISO_OUT:
		pkt_indicator = RPMSG_ISO;
		break;
	default:
		BT_ERR("Unknown type %u", bt_buf_get_type(buf));
   171ce:	466d      	mov	r5, sp
   171d0:	b088      	sub	sp, #32
   171d2:	466a      	mov	r2, sp
   171d4:	4b15      	ldr	r3, [pc, #84]	; (1722c <bt_rpmsg_send+0x70>)
   171d6:	6153      	str	r3, [r2, #20]
   171d8:	4b15      	ldr	r3, [pc, #84]	; (17230 <bt_rpmsg_send+0x74>)
	switch (bt_buf_get_type(buf)) {
   171da:	e9c2 3106 	strd	r3, r1, [r2, #24]
	net_buf_push_u8(buf, pkt_indicator);

	LOG_HEXDUMP_DBG(buf->data, buf->len, "Final HCI buffer:");
	err = ipc_service_send(&hci_ept, buf->data, buf->len);
	if (err < 0) {
		BT_ERR("Failed to send (err %d)", err);
   171de:	2304      	movs	r3, #4
   171e0:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   171e4:	4813      	ldr	r0, [pc, #76]	; (17234 <bt_rpmsg_send+0x78>)
   171e6:	f842 3f10 	str.w	r3, [r2, #16]!
   171ea:	f009 f802 	bl	201f2 <z_log_msg_static_create.constprop.0>
   171ee:	46ad      	mov	sp, r5
	}

done:
	net_buf_unref(buf);
   171f0:	4620      	mov	r0, r4
   171f2:	f7ff f8a3 	bl	1633c <net_buf_unref>
	return 0;
}
   171f6:	2000      	movs	r0, #0
   171f8:	46bd      	mov	sp, r7
   171fa:	bdb0      	pop	{r4, r5, r7, pc}
		pkt_indicator = RPMSG_ISO;
   171fc:	2105      	movs	r1, #5
	net_buf_simple_push_u8(&buf->b, val);
   171fe:	f104 0008 	add.w	r0, r4, #8
   17202:	f008 fe62 	bl	1feca <net_buf_simple_push_u8>
	err = ipc_service_send(&hci_ept, buf->data, buf->len);
   17206:	89a2      	ldrh	r2, [r4, #12]
   17208:	68a1      	ldr	r1, [r4, #8]
   1720a:	480b      	ldr	r0, [pc, #44]	; (17238 <bt_rpmsg_send+0x7c>)
   1720c:	f7f5 fc06 	bl	ca1c <ipc_service_send>
	if (err < 0) {
   17210:	2800      	cmp	r0, #0
   17212:	daed      	bge.n	171f0 <bt_rpmsg_send+0x34>
		BT_ERR("Failed to send (err %d)", err);
   17214:	466d      	mov	r5, sp
   17216:	b088      	sub	sp, #32
   17218:	466a      	mov	r2, sp
   1721a:	4b08      	ldr	r3, [pc, #32]	; (1723c <bt_rpmsg_send+0x80>)
   1721c:	6153      	str	r3, [r2, #20]
   1721e:	4b04      	ldr	r3, [pc, #16]	; (17230 <bt_rpmsg_send+0x74>)
   17220:	e9c2 3006 	strd	r3, r0, [r2, #24]
   17224:	e7db      	b.n	171de <bt_rpmsg_send+0x22>
	switch (bt_buf_get_type(buf)) {
   17226:	2101      	movs	r1, #1
   17228:	e7e9      	b.n	171fe <bt_rpmsg_send+0x42>
   1722a:	bf00      	nop
   1722c:	0002660b 	.word	0x0002660b
   17230:	000268cc 	.word	0x000268cc
   17234:	00022800 	.word	0x00022800
   17238:	2000a06c 	.word	0x2000a06c
   1723c:	0002661f 	.word	0x0002661f

00017240 <bt_rpmsg_init>:
	.quirks         = BT_QUIRK_NO_AUTO_DLE,
#endif
};

static int bt_rpmsg_init(const struct device *unused)
{
   17240:	b5b0      	push	{r4, r5, r7, lr}
	ARG_UNUSED(unused);

	int err;

	err = bt_hci_driver_register(&drv);
   17242:	480d      	ldr	r0, [pc, #52]	; (17278 <bt_rpmsg_init+0x38>)
{
   17244:	af00      	add	r7, sp, #0
	err = bt_hci_driver_register(&drv);
   17246:	f7f8 fe3b 	bl	fec0 <bt_hci_driver_register>
	if (err < 0) {
   1724a:	1e04      	subs	r4, r0, #0
   1724c:	da10      	bge.n	17270 <bt_rpmsg_init+0x30>
		BT_ERR("Failed to register BT HIC driver (err %d)", err);
   1724e:	466d      	mov	r5, sp
   17250:	b088      	sub	sp, #32
   17252:	466a      	mov	r2, sp
   17254:	4b09      	ldr	r3, [pc, #36]	; (1727c <bt_rpmsg_init+0x3c>)
   17256:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1725a:	6153      	str	r3, [r2, #20]
   1725c:	4b08      	ldr	r3, [pc, #32]	; (17280 <bt_rpmsg_init+0x40>)
   1725e:	4809      	ldr	r0, [pc, #36]	; (17284 <bt_rpmsg_init+0x44>)
   17260:	e9c2 3406 	strd	r3, r4, [r2, #24]
   17264:	2304      	movs	r3, #4
   17266:	f842 3f10 	str.w	r3, [r2, #16]!
   1726a:	f008 ffc2 	bl	201f2 <z_log_msg_static_create.constprop.0>
   1726e:	46ad      	mov	sp, r5
	}

	return err;
}
   17270:	4620      	mov	r0, r4
   17272:	46bd      	mov	sp, r7
   17274:	bdb0      	pop	{r4, r5, r7, pc}
   17276:	bf00      	nop
   17278:	00023304 	.word	0x00023304
   1727c:	0002663b 	.word	0x0002663b
   17280:	000268da 	.word	0x000268da
   17284:	00022800 	.word	0x00022800

00017288 <hci_ept_bound>:
	z_impl_k_sem_give(sem);
   17288:	4801      	ldr	r0, [pc, #4]	; (17290 <hci_ept_bound+0x8>)
   1728a:	f002 bbd5 	b.w	19a38 <z_impl_k_sem_give>
   1728e:	bf00      	nop
   17290:	2000891c 	.word	0x2000891c

00017294 <bt_rpmsg_open>:
{
   17294:	b5b0      	push	{r4, r5, r7, lr}
	err = ipc_service_open_instance(hci_ipc_instance);
   17296:	481b      	ldr	r0, [pc, #108]	; (17304 <bt_rpmsg_open+0x70>)
{
   17298:	af00      	add	r7, sp, #0
	err = ipc_service_open_instance(hci_ipc_instance);
   1729a:	f7f5 fb47 	bl	c92c <ipc_service_open_instance>
	if (err && (err != -EALREADY)) {
   1729e:	4604      	mov	r4, r0
   172a0:	b1b0      	cbz	r0, 172d0 <bt_rpmsg_open+0x3c>
   172a2:	f110 0f78 	cmn.w	r0, #120	; 0x78
   172a6:	d013      	beq.n	172d0 <bt_rpmsg_open+0x3c>
		BT_ERR("IPC service instance initialization failed: %d\n", err);
   172a8:	466d      	mov	r5, sp
   172aa:	b088      	sub	sp, #32
   172ac:	466a      	mov	r2, sp
   172ae:	4b16      	ldr	r3, [pc, #88]	; (17308 <bt_rpmsg_open+0x74>)
		BT_ERR("Endpoint binding failed with %d", err);
   172b0:	6153      	str	r3, [r2, #20]
   172b2:	4b16      	ldr	r3, [pc, #88]	; (1730c <bt_rpmsg_open+0x78>)
   172b4:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   172b8:	e9c2 3406 	strd	r3, r4, [r2, #24]
   172bc:	2304      	movs	r3, #4
   172be:	4814      	ldr	r0, [pc, #80]	; (17310 <bt_rpmsg_open+0x7c>)
   172c0:	f842 3f10 	str.w	r3, [r2, #16]!
   172c4:	f008 ff95 	bl	201f2 <z_log_msg_static_create.constprop.0>
   172c8:	46ad      	mov	sp, r5
}
   172ca:	4620      	mov	r0, r4
   172cc:	46bd      	mov	sp, r7
   172ce:	bdb0      	pop	{r4, r5, r7, pc}
	err = ipc_service_register_endpoint(hci_ipc_instance, &hci_ept, &hci_ept_cfg);
   172d0:	4a10      	ldr	r2, [pc, #64]	; (17314 <bt_rpmsg_open+0x80>)
   172d2:	4911      	ldr	r1, [pc, #68]	; (17318 <bt_rpmsg_open+0x84>)
   172d4:	480b      	ldr	r0, [pc, #44]	; (17304 <bt_rpmsg_open+0x70>)
   172d6:	f7f5 fb63 	bl	c9a0 <ipc_service_register_endpoint>
	if (err) {
   172da:	4604      	mov	r4, r0
   172dc:	b120      	cbz	r0, 172e8 <bt_rpmsg_open+0x54>
		BT_ERR("Registering endpoint failed with %d", err);
   172de:	466d      	mov	r5, sp
   172e0:	b088      	sub	sp, #32
   172e2:	466a      	mov	r2, sp
   172e4:	4b0d      	ldr	r3, [pc, #52]	; (1731c <bt_rpmsg_open+0x88>)
   172e6:	e7e3      	b.n	172b0 <bt_rpmsg_open+0x1c>
	return z_impl_k_sem_take(sem, timeout);
   172e8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   172ec:	2300      	movs	r3, #0
   172ee:	480c      	ldr	r0, [pc, #48]	; (17320 <bt_rpmsg_open+0x8c>)
   172f0:	f002 fbc8 	bl	19a84 <z_impl_k_sem_take>
	if (err) {
   172f4:	4604      	mov	r4, r0
   172f6:	2800      	cmp	r0, #0
   172f8:	d0e7      	beq.n	172ca <bt_rpmsg_open+0x36>
		BT_ERR("Endpoint binding failed with %d", err);
   172fa:	466d      	mov	r5, sp
   172fc:	b088      	sub	sp, #32
   172fe:	466a      	mov	r2, sp
   17300:	4b08      	ldr	r3, [pc, #32]	; (17324 <bt_rpmsg_open+0x90>)
   17302:	e7d5      	b.n	172b0 <bt_rpmsg_open+0x1c>
   17304:	00022404 	.word	0x00022404
   17308:	00026669 	.word	0x00026669
   1730c:	000268be 	.word	0x000268be
   17310:	00022800 	.word	0x00022800
   17314:	20008490 	.word	0x20008490
   17318:	2000a06c 	.word	0x2000a06c
   1731c:	0002669d 	.word	0x0002669d
   17320:	2000891c 	.word	0x2000891c
   17324:	000266c5 	.word	0x000266c5

00017328 <hci_ept_recv>:
{
   17328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1732c:	b083      	sub	sp, #12
	pkt_indicator = *data++;
   1732e:	f890 8000 	ldrb.w	r8, [r0]
{
   17332:	4606      	mov	r6, r0
	switch (pkt_indicator) {
   17334:	f1b8 0f04 	cmp.w	r8, #4
{
   17338:	460c      	mov	r4, r1
   1733a:	af00      	add	r7, sp, #0
	remaining -= sizeof(pkt_indicator);
   1733c:	f101 33ff 	add.w	r3, r1, #4294967295
	switch (pkt_indicator) {
   17340:	d011      	beq.n	17366 <hci_ept_recv+0x3e>
   17342:	f1b8 0f05 	cmp.w	r8, #5
   17346:	f000 80cb 	beq.w	174e0 <hci_ept_recv+0x1b8>
   1734a:	f1b8 0f02 	cmp.w	r8, #2
   1734e:	f040 8108 	bne.w	17562 <hci_ept_recv+0x23a>
	if (remaining < sizeof(hdr)) {
   17352:	2b03      	cmp	r3, #3
   17354:	f200 8087 	bhi.w	17466 <hci_ept_recv+0x13e>
		BT_ERR("Not enough data for ACL header");
   17358:	466c      	mov	r4, sp
   1735a:	b088      	sub	sp, #32
   1735c:	466a      	mov	r2, sp
   1735e:	4b88      	ldr	r3, [pc, #544]	; (17580 <hci_ept_recv+0x258>)
		BT_ERR("No available ACL buffers!");
   17360:	6153      	str	r3, [r2, #20]
   17362:	4b88      	ldr	r3, [pc, #544]	; (17584 <hci_ept_recv+0x25c>)
   17364:	e007      	b.n	17376 <hci_ept_recv+0x4e>
	if (remaining < sizeof(hdr)) {
   17366:	2b01      	cmp	r3, #1
   17368:	d813      	bhi.n	17392 <hci_ept_recv+0x6a>
		BT_ERR("Not enough data for event header");
   1736a:	466c      	mov	r4, sp
   1736c:	b088      	sub	sp, #32
   1736e:	466a      	mov	r2, sp
   17370:	4b85      	ldr	r3, [pc, #532]	; (17588 <hci_ept_recv+0x260>)
		BT_ERR("Event payload length is not correct");
   17372:	6153      	str	r3, [r2, #20]
   17374:	4b85      	ldr	r3, [pc, #532]	; (1758c <hci_ept_recv+0x264>)
   17376:	6193      	str	r3, [r2, #24]
   17378:	2303      	movs	r3, #3
   1737a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1737e:	f842 3f10 	str.w	r3, [r2, #16]!
   17382:	4883      	ldr	r0, [pc, #524]	; (17590 <hci_ept_recv+0x268>)
   17384:	f008 ff35 	bl	201f2 <z_log_msg_static_create.constprop.0>
   17388:	46a5      	mov	sp, r4
}
   1738a:	370c      	adds	r7, #12
   1738c:	46bd      	mov	sp, r7
   1738e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (evt_type) {
   17392:	7843      	ldrb	r3, [r0, #1]
   17394:	2b3e      	cmp	r3, #62	; 0x3e
   17396:	d13e      	bne.n	17416 <hci_ept_recv+0xee>
		switch (subevt_type) {
   17398:	f890 a003 	ldrb.w	sl, [r0, #3]
   1739c:	f1aa 0302 	sub.w	r3, sl, #2
   173a0:	f1d3 0a00 	rsbs	sl, r3, #0
   173a4:	eb4a 0a03 	adc.w	sl, sl, r3
	memcpy((void *)&hdr, data, sizeof(hdr));
   173a8:	f8b6 3001 	ldrh.w	r3, [r6, #1]
	remaining -= sizeof(hdr);
   173ac:	3c03      	subs	r4, #3
	if (remaining != hdr.len) {
   173ae:	ebb4 2f13 	cmp.w	r4, r3, lsr #8
	memcpy((void *)&hdr, data, sizeof(hdr));
   173b2:	80bb      	strh	r3, [r7, #4]
	if (remaining != hdr.len) {
   173b4:	d135      	bne.n	17422 <hci_ept_recv+0xfa>
   173b6:	f1ba 0f00 	cmp.w	sl, #0
   173ba:	d02f      	beq.n	1741c <hci_ept_recv+0xf4>
   173bc:	f04f 0800 	mov.w	r8, #0
   173c0:	f04f 0900 	mov.w	r9, #0
			BT_WARN("Couldn't allocate a buffer after waiting 10 seconds.");
   173c4:	f8df b1cc 	ldr.w	fp, [pc, #460]	; 17594 <hci_ept_recv+0x26c>
		buf = bt_buf_get_evt(hdr.evt, discardable, discardable ? K_NO_WAIT : K_SECONDS(10));
   173c8:	4642      	mov	r2, r8
   173ca:	464b      	mov	r3, r9
   173cc:	4651      	mov	r1, sl
   173ce:	7938      	ldrb	r0, [r7, #4]
   173d0:	f7f7 fa26 	bl	e820 <bt_buf_get_evt>
		if (!buf) {
   173d4:	4605      	mov	r5, r0
   173d6:	b348      	cbz	r0, 1742c <hci_ept_recv+0x104>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   173d8:	f100 0808 	add.w	r8, r0, #8
   173dc:	2202      	movs	r2, #2
   173de:	1d39      	adds	r1, r7, #4
   173e0:	4640      	mov	r0, r8
   173e2:	f008 fd59 	bl	1fe98 <net_buf_simple_add_mem>
	return net_buf_simple_tailroom(&buf->b);
   173e6:	4640      	mov	r0, r8
   173e8:	f008 fd94 	bl	1ff14 <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   173ec:	4284      	cmp	r4, r0
   173ee:	d931      	bls.n	17454 <hci_ept_recv+0x12c>
		BT_ERR("Not enough space in buffer %zu/%zu",
   173f0:	466e      	mov	r6, sp
   173f2:	b08a      	sub	sp, #40	; 0x28
   173f4:	466a      	mov	r2, sp
   173f6:	4b68      	ldr	r3, [pc, #416]	; (17598 <hci_ept_recv+0x270>)
   173f8:	6153      	str	r3, [r2, #20]
   173fa:	4b64      	ldr	r3, [pc, #400]	; (1758c <hci_ept_recv+0x264>)
		BT_ERR("Not enough space in buffer %zu/%zu",
   173fc:	e9c2 3406 	strd	r3, r4, [r2, #24]
   17400:	2305      	movs	r3, #5
   17402:	6210      	str	r0, [r2, #32]
   17404:	f842 3f10 	str.w	r3, [r2, #16]!
		BT_ERR("Not enough space in buffer %zu/%zu",
   17408:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   1740c:	4860      	ldr	r0, [pc, #384]	; (17590 <hci_ept_recv+0x268>)
   1740e:	f008 fef0 	bl	201f2 <z_log_msg_static_create.constprop.0>
   17412:	46b5      	mov	sp, r6
   17414:	e04c      	b.n	174b0 <hci_ept_recv+0x188>
			return false;
   17416:	f04f 0a00 	mov.w	sl, #0
   1741a:	e7c5      	b.n	173a8 <hci_ept_recv+0x80>
   1741c:	f44f 28a0 	mov.w	r8, #327680	; 0x50000
   17420:	e7ce      	b.n	173c0 <hci_ept_recv+0x98>
		BT_ERR("Event payload length is not correct");
   17422:	466c      	mov	r4, sp
   17424:	b088      	sub	sp, #32
   17426:	466a      	mov	r2, sp
   17428:	4b5c      	ldr	r3, [pc, #368]	; (1759c <hci_ept_recv+0x274>)
   1742a:	e7a2      	b.n	17372 <hci_ept_recv+0x4a>
			if (discardable) {
   1742c:	f1ba 0f00 	cmp.w	sl, #0
   17430:	d1ab      	bne.n	1738a <hci_ept_recv+0x62>
			BT_WARN("Couldn't allocate a buffer after waiting 10 seconds.");
   17432:	466d      	mov	r5, sp
   17434:	b088      	sub	sp, #32
   17436:	466a      	mov	r2, sp
   17438:	4b54      	ldr	r3, [pc, #336]	; (1758c <hci_ept_recv+0x264>)
   1743a:	f8c2 b014 	str.w	fp, [r2, #20]
   1743e:	6193      	str	r3, [r2, #24]
   17440:	2303      	movs	r3, #3
   17442:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   17446:	4852      	ldr	r0, [pc, #328]	; (17590 <hci_ept_recv+0x268>)
   17448:	f842 3f10 	str.w	r3, [r2, #16]!
   1744c:	f008 fed1 	bl	201f2 <z_log_msg_static_create.constprop.0>
   17450:	46ad      	mov	sp, r5
	} while (!buf);
   17452:	e7b9      	b.n	173c8 <hci_ept_recv+0xa0>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   17454:	4622      	mov	r2, r4
   17456:	1cf1      	adds	r1, r6, #3
   17458:	4640      	mov	r0, r8
   1745a:	f008 fd1d 	bl	1fe98 <net_buf_simple_add_mem>
		bt_recv(buf);
   1745e:	4628      	mov	r0, r5
   17460:	f7f8 fcf6 	bl	fe50 <bt_recv>
}
   17464:	e791      	b.n	1738a <hci_ept_recv+0x62>
	buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_NO_WAIT);
   17466:	2200      	movs	r2, #0
   17468:	2300      	movs	r3, #0
   1746a:	2003      	movs	r0, #3
   1746c:	f7f7 f9a8 	bl	e7c0 <bt_buf_get_rx>
	if (buf) {
   17470:	4605      	mov	r5, r0
   17472:	b308      	cbz	r0, 174b8 <hci_ept_recv+0x190>
   17474:	2204      	movs	r2, #4
		memcpy((void *)&hdr, data, sizeof(hdr));
   17476:	f8d6 3001 	ldr.w	r3, [r6, #1]
   1747a:	f100 0808 	add.w	r8, r0, #8
   1747e:	607b      	str	r3, [r7, #4]
   17480:	4640      	mov	r0, r8
   17482:	18b9      	adds	r1, r7, r2
   17484:	f008 fd08 	bl	1fe98 <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
   17488:	88fb      	ldrh	r3, [r7, #6]
		remaining -= sizeof(hdr);
   1748a:	3c05      	subs	r4, #5
	if (remaining != sys_le16_to_cpu(hdr.len)) {
   1748c:	429c      	cmp	r4, r3
   1748e:	d018      	beq.n	174c2 <hci_ept_recv+0x19a>
		BT_ERR("ACL payload length is not correct");
   17490:	466c      	mov	r4, sp
   17492:	b088      	sub	sp, #32
   17494:	466a      	mov	r2, sp
   17496:	4b42      	ldr	r3, [pc, #264]	; (175a0 <hci_ept_recv+0x278>)
   17498:	6153      	str	r3, [r2, #20]
   1749a:	4b3a      	ldr	r3, [pc, #232]	; (17584 <hci_ept_recv+0x25c>)
		BT_ERR("ISO payload length is not correct");
   1749c:	6193      	str	r3, [r2, #24]
   1749e:	2303      	movs	r3, #3
   174a0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   174a4:	483a      	ldr	r0, [pc, #232]	; (17590 <hci_ept_recv+0x268>)
   174a6:	f842 3f10 	str.w	r3, [r2, #16]!
   174aa:	f008 fea2 	bl	201f2 <z_log_msg_static_create.constprop.0>
   174ae:	46a5      	mov	sp, r4
		net_buf_unref(buf);
   174b0:	4628      	mov	r0, r5
   174b2:	f7fe ff43 	bl	1633c <net_buf_unref>
	if (buf) {
   174b6:	e768      	b.n	1738a <hci_ept_recv+0x62>
		BT_ERR("No available ACL buffers!");
   174b8:	466c      	mov	r4, sp
   174ba:	b088      	sub	sp, #32
   174bc:	466a      	mov	r2, sp
   174be:	4b39      	ldr	r3, [pc, #228]	; (175a4 <hci_ept_recv+0x27c>)
   174c0:	e74e      	b.n	17360 <hci_ept_recv+0x38>
	return net_buf_simple_tailroom(&buf->b);
   174c2:	4640      	mov	r0, r8
   174c4:	f008 fd26 	bl	1ff14 <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   174c8:	4284      	cmp	r4, r0
   174ca:	d906      	bls.n	174da <hci_ept_recv+0x1b2>
		BT_ERR("Not enough space in buffer %zu/%zu",
   174cc:	466e      	mov	r6, sp
   174ce:	b08a      	sub	sp, #40	; 0x28
   174d0:	466a      	mov	r2, sp
   174d2:	4b31      	ldr	r3, [pc, #196]	; (17598 <hci_ept_recv+0x270>)
   174d4:	6153      	str	r3, [r2, #20]
   174d6:	4b2b      	ldr	r3, [pc, #172]	; (17584 <hci_ept_recv+0x25c>)
   174d8:	e790      	b.n	173fc <hci_ept_recv+0xd4>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   174da:	4622      	mov	r2, r4
   174dc:	1d71      	adds	r1, r6, #5
   174de:	e7bb      	b.n	17458 <hci_ept_recv+0x130>
	if (remaining < sizeof(hdr)) {
   174e0:	2b03      	cmp	r3, #3
   174e2:	d806      	bhi.n	174f2 <hci_ept_recv+0x1ca>
		BT_ERR("Not enough data for ISO header");
   174e4:	466c      	mov	r4, sp
   174e6:	b088      	sub	sp, #32
   174e8:	466a      	mov	r2, sp
   174ea:	4b2f      	ldr	r3, [pc, #188]	; (175a8 <hci_ept_recv+0x280>)
		BT_ERR("No available ISO buffers!");
   174ec:	6153      	str	r3, [r2, #20]
   174ee:	4b2f      	ldr	r3, [pc, #188]	; (175ac <hci_ept_recv+0x284>)
   174f0:	e741      	b.n	17376 <hci_ept_recv+0x4e>
	buf = bt_buf_get_rx(BT_BUF_ISO_IN, K_NO_WAIT);
   174f2:	2200      	movs	r2, #0
   174f4:	2300      	movs	r3, #0
   174f6:	4640      	mov	r0, r8
   174f8:	f7f7 f962 	bl	e7c0 <bt_buf_get_rx>
	if (buf) {
   174fc:	4605      	mov	r5, r0
   174fe:	b1b0      	cbz	r0, 1752e <hci_ept_recv+0x206>
   17500:	2204      	movs	r2, #4
		memcpy((void *)&hdr, data, sizeof(hdr));
   17502:	f8d6 3001 	ldr.w	r3, [r6, #1]
   17506:	f100 0908 	add.w	r9, r0, #8
   1750a:	607b      	str	r3, [r7, #4]
   1750c:	4648      	mov	r0, r9
   1750e:	18b9      	adds	r1, r7, r2
   17510:	f008 fcc2 	bl	1fe98 <net_buf_simple_add_mem>
	if (remaining != bt_iso_hdr_len(sys_le16_to_cpu(hdr.len))) {
   17514:	88fb      	ldrh	r3, [r7, #6]
		remaining -= sizeof(hdr);
   17516:	3c05      	subs	r4, #5
	if (remaining != bt_iso_hdr_len(sys_le16_to_cpu(hdr.len))) {
   17518:	f3c3 030d 	ubfx	r3, r3, #0, #14
   1751c:	429c      	cmp	r4, r3
   1751e:	d00b      	beq.n	17538 <hci_ept_recv+0x210>
		BT_ERR("ISO payload length is not correct");
   17520:	466c      	mov	r4, sp
   17522:	b088      	sub	sp, #32
   17524:	466a      	mov	r2, sp
   17526:	4b22      	ldr	r3, [pc, #136]	; (175b0 <hci_ept_recv+0x288>)
   17528:	6153      	str	r3, [r2, #20]
   1752a:	4b20      	ldr	r3, [pc, #128]	; (175ac <hci_ept_recv+0x284>)
   1752c:	e7b6      	b.n	1749c <hci_ept_recv+0x174>
		BT_ERR("No available ISO buffers!");
   1752e:	466c      	mov	r4, sp
   17530:	b088      	sub	sp, #32
   17532:	466a      	mov	r2, sp
   17534:	4b1f      	ldr	r3, [pc, #124]	; (175b4 <hci_ept_recv+0x28c>)
   17536:	e7d9      	b.n	174ec <hci_ept_recv+0x1c4>
	return net_buf_simple_tailroom(&buf->b);
   17538:	4648      	mov	r0, r9
   1753a:	f008 fceb 	bl	1ff14 <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   1753e:	4284      	cmp	r4, r0
   17540:	d90b      	bls.n	1755a <hci_ept_recv+0x232>
		BT_ERR("Not enough space in buffer %zu/%zu",
   17542:	466e      	mov	r6, sp
   17544:	b08a      	sub	sp, #40	; 0x28
   17546:	466a      	mov	r2, sp
   17548:	4b13      	ldr	r3, [pc, #76]	; (17598 <hci_ept_recv+0x270>)
   1754a:	6210      	str	r0, [r2, #32]
   1754c:	6153      	str	r3, [r2, #20]
   1754e:	4b17      	ldr	r3, [pc, #92]	; (175ac <hci_ept_recv+0x284>)
   17550:	e9c2 3406 	strd	r3, r4, [r2, #24]
   17554:	f842 8f10 	str.w	r8, [r2, #16]!
   17558:	e756      	b.n	17408 <hci_ept_recv+0xe0>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1755a:	4622      	mov	r2, r4
   1755c:	4648      	mov	r0, r9
   1755e:	1d71      	adds	r1, r6, #5
   17560:	e77b      	b.n	1745a <hci_ept_recv+0x132>
		BT_ERR("Unknown HCI type %u", pkt_indicator);
   17562:	466c      	mov	r4, sp
   17564:	b088      	sub	sp, #32
   17566:	466a      	mov	r2, sp
   17568:	4b13      	ldr	r3, [pc, #76]	; (175b8 <hci_ept_recv+0x290>)
   1756a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1756e:	6153      	str	r3, [r2, #20]
   17570:	4b12      	ldr	r3, [pc, #72]	; (175bc <hci_ept_recv+0x294>)
	switch (pkt_indicator) {
   17572:	e9c2 3806 	strd	r3, r8, [r2, #24]
		BT_ERR("Unknown HCI type %u", pkt_indicator);
   17576:	2304      	movs	r3, #4
   17578:	f842 3f10 	str.w	r3, [r2, #16]!
   1757c:	e701      	b.n	17382 <hci_ept_recv+0x5a>
   1757e:	bf00      	nop
   17580:	00026796 	.word	0x00026796
   17584:	0002688e 	.word	0x0002688e
   17588:	000266e9 	.word	0x000266e9
   1758c:	000268a0 	.word	0x000268a0
   17590:	00022800 	.word	0x00022800
   17594:	00026736 	.word	0x00026736
   17598:	0002676f 	.word	0x0002676f
   1759c:	0002670e 	.word	0x0002670e
   175a0:	000267d7 	.word	0x000267d7
   175a4:	000267b9 	.word	0x000267b9
   175a8:	000267fd 	.word	0x000267fd
   175ac:	0002687c 	.word	0x0002687c
   175b0:	0002683e 	.word	0x0002683e
   175b4:	00026820 	.word	0x00026820
   175b8:	00026864 	.word	0x00026864
   175bc:	000268b2 	.word	0x000268b2

000175c0 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   175c0:	2301      	movs	r3, #1
   175c2:	4083      	lsls	r3, r0
{
   175c4:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   175c6:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   175c8:	4a0b      	ldr	r2, [pc, #44]	; (175f8 <compare_int_lock+0x38>)
   175ca:	e8d2 1fef 	ldaex	r1, [r2]
   175ce:	ea01 0504 	and.w	r5, r1, r4
   175d2:	e8c2 5fe6 	stlex	r6, r5, [r2]
   175d6:	2e00      	cmp	r6, #0
   175d8:	d1f7      	bne.n	175ca <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   175da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   175de:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   175e0:	4806      	ldr	r0, [pc, #24]	; (175fc <compare_int_lock+0x3c>)
   175e2:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
   175e6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   175ea:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   175ee:	420b      	tst	r3, r1
}
   175f0:	bf14      	ite	ne
   175f2:	2001      	movne	r0, #1
   175f4:	2000      	moveq	r0, #0
   175f6:	bd70      	pop	{r4, r5, r6, pc}
   175f8:	2000a07c 	.word	0x2000a07c
   175fc:	40015000 	.word	0x40015000

00017600 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   17600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   17602:	491b      	ldr	r1, [pc, #108]	; (17670 <sys_clock_timeout_handler+0x70>)
{
   17604:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   17606:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1760a:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   1760c:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   17610:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   17614:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   17616:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1761a:	d30f      	bcc.n	1763c <sys_clock_timeout_handler+0x3c>
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1761c:	f003 f8a8 	bl	1a770 <sys_clock_announce>
    return p_reg->CC[ch];
   17620:	00a3      	lsls	r3, r4, #2
   17622:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   17626:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   1762a:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   1762e:	4295      	cmp	r5, r2
   17630:	d11d      	bne.n	1766e <sys_clock_timeout_handler+0x6e>
    p_reg->CC[ch] = cc_val;
   17632:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   17636:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
}
   1763a:	e012      	b.n	17662 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1763c:	4b0d      	ldr	r3, [pc, #52]	; (17674 <sys_clock_timeout_handler+0x74>)
   1763e:	681b      	ldr	r3, [r3, #0]
   17640:	0a1a      	lsrs	r2, r3, #8
   17642:	061b      	lsls	r3, r3, #24
   17644:	195e      	adds	r6, r3, r5
   17646:	4b0c      	ldr	r3, [pc, #48]	; (17678 <sys_clock_timeout_handler+0x78>)
   17648:	f142 0700 	adc.w	r7, r2, #0
   1764c:	e9c3 6700 	strd	r6, r7, [r3]
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   17650:	f003 f88e 	bl	1a770 <sys_clock_announce>
    return p_reg->CC[ch];
   17654:	4a09      	ldr	r2, [pc, #36]	; (1767c <sys_clock_timeout_handler+0x7c>)
   17656:	f504 73a8 	add.w	r3, r4, #336	; 0x150
   1765a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (cc_value == get_comparator(chan)) {
   1765e:	429d      	cmp	r5, r3
   17660:	d105      	bne.n	1766e <sys_clock_timeout_handler+0x6e>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   17662:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   17666:	4a05      	ldr	r2, [pc, #20]	; (1767c <sys_clock_timeout_handler+0x7c>)
   17668:	40a3      	lsls	r3, r4
   1766a:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
		if (!anchor_updated) {
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   1766e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17670:	20009ae8 	.word	0x20009ae8
   17674:	2000a080 	.word	0x2000a080
   17678:	20009af0 	.word	0x20009af0
   1767c:	40015000 	.word	0x40015000

00017680 <compare_int_unlock>:
	if (key) {
   17680:	b1d9      	cbz	r1, 176ba <compare_int_unlock+0x3a>
		atomic_or(&int_mask, BIT(chan));
   17682:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17684:	4a0d      	ldr	r2, [pc, #52]	; (176bc <compare_int_unlock+0x3c>)
   17686:	4083      	lsls	r3, r0
   17688:	e8d2 cfef 	ldaex	ip, [r2]
   1768c:	ea4c 0c03 	orr.w	ip, ip, r3
   17690:	e8c2 cfe1 	stlex	r1, ip, [r2]
   17694:	2900      	cmp	r1, #0
   17696:	d1f7      	bne.n	17688 <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   17698:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
   1769c:	4a08      	ldr	r2, [pc, #32]	; (176c0 <compare_int_unlock+0x40>)
   1769e:	4083      	lsls	r3, r0
   176a0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   176a4:	4b07      	ldr	r3, [pc, #28]	; (176c4 <compare_int_unlock+0x44>)
   176a6:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   176aa:	40c3      	lsrs	r3, r0
   176ac:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   176ae:	bf42      	ittt	mi
   176b0:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
   176b4:	4b04      	ldrmi	r3, [pc, #16]	; (176c8 <compare_int_unlock+0x48>)
   176b6:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   176ba:	4770      	bx	lr
   176bc:	2000a07c 	.word	0x2000a07c
   176c0:	40015000 	.word	0x40015000
   176c4:	2000a074 	.word	0x2000a074
   176c8:	e000e100 	.word	0xe000e100

000176cc <z_nrf_rtc_timer_compare_evt_address_get>:
    p_reg->EVTENCLR = mask;
}

NRF_STATIC_INLINE nrf_rtc_event_t nrf_rtc_compare_event_get(uint8_t index)
{
    return (nrf_rtc_event_t)NRFX_OFFSETOF(NRF_RTC_Type, EVENTS_COMPARE[index]);
   176cc:	b2c3      	uxtb	r3, r0
}
   176ce:	4802      	ldr	r0, [pc, #8]	; (176d8 <z_nrf_rtc_timer_compare_evt_address_get+0xc>)
   176d0:	009b      	lsls	r3, r3, #2
   176d2:	4418      	add	r0, r3
   176d4:	4770      	bx	lr
   176d6:	bf00      	nop
   176d8:	40015140 	.word	0x40015140

000176dc <z_nrf_rtc_timer_compare_read>:
    return p_reg->CC[ch];
   176dc:	4b02      	ldr	r3, [pc, #8]	; (176e8 <z_nrf_rtc_timer_compare_read+0xc>)
   176de:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   176e2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
   176e6:	4770      	bx	lr
   176e8:	40015000 	.word	0x40015000

000176ec <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   176ec:	4b0d      	ldr	r3, [pc, #52]	; (17724 <z_nrf_rtc_timer_read+0x38>)
   176ee:	6818      	ldr	r0, [r3, #0]
   176f0:	0a01      	lsrs	r1, r0, #8
   176f2:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   176f4:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   176f8:	4b0b      	ldr	r3, [pc, #44]	; (17728 <z_nrf_rtc_timer_read+0x3c>)
   176fa:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   176fe:	1818      	adds	r0, r3, r0
   17700:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   17704:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   17708:	d20a      	bcs.n	17720 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   1770a:	4b08      	ldr	r3, [pc, #32]	; (1772c <z_nrf_rtc_timer_read+0x40>)
   1770c:	e9d3 2300 	ldrd	r2, r3, [r3]
   17710:	4290      	cmp	r0, r2
   17712:	eb71 0303 	sbcs.w	r3, r1, r3
   17716:	d203      	bcs.n	17720 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   17718:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1771c:	f141 0100 	adc.w	r1, r1, #0
}
   17720:	4770      	bx	lr
   17722:	bf00      	nop
   17724:	2000a080 	.word	0x2000a080
   17728:	40015000 	.word	0x40015000
   1772c:	20009af0 	.word	0x20009af0

00017730 <compare_set>:
{
   17730:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17734:	4614      	mov	r4, r2
   17736:	461d      	mov	r5, r3
   17738:	4607      	mov	r7, r0
	key = compare_int_lock(chan);
   1773a:	f7ff ff41 	bl	175c0 <compare_int_lock>
   1773e:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   17740:	f7ff ffd4 	bl	176ec <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   17744:	42a0      	cmp	r0, r4
   17746:	eb71 0305 	sbcs.w	r3, r1, r5
   1774a:	d271      	bcs.n	17830 <compare_set+0x100>
		if (target_time - curr_time > COUNTER_SPAN) {
   1774c:	4b3f      	ldr	r3, [pc, #252]	; (1784c <compare_set+0x11c>)
   1774e:	1a20      	subs	r0, r4, r0
   17750:	eb65 0101 	sbc.w	r1, r5, r1
   17754:	4298      	cmp	r0, r3
   17756:	f171 0100 	sbcs.w	r1, r1, #0
   1775a:	d274      	bcs.n	17846 <compare_set+0x116>
		if (target_time != cc_data[chan].target_time) {
   1775c:	4b3c      	ldr	r3, [pc, #240]	; (17850 <compare_set+0x120>)
   1775e:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   17762:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   17766:	429d      	cmp	r5, r3
   17768:	bf08      	it	eq
   1776a:	4294      	cmpeq	r4, r2
   1776c:	d04b      	beq.n	17806 <compare_set+0xd6>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1776e:	f44f 3980 	mov.w	r9, #65536	; 0x10000
	return absolute_time & COUNTER_MAX;
   17772:	f024 4a7f 	bic.w	sl, r4, #4278190080	; 0xff000000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   17776:	4656      	mov	r6, sl
   17778:	00bb      	lsls	r3, r7, #2
   1777a:	f103 4880 	add.w	r8, r3, #1073741824	; 0x40000000
   1777e:	f508 38a8 	add.w	r8, r8, #86016	; 0x15000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   17782:	fa09 f307 	lsl.w	r3, r9, r7
    return p_reg->CC[ch];
   17786:	f8d8 0540 	ldr.w	r0, [r8, #1344]	; 0x540
     return p_reg->COUNTER;
   1778a:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 17854 <compare_set+0x124>
   1778e:	9301      	str	r3, [sp, #4]
   17790:	f8d9 b504 	ldr.w	fp, [r9, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   17794:	eba0 000b 	sub.w	r0, r0, fp
   17798:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1779c:	f02b 437f 	bic.w	r3, fp, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   177a0:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   177a2:	f8c8 3540 	str.w	r3, [r8, #1344]	; 0x540
   177a6:	d102      	bne.n	177ae <compare_set+0x7e>
	z_impl_k_busy_wait(usec_to_wait);
   177a8:	2013      	movs	r0, #19
   177aa:	f009 ffa0 	bl	216ee <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   177ae:	f10b 0c02 	add.w	ip, fp, #2
	return (a - b) & COUNTER_MAX;
   177b2:	eba6 000c 	sub.w	r0, r6, ip
   177b6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   177ba:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   177be:	bf88      	it	hi
   177c0:	4666      	movhi	r6, ip
		event_clear(chan);
   177c2:	4638      	mov	r0, r7
   177c4:	f008 fd3b 	bl	2023e <event_clear>
    p_reg->EVTENSET = mask;
   177c8:	9b01      	ldr	r3, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   177ca:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
   177ce:	f8c9 3344 	str.w	r3, [r9, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
   177d2:	f8c8 0540 	str.w	r0, [r8, #1344]	; 0x540
     return p_reg->COUNTER;
   177d6:	f8d9 0504 	ldr.w	r0, [r9, #1284]	; 0x504
	} while ((now2 != now) &&
   177da:	4583      	cmp	fp, r0
   177dc:	d00a      	beq.n	177f4 <compare_set+0xc4>
	return (a - b) & COUNTER_MAX;
   177de:	f1c0 20ff 	rsb	r0, r0, #4278255360	; 0xff00ff00
   177e2:	f500 007f 	add.w	r0, r0, #16711680	; 0xff0000
   177e6:	30fe      	adds	r0, #254	; 0xfe
   177e8:	4430      	add	r0, r6
   177ea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   177ee:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   177f2:	d81b      	bhi.n	1782c <compare_set+0xfc>
	return (a - b) & COUNTER_MAX;
   177f4:	eba6 060a 	sub.w	r6, r6, sl
   177f8:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   177fc:	1936      	adds	r6, r6, r4
   177fe:	f145 0300 	adc.w	r3, r5, #0
   17802:	4634      	mov	r4, r6
   17804:	461d      	mov	r5, r3
	cc_data[chan].target_time = target_time;
   17806:	4912      	ldr	r1, [pc, #72]	; (17850 <compare_set+0x120>)
	cc_data[chan].callback = handler;
   17808:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
   1780a:	eb01 1207 	add.w	r2, r1, r7, lsl #4
   1780e:	e9c2 4502 	strd	r4, r5, [r2, #8]
	return ret;
   17812:	2400      	movs	r4, #0
	cc_data[chan].target_time = target_time;
   17814:	013b      	lsls	r3, r7, #4
	cc_data[chan].callback = handler;
   17816:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   17818:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1781a:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
   1781c:	4638      	mov	r0, r7
   1781e:	9900      	ldr	r1, [sp, #0]
   17820:	f7ff ff2e 	bl	17680 <compare_int_unlock>
}
   17824:	4620      	mov	r0, r4
   17826:	b003      	add	sp, #12
   17828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1782c:	4630      	mov	r0, r6
   1782e:	e7af      	b.n	17790 <compare_set+0x60>
		atomic_or(&force_isr_mask, BIT(chan));
   17830:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17832:	4a09      	ldr	r2, [pc, #36]	; (17858 <compare_set+0x128>)
   17834:	40bb      	lsls	r3, r7
   17836:	e8d2 0fef 	ldaex	r0, [r2]
   1783a:	4318      	orrs	r0, r3
   1783c:	e8c2 0fe1 	stlex	r1, r0, [r2]
   17840:	2900      	cmp	r1, #0
   17842:	d0e0      	beq.n	17806 <compare_set+0xd6>
   17844:	e7f7      	b.n	17836 <compare_set+0x106>
			return -EINVAL;
   17846:	f06f 0415 	mvn.w	r4, #21
   1784a:	e7e7      	b.n	1781c <compare_set+0xec>
   1784c:	01000001 	.word	0x01000001
   17850:	20009ac8 	.word	0x20009ac8
   17854:	40015000 	.word	0x40015000
   17858:	2000a074 	.word	0x2000a074

0001785c <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   1785c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->INTENSET = mask;
   1785e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    p_reg->PRESCALER = val;
   17862:	2500      	movs	r5, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   17864:	f04f 30ff 	mov.w	r0, #4294967295
   17868:	f04f 31ff 	mov.w	r1, #4294967295
   1786c:	4c19      	ldr	r4, [pc, #100]	; (178d4 <sys_clock_driver_init+0x78>)
   1786e:	4b1a      	ldr	r3, [pc, #104]	; (178d8 <sys_clock_driver_init+0x7c>)
   17870:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
   17874:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   17878:	f8c4 2304 	str.w	r2, [r4, #772]	; 0x304
   1787c:	e9c3 0106 	strd	r0, r1, [r3, #24]
   17880:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   17884:	2602      	movs	r6, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   17886:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1788a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   1788e:	4b13      	ldr	r3, [pc, #76]	; (178dc <sys_clock_driver_init+0x80>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   17890:	2101      	movs	r1, #1
   17892:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
   17896:	2015      	movs	r0, #21
   17898:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1789c:	462a      	mov	r2, r5
   1789e:	f7f5 ffa5 	bl	d7ec <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   178a2:	2015      	movs	r0, #21
   178a4:	f7f5 ff72 	bl	d78c <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   178a8:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   178aa:	2203      	movs	r2, #3
   178ac:	60a3      	str	r3, [r4, #8]
   178ae:	6023      	str	r3, [r4, #0]
   178b0:	4b0b      	ldr	r3, [pc, #44]	; (178e0 <sys_clock_driver_init+0x84>)

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   178b2:	4628      	mov	r0, r5
	int_mask = BIT_MASK(CHAN_COUNT);
   178b4:	601a      	str	r2, [r3, #0]
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
   178b6:	4b0b      	ldr	r3, [pc, #44]	; (178e4 <sys_clock_driver_init+0x88>)
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   178b8:	4a0b      	ldr	r2, [pc, #44]	; (178e8 <sys_clock_driver_init+0x8c>)
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
   178ba:	601e      	str	r6, [r3, #0]
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   178bc:	4b0b      	ldr	r3, [pc, #44]	; (178ec <sys_clock_driver_init+0x90>)
   178be:	9501      	str	r5, [sp, #4]
   178c0:	9300      	str	r3, [sp, #0]
   178c2:	2300      	movs	r3, #0
   178c4:	f7ff ff34 	bl	17730 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   178c8:	4630      	mov	r0, r6
   178ca:	f7ff f8db 	bl	16a84 <z_nrf_clock_control_lf_on>

	return 0;
}
   178ce:	4628      	mov	r0, r5
   178d0:	b002      	add	sp, #8
   178d2:	bd70      	pop	{r4, r5, r6, pc}
   178d4:	40015000 	.word	0x40015000
   178d8:	20009ac8 	.word	0x20009ac8
   178dc:	e000e100 	.word	0xe000e100
   178e0:	2000a07c 	.word	0x2000a07c
   178e4:	2000a078 	.word	0x2000a078
   178e8:	007fffff 	.word	0x007fffff
   178ec:	00017601 	.word	0x00017601

000178f0 <rtc_nrf_isr>:
{
   178f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return p_reg->INTENSET & mask;
   178f4:	4b3c      	ldr	r3, [pc, #240]	; (179e8 <rtc_nrf_isr+0xf8>)
   178f6:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   178fa:	0792      	lsls	r2, r2, #30
   178fc:	d50b      	bpl.n	17916 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   178fe:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   17902:	b142      	cbz	r2, 17916 <rtc_nrf_isr+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   17904:	2200      	movs	r2, #0
   17906:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
   1790a:	4a38      	ldr	r2, [pc, #224]	; (179ec <rtc_nrf_isr+0xfc>)
   1790c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   17910:	6813      	ldr	r3, [r2, #0]
   17912:	3301      	adds	r3, #1
   17914:	6013      	str	r3, [r2, #0]
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   17916:	4d36      	ldr	r5, [pc, #216]	; (179f0 <rtc_nrf_isr+0x100>)
   17918:	2400      	movs	r4, #0
   1791a:	462f      	mov	r7, r5
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1791c:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
    return p_reg->INTENSET & mask;
   17920:	4e31      	ldr	r6, [pc, #196]	; (179e8 <rtc_nrf_isr+0xf8>)
	__asm__ volatile(
   17922:	f04f 0320 	mov.w	r3, #32
   17926:	f3ef 8111 	mrs	r1, BASEPRI
   1792a:	f383 8812 	msr	BASEPRI_MAX, r3
   1792e:	f3bf 8f6f 	isb	sy
   17932:	f8d6 3304 	ldr.w	r3, [r6, #772]	; 0x304
   17936:	fa0a f904 	lsl.w	r9, sl, r4
   1793a:	ea19 0f03 	tst.w	r9, r3
   1793e:	d10a      	bne.n	17956 <rtc_nrf_isr+0x66>
	__asm__ volatile(
   17940:	f381 8811 	msr	BASEPRI, r1
   17944:	f3bf 8f6f 	isb	sy
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   17948:	3510      	adds	r5, #16
   1794a:	b114      	cbz	r4, 17952 <rtc_nrf_isr+0x62>
}
   1794c:	b003      	add	sp, #12
   1794e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   17952:	2401      	movs	r4, #1
   17954:	e7e5      	b.n	17922 <rtc_nrf_isr+0x32>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   17956:	2301      	movs	r3, #1
   17958:	40a3      	lsls	r3, r4
   1795a:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1795c:	4a25      	ldr	r2, [pc, #148]	; (179f4 <rtc_nrf_isr+0x104>)
   1795e:	e8d2 0fef 	ldaex	r0, [r2]
   17962:	ea00 0c03 	and.w	ip, r0, r3
   17966:	e8c2 cfee 	stlex	lr, ip, [r2]
   1796a:	f1be 0f00 	cmp.w	lr, #0
   1796e:	d1f6      	bne.n	1795e <rtc_nrf_isr+0x6e>
   17970:	b920      	cbnz	r0, 1797c <rtc_nrf_isr+0x8c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   17972:	4b21      	ldr	r3, [pc, #132]	; (179f8 <rtc_nrf_isr+0x108>)
   17974:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   17978:	2b00      	cmp	r3, #0
   1797a:	d0e1      	beq.n	17940 <rtc_nrf_isr+0x50>
			event_clear(chan);
   1797c:	4620      	mov	r0, r4
   1797e:	f008 fc5e 	bl	2023e <event_clear>
   17982:	f381 8811 	msr	BASEPRI, r1
   17986:	f3bf 8f6f 	isb	sy
		curr_time = z_nrf_rtc_timer_read();
   1798a:	f7ff feaf 	bl	176ec <z_nrf_rtc_timer_read>
	__asm__ volatile(
   1798e:	f04f 0320 	mov.w	r3, #32
   17992:	f3ef 8c11 	mrs	ip, BASEPRI
   17996:	f383 8812 	msr	BASEPRI_MAX, r3
   1799a:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   1799e:	eb07 1e04 	add.w	lr, r7, r4, lsl #4
   179a2:	e9de 2302 	ldrd	r2, r3, [lr, #8]
		if (curr_time >= expire_time) {
   179a6:	4290      	cmp	r0, r2
   179a8:	4199      	sbcs	r1, r3
   179aa:	d204      	bcs.n	179b6 <rtc_nrf_isr+0xc6>
	__asm__ volatile(
   179ac:	f38c 8811 	msr	BASEPRI, ip
   179b0:	f3bf 8f6f 	isb	sy
		if (handler) {
   179b4:	e7c8      	b.n	17948 <rtc_nrf_isr+0x58>
			cc_data[chan].callback = NULL;
   179b6:	2100      	movs	r1, #0
			user_context = cc_data[chan].user_context;
   179b8:	e9d5 8b00 	ldrd	r8, fp, [r5]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   179bc:	f04f 30ff 	mov.w	r0, #4294967295
			cc_data[chan].callback = NULL;
   179c0:	6029      	str	r1, [r5, #0]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   179c2:	f04f 31ff 	mov.w	r1, #4294967295
   179c6:	e9ce 0102 	strd	r0, r1, [lr, #8]
    p_reg->EVTENCLR = mask;
   179ca:	4907      	ldr	r1, [pc, #28]	; (179e8 <rtc_nrf_isr+0xf8>)
   179cc:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
   179d0:	f38c 8811 	msr	BASEPRI, ip
   179d4:	f3bf 8f6f 	isb	sy
		if (handler) {
   179d8:	f1b8 0f00 	cmp.w	r8, #0
   179dc:	d0b4      	beq.n	17948 <rtc_nrf_isr+0x58>
			handler(chan, expire_time, user_context);
   179de:	4620      	mov	r0, r4
   179e0:	f8cd b000 	str.w	fp, [sp]
   179e4:	47c0      	blx	r8
   179e6:	e7af      	b.n	17948 <rtc_nrf_isr+0x58>
   179e8:	40015000 	.word	0x40015000
   179ec:	2000a080 	.word	0x2000a080
   179f0:	20009ac8 	.word	0x20009ac8
   179f4:	2000a074 	.word	0x2000a074
   179f8:	40015140 	.word	0x40015140

000179fc <z_nrf_rtc_timer_chan_alloc>:
{
   179fc:	b570      	push	{r4, r5, r6, lr}
		prev = atomic_and(&alloc_mask, ~BIT(chan));
   179fe:	2401      	movs	r4, #1
		chan = alloc_mask ? 31 - __builtin_clz(alloc_mask) : -1;
   17a00:	4b0c      	ldr	r3, [pc, #48]	; (17a34 <z_nrf_rtc_timer_chan_alloc+0x38>)
   17a02:	6818      	ldr	r0, [r3, #0]
   17a04:	b190      	cbz	r0, 17a2c <z_nrf_rtc_timer_chan_alloc+0x30>
   17a06:	fab0 f080 	clz	r0, r0
   17a0a:	f1c0 001f 	rsb	r0, r0, #31
		prev = atomic_and(&alloc_mask, ~BIT(chan));
   17a0e:	fa04 f100 	lsl.w	r1, r4, r0
   17a12:	43c9      	mvns	r1, r1
   17a14:	e8d3 2fef 	ldaex	r2, [r3]
   17a18:	ea02 0501 	and.w	r5, r2, r1
   17a1c:	e8c3 5fe6 	stlex	r6, r5, [r3]
   17a20:	2e00      	cmp	r6, #0
   17a22:	d1f7      	bne.n	17a14 <z_nrf_rtc_timer_chan_alloc+0x18>
	} while (!(prev & BIT(chan)));
   17a24:	40c2      	lsrs	r2, r0
   17a26:	07d2      	lsls	r2, r2, #31
   17a28:	d5eb      	bpl.n	17a02 <z_nrf_rtc_timer_chan_alloc+0x6>
}
   17a2a:	bd70      	pop	{r4, r5, r6, pc}
			return -ENOMEM;
   17a2c:	f06f 000b 	mvn.w	r0, #11
   17a30:	e7fb      	b.n	17a2a <z_nrf_rtc_timer_chan_alloc+0x2e>
   17a32:	bf00      	nop
   17a34:	2000a078 	.word	0x2000a078

00017a38 <z_nrf_rtc_timer_chan_free>:
	atomic_or(&alloc_mask, BIT(chan));
   17a38:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17a3a:	4a05      	ldr	r2, [pc, #20]	; (17a50 <z_nrf_rtc_timer_chan_free+0x18>)
   17a3c:	4083      	lsls	r3, r0
   17a3e:	e8d2 0fef 	ldaex	r0, [r2]
   17a42:	4318      	orrs	r0, r3
   17a44:	e8c2 0fe1 	stlex	r1, r0, [r2]
   17a48:	2900      	cmp	r1, #0
   17a4a:	d1f8      	bne.n	17a3e <z_nrf_rtc_timer_chan_free+0x6>
}
   17a4c:	4770      	bx	lr
   17a4e:	bf00      	nop
   17a50:	2000a078 	.word	0x2000a078

00017a54 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   17a54:	1c43      	adds	r3, r0, #1
{
   17a56:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   17a58:	d020      	beq.n	17a9c <sys_clock_set_timeout+0x48>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   17a5a:	2801      	cmp	r0, #1
   17a5c:	dd20      	ble.n	17aa0 <sys_clock_set_timeout+0x4c>
   17a5e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   17a62:	da1f      	bge.n	17aa4 <sys_clock_set_timeout+0x50>
   17a64:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   17a66:	f7ff fe41 	bl	176ec <z_nrf_rtc_timer_read>
   17a6a:	4b0f      	ldr	r3, [pc, #60]	; (17aa8 <sys_clock_set_timeout+0x54>)
   17a6c:	e9d3 1300 	ldrd	r1, r3, [r3]
   17a70:	1a42      	subs	r2, r0, r1
		ticks = 0;
   17a72:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
   17a76:	bf28      	it	cs
   17a78:	2400      	movcs	r4, #0
	if (cyc > MAX_CYCLES) {
   17a7a:	480c      	ldr	r0, [pc, #48]	; (17aac <sys_clock_set_timeout+0x58>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   17a7c:	3201      	adds	r2, #1
   17a7e:	4422      	add	r2, r4
	if (cyc > MAX_CYCLES) {
   17a80:	4282      	cmp	r2, r0
   17a82:	bf28      	it	cs
   17a84:	4602      	movcs	r2, r0
	uint64_t target_time = cyc + last_count;
   17a86:	2000      	movs	r0, #0
   17a88:	1852      	adds	r2, r2, r1
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   17a8a:	4909      	ldr	r1, [pc, #36]	; (17ab0 <sys_clock_set_timeout+0x5c>)
   17a8c:	9001      	str	r0, [sp, #4]
   17a8e:	9100      	str	r1, [sp, #0]
   17a90:	f143 0300 	adc.w	r3, r3, #0
   17a94:	f7ff fe4c 	bl	17730 <compare_set>
}
   17a98:	b002      	add	sp, #8
   17a9a:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   17a9c:	4803      	ldr	r0, [pc, #12]	; (17aac <sys_clock_set_timeout+0x58>)
   17a9e:	e7e1      	b.n	17a64 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   17aa0:	2400      	movs	r4, #0
   17aa2:	e7e0      	b.n	17a66 <sys_clock_set_timeout+0x12>
   17aa4:	4c01      	ldr	r4, [pc, #4]	; (17aac <sys_clock_set_timeout+0x58>)
   17aa6:	e7de      	b.n	17a66 <sys_clock_set_timeout+0x12>
   17aa8:	20009ae8 	.word	0x20009ae8
   17aac:	007fffff 	.word	0x007fffff
   17ab0:	00017601 	.word	0x00017601

00017ab4 <sys_clock_elapsed>:
{
   17ab4:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   17ab6:	f7ff fe19 	bl	176ec <z_nrf_rtc_timer_read>
   17aba:	4b02      	ldr	r3, [pc, #8]	; (17ac4 <sys_clock_elapsed+0x10>)
   17abc:	681b      	ldr	r3, [r3, #0]
}
   17abe:	1ac0      	subs	r0, r0, r3
   17ac0:	bd08      	pop	{r3, pc}
   17ac2:	bf00      	nop
   17ac4:	20009ae8 	.word	0x20009ae8

00017ac8 <pinctrl_configure_pins>:
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   17ac8:	f04f 0c01 	mov.w	ip, #1
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   17acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        case 1: return NRF_P1;
   17ad0:	4e5b      	ldr	r6, [pc, #364]	; (17c40 <pinctrl_configure_pins+0x178>)
   17ad2:	4f5c      	ldr	r7, [pc, #368]	; (17c44 <pinctrl_configure_pins+0x17c>)
   17ad4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   17ad8:	4281      	cmp	r1, r0
   17ada:	d102      	bne.n	17ae2 <pinctrl_configure_pins+0x1a>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   17adc:	2000      	movs	r0, #0
}
   17ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   17ae2:	6804      	ldr	r4, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   17ae4:	f004 037f 	and.w	r3, r4, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   17ae8:	f3c4 2543 	ubfx	r5, r4, #9, #4
			pin = 0xFFFFFFFFU;
   17aec:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   17aee:	ea4f 4414 	mov.w	r4, r4, lsr #16
			pin = 0xFFFFFFFFU;
   17af2:	bf08      	it	eq
   17af4:	f04f 33ff 	moveq.w	r3, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
   17af8:	2c22      	cmp	r4, #34	; 0x22
   17afa:	f200 809d 	bhi.w	17c38 <pinctrl_configure_pins+0x170>
   17afe:	e8df f004 	tbb	[pc, r4]
   17b02:	2312      	.short	0x2312
   17b04:	3e2b4228 	.word	0x3e2b4228
   17b08:	9b9b9b42 	.word	0x9b9b9b42
   17b0c:	9b72459b 	.word	0x9b72459b
   17b10:	9b9b9b9b 	.word	0x9b9b9b9b
   17b14:	9b9b9b9b 	.word	0x9b9b9b9b
   17b18:	83807d75 	.word	0x83807d75
   17b1c:	869b9b9b 	.word	0x869b9b9b
   17b20:	95928f8c 	.word	0x95928f8c
   17b24:	98          	.byte	0x98
   17b25:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
   17b26:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    return pin_number >> 5;
   17b2a:	ea4f 1853 	mov.w	r8, r3, lsr #5
        case 1: return NRF_P1;
   17b2e:	f1b8 0f01 	cmp.w	r8, #1
   17b32:	bf14      	ite	ne
   17b34:	46b6      	movne	lr, r6
   17b36:	46be      	moveq	lr, r7
    *p_pin = pin_number & 0x1F;
   17b38:	f003 041f 	and.w	r4, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   17b3c:	fa0c f404 	lsl.w	r4, ip, r4
    p_reg->OUTSET = set_mask;
   17b40:	f8ce 4008 	str.w	r4, [lr, #8]
   17b44:	2401      	movs	r4, #1
   17b46:	e002      	b.n	17b4e <pinctrl_configure_pins+0x86>
			NRF_PSEL_UART(reg, RXD) = pin;
   17b48:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   17b4c:	2400      	movs	r4, #0
   17b4e:	46a6      	mov	lr, r4
   17b50:	e023      	b.n	17b9a <pinctrl_configure_pins+0xd2>
			NRF_PSEL_UART(reg, RTS) = pin;
   17b52:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
   17b56:	e7e8      	b.n	17b2a <pinctrl_configure_pins+0x62>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   17b58:	2400      	movs	r4, #0
			NRF_PSEL_SPIM(reg, SCK) = pin;
   17b5a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    return pin_number >> 5;
   17b5e:	ea4f 1953 	mov.w	r9, r3, lsr #5
        case 1: return NRF_P1;
   17b62:	f1b9 0f01 	cmp.w	r9, #1
   17b66:	bf14      	ite	ne
   17b68:	46b0      	movne	r8, r6
   17b6a:	46b8      	moveq	r8, r7
    *p_pin = pin_number & 0x1F;
   17b6c:	f003 0e1f 	and.w	lr, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   17b70:	fa0c fe0e 	lsl.w	lr, ip, lr
    p_reg->OUTCLR = clr_mask;
   17b74:	f8c8 e00c 	str.w	lr, [r8, #12]
   17b78:	f04f 0e01 	mov.w	lr, #1
   17b7c:	e00d      	b.n	17b9a <pinctrl_configure_pins+0xd2>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   17b7e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
   17b82:	2401      	movs	r4, #1
   17b84:	e7eb      	b.n	17b5e <pinctrl_configure_pins+0x96>
			NRF_PSEL_SPIM(reg, MISO) = pin;
   17b86:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
   17b8a:	e7df      	b.n	17b4c <pinctrl_configure_pins+0x84>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   17b8c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   17b90:	2d00      	cmp	r5, #0
   17b92:	d1db      	bne.n	17b4c <pinctrl_configure_pins+0x84>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   17b94:	2400      	movs	r4, #0
				drive = NRF_DRIVE_S0D1;
   17b96:	2506      	movs	r5, #6
			dir = NRF_GPIO_PIN_DIR_INPUT;
   17b98:	46a6      	mov	lr, r4
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   17b9a:	f850 ab04 	ldr.w	sl, [r0], #4
    *p_pin = pin_number & 0x1F;
   17b9e:	f003 091f 	and.w	r9, r3, #31
   17ba2:	f40a 5800 	and.w	r8, sl, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   17ba6:	f1b8 0f00 	cmp.w	r8, #0
    return pin_number >> 5;
   17baa:	ea4f 1353 	mov.w	r3, r3, lsr #5
   17bae:	bf1c      	itt	ne
   17bb0:	2401      	movne	r4, #1
   17bb2:	f04f 0e00 	movne.w	lr, #0
        case 0: return NRF_P0;
   17bb6:	2b01      	cmp	r3, #1
   17bb8:	bf0c      	ite	eq
   17bba:	46b8      	moveq	r8, r7
   17bbc:	46b0      	movne	r8, r6
   17bbe:	eb08 0889 	add.w	r8, r8, r9, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   17bc2:	f8d8 3200 	ldr.w	r3, [r8, #512]	; 0x200
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
   17bc6:	f3ca 1ac1 	ubfx	sl, sl, #7, #2
   17bca:	f003 49e0 	and.w	r9, r3, #1879048192	; 0x70000000
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   17bce:	022b      	lsls	r3, r5, #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   17bd0:	ea43 038a 	orr.w	r3, r3, sl, lsl #2
   17bd4:	ea43 030e 	orr.w	r3, r3, lr
   17bd8:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   17bdc:	ea43 0309 	orr.w	r3, r3, r9
    reg->PIN_CNF[pin_number] = cnf;
   17be0:	f8c8 3200 	str.w	r3, [r8, #512]	; 0x200
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   17be4:	e778      	b.n	17ad8 <pinctrl_configure_pins+0x10>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   17be6:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   17bea:	e7d1      	b.n	17b90 <pinctrl_configure_pins+0xc8>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   17bec:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   17bf0:	6804      	ldr	r4, [r0, #0]
   17bf2:	f3c4 3480 	ubfx	r4, r4, #14, #1
    if (value == 0)
   17bf6:	2c00      	cmp	r4, #0
   17bf8:	d0c3      	beq.n	17b82 <pinctrl_configure_pins+0xba>
   17bfa:	e796      	b.n	17b2a <pinctrl_configure_pins+0x62>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   17bfc:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   17c00:	e7f6      	b.n	17bf0 <pinctrl_configure_pins+0x128>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   17c02:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   17c06:	e7f3      	b.n	17bf0 <pinctrl_configure_pins+0x128>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   17c08:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
   17c0c:	e7f0      	b.n	17bf0 <pinctrl_configure_pins+0x128>
			NRF_PSEL_QSPI(reg, SCK) = pin;
   17c0e:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   17c12:	2401      	movs	r4, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   17c14:	f04f 0e00 	mov.w	lr, #0
   17c18:	e7bf      	b.n	17b9a <pinctrl_configure_pins+0xd2>
			NRF_PSEL_QSPI(reg, CSN) = pin;
   17c1a:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
   17c1e:	e784      	b.n	17b2a <pinctrl_configure_pins+0x62>
			NRF_PSEL_QSPI(reg, IO0) = pin;
   17c20:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
			if (write != NO_WRITE) {
   17c24:	e7f5      	b.n	17c12 <pinctrl_configure_pins+0x14a>
			NRF_PSEL_QSPI(reg, IO1) = pin;
   17c26:	f8c2 3534 	str.w	r3, [r2, #1332]	; 0x534
   17c2a:	e7f2      	b.n	17c12 <pinctrl_configure_pins+0x14a>
			NRF_PSEL_QSPI(reg, IO2) = pin;
   17c2c:	f8c2 3538 	str.w	r3, [r2, #1336]	; 0x538
			if (write != NO_WRITE) {
   17c30:	e7ef      	b.n	17c12 <pinctrl_configure_pins+0x14a>
			NRF_PSEL_QSPI(reg, IO3) = pin;
   17c32:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
			if (write != NO_WRITE) {
   17c36:	e7ec      	b.n	17c12 <pinctrl_configure_pins+0x14a>
		switch (NRF_GET_FUN(pins[i])) {
   17c38:	f06f 0085 	mvn.w	r0, #133	; 0x85
   17c3c:	e74f      	b.n	17ade <pinctrl_configure_pins+0x16>
   17c3e:	bf00      	nop
   17c40:	40842500 	.word	0x40842500
   17c44:	40842800 	.word	0x40842800

00017c48 <mbox_nrf_init>:

	nrfx_ipc_config_load(&ch_config);
}

static int mbox_nrf_init(const struct device *dev)
{
   17c48:	b5b0      	push	{r4, r5, r7, lr}
   17c4a:	b0a2      	sub	sp, #136	; 0x88
   17c4c:	4604      	mov	r4, r0
	struct mbox_nrf_data *data = dev->data;
   17c4e:	6902      	ldr	r2, [r0, #16]
{
   17c50:	af00      	add	r7, sp, #0

	data->dev = dev;
   17c52:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80

	nrfx_ipc_init(0, mbox_dispatcher, (void *) data);
   17c56:	492d      	ldr	r1, [pc, #180]	; (17d0c <mbox_nrf_init+0xc4>)
   17c58:	2000      	movs	r0, #0
   17c5a:	f000 ff39 	bl	18ad0 <nrfx_ipc_init>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   17c5e:	2200      	movs	r2, #0
   17c60:	2101      	movs	r1, #1
   17c62:	202a      	movs	r0, #42	; 0x2a
   17c64:	f7f5 fdc2 	bl	d7ec <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	enable_dt_channels(dev);
   17c68:	6864      	ldr	r4, [r4, #4]
	nrfx_ipc_config_t ch_config = { 0 };
   17c6a:	2284      	movs	r2, #132	; 0x84
   17c6c:	2100      	movs	r1, #0
   17c6e:	1d38      	adds	r0, r7, #4
   17c70:	f009 ff1a 	bl	21aa8 <memset>
	if (conf->tx_mask >= BIT(IPC_CONF_NUM)) {
   17c74:	6863      	ldr	r3, [r4, #4]
   17c76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   17c7a:	d310      	bcc.n	17c9e <mbox_nrf_init+0x56>
		LOG_WRN("tx_mask too big (or IPC_CONF_NUM too small)");
   17c7c:	466d      	mov	r5, sp
   17c7e:	b088      	sub	sp, #32
   17c80:	466a      	mov	r2, sp
   17c82:	4b23      	ldr	r3, [pc, #140]	; (17d10 <mbox_nrf_init+0xc8>)
   17c84:	6153      	str	r3, [r2, #20]
   17c86:	4b23      	ldr	r3, [pc, #140]	; (17d14 <mbox_nrf_init+0xcc>)
   17c88:	6193      	str	r3, [r2, #24]
   17c8a:	2303      	movs	r3, #3
   17c8c:	f842 3f10 	str.w	r3, [r2, #16]!
   17c90:	2300      	movs	r3, #0
   17c92:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   17c96:	4820      	ldr	r0, [pc, #128]	; (17d18 <mbox_nrf_init+0xd0>)
   17c98:	f7f4 fb0c 	bl	c2b4 <z_impl_z_log_msg_static_create>
   17c9c:	46ad      	mov	sp, r5
	if (conf->rx_mask >= BIT(IPC_CONF_NUM)) {
   17c9e:	6823      	ldr	r3, [r4, #0]
   17ca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   17ca4:	d310      	bcc.n	17cc8 <mbox_nrf_init+0x80>
		LOG_WRN("rx_mask too big (or IPC_CONF_NUM too small)");
   17ca6:	466d      	mov	r5, sp
   17ca8:	b088      	sub	sp, #32
   17caa:	466a      	mov	r2, sp
   17cac:	4b1b      	ldr	r3, [pc, #108]	; (17d1c <mbox_nrf_init+0xd4>)
   17cae:	6153      	str	r3, [r2, #20]
   17cb0:	4b18      	ldr	r3, [pc, #96]	; (17d14 <mbox_nrf_init+0xcc>)
   17cb2:	6193      	str	r3, [r2, #24]
   17cb4:	2303      	movs	r3, #3
   17cb6:	f842 3f10 	str.w	r3, [r2, #16]!
   17cba:	2300      	movs	r3, #0
   17cbc:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   17cc0:	4815      	ldr	r0, [pc, #84]	; (17d18 <mbox_nrf_init+0xd0>)
   17cc2:	f7f4 faf7 	bl	c2b4 <z_impl_z_log_msg_static_create>
   17cc6:	46ad      	mov	sp, r5
	ch_config.receive_events_enabled = 0;
   17cc8:	2300      	movs	r3, #0
			ch_config.send_task_config[ch] = BIT(ch);
   17cca:	2001      	movs	r0, #1
	ch_config.receive_events_enabled = 0;
   17ccc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   17cd0:	1d3a      	adds	r2, r7, #4
		if (conf->tx_mask & BIT(ch)) {
   17cd2:	6861      	ldr	r1, [r4, #4]
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   17cd4:	3204      	adds	r2, #4
		if (conf->tx_mask & BIT(ch)) {
   17cd6:	40d9      	lsrs	r1, r3
   17cd8:	07cd      	lsls	r5, r1, #31
			ch_config.send_task_config[ch] = BIT(ch);
   17cda:	bf44      	itt	mi
   17cdc:	fa00 f103 	lslmi.w	r1, r0, r3
   17ce0:	f842 1c04 	strmi.w	r1, [r2, #-4]
		if (conf->rx_mask & BIT(ch)) {
   17ce4:	6821      	ldr	r1, [r4, #0]
   17ce6:	40d9      	lsrs	r1, r3
   17ce8:	07c9      	lsls	r1, r1, #31
			ch_config.receive_event_config[ch] = BIT(ch);
   17cea:	bf48      	it	mi
   17cec:	fa00 f103 	lslmi.w	r1, r0, r3
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   17cf0:	f103 0301 	add.w	r3, r3, #1
			ch_config.receive_event_config[ch] = BIT(ch);
   17cf4:	bf48      	it	mi
   17cf6:	63d1      	strmi	r1, [r2, #60]	; 0x3c
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   17cf8:	2b10      	cmp	r3, #16
   17cfa:	d1ea      	bne.n	17cd2 <mbox_nrf_init+0x8a>
	nrfx_ipc_config_load(&ch_config);
   17cfc:	1d38      	adds	r0, r7, #4
   17cfe:	f000 feff 	bl	18b00 <nrfx_ipc_config_load>

	return 0;
}
   17d02:	2000      	movs	r0, #0
   17d04:	3788      	adds	r7, #136	; 0x88
   17d06:	46bd      	mov	sp, r7
   17d08:	bdb0      	pop	{r4, r5, r7, pc}
   17d0a:	bf00      	nop
   17d0c:	00017e35 	.word	0x00017e35
   17d10:	00026924 	.word	0x00026924
   17d14:	00026a18 	.word	0x00026a18
   17d18:	00022870 	.word	0x00022870
   17d1c:	00026954 	.word	0x00026954

00017d20 <mbox_nrf_set_enabled>:
{
   17d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   17d22:	290f      	cmp	r1, #15
{
   17d24:	460c      	mov	r4, r1
	struct mbox_nrf_data *data = dev->data;
   17d26:	6905      	ldr	r5, [r0, #16]
{
   17d28:	af00      	add	r7, sp, #0
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   17d2a:	d848      	bhi.n	17dbe <mbox_nrf_set_enabled+0x9e>
   17d2c:	6843      	ldr	r3, [r0, #4]
   17d2e:	681b      	ldr	r3, [r3, #0]
   17d30:	40cb      	lsrs	r3, r1
   17d32:	07db      	lsls	r3, r3, #31
   17d34:	d543      	bpl.n	17dbe <mbox_nrf_set_enabled+0x9e>
	if ((enable == 0 && (!(data->enabled_mask & BIT(channel)))) ||
   17d36:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   17d3a:	40cb      	lsrs	r3, r1
   17d3c:	f003 0301 	and.w	r3, r3, #1
   17d40:	b91a      	cbnz	r2, 17d4a <mbox_nrf_set_enabled+0x2a>
   17d42:	bb43      	cbnz	r3, 17d96 <mbox_nrf_set_enabled+0x76>
		return -EALREADY;
   17d44:	f06f 0077 	mvn.w	r0, #119	; 0x77
   17d48:	e037      	b.n	17dba <mbox_nrf_set_enabled+0x9a>
	    (enable != 0 &&   (data->enabled_mask & BIT(channel)))) {
   17d4a:	2b00      	cmp	r3, #0
   17d4c:	d1fa      	bne.n	17d44 <mbox_nrf_set_enabled+0x24>
	if (enable && (data->cb[channel] == NULL)) {
   17d4e:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
   17d52:	b97b      	cbnz	r3, 17d74 <mbox_nrf_set_enabled+0x54>
		LOG_WRN("Enabling channel without a registered callback\n");
   17d54:	466e      	mov	r6, sp
   17d56:	b088      	sub	sp, #32
   17d58:	466a      	mov	r2, sp
   17d5a:	491a      	ldr	r1, [pc, #104]	; (17dc4 <mbox_nrf_set_enabled+0xa4>)
   17d5c:	6151      	str	r1, [r2, #20]
   17d5e:	491a      	ldr	r1, [pc, #104]	; (17dc8 <mbox_nrf_set_enabled+0xa8>)
   17d60:	6191      	str	r1, [r2, #24]
   17d62:	2103      	movs	r1, #3
   17d64:	f842 1f10 	str.w	r1, [r2, #16]!
   17d68:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   17d6c:	4817      	ldr	r0, [pc, #92]	; (17dcc <mbox_nrf_set_enabled+0xac>)
   17d6e:	f7f4 faa1 	bl	c2b4 <z_impl_z_log_msg_static_create>
   17d72:	46b5      	mov	sp, r6
	if (enable && data->enabled_mask == 0) {
   17d74:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   17d78:	b913      	cbnz	r3, 17d80 <mbox_nrf_set_enabled+0x60>
		irq_enable(DT_INST_IRQN(0));
   17d7a:	202a      	movs	r0, #42	; 0x2a
   17d7c:	f7f5 fd06 	bl	d78c <arch_irq_enable>
		data->enabled_mask |= BIT(channel);
   17d80:	2201      	movs	r2, #1
   17d82:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   17d86:	40a2      	lsls	r2, r4
   17d88:	4313      	orrs	r3, r2
   17d8a:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
		nrfx_ipc_receive_event_enable(channel);
   17d8e:	b2e0      	uxtb	r0, r4
   17d90:	f000 fed6 	bl	18b40 <nrfx_ipc_receive_event_enable>
   17d94:	e00a      	b.n	17dac <mbox_nrf_set_enabled+0x8c>
		nrfx_ipc_receive_event_disable(channel);
   17d96:	b2c8      	uxtb	r0, r1
   17d98:	f000 feda 	bl	18b50 <nrfx_ipc_receive_event_disable>
		data->enabled_mask &= ~BIT(channel);
   17d9c:	2201      	movs	r2, #1
   17d9e:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   17da2:	40a2      	lsls	r2, r4
   17da4:	ea23 0302 	bic.w	r3, r3, r2
   17da8:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
	if (data->enabled_mask == 0) {
   17dac:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   17db0:	b913      	cbnz	r3, 17db8 <mbox_nrf_set_enabled+0x98>
		irq_disable(DT_INST_IRQN(0));
   17db2:	202a      	movs	r0, #42	; 0x2a
   17db4:	f7f5 fcf8 	bl	d7a8 <arch_irq_disable>
	return 0;
   17db8:	2000      	movs	r0, #0
}
   17dba:	46bd      	mov	sp, r7
   17dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   17dbe:	f06f 0015 	mvn.w	r0, #21
   17dc2:	e7fa      	b.n	17dba <mbox_nrf_set_enabled+0x9a>
   17dc4:	00026984 	.word	0x00026984
   17dc8:	00026a49 	.word	0x00026a49
   17dcc:	00022870 	.word	0x00022870

00017dd0 <mbox_nrf_send>:
{
   17dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17dd2:	4605      	mov	r5, r0
   17dd4:	460c      	mov	r4, r1
   17dd6:	af00      	add	r7, sp, #0
	if (msg) {
   17dd8:	b182      	cbz	r2, 17dfc <mbox_nrf_send+0x2c>
		LOG_WRN("Sending data not supported");
   17dda:	466e      	mov	r6, sp
   17ddc:	b088      	sub	sp, #32
   17dde:	466a      	mov	r2, sp
   17de0:	4b11      	ldr	r3, [pc, #68]	; (17e28 <mbox_nrf_send+0x58>)
   17de2:	6153      	str	r3, [r2, #20]
   17de4:	4b11      	ldr	r3, [pc, #68]	; (17e2c <mbox_nrf_send+0x5c>)
   17de6:	6193      	str	r3, [r2, #24]
   17de8:	2303      	movs	r3, #3
   17dea:	f842 3f10 	str.w	r3, [r2, #16]!
   17dee:	2300      	movs	r3, #0
   17df0:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   17df4:	480e      	ldr	r0, [pc, #56]	; (17e30 <mbox_nrf_send+0x60>)
   17df6:	f7f4 fa5d 	bl	c2b4 <z_impl_z_log_msg_static_create>
   17dfa:	46b5      	mov	sp, r6
	return ((ch < IPC_CONF_NUM) && (conf->tx_mask & BIT(ch)));
   17dfc:	2c0f      	cmp	r4, #15
   17dfe:	d80f      	bhi.n	17e20 <mbox_nrf_send+0x50>
   17e00:	686b      	ldr	r3, [r5, #4]
   17e02:	685b      	ldr	r3, [r3, #4]
   17e04:	40e3      	lsrs	r3, r4
   17e06:	07db      	lsls	r3, r3, #31
   17e08:	d50a      	bpl.n	17e20 <mbox_nrf_send+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17e0a:	2301      	movs	r3, #1
	return 0;
   17e0c:	2000      	movs	r0, #0
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
   17e0e:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17e10:	b2e4      	uxtb	r4, r4
   17e12:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   17e16:	f504 3428 	add.w	r4, r4, #172032	; 0x2a000
   17e1a:	6023      	str	r3, [r4, #0]
}
   17e1c:	46bd      	mov	sp, r7
   17e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   17e20:	f06f 0015 	mvn.w	r0, #21
   17e24:	e7fa      	b.n	17e1c <mbox_nrf_send+0x4c>
   17e26:	bf00      	nop
   17e28:	000269b8 	.word	0x000269b8
   17e2c:	00026a3b 	.word	0x00026a3b
   17e30:	00022870 	.word	0x00022870

00017e34 <mbox_dispatcher>:
{
   17e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct device *dev = data->dev;
   17e38:	f8d1 6080 	ldr.w	r6, [r1, #128]	; 0x80
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   17e3c:	280f      	cmp	r0, #15
{
   17e3e:	4604      	mov	r4, r0
   17e40:	460d      	mov	r5, r1
   17e42:	6873      	ldr	r3, [r6, #4]
   17e44:	af00      	add	r7, sp, #0
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   17e46:	d803      	bhi.n	17e50 <mbox_dispatcher+0x1c>
   17e48:	681b      	ldr	r3, [r3, #0]
   17e4a:	40c3      	lsrs	r3, r0
   17e4c:	07db      	lsls	r3, r3, #31
   17e4e:	d410      	bmi.n	17e72 <mbox_dispatcher+0x3e>
		LOG_WRN("RX event on illegal channel");
   17e50:	46e8      	mov	r8, sp
   17e52:	b088      	sub	sp, #32
   17e54:	466a      	mov	r2, sp
   17e56:	4b18      	ldr	r3, [pc, #96]	; (17eb8 <mbox_dispatcher+0x84>)
   17e58:	6153      	str	r3, [r2, #20]
   17e5a:	4b18      	ldr	r3, [pc, #96]	; (17ebc <mbox_dispatcher+0x88>)
   17e5c:	6193      	str	r3, [r2, #24]
   17e5e:	2303      	movs	r3, #3
   17e60:	f842 3f10 	str.w	r3, [r2, #16]!
   17e64:	2300      	movs	r3, #0
   17e66:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   17e6a:	4815      	ldr	r0, [pc, #84]	; (17ec0 <mbox_dispatcher+0x8c>)
   17e6c:	f7f4 fa22 	bl	c2b4 <z_impl_z_log_msg_static_create>
   17e70:	46c5      	mov	sp, r8
	if (!(data->enabled_mask & BIT(channel))) {
   17e72:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   17e76:	40e3      	lsrs	r3, r4
   17e78:	f013 0301 	ands.w	r3, r3, #1
   17e7c:	d10f      	bne.n	17e9e <mbox_dispatcher+0x6a>
		LOG_WRN("RX event on disabled channel");
   17e7e:	46e8      	mov	r8, sp
   17e80:	b088      	sub	sp, #32
   17e82:	466a      	mov	r2, sp
   17e84:	490f      	ldr	r1, [pc, #60]	; (17ec4 <mbox_dispatcher+0x90>)
   17e86:	6151      	str	r1, [r2, #20]
   17e88:	490c      	ldr	r1, [pc, #48]	; (17ebc <mbox_dispatcher+0x88>)
   17e8a:	6191      	str	r1, [r2, #24]
   17e8c:	2103      	movs	r1, #3
   17e8e:	f842 1f10 	str.w	r1, [r2, #16]!
   17e92:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   17e96:	480a      	ldr	r0, [pc, #40]	; (17ec0 <mbox_dispatcher+0x8c>)
   17e98:	f7f4 fa0c 	bl	c2b4 <z_impl_z_log_msg_static_create>
   17e9c:	46c5      	mov	sp, r8
	if (data->cb[channel] != NULL) {
   17e9e:	eb05 0284 	add.w	r2, r5, r4, lsl #2
   17ea2:	f855 5024 	ldr.w	r5, [r5, r4, lsl #2]
   17ea6:	b125      	cbz	r5, 17eb2 <mbox_dispatcher+0x7e>
		data->cb[channel](dev, channel, data->user_data[channel], NULL);
   17ea8:	2300      	movs	r3, #0
   17eaa:	4621      	mov	r1, r4
   17eac:	4630      	mov	r0, r6
   17eae:	6c12      	ldr	r2, [r2, #64]	; 0x40
   17eb0:	47a8      	blx	r5
}
   17eb2:	46bd      	mov	sp, r7
   17eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17eb8:	000269d7 	.word	0x000269d7
   17ebc:	00026a2b 	.word	0x00026a2b
   17ec0:	00022870 	.word	0x00022870
   17ec4:	000269f7 	.word	0x000269f7

00017ec8 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   17ec8:	b598      	push	{r3, r4, r7, lr}
   17eca:	af00      	add	r7, sp, #0
	z_impl_log_panic();
   17ecc:	f7f4 f912 	bl	c0f4 <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   17ed0:	466c      	mov	r4, sp
   17ed2:	b088      	sub	sp, #32
   17ed4:	466a      	mov	r2, sp
   17ed6:	4b08      	ldr	r3, [pc, #32]	; (17ef8 <k_sys_fatal_error_handler+0x30>)
   17ed8:	6153      	str	r3, [r2, #20]
   17eda:	4b08      	ldr	r3, [pc, #32]	; (17efc <k_sys_fatal_error_handler+0x34>)
   17edc:	6193      	str	r3, [r2, #24]
   17ede:	2303      	movs	r3, #3
   17ee0:	f842 3f10 	str.w	r3, [r2, #16]!
   17ee4:	4806      	ldr	r0, [pc, #24]	; (17f00 <k_sys_fatal_error_handler+0x38>)
   17ee6:	2300      	movs	r3, #0
   17ee8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17eec:	f7f4 f9e2 	bl	c2b4 <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
   17ef0:	2000      	movs	r0, #0
   17ef2:	46a5      	mov	sp, r4
   17ef4:	f7f6 f928 	bl	e148 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   17ef8:	00026a77 	.word	0x00026a77
   17efc:	00026a8c 	.word	0x00026a8c
   17f00:	00022840 	.word	0x00022840

00017f04 <tfm_ns_interface_dispatch>:
K_MUTEX_DEFINE(tfm_mutex);

int32_t tfm_ns_interface_dispatch(veneer_fn fn,
				  uint32_t arg0, uint32_t arg1,
				  uint32_t arg2, uint32_t arg3)
{
   17f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17f08:	461f      	mov	r7, r3
	return !z_sys_post_kernel;
   17f0a:	4b15      	ldr	r3, [pc, #84]	; (17f60 <tfm_ns_interface_dispatch+0x5c>)
   17f0c:	4604      	mov	r4, r0
   17f0e:	f893 8000 	ldrb.w	r8, [r3]
   17f12:	460d      	mov	r5, r1
   17f14:	4616      	mov	r6, r2
   17f16:	b0a2      	sub	sp, #136	; 0x88
	int32_t result;
	bool is_pre_kernel = k_is_pre_kernel();

	if (!is_pre_kernel) {
   17f18:	f1b8 0f00 	cmp.w	r8, #0
   17f1c:	d115      	bne.n	17f4a <tfm_ns_interface_dispatch+0x46>
#endif
	}

	struct fpu_ctx_full context_buffer;

	z_arm_save_fp_context(&context_buffer);
   17f1e:	4668      	mov	r0, sp
   17f20:	f005 fe1a 	bl	1db58 <z_arm_save_fp_context>

	result = fn(arg0, arg1, arg2, arg3);
   17f24:	463a      	mov	r2, r7
   17f26:	4631      	mov	r1, r6
   17f28:	4628      	mov	r0, r5
   17f2a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   17f2c:	47a0      	blx	r4
   17f2e:	4604      	mov	r4, r0

	z_arm_restore_fp_context(&context_buffer);
   17f30:	4668      	mov	r0, sp
   17f32:	f005 fe12 	bl	1db5a <z_arm_restore_fp_context>

	if (!is_pre_kernel) {
   17f36:	f1b8 0f00 	cmp.w	r8, #0
   17f3a:	d002      	beq.n	17f42 <tfm_ns_interface_dispatch+0x3e>
	return z_impl_k_mutex_unlock(mutex);
   17f3c:	4809      	ldr	r0, [pc, #36]	; (17f64 <tfm_ns_interface_dispatch+0x60>)
   17f3e:	f001 fd0b 	bl	19958 <z_impl_k_mutex_unlock>

		k_mutex_unlock(&tfm_mutex);
	}

	return result;
}
   17f42:	4620      	mov	r0, r4
   17f44:	b022      	add	sp, #136	; 0x88
   17f46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
   17f4a:	f04f 32ff 	mov.w	r2, #4294967295
   17f4e:	f04f 33ff 	mov.w	r3, #4294967295
   17f52:	4804      	ldr	r0, [pc, #16]	; (17f64 <tfm_ns_interface_dispatch+0x60>)
   17f54:	f001 fc86 	bl	19864 <z_impl_k_mutex_lock>
		if (k_mutex_lock(&tfm_mutex, K_FOREVER) != 0) {
   17f58:	2800      	cmp	r0, #0
   17f5a:	d0e0      	beq.n	17f1e <tfm_ns_interface_dispatch+0x1a>
			return (int32_t)TFM_ERROR_GENERIC;
   17f5c:	241f      	movs	r4, #31
   17f5e:	e7f0      	b.n	17f42 <tfm_ns_interface_dispatch+0x3e>
   17f60:	2000a296 	.word	0x2000a296
   17f64:	20008908 	.word	0x20008908

00017f68 <psa_generate_random>:
    return status;
}

psa_status_t psa_generate_random(uint8_t *output,
                                 size_t output_size)
{
   17f68:	b530      	push	{r4, r5, lr}
   17f6a:	b095      	sub	sp, #84	; 0x54
   17f6c:	4605      	mov	r5, r0
   17f6e:	460c      	mov	r4, r1
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
   17f70:	2230      	movs	r2, #48	; 0x30
   17f72:	2100      	movs	r1, #0
   17f74:	a808      	add	r0, sp, #32
   17f76:	f009 fd97 	bl	21aa8 <memset>
   17f7a:	233f      	movs	r3, #63	; 0x3f
   17f7c:	9307      	str	r3, [sp, #28]
        .srv_id = TFM_CRYPTO_GENERATE_RANDOM_SID,
    };

    psa_invec in_vec[] = {
   17f7e:	ab07      	add	r3, sp, #28
   17f80:	9303      	str	r3, [sp, #12]
   17f82:	2334      	movs	r3, #52	; 0x34
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };

    psa_outvec out_vec[] = {
   17f84:	9406      	str	r4, [sp, #24]
   17f86:	e9cd 3504 	strd	r3, r5, [sp, #16]
        {.base = output, .len = output_size},
    };

    if (output_size == 0) {
   17f8a:	b154      	cbz	r4, 17fa2 <psa_generate_random+0x3a>
        return PSA_SUCCESS;
    }

    status = API_DISPATCH(tfm_crypto_generate_random,
   17f8c:	2301      	movs	r3, #1
   17f8e:	aa05      	add	r2, sp, #20
   17f90:	9200      	str	r2, [sp, #0]
   17f92:	2100      	movs	r1, #0
   17f94:	4804      	ldr	r0, [pc, #16]	; (17fa8 <psa_generate_random+0x40>)
   17f96:	9301      	str	r3, [sp, #4]
   17f98:	aa03      	add	r2, sp, #12
   17f9a:	f000 f807 	bl	17fac <psa_call>
                          TFM_CRYPTO_GENERATE_RANDOM);

    return status;
}
   17f9e:	b015      	add	sp, #84	; 0x54
   17fa0:	bd30      	pop	{r4, r5, pc}
        return PSA_SUCCESS;
   17fa2:	4620      	mov	r0, r4
   17fa4:	e7fb      	b.n	17f9e <psa_generate_random+0x36>
   17fa6:	bf00      	nop
   17fa8:	40000100 	.word	0x40000100

00017fac <psa_call>:
psa_status_t psa_call(psa_handle_t handle, int32_t type,
                      const psa_invec *in_vec,
                      size_t in_len,
                      psa_outvec *out_vec,
                      size_t out_len)
{
   17fac:	b430      	push	{r4, r5}
    if ((type > INT16_MAX) ||
   17fae:	f501 4500 	add.w	r5, r1, #32768	; 0x8000
   17fb2:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
{
   17fb6:	9c03      	ldr	r4, [sp, #12]
    if ((type > INT16_MAX) ||
   17fb8:	d20d      	bcs.n	17fd6 <psa_call+0x2a>
        (type < INT16_MIN) ||
   17fba:	ea43 0504 	orr.w	r5, r3, r4
   17fbe:	2dff      	cmp	r5, #255	; 0xff
   17fc0:	d809      	bhi.n	17fd6 <psa_call+0x2a>
    }

    return tfm_ns_interface_dispatch(
                                (veneer_fn)tfm_psa_call_veneer,
                                (uint32_t)handle,
                                PARAM_PACK(type, in_len, out_len),
   17fc2:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    return tfm_ns_interface_dispatch(
   17fc6:	4613      	mov	r3, r2
   17fc8:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
   17fcc:	4601      	mov	r1, r0
                                (uint32_t)in_vec,
                                (uint32_t)out_vec);
}
   17fce:	bc30      	pop	{r4, r5}
    return tfm_ns_interface_dispatch(
   17fd0:	4803      	ldr	r0, [pc, #12]	; (17fe0 <psa_call+0x34>)
   17fd2:	f7ff bf97 	b.w	17f04 <tfm_ns_interface_dispatch>
}
   17fd6:	f06f 0080 	mvn.w	r0, #128	; 0x80
   17fda:	bc30      	pop	{r4, r5}
   17fdc:	4770      	bx	lr
   17fde:	bf00      	nop
   17fe0:	00007c21 	.word	0x00007c21

00017fe4 <psa_connect>:

/* Following veneers are only needed by connection-based services */
#if CONFIG_TFM_CONNECTION_BASED_SERVICE_API == 1
psa_handle_t psa_connect(uint32_t sid, uint32_t version)
{
    return tfm_ns_interface_dispatch(
   17fe4:	2300      	movs	r3, #0
{
   17fe6:	b507      	push	{r0, r1, r2, lr}
   17fe8:	460a      	mov	r2, r1
    return tfm_ns_interface_dispatch(
   17fea:	9300      	str	r3, [sp, #0]
   17fec:	4601      	mov	r1, r0
   17fee:	4803      	ldr	r0, [pc, #12]	; (17ffc <psa_connect+0x18>)
   17ff0:	f7ff ff88 	bl	17f04 <tfm_ns_interface_dispatch>
                                (veneer_fn)tfm_psa_connect_veneer,
                                sid,
                                version,
                                0,
                                0);
}
   17ff4:	b003      	add	sp, #12
   17ff6:	f85d fb04 	ldr.w	pc, [sp], #4
   17ffa:	bf00      	nop
   17ffc:	00007c19 	.word	0x00007c19

00018000 <psa_close>:

void psa_close(psa_handle_t handle)
{
    (void)tfm_ns_interface_dispatch(
   18000:	2300      	movs	r3, #0
{
   18002:	b507      	push	{r0, r1, r2, lr}
   18004:	4601      	mov	r1, r0
    (void)tfm_ns_interface_dispatch(
   18006:	461a      	mov	r2, r3
   18008:	9300      	str	r3, [sp, #0]
   1800a:	4803      	ldr	r0, [pc, #12]	; (18018 <psa_close+0x18>)
   1800c:	f7ff ff7a 	bl	17f04 <tfm_ns_interface_dispatch>
                         (veneer_fn)tfm_psa_close_veneer,
                         (uint32_t)handle,
                         0,
                         0,
                         0);
}
   18010:	b003      	add	sp, #12
   18012:	f85d fb04 	ldr.w	pc, [sp], #4
   18016:	bf00      	nop
   18018:	00007c11 	.word	0x00007c11

0001801c <SystemCoreClockUpdate>:
#endif

void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
   1801c:	4b04      	ldr	r3, [pc, #16]	; (18030 <SystemCoreClockUpdate+0x14>)
   1801e:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
   18022:	4b04      	ldr	r3, [pc, #16]	; (18034 <SystemCoreClockUpdate+0x18>)
   18024:	f002 0203 	and.w	r2, r2, #3
   18028:	40d3      	lsrs	r3, r2
   1802a:	4a03      	ldr	r2, [pc, #12]	; (18038 <SystemCoreClockUpdate+0x1c>)
   1802c:	6013      	str	r3, [r2, #0]
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#endif
}
   1802e:	4770      	bx	lr
   18030:	40005000 	.word	0x40005000
   18034:	07a12000 	.word	0x07a12000
   18038:	200084b0 	.word	0x200084b0

0001803c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   1803c:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   1803e:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   18040:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   18042:	fab2 f382 	clz	r3, r2
   18046:	f1c3 031f 	rsb	r3, r3, #31
   1804a:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   1804c:	fa05 f403 	lsl.w	r4, r5, r3
   18050:	ea22 0404 	bic.w	r4, r2, r4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   18054:	e8d0 6fef 	ldaex	r6, [r0]
   18058:	4296      	cmp	r6, r2
   1805a:	d104      	bne.n	18066 <nrfx_flag32_alloc+0x2a>
   1805c:	e8c0 4fec 	stlex	ip, r4, [r0]
   18060:	f1bc 0f00 	cmp.w	ip, #0
   18064:	d1f6      	bne.n	18054 <nrfx_flag32_alloc+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   18066:	d1eb      	bne.n	18040 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   18068:	4801      	ldr	r0, [pc, #4]	; (18070 <nrfx_flag32_alloc+0x34>)
    *p_flag = idx;
   1806a:	700b      	strb	r3, [r1, #0]
}
   1806c:	bd70      	pop	{r4, r5, r6, pc}
   1806e:	bf00      	nop
   18070:	0bad0000 	.word	0x0bad0000

00018074 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   18074:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   18076:	6803      	ldr	r3, [r0, #0]
   18078:	40cb      	lsrs	r3, r1
   1807a:	07db      	lsls	r3, r3, #31
   1807c:	d410      	bmi.n	180a0 <nrfx_flag32_free+0x2c>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   1807e:	2301      	movs	r3, #1
   18080:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   18082:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   18084:	ea43 0102 	orr.w	r1, r3, r2
   18088:	e8d0 4fef 	ldaex	r4, [r0]
   1808c:	4294      	cmp	r4, r2
   1808e:	d104      	bne.n	1809a <nrfx_flag32_free+0x26>
   18090:	e8c0 1fec 	stlex	ip, r1, [r0]
   18094:	f1bc 0f00 	cmp.w	ip, #0
   18098:	d1f6      	bne.n	18088 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1809a:	d1f2      	bne.n	18082 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   1809c:	4801      	ldr	r0, [pc, #4]	; (180a4 <nrfx_flag32_free+0x30>)
}
   1809e:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   180a0:	4801      	ldr	r0, [pc, #4]	; (180a8 <nrfx_flag32_free+0x34>)
   180a2:	e7fc      	b.n	1809e <nrfx_flag32_free+0x2a>
   180a4:	0bad0000 	.word	0x0bad0000
   180a8:	0bad0004 	.word	0x0bad0004

000180ac <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
   180ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
    switch (domain)
   180ae:	2803      	cmp	r0, #3
   180b0:	f200 80a0 	bhi.w	181f4 <clock_stop+0x148>
   180b4:	e8df f000 	tbb	[pc, r0]
   180b8:	32251802 	.word	0x32251802
    p_reg->INTENCLR = mask;
   180bc:	2202      	movs	r2, #2
   180be:	4b59      	ldr	r3, [pc, #356]	; (18224 <clock_stop+0x178>)
   180c0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   180c4:	2200      	movs	r2, #0
   180c6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   180ca:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   180ce:	2201      	movs	r2, #1
   180d0:	60da      	str	r2, [r3, #12]
            return;
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   180d2:	2400      	movs	r4, #0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   180d4:	2301      	movs	r3, #1
   180d6:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
   180da:	2803      	cmp	r0, #3
   180dc:	f200 808a 	bhi.w	181f4 <clock_stop+0x148>
   180e0:	e8df f000 	tbb	[pc, r0]
   180e4:	94736529 	.word	0x94736529
    p_reg->INTENCLR = mask;
   180e8:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   180ea:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
   180ec:	4b4d      	ldr	r3, [pc, #308]	; (18224 <clock_stop+0x178>)
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   180ee:	f10d 0407 	add.w	r4, sp, #7
   180f2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   180f6:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   180fa:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   180fe:	605a      	str	r2, [r3, #4]
   18100:	e7e8      	b.n	180d4 <clock_stop+0x28>
    p_reg->INTENCLR = mask;
   18102:	f44f 7200 	mov.w	r2, #512	; 0x200
   18106:	4b47      	ldr	r3, [pc, #284]	; (18224 <clock_stop+0x178>)
   18108:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1810c:	2200      	movs	r2, #0
   1810e:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   18112:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18116:	2201      	movs	r2, #1
   18118:	625a      	str	r2, [r3, #36]	; 0x24
   1811a:	e7da      	b.n	180d2 <clock_stop+0x26>
    p_reg->INTENCLR = mask;
   1811c:	f44f 7280 	mov.w	r2, #256	; 0x100
   18120:	4b40      	ldr	r3, [pc, #256]	; (18224 <clock_stop+0x178>)
   18122:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18126:	2200      	movs	r2, #0
   18128:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   1812c:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18130:	2201      	movs	r2, #1
   18132:	61da      	str	r2, [r3, #28]
   18134:	e7cd      	b.n	180d2 <clock_stop+0x26>
    switch (domain)
   18136:	f242 7510 	movw	r5, #10000	; 0x2710
   1813a:	4e3a      	ldr	r6, [pc, #232]	; (18224 <clock_stop+0x178>)
            if (p_clk_src != NULL)
   1813c:	b36c      	cbz	r4, 1819a <clock_stop+0xee>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1813e:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   18142:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   18146:	7023      	strb	r3, [r4, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   18148:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   1814c:	03d9      	lsls	r1, r3, #15
   1814e:	d551      	bpl.n	181f4 <clock_stop+0x148>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   18150:	f89d 0007 	ldrb.w	r0, [sp, #7]
   18154:	2801      	cmp	r0, #1
   18156:	d14d      	bne.n	181f4 <clock_stop+0x148>
   18158:	f008 f902 	bl	20360 <nrfx_busy_wait>
   1815c:	3d01      	subs	r5, #1
   1815e:	d1ed      	bne.n	1813c <clock_stop+0x90>
   18160:	e048      	b.n	181f4 <clock_stop+0x148>
   18162:	f89d 0007 	ldrb.w	r0, [sp, #7]
   18166:	2801      	cmp	r0, #1
   18168:	d144      	bne.n	181f4 <clock_stop+0x148>
   1816a:	f008 f8f9 	bl	20360 <nrfx_busy_wait>
   1816e:	3d01      	subs	r5, #1
   18170:	d14f      	bne.n	18212 <clock_stop+0x166>
   18172:	e03f      	b.n	181f4 <clock_stop+0x148>
   18174:	f89d 0007 	ldrb.w	r0, [sp, #7]
   18178:	2801      	cmp	r0, #1
   1817a:	d13b      	bne.n	181f4 <clock_stop+0x148>
   1817c:	f008 f8f0 	bl	20360 <nrfx_busy_wait>
   18180:	3d01      	subs	r5, #1
   18182:	d037      	beq.n	181f4 <clock_stop+0x148>
            if (p_clk_src != NULL)
   18184:	b1bc      	cbz	r4, 181b6 <clock_stop+0x10a>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   18186:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   1818a:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   1818e:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   18190:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   18194:	03db      	lsls	r3, r3, #15
   18196:	d52d      	bpl.n	181f4 <clock_stop+0x148>
   18198:	e7ec      	b.n	18174 <clock_stop+0xc8>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1819a:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   1819e:	03da      	lsls	r2, r3, #15
   181a0:	d528      	bpl.n	181f4 <clock_stop+0x148>
   181a2:	2001      	movs	r0, #1
   181a4:	f008 f8dc 	bl	20360 <nrfx_busy_wait>
   181a8:	3d01      	subs	r5, #1
   181aa:	d1f6      	bne.n	1819a <clock_stop+0xee>
   181ac:	e022      	b.n	181f4 <clock_stop+0x148>
    switch (domain)
   181ae:	f242 7510 	movw	r5, #10000	; 0x2710
   181b2:	4e1c      	ldr	r6, [pc, #112]	; (18224 <clock_stop+0x178>)
   181b4:	e7e6      	b.n	18184 <clock_stop+0xd8>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   181b6:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   181ba:	03d8      	lsls	r0, r3, #15
   181bc:	d51a      	bpl.n	181f4 <clock_stop+0x148>
   181be:	2001      	movs	r0, #1
   181c0:	f008 f8ce 	bl	20360 <nrfx_busy_wait>
   181c4:	3d01      	subs	r5, #1
   181c6:	d1f6      	bne.n	181b6 <clock_stop+0x10a>
   181c8:	e014      	b.n	181f4 <clock_stop+0x148>
    switch (domain)
   181ca:	f242 7510 	movw	r5, #10000	; 0x2710
   181ce:	4e15      	ldr	r6, [pc, #84]	; (18224 <clock_stop+0x178>)
            if (p_clk_src != NULL)
   181d0:	b194      	cbz	r4, 181f8 <clock_stop+0x14c>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
   181d2:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   181d6:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   181da:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   181dc:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   181e0:	03d9      	lsls	r1, r3, #15
   181e2:	d507      	bpl.n	181f4 <clock_stop+0x148>
   181e4:	f89d 0007 	ldrb.w	r0, [sp, #7]
   181e8:	2801      	cmp	r0, #1
   181ea:	d103      	bne.n	181f4 <clock_stop+0x148>
   181ec:	f008 f8b8 	bl	20360 <nrfx_busy_wait>
   181f0:	3d01      	subs	r5, #1
   181f2:	d1ed      	bne.n	181d0 <clock_stop+0x124>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   181f4:	b002      	add	sp, #8
   181f6:	bd70      	pop	{r4, r5, r6, pc}
   181f8:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   181fc:	03da      	lsls	r2, r3, #15
   181fe:	d5f9      	bpl.n	181f4 <clock_stop+0x148>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   18200:	2001      	movs	r0, #1
   18202:	f008 f8ad 	bl	20360 <nrfx_busy_wait>
   18206:	3d01      	subs	r5, #1
   18208:	d1f6      	bne.n	181f8 <clock_stop+0x14c>
   1820a:	e7f3      	b.n	181f4 <clock_stop+0x148>
    switch (domain)
   1820c:	f242 7510 	movw	r5, #10000	; 0x2710
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
   18210:	4e04      	ldr	r6, [pc, #16]	; (18224 <clock_stop+0x178>)
   18212:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
   18216:	03db      	lsls	r3, r3, #15
   18218:	d5ec      	bpl.n	181f4 <clock_stop+0x148>
   1821a:	2c00      	cmp	r4, #0
   1821c:	d1a1      	bne.n	18162 <clock_stop+0xb6>
   1821e:	2001      	movs	r0, #1
   18220:	e7a3      	b.n	1816a <clock_stop+0xbe>
   18222:	bf00      	nop
   18224:	40005000 	.word	0x40005000

00018228 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   18228:	4b04      	ldr	r3, [pc, #16]	; (1823c <nrfx_clock_init+0x14>)
   1822a:	791a      	ldrb	r2, [r3, #4]
   1822c:	b922      	cbnz	r2, 18238 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   1822e:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   18230:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   18232:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   18234:	4802      	ldr	r0, [pc, #8]	; (18240 <nrfx_clock_init+0x18>)
   18236:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   18238:	4802      	ldr	r0, [pc, #8]	; (18244 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1823a:	4770      	bx	lr
   1823c:	2000a10c 	.word	0x2000a10c
   18240:	0bad0000 	.word	0x0bad0000
   18244:	0bad000c 	.word	0x0bad000c

00018248 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   18248:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   1824a:	2005      	movs	r0, #5
   1824c:	f7f5 fac0 	bl	d7d0 <arch_irq_is_enabled>
   18250:	b910      	cbnz	r0, 18258 <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   18252:	2005      	movs	r0, #5
   18254:	f7f5 fa9a 	bl	d78c <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
   18258:	2201      	movs	r2, #1
   1825a:	4b04      	ldr	r3, [pc, #16]	; (1826c <nrfx_clock_enable+0x24>)
   1825c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
   18260:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
   18264:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   18268:	bd08      	pop	{r3, pc}
   1826a:	bf00      	nop
   1826c:	40005000 	.word	0x40005000

00018270 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   18270:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   18272:	2803      	cmp	r0, #3
   18274:	d818      	bhi.n	182a8 <nrfx_clock_start+0x38>
   18276:	e8df f000 	tbb	[pc, r0]
   1827a:	3002      	.short	0x3002
   1827c:	483b      	.short	0x483b
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1827e:	4a29      	ldr	r2, [pc, #164]	; (18324 <nrfx_clock_start+0xb4>)
   18280:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   18284:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   18288:	03c9      	lsls	r1, r1, #15
   1828a:	d40e      	bmi.n	182aa <nrfx_clock_start+0x3a>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   1828c:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                    // LF clock is already running. Inspect its source.
                    // If LF clock source is inappropriate then it will be stopped and modified.
                    // Ignore return value as LF clock will be started again regardless of the result.
                    (void)clock_lfclksrc_tweak(&lfclksrc);
                }
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   18290:	07db      	lsls	r3, r3, #31
   18292:	d513      	bpl.n	182bc <nrfx_clock_start+0x4c>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   18294:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
   18298:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   1829c:	3b01      	subs	r3, #1
   1829e:	2b01      	cmp	r3, #1
   182a0:	d809      	bhi.n	182b6 <nrfx_clock_start+0x46>
    p_reg->INTENSET = mask;
   182a2:	2302      	movs	r3, #2
   182a4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   182a8:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   182aa:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   182ae:	2b02      	cmp	r3, #2
   182b0:	d005      	beq.n	182be <nrfx_clock_start+0x4e>
   182b2:	2b01      	cmp	r3, #1
   182b4:	d002      	beq.n	182bc <nrfx_clock_start+0x4c>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   182b6:	2000      	movs	r0, #0
   182b8:	f7ff fef8 	bl	180ac <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   182bc:	2301      	movs	r3, #1
    p_reg->LFCLKSRC = (uint32_t)(source);
   182be:	4a19      	ldr	r2, [pc, #100]	; (18324 <nrfx_clock_start+0xb4>)
   182c0:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   182c4:	2300      	movs	r3, #0
   182c6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   182ca:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
   182ce:	2302      	movs	r3, #2
   182d0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   182d4:	2301      	movs	r3, #1
   182d6:	6093      	str	r3, [r2, #8]
}
   182d8:	e7e6      	b.n	182a8 <nrfx_clock_start+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   182da:	2200      	movs	r2, #0
   182dc:	4b11      	ldr	r3, [pc, #68]	; (18324 <nrfx_clock_start+0xb4>)
   182de:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   182e2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   182e6:	2201      	movs	r2, #1
   182e8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   182ec:	601a      	str	r2, [r3, #0]
}
   182ee:	e7db      	b.n	182a8 <nrfx_clock_start+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   182f0:	2200      	movs	r2, #0
   182f2:	4b0c      	ldr	r3, [pc, #48]	; (18324 <nrfx_clock_start+0xb4>)
   182f4:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   182f8:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
   182fc:	f44f 7200 	mov.w	r2, #512	; 0x200
   18300:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18304:	2201      	movs	r2, #1
   18306:	621a      	str	r2, [r3, #32]
}
   18308:	e7ce      	b.n	182a8 <nrfx_clock_start+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1830a:	2200      	movs	r2, #0
   1830c:	4b05      	ldr	r3, [pc, #20]	; (18324 <nrfx_clock_start+0xb4>)
   1830e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   18312:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
   18316:	f44f 7280 	mov.w	r2, #256	; 0x100
   1831a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1831e:	2201      	movs	r2, #1
   18320:	619a      	str	r2, [r3, #24]
}
   18322:	e7c1      	b.n	182a8 <nrfx_clock_start+0x38>
   18324:	40005000 	.word	0x40005000

00018328 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   18328:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1832a:	4b28      	ldr	r3, [pc, #160]	; (183cc <nrfx_power_clock_irq_handler+0xa4>)
   1832c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   18330:	b152      	cbz	r2, 18348 <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18332:	2000      	movs	r0, #0
   18334:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   18338:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   1833c:	2201      	movs	r2, #1
   1833e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   18342:	4b23      	ldr	r3, [pc, #140]	; (183d0 <nrfx_power_clock_irq_handler+0xa8>)
   18344:	681b      	ldr	r3, [r3, #0]
   18346:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   18348:	4b20      	ldr	r3, [pc, #128]	; (183cc <nrfx_power_clock_irq_handler+0xa4>)
   1834a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   1834e:	b18a      	cbz	r2, 18374 <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18350:	2200      	movs	r2, #0
   18352:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   18356:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1835a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1835e:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   18362:	f002 0203 	and.w	r2, r2, #3
   18366:	2a01      	cmp	r2, #1
   18368:	f04f 0102 	mov.w	r1, #2
   1836c:	d126      	bne.n	183bc <nrfx_power_clock_irq_handler+0x94>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1836e:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18372:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   18374:	4b15      	ldr	r3, [pc, #84]	; (183cc <nrfx_power_clock_irq_handler+0xa4>)
   18376:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
   1837a:	b162      	cbz	r2, 18396 <nrfx_power_clock_irq_handler+0x6e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1837c:	2200      	movs	r2, #0
   1837e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   18382:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
   18386:	f44f 7280 	mov.w	r2, #256	; 0x100
   1838a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
   1838e:	4b10      	ldr	r3, [pc, #64]	; (183d0 <nrfx_power_clock_irq_handler+0xa8>)
   18390:	2004      	movs	r0, #4
   18392:	681b      	ldr	r3, [r3, #0]
   18394:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   18396:	4b0d      	ldr	r3, [pc, #52]	; (183cc <nrfx_power_clock_irq_handler+0xa4>)
   18398:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
   1839c:	b1aa      	cbz	r2, 183ca <nrfx_power_clock_irq_handler+0xa2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1839e:	2200      	movs	r2, #0
   183a0:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   183a4:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
   183a8:	f44f 7200 	mov.w	r2, #512	; 0x200
   183ac:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   183b0:	4b07      	ldr	r3, [pc, #28]	; (183d0 <nrfx_power_clock_irq_handler+0xa8>)
   183b2:	2005      	movs	r0, #5
    }
#endif
}
   183b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   183b8:	681b      	ldr	r3, [r3, #0]
   183ba:	4718      	bx	r3
   183bc:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   183c0:	4b03      	ldr	r3, [pc, #12]	; (183d0 <nrfx_power_clock_irq_handler+0xa8>)
   183c2:	2001      	movs	r0, #1
   183c4:	681b      	ldr	r3, [r3, #0]
   183c6:	4798      	blx	r3
   183c8:	e7d4      	b.n	18374 <nrfx_power_clock_irq_handler+0x4c>
}
   183ca:	bd10      	pop	{r4, pc}
   183cc:	40005000 	.word	0x40005000
   183d0:	2000a10c 	.word	0x2000a10c

000183d4 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   183d4:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
   183d6:	4801      	ldr	r0, [pc, #4]	; (183dc <nrfx_dppi_channel_alloc+0x8>)
   183d8:	f7ff be30 	b.w	1803c <nrfx_flag32_alloc>
   183dc:	200084b4 	.word	0x200084b4

000183e0 <nrfx_dppi_channel_free>:
}

nrfx_err_t nrfx_dppi_channel_free(uint8_t channel)
{
    nrf_dppi_channels_disable(NRF_DPPIC, NRFX_BIT(channel));
   183e0:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   183e2:	4a04      	ldr	r2, [pc, #16]	; (183f4 <nrfx_dppi_channel_free+0x14>)
   183e4:	4083      	lsls	r3, r0
{
   183e6:	4601      	mov	r1, r0
   183e8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    return nrfx_flag32_free(&m_allocated_channels, channel);
   183ec:	4802      	ldr	r0, [pc, #8]	; (183f8 <nrfx_dppi_channel_free+0x18>)
   183ee:	f7ff be41 	b.w	18074 <nrfx_flag32_free>
   183f2:	bf00      	nop
   183f4:	40017000 	.word	0x40017000
   183f8:	200084b4 	.word	0x200084b4

000183fc <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   183fc:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   183fe:	f003 021f 	and.w	r2, r3, #31
   18402:	6002      	str	r2, [r0, #0]
}
   18404:	4a03      	ldr	r2, [pc, #12]	; (18414 <nrf_gpio_pin_port_decode+0x18>)
   18406:	4804      	ldr	r0, [pc, #16]	; (18418 <nrf_gpio_pin_port_decode+0x1c>)
    return pin_number >> 5;
   18408:	095b      	lsrs	r3, r3, #5
}
   1840a:	2b01      	cmp	r3, #1
   1840c:	bf18      	it	ne
   1840e:	4610      	movne	r0, r2
   18410:	4770      	bx	lr
   18412:	bf00      	nop
   18414:	40842500 	.word	0x40842500
   18418:	40842800 	.word	0x40842800

0001841c <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1841c:	4b03      	ldr	r3, [pc, #12]	; (1842c <pin_in_use_by_te+0x10>)
   1841e:	3008      	adds	r0, #8
   18420:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   18424:	f3c0 1040 	ubfx	r0, r0, #5, #1
   18428:	4770      	bx	lr
   1842a:	bf00      	nop
   1842c:	200084b8 	.word	0x200084b8

00018430 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   18430:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   18432:	4c0d      	ldr	r4, [pc, #52]	; (18468 <call_handler+0x38>)
   18434:	f100 0308 	add.w	r3, r0, #8
   18438:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
   1843c:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1843e:	05da      	lsls	r2, r3, #23
{
   18440:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   18442:	d507      	bpl.n	18454 <call_handler+0x24>
   18444:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   18448:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   1844c:	6852      	ldr	r2, [r2, #4]
   1844e:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   18452:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   18454:	68a3      	ldr	r3, [r4, #8]
   18456:	b12b      	cbz	r3, 18464 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   18458:	4631      	mov	r1, r6
   1845a:	4628      	mov	r0, r5
   1845c:	68e2      	ldr	r2, [r4, #12]
    }
}
   1845e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   18462:	4718      	bx	r3
}
   18464:	bd70      	pop	{r4, r5, r6, pc}
   18466:	bf00      	nop
   18468:	200084b8 	.word	0x200084b8

0001846c <release_handler>:
{
   1846c:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1846e:	4a12      	ldr	r2, [pc, #72]	; (184b8 <release_handler+0x4c>)
   18470:	3008      	adds	r0, #8
   18472:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   18476:	05d9      	lsls	r1, r3, #23
   18478:	d51b      	bpl.n	184b2 <release_handler+0x46>
   1847a:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   1847e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   18482:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   18486:	2000      	movs	r0, #0
   18488:	f102 040e 	add.w	r4, r2, #14
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   1848c:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   18490:	f413 7f80 	tst.w	r3, #256	; 0x100
   18494:	d003      	beq.n	1849e <release_handler+0x32>
   18496:	f3c3 2343 	ubfx	r3, r3, #9, #4
   1849a:	4299      	cmp	r1, r3
   1849c:	d009      	beq.n	184b2 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1849e:	3001      	adds	r0, #1
   184a0:	2830      	cmp	r0, #48	; 0x30
   184a2:	d1f3      	bne.n	1848c <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   184a4:	2300      	movs	r3, #0
   184a6:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   184aa:	4804      	ldr	r0, [pc, #16]	; (184bc <release_handler+0x50>)
}
   184ac:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   184ae:	f7ff bde1 	b.w	18074 <nrfx_flag32_free>
}
   184b2:	bc10      	pop	{r4}
   184b4:	4770      	bx	lr
   184b6:	bf00      	nop
   184b8:	200084b8 	.word	0x200084b8
   184bc:	2000852c 	.word	0x2000852c

000184c0 <pin_handler_trigger_uninit>:
{
   184c0:	b538      	push	{r3, r4, r5, lr}
   184c2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   184c4:	f7ff ffaa 	bl	1841c <pin_in_use_by_te>
   184c8:	4c0b      	ldr	r4, [pc, #44]	; (184f8 <pin_handler_trigger_uninit+0x38>)
   184ca:	f102 0508 	add.w	r5, r2, #8
   184ce:	b160      	cbz	r0, 184ea <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   184d0:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   184d2:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   184d6:	0b5b      	lsrs	r3, r3, #13
   184d8:	009b      	lsls	r3, r3, #2
   184da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   184de:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   184e2:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
   184e6:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
   184ea:	4610      	mov	r0, r2
   184ec:	f7ff ffbe 	bl	1846c <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   184f0:	2300      	movs	r3, #0
   184f2:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   184f6:	bd38      	pop	{r3, r4, r5, pc}
   184f8:	200084b8 	.word	0x200084b8

000184fc <nrfx_gpiote_input_configure>:
{
   184fc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   18500:	4604      	mov	r4, r0
   18502:	4690      	mov	r8, r2
   18504:	461d      	mov	r5, r3
    if (p_input_config)
   18506:	b301      	cbz	r1, 1854a <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   18508:	4e4f      	ldr	r6, [pc, #316]	; (18648 <nrfx_gpiote_input_configure+0x14c>)
   1850a:	f100 0708 	add.w	r7, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   1850e:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   18512:	079b      	lsls	r3, r3, #30
   18514:	d502      	bpl.n	1851c <nrfx_gpiote_input_configure+0x20>
   18516:	f7ff ff81 	bl	1841c <pin_in_use_by_te>
   1851a:	bb28      	cbnz	r0, 18568 <nrfx_gpiote_input_configure+0x6c>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   1851c:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1851e:	4620      	mov	r0, r4
   18520:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   18524:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   18528:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1852c:	f10d 020f 	add.w	r2, sp, #15
   18530:	460b      	mov	r3, r1
   18532:	f10d 010e 	add.w	r1, sp, #14
   18536:	f007 ff17 	bl	20368 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   1853a:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   1853e:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   18542:	f043 0301 	orr.w	r3, r3, #1
   18546:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_trigger_config)
   1854a:	f1b8 0f00 	cmp.w	r8, #0
   1854e:	d02d      	beq.n	185ac <nrfx_gpiote_input_configure+0xb0>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   18550:	4e3d      	ldr	r6, [pc, #244]	; (18648 <nrfx_gpiote_input_configure+0x14c>)
   18552:	f104 0708 	add.w	r7, r4, #8
   18556:	f836 1017 	ldrh.w	r1, [r6, r7, lsl #1]
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   1855a:	f898 0000 	ldrb.w	r0, [r8]
        if (pin_is_output(pin))
   1855e:	078a      	lsls	r2, r1, #30
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   18560:	f8d8 3004 	ldr.w	r3, [r8, #4]
        if (pin_is_output(pin))
   18564:	d502      	bpl.n	1856c <nrfx_gpiote_input_configure+0x70>
            if (use_evt)
   18566:	b1cb      	cbz	r3, 1859c <nrfx_gpiote_input_configure+0xa0>
            return NRFX_ERROR_INVALID_PARAM;
   18568:	4838      	ldr	r0, [pc, #224]	; (1864c <nrfx_gpiote_input_configure+0x150>)
   1856a:	e021      	b.n	185b0 <nrfx_gpiote_input_configure+0xb4>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   1856c:	f021 0120 	bic.w	r1, r1, #32
   18570:	04c9      	lsls	r1, r1, #19
   18572:	0cc9      	lsrs	r1, r1, #19
   18574:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
            if (use_evt)
   18578:	b183      	cbz	r3, 1859c <nrfx_gpiote_input_configure+0xa0>
                if (!edge)
   1857a:	2803      	cmp	r0, #3
   1857c:	d8f4      	bhi.n	18568 <nrfx_gpiote_input_configure+0x6c>
                uint8_t ch = *p_trigger_config->p_in_channel;
   1857e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   18582:	f893 c000 	ldrb.w	ip, [r3]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   18586:	4662      	mov	r2, ip
   18588:	0092      	lsls	r2, r2, #2
   1858a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1858e:	f502 323c 	add.w	r2, r2, #192512	; 0x2f000
   18592:	b980      	cbnz	r0, 185b6 <nrfx_gpiote_input_configure+0xba>
    p_reg->CONFIG[idx] = 0;
   18594:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
   18598:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   1859c:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   185a0:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   185a4:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
   185a8:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_handler_config)
   185ac:	bb1d      	cbnz	r5, 185f6 <nrfx_gpiote_input_configure+0xfa>
        err = NRFX_SUCCESS;
   185ae:	4828      	ldr	r0, [pc, #160]	; (18650 <nrfx_gpiote_input_configure+0x154>)
}
   185b0:	b004      	add	sp, #16
   185b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   185b6:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   185ba:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
   185be:	f023 0303 	bic.w	r3, r3, #3
   185c2:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   185c6:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
   185ca:	f041 0120 	orr.w	r1, r1, #32
   185ce:	f423 334f 	bic.w	r3, r3, #211968	; 0x33c00
   185d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
   185d6:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   185da:	0223      	lsls	r3, r4, #8
   185dc:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   185e0:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
   185e4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   185e8:	ea43 030e 	orr.w	r3, r3, lr
   185ec:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   185f0:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
   185f4:	e7d2      	b.n	1859c <nrfx_gpiote_input_configure+0xa0>
    release_handler(pin);
   185f6:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   185f8:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   185fc:	f7ff ff36 	bl	1846c <release_handler>
    if (!handler)
   18600:	2e00      	cmp	r6, #0
   18602:	d0d4      	beq.n	185ae <nrfx_gpiote_input_configure+0xb2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   18604:	4d10      	ldr	r5, [pc, #64]	; (18648 <nrfx_gpiote_input_configure+0x14c>)
   18606:	e9d5 2300 	ldrd	r2, r3, [r5]
   1860a:	4296      	cmp	r6, r2
   1860c:	d101      	bne.n	18612 <nrfx_gpiote_input_configure+0x116>
   1860e:	429f      	cmp	r7, r3
   18610:	d018      	beq.n	18644 <nrfx_gpiote_input_configure+0x148>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   18612:	4810      	ldr	r0, [pc, #64]	; (18654 <nrfx_gpiote_input_configure+0x158>)
   18614:	f10d 010f 	add.w	r1, sp, #15
   18618:	f7ff fd10 	bl	1803c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   1861c:	4b0c      	ldr	r3, [pc, #48]	; (18650 <nrfx_gpiote_input_configure+0x154>)
   1861e:	4298      	cmp	r0, r3
   18620:	d1c6      	bne.n	185b0 <nrfx_gpiote_input_configure+0xb4>
        handler_id = (int32_t)id;
   18622:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].p_context = p_context;
   18626:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1862a:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   1862c:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1862e:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
   18632:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   18636:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   1863a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1863e:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
   18642:	e7b4      	b.n	185ae <nrfx_gpiote_input_configure+0xb2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   18644:	2200      	movs	r2, #0
   18646:	e7ee      	b.n	18626 <nrfx_gpiote_input_configure+0x12a>
   18648:	200084b8 	.word	0x200084b8
   1864c:	0bad0004 	.word	0x0bad0004
   18650:	0bad0000 	.word	0x0bad0000
   18654:	2000852c 	.word	0x2000852c

00018658 <nrfx_gpiote_output_configure>:
{
   18658:	b5f0      	push	{r4, r5, r6, r7, lr}
   1865a:	4604      	mov	r4, r0
   1865c:	4615      	mov	r5, r2
   1865e:	b085      	sub	sp, #20
    if (p_config)
   18660:	b319      	cbz	r1, 186aa <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   18662:	4e34      	ldr	r6, [pc, #208]	; (18734 <nrfx_gpiote_output_configure+0xdc>)
   18664:	f100 0708 	add.w	r7, r0, #8
   18668:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   1866c:	0793      	lsls	r3, r2, #30
   1866e:	d403      	bmi.n	18678 <nrfx_gpiote_output_configure+0x20>
   18670:	f7ff fed4 	bl	1841c <pin_in_use_by_te>
   18674:	2800      	cmp	r0, #0
   18676:	d15a      	bne.n	1872e <nrfx_gpiote_output_configure+0xd6>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   18678:	f012 0f1c 	tst.w	r2, #28
   1867c:	d002      	beq.n	18684 <nrfx_gpiote_output_configure+0x2c>
   1867e:	784b      	ldrb	r3, [r1, #1]
   18680:	2b01      	cmp	r3, #1
   18682:	d054      	beq.n	1872e <nrfx_gpiote_output_configure+0xd6>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   18684:	2301      	movs	r3, #1
   18686:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   1868a:	2300      	movs	r3, #0
   1868c:	1c4a      	adds	r2, r1, #1
   1868e:	e9cd 1300 	strd	r1, r3, [sp]
   18692:	4620      	mov	r0, r4
   18694:	1c8b      	adds	r3, r1, #2
   18696:	f10d 010f 	add.w	r1, sp, #15
   1869a:	f007 fe65 	bl	20368 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   1869e:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   186a2:	f043 0303 	orr.w	r3, r3, #3
   186a6:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
   186aa:	b915      	cbnz	r5, 186b2 <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
   186ac:	4822      	ldr	r0, [pc, #136]	; (18738 <nrfx_gpiote_output_configure+0xe0>)
}
   186ae:	b005      	add	sp, #20
   186b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   186b2:	4e20      	ldr	r6, [pc, #128]	; (18734 <nrfx_gpiote_output_configure+0xdc>)
   186b4:	f104 0708 	add.w	r7, r4, #8
   186b8:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   186bc:	0783      	lsls	r3, r0, #30
   186be:	d536      	bpl.n	1872e <nrfx_gpiote_output_configure+0xd6>
        uint32_t ch = p_task_config->task_ch;
   186c0:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   186c4:	2300      	movs	r3, #0
   186c6:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   186c8:	f020 0020 	bic.w	r0, r0, #32
   186cc:	0089      	lsls	r1, r1, #2
   186ce:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   186d2:	04c0      	lsls	r0, r0, #19
   186d4:	f501 313c 	add.w	r1, r1, #192512	; 0x2f000
   186d8:	0cc0      	lsrs	r0, r0, #19
   186da:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   186de:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
   186e2:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   186e6:	786a      	ldrb	r2, [r5, #1]
   186e8:	2a00      	cmp	r2, #0
   186ea:	d0df      	beq.n	186ac <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   186ec:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   186f0:	78ad      	ldrb	r5, [r5, #2]
   186f2:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   186f6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   186fa:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   186fe:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   18702:	0223      	lsls	r3, r4, #8
   18704:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   18708:	0412      	lsls	r2, r2, #16
   1870a:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1870e:	ea43 030e 	orr.w	r3, r3, lr
   18712:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   18714:	052a      	lsls	r2, r5, #20
   18716:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1871a:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1871e:	4313      	orrs	r3, r2
   18720:	f040 0020 	orr.w	r0, r0, #32
   18724:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   18728:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   1872c:	e7be      	b.n	186ac <nrfx_gpiote_output_configure+0x54>
{
   1872e:	4803      	ldr	r0, [pc, #12]	; (1873c <nrfx_gpiote_output_configure+0xe4>)
   18730:	e7bd      	b.n	186ae <nrfx_gpiote_output_configure+0x56>
   18732:	bf00      	nop
   18734:	200084b8 	.word	0x200084b8
   18738:	0bad0000 	.word	0x0bad0000
   1873c:	0bad0004 	.word	0x0bad0004

00018740 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   18740:	4b01      	ldr	r3, [pc, #4]	; (18748 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   18742:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   18746:	4770      	bx	lr
   18748:	200084b8 	.word	0x200084b8

0001874c <nrfx_gpiote_channel_get>:
{
   1874c:	b508      	push	{r3, lr}
   1874e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   18750:	f7ff fe64 	bl	1841c <pin_in_use_by_te>
   18754:	b138      	cbz	r0, 18766 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   18756:	4b05      	ldr	r3, [pc, #20]	; (1876c <nrfx_gpiote_channel_get+0x20>)
   18758:	3208      	adds	r2, #8
   1875a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
   1875e:	4804      	ldr	r0, [pc, #16]	; (18770 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   18760:	0b5b      	lsrs	r3, r3, #13
   18762:	700b      	strb	r3, [r1, #0]
}
   18764:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   18766:	4803      	ldr	r0, [pc, #12]	; (18774 <nrfx_gpiote_channel_get+0x28>)
   18768:	e7fc      	b.n	18764 <nrfx_gpiote_channel_get+0x18>
   1876a:	bf00      	nop
   1876c:	200084b8 	.word	0x200084b8
   18770:	0bad0000 	.word	0x0bad0000
   18774:	0bad0004 	.word	0x0bad0004

00018778 <nrfx_gpiote_init>:
{
   18778:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1877a:	4c0f      	ldr	r4, [pc, #60]	; (187b8 <nrfx_gpiote_init+0x40>)
   1877c:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   18780:	b9bd      	cbnz	r5, 187b2 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   18782:	2260      	movs	r2, #96	; 0x60
   18784:	4629      	mov	r1, r5
   18786:	f104 0010 	add.w	r0, r4, #16
   1878a:	f009 f98d 	bl	21aa8 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   1878e:	202f      	movs	r0, #47	; 0x2f
   18790:	f7f4 fffc 	bl	d78c <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   18794:	4b09      	ldr	r3, [pc, #36]	; (187bc <nrfx_gpiote_init+0x44>)
    return err_code;
   18796:	480a      	ldr	r0, [pc, #40]	; (187c0 <nrfx_gpiote_init+0x48>)
   18798:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   1879c:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   187a0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   187a4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   187a8:	2301      	movs	r3, #1
   187aa:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   187ae:	6763      	str	r3, [r4, #116]	; 0x74
}
   187b0:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   187b2:	4804      	ldr	r0, [pc, #16]	; (187c4 <nrfx_gpiote_init+0x4c>)
   187b4:	e7fc      	b.n	187b0 <nrfx_gpiote_init+0x38>
   187b6:	bf00      	nop
   187b8:	200084b8 	.word	0x200084b8
   187bc:	4002f000 	.word	0x4002f000
   187c0:	0bad0000 	.word	0x0bad0000
   187c4:	0bad0005 	.word	0x0bad0005

000187c8 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   187c8:	4b03      	ldr	r3, [pc, #12]	; (187d8 <nrfx_gpiote_is_init+0x10>)
   187ca:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   187ce:	3800      	subs	r0, #0
   187d0:	bf18      	it	ne
   187d2:	2001      	movne	r0, #1
   187d4:	4770      	bx	lr
   187d6:	bf00      	nop
   187d8:	200084b8 	.word	0x200084b8

000187dc <nrfx_gpiote_channel_free>:
{
   187dc:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   187de:	4801      	ldr	r0, [pc, #4]	; (187e4 <nrfx_gpiote_channel_free+0x8>)
   187e0:	f7ff bc48 	b.w	18074 <nrfx_flag32_free>
   187e4:	20008528 	.word	0x20008528

000187e8 <nrfx_gpiote_channel_alloc>:
{
   187e8:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   187ea:	4801      	ldr	r0, [pc, #4]	; (187f0 <nrfx_gpiote_channel_alloc+0x8>)
   187ec:	f7ff bc26 	b.w	1803c <nrfx_flag32_alloc>
   187f0:	20008528 	.word	0x20008528

000187f4 <nrfx_gpiote_trigger_enable>:
{
   187f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   187f6:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   187f8:	f7ff fe10 	bl	1841c <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   187fc:	4b1d      	ldr	r3, [pc, #116]	; (18874 <nrfx_gpiote_trigger_enable+0x80>)
   187fe:	f104 0208 	add.w	r2, r4, #8
   18802:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   18806:	b1d0      	cbz	r0, 1883e <nrfx_gpiote_trigger_enable+0x4a>
   18808:	f013 0502 	ands.w	r5, r3, #2
   1880c:	d117      	bne.n	1883e <nrfx_gpiote_trigger_enable+0x4a>
    return ((uint32_t)p_reg + event);
   1880e:	481a      	ldr	r0, [pc, #104]	; (18878 <nrfx_gpiote_trigger_enable+0x84>)
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   18810:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   18812:	009a      	lsls	r2, r3, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   18814:	5085      	str	r5, [r0, r2]
   18816:	5880      	ldr	r0, [r0, r2]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   18818:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1881c:	f502 323c 	add.w	r2, r2, #192512	; 0x2f000
   18820:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   18824:	f040 0001 	orr.w	r0, r0, #1
   18828:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   1882c:	b129      	cbz	r1, 1883a <nrfx_gpiote_trigger_enable+0x46>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   1882e:	2201      	movs	r2, #1
   18830:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   18834:	4a11      	ldr	r2, [pc, #68]	; (1887c <nrfx_gpiote_trigger_enable+0x88>)
   18836:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1883a:	b003      	add	sp, #12
   1883c:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1883e:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   18842:	2b04      	cmp	r3, #4
   18844:	d011      	beq.n	1886a <nrfx_gpiote_trigger_enable+0x76>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   18846:	2b05      	cmp	r3, #5
   18848:	d011      	beq.n	1886e <nrfx_gpiote_trigger_enable+0x7a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1884a:	a801      	add	r0, sp, #4
   1884c:	9401      	str	r4, [sp, #4]
   1884e:	f7ff fdd5 	bl	183fc <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   18852:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   18854:	6901      	ldr	r1, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   18856:	40d9      	lsrs	r1, r3
   18858:	f001 0101 	and.w	r1, r1, #1
   1885c:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1885e:	4620      	mov	r0, r4
}
   18860:	b003      	add	sp, #12
   18862:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   18866:	f007 bdc8 	b.w	203fa <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   1886a:	2103      	movs	r1, #3
   1886c:	e7f7      	b.n	1885e <nrfx_gpiote_trigger_enable+0x6a>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   1886e:	2102      	movs	r1, #2
   18870:	e7f5      	b.n	1885e <nrfx_gpiote_trigger_enable+0x6a>
   18872:	bf00      	nop
   18874:	200084b8 	.word	0x200084b8
   18878:	4002f100 	.word	0x4002f100
   1887c:	4002f000 	.word	0x4002f000

00018880 <nrfx_gpiote_trigger_disable>:
{
   18880:	b508      	push	{r3, lr}
   18882:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   18884:	f7ff fdca 	bl	1841c <pin_in_use_by_te>
   18888:	b1c0      	cbz	r0, 188bc <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1888a:	4b0f      	ldr	r3, [pc, #60]	; (188c8 <nrfx_gpiote_trigger_disable+0x48>)
   1888c:	f102 0108 	add.w	r1, r2, #8
   18890:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   18894:	0799      	lsls	r1, r3, #30
   18896:	d411      	bmi.n	188bc <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   18898:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1889a:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1889c:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   1889e:	490b      	ldr	r1, [pc, #44]	; (188cc <nrfx_gpiote_trigger_disable+0x4c>)
   188a0:	009b      	lsls	r3, r3, #2
   188a2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   188a6:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   188aa:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   188ae:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   188b2:	f022 0203 	bic.w	r2, r2, #3
   188b6:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   188ba:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   188bc:	2100      	movs	r1, #0
}
   188be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   188c2:	4610      	mov	r0, r2
   188c4:	f007 bd99 	b.w	203fa <nrf_gpio_cfg_sense_set>
   188c8:	200084b8 	.word	0x200084b8
   188cc:	4002f000 	.word	0x4002f000

000188d0 <nrfx_gpiote_pin_uninit>:
{
   188d0:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   188d2:	4b10      	ldr	r3, [pc, #64]	; (18914 <nrfx_gpiote_pin_uninit+0x44>)
   188d4:	f100 0208 	add.w	r2, r0, #8
   188d8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
   188dc:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   188de:	07db      	lsls	r3, r3, #31
   188e0:	d516      	bpl.n	18910 <nrfx_gpiote_pin_uninit+0x40>
    nrfx_gpiote_trigger_disable(pin);
   188e2:	f7ff ffcd 	bl	18880 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   188e6:	4620      	mov	r0, r4
   188e8:	f7ff fdea 	bl	184c0 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   188ec:	a801      	add	r0, sp, #4
   188ee:	9401      	str	r4, [sp, #4]
   188f0:	f7ff fd84 	bl	183fc <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   188f4:	9b01      	ldr	r3, [sp, #4]
   188f6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   188fa:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   188fe:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   18902:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
   18906:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_gpio_cfg(
   1890a:	4803      	ldr	r0, [pc, #12]	; (18918 <nrfx_gpiote_pin_uninit+0x48>)
}
   1890c:	b002      	add	sp, #8
   1890e:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   18910:	4802      	ldr	r0, [pc, #8]	; (1891c <nrfx_gpiote_pin_uninit+0x4c>)
   18912:	e7fb      	b.n	1890c <nrfx_gpiote_pin_uninit+0x3c>
   18914:	200084b8 	.word	0x200084b8
   18918:	0bad0000 	.word	0x0bad0000
   1891c:	0bad0004 	.word	0x0bad0004

00018920 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   18920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
   18924:	2600      	movs	r6, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   18926:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   18928:	4634      	mov	r4, r6
{
   1892a:	4b63      	ldr	r3, [pc, #396]	; (18ab8 <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
   1892c:	4863      	ldr	r0, [pc, #396]	; (18abc <nrfx_gpiote_irq_handler+0x19c>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1892e:	4964      	ldr	r1, [pc, #400]	; (18ac0 <nrfx_gpiote_irq_handler+0x1a0>)
{
   18930:	b087      	sub	sp, #28
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   18932:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   18934:	b135      	cbz	r5, 18944 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   18936:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   1893a:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1893c:	bf1e      	ittt	ne
   1893e:	601c      	strne	r4, [r3, #0]
   18940:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   18942:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   18944:	3304      	adds	r3, #4
   18946:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   18948:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1894c:	d1f1      	bne.n	18932 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1894e:	f8df a16c 	ldr.w	sl, [pc, #364]	; 18abc <nrfx_gpiote_irq_handler+0x19c>
   18952:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   18956:	2b00      	cmp	r3, #0
   18958:	f000 8091 	beq.w	18a7e <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
   1895c:	f8df 8164 	ldr.w	r8, [pc, #356]	; 18ac4 <nrfx_gpiote_irq_handler+0x1a4>
   18960:	f8d8 3020 	ldr.w	r3, [r8, #32]
   18964:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   18966:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
   1896a:	4b57      	ldr	r3, [pc, #348]	; (18ac8 <nrfx_gpiote_irq_handler+0x1a8>)
   1896c:	6a1a      	ldr	r2, [r3, #32]
   1896e:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   18970:	621a      	str	r2, [r3, #32]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   18972:	f04f 0900 	mov.w	r9, #0
            while (latch[i])
   18976:	f10d 0b10 	add.w	fp, sp, #16
   1897a:	ea4f 1349 	mov.w	r3, r9, lsl #5
   1897e:	9300      	str	r3, [sp, #0]
   18980:	e048      	b.n	18a14 <nrfx_gpiote_irq_handler+0xf4>
                uint32_t pin = NRF_CTZ(latch[i]);
   18982:	fa94 f4a4 	rbit	r4, r4
   18986:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   1898a:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1898c:	4a4f      	ldr	r2, [pc, #316]	; (18acc <nrfx_gpiote_irq_handler+0x1ac>)
                pin += 32 * i;
   1898e:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   18990:	f104 0308 	add.w	r3, r4, #8
   18994:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   18998:	2301      	movs	r3, #1
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   1899a:	08e0      	lsrs	r0, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
   1899c:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   189a0:	fa03 f202 	lsl.w	r2, r3, r2
   189a4:	f81b 3000 	ldrb.w	r3, [fp, r0]
   189a8:	9403      	str	r4, [sp, #12]
   189aa:	ea23 0302 	bic.w	r3, r3, r2
   189ae:	f80b 3000 	strb.w	r3, [fp, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   189b2:	a803      	add	r0, sp, #12
   189b4:	f7ff fd22 	bl	183fc <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   189b8:	9b03      	ldr	r3, [sp, #12]
   189ba:	08b9      	lsrs	r1, r7, #2
   189bc:	3380      	adds	r3, #128	; 0x80
   189be:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   189c2:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
   189c6:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   189c8:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   189ca:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
   189ce:	d52b      	bpl.n	18a28 <nrfx_gpiote_irq_handler+0x108>
        call_handler(pin, trigger);
   189d0:	4620      	mov	r0, r4
   189d2:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   189d4:	b2dd      	uxtb	r5, r3
   189d6:	f7ff fd2b 	bl	18430 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   189da:	a803      	add	r0, sp, #12
   189dc:	9403      	str	r4, [sp, #12]
   189de:	f7ff fd0d 	bl	183fc <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   189e2:	9b03      	ldr	r3, [sp, #12]
   189e4:	3380      	adds	r3, #128	; 0x80
   189e6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   189ea:	f3c3 4301 	ubfx	r3, r3, #16, #2
   189ee:	429d      	cmp	r5, r3
   189f0:	d107      	bne.n	18a02 <nrfx_gpiote_irq_handler+0xe2>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   189f2:	2100      	movs	r1, #0
   189f4:	4620      	mov	r0, r4
   189f6:	f007 fd00 	bl	203fa <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   189fa:	4629      	mov	r1, r5
   189fc:	4620      	mov	r0, r4
   189fe:	f007 fcfc 	bl	203fa <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   18a02:	a803      	add	r0, sp, #12
   18a04:	9403      	str	r4, [sp, #12]
   18a06:	f7ff fcf9 	bl	183fc <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   18a0a:	2201      	movs	r2, #1
   18a0c:	9b03      	ldr	r3, [sp, #12]
   18a0e:	fa02 f303 	lsl.w	r3, r2, r3
   18a12:	6203      	str	r3, [r0, #32]
            while (latch[i])
   18a14:	f85b 4029 	ldr.w	r4, [fp, r9, lsl #2]
   18a18:	2c00      	cmp	r4, #0
   18a1a:	d1b2      	bne.n	18982 <nrfx_gpiote_irq_handler+0x62>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   18a1c:	f1b9 0f00 	cmp.w	r9, #0
   18a20:	d11d      	bne.n	18a5e <nrfx_gpiote_irq_handler+0x13e>
   18a22:	f04f 0901 	mov.w	r9, #1
   18a26:	e7a8      	b.n	1897a <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   18a28:	2b02      	cmp	r3, #2
   18a2a:	d10c      	bne.n	18a46 <nrfx_gpiote_irq_handler+0x126>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   18a2c:	2103      	movs	r1, #3
   18a2e:	4620      	mov	r0, r4
   18a30:	f007 fce3 	bl	203fa <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   18a34:	f005 0305 	and.w	r3, r5, #5
   18a38:	2b01      	cmp	r3, #1
   18a3a:	d1e2      	bne.n	18a02 <nrfx_gpiote_irq_handler+0xe2>
            call_handler(pin, trigger);
   18a3c:	4639      	mov	r1, r7
   18a3e:	4620      	mov	r0, r4
   18a40:	f7ff fcf6 	bl	18430 <call_handler>
   18a44:	e7dd      	b.n	18a02 <nrfx_gpiote_irq_handler+0xe2>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   18a46:	2102      	movs	r1, #2
   18a48:	4620      	mov	r0, r4
   18a4a:	9301      	str	r3, [sp, #4]
   18a4c:	f007 fcd5 	bl	203fa <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   18a50:	2d03      	cmp	r5, #3
   18a52:	d0f3      	beq.n	18a3c <nrfx_gpiote_irq_handler+0x11c>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   18a54:	9b01      	ldr	r3, [sp, #4]
   18a56:	2b03      	cmp	r3, #3
   18a58:	d1d3      	bne.n	18a02 <nrfx_gpiote_irq_handler+0xe2>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   18a5a:	2d02      	cmp	r5, #2
   18a5c:	e7ed      	b.n	18a3a <nrfx_gpiote_irq_handler+0x11a>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   18a5e:	f8ca 417c 	str.w	r4, [sl, #380]	; 0x17c
   18a62:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   18a66:	f8d8 3020 	ldr.w	r3, [r8, #32]
   18a6a:	4917      	ldr	r1, [pc, #92]	; (18ac8 <nrfx_gpiote_irq_handler+0x1a8>)
   18a6c:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   18a6e:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
   18a72:	6a0a      	ldr	r2, [r1, #32]
        if (latch[port_idx])
   18a74:	4313      	orrs	r3, r2
   18a76:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   18a78:	620a      	str	r2, [r1, #32]
   18a7a:	f47f af7a 	bne.w	18972 <nrfx_gpiote_irq_handler+0x52>
        mask &= ~NRFX_BIT(ch);
   18a7e:	2401      	movs	r4, #1
    while (mask)
   18a80:	b916      	cbnz	r6, 18a88 <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   18a82:	b007      	add	sp, #28
   18a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   18a88:	fa96 f3a6 	rbit	r3, r6
   18a8c:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   18a90:	fa04 f203 	lsl.w	r2, r4, r3
   18a94:	009b      	lsls	r3, r3, #2
   18a96:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   18a9a:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   18a9e:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   18aa2:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   18aa6:	f3c0 2005 	ubfx	r0, r0, #8, #6
   18aaa:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
   18aae:	ea26 0602 	bic.w	r6, r6, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   18ab2:	f7ff fcbd 	bl	18430 <call_handler>
   18ab6:	e7e3      	b.n	18a80 <nrfx_gpiote_irq_handler+0x160>
   18ab8:	4002f100 	.word	0x4002f100
   18abc:	4002f000 	.word	0x4002f000
   18ac0:	4002f120 	.word	0x4002f120
   18ac4:	40842500 	.word	0x40842500
   18ac8:	40842800 	.word	0x40842800
   18acc:	200084b8 	.word	0x200084b8

00018ad0 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   18ad0:	b570      	push	{r4, r5, r6, lr}
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   18ad2:	4c08      	ldr	r4, [pc, #32]	; (18af4 <nrfx_ipc_init+0x24>)
{
   18ad4:	460e      	mov	r6, r1
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   18ad6:	7923      	ldrb	r3, [r4, #4]
{
   18ad8:	4615      	mov	r5, r2
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   18ada:	b943      	cbnz	r3, 18aee <nrfx_ipc_init+0x1e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   18adc:	202a      	movs	r0, #42	; 0x2a
   18ade:	f7f4 fe55 	bl	d78c <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   18ae2:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   18ae4:	4804      	ldr	r0, [pc, #16]	; (18af8 <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   18ae6:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   18ae8:	6026      	str	r6, [r4, #0]
    m_ipc_cb.p_context = p_context;
   18aea:	60a5      	str	r5, [r4, #8]
}
   18aec:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   18aee:	4803      	ldr	r0, [pc, #12]	; (18afc <nrfx_ipc_init+0x2c>)
   18af0:	e7fc      	b.n	18aec <nrfx_ipc_init+0x1c>
   18af2:	bf00      	nop
   18af4:	2000a114 	.word	0x2000a114
   18af8:	0bad0000 	.word	0x0bad0000
   18afc:	0bad000c 	.word	0x0bad000c

00018b00 <nrfx_ipc_config_load>:
{
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
   18b00:	2300      	movs	r3, #0
{
   18b02:	b530      	push	{r4, r5, lr}
    p_reg->SEND_CNF[index] = channels_mask;
   18b04:	4a0d      	ldr	r2, [pc, #52]	; (18b3c <nrfx_ipc_config_load+0x3c>)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   18b06:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   18b0a:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   18b0e:	3301      	adds	r3, #1
   18b10:	2b10      	cmp	r3, #16
   18b12:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   18b16:	d1f6      	bne.n	18b06 <nrfx_ipc_config_load+0x6>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   18b18:	2300      	movs	r3, #0
    p_reg->RECEIVE_CNF[index] = channels_mask;
   18b1a:	4a08      	ldr	r2, [pc, #32]	; (18b3c <nrfx_ipc_config_load+0x3c>)
   18b1c:	f100 013c 	add.w	r1, r0, #60	; 0x3c
   18b20:	f503 74b2 	add.w	r4, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   18b24:	f851 5f04 	ldr.w	r5, [r1, #4]!
    for (i = 0; i < IPC_CONF_NUM; ++i)
   18b28:	3301      	adds	r3, #1
   18b2a:	2b10      	cmp	r3, #16
   18b2c:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   18b30:	d1f6      	bne.n	18b20 <nrfx_ipc_config_load+0x20>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   18b32:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
    p_reg->INTENSET = mask;
   18b36:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   18b3a:	bd30      	pop	{r4, r5, pc}
   18b3c:	4002a000 	.word	0x4002a000

00018b40 <nrfx_ipc_receive_event_enable>:
}

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   18b40:	2301      	movs	r3, #1
   18b42:	4a02      	ldr	r2, [pc, #8]	; (18b4c <nrfx_ipc_receive_event_enable+0xc>)
   18b44:	4083      	lsls	r3, r0
   18b46:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   18b4a:	4770      	bx	lr
   18b4c:	4002a000 	.word	0x4002a000

00018b50 <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   18b50:	2301      	movs	r3, #1
    p_reg->INTENCLR = mask;
   18b52:	4a02      	ldr	r2, [pc, #8]	; (18b5c <nrfx_ipc_receive_event_disable+0xc>)
   18b54:	4083      	lsls	r3, r0
   18b56:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   18b5a:	4770      	bx	lr
   18b5c:	4002a000 	.word	0x4002a000

00018b60 <nrfx_ipc_irq_handler>:
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   18b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t bitmask = events_map;

    while (bitmask)
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
   18b62:	2601      	movs	r6, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18b64:	2700      	movs	r7, #0
    return p_reg->INTPEND;
   18b66:	4b0b      	ldr	r3, [pc, #44]	; (18b94 <nrfx_ipc_irq_handler+0x34>)
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
#if NRFX_CHECK(NRFX_CONFIG_API_VER_2_10)
        if (m_ipc_cb.handler)
   18b68:	4d0b      	ldr	r5, [pc, #44]	; (18b98 <nrfx_ipc_irq_handler+0x38>)
   18b6a:	f8d3 430c 	ldr.w	r4, [r3, #780]	; 0x30c
    while (bitmask)
   18b6e:	b904      	cbnz	r4, 18b72 <nrfx_ipc_irq_handler+0x12>
    if (m_ipc_cb.handler)
    {
        m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
#endif
    }
}
   18b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t event_idx = NRF_CTZ(bitmask);
   18b72:	fa94 f0a4 	rbit	r0, r4
   18b76:	fab0 f080 	clz	r0, r0
        bitmask &= ~(1UL << event_idx);
   18b7a:	fa06 f300 	lsl.w	r3, r6, r0
   18b7e:	ea24 0403 	bic.w	r4, r4, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18b82:	4b06      	ldr	r3, [pc, #24]	; (18b9c <nrfx_ipc_irq_handler+0x3c>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   18b84:	0082      	lsls	r2, r0, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18b86:	509f      	str	r7, [r3, r2]
        if (m_ipc_cb.handler)
   18b88:	682b      	ldr	r3, [r5, #0]
   18b8a:	2b00      	cmp	r3, #0
   18b8c:	d0ef      	beq.n	18b6e <nrfx_ipc_irq_handler+0xe>
            m_ipc_cb.handler(event_idx, m_ipc_cb.p_context);
   18b8e:	68a9      	ldr	r1, [r5, #8]
   18b90:	4798      	blx	r3
   18b92:	e7ec      	b.n	18b6e <nrfx_ipc_irq_handler+0xe>
   18b94:	4002a000 	.word	0x4002a000
   18b98:	2000a114 	.word	0x2000a114
   18b9c:	4002a100 	.word	0x4002a100

00018ba0 <metal_generic_dev_open>:
	return 0;
}

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
   18ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18ba4:	460e      	mov	r6, r1
   18ba6:	4617      	mov	r7, r2
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
   18ba8:	4d0c      	ldr	r5, [pc, #48]	; (18bdc <metal_generic_dev_open+0x3c>)
   18baa:	f855 4f18 	ldr.w	r4, [r5, #24]!
   18bae:	42ac      	cmp	r4, r5
   18bb0:	d103      	bne.n	18bba <metal_generic_dev_open+0x1a>
			return metal_generic_dev_sys_open(dev);
		}
	}

	return -ENODEV;
}
   18bb2:	f06f 0012 	mvn.w	r0, #18
   18bb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strcmp(dev->name, dev_name) == 0) {
   18bba:	4631      	mov	r1, r6
   18bbc:	f854 0c44 	ldr.w	r0, [r4, #-68]
		dev = metal_container_of(node, struct metal_device, node);
   18bc0:	f1a4 0844 	sub.w	r8, r4, #68	; 0x44
		if (strcmp(dev->name, dev_name) == 0) {
   18bc4:	f7f0 fbb8 	bl	9338 <strcmp>
   18bc8:	b930      	cbnz	r0, 18bd8 <metal_generic_dev_open+0x38>
			*device = dev;
   18bca:	f8c7 8000 	str.w	r8, [r7]
			return metal_generic_dev_sys_open(dev);
   18bce:	4640      	mov	r0, r8
}
   18bd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			return metal_generic_dev_sys_open(dev);
   18bd4:	f007 bd1f 	b.w	20616 <metal_generic_dev_sys_open>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
   18bd8:	6824      	ldr	r4, [r4, #0]
   18bda:	e7e8      	b.n	18bae <metal_generic_dev_open+0xe>
   18bdc:	2000a120 	.word	0x2000a120

00018be0 <metal_bus_unregister>:
{
   18be0:	b510      	push	{r4, lr}
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
	node->next->prev = node->prev;
   18be2:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
   18be6:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   18be8:	6a41      	ldr	r1, [r0, #36]	; 0x24
	metal_list_del(&bus->node);
   18bea:	f100 0324 	add.w	r3, r0, #36	; 0x24
   18bee:	6011      	str	r1, [r2, #0]
	node->prev = node;
	node->next = node;
   18bf0:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
	if (bus->ops.bus_close)
   18bf4:	6843      	ldr	r3, [r0, #4]
{
   18bf6:	4604      	mov	r4, r0
	if (bus->ops.bus_close)
   18bf8:	b103      	cbz	r3, 18bfc <metal_bus_unregister+0x1c>
		bus->ops.bus_close(bus);
   18bfa:	4798      	blx	r3
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
   18bfc:	4b05      	ldr	r3, [pc, #20]	; (18c14 <metal_bus_unregister+0x34>)
   18bfe:	781a      	ldrb	r2, [r3, #0]
   18c00:	2a06      	cmp	r2, #6
   18c02:	d905      	bls.n	18c10 <metal_bus_unregister+0x30>
   18c04:	685b      	ldr	r3, [r3, #4]
   18c06:	b11b      	cbz	r3, 18c10 <metal_bus_unregister+0x30>
   18c08:	2007      	movs	r0, #7
   18c0a:	6822      	ldr	r2, [r4, #0]
   18c0c:	4902      	ldr	r1, [pc, #8]	; (18c18 <metal_bus_unregister+0x38>)
   18c0e:	4798      	blx	r3
}
   18c10:	2000      	movs	r0, #0
   18c12:	bd10      	pop	{r4, pc}
   18c14:	2000a120 	.word	0x2000a120
   18c18:	00026ab2 	.word	0x00026ab2

00018c1c <metal_bus_find>:
{
   18c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18c20:	4607      	mov	r7, r0
   18c22:	460d      	mov	r5, r1
	metal_list_for_each(&_metal.common.bus_list, node) {
   18c24:	4e0b      	ldr	r6, [pc, #44]	; (18c54 <metal_bus_find+0x38>)
   18c26:	f856 4f08 	ldr.w	r4, [r6, #8]!
   18c2a:	42b4      	cmp	r4, r6
   18c2c:	d102      	bne.n	18c34 <metal_bus_find+0x18>
	return -ENOENT;
   18c2e:	f06f 0001 	mvn.w	r0, #1
   18c32:	e00a      	b.n	18c4a <metal_bus_find+0x2e>
		if (strcmp(bus->name, name) == 0 && result) {
   18c34:	4639      	mov	r1, r7
   18c36:	f854 0c24 	ldr.w	r0, [r4, #-36]
		bus = metal_container_of(node, struct metal_bus, node);
   18c3a:	f1a4 0824 	sub.w	r8, r4, #36	; 0x24
		if (strcmp(bus->name, name) == 0 && result) {
   18c3e:	f7f0 fb7b 	bl	9338 <strcmp>
   18c42:	b920      	cbnz	r0, 18c4e <metal_bus_find+0x32>
   18c44:	b11d      	cbz	r5, 18c4e <metal_bus_find+0x32>
			*result = bus;
   18c46:	f8c5 8000 	str.w	r8, [r5]
}
   18c4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	metal_list_for_each(&_metal.common.bus_list, node) {
   18c4e:	6824      	ldr	r4, [r4, #0]
   18c50:	e7eb      	b.n	18c2a <metal_bus_find+0xe>
   18c52:	bf00      	nop
   18c54:	2000a120 	.word	0x2000a120

00018c58 <metal_bus_register>:
{
   18c58:	b510      	push	{r4, lr}
	if (!bus || !bus->name || !strlen(bus->name))
   18c5a:	4604      	mov	r4, r0
   18c5c:	b910      	cbnz	r0, 18c64 <metal_bus_register+0xc>
		return -EINVAL;
   18c5e:	f06f 0015 	mvn.w	r0, #21
}
   18c62:	bd10      	pop	{r4, pc}
	if (!bus || !bus->name || !strlen(bus->name))
   18c64:	6800      	ldr	r0, [r0, #0]
   18c66:	2800      	cmp	r0, #0
   18c68:	d0f9      	beq.n	18c5e <metal_bus_register+0x6>
   18c6a:	f7f0 fb6f 	bl	934c <strlen>
   18c6e:	2800      	cmp	r0, #0
   18c70:	d0f5      	beq.n	18c5e <metal_bus_register+0x6>
	if (metal_bus_find(bus->name, NULL) == 0)
   18c72:	2100      	movs	r1, #0
   18c74:	6820      	ldr	r0, [r4, #0]
   18c76:	f7ff ffd1 	bl	18c1c <metal_bus_find>
   18c7a:	b1c8      	cbz	r0, 18cb0 <metal_bus_register+0x58>
	metal_list_init(&bus->devices);
   18c7c:	f104 031c 	add.w	r3, r4, #28
	list->next = list;
   18c80:	e9c4 3307 	strd	r3, r3, [r4, #28]
	new_node->prev = node->prev;
   18c84:	4b0c      	ldr	r3, [pc, #48]	; (18cb8 <metal_bus_register+0x60>)
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
   18c86:	f104 0224 	add.w	r2, r4, #36	; 0x24
   18c8a:	68d9      	ldr	r1, [r3, #12]
	new_node->next = node;
   18c8c:	f103 0008 	add.w	r0, r3, #8
	new_node->next->prev = new_node;
   18c90:	60da      	str	r2, [r3, #12]
	new_node->prev = node->prev;
   18c92:	62a1      	str	r1, [r4, #40]	; 0x28
	new_node->next = node;
   18c94:	6260      	str	r0, [r4, #36]	; 0x24
	new_node->prev->next = new_node;
   18c96:	600a      	str	r2, [r1, #0]
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   18c98:	781a      	ldrb	r2, [r3, #0]
   18c9a:	2a06      	cmp	r2, #6
   18c9c:	d901      	bls.n	18ca2 <metal_bus_register+0x4a>
   18c9e:	685b      	ldr	r3, [r3, #4]
   18ca0:	b90b      	cbnz	r3, 18ca6 <metal_bus_register+0x4e>
	return 0;
   18ca2:	2000      	movs	r0, #0
   18ca4:	e7dd      	b.n	18c62 <metal_bus_register+0xa>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   18ca6:	2007      	movs	r0, #7
   18ca8:	6822      	ldr	r2, [r4, #0]
   18caa:	4904      	ldr	r1, [pc, #16]	; (18cbc <metal_bus_register+0x64>)
   18cac:	4798      	blx	r3
   18cae:	e7f8      	b.n	18ca2 <metal_bus_register+0x4a>
		return -EEXIST;
   18cb0:	f06f 0010 	mvn.w	r0, #16
   18cb4:	e7d5      	b.n	18c62 <metal_bus_register+0xa>
   18cb6:	bf00      	nop
   18cb8:	2000a120 	.word	0x2000a120
   18cbc:	00026ab4 	.word	0x00026ab4

00018cc0 <metal_register_generic_device>:
{
   18cc0:	b510      	push	{r4, lr}
   18cc2:	4604      	mov	r4, r0
	if (!device->name || !strlen(device->name) ||
   18cc4:	6800      	ldr	r0, [r0, #0]
   18cc6:	b910      	cbnz	r0, 18cce <metal_register_generic_device+0xe>
		return -EINVAL;
   18cc8:	f06f 0015 	mvn.w	r0, #21
}
   18ccc:	bd10      	pop	{r4, pc}
	if (!device->name || !strlen(device->name) ||
   18cce:	f7f0 fb3d 	bl	934c <strlen>
   18cd2:	2800      	cmp	r0, #0
   18cd4:	d0f8      	beq.n	18cc8 <metal_register_generic_device+0x8>
   18cd6:	68a3      	ldr	r3, [r4, #8]
   18cd8:	2b01      	cmp	r3, #1
   18cda:	d8f5      	bhi.n	18cc8 <metal_register_generic_device+0x8>
	device->bus = &metal_generic_bus;
   18cdc:	4b06      	ldr	r3, [pc, #24]	; (18cf8 <metal_register_generic_device+0x38>)
	metal_list_add_tail(&_metal.common.generic_device_list,
   18cde:	f104 0144 	add.w	r1, r4, #68	; 0x44
	device->bus = &metal_generic_bus;
   18ce2:	6063      	str	r3, [r4, #4]
	new_node->prev = node->prev;
   18ce4:	4b05      	ldr	r3, [pc, #20]	; (18cfc <metal_register_generic_device+0x3c>)
   18ce6:	69da      	ldr	r2, [r3, #28]
	new_node->next = node;
   18ce8:	f103 0018 	add.w	r0, r3, #24
   18cec:	6460      	str	r0, [r4, #68]	; 0x44
	new_node->prev = node->prev;
   18cee:	64a2      	str	r2, [r4, #72]	; 0x48
	new_node->next->prev = new_node;
   18cf0:	61d9      	str	r1, [r3, #28]
	return 0;
   18cf2:	2000      	movs	r0, #0
	new_node->prev->next = new_node;
   18cf4:	6011      	str	r1, [r2, #0]
}
   18cf6:	e7e9      	b.n	18ccc <metal_register_generic_device+0xc>
   18cf8:	20008534 	.word	0x20008534
   18cfc:	2000a120 	.word	0x2000a120

00018d00 <metal_init>:

int metal_init(const struct metal_init_params *params)
{
	int error = 0;

	memset(&_metal, 0, sizeof(_metal));
   18d00:	4b0e      	ldr	r3, [pc, #56]	; (18d3c <metal_init+0x3c>)
{
   18d02:	b510      	push	{r4, lr}
   18d04:	4604      	mov	r4, r0
	memset(&_metal, 0, sizeof(_metal));
   18d06:	2220      	movs	r2, #32
   18d08:	2100      	movs	r1, #0
   18d0a:	4618      	mov	r0, r3
   18d0c:	f008 fecc 	bl	21aa8 <memset>

	_metal.common.log_handler   = params->log_handler;
   18d10:	6822      	ldr	r2, [r4, #0]
   18d12:	6042      	str	r2, [r0, #4]
	_metal.common.log_level     = params->log_level;
   18d14:	4602      	mov	r2, r0
   18d16:	7921      	ldrb	r1, [r4, #4]
   18d18:	f802 1b08 	strb.w	r1, [r2], #8
	list->next = list;
   18d1c:	e9c0 2202 	strd	r2, r2, [r0, #8]
	list->prev = list;
   18d20:	f100 0210 	add.w	r2, r0, #16
	list->next = list;
   18d24:	e9c0 2204 	strd	r2, r2, [r0, #16]
	list->prev = list;
   18d28:	f100 0218 	add.w	r2, r0, #24
	list->next = list;
   18d2c:	e9c0 2206 	strd	r2, r2, [r0, #24]

	metal_list_init(&_metal.common.bus_list);
	metal_list_init(&_metal.common.generic_shmem_list);
	metal_list_init(&_metal.common.generic_device_list);

	error = metal_sys_init(params);
   18d30:	4620      	mov	r0, r4
	if (error)
		return error;

	return error;
}
   18d32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	error = metal_sys_init(params);
   18d36:	f000 b80f 	b.w	18d58 <metal_sys_init>
   18d3a:	bf00      	nop
   18d3c:	2000a120 	.word	0x2000a120

00018d40 <metal_finish>:

void metal_finish(void)
{
   18d40:	b508      	push	{r3, lr}
	metal_sys_finish();
   18d42:	f000 f811 	bl	18d68 <metal_sys_finish>
	memset(&_metal, 0, sizeof(_metal));
}
   18d46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	memset(&_metal, 0, sizeof(_metal));
   18d4a:	2220      	movs	r2, #32
   18d4c:	2100      	movs	r1, #0
   18d4e:	4801      	ldr	r0, [pc, #4]	; (18d54 <metal_finish+0x14>)
   18d50:	f008 beaa 	b.w	21aa8 <memset>
   18d54:	2000a120 	.word	0x2000a120

00018d58 <metal_sys_init>:
#include <metal/utilities.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
   18d58:	b508      	push	{r3, lr}
	metal_bus_register(&metal_generic_bus);
   18d5a:	4802      	ldr	r0, [pc, #8]	; (18d64 <metal_sys_init+0xc>)
   18d5c:	f7ff ff7c 	bl	18c58 <metal_bus_register>
	return 0;
}
   18d60:	2000      	movs	r0, #0
   18d62:	bd08      	pop	{r3, pc}
   18d64:	20008534 	.word	0x20008534

00018d68 <metal_sys_finish>:

void metal_sys_finish(void)
{
	metal_bus_unregister(&metal_generic_bus);
   18d68:	4801      	ldr	r0, [pc, #4]	; (18d70 <metal_sys_finish+0x8>)
   18d6a:	f7ff bf39 	b.w	18be0 <metal_bus_unregister>
   18d6e:	bf00      	nop
   18d70:	20008534 	.word	0x20008534

00018d74 <metal_zephyr_log_handler>:
	"metal: debug:     ",
};

void metal_zephyr_log_handler(enum metal_log_level level,
			      const char *format, ...)
{
   18d74:	b40e      	push	{r1, r2, r3}
	va_list args;

	if (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG)
   18d76:	1e43      	subs	r3, r0, #1
		level = METAL_LOG_EMERGENCY;
   18d78:	2b06      	cmp	r3, #6
{
   18d7a:	b533      	push	{r0, r1, r4, r5, lr}
		level = METAL_LOG_EMERGENCY;
   18d7c:	bf88      	it	hi
   18d7e:	2000      	movhi	r0, #0
	printk("%s", level_strs[level]);
   18d80:	4b09      	ldr	r3, [pc, #36]	; (18da8 <metal_zephyr_log_handler+0x34>)
{
   18d82:	ac05      	add	r4, sp, #20
   18d84:	f854 5b04 	ldr.w	r5, [r4], #4
	printk("%s", level_strs[level]);
   18d88:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   18d8c:	4807      	ldr	r0, [pc, #28]	; (18dac <metal_zephyr_log_handler+0x38>)
   18d8e:	f003 faf6 	bl	1c37e <printk>

	va_start(args, format);
	vprintk(format, args);
   18d92:	4621      	mov	r1, r4
   18d94:	4628      	mov	r0, r5
	va_start(args, format);
   18d96:	9401      	str	r4, [sp, #4]
	vprintk(format, args);
   18d98:	f7f2 f9f8 	bl	b18c <vprintk>
	va_end(args);
}
   18d9c:	b002      	add	sp, #8
   18d9e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   18da2:	b003      	add	sp, #12
   18da4:	4770      	bx	lr
   18da6:	bf00      	nop
   18da8:	00023340 	.word	0x00023340
   18dac:	000248ac 	.word	0x000248ac

00018db0 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
   18db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18db4:	469a      	mov	sl, r3
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
	if (nvqs > num_vrings)
   18db6:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   18db8:	4606      	mov	r6, r0
	if (nvqs > num_vrings)
   18dba:	4293      	cmp	r3, r2
{
   18dbc:	4617      	mov	r7, r2
   18dbe:	b087      	sub	sp, #28
	if (nvqs > num_vrings)
   18dc0:	d341      	bcc.n	18e46 <virtio_create_virtqueues+0x96>
		return ERROR_VQUEUE_INVLD_PARAM;
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
   18dc2:	2500      	movs	r5, #0
		vring_info = &vdev->vrings_info[i];
   18dc4:	f04f 0b18 	mov.w	fp, #24
	for (i = 0; i < nvqs; i++) {
   18dc8:	42bd      	cmp	r5, r7
   18dca:	d103      	bne.n	18dd4 <virtio_create_virtqueues+0x24>
				       callbacks[i], vdev->func->notify,
				       vring_info->vq);
		if (ret)
			return ret;
	}
	return 0;
   18dcc:	2000      	movs	r0, #0
}
   18dce:	b007      	add	sp, #28
   18dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		vring_info = &vdev->vrings_info[i];
   18dd4:	fb0b f805 	mul.w	r8, fp, r5
   18dd8:	f8d6 902c 	ldr.w	r9, [r6, #44]	; 0x2c
		if (vdev->role == VIRTIO_DEV_DRIVER) {
   18ddc:	69b2      	ldr	r2, [r6, #24]
		vring_info = &vdev->vrings_info[i];
   18dde:	eb09 0408 	add.w	r4, r9, r8
		vring_alloc = &vring_info->info;
   18de2:	1d23      	adds	r3, r4, #4
   18de4:	9305      	str	r3, [sp, #20]
		if (vdev->role == VIRTIO_DEV_DRIVER) {
   18de6:	b9ca      	cbnz	r2, 18e1c <virtio_create_virtqueues+0x6c>
			struct metal_io_region *io = vring_info->io;
   18de8:	6960      	ldr	r0, [r4, #20]
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   18dea:	6861      	ldr	r1, [r4, #4]
   18dec:	6803      	ldr	r3, [r0, #0]
			metal_io_block_set(io, offset, 0,
   18dee:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
   18df2:	1ac9      	subs	r1, r1, r3
						      vring_alloc->align));
   18df4:	68a3      	ldr	r3, [r4, #8]
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
   18df6:	f10c 0e03 	add.w	lr, ip, #3
	size = (size + align - 1) & ~(align - 1);
   18dfa:	1e5c      	subs	r4, r3, #1
   18dfc:	eb04 140c 	add.w	r4, r4, ip, lsl #4
   18e00:	425b      	negs	r3, r3
   18e02:	eb04 044e 	add.w	r4, r4, lr, lsl #1
   18e06:	401c      	ands	r4, r3
	size += sizeof(struct vring_used) +
   18e08:	eb04 03cc 	add.w	r3, r4, ip, lsl #3
			metal_io_block_set(io, offset, 0,
   18e0c:	6884      	ldr	r4, [r0, #8]
   18e0e:	3306      	adds	r3, #6
   18e10:	42a1      	cmp	r1, r4
   18e12:	bf28      	it	cs
   18e14:	f04f 31ff 	movcs.w	r1, #4294967295
   18e18:	f007 fbc9 	bl	205ae <metal_io_block_set>
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   18e1c:	f859 3008 	ldr.w	r3, [r9, r8]
   18e20:	4630      	mov	r0, r6
   18e22:	9302      	str	r3, [sp, #8]
				       callbacks[i], vdev->func->notify,
   18e24:	6a33      	ldr	r3, [r6, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   18e26:	b2a9      	uxth	r1, r5
   18e28:	6a1b      	ldr	r3, [r3, #32]
   18e2a:	9301      	str	r3, [sp, #4]
   18e2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   18e2e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   18e32:	9300      	str	r3, [sp, #0]
   18e34:	f85a 2025 	ldr.w	r2, [sl, r5, lsl #2]
   18e38:	9b05      	ldr	r3, [sp, #20]
   18e3a:	f007 fc0a 	bl	20652 <virtqueue_create>
		if (ret)
   18e3e:	2800      	cmp	r0, #0
   18e40:	d1c5      	bne.n	18dce <virtio_create_virtqueues+0x1e>
	for (i = 0; i < nvqs; i++) {
   18e42:	3501      	adds	r5, #1
   18e44:	e7c0      	b.n	18dc8 <virtio_create_virtqueues+0x18>
		return ERROR_VQUEUE_INVLD_PARAM;
   18e46:	4801      	ldr	r0, [pc, #4]	; (18e4c <virtio_create_virtqueues+0x9c>)
   18e48:	e7c1      	b.n	18dce <virtio_create_virtqueues+0x1e>
   18e4a:	bf00      	nop
   18e4c:	fffff440 	.word	0xfffff440

00018e50 <virtqueue_free>:
 *
 * @param vq        - Pointer to VirtIO queue control block
 *
 */
void virtqueue_free(struct virtqueue *vq)
{
   18e50:	b510      	push	{r4, lr}
	if (vq) {
   18e52:	4604      	mov	r4, r0
   18e54:	b190      	cbz	r0, 18e7c <virtqueue_free+0x2c>
		if (vq->vq_free_cnt != vq->vq_nentries) {
   18e56:	8c82      	ldrh	r2, [r0, #36]	; 0x24
   18e58:	8943      	ldrh	r3, [r0, #10]
   18e5a:	429a      	cmp	r2, r3
   18e5c:	d009      	beq.n	18e72 <virtqueue_free+0x22>
			metal_log(METAL_LOG_WARNING,
   18e5e:	4b08      	ldr	r3, [pc, #32]	; (18e80 <virtqueue_free+0x30>)
   18e60:	781a      	ldrb	r2, [r3, #0]
   18e62:	2a03      	cmp	r2, #3
   18e64:	d905      	bls.n	18e72 <virtqueue_free+0x22>
   18e66:	685b      	ldr	r3, [r3, #4]
   18e68:	b11b      	cbz	r3, 18e72 <virtqueue_free+0x22>
   18e6a:	6842      	ldr	r2, [r0, #4]
   18e6c:	4905      	ldr	r1, [pc, #20]	; (18e84 <virtqueue_free+0x34>)
   18e6e:	2004      	movs	r0, #4
   18e70:	4798      	blx	r3
	return k_malloc(size);
}

static inline void metal_free_memory(void *ptr)
{
	k_free(ptr);
   18e72:	4620      	mov	r0, r4
				  vq->vq_name);
		}

		metal_free_memory(vq);
	}
}
   18e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18e78:	f008 bdee 	b.w	21a58 <k_free>
   18e7c:	bd10      	pop	{r4, pc}
   18e7e:	bf00      	nop
   18e80:	2000a120 	.word	0x2000a120
   18e84:	00026b5f 	.word	0x00026b5f

00018e88 <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
   18e88:	b530      	push	{r4, r5, lr}
	struct vring_used_elem *used_desc = NULL;
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
   18e8a:	8944      	ldrh	r4, [r0, #10]
   18e8c:	428c      	cmp	r4, r1
   18e8e:	d312      	bcc.n	18eb6 <virtqueue_add_consumed_buffer+0x2e>
	}

	VQUEUE_BUSY(vq);

	/* CACHE: used is never written by master, so it's safe to directly access it */
	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
   18e90:	6a03      	ldr	r3, [r0, #32]
   18e92:	3c01      	subs	r4, #1
   18e94:	885d      	ldrh	r5, [r3, #2]
   18e96:	402c      	ands	r4, r5
   18e98:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
	used_desc = &vq->vq_ring.used->ring[used_idx];
	used_desc->id = head_idx;
   18e9c:	6059      	str	r1, [r3, #4]
	used_desc->len = len;
   18e9e:	609a      	str	r2, [r3, #8]

	/* We still need to flush it because this is read by master */
	VRING_FLUSH(vq->vq_ring.used->ring[used_idx]);

	atomic_thread_fence(memory_order_seq_cst);
   18ea0:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
   18ea4:	6a02      	ldr	r2, [r0, #32]
   18ea6:	8853      	ldrh	r3, [r2, #2]
   18ea8:	3301      	adds	r3, #1
   18eaa:	8053      	strh	r3, [r2, #2]

	/* Used.idx is read by master, so we need to flush it */
	VRING_FLUSH(vq->vq_ring.used->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   18eac:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   18eae:	3301      	adds	r3, #1
   18eb0:	84c3      	strh	r3, [r0, #38]	; 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
   18eb2:	2000      	movs	r0, #0
}
   18eb4:	bd30      	pop	{r4, r5, pc}
		return ERROR_VRING_NO_BUFF;
   18eb6:	4801      	ldr	r0, [pc, #4]	; (18ebc <virtqueue_add_consumed_buffer+0x34>)
   18eb8:	e7fc      	b.n	18eb4 <virtqueue_add_consumed_buffer+0x2c>
   18eba:	bf00      	nop
   18ebc:	fffff441 	.word	0xfffff441

00018ec0 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int len,
			      int wait)
{
   18ec0:	b430      	push	{r4, r5}
   18ec2:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
   18ec4:	b148      	cbz	r0, 18eda <rpmsg_send_offchannel_raw+0x1a>
   18ec6:	6a00      	ldr	r0, [r0, #32]
   18ec8:	b138      	cbz	r0, 18eda <rpmsg_send_offchannel_raw+0x1a>
   18eca:	b133      	cbz	r3, 18eda <rpmsg_send_offchannel_raw+0x1a>
   18ecc:	3401      	adds	r4, #1
   18ece:	d004      	beq.n	18eda <rpmsg_send_offchannel_raw+0x1a>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_raw)
   18ed0:	6f44      	ldr	r4, [r0, #116]	; 0x74
   18ed2:	b114      	cbz	r4, 18eda <rpmsg_send_offchannel_raw+0x1a>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   18ed4:	46a4      	mov	ip, r4
						     len, wait);

	return RPMSG_ERR_PARAM;
}
   18ed6:	bc30      	pop	{r4, r5}
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   18ed8:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
   18eda:	4801      	ldr	r0, [pc, #4]	; (18ee0 <rpmsg_send_offchannel_raw+0x20>)
}
   18edc:	bc30      	pop	{r4, r5}
   18ede:	4770      	bx	lr
   18ee0:	fffff82d 	.word	0xfffff82d

00018ee4 <rpmsg_send_offchannel_nocopy>:
	return NULL;
}

int rpmsg_send_offchannel_nocopy(struct rpmsg_endpoint *ept, uint32_t src,
				 uint32_t dst, const void *data, int len)
{
   18ee4:	b430      	push	{r4, r5}
   18ee6:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
   18ee8:	b150      	cbz	r0, 18f00 <rpmsg_send_offchannel_nocopy+0x1c>
   18eea:	6a00      	ldr	r0, [r0, #32]
   18eec:	b140      	cbz	r0, 18f00 <rpmsg_send_offchannel_nocopy+0x1c>
   18eee:	b13b      	cbz	r3, 18f00 <rpmsg_send_offchannel_nocopy+0x1c>
   18ef0:	3401      	adds	r4, #1
   18ef2:	d005      	beq.n	18f00 <rpmsg_send_offchannel_nocopy+0x1c>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_nocopy)
   18ef4:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
   18ef8:	b114      	cbz	r4, 18f00 <rpmsg_send_offchannel_nocopy+0x1c>
		return rdev->ops.send_offchannel_nocopy(rdev, src, dst,
   18efa:	46a4      	mov	ip, r4
							data, len);

	return RPMSG_ERR_PARAM;
}
   18efc:	bc30      	pop	{r4, r5}
		return rdev->ops.send_offchannel_nocopy(rdev, src, dst,
   18efe:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
   18f00:	4801      	ldr	r0, [pc, #4]	; (18f08 <rpmsg_send_offchannel_nocopy+0x24>)
}
   18f02:	bc30      	pop	{r4, r5}
   18f04:	4770      	bx	lr
   18f06:	bf00      	nop
   18f08:	fffff82d 	.word	0xfffff82d

00018f0c <rpmsg_register_endpoint>:
			     struct rpmsg_endpoint *ept,
			     const char *name,
			     uint32_t src, uint32_t dest,
			     rpmsg_ept_cb cb,
			     rpmsg_ns_unbind_cb ns_unbind_cb)
{
   18f0c:	b570      	push	{r4, r5, r6, lr}
   18f0e:	460c      	mov	r4, r1
   18f10:	4611      	mov	r1, r2
   18f12:	4605      	mov	r5, r0
   18f14:	461e      	mov	r6, r3
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   18f16:	4b0c      	ldr	r3, [pc, #48]	; (18f48 <rpmsg_register_endpoint+0x3c>)
   18f18:	2220      	movs	r2, #32
   18f1a:	2900      	cmp	r1, #0
   18f1c:	bf08      	it	eq
   18f1e:	4619      	moveq	r1, r3
   18f20:	4620      	mov	r0, r4
   18f22:	f008 ff03 	bl	21d2c <strncpy>
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
	ept->addr = src;
	ept->dest_addr = dest;
   18f26:	9b04      	ldr	r3, [sp, #16]
	ept->addr = src;
   18f28:	6266      	str	r6, [r4, #36]	; 0x24
	ept->dest_addr = dest;
   18f2a:	62a3      	str	r3, [r4, #40]	; 0x28
	ept->cb = cb;
   18f2c:	9b05      	ldr	r3, [sp, #20]
	ept->ns_unbind_cb = ns_unbind_cb;
	ept->rdev = rdev;
   18f2e:	6225      	str	r5, [r4, #32]
	ept->cb = cb;
   18f30:	62e3      	str	r3, [r4, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
   18f32:	9b06      	ldr	r3, [sp, #24]
   18f34:	6323      	str	r3, [r4, #48]	; 0x30
	new_node->prev = node->prev;
   18f36:	686a      	ldr	r2, [r5, #4]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
   18f38:	f104 0334 	add.w	r3, r4, #52	; 0x34
	new_node->next = node;
   18f3c:	e9c4 520d 	strd	r5, r2, [r4, #52]	; 0x34
	new_node->next->prev = new_node;
   18f40:	606b      	str	r3, [r5, #4]
	new_node->prev->next = new_node;
   18f42:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   18f44:	6013      	str	r3, [r2, #0]
}
   18f46:	bd70      	pop	{r4, r5, r6, pc}
   18f48:	00023606 	.word	0x00023606

00018f4c <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
   18f4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18f50:	460e      	mov	r6, r1
   18f52:	4691      	mov	r9, r2
   18f54:	461f      	mov	r7, r3
	int status = RPMSG_SUCCESS;
	uint32_t addr = src;

	if (!ept)
   18f56:	4605      	mov	r5, r0
{
   18f58:	b085      	sub	sp, #20
	if (!ept)
   18f5a:	2800      	cmp	r0, #0
   18f5c:	d068      	beq.n	19030 <rpmsg_create_ept+0xe4>
		return RPMSG_ERR_PARAM;

	metal_mutex_acquire(&rdev->lock);
   18f5e:	f101 0858 	add.w	r8, r1, #88	; 0x58
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
	__metal_mutex_acquire(mutex);
   18f62:	4640      	mov	r0, r8
   18f64:	f007 fd0e 	bl	20984 <__metal_mutex_acquire>
	if (src == RPMSG_ADDR_ANY) {
   18f68:	1c78      	adds	r0, r7, #1
   18f6a:	d141      	bne.n	18ff0 <rpmsg_create_ept+0xa4>
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
   18f6c:	6cb4      	ldr	r4, [r6, #72]	; 0x48
   18f6e:	f106 0348 	add.w	r3, r6, #72	; 0x48
			    unsigned int max)
{
	unsigned int bit;

	for (bit = start;
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   18f72:	f014 0401 	ands.w	r4, r4, #1
   18f76:	d00b      	beq.n	18f90 <rpmsg_create_ept+0x44>
	for (bit = start;
   18f78:	2400      	movs	r4, #0
	     bit++)
   18f7a:	3401      	adds	r4, #1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   18f7c:	2c80      	cmp	r4, #128	; 0x80
   18f7e:	d055      	beq.n	1902c <rpmsg_create_ept+0xe0>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   18f80:	0962      	lsrs	r2, r4, #5
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   18f82:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   18f86:	f004 011f 	and.w	r1, r4, #31
   18f8a:	40ca      	lsrs	r2, r1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   18f8c:	07d1      	lsls	r1, r2, #31
   18f8e:	d4f4      	bmi.n	18f7a <rpmsg_create_ept+0x2e>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   18f90:	2101      	movs	r1, #1
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   18f92:	0960      	lsrs	r0, r4, #5
   18f94:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
		addr = RPMSG_RESERVED_ADDRESSES + nextbit;
   18f98:	f504 6780 	add.w	r7, r4, #1024	; 0x400
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   18f9c:	f004 041f 	and.w	r4, r4, #31
   18fa0:	40a1      	lsls	r1, r4
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   18fa2:	430a      	orrs	r2, r1
   18fa4:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
		 * 1.Trust the author of predefined service
		 * 2.Simplify the tracking implementation
		 */
	}

	rpmsg_register_endpoint(rdev, ept, name, addr, dest, cb, unbind_cb);
   18fa8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   18faa:	464a      	mov	r2, r9
   18fac:	9302      	str	r3, [sp, #8]
   18fae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18fb0:	4629      	mov	r1, r5
   18fb2:	9301      	str	r3, [sp, #4]
   18fb4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   18fb6:	4630      	mov	r0, r6
   18fb8:	9300      	str	r3, [sp, #0]
   18fba:	463b      	mov	r3, r7
   18fbc:	f7ff ffa6 	bl	18f0c <rpmsg_register_endpoint>
	z_impl_k_sem_give(sem);
   18fc0:	4640      	mov	r0, r8
   18fc2:	f000 fd39 	bl	19a38 <z_impl_k_sem_give>
	metal_mutex_release(&rdev->lock);

	/* Send NS announcement to remote processor */
	if (ept->name[0] && rdev->support_ns &&
   18fc6:	782c      	ldrb	r4, [r5, #0]
   18fc8:	b174      	cbz	r4, 18fe8 <rpmsg_create_ept+0x9c>
   18fca:	f896 4088 	ldrb.w	r4, [r6, #136]	; 0x88
   18fce:	b15c      	cbz	r4, 18fe8 <rpmsg_create_ept+0x9c>
   18fd0:	6aab      	ldr	r3, [r5, #40]	; 0x28
   18fd2:	3301      	adds	r3, #1
   18fd4:	d12e      	bne.n	19034 <rpmsg_create_ept+0xe8>
	    ept->dest_addr == RPMSG_ADDR_ANY)
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
   18fd6:	2100      	movs	r1, #0
   18fd8:	4628      	mov	r0, r5
   18fda:	f007 fd02 	bl	209e2 <rpmsg_send_ns_message>

	if (status)
   18fde:	4604      	mov	r4, r0
   18fe0:	b110      	cbz	r0, 18fe8 <rpmsg_create_ept+0x9c>
		rpmsg_unregister_endpoint(ept);
   18fe2:	4628      	mov	r0, r5
   18fe4:	f007 fcd4 	bl	20990 <rpmsg_unregister_endpoint>
	return status;

ret_status:
	metal_mutex_release(&rdev->lock);
	return status;
}
   18fe8:	4620      	mov	r0, r4
   18fea:	b005      	add	sp, #20
   18fec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (src >= RPMSG_RESERVED_ADDRESSES) {
   18ff0:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
   18ff4:	d3d8      	bcc.n	18fa8 <rpmsg_create_ept+0x5c>
	addr -= RPMSG_RESERVED_ADDRESSES;
   18ff6:	f5a7 6380 	sub.w	r3, r7, #1024	; 0x400
	if (addr >= 0 && addr < size)
   18ffa:	2b7f      	cmp	r3, #127	; 0x7f
		status = rpmsg_is_address_set(rdev->bitmap,
   18ffc:	f106 0148 	add.w	r1, r6, #72	; 0x48
	if (addr >= 0 && addr < size)
   19000:	d80f      	bhi.n	19022 <rpmsg_create_ept+0xd6>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   19002:	0958      	lsrs	r0, r3, #5
   19004:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   19008:	f003 031f 	and.w	r3, r3, #31
   1900c:	fa24 f203 	lsr.w	r2, r4, r3
		if (!status) {
   19010:	07d2      	lsls	r2, r2, #31
   19012:	d40b      	bmi.n	1902c <rpmsg_create_ept+0xe0>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   19014:	2201      	movs	r2, #1
   19016:	fa02 f303 	lsl.w	r3, r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   1901a:	4323      	orrs	r3, r4
   1901c:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
}
   19020:	e7c2      	b.n	18fa8 <rpmsg_create_ept+0x5c>
   19022:	4c05      	ldr	r4, [pc, #20]	; (19038 <rpmsg_create_ept+0xec>)
   19024:	4640      	mov	r0, r8
   19026:	f000 fd07 	bl	19a38 <z_impl_k_sem_give>
}
   1902a:	e7dd      	b.n	18fe8 <rpmsg_create_ept+0x9c>
			status = RPMSG_ERR_ADDR;
   1902c:	4c03      	ldr	r4, [pc, #12]	; (1903c <rpmsg_create_ept+0xf0>)
   1902e:	e7f9      	b.n	19024 <rpmsg_create_ept+0xd8>
		return RPMSG_ERR_PARAM;
   19030:	4c01      	ldr	r4, [pc, #4]	; (19038 <rpmsg_create_ept+0xec>)
   19032:	e7d9      	b.n	18fe8 <rpmsg_create_ept+0x9c>
   19034:	2400      	movs	r4, #0
   19036:	e7d7      	b.n	18fe8 <rpmsg_create_ept+0x9c>
   19038:	fffff82d 	.word	0xfffff82d
   1903c:	fffff829 	.word	0xfffff829

00019040 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int len, int wait)
{
   19040:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19044:	b085      	sub	sp, #20
   19046:	460f      	mov	r7, r1
   19048:	4690      	mov	r8, r2

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);

	/* Get the payload buffer. */
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
   1904a:	a903      	add	r1, sp, #12
   1904c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
{
   1904e:	4605      	mov	r5, r0
   19050:	4699      	mov	r9, r3
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
   19052:	f007 feab 	bl	20dac <rpmsg_virtio_get_tx_payload_buffer>
	if (!buffer)
   19056:	4604      	mov	r4, r0
   19058:	b1e0      	cbz	r0, 19094 <rpmsg_virtio_send_offchannel_raw+0x54>
		return RPMSG_ERR_NO_BUFF;

	/* Copy data to rpmsg buffer. */
	if (len > (int)buff_len)
   1905a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   1905c:	9b03      	ldr	r3, [sp, #12]
		len = buff_len;
	io = rvdev->shbuf_io;
   1905e:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
   19062:	429e      	cmp	r6, r3
   19064:	bfa8      	it	ge
   19066:	461e      	movge	r6, r3
   19068:	6801      	ldr	r1, [r0, #0]
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   1906a:	f8d0 c008 	ldr.w	ip, [r0, #8]
   1906e:	1a61      	subs	r1, r4, r1
   19070:	4633      	mov	r3, r6
   19072:	464a      	mov	r2, r9
   19074:	4561      	cmp	r1, ip
   19076:	bf28      	it	cs
   19078:	f04f 31ff 	movcs.w	r1, #4294967295
   1907c:	f007 fa5d 	bl	2053a <metal_io_block_write>
				      data, len);
	RPMSG_ASSERT(status == len, "failed to write buffer\r\n");

	return rpmsg_virtio_send_offchannel_nocopy(rdev, src, dst, buffer, len);
   19080:	4623      	mov	r3, r4
   19082:	4642      	mov	r2, r8
   19084:	4639      	mov	r1, r7
   19086:	4628      	mov	r0, r5
   19088:	9600      	str	r6, [sp, #0]
   1908a:	f007 fe30 	bl	20cee <rpmsg_virtio_send_offchannel_nocopy>
}
   1908e:	b005      	add	sp, #20
   19090:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return RPMSG_ERR_NO_BUFF;
   19094:	4800      	ldr	r0, [pc, #0]	; (19098 <rpmsg_virtio_send_offchannel_raw+0x58>)
   19096:	e7fa      	b.n	1908e <rpmsg_virtio_send_offchannel_raw+0x4e>
   19098:	fffff82e 	.word	0xfffff82e

0001909c <rpmsg_virtio_get_buffer_size>:

	return RPMSG_SUCCESS;
}

int rpmsg_virtio_get_buffer_size(struct rpmsg_device *rdev)
{
   1909c:	b538      	push	{r3, r4, r5, lr}
	int size;
	struct rpmsg_virtio_device *rvdev;

	if (!rdev)
   1909e:	4604      	mov	r4, r0
   190a0:	b1e0      	cbz	r0, 190dc <rpmsg_virtio_get_buffer_size+0x40>
		return RPMSG_ERR_PARAM;
	metal_mutex_acquire(&rdev->lock);
   190a2:	f100 0558 	add.w	r5, r0, #88	; 0x58
   190a6:	4628      	mov	r0, r5
   190a8:	f007 fd2a 	bl	20b00 <__metal_mutex_acquire>
}

static inline unsigned int
rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->role;
   190ac:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   190b0:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_HOST) {
   190b2:	b953      	cbnz	r3, 190ca <rpmsg_virtio_get_buffer_size+0x2e>
		length = rvdev->config.h2r_buf_size - sizeof(struct rpmsg_hdr);
   190b4:	f8d4 408c 	ldr.w	r4, [r4, #140]	; 0x8c
   190b8:	3c10      	subs	r4, #16
	if (length <= 0) {
   190ba:	2c00      	cmp	r4, #0
   190bc:	dc00      	bgt.n	190c0 <rpmsg_virtio_get_buffer_size+0x24>
		length = RPMSG_ERR_NO_BUFF;
   190be:	4c08      	ldr	r4, [pc, #32]	; (190e0 <rpmsg_virtio_get_buffer_size+0x44>)
	k_sem_take(m, K_FOREVER);
}

static inline void __metal_mutex_release(metal_mutex_t *m)
{
	k_sem_give(m);
   190c0:	4628      	mov	r0, r5
   190c2:	f007 fd1b 	bl	20afc <k_sem_give>
	rvdev = (struct rpmsg_virtio_device *)rdev;
	size = _rpmsg_virtio_get_buffer_size(rvdev);
	metal_mutex_release(&rdev->lock);
	return size;
}
   190c6:	4620      	mov	r0, r4
   190c8:	bd38      	pop	{r3, r4, r5, pc}
	if (role == RPMSG_REMOTE) {
   190ca:	2b01      	cmp	r3, #1
   190cc:	d1f7      	bne.n	190be <rpmsg_virtio_get_buffer_size+0x22>
		    (int)virtqueue_get_desc_size(rvdev->svq) -
   190ce:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   190d2:	f007 fc3f 	bl	20954 <virtqueue_get_desc_size>
   190d6:	f1a0 0410 	sub.w	r4, r0, #16
   190da:	e7ee      	b.n	190ba <rpmsg_virtio_get_buffer_size+0x1e>
		return RPMSG_ERR_PARAM;
   190dc:	4c01      	ldr	r4, [pc, #4]	; (190e4 <rpmsg_virtio_get_buffer_size+0x48>)
   190de:	e7f2      	b.n	190c6 <rpmsg_virtio_get_buffer_size+0x2a>
   190e0:	fffff82e 	.word	0xfffff82e
   190e4:	fffff82d 	.word	0xfffff82d

000190e8 <rpmsg_init_vdev_with_config>:
				struct virtio_device *vdev,
				rpmsg_ns_bind_cb ns_bind_cb,
				struct metal_io_region *shm_io,
				struct rpmsg_virtio_shm_pool *shpool,
				const struct rpmsg_virtio_config *config)
{
   190e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   190ec:	460d      	mov	r5, r1
   190ee:	b08a      	sub	sp, #40	; 0x28
   190f0:	4690      	mov	r8, r2
   190f2:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	; 0x48
__ssp_bos_icheck3(memset, void *, int)
   190f6:	228c      	movs	r2, #140	; 0x8c
   190f8:	2100      	movs	r1, #0
   190fa:	4604      	mov	r4, r0
   190fc:	461e      	mov	r6, r3
   190fe:	f008 fcd3 	bl	21aa8 <memset>
	return z_impl_k_sem_init(sem, initial_count, limit);
   19102:	2201      	movs	r2, #1
   19104:	f104 0058 	add.w	r0, r4, #88	; 0x58
   19108:	4611      	mov	r1, r2
   1910a:	f008 f87a 	bl	21202 <z_impl_k_sem_init>
	memset(rdev, 0, sizeof(*rdev));
	metal_mutex_init(&rdev->lock);
	rvdev->vdev = vdev;
	rdev->ns_bind_cb = ns_bind_cb;
	vdev->priv = rvdev;
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   1910e:	4b71      	ldr	r3, [pc, #452]	; (192d4 <rpmsg_init_vdev_with_config+0x1ec>)
	rvdev->vdev = vdev;
   19110:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
	rdev->ns_bind_cb = ns_bind_cb;
   19114:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	vdev->priv = rvdev;
   19118:	626c      	str	r4, [r5, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   1911a:	6763      	str	r3, [r4, #116]	; 0x74
	rdev->ops.hold_rx_buffer = rpmsg_virtio_hold_rx_buffer;
   1911c:	4b6e      	ldr	r3, [pc, #440]	; (192d8 <rpmsg_init_vdev_with_config+0x1f0>)
   1911e:	67a3      	str	r3, [r4, #120]	; 0x78
	rdev->ops.release_rx_buffer = rpmsg_virtio_release_rx_buffer;
   19120:	4b6e      	ldr	r3, [pc, #440]	; (192dc <rpmsg_init_vdev_with_config+0x1f4>)
   19122:	67e3      	str	r3, [r4, #124]	; 0x7c
	rdev->ops.get_tx_payload_buffer = rpmsg_virtio_get_tx_payload_buffer;
   19124:	4b6e      	ldr	r3, [pc, #440]	; (192e0 <rpmsg_init_vdev_with_config+0x1f8>)
   19126:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	rdev->ops.send_offchannel_nocopy = rpmsg_virtio_send_offchannel_nocopy;
   1912a:	4b6e      	ldr	r3, [pc, #440]	; (192e4 <rpmsg_init_vdev_with_config+0x1fc>)
   1912c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
   19130:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   19134:	f8d3 8018 	ldr.w	r8, [r3, #24]
	role = rpmsg_virtio_get_role(rvdev);

#ifndef VIRTIO_DEVICE_ONLY
	if (role == RPMSG_HOST) {
   19138:	f1b8 0f00 	cmp.w	r8, #0
   1913c:	d165      	bne.n	1920a <rpmsg_init_vdev_with_config+0x122>
		/*
		 * The virtio configuration contains only options applicable to
		 * a virtio driver, implying rpmsg host role.
		 */
		if (config == NULL) {
   1913e:	b927      	cbnz	r7, 1914a <rpmsg_init_vdev_with_config+0x62>
			return RPMSG_ERR_PARAM;
   19140:	4f69      	ldr	r7, [pc, #420]	; (192e8 <rpmsg_init_vdev_with_config+0x200>)
	if (role == RPMSG_HOST)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_DEVICE_ONLY*/

	return status;
}
   19142:	4638      	mov	r0, r7
   19144:	b00a      	add	sp, #40	; 0x28
   19146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rvdev->config = *config;
   1914a:	f104 038c 	add.w	r3, r4, #140	; 0x8c
   1914e:	e897 0003 	ldmia.w	r7, {r0, r1}
   19152:	e883 0003 	stmia.w	r3, {r0, r1}
	vdev->features = rpmsg_virtio_get_features(rvdev);
   19156:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
}

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_features(rvdev->vdev);
   1915a:	6a03      	ldr	r3, [r0, #32]
   1915c:	689b      	ldr	r3, [r3, #8]
   1915e:	4798      	blx	r3
   19160:	2300      	movs	r3, #0
   19162:	6128      	str	r0, [r5, #16]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   19164:	f000 0001 	and.w	r0, r0, #1
	vdev->features = rpmsg_virtio_get_features(rvdev);
   19168:	616b      	str	r3, [r5, #20]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   1916a:	f884 0088 	strb.w	r0, [r4, #136]	; 0x88
	if (role == RPMSG_HOST) {
   1916e:	f1b8 0f00 	cmp.w	r8, #0
   19172:	d15e      	bne.n	19232 <rpmsg_init_vdev_with_config+0x14a>
		if (!shpool)
   19174:	f1b9 0f00 	cmp.w	r9, #0
   19178:	d0e2      	beq.n	19140 <rpmsg_init_vdev_with_config+0x58>
		if (!shpool->size)
   1917a:	f8d9 3008 	ldr.w	r3, [r9, #8]
   1917e:	2b00      	cmp	r3, #0
   19180:	f000 80a5 	beq.w	192ce <rpmsg_init_vdev_with_config+0x1e6>
		vq_names[0] = "rx_vq";
   19184:	4b59      	ldr	r3, [pc, #356]	; (192ec <rpmsg_init_vdev_with_config+0x204>)
		rvdev->shpool = shpool;
   19186:	f8c4 90a4 	str.w	r9, [r4, #164]	; 0xa4
		vq_names[0] = "rx_vq";
   1918a:	9304      	str	r3, [sp, #16]
		vq_names[1] = "tx_vq";
   1918c:	4b58      	ldr	r3, [pc, #352]	; (192f0 <rpmsg_init_vdev_with_config+0x208>)
   1918e:	9305      	str	r3, [sp, #20]
		callback[0] = rpmsg_virtio_rx_callback;
   19190:	4b58      	ldr	r3, [pc, #352]	; (192f4 <rpmsg_init_vdev_with_config+0x20c>)
   19192:	9306      	str	r3, [sp, #24]
		callback[1] = rpmsg_virtio_tx_callback;
   19194:	4b58      	ldr	r3, [pc, #352]	; (192f8 <rpmsg_init_vdev_with_config+0x210>)
   19196:	9307      	str	r3, [sp, #28]
		rvdev->rvq  = vdev->vrings_info[0].vq;
   19198:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1919a:	681b      	ldr	r3, [r3, #0]
   1919c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
		rvdev->svq  = vdev->vrings_info[1].vq;
   191a0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   191a2:	699b      	ldr	r3, [r3, #24]
		rvdev->svq  = vdev->vrings_info[0].vq;
   191a4:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
   191a8:	ab06      	add	r3, sp, #24
	rvdev->shbuf_io = shm_io;
   191aa:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
   191ae:	9300      	str	r3, [sp, #0]
   191b0:	2202      	movs	r2, #2
   191b2:	2100      	movs	r1, #0
   191b4:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   191b8:	ab04      	add	r3, sp, #16
   191ba:	f7ff fdf9 	bl	18db0 <virtio_create_virtqueues>
	if (status != RPMSG_SUCCESS)
   191be:	4607      	mov	r7, r0
   191c0:	2800      	cmp	r0, #0
   191c2:	d1be      	bne.n	19142 <rpmsg_init_vdev_with_config+0x5a>
	virtqueue_disable_cb(rvdev->svq);
   191c4:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   191c8:	f007 fb5f 	bl	2088a <virtqueue_disable_cb>
		vq = vdev->vrings_info[i].vq;
   191cc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   191ce:	681b      	ldr	r3, [r3, #0]
		vq->shm_io = shm_io;
   191d0:	629e      	str	r6, [r3, #40]	; 0x28
		vq = vdev->vrings_info[i].vq;
   191d2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   191d4:	699b      	ldr	r3, [r3, #24]
		vq->shm_io = shm_io;
   191d6:	629e      	str	r6, [r3, #40]	; 0x28
	if (role == RPMSG_HOST) {
   191d8:	f1b8 0f00 	cmp.w	r8, #0
   191dc:	d15f      	bne.n	1929e <rpmsg_init_vdev_with_config+0x1b6>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   191de:	46c2      	mov	sl, r8
		vqbuf.len = rvdev->config.r2h_buf_size;
   191e0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   191e4:	9309      	str	r3, [sp, #36]	; 0x24
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   191e6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   191ea:	895b      	ldrh	r3, [r3, #10]
   191ec:	4553      	cmp	r3, sl
   191ee:	d832      	bhi.n	19256 <rpmsg_init_vdev_with_config+0x16e>
	if (rdev->support_ns) {
   191f0:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
	list->next = list;
   191f4:	e9c4 4400 	strd	r4, r4, [r4]
   191f8:	2b00      	cmp	r3, #0
   191fa:	d157      	bne.n	192ac <rpmsg_init_vdev_with_config+0x1c4>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
   191fc:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   19200:	2104      	movs	r1, #4
   19202:	6a03      	ldr	r3, [r0, #32]
   19204:	685b      	ldr	r3, [r3, #4]
   19206:	4798      	blx	r3
}
   19208:	e79b      	b.n	19142 <rpmsg_init_vdev_with_config+0x5a>
	if (role == RPMSG_REMOTE) {
   1920a:	f1b8 0f01 	cmp.w	r8, #1
   1920e:	d1a2      	bne.n	19156 <rpmsg_init_vdev_with_config+0x6e>
		status = rpmsg_virtio_get_status(rvdev);
   19210:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
	return rvdev->vdev->func->get_status(rvdev->vdev);
   19214:	6a03      	ldr	r3, [r0, #32]
   19216:	681b      	ldr	r3, [r3, #0]
   19218:	4798      	blx	r3
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
   1921a:	0642      	lsls	r2, r0, #25
   1921c:	d506      	bpl.n	1922c <rpmsg_init_vdev_with_config+0x144>
			rpmsg_virtio_set_status(rvdev, 0);
   1921e:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   19222:	2100      	movs	r1, #0
   19224:	6a03      	ldr	r3, [r0, #32]
   19226:	685b      	ldr	r3, [r3, #4]
   19228:	4798      	blx	r3
}
   1922a:	e7f1      	b.n	19210 <rpmsg_init_vdev_with_config+0x128>
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
   1922c:	0743      	lsls	r3, r0, #29
   1922e:	d5ef      	bpl.n	19210 <rpmsg_init_vdev_with_config+0x128>
   19230:	e791      	b.n	19156 <rpmsg_init_vdev_with_config+0x6e>
	if (role == RPMSG_REMOTE) {
   19232:	f1b8 0f01 	cmp.w	r8, #1
   19236:	d1b7      	bne.n	191a8 <rpmsg_init_vdev_with_config+0xc0>
		vq_names[0] = "tx_vq";
   19238:	4b2d      	ldr	r3, [pc, #180]	; (192f0 <rpmsg_init_vdev_with_config+0x208>)
   1923a:	9304      	str	r3, [sp, #16]
		vq_names[1] = "rx_vq";
   1923c:	4b2b      	ldr	r3, [pc, #172]	; (192ec <rpmsg_init_vdev_with_config+0x204>)
   1923e:	9305      	str	r3, [sp, #20]
		callback[0] = rpmsg_virtio_tx_callback;
   19240:	4b2d      	ldr	r3, [pc, #180]	; (192f8 <rpmsg_init_vdev_with_config+0x210>)
   19242:	9306      	str	r3, [sp, #24]
		callback[1] = rpmsg_virtio_rx_callback;
   19244:	4b2b      	ldr	r3, [pc, #172]	; (192f4 <rpmsg_init_vdev_with_config+0x20c>)
   19246:	9307      	str	r3, [sp, #28]
		rvdev->rvq  = vdev->vrings_info[1].vq;
   19248:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1924a:	699b      	ldr	r3, [r3, #24]
   1924c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
		rvdev->svq  = vdev->vrings_info[0].vq;
   19250:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   19252:	681b      	ldr	r3, [r3, #0]
   19254:	e7a6      	b.n	191a4 <rpmsg_init_vdev_with_config+0xbc>
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
   19256:	4648      	mov	r0, r9
   19258:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
   1925c:	f007 fd98 	bl	20d90 <rpmsg_virtio_shm_pool_get_buffer>
			if (!buffer) {
   19260:	4605      	mov	r5, r0
   19262:	b1c8      	cbz	r0, 19298 <rpmsg_init_vdev_with_config+0x1b0>
   19264:	6831      	ldr	r1, [r6, #0]
			vqbuf.buf = buffer;
   19266:	9008      	str	r0, [sp, #32]
   19268:	1a41      	subs	r1, r0, r1

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   1926a:	68b0      	ldr	r0, [r6, #8]
			metal_io_block_set(shm_io,
   1926c:	2200      	movs	r2, #0
   1926e:	4281      	cmp	r1, r0
   19270:	bf28      	it	cs
   19272:	f04f 31ff 	movcs.w	r1, #4294967295
   19276:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   1927a:	4630      	mov	r0, r6
   1927c:	f007 f997 	bl	205ae <metal_io_block_set>
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
   19280:	9500      	str	r5, [sp, #0]
   19282:	2301      	movs	r3, #1
   19284:	2200      	movs	r2, #0
   19286:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   1928a:	a908      	add	r1, sp, #32
   1928c:	f007 fa0e 	bl	206ac <virtqueue_add_buffer>
			if (status != RPMSG_SUCCESS) {
   19290:	b918      	cbnz	r0, 1929a <rpmsg_init_vdev_with_config+0x1b2>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   19292:	f10a 0a01 	add.w	sl, sl, #1
   19296:	e7a6      	b.n	191e6 <rpmsg_init_vdev_with_config+0xfe>
				return RPMSG_ERR_NO_BUFF;
   19298:	4818      	ldr	r0, [pc, #96]	; (192fc <rpmsg_init_vdev_with_config+0x214>)
   1929a:	4607      	mov	r7, r0
   1929c:	e751      	b.n	19142 <rpmsg_init_vdev_with_config+0x5a>
	if (rdev->support_ns) {
   1929e:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
   192a2:	e9c4 4400 	strd	r4, r4, [r4]
   192a6:	2b00      	cmp	r3, #0
   192a8:	f43f af4b 	beq.w	19142 <rpmsg_init_vdev_with_config+0x5a>
		rpmsg_register_endpoint(rdev, &rdev->ns_ept, "NS",
   192ac:	2300      	movs	r3, #0
   192ae:	9302      	str	r3, [sp, #8]
   192b0:	4b13      	ldr	r3, [pc, #76]	; (19300 <rpmsg_init_vdev_with_config+0x218>)
   192b2:	4620      	mov	r0, r4
   192b4:	9301      	str	r3, [sp, #4]
   192b6:	2335      	movs	r3, #53	; 0x35
   192b8:	4a12      	ldr	r2, [pc, #72]	; (19304 <rpmsg_init_vdev_with_config+0x21c>)
   192ba:	9300      	str	r3, [sp, #0]
   192bc:	f104 0108 	add.w	r1, r4, #8
   192c0:	f7ff fe24 	bl	18f0c <rpmsg_register_endpoint>
	if (role == RPMSG_HOST)
   192c4:	f1b8 0f00 	cmp.w	r8, #0
   192c8:	f47f af3b 	bne.w	19142 <rpmsg_init_vdev_with_config+0x5a>
   192cc:	e796      	b.n	191fc <rpmsg_init_vdev_with_config+0x114>
			return RPMSG_ERR_NO_BUFF;
   192ce:	4f0b      	ldr	r7, [pc, #44]	; (192fc <rpmsg_init_vdev_with_config+0x214>)
   192d0:	e737      	b.n	19142 <rpmsg_init_vdev_with_config+0x5a>
   192d2:	bf00      	nop
   192d4:	00019041 	.word	0x00019041
   192d8:	00020aed 	.word	0x00020aed
   192dc:	00020cb7 	.word	0x00020cb7
   192e0:	00020dad 	.word	0x00020dad
   192e4:	00020cef 	.word	0x00020cef
   192e8:	fffff82d 	.word	0xfffff82d
   192ec:	00026b81 	.word	0x00026b81
   192f0:	00026b87 	.word	0x00026b87
   192f4:	00020c03 	.word	0x00020c03
   192f8:	00020afb 	.word	0x00020afb
   192fc:	fffff82e 	.word	0xfffff82e
   19300:	00020b0d 	.word	0x00020b0d
   19304:	00026b8d 	.word	0x00026b8d

00019308 <rpmsg_init_vdev>:
{
   19308:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1930a:	4605      	mov	r5, r0
   1930c:	460e      	mov	r6, r1
			   shpool, RPMSG_VIRTIO_DEFAULT_CONFIG);
   1930e:	4907      	ldr	r1, [pc, #28]	; (1932c <rpmsg_init_vdev+0x24>)
   19310:	ac02      	add	r4, sp, #8
   19312:	c903      	ldmia	r1, {r0, r1}
   19314:	e884 0003 	stmia.w	r4, {r0, r1}
	return rpmsg_init_vdev_with_config(rvdev, vdev, ns_bind_cb, shm_io,
   19318:	9908      	ldr	r1, [sp, #32]
   1931a:	4628      	mov	r0, r5
   1931c:	9100      	str	r1, [sp, #0]
   1931e:	9401      	str	r4, [sp, #4]
   19320:	4631      	mov	r1, r6
   19322:	f7ff fee1 	bl	190e8 <rpmsg_init_vdev_with_config>
}
   19326:	b004      	add	sp, #16
   19328:	bd70      	pop	{r4, r5, r6, pc}
   1932a:	bf00      	nop
   1932c:	0002294c 	.word	0x0002294c

00019330 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   19330:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19334:	4605      	mov	r5, r0
   19336:	460e      	mov	r6, r1
   19338:	af00      	add	r7, sp, #0
	__asm__ volatile(
   1933a:	f04f 0320 	mov.w	r3, #32
   1933e:	f3ef 8a11 	mrs	sl, BASEPRI
   19342:	f383 8812 	msr	BASEPRI_MAX, r3
   19346:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   1934a:	f001 f8b3 	bl	1a4b4 <z_impl_z_current_get>
   1934e:	2d04      	cmp	r5, #4
   19350:	bf98      	it	ls
   19352:	4b30      	ldrls	r3, [pc, #192]	; (19414 <z_fatal_error+0xe4>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   19354:	46e9      	mov	r9, sp
   19356:	b08c      	sub	sp, #48	; 0x30
   19358:	4604      	mov	r4, r0
   1935a:	466a      	mov	r2, sp
   1935c:	bf94      	ite	ls
   1935e:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
   19362:	4b2d      	ldrhi	r3, [pc, #180]	; (19418 <z_fatal_error+0xe8>)
   19364:	6213      	str	r3, [r2, #32]
   19366:	f240 4302 	movw	r3, #1026	; 0x402
   1936a:	f04f 0b00 	mov.w	fp, #0
   1936e:	8513      	strh	r3, [r2, #40]	; 0x28
   19370:	492a      	ldr	r1, [pc, #168]	; (1941c <z_fatal_error+0xec>)
   19372:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 19420 <z_fatal_error+0xf0>
   19376:	4b2b      	ldr	r3, [pc, #172]	; (19424 <z_fatal_error+0xf4>)
   19378:	e9c2 8506 	strd	r8, r5, [r2, #24]
   1937c:	6151      	str	r1, [r2, #20]
   1937e:	f8c2 b024 	str.w	fp, [r2, #36]	; 0x24
   19382:	f842 3f10 	str.w	r3, [r2, #16]!
   19386:	f44f 5151 	mov.w	r1, #13376	; 0x3440
   1938a:	465b      	mov	r3, fp
   1938c:	4826      	ldr	r0, [pc, #152]	; (19428 <z_fatal_error+0xf8>)
   1938e:	f7f2 ff91 	bl	c2b4 <z_impl_z_log_msg_static_create>
   19392:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   19394:	b196      	cbz	r6, 193bc <z_fatal_error+0x8c>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   19396:	69f3      	ldr	r3, [r6, #28]
   19398:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1939c:	b173      	cbz	r3, 193bc <z_fatal_error+0x8c>
		LOG_ERR("Fault during interrupt handling\n");
   1939e:	b088      	sub	sp, #32
   193a0:	466a      	mov	r2, sp
   193a2:	4b22      	ldr	r3, [pc, #136]	; (1942c <z_fatal_error+0xfc>)
   193a4:	e9c2 3805 	strd	r3, r8, [r2, #20]
   193a8:	2303      	movs	r3, #3
   193aa:	f842 3f10 	str.w	r3, [r2, #16]!
   193ae:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   193b2:	465b      	mov	r3, fp
   193b4:	481c      	ldr	r0, [pc, #112]	; (19428 <z_fatal_error+0xf8>)
   193b6:	f7f2 ff7d 	bl	c2b4 <z_impl_z_log_msg_static_create>
   193ba:	46cd      	mov	sp, r9
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   193bc:	b12c      	cbz	r4, 193ca <z_fatal_error+0x9a>
   193be:	4620      	mov	r0, r4
   193c0:	f007 fe33 	bl	2102a <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   193c4:	b108      	cbz	r0, 193ca <z_fatal_error+0x9a>
   193c6:	7803      	ldrb	r3, [r0, #0]
   193c8:	b903      	cbnz	r3, 193cc <z_fatal_error+0x9c>
		thread_name = "unknown";
   193ca:	4819      	ldr	r0, [pc, #100]	; (19430 <z_fatal_error+0x100>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   193cc:	46e9      	mov	r9, sp
   193ce:	b08a      	sub	sp, #40	; 0x28
   193d0:	466a      	mov	r2, sp
   193d2:	4b18      	ldr	r3, [pc, #96]	; (19434 <z_fatal_error+0x104>)
   193d4:	e9c2 4007 	strd	r4, r0, [r2, #28]
   193d8:	e9c2 3805 	strd	r3, r8, [r2, #20]
   193dc:	f240 4302 	movw	r3, #1026	; 0x402
   193e0:	8493      	strh	r3, [r2, #36]	; 0x24
   193e2:	4b15      	ldr	r3, [pc, #84]	; (19438 <z_fatal_error+0x108>)
   193e4:	f842 3f10 	str.w	r3, [r2, #16]!
   193e8:	2300      	movs	r3, #0
   193ea:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   193ee:	480e      	ldr	r0, [pc, #56]	; (19428 <z_fatal_error+0xf8>)
   193f0:	f7f2 ff60 	bl	c2b4 <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   193f4:	4631      	mov	r1, r6
   193f6:	46cd      	mov	sp, r9
   193f8:	4628      	mov	r0, r5
   193fa:	f7fe fd65 	bl	17ec8 <k_sys_fatal_error_handler>
	__asm__ volatile(
   193fe:	f38a 8811 	msr	BASEPRI, sl
   19402:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   19406:	4620      	mov	r0, r4
   19408:	f7f4 fee8 	bl	e1dc <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   1940c:	46bd      	mov	sp, r7
   1940e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19412:	bf00      	nop
   19414:	00023364 	.word	0x00023364
   19418:	00026b90 	.word	0x00026b90
   1941c:	00026b9e 	.word	0x00026b9e
   19420:	00026c55 	.word	0x00026c55
   19424:	01000006 	.word	0x01000006
   19428:	00022888 	.word	0x00022888
   1942c:	00026bca 	.word	0x00026bca
   19430:	00024310 	.word	0x00024310
   19434:	00026bef 	.word	0x00026bef
   19438:	01000005 	.word	0x01000005

0001943c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1943c:	4b0f      	ldr	r3, [pc, #60]	; (1947c <z_sys_init_run_level+0x40>)
{
   1943e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   19440:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   19444:	3001      	adds	r0, #1
   19446:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1944a:	42a6      	cmp	r6, r4
   1944c:	d800      	bhi.n	19450 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   1944e:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   19450:	e9d4 3500 	ldrd	r3, r5, [r4]
   19454:	4628      	mov	r0, r5
   19456:	4798      	blx	r3
		if (dev != NULL) {
   19458:	b16d      	cbz	r5, 19476 <z_sys_init_run_level+0x3a>
			if (rc != 0) {
   1945a:	b138      	cbz	r0, 1946c <z_sys_init_run_level+0x30>
				if (rc < 0) {
   1945c:	2800      	cmp	r0, #0
   1945e:	bfb8      	it	lt
   19460:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
   19462:	28ff      	cmp	r0, #255	; 0xff
   19464:	bfa8      	it	ge
   19466:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   19468:	68eb      	ldr	r3, [r5, #12]
   1946a:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   1946c:	68ea      	ldr	r2, [r5, #12]
   1946e:	7853      	ldrb	r3, [r2, #1]
   19470:	f043 0301 	orr.w	r3, r3, #1
   19474:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   19476:	3408      	adds	r4, #8
   19478:	e7e7      	b.n	1944a <z_sys_init_run_level+0xe>
   1947a:	bf00      	nop
   1947c:	00023378 	.word	0x00023378

00019480 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   19480:	2201      	movs	r2, #1
{
   19482:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   19484:	4b09      	ldr	r3, [pc, #36]	; (194ac <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   19486:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   19488:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   1948a:	f7ff ffd7 	bl	1943c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   1948e:	f001 fb45 	bl	1ab1c <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   19492:	2004      	movs	r0, #4
   19494:	f7ff ffd2 	bl	1943c <z_sys_init_run_level>

	z_init_static_threads();
   19498:	f000 f96c 	bl	19774 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
   1949c:	f002 feaa 	bl	1c1f4 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   194a0:	4a03      	ldr	r2, [pc, #12]	; (194b0 <bg_thread_main+0x30>)
   194a2:	7b13      	ldrb	r3, [r2, #12]
   194a4:	f023 0301 	bic.w	r3, r3, #1
   194a8:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   194aa:	bd08      	pop	{r3, pc}
   194ac:	2000a296 	.word	0x2000a296
   194b0:	20009b80 	.word	0x20009b80

000194b4 <z_bss_zero>:
{
   194b4:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   194b6:	4803      	ldr	r0, [pc, #12]	; (194c4 <z_bss_zero+0x10>)
   194b8:	4a03      	ldr	r2, [pc, #12]	; (194c8 <z_bss_zero+0x14>)
   194ba:	2100      	movs	r1, #0
   194bc:	1a12      	subs	r2, r2, r0
   194be:	f007 fcf6 	bl	20eae <z_early_memset>
}
   194c2:	bd08      	pop	{r3, pc}
   194c4:	20008ac8 	.word	0x20008ac8
   194c8:	2000a298 	.word	0x2000a298

000194cc <z_init_cpu>:

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
	struct k_thread *thread = &z_idle_threads[i];
   194cc:	2388      	movs	r3, #136	; 0x88
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   194ce:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
   194d0:	4e13      	ldr	r6, [pc, #76]	; (19520 <z_init_cpu+0x54>)
	z_setup_new_thread(thread, stack,
   194d2:	2201      	movs	r2, #1
	struct k_thread *thread = &z_idle_threads[i];
   194d4:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
   194d8:	2300      	movs	r3, #0
{
   194da:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   194dc:	e9cd 2304 	strd	r2, r3, [sp, #16]
   194e0:	220f      	movs	r2, #15
   194e2:	9301      	str	r3, [sp, #4]
   194e4:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   194e8:	2318      	movs	r3, #24
	z_setup_new_thread(thread, stack,
   194ea:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   194ee:	4d0d      	ldr	r5, [pc, #52]	; (19524 <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
   194f0:	490d      	ldr	r1, [pc, #52]	; (19528 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   194f2:	fb03 5500 	mla	r5, r3, r0, r5
{
   194f6:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   194f8:	fb02 1100 	mla	r1, r2, r0, r1
   194fc:	4b0b      	ldr	r3, [pc, #44]	; (1952c <z_init_cpu+0x60>)
   194fe:	4630      	mov	r0, r6
   19500:	9500      	str	r5, [sp, #0]
   19502:	f000 f8db 	bl	196bc <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   19506:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
   19508:	752c      	strb	r4, [r5, #20]
   1950a:	f023 0304 	bic.w	r3, r3, #4
   1950e:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   19510:	4b07      	ldr	r3, [pc, #28]	; (19530 <z_init_cpu+0x64>)
   19512:	3401      	adds	r4, #1
   19514:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   19518:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   1951a:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   1951c:	b006      	add	sp, #24
   1951e:	bd70      	pop	{r4, r5, r6, pc}
   19520:	20009af8 	.word	0x20009af8
   19524:	2000a140 	.word	0x2000a140
   19528:	2000cc48 	.word	0x2000cc48
   1952c:	0001982d 	.word	0x0001982d
   19530:	2000c448 	.word	0x2000c448

00019534 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   19534:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   19536:	2000      	movs	r0, #0
{
   19538:	b0a8      	sub	sp, #160	; 0xa0
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   1953a:	f7ff ff7f 	bl	1943c <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   1953e:	4b2f      	ldr	r3, [pc, #188]	; (195fc <z_cstart+0xc8>)
	uint32_t msp =
   19540:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   19544:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   19548:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1954c:	2400      	movs	r4, #0
   1954e:	23e0      	movs	r3, #224	; 0xe0
   19550:	4d2b      	ldr	r5, [pc, #172]	; (19600 <z_cstart+0xcc>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   19552:	4e2c      	ldr	r6, [pc, #176]	; (19604 <z_cstart+0xd0>)
   19554:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   19558:	77ec      	strb	r4, [r5, #31]
   1955a:	762c      	strb	r4, [r5, #24]
   1955c:	766c      	strb	r4, [r5, #25]
   1955e:	76ac      	strb	r4, [r5, #26]
   19560:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   19564:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   19566:	4f28      	ldr	r7, [pc, #160]	; (19608 <z_cstart+0xd4>)
   19568:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1956c:	626b      	str	r3, [r5, #36]	; 0x24
   1956e:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   19572:	f7f4 fd97 	bl	e0a4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   19576:	f7f4 f87d 	bl	d674 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1957a:	f04f 33ff 	mov.w	r3, #4294967295
   1957e:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   19580:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   19582:	f7f4 ffe3 	bl	e54c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   19586:	f7f4 fe3f 	bl	e208 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   1958a:	f7f2 fd27 	bl	bfdc <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   1958e:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
   19592:	ad06      	add	r5, sp, #24
   19594:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
   19596:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
   1959a:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	k_thread_system_pool_assign(dummy_thread);
   1959e:	f001 fa9f 	bl	1aae0 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
   195a2:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   195a4:	f007 fc77 	bl	20e96 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   195a8:	2001      	movs	r0, #1
   195aa:	f7ff ff47 	bl	1943c <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   195ae:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   195b0:	4d16      	ldr	r5, [pc, #88]	; (1960c <z_cstart+0xd8>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   195b2:	f7ff ff43 	bl	1943c <z_sys_init_run_level>
	z_sched_init();
   195b6:	f000 fed5 	bl	1a364 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   195ba:	4b15      	ldr	r3, [pc, #84]	; (19610 <z_cstart+0xdc>)
	_kernel.ready_q.cache = &z_main_thread;
   195bc:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   195be:	9305      	str	r3, [sp, #20]
   195c0:	2301      	movs	r3, #1
   195c2:	4914      	ldr	r1, [pc, #80]	; (19614 <z_cstart+0xe0>)
   195c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
   195c8:	e9cd 4303 	strd	r4, r3, [sp, #12]
   195cc:	4628      	mov	r0, r5
   195ce:	463b      	mov	r3, r7
   195d0:	e9cd 4401 	strd	r4, r4, [sp, #4]
   195d4:	9400      	str	r4, [sp, #0]
   195d6:	f000 f871 	bl	196bc <z_setup_new_thread>
   195da:	4606      	mov	r6, r0
   195dc:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
   195de:	4628      	mov	r0, r5
   195e0:	f022 0204 	bic.w	r2, r2, #4
   195e4:	736a      	strb	r2, [r5, #13]
   195e6:	f007 ff8a 	bl	214fe <z_ready_thread>
	z_init_cpu(0);
   195ea:	4620      	mov	r0, r4
   195ec:	f7ff ff6e 	bl	194cc <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   195f0:	463a      	mov	r2, r7
   195f2:	4631      	mov	r1, r6
   195f4:	4628      	mov	r0, r5
   195f6:	f7f4 f9a9 	bl	d94c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   195fa:	bf00      	nop
   195fc:	2000c448 	.word	0x2000c448
   19600:	e000ed00 	.word	0xe000ed00
   19604:	2000a140 	.word	0x2000a140
   19608:	00019481 	.word	0x00019481
   1960c:	20009b80 	.word	0x20009b80
   19610:	00026c63 	.word	0x00026c63
   19614:	2000cd88 	.word	0x2000cd88

00019618 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   19618:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1961a:	4c06      	ldr	r4, [pc, #24]	; (19634 <statics_init+0x1c>)
   1961c:	4d06      	ldr	r5, [pc, #24]	; (19638 <statics_init+0x20>)
   1961e:	42ac      	cmp	r4, r5
   19620:	d301      	bcc.n	19626 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   19622:	2000      	movs	r0, #0
   19624:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   19626:	4620      	mov	r0, r4
   19628:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1962c:	f007 fc43 	bl	20eb6 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   19630:	3414      	adds	r4, #20
   19632:	e7f4      	b.n	1961e <statics_init+0x6>
   19634:	200088b8 	.word	0x200088b8
   19638:	200088cc 	.word	0x200088cc

0001963c <init_mem_slab_module>:
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
	int rc = 0;
   1963c:	2000      	movs	r0, #0
{
   1963e:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   19640:	4c05      	ldr	r4, [pc, #20]	; (19658 <init_mem_slab_module+0x1c>)
   19642:	4d06      	ldr	r5, [pc, #24]	; (1965c <init_mem_slab_module+0x20>)
   19644:	42ac      	cmp	r4, r5
   19646:	d300      	bcc.n	1964a <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
   19648:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
   1964a:	4620      	mov	r0, r4
   1964c:	f007 fca5 	bl	20f9a <create_free_list>
		if (rc < 0) {
   19650:	2800      	cmp	r0, #0
   19652:	dbf9      	blt.n	19648 <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   19654:	341c      	adds	r4, #28
   19656:	e7f5      	b.n	19644 <init_mem_slab_module+0x8>
   19658:	20008864 	.word	0x20008864
   1965c:	200088b8 	.word	0x200088b8

00019660 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   19660:	b573      	push	{r0, r1, r4, r5, r6, lr}
   19662:	460c      	mov	r4, r1
	__asm__ volatile(
   19664:	f04f 0520 	mov.w	r5, #32
   19668:	f3ef 8111 	mrs	r1, BASEPRI
   1966c:	f385 8812 	msr	BASEPRI_MAX, r5
   19670:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   19674:	6945      	ldr	r5, [r0, #20]
   19676:	b15d      	cbz	r5, 19690 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   19678:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1967a:	682b      	ldr	r3, [r5, #0]
   1967c:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1967e:	6983      	ldr	r3, [r0, #24]
   19680:	3301      	adds	r3, #1
   19682:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   19684:	2000      	movs	r0, #0
	__asm__ volatile(
   19686:	f381 8811 	msr	BASEPRI, r1
   1968a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   1968e:	e011      	b.n	196b4 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   19690:	ea52 0603 	orrs.w	r6, r2, r3
   19694:	d103      	bne.n	1969e <k_mem_slab_alloc+0x3e>
		result = -ENOMEM;
   19696:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
   1969a:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   1969c:	e7f3      	b.n	19686 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   1969e:	e9cd 2300 	strd	r2, r3, [sp]
   196a2:	4602      	mov	r2, r0
   196a4:	3008      	adds	r0, #8
   196a6:	f000 fd67 	bl	1a178 <z_pend_curr>
		if (result == 0) {
   196aa:	b918      	cbnz	r0, 196b4 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   196ac:	4b02      	ldr	r3, [pc, #8]	; (196b8 <k_mem_slab_alloc+0x58>)
   196ae:	689b      	ldr	r3, [r3, #8]
   196b0:	695b      	ldr	r3, [r3, #20]
   196b2:	6023      	str	r3, [r4, #0]
}
   196b4:	b002      	add	sp, #8
   196b6:	bd70      	pop	{r4, r5, r6, pc}
   196b8:	2000a140 	.word	0x2000a140

000196bc <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   196bc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   196c0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   196c2:	f100 0558 	add.w	r5, r0, #88	; 0x58
   196c6:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   196c8:	2604      	movs	r6, #4
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   196ca:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
   196ce:	2500      	movs	r5, #0
{
   196d0:	4604      	mov	r4, r0
	thread_base->thread_state = (uint8_t)initial_state;
   196d2:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   196d4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   196d6:	e9c0 5506 	strd	r5, r5, [r0, #24]
   196da:	7386      	strb	r6, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   196dc:	1dd6      	adds	r6, r2, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   196de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   196e0:	f026 0607 	bic.w	r6, r6, #7
	new_thread->stack_info.size = stack_buf_size;
   196e4:	e9c0 161a 	strd	r1, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   196e8:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   196ea:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   196ec:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   196ee:	9202      	str	r2, [sp, #8]
   196f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	stack_ptr = (char *)stack + stack_obj_size;
   196f2:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   196f6:	9201      	str	r2, [sp, #4]
   196f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   196fa:	9200      	str	r2, [sp, #0]
   196fc:	4642      	mov	r2, r8
   196fe:	f7f4 f905 	bl	d90c <arch_new_thread>
	if (!_current) {
   19702:	4b05      	ldr	r3, [pc, #20]	; (19718 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
   19704:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   19706:	689b      	ldr	r3, [r3, #8]
   19708:	b103      	cbz	r3, 1970c <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
   1970a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
   1970c:	4640      	mov	r0, r8
   1970e:	6763      	str	r3, [r4, #116]	; 0x74
   19710:	b004      	add	sp, #16
   19712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19716:	bf00      	nop
   19718:	2000a140 	.word	0x2000a140

0001971c <z_impl_k_thread_create>:
{
   1971c:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1971e:	2500      	movs	r5, #0
{
   19720:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   19722:	9505      	str	r5, [sp, #20]
   19724:	9d10      	ldr	r5, [sp, #64]	; 0x40
{
   19726:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1972a:	9504      	str	r5, [sp, #16]
   1972c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
{
   1972e:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   19730:	9503      	str	r5, [sp, #12]
   19732:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   19734:	9502      	str	r5, [sp, #8]
   19736:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   19738:	9501      	str	r5, [sp, #4]
   1973a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1973c:	9500      	str	r5, [sp, #0]
   1973e:	f7ff ffbd 	bl	196bc <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   19742:	f1b6 3fff 	cmp.w	r6, #4294967295
   19746:	bf08      	it	eq
   19748:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   1974c:	d005      	beq.n	1975a <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1974e:	ea56 0307 	orrs.w	r3, r6, r7
   19752:	d105      	bne.n	19760 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   19754:	4620      	mov	r0, r4
   19756:	f000 fd85 	bl	1a264 <z_sched_start>
}
   1975a:	4620      	mov	r0, r4
   1975c:	b007      	add	sp, #28
   1975e:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   19760:	463a      	mov	r2, r7
   19762:	4633      	mov	r3, r6
   19764:	4902      	ldr	r1, [pc, #8]	; (19770 <z_impl_k_thread_create+0x54>)
   19766:	f104 0018 	add.w	r0, r4, #24
   1976a:	f000 ff83 	bl	1a674 <z_add_timeout>
   1976e:	e7f4      	b.n	1975a <z_impl_k_thread_create+0x3e>
   19770:	0002146b 	.word	0x0002146b

00019774 <z_init_static_threads>:
{
   19774:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19778:	4c29      	ldr	r4, [pc, #164]	; (19820 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   1977a:	4d2a      	ldr	r5, [pc, #168]	; (19824 <z_init_static_threads+0xb0>)
{
   1977c:	b087      	sub	sp, #28
   1977e:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   19780:	42ae      	cmp	r6, r5
   19782:	f104 0430 	add.w	r4, r4, #48	; 0x30
   19786:	d30f      	bcc.n	197a8 <z_init_static_threads+0x34>
	k_sched_lock();
   19788:	f000 fdbc 	bl	1a304 <k_sched_lock>
   1978c:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   19790:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
   19794:	4c22      	ldr	r4, [pc, #136]	; (19820 <z_init_static_threads+0xac>)
   19796:	f8df 9090 	ldr.w	r9, [pc, #144]	; 19828 <z_init_static_threads+0xb4>
   1979a:	42ac      	cmp	r4, r5
   1979c:	d320      	bcc.n	197e0 <z_init_static_threads+0x6c>
}
   1979e:	b007      	add	sp, #28
   197a0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   197a4:	f000 bdc2 	b.w	1a32c <k_sched_unlock>
		z_setup_new_thread(
   197a8:	f854 3c04 	ldr.w	r3, [r4, #-4]
   197ac:	9305      	str	r3, [sp, #20]
   197ae:	f854 3c10 	ldr.w	r3, [r4, #-16]
   197b2:	9304      	str	r3, [sp, #16]
   197b4:	f854 3c14 	ldr.w	r3, [r4, #-20]
   197b8:	9303      	str	r3, [sp, #12]
   197ba:	f854 3c18 	ldr.w	r3, [r4, #-24]
   197be:	9302      	str	r3, [sp, #8]
   197c0:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   197c4:	9301      	str	r3, [sp, #4]
   197c6:	f854 3c20 	ldr.w	r3, [r4, #-32]
   197ca:	9300      	str	r3, [sp, #0]
   197cc:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   197d0:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   197d4:	f7ff ff72 	bl	196bc <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   197d8:	f854 3c30 	ldr.w	r3, [r4, #-48]
   197dc:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   197de:	e7ce      	b.n	1977e <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   197e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   197e2:	1c5a      	adds	r2, r3, #1
   197e4:	d00d      	beq.n	19802 <z_init_static_threads+0x8e>
   197e6:	2100      	movs	r1, #0
   197e8:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
   197ea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   197ee:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   197f2:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   197f6:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   197fa:	d104      	bne.n	19806 <z_init_static_threads+0x92>
	z_sched_start(thread);
   197fc:	4640      	mov	r0, r8
   197fe:	f000 fd31 	bl	1a264 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   19802:	3430      	adds	r4, #48	; 0x30
   19804:	e7c9      	b.n	1979a <z_init_static_threads+0x26>
   19806:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1980a:	2300      	movs	r3, #0
   1980c:	f7ef fb66 	bl	8edc <__aeabi_uldivmod>
   19810:	4602      	mov	r2, r0
   19812:	460b      	mov	r3, r1
   19814:	f108 0018 	add.w	r0, r8, #24
   19818:	4649      	mov	r1, r9
   1981a:	f000 ff2b 	bl	1a674 <z_add_timeout>
   1981e:	e7f0      	b.n	19802 <z_init_static_threads+0x8e>
   19820:	00022674 	.word	0x00022674
   19824:	00022704 	.word	0x00022704
   19828:	0002146b 	.word	0x0002146b

0001982c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   1982c:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   1982e:	4c0b      	ldr	r4, [pc, #44]	; (1985c <idle+0x30>)
   19830:	4d0b      	ldr	r5, [pc, #44]	; (19860 <idle+0x34>)
	__asm__ volatile(
   19832:	f04f 0220 	mov.w	r2, #32
   19836:	f3ef 8311 	mrs	r3, BASEPRI
   1983a:	f382 8812 	msr	BASEPRI_MAX, r2
   1983e:	f3bf 8f6f 	isb	sy
   19842:	f007 ff22 	bl	2168a <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   19846:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   19848:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   1984a:	b913      	cbnz	r3, 19852 <idle+0x26>
	arch_cpu_idle();
   1984c:	f7f3 ff18 	bl	d680 <arch_cpu_idle>
}
   19850:	e7ef      	b.n	19832 <idle+0x6>
   19852:	f7f3 fcd1 	bl	d1f8 <pm_system_suspend>
   19856:	2800      	cmp	r0, #0
   19858:	d1eb      	bne.n	19832 <idle+0x6>
   1985a:	e7f7      	b.n	1984c <idle+0x20>
   1985c:	2000a140 	.word	0x2000a140
   19860:	2000a296 	.word	0x2000a296

00019864 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   19864:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   19868:	4604      	mov	r4, r0
   1986a:	4617      	mov	r7, r2
   1986c:	461e      	mov	r6, r3
   1986e:	f04f 0320 	mov.w	r3, #32
   19872:	f3ef 8811 	mrs	r8, BASEPRI
   19876:	f383 8812 	msr	BASEPRI_MAX, r3
   1987a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1987e:	68c3      	ldr	r3, [r0, #12]
   19880:	4a33      	ldr	r2, [pc, #204]	; (19950 <z_impl_k_mutex_lock+0xec>)
   19882:	b17b      	cbz	r3, 198a4 <z_impl_k_mutex_lock+0x40>
   19884:	6880      	ldr	r0, [r0, #8]
   19886:	6891      	ldr	r1, [r2, #8]
   19888:	4288      	cmp	r0, r1
   1988a:	d019      	beq.n	198c0 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1988c:	ea57 0306 	orrs.w	r3, r7, r6
   19890:	d118      	bne.n	198c4 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   19892:	f388 8811 	msr	BASEPRI, r8
   19896:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   1989a:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   1989e:	b002      	add	sp, #8
   198a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   198a4:	6891      	ldr	r1, [r2, #8]
   198a6:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   198aa:	3301      	adds	r3, #1
   198ac:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   198ae:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   198b0:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   198b2:	60a3      	str	r3, [r4, #8]
   198b4:	f388 8811 	msr	BASEPRI, r8
   198b8:	f3bf 8f6f 	isb	sy
		return 0;
   198bc:	2000      	movs	r0, #0
   198be:	e7ee      	b.n	1989e <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
   198c0:	6921      	ldr	r1, [r4, #16]
   198c2:	e7f2      	b.n	198aa <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   198c4:	f991 100e 	ldrsb.w	r1, [r1, #14]
   198c8:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   198cc:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   198d0:	4299      	cmp	r1, r3
   198d2:	bfa8      	it	ge
   198d4:	4619      	movge	r1, r3
   198d6:	4291      	cmp	r1, r2
   198d8:	bfb8      	it	lt
   198da:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   198dc:	428b      	cmp	r3, r1
   198de:	dd2e      	ble.n	1993e <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   198e0:	f007 fbae 	bl	21040 <adjust_owner_prio.isra.0>
   198e4:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   198e6:	4622      	mov	r2, r4
   198e8:	4641      	mov	r1, r8
   198ea:	e9cd 7600 	strd	r7, r6, [sp]
   198ee:	4819      	ldr	r0, [pc, #100]	; (19954 <z_impl_k_mutex_lock+0xf0>)
   198f0:	f000 fc42 	bl	1a178 <z_pend_curr>
	if (got_mutex == 0) {
   198f4:	2800      	cmp	r0, #0
   198f6:	d0e1      	beq.n	198bc <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
   198f8:	f04f 0320 	mov.w	r3, #32
   198fc:	f3ef 8611 	mrs	r6, BASEPRI
   19900:	f383 8812 	msr	BASEPRI_MAX, r3
   19904:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
   19908:	68a0      	ldr	r0, [r4, #8]
   1990a:	b1d0      	cbz	r0, 19942 <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1990c:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1990e:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19910:	429c      	cmp	r4, r3
   19912:	d00a      	beq.n	1992a <z_impl_k_mutex_lock+0xc6>
   19914:	b14b      	cbz	r3, 1992a <z_impl_k_mutex_lock+0xc6>
   19916:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1991a:	4299      	cmp	r1, r3
   1991c:	bfa8      	it	ge
   1991e:	4619      	movge	r1, r3
   19920:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   19924:	4299      	cmp	r1, r3
   19926:	bfb8      	it	lt
   19928:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   1992a:	f007 fb89 	bl	21040 <adjust_owner_prio.isra.0>
   1992e:	b140      	cbz	r0, 19942 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   19930:	4631      	mov	r1, r6
   19932:	4808      	ldr	r0, [pc, #32]	; (19954 <z_impl_k_mutex_lock+0xf0>)
   19934:	f000 fc84 	bl	1a240 <z_reschedule>
	return -EAGAIN;
   19938:	f06f 000a 	mvn.w	r0, #10
   1993c:	e7af      	b.n	1989e <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
   1993e:	2500      	movs	r5, #0
   19940:	e7d1      	b.n	198e6 <z_impl_k_mutex_lock+0x82>
	if (resched) {
   19942:	2d00      	cmp	r5, #0
   19944:	d1f4      	bne.n	19930 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   19946:	f386 8811 	msr	BASEPRI, r6
   1994a:	f3bf 8f6f 	isb	sy
   1994e:	e7f3      	b.n	19938 <z_impl_k_mutex_lock+0xd4>
   19950:	2000a140 	.word	0x2000a140
   19954:	2000a297 	.word	0x2000a297

00019958 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   19958:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   1995a:	6883      	ldr	r3, [r0, #8]
{
   1995c:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   1995e:	b36b      	cbz	r3, 199bc <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   19960:	4a19      	ldr	r2, [pc, #100]	; (199c8 <z_impl_k_mutex_unlock+0x70>)
   19962:	6892      	ldr	r2, [r2, #8]
   19964:	4293      	cmp	r3, r2
   19966:	d12c      	bne.n	199c2 <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   19968:	68c3      	ldr	r3, [r0, #12]
   1996a:	2b01      	cmp	r3, #1
   1996c:	d903      	bls.n	19976 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   1996e:	3b01      	subs	r3, #1
   19970:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   19972:	2000      	movs	r0, #0
}
   19974:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   19976:	f04f 0320 	mov.w	r3, #32
   1997a:	f3ef 8511 	mrs	r5, BASEPRI
   1997e:	f383 8812 	msr	BASEPRI_MAX, r3
   19982:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   19986:	6901      	ldr	r1, [r0, #16]
   19988:	6880      	ldr	r0, [r0, #8]
   1998a:	f007 fb59 	bl	21040 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1998e:	4620      	mov	r0, r4
   19990:	f007 fdec 	bl	2156c <z_unpend_first_thread>
	mutex->owner = new_owner;
   19994:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   19996:	b158      	cbz	r0, 199b0 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
   19998:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1999c:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1999e:	2200      	movs	r2, #0
   199a0:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   199a2:	f007 fdac 	bl	214fe <z_ready_thread>
		z_reschedule(&lock, key);
   199a6:	4629      	mov	r1, r5
   199a8:	4808      	ldr	r0, [pc, #32]	; (199cc <z_impl_k_mutex_unlock+0x74>)
   199aa:	f000 fc49 	bl	1a240 <z_reschedule>
   199ae:	e7e0      	b.n	19972 <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
   199b0:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   199b2:	f385 8811 	msr	BASEPRI, r5
   199b6:	f3bf 8f6f 	isb	sy
   199ba:	e7da      	b.n	19972 <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
   199bc:	f06f 0015 	mvn.w	r0, #21
   199c0:	e7d8      	b.n	19974 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
   199c2:	f04f 30ff 	mov.w	r0, #4294967295
   199c6:	e7d5      	b.n	19974 <z_impl_k_mutex_unlock+0x1c>
   199c8:	2000a140 	.word	0x2000a140
   199cc:	2000a297 	.word	0x2000a297

000199d0 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   199d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   199d2:	4611      	mov	r1, r2
	__asm__ volatile(
   199d4:	f04f 0220 	mov.w	r2, #32
   199d8:	f3ef 8511 	mrs	r5, BASEPRI
   199dc:	f382 8812 	msr	BASEPRI_MAX, r2
   199e0:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   199e4:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   199e6:	b19c      	cbz	r4, 19a10 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   199e8:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   199ea:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   199ec:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   199f0:	4294      	cmp	r4, r2
	list->head = node;
   199f2:	6003      	str	r3, [r0, #0]
	list->tail = node;
   199f4:	bf08      	it	eq
   199f6:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   199f8:	2101      	movs	r1, #1
   199fa:	4620      	mov	r0, r4
   199fc:	f007 fb95 	bl	2112a <z_queue_node_peek>
   19a00:	4604      	mov	r4, r0
	__asm__ volatile(
   19a02:	f385 8811 	msr	BASEPRI, r5
   19a06:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   19a0a:	4620      	mov	r0, r4
   19a0c:	b003      	add	sp, #12
   19a0e:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   19a10:	ea51 0203 	orrs.w	r2, r1, r3
   19a14:	d0f5      	beq.n	19a02 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   19a16:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   19a1a:	e9cd 1300 	strd	r1, r3, [sp]
   19a1e:	4610      	mov	r0, r2
   19a20:	4629      	mov	r1, r5
   19a22:	f000 fba9 	bl	1a178 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   19a26:	2800      	cmp	r0, #0
   19a28:	d1ef      	bne.n	19a0a <z_impl_k_queue_get+0x3a>
   19a2a:	4b02      	ldr	r3, [pc, #8]	; (19a34 <z_impl_k_queue_get+0x64>)
   19a2c:	689b      	ldr	r3, [r3, #8]
   19a2e:	695c      	ldr	r4, [r3, #20]
   19a30:	e7eb      	b.n	19a0a <z_impl_k_queue_get+0x3a>
   19a32:	bf00      	nop
   19a34:	2000a140 	.word	0x2000a140

00019a38 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   19a38:	b538      	push	{r3, r4, r5, lr}
   19a3a:	4604      	mov	r4, r0
	__asm__ volatile(
   19a3c:	f04f 0320 	mov.w	r3, #32
   19a40:	f3ef 8511 	mrs	r5, BASEPRI
   19a44:	f383 8812 	msr	BASEPRI_MAX, r3
   19a48:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   19a4c:	f007 fd8e 	bl	2156c <z_unpend_first_thread>

	if (thread != NULL) {
   19a50:	b148      	cbz	r0, 19a66 <z_impl_k_sem_give+0x2e>
   19a52:	2200      	movs	r2, #0
   19a54:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   19a56:	f007 fd52 	bl	214fe <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   19a5a:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   19a5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   19a60:	4807      	ldr	r0, [pc, #28]	; (19a80 <z_impl_k_sem_give+0x48>)
   19a62:	f000 bbed 	b.w	1a240 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   19a66:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   19a6a:	429a      	cmp	r2, r3
   19a6c:	bf18      	it	ne
   19a6e:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   19a70:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   19a72:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   19a74:	f104 0010 	add.w	r0, r4, #16
   19a78:	f007 ffc8 	bl	21a0c <z_handle_obj_poll_events>
}
   19a7c:	e7ed      	b.n	19a5a <z_impl_k_sem_give+0x22>
   19a7e:	bf00      	nop
   19a80:	2000a297 	.word	0x2000a297

00019a84 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   19a84:	b513      	push	{r0, r1, r4, lr}
   19a86:	f04f 0420 	mov.w	r4, #32
   19a8a:	f3ef 8111 	mrs	r1, BASEPRI
   19a8e:	f384 8812 	msr	BASEPRI_MAX, r4
   19a92:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   19a96:	6884      	ldr	r4, [r0, #8]
   19a98:	b144      	cbz	r4, 19aac <z_impl_k_sem_take+0x28>
		sem->count--;
   19a9a:	3c01      	subs	r4, #1
   19a9c:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   19a9e:	f381 8811 	msr	BASEPRI, r1
   19aa2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   19aa6:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   19aa8:	b002      	add	sp, #8
   19aaa:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   19aac:	ea52 0403 	orrs.w	r4, r2, r3
   19ab0:	d106      	bne.n	19ac0 <z_impl_k_sem_take+0x3c>
   19ab2:	f381 8811 	msr	BASEPRI, r1
   19ab6:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   19aba:	f06f 000f 	mvn.w	r0, #15
   19abe:	e7f3      	b.n	19aa8 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   19ac0:	e9cd 2300 	strd	r2, r3, [sp]
   19ac4:	4602      	mov	r2, r0
   19ac6:	4802      	ldr	r0, [pc, #8]	; (19ad0 <z_impl_k_sem_take+0x4c>)
   19ac8:	f000 fb56 	bl	1a178 <z_pend_curr>
	return ret;
   19acc:	e7ec      	b.n	19aa8 <z_impl_k_sem_take+0x24>
   19ace:	bf00      	nop
   19ad0:	2000a297 	.word	0x2000a297

00019ad4 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   19ad4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   19ad6:	2400      	movs	r4, #0
   19ad8:	4b08      	ldr	r3, [pc, #32]	; (19afc <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   19ada:	f44f 6280 	mov.w	r2, #1024	; 0x400
	struct k_work_queue_config cfg = {
   19ade:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
   19ae0:	ab02      	add	r3, sp, #8
   19ae2:	9300      	str	r3, [sp, #0]
   19ae4:	4906      	ldr	r1, [pc, #24]	; (19b00 <k_sys_work_q_init+0x2c>)
   19ae6:	f04f 33ff 	mov.w	r3, #4294967295
   19aea:	4806      	ldr	r0, [pc, #24]	; (19b04 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   19aec:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   19af0:	f000 f924 	bl	19d3c <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   19af4:	4620      	mov	r0, r4
   19af6:	b004      	add	sp, #16
   19af8:	bd10      	pop	{r4, pc}
   19afa:	bf00      	nop
   19afc:	00026c6b 	.word	0x00026c6b
   19b00:	2000d188 	.word	0x2000d188
   19b04:	20009c08 	.word	0x20009c08

00019b08 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   19b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19b0c:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   19b0e:	f04f 38ff 	mov.w	r8, #4294967295
   19b12:	f04f 39ff 	mov.w	r9, #4294967295
	return list->head;
   19b16:	4e48      	ldr	r6, [pc, #288]	; (19c38 <work_queue_main+0x130>)
{
   19b18:	b085      	sub	sp, #20
	__asm__ volatile(
   19b1a:	f04f 0320 	mov.w	r3, #32
   19b1e:	f3ef 8711 	mrs	r7, BASEPRI
   19b22:	f383 8812 	msr	BASEPRI_MAX, r3
   19b26:	f3bf 8f6f 	isb	sy
   19b2a:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
Z_GENLIST_GET(slist, snode)
   19b2e:	b98d      	cbnz	r5, 19b54 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   19b30:	2102      	movs	r1, #2
   19b32:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   19b36:	f007 fb74 	bl	21222 <flag_test_and_clear>
   19b3a:	2800      	cmp	r0, #0
   19b3c:	d143      	bne.n	19bc6 <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   19b3e:	2300      	movs	r3, #0
   19b40:	4639      	mov	r1, r7
   19b42:	e9cd 8900 	strd	r8, r9, [sp]
   19b46:	9302      	str	r3, [sp, #8]
   19b48:	f104 0290 	add.w	r2, r4, #144	; 0x90
   19b4c:	483b      	ldr	r0, [pc, #236]	; (19c3c <work_queue_main+0x134>)
   19b4e:	f000 fd17 	bl	1a580 <z_sched_wait>
			continue;
   19b52:	e7e2      	b.n	19b1a <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   19b54:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
	return node->next;
   19b58:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   19b5a:	4295      	cmp	r5, r2
	list->head = node;
   19b5c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	list->tail = node;
   19b60:	bf08      	it	eq
   19b62:	f8c4 308c 	streq.w	r3, [r4, #140]	; 0x8c
	*flagp |= BIT(bit);
   19b66:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   19b6a:	f043 0302 	orr.w	r3, r3, #2
   19b6e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	*flagp &= ~BIT(bit);
   19b72:	68eb      	ldr	r3, [r5, #12]
   19b74:	f023 0304 	bic.w	r3, r3, #4
   19b78:	f043 0301 	orr.w	r3, r3, #1
   19b7c:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   19b7e:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   19b80:	f387 8811 	msr	BASEPRI, r7
   19b84:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   19b88:	4628      	mov	r0, r5
   19b8a:	4798      	blx	r3
	__asm__ volatile(
   19b8c:	f04f 0320 	mov.w	r3, #32
   19b90:	f3ef 8b11 	mrs	fp, BASEPRI
   19b94:	f383 8812 	msr	BASEPRI_MAX, r3
   19b98:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   19b9c:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   19b9e:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   19ba0:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   19ba4:	d419      	bmi.n	19bda <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
   19ba6:	60ea      	str	r2, [r5, #12]
   19ba8:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   19bac:	f023 0302 	bic.w	r3, r3, #2
   19bb0:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	__asm__ volatile(
   19bb4:	f38b 8811 	msr	BASEPRI, fp
   19bb8:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   19bbc:	05db      	lsls	r3, r3, #23
   19bbe:	d4ac      	bmi.n	19b1a <work_queue_main+0x12>
	z_impl_k_yield();
   19bc0:	f000 fbdc 	bl	1a37c <z_impl_k_yield>
}
   19bc4:	e7a9      	b.n	19b1a <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   19bc6:	f104 0598 	add.w	r5, r4, #152	; 0x98
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   19bca:	2200      	movs	r2, #0
   19bcc:	2101      	movs	r1, #1
   19bce:	4628      	mov	r0, r5
   19bd0:	f007 fd22 	bl	21618 <z_sched_wake>
   19bd4:	2800      	cmp	r0, #0
   19bd6:	d1f8      	bne.n	19bca <work_queue_main+0xc2>
   19bd8:	e7b1      	b.n	19b3e <work_queue_main+0x36>
	return list->head;
   19bda:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   19bdc:	f023 0303 	bic.w	r3, r3, #3
   19be0:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   19be2:	2800      	cmp	r0, #0
   19be4:	d0e0      	beq.n	19ba8 <work_queue_main+0xa0>
	return node->next;
   19be6:	2700      	movs	r7, #0
	parent->next = child;
   19be8:	463b      	mov	r3, r7
	return node->next;
   19bea:	f8d0 a000 	ldr.w	sl, [r0]
   19bee:	2800      	cmp	r0, #0
   19bf0:	d0da      	beq.n	19ba8 <work_queue_main+0xa0>
		if (wc->work == work) {
   19bf2:	6842      	ldr	r2, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   19bf4:	4601      	mov	r1, r0
		if (wc->work == work) {
   19bf6:	4295      	cmp	r5, r2
   19bf8:	d10c      	bne.n	19c14 <work_queue_main+0x10c>
   19bfa:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   19bfc:	b99f      	cbnz	r7, 19c26 <work_queue_main+0x11e>
   19bfe:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   19c00:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   19c02:	4282      	cmp	r2, r0
   19c04:	d100      	bne.n	19c08 <work_queue_main+0x100>
	list->tail = node;
   19c06:	6071      	str	r1, [r6, #4]
	parent->next = child;
   19c08:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   19c0c:	f7ff ff14 	bl	19a38 <z_impl_k_sem_give>
}
   19c10:	4639      	mov	r1, r7
   19c12:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   19c14:	f1ba 0f00 	cmp.w	sl, #0
   19c18:	d00b      	beq.n	19c32 <work_queue_main+0x12a>
	return node->next;
   19c1a:	f8da 2000 	ldr.w	r2, [sl]
   19c1e:	4650      	mov	r0, sl
   19c20:	460f      	mov	r7, r1
   19c22:	4692      	mov	sl, r2
   19c24:	e7e3      	b.n	19bee <work_queue_main+0xe6>
	parent->next = child;
   19c26:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   19c28:	6872      	ldr	r2, [r6, #4]
   19c2a:	4282      	cmp	r2, r0
	list->tail = node;
   19c2c:	bf08      	it	eq
   19c2e:	6077      	streq	r7, [r6, #4]
}
   19c30:	e7ea      	b.n	19c08 <work_queue_main+0x100>
   19c32:	4652      	mov	r2, sl
   19c34:	e7f3      	b.n	19c1e <work_queue_main+0x116>
   19c36:	bf00      	nop
   19c38:	2000a168 	.word	0x2000a168
   19c3c:	2000a297 	.word	0x2000a297

00019c40 <cancel_sync_locked>:
{
   19c40:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   19c42:	68c3      	ldr	r3, [r0, #12]
{
   19c44:	4605      	mov	r5, r0
	return (*flagp & BIT(bit)) != 0U;
   19c46:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   19c4a:	079b      	lsls	r3, r3, #30
{
   19c4c:	460c      	mov	r4, r1
	if (ret) {
   19c4e:	d50d      	bpl.n	19c6c <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   19c50:	2201      	movs	r2, #1
   19c52:	2100      	movs	r1, #0
   19c54:	f104 0008 	add.w	r0, r4, #8
   19c58:	f007 fad3 	bl	21202 <z_impl_k_sem_init>
	parent->next = child;
   19c5c:	2300      	movs	r3, #0
   19c5e:	6023      	str	r3, [r4, #0]
	return list->tail;
   19c60:	4b05      	ldr	r3, [pc, #20]	; (19c78 <cancel_sync_locked+0x38>)
	canceler->work = work;
   19c62:	6065      	str	r5, [r4, #4]
   19c64:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   19c66:	b91a      	cbnz	r2, 19c70 <cancel_sync_locked+0x30>
	list->head = node;
   19c68:	e9c3 4400 	strd	r4, r4, [r3]
}
   19c6c:	4630      	mov	r0, r6
   19c6e:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   19c70:	6014      	str	r4, [r2, #0]
	list->tail = node;
   19c72:	605c      	str	r4, [r3, #4]
}
   19c74:	e7fa      	b.n	19c6c <cancel_sync_locked+0x2c>
   19c76:	bf00      	nop
   19c78:	2000a168 	.word	0x2000a168

00019c7c <submit_to_queue_locked>:
{
   19c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   19c7e:	68c3      	ldr	r3, [r0, #12]
{
   19c80:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   19c82:	079a      	lsls	r2, r3, #30
{
   19c84:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   19c86:	f3c3 0640 	ubfx	r6, r3, #1, #1
   19c8a:	d42c      	bmi.n	19ce6 <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   19c8c:	075b      	lsls	r3, r3, #29
   19c8e:	d41a      	bmi.n	19cc6 <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
   19c90:	680b      	ldr	r3, [r1, #0]
   19c92:	b90b      	cbnz	r3, 19c98 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   19c94:	6883      	ldr	r3, [r0, #8]
   19c96:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   19c98:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   19c9a:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
   19c9c:	bf42      	ittt	mi
   19c9e:	68a3      	ldrmi	r3, [r4, #8]
			ret = 2;
   19ca0:	2602      	movmi	r6, #2
			*queuep = work->queue;
   19ca2:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   19ca4:	683d      	ldr	r5, [r7, #0]
		ret = 1;
   19ca6:	bf58      	it	pl
   19ca8:	2601      	movpl	r6, #1
	if (queue == NULL) {
   19caa:	2d00      	cmp	r5, #0
   19cac:	d03a      	beq.n	19d24 <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   19cae:	4b1f      	ldr	r3, [pc, #124]	; (19d2c <submit_to_queue_locked+0xb0>)
   19cb0:	689b      	ldr	r3, [r3, #8]
   19cb2:	42ab      	cmp	r3, r5
   19cb4:	d00a      	beq.n	19ccc <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
   19cb6:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   19cba:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   19cbc:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   19cc0:	d414      	bmi.n	19cec <submit_to_queue_locked+0x70>
		ret = -EBUSY;
   19cc2:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   19cc6:	2300      	movs	r3, #0
   19cc8:	603b      	str	r3, [r7, #0]
	return ret;
   19cca:	e025      	b.n	19d18 <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   19ccc:	f007 f9a4 	bl	21018 <k_is_in_isr>
   19cd0:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
   19cd4:	2800      	cmp	r0, #0
   19cd6:	d1f0      	bne.n	19cba <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   19cd8:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   19cda:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   19cde:	d5f0      	bpl.n	19cc2 <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
   19ce0:	b152      	cbz	r2, 19cf8 <submit_to_queue_locked+0x7c>
   19ce2:	075b      	lsls	r3, r3, #29
   19ce4:	d408      	bmi.n	19cf8 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   19ce6:	f06f 060f 	mvn.w	r6, #15
   19cea:	e7ec      	b.n	19cc6 <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
   19cec:	2a00      	cmp	r2, #0
   19cee:	d1fa      	bne.n	19ce6 <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   19cf0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   19cf4:	2b00      	cmp	r3, #0
   19cf6:	d1f6      	bne.n	19ce6 <submit_to_queue_locked+0x6a>
	parent->next = child;
   19cf8:	2300      	movs	r3, #0
   19cfa:	6023      	str	r3, [r4, #0]
	return list->tail;
   19cfc:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
Z_GENLIST_APPEND(slist, snode)
   19d00:	b963      	cbnz	r3, 19d1c <submit_to_queue_locked+0xa0>
	list->head = node;
   19d02:	e9c5 4422 	strd	r4, r4, [r5, #136]	; 0x88
		(void)notify_queue_locked(queue);
   19d06:	4628      	mov	r0, r5
   19d08:	f007 faa4 	bl	21254 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   19d0c:	68e3      	ldr	r3, [r4, #12]
   19d0e:	f043 0304 	orr.w	r3, r3, #4
   19d12:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   19d14:	683b      	ldr	r3, [r7, #0]
   19d16:	60a3      	str	r3, [r4, #8]
}
   19d18:	4630      	mov	r0, r6
   19d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   19d1c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   19d1e:	f8c5 408c 	str.w	r4, [r5, #140]	; 0x8c
}
   19d22:	e7f0      	b.n	19d06 <submit_to_queue_locked+0x8a>
		return -EINVAL;
   19d24:	f06f 0615 	mvn.w	r6, #21
   19d28:	e7cd      	b.n	19cc6 <submit_to_queue_locked+0x4a>
   19d2a:	bf00      	nop
   19d2c:	2000a140 	.word	0x2000a140

00019d30 <k_work_submit>:
{
   19d30:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   19d32:	4801      	ldr	r0, [pc, #4]	; (19d38 <k_work_submit+0x8>)
   19d34:	f007 bb14 	b.w	21360 <k_work_submit_to_queue>
   19d38:	20009c08 	.word	0x20009c08

00019d3c <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   19d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   19d3e:	4604      	mov	r4, r0
	list->head = NULL;
   19d40:	2000      	movs	r0, #0
   19d42:	b089      	sub	sp, #36	; 0x24
	list->tail = NULL;
   19d44:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   19d48:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   19d4a:	f104 0090 	add.w	r0, r4, #144	; 0x90
	list->tail = (sys_dnode_t *)list;
   19d4e:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90
   19d52:	f104 0098 	add.w	r0, r4, #152	; 0x98
   19d56:	e9c4 0026 	strd	r0, r0, [r4, #152]	; 0x98

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   19d5a:	b31d      	cbz	r5, 19da4 <k_work_queue_start+0x68>
   19d5c:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   19d5e:	2800      	cmp	r0, #0
   19d60:	f240 1001 	movw	r0, #257	; 0x101
   19d64:	bf08      	it	eq
   19d66:	2001      	moveq	r0, #1
	*flagp = flags;
   19d68:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   19d6c:	2000      	movs	r0, #0
   19d6e:	f04f 36ff 	mov.w	r6, #4294967295
   19d72:	f04f 37ff 	mov.w	r7, #4294967295
   19d76:	e9cd 3003 	strd	r3, r0, [sp, #12]
   19d7a:	e9cd 0001 	strd	r0, r0, [sp, #4]
   19d7e:	e9cd 6706 	strd	r6, r7, [sp, #24]
   19d82:	4620      	mov	r0, r4
   19d84:	4b08      	ldr	r3, [pc, #32]	; (19da8 <k_work_queue_start+0x6c>)
   19d86:	9400      	str	r4, [sp, #0]
   19d88:	f7ff fcc8 	bl	1971c <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   19d8c:	b125      	cbz	r5, 19d98 <k_work_queue_start+0x5c>
   19d8e:	6829      	ldr	r1, [r5, #0]
   19d90:	b111      	cbz	r1, 19d98 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   19d92:	4620      	mov	r0, r4
   19d94:	f007 f946 	bl	21024 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   19d98:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   19d9a:	b009      	add	sp, #36	; 0x24
   19d9c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   19da0:	f007 b945 	b.w	2102e <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   19da4:	2001      	movs	r0, #1
   19da6:	e7df      	b.n	19d68 <k_work_queue_start+0x2c>
   19da8:	00019b09 	.word	0x00019b09

00019dac <k_work_queue_drain>:

int k_work_queue_drain(struct k_work_q *queue,
		       bool plug)
{
   19dac:	b530      	push	{r4, r5, lr}
   19dae:	460a      	mov	r2, r1
   19db0:	4604      	mov	r4, r0
   19db2:	b085      	sub	sp, #20
	__asm__ volatile(
   19db4:	f04f 0320 	mov.w	r3, #32
   19db8:	f3ef 8511 	mrs	r5, BASEPRI
   19dbc:	f383 8812 	msr	BASEPRI_MAX, r3
   19dc0:	f3bf 8f6f 	isb	sy
	return *flagp;
   19dc4:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work_queue, drain, queue);

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (((flags_get(&queue->flags)
   19dc8:	f013 0f06 	tst.w	r3, #6
   19dcc:	d11d      	bne.n	19e0a <k_work_queue_drain+0x5e>
	      & (K_WORK_QUEUE_BUSY | K_WORK_QUEUE_DRAIN)) != 0U)
	    || plug
   19dce:	b1b1      	cbz	r1, 19dfe <k_work_queue_drain+0x52>
	*flagp |= BIT(bit);
   19dd0:	f043 030c 	orr.w	r3, r3, #12
   19dd4:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		flag_set(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
		if (plug) {
			flag_set(&queue->flags, K_WORK_QUEUE_PLUGGED_BIT);
		}

		notify_queue_locked(queue);
   19dd8:	4620      	mov	r0, r4
   19dda:	f007 fa3b 	bl	21254 <notify_queue_locked.isra.0>
		ret = z_sched_wait(&lock, key, &queue->drainq,
   19dde:	2300      	movs	r3, #0
   19de0:	f04f 32ff 	mov.w	r2, #4294967295
   19de4:	9302      	str	r3, [sp, #8]
   19de6:	f04f 33ff 	mov.w	r3, #4294967295
   19dea:	4629      	mov	r1, r5
   19dec:	e9cd 2300 	strd	r2, r3, [sp]
   19df0:	480c      	ldr	r0, [pc, #48]	; (19e24 <k_work_queue_drain+0x78>)
   19df2:	f104 0298 	add.w	r2, r4, #152	; 0x98
   19df6:	f000 fbc3 	bl	1a580 <z_sched_wait>
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, drain, queue, ret);

	return ret;
}
   19dfa:	b005      	add	sp, #20
   19dfc:	bd30      	pop	{r4, r5, pc}
	    || !sys_slist_is_empty(&queue->pending)) {
   19dfe:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
   19e02:	b148      	cbz	r0, 19e18 <k_work_queue_drain+0x6c>
	*flagp |= BIT(bit);
   19e04:	f043 0304 	orr.w	r3, r3, #4
   19e08:	e7e4      	b.n	19dd4 <k_work_queue_drain+0x28>
   19e0a:	f043 0104 	orr.w	r1, r3, #4
   19e0e:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
		if (plug) {
   19e12:	2a00      	cmp	r2, #0
   19e14:	d0e0      	beq.n	19dd8 <k_work_queue_drain+0x2c>
   19e16:	e7db      	b.n	19dd0 <k_work_queue_drain+0x24>
	__asm__ volatile(
   19e18:	f385 8811 	msr	BASEPRI, r5
   19e1c:	f3bf 8f6f 	isb	sy
	return ret;
   19e20:	e7eb      	b.n	19dfa <k_work_queue_drain+0x4e>
   19e22:	bf00      	nop
   19e24:	2000a297 	.word	0x2000a297

00019e28 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   19e28:	b537      	push	{r0, r1, r2, r4, r5, lr}
   19e2a:	9001      	str	r0, [sp, #4]
   19e2c:	4608      	mov	r0, r1
	__asm__ volatile(
   19e2e:	f04f 0120 	mov.w	r1, #32
   19e32:	f3ef 8411 	mrs	r4, BASEPRI
   19e36:	f381 8812 	msr	BASEPRI_MAX, r1
   19e3a:	f3bf 8f6f 	isb	sy
	return *flagp;
   19e3e:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   19e40:	f011 0f0e 	tst.w	r1, #14
   19e44:	d116      	bne.n	19e74 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   19e46:	ea53 0502 	orrs.w	r5, r3, r2
   19e4a:	d108      	bne.n	19e5e <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   19e4c:	a901      	add	r1, sp, #4
   19e4e:	f7ff ff15 	bl	19c7c <submit_to_queue_locked>
	__asm__ volatile(
   19e52:	f384 8811 	msr	BASEPRI, r4
   19e56:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   19e5a:	b003      	add	sp, #12
   19e5c:	bd30      	pop	{r4, r5, pc}
	*flagp |= BIT(bit);
   19e5e:	f041 0108 	orr.w	r1, r1, #8
   19e62:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   19e64:	9901      	ldr	r1, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   19e66:	3010      	adds	r0, #16
	dwork->queue = *queuep;
   19e68:	6181      	str	r1, [r0, #24]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   19e6a:	4903      	ldr	r1, [pc, #12]	; (19e78 <k_work_schedule_for_queue+0x50>)
   19e6c:	f000 fc02 	bl	1a674 <z_add_timeout>
	return ret;
   19e70:	2001      	movs	r0, #1
   19e72:	e7ee      	b.n	19e52 <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   19e74:	2000      	movs	r0, #0
   19e76:	e7ec      	b.n	19e52 <k_work_schedule_for_queue+0x2a>
   19e78:	000212c9 	.word	0x000212c9

00019e7c <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   19e7c:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   19e7e:	4801      	ldr	r0, [pc, #4]	; (19e84 <k_work_schedule+0x8>)
   19e80:	f7ff bfd2 	b.w	19e28 <k_work_schedule_for_queue>
   19e84:	20009c08 	.word	0x20009c08

00019e88 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   19e88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   19e8a:	460c      	mov	r4, r1
   19e8c:	4616      	mov	r6, r2
   19e8e:	461d      	mov	r5, r3
   19e90:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
   19e92:	f04f 0320 	mov.w	r3, #32
   19e96:	f3ef 8711 	mrs	r7, BASEPRI
   19e9a:	f383 8812 	msr	BASEPRI_MAX, r3
   19e9e:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   19ea2:	4608      	mov	r0, r1
   19ea4:	f007 f9c8 	bl	21238 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   19ea8:	ea55 0306 	orrs.w	r3, r5, r6
   19eac:	d109      	bne.n	19ec2 <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   19eae:	4620      	mov	r0, r4
   19eb0:	a901      	add	r1, sp, #4
   19eb2:	f7ff fee3 	bl	19c7c <submit_to_queue_locked>
	__asm__ volatile(
   19eb6:	f387 8811 	msr	BASEPRI, r7
   19eba:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   19ebe:	b003      	add	sp, #12
   19ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   19ec2:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   19ec4:	f104 0010 	add.w	r0, r4, #16
	*flagp |= BIT(bit);
   19ec8:	f043 0308 	orr.w	r3, r3, #8
   19ecc:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   19ece:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   19ed0:	4632      	mov	r2, r6
	dwork->queue = *queuep;
   19ed2:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   19ed4:	4902      	ldr	r1, [pc, #8]	; (19ee0 <k_work_reschedule_for_queue+0x58>)
   19ed6:	462b      	mov	r3, r5
   19ed8:	f000 fbcc 	bl	1a674 <z_add_timeout>
	return ret;
   19edc:	2001      	movs	r0, #1
   19ede:	e7ea      	b.n	19eb6 <k_work_reschedule_for_queue+0x2e>
   19ee0:	000212c9 	.word	0x000212c9

00019ee4 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   19ee4:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   19ee6:	4801      	ldr	r0, [pc, #4]	; (19eec <k_work_reschedule+0x8>)
   19ee8:	f7ff bfce 	b.w	19e88 <k_work_reschedule_for_queue>
   19eec:	20009c08 	.word	0x20009c08

00019ef0 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   19ef0:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   19ef2:	4d07      	ldr	r5, [pc, #28]	; (19f10 <z_reset_time_slice+0x20>)
   19ef4:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   19ef6:	b154      	cbz	r4, 19f0e <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   19ef8:	f7fd fddc 	bl	17ab4 <sys_clock_elapsed>
   19efc:	4b05      	ldr	r3, [pc, #20]	; (19f14 <z_reset_time_slice+0x24>)
   19efe:	4404      	add	r4, r0
   19f00:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   19f02:	6828      	ldr	r0, [r5, #0]
   19f04:	2100      	movs	r1, #0
	}
}
   19f06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   19f0a:	f007 bbce 	b.w	216aa <z_set_timeout_expiry>
}
   19f0e:	bd38      	pop	{r3, r4, r5, pc}
   19f10:	2000a178 	.word	0x2000a178
   19f14:	2000a140 	.word	0x2000a140

00019f18 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   19f18:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   19f1a:	4d0d      	ldr	r5, [pc, #52]	; (19f50 <update_cache+0x38>)
   19f1c:	462b      	mov	r3, r5
   19f1e:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19f22:	429c      	cmp	r4, r3
   19f24:	d000      	beq.n	19f28 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   19f26:	b904      	cbnz	r4, 19f2a <update_cache+0x12>
   19f28:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   19f2a:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   19f2c:	b938      	cbnz	r0, 19f3e <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
   19f2e:	7b5a      	ldrb	r2, [r3, #13]
   19f30:	06d2      	lsls	r2, r2, #27
   19f32:	d104      	bne.n	19f3e <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   19f34:	69a2      	ldr	r2, [r4, #24]
   19f36:	b912      	cbnz	r2, 19f3e <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
   19f38:	89da      	ldrh	r2, [r3, #14]
   19f3a:	2a7f      	cmp	r2, #127	; 0x7f
   19f3c:	d805      	bhi.n	19f4a <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   19f3e:	429c      	cmp	r4, r3
   19f40:	d002      	beq.n	19f48 <update_cache+0x30>
			z_reset_time_slice(thread);
   19f42:	4620      	mov	r0, r4
   19f44:	f7ff ffd4 	bl	19ef0 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   19f48:	4623      	mov	r3, r4
   19f4a:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   19f4c:	bd38      	pop	{r3, r4, r5, pc}
   19f4e:	bf00      	nop
   19f50:	2000a140 	.word	0x2000a140

00019f54 <move_thread_to_end_of_prio_q>:
{
   19f54:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   19f56:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   19f5a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   19f5c:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   19f5e:	7b43      	ldrb	r3, [r0, #13]
   19f60:	da04      	bge.n	19f6c <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   19f62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   19f66:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   19f68:	f007 fa64 	bl	21434 <sys_dlist_remove>
	return list->head == list;
   19f6c:	4a15      	ldr	r2, [pc, #84]	; (19fc4 <move_thread_to_end_of_prio_q+0x70>)
	thread->base.thread_state |= _THREAD_QUEUED;
   19f6e:	7b4b      	ldrb	r3, [r1, #13]
   19f70:	4610      	mov	r0, r2
   19f72:	f063 037f 	orn	r3, r3, #127	; 0x7f
   19f76:	734b      	strb	r3, [r1, #13]
   19f78:	f850 3f20 	ldr.w	r3, [r0, #32]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   19f7c:	6a54      	ldr	r4, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19f7e:	4283      	cmp	r3, r0
   19f80:	bf08      	it	eq
   19f82:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   19f84:	b923      	cbnz	r3, 19f90 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   19f86:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
   19f8a:	6021      	str	r1, [r4, #0]
	list->tail = node;
   19f8c:	6251      	str	r1, [r2, #36]	; 0x24
}
   19f8e:	e00c      	b.n	19faa <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
   19f90:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   19f94:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   19f98:	42b5      	cmp	r5, r6
   19f9a:	d00e      	beq.n	19fba <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
   19f9c:	42ae      	cmp	r6, r5
   19f9e:	dd0c      	ble.n	19fba <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   19fa0:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   19fa2:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   19fa6:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   19fa8:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   19faa:	6890      	ldr	r0, [r2, #8]
}
   19fac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   19fb0:	1a43      	subs	r3, r0, r1
   19fb2:	4258      	negs	r0, r3
   19fb4:	4158      	adcs	r0, r3
   19fb6:	f7ff bfaf 	b.w	19f18 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   19fba:	429c      	cmp	r4, r3
   19fbc:	d0e3      	beq.n	19f86 <move_thread_to_end_of_prio_q+0x32>
   19fbe:	681b      	ldr	r3, [r3, #0]
   19fc0:	e7e0      	b.n	19f84 <move_thread_to_end_of_prio_q+0x30>
   19fc2:	bf00      	nop
   19fc4:	2000a140 	.word	0x2000a140

00019fc8 <ready_thread>:
{
   19fc8:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   19fca:	f990 300d 	ldrsb.w	r3, [r0, #13]
   19fce:	7b42      	ldrb	r2, [r0, #13]
   19fd0:	2b00      	cmp	r3, #0
   19fd2:	db29      	blt.n	1a028 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   19fd4:	06d3      	lsls	r3, r2, #27
   19fd6:	d127      	bne.n	1a028 <ready_thread+0x60>
	return node->next != NULL;
   19fd8:	6983      	ldr	r3, [r0, #24]
   19fda:	bb2b      	cbnz	r3, 1a028 <ready_thread+0x60>
	return list->head == list;
   19fdc:	4913      	ldr	r1, [pc, #76]	; (1a02c <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
   19fde:	f062 027f 	orn	r2, r2, #127	; 0x7f
   19fe2:	7342      	strb	r2, [r0, #13]
   19fe4:	460a      	mov	r2, r1
   19fe6:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19fea:	4294      	cmp	r4, r2
   19fec:	bf18      	it	ne
   19fee:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
   19ff0:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   19ff2:	b923      	cbnz	r3, 19ffe <ready_thread+0x36>
	node->prev = tail;
   19ff4:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
   19ff8:	6020      	str	r0, [r4, #0]
	list->tail = node;
   19ffa:	6248      	str	r0, [r1, #36]	; 0x24
}
   19ffc:	e00c      	b.n	1a018 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
   19ffe:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1a002:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   1a006:	42b5      	cmp	r5, r6
   1a008:	d00a      	beq.n	1a020 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1a00a:	42ae      	cmp	r6, r5
   1a00c:	dd08      	ble.n	1a020 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
   1a00e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1a010:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   1a014:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1a016:	6058      	str	r0, [r3, #4]
		update_cache(0);
   1a018:	2000      	movs	r0, #0
}
   1a01a:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   1a01c:	f7ff bf7c 	b.w	19f18 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1a020:	42a3      	cmp	r3, r4
   1a022:	d0e7      	beq.n	19ff4 <ready_thread+0x2c>
   1a024:	681b      	ldr	r3, [r3, #0]
   1a026:	e7e4      	b.n	19ff2 <ready_thread+0x2a>
}
   1a028:	bc70      	pop	{r4, r5, r6}
   1a02a:	4770      	bx	lr
   1a02c:	2000a140 	.word	0x2000a140

0001a030 <unready_thread>:
{
   1a030:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1a032:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   1a036:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1a038:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   1a03a:	7b43      	ldrb	r3, [r0, #13]
   1a03c:	da04      	bge.n	1a048 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1a03e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1a042:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1a044:	f007 f9f6 	bl	21434 <sys_dlist_remove>
	update_cache(thread == _current);
   1a048:	4b04      	ldr	r3, [pc, #16]	; (1a05c <unready_thread+0x2c>)
   1a04a:	6898      	ldr	r0, [r3, #8]
   1a04c:	1a43      	subs	r3, r0, r1
   1a04e:	4258      	negs	r0, r3
   1a050:	4158      	adcs	r0, r3
}
   1a052:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   1a056:	f7ff bf5f 	b.w	19f18 <update_cache>
   1a05a:	bf00      	nop
   1a05c:	2000a140 	.word	0x2000a140

0001a060 <pend_locked>:
{
   1a060:	b570      	push	{r4, r5, r6, lr}
   1a062:	4615      	mov	r5, r2
   1a064:	461c      	mov	r4, r3
   1a066:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   1a068:	f007 fa21 	bl	214ae <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1a06c:	f1b4 3fff 	cmp.w	r4, #4294967295
   1a070:	bf08      	it	eq
   1a072:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   1a076:	d008      	beq.n	1a08a <pend_locked+0x2a>
   1a078:	462a      	mov	r2, r5
   1a07a:	4623      	mov	r3, r4
   1a07c:	f106 0018 	add.w	r0, r6, #24
   1a080:	4902      	ldr	r1, [pc, #8]	; (1a08c <pend_locked+0x2c>)
}
   1a082:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1a086:	f000 baf5 	b.w	1a674 <z_add_timeout>
   1a08a:	bd70      	pop	{r4, r5, r6, pc}
   1a08c:	0002146b 	.word	0x0002146b

0001a090 <k_sched_time_slice_set>:
{
   1a090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a092:	4604      	mov	r4, r0
   1a094:	460d      	mov	r5, r1
	__asm__ volatile(
   1a096:	f04f 0320 	mov.w	r3, #32
   1a09a:	f3ef 8711 	mrs	r7, BASEPRI
   1a09e:	f383 8812 	msr	BASEPRI_MAX, r3
   1a0a2:	f3bf 8f6f 	isb	sy
			return (uint32_t)((t * to_hz + off) / from_hz);
   1a0a6:	2600      	movs	r6, #0
   1a0a8:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   1a0ac:	f240 30e7 	movw	r0, #999	; 0x3e7
   1a0b0:	4631      	mov	r1, r6
   1a0b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a0b6:	2300      	movs	r3, #0
   1a0b8:	fbe4 010c 	umlal	r0, r1, r4, ip
   1a0bc:	f7ee ff0e 	bl	8edc <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   1a0c0:	42b4      	cmp	r4, r6
   1a0c2:	dd02      	ble.n	1a0ca <k_sched_time_slice_set+0x3a>
			slice_ticks = MAX(2, slice_ticks);
   1a0c4:	2802      	cmp	r0, #2
   1a0c6:	bfb8      	it	lt
   1a0c8:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   1a0ca:	4a07      	ldr	r2, [pc, #28]	; (1a0e8 <k_sched_time_slice_set+0x58>)
		_current_cpu->slice_ticks = 0;
   1a0cc:	4b07      	ldr	r3, [pc, #28]	; (1a0ec <k_sched_time_slice_set+0x5c>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   1a0ce:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
   1a0d0:	4a07      	ldr	r2, [pc, #28]	; (1a0f0 <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
   1a0d2:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
   1a0d4:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
   1a0d6:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
   1a0d8:	f7ff ff0a 	bl	19ef0 <z_reset_time_slice>
	__asm__ volatile(
   1a0dc:	f387 8811 	msr	BASEPRI, r7
   1a0e0:	f3bf 8f6f 	isb	sy
}
   1a0e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a0e6:	bf00      	nop
   1a0e8:	2000a178 	.word	0x2000a178
   1a0ec:	2000a140 	.word	0x2000a140
   1a0f0:	2000a174 	.word	0x2000a174

0001a0f4 <z_time_slice>:
{
   1a0f4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1a0f6:	f04f 0320 	mov.w	r3, #32
   1a0fa:	f3ef 8511 	mrs	r5, BASEPRI
   1a0fe:	f383 8812 	msr	BASEPRI_MAX, r3
   1a102:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   1a106:	4b17      	ldr	r3, [pc, #92]	; (1a164 <z_time_slice+0x70>)
   1a108:	4a17      	ldr	r2, [pc, #92]	; (1a168 <z_time_slice+0x74>)
   1a10a:	689c      	ldr	r4, [r3, #8]
   1a10c:	6811      	ldr	r1, [r2, #0]
   1a10e:	428c      	cmp	r4, r1
   1a110:	d107      	bne.n	1a122 <z_time_slice+0x2e>
	z_reset_time_slice(curr);
   1a112:	4620      	mov	r0, r4
   1a114:	f7ff feec 	bl	19ef0 <z_reset_time_slice>
	__asm__ volatile(
   1a118:	f385 8811 	msr	BASEPRI, r5
   1a11c:	f3bf 8f6f 	isb	sy
}
   1a120:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   1a122:	2100      	movs	r1, #0
   1a124:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   1a126:	4a11      	ldr	r2, [pc, #68]	; (1a16c <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
   1a128:	6812      	ldr	r2, [r2, #0]
   1a12a:	b1c2      	cbz	r2, 1a15e <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1a12c:	89e2      	ldrh	r2, [r4, #14]
   1a12e:	2a7f      	cmp	r2, #127	; 0x7f
   1a130:	d815      	bhi.n	1a15e <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   1a132:	7b62      	ldrb	r2, [r4, #13]
   1a134:	06d2      	lsls	r2, r2, #27
   1a136:	d112      	bne.n	1a15e <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1a138:	4a0d      	ldr	r2, [pc, #52]	; (1a170 <z_time_slice+0x7c>)
   1a13a:	f994 100e 	ldrsb.w	r1, [r4, #14]
   1a13e:	6812      	ldr	r2, [r2, #0]
   1a140:	4291      	cmp	r1, r2
   1a142:	db0c      	blt.n	1a15e <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1a144:	4a0b      	ldr	r2, [pc, #44]	; (1a174 <z_time_slice+0x80>)
   1a146:	4294      	cmp	r4, r2
   1a148:	d009      	beq.n	1a15e <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   1a14a:	691a      	ldr	r2, [r3, #16]
   1a14c:	4282      	cmp	r2, r0
   1a14e:	dc03      	bgt.n	1a158 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
   1a150:	4620      	mov	r0, r4
   1a152:	f7ff feff 	bl	19f54 <move_thread_to_end_of_prio_q>
   1a156:	e7dc      	b.n	1a112 <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
   1a158:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
   1a15a:	611a      	str	r2, [r3, #16]
   1a15c:	e7dc      	b.n	1a118 <z_time_slice+0x24>
   1a15e:	2200      	movs	r2, #0
   1a160:	e7fb      	b.n	1a15a <z_time_slice+0x66>
   1a162:	bf00      	nop
   1a164:	2000a140 	.word	0x2000a140
   1a168:	2000a170 	.word	0x2000a170
   1a16c:	2000a178 	.word	0x2000a178
   1a170:	2000a174 	.word	0x2000a174
   1a174:	20009af8 	.word	0x20009af8

0001a178 <z_pend_curr>:
{
   1a178:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
   1a17a:	480c      	ldr	r0, [pc, #48]	; (1a1ac <z_pend_curr+0x34>)
   1a17c:	4d0c      	ldr	r5, [pc, #48]	; (1a1b0 <z_pend_curr+0x38>)
   1a17e:	6886      	ldr	r6, [r0, #8]
{
   1a180:	460c      	mov	r4, r1
	pending_current = _current;
   1a182:	602e      	str	r6, [r5, #0]
{
   1a184:	4611      	mov	r1, r2
   1a186:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
   1a18a:	f04f 0620 	mov.w	r6, #32
   1a18e:	f3ef 8511 	mrs	r5, BASEPRI
   1a192:	f386 8812 	msr	BASEPRI_MAX, r6
   1a196:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
   1a19a:	6880      	ldr	r0, [r0, #8]
   1a19c:	f7ff ff60 	bl	1a060 <pend_locked>
	ret = arch_swap(key);
   1a1a0:	4620      	mov	r0, r4
}
   1a1a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1a1a6:	f7f3 bb57 	b.w	d858 <arch_swap>
   1a1aa:	bf00      	nop
   1a1ac:	2000a140 	.word	0x2000a140
   1a1b0:	2000a170 	.word	0x2000a170

0001a1b4 <z_set_prio>:
{
   1a1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a1b6:	4604      	mov	r4, r0
   1a1b8:	f04f 0320 	mov.w	r3, #32
   1a1bc:	f3ef 8611 	mrs	r6, BASEPRI
   1a1c0:	f383 8812 	msr	BASEPRI_MAX, r3
   1a1c4:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   1a1c8:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
   1a1ca:	b249      	sxtb	r1, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1a1cc:	06da      	lsls	r2, r3, #27
   1a1ce:	d119      	bne.n	1a204 <z_set_prio+0x50>
	return node->next != NULL;
   1a1d0:	6985      	ldr	r5, [r0, #24]
   1a1d2:	b9bd      	cbnz	r5, 1a204 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1a1d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1a1d8:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1a1da:	f007 f92b 	bl	21434 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1a1de:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   1a1e0:	4a16      	ldr	r2, [pc, #88]	; (1a23c <z_set_prio+0x88>)
   1a1e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1a1e6:	7343      	strb	r3, [r0, #13]
   1a1e8:	4613      	mov	r3, r2
				thread->base.prio = prio;
   1a1ea:	7381      	strb	r1, [r0, #14]
   1a1ec:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a1f0:	4298      	cmp	r0, r3
   1a1f2:	bf18      	it	ne
   1a1f4:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
   1a1f6:	6a50      	ldr	r0, [r2, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1a1f8:	b95d      	cbnz	r5, 1a212 <z_set_prio+0x5e>
	node->prev = tail;
   1a1fa:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
   1a1fe:	6004      	str	r4, [r0, #0]
	list->tail = node;
   1a200:	6254      	str	r4, [r2, #36]	; 0x24
}
   1a202:	e011      	b.n	1a228 <z_set_prio+0x74>
   1a204:	2000      	movs	r0, #0
			thread->base.prio = prio;
   1a206:	73a1      	strb	r1, [r4, #14]
	__asm__ volatile(
   1a208:	f386 8811 	msr	BASEPRI, r6
   1a20c:	f3bf 8f6f 	isb	sy
}
   1a210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
   1a212:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
   1a216:	42b9      	cmp	r1, r7
   1a218:	d00b      	beq.n	1a232 <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1a21a:	428f      	cmp	r7, r1
   1a21c:	dd09      	ble.n	1a232 <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
   1a21e:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   1a220:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   1a224:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1a226:	606c      	str	r4, [r5, #4]
			update_cache(1);
   1a228:	2001      	movs	r0, #1
   1a22a:	f7ff fe75 	bl	19f18 <update_cache>
   1a22e:	2001      	movs	r0, #1
   1a230:	e7ea      	b.n	1a208 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
   1a232:	42a8      	cmp	r0, r5
   1a234:	d0e1      	beq.n	1a1fa <z_set_prio+0x46>
   1a236:	682d      	ldr	r5, [r5, #0]
   1a238:	e7de      	b.n	1a1f8 <z_set_prio+0x44>
   1a23a:	bf00      	nop
   1a23c:	2000a140 	.word	0x2000a140

0001a240 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1a240:	b949      	cbnz	r1, 1a256 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1a242:	f3ef 8005 	mrs	r0, IPSR
   1a246:	b930      	cbnz	r0, 1a256 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   1a248:	4b05      	ldr	r3, [pc, #20]	; (1a260 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   1a24a:	69da      	ldr	r2, [r3, #28]
   1a24c:	689b      	ldr	r3, [r3, #8]
   1a24e:	429a      	cmp	r2, r3
   1a250:	d001      	beq.n	1a256 <z_reschedule+0x16>
   1a252:	f7f3 bb01 	b.w	d858 <arch_swap>
   1a256:	f381 8811 	msr	BASEPRI, r1
   1a25a:	f3bf 8f6f 	isb	sy
}
   1a25e:	4770      	bx	lr
   1a260:	2000a140 	.word	0x2000a140

0001a264 <z_sched_start>:
{
   1a264:	b510      	push	{r4, lr}
	__asm__ volatile(
   1a266:	f04f 0220 	mov.w	r2, #32
   1a26a:	f3ef 8411 	mrs	r4, BASEPRI
   1a26e:	f382 8812 	msr	BASEPRI_MAX, r2
   1a272:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   1a276:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   1a278:	0751      	lsls	r1, r2, #29
   1a27a:	d404      	bmi.n	1a286 <z_sched_start+0x22>
	__asm__ volatile(
   1a27c:	f384 8811 	msr	BASEPRI, r4
   1a280:	f3bf 8f6f 	isb	sy
}
   1a284:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1a286:	f022 0204 	bic.w	r2, r2, #4
   1a28a:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   1a28c:	f7ff fe9c 	bl	19fc8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1a290:	4621      	mov	r1, r4
}
   1a292:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   1a296:	4801      	ldr	r0, [pc, #4]	; (1a29c <z_sched_start+0x38>)
   1a298:	f7ff bfd2 	b.w	1a240 <z_reschedule>
   1a29c:	2000a297 	.word	0x2000a297

0001a2a0 <z_impl_k_thread_suspend>:
{
   1a2a0:	b570      	push	{r4, r5, r6, lr}
   1a2a2:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1a2a4:	3018      	adds	r0, #24
   1a2a6:	f007 f9da 	bl	2165e <z_abort_timeout>
	__asm__ volatile(
   1a2aa:	f04f 0320 	mov.w	r3, #32
   1a2ae:	f3ef 8611 	mrs	r6, BASEPRI
   1a2b2:	f383 8812 	msr	BASEPRI_MAX, r3
   1a2b6:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1a2ba:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   1a2be:	7b63      	ldrb	r3, [r4, #13]
   1a2c0:	2a00      	cmp	r2, #0
   1a2c2:	da05      	bge.n	1a2d0 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1a2c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
   1a2c8:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1a2ca:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1a2cc:	f007 f8b2 	bl	21434 <sys_dlist_remove>
		update_cache(thread == _current);
   1a2d0:	4d0b      	ldr	r5, [pc, #44]	; (1a300 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1a2d2:	7b63      	ldrb	r3, [r4, #13]
   1a2d4:	68a8      	ldr	r0, [r5, #8]
   1a2d6:	f043 0310 	orr.w	r3, r3, #16
   1a2da:	7363      	strb	r3, [r4, #13]
   1a2dc:	1b03      	subs	r3, r0, r4
   1a2de:	4258      	negs	r0, r3
   1a2e0:	4158      	adcs	r0, r3
   1a2e2:	f7ff fe19 	bl	19f18 <update_cache>
	__asm__ volatile(
   1a2e6:	f386 8811 	msr	BASEPRI, r6
   1a2ea:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1a2ee:	68ab      	ldr	r3, [r5, #8]
   1a2f0:	42a3      	cmp	r3, r4
   1a2f2:	d103      	bne.n	1a2fc <z_impl_k_thread_suspend+0x5c>
}
   1a2f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1a2f8:	f007 b974 	b.w	215e4 <z_reschedule_unlocked>
}
   1a2fc:	bd70      	pop	{r4, r5, r6, pc}
   1a2fe:	bf00      	nop
   1a300:	2000a140 	.word	0x2000a140

0001a304 <k_sched_lock>:
	__asm__ volatile(
   1a304:	f04f 0320 	mov.w	r3, #32
   1a308:	f3ef 8111 	mrs	r1, BASEPRI
   1a30c:	f383 8812 	msr	BASEPRI_MAX, r3
   1a310:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   1a314:	4b04      	ldr	r3, [pc, #16]	; (1a328 <k_sched_lock+0x24>)
   1a316:	689a      	ldr	r2, [r3, #8]
   1a318:	7bd3      	ldrb	r3, [r2, #15]
   1a31a:	3b01      	subs	r3, #1
   1a31c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1a31e:	f381 8811 	msr	BASEPRI, r1
   1a322:	f3bf 8f6f 	isb	sy
}
   1a326:	4770      	bx	lr
   1a328:	2000a140 	.word	0x2000a140

0001a32c <k_sched_unlock>:
{
   1a32c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1a32e:	f04f 0320 	mov.w	r3, #32
   1a332:	f3ef 8411 	mrs	r4, BASEPRI
   1a336:	f383 8812 	msr	BASEPRI_MAX, r3
   1a33a:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1a33e:	4b08      	ldr	r3, [pc, #32]	; (1a360 <k_sched_unlock+0x34>)
		update_cache(0);
   1a340:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   1a342:	689a      	ldr	r2, [r3, #8]
   1a344:	7bd3      	ldrb	r3, [r2, #15]
   1a346:	3301      	adds	r3, #1
   1a348:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1a34a:	f7ff fde5 	bl	19f18 <update_cache>
	__asm__ volatile(
   1a34e:	f384 8811 	msr	BASEPRI, r4
   1a352:	f3bf 8f6f 	isb	sy
}
   1a356:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1a35a:	f007 b943 	b.w	215e4 <z_reschedule_unlocked>
   1a35e:	bf00      	nop
   1a360:	2000a140 	.word	0x2000a140

0001a364 <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1a364:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   1a366:	4b04      	ldr	r3, [pc, #16]	; (1a378 <z_sched_init+0x14>)
   1a368:	4608      	mov	r0, r1
   1a36a:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   1a36e:	e9c3 2208 	strd	r2, r2, [r3, #32]
   1a372:	f7ff be8d 	b.w	1a090 <k_sched_time_slice_set>
   1a376:	bf00      	nop
   1a378:	2000a140 	.word	0x2000a140

0001a37c <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   1a37c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   1a37e:	f04f 0320 	mov.w	r3, #32
   1a382:	f3ef 8511 	mrs	r5, BASEPRI
   1a386:	f383 8812 	msr	BASEPRI_MAX, r3
   1a38a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   1a38e:	4919      	ldr	r1, [pc, #100]	; (1a3f4 <z_impl_k_yield+0x78>)
   1a390:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1a392:	7b43      	ldrb	r3, [r0, #13]
   1a394:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1a398:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1a39a:	f007 f84b 	bl	21434 <sys_dlist_remove>
	return list->head == list;
   1a39e:	4608      	mov	r0, r1
	}
	queue_thread(_current);
   1a3a0:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   1a3a2:	7b5a      	ldrb	r2, [r3, #13]
   1a3a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1a3a8:	735a      	strb	r2, [r3, #13]
   1a3aa:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return (node == list->tail) ? NULL : node->next;
   1a3ae:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a3b0:	4282      	cmp	r2, r0
   1a3b2:	bf08      	it	eq
   1a3b4:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1a3b6:	b922      	cbnz	r2, 1a3c2 <z_impl_k_yield+0x46>
	node->prev = tail;
   1a3b8:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
   1a3bc:	6023      	str	r3, [r4, #0]
	list->tail = node;
   1a3be:	624b      	str	r3, [r1, #36]	; 0x24
}
   1a3c0:	e00c      	b.n	1a3dc <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
   1a3c2:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   1a3c6:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   1a3ca:	42be      	cmp	r6, r7
   1a3cc:	d00e      	beq.n	1a3ec <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1a3ce:	42b7      	cmp	r7, r6
   1a3d0:	dd0c      	ble.n	1a3ec <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
   1a3d2:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1a3d4:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   1a3d8:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   1a3da:	6053      	str	r3, [r2, #4]
	update_cache(1);
   1a3dc:	2001      	movs	r0, #1
   1a3de:	f7ff fd9b 	bl	19f18 <update_cache>
   1a3e2:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   1a3e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1a3e8:	f7f3 ba36 	b.w	d858 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   1a3ec:	42a2      	cmp	r2, r4
   1a3ee:	d0e3      	beq.n	1a3b8 <z_impl_k_yield+0x3c>
   1a3f0:	6812      	ldr	r2, [r2, #0]
   1a3f2:	e7e0      	b.n	1a3b6 <z_impl_k_yield+0x3a>
   1a3f4:	2000a140 	.word	0x2000a140

0001a3f8 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   1a3f8:	ea50 0301 	orrs.w	r3, r0, r1
{
   1a3fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a400:	4605      	mov	r5, r0
   1a402:	460e      	mov	r6, r1
	if (ticks == 0) {
   1a404:	d103      	bne.n	1a40e <z_tick_sleep+0x16>
	z_impl_k_yield();
   1a406:	f7ff ffb9 	bl	1a37c <z_impl_k_yield>
		k_yield();
		return 0;
   1a40a:	2000      	movs	r0, #0
   1a40c:	e02c      	b.n	1a468 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
   1a40e:	1c83      	adds	r3, r0, #2
   1a410:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   1a414:	db2a      	blt.n	1a46c <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   1a416:	f007 f964 	bl	216e2 <sys_clock_tick_get_32>
   1a41a:	1944      	adds	r4, r0, r5
   1a41c:	f04f 0320 	mov.w	r3, #32
   1a420:	f3ef 8811 	mrs	r8, BASEPRI
   1a424:	f383 8812 	msr	BASEPRI_MAX, r3
   1a428:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   1a42c:	4f11      	ldr	r7, [pc, #68]	; (1a474 <z_tick_sleep+0x7c>)
   1a42e:	4b12      	ldr	r3, [pc, #72]	; (1a478 <z_tick_sleep+0x80>)
   1a430:	68b8      	ldr	r0, [r7, #8]
   1a432:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   1a434:	f7ff fdfc 	bl	1a030 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1a438:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1a43a:	4910      	ldr	r1, [pc, #64]	; (1a47c <z_tick_sleep+0x84>)
   1a43c:	462a      	mov	r2, r5
   1a43e:	4633      	mov	r3, r6
   1a440:	3018      	adds	r0, #24
   1a442:	f000 f917 	bl	1a674 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1a446:	68ba      	ldr	r2, [r7, #8]
   1a448:	4640      	mov	r0, r8
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1a44a:	7b53      	ldrb	r3, [r2, #13]
   1a44c:	f043 0310 	orr.w	r3, r3, #16
   1a450:	7353      	strb	r3, [r2, #13]
   1a452:	f7f3 fa01 	bl	d858 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   1a456:	f007 f944 	bl	216e2 <sys_clock_tick_get_32>
   1a45a:	1a20      	subs	r0, r4, r0
   1a45c:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   1a460:	2801      	cmp	r0, #1
   1a462:	f173 0300 	sbcs.w	r3, r3, #0
   1a466:	dbd0      	blt.n	1a40a <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
   1a468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   1a46c:	f06f 0401 	mvn.w	r4, #1
   1a470:	1a24      	subs	r4, r4, r0
   1a472:	e7d3      	b.n	1a41c <z_tick_sleep+0x24>
   1a474:	2000a140 	.word	0x2000a140
   1a478:	2000a170 	.word	0x2000a170
   1a47c:	0002146b 	.word	0x0002146b

0001a480 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1a480:	f1b1 3fff 	cmp.w	r1, #4294967295
   1a484:	bf08      	it	eq
   1a486:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1a48a:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1a48c:	d106      	bne.n	1a49c <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   1a48e:	4b08      	ldr	r3, [pc, #32]	; (1a4b0 <z_impl_k_sleep+0x30>)
   1a490:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1a492:	f7ff ff05 	bl	1a2a0 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   1a496:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   1a49a:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   1a49c:	f7ff ffac 	bl	1a3f8 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   1a4a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1a4a4:	fb80 0303 	smull	r0, r3, r0, r3
   1a4a8:	0bc0      	lsrs	r0, r0, #15
   1a4aa:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   1a4ae:	e7f4      	b.n	1a49a <z_impl_k_sleep+0x1a>
   1a4b0:	2000a140 	.word	0x2000a140

0001a4b4 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1a4b4:	4b01      	ldr	r3, [pc, #4]	; (1a4bc <z_impl_z_current_get+0x8>)
   1a4b6:	6898      	ldr	r0, [r3, #8]
   1a4b8:	4770      	bx	lr
   1a4ba:	bf00      	nop
   1a4bc:	2000a140 	.word	0x2000a140

0001a4c0 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   1a4c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a4c4:	4604      	mov	r4, r0
   1a4c6:	f04f 0320 	mov.w	r3, #32
   1a4ca:	f3ef 8611 	mrs	r6, BASEPRI
   1a4ce:	f383 8812 	msr	BASEPRI_MAX, r3
   1a4d2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   1a4d6:	7b03      	ldrb	r3, [r0, #12]
   1a4d8:	07d9      	lsls	r1, r3, #31
   1a4da:	d50b      	bpl.n	1a4f4 <z_thread_abort+0x34>
	__asm__ volatile(
   1a4dc:	f386 8811 	msr	BASEPRI, r6
   1a4e0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
   1a4e4:	4040      	eors	r0, r0
   1a4e6:	f380 8811 	msr	BASEPRI, r0
   1a4ea:	f04f 0004 	mov.w	r0, #4
   1a4ee:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   1a4f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   1a4f4:	7b43      	ldrb	r3, [r0, #13]
   1a4f6:	071a      	lsls	r2, r3, #28
   1a4f8:	d504      	bpl.n	1a504 <z_thread_abort+0x44>
   1a4fa:	f386 8811 	msr	BASEPRI, r6
   1a4fe:	f3bf 8f6f 	isb	sy
   1a502:	e7f5      	b.n	1a4f0 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1a504:	f023 0220 	bic.w	r2, r3, #32
   1a508:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   1a50c:	09d2      	lsrs	r2, r2, #7
   1a50e:	d120      	bne.n	1a552 <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1a510:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   1a512:	68a3      	ldr	r3, [r4, #8]
   1a514:	b113      	cbz	r3, 1a51c <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
   1a516:	4620      	mov	r0, r4
   1a518:	f006 ff94 	bl	21444 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   1a51c:	f104 0018 	add.w	r0, r4, #24
   1a520:	f007 f89d 	bl	2165e <z_abort_timeout>
   1a524:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1a528:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   1a52c:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a52e:	42bd      	cmp	r5, r7
   1a530:	d000      	beq.n	1a534 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1a532:	b9b5      	cbnz	r5, 1a562 <z_thread_abort+0xa2>
		update_cache(1);
   1a534:	2001      	movs	r0, #1
   1a536:	f7ff fcef 	bl	19f18 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   1a53a:	4b10      	ldr	r3, [pc, #64]	; (1a57c <z_thread_abort+0xbc>)
   1a53c:	689b      	ldr	r3, [r3, #8]
   1a53e:	42a3      	cmp	r3, r4
   1a540:	d1db      	bne.n	1a4fa <z_thread_abort+0x3a>
   1a542:	f3ef 8305 	mrs	r3, IPSR
   1a546:	2b00      	cmp	r3, #0
   1a548:	d1d7      	bne.n	1a4fa <z_thread_abort+0x3a>
   1a54a:	4630      	mov	r0, r6
   1a54c:	f7f3 f984 	bl	d858 <arch_swap>
	return ret;
   1a550:	e7d3      	b.n	1a4fa <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1a552:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   1a556:	f043 0308 	orr.w	r3, r3, #8
   1a55a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1a55c:	f006 ff6a 	bl	21434 <sys_dlist_remove>
}
   1a560:	e7d7      	b.n	1a512 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
   1a562:	4628      	mov	r0, r5
   1a564:	f006 ff6e 	bl	21444 <unpend_thread_no_timeout>
   1a568:	f105 0018 	add.w	r0, r5, #24
   1a56c:	f007 f877 	bl	2165e <z_abort_timeout>
		ready_thread(thread);
   1a570:	4628      	mov	r0, r5
   1a572:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
   1a576:	f7ff fd27 	bl	19fc8 <ready_thread>
   1a57a:	e7d7      	b.n	1a52c <z_thread_abort+0x6c>
   1a57c:	2000a140 	.word	0x2000a140

0001a580 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   1a580:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1a582:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   1a586:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1a588:	e9cd 6700 	strd	r6, r7, [sp]
   1a58c:	f7ff fdf4 	bl	1a178 <z_pend_curr>

	if (data != NULL) {
   1a590:	b11c      	cbz	r4, 1a59a <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   1a592:	4b03      	ldr	r3, [pc, #12]	; (1a5a0 <z_sched_wait+0x20>)
   1a594:	689b      	ldr	r3, [r3, #8]
   1a596:	695b      	ldr	r3, [r3, #20]
   1a598:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   1a59a:	b002      	add	sp, #8
   1a59c:	bdd0      	pop	{r4, r6, r7, pc}
   1a59e:	bf00      	nop
   1a5a0:	2000a140 	.word	0x2000a140

0001a5a4 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   1a5a4:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   1a5a6:	4806      	ldr	r0, [pc, #24]	; (1a5c0 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   1a5a8:	4a06      	ldr	r2, [pc, #24]	; (1a5c4 <z_data_copy+0x20>)
   1a5aa:	4907      	ldr	r1, [pc, #28]	; (1a5c8 <z_data_copy+0x24>)
   1a5ac:	1a12      	subs	r2, r2, r0
   1a5ae:	f006 fc80 	bl	20eb2 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1a5b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   1a5b6:	4a05      	ldr	r2, [pc, #20]	; (1a5cc <z_data_copy+0x28>)
   1a5b8:	4905      	ldr	r1, [pc, #20]	; (1a5d0 <z_data_copy+0x2c>)
   1a5ba:	4806      	ldr	r0, [pc, #24]	; (1a5d4 <z_data_copy+0x30>)
   1a5bc:	f006 bc79 	b.w	20eb2 <z_early_memcpy>
   1a5c0:	20008000 	.word	0x20008000
   1a5c4:	20008ac8 	.word	0x20008ac8
   1a5c8:	00026f44 	.word	0x00026f44
   1a5cc:	00000000 	.word	0x00000000
   1a5d0:	00026f44 	.word	0x00026f44
   1a5d4:	20008000 	.word	0x20008000

0001a5d8 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   1a5d8:	4b03      	ldr	r3, [pc, #12]	; (1a5e8 <elapsed+0x10>)
   1a5da:	681b      	ldr	r3, [r3, #0]
   1a5dc:	b90b      	cbnz	r3, 1a5e2 <elapsed+0xa>
   1a5de:	f7fd ba69 	b.w	17ab4 <sys_clock_elapsed>
}
   1a5e2:	2000      	movs	r0, #0
   1a5e4:	4770      	bx	lr
   1a5e6:	bf00      	nop
   1a5e8:	2000a17c 	.word	0x2000a17c

0001a5ec <next_timeout>:

static int32_t next_timeout(void)
{
   1a5ec:	b510      	push	{r4, lr}
	return list->head == list;
   1a5ee:	4b11      	ldr	r3, [pc, #68]	; (1a634 <next_timeout+0x48>)
   1a5f0:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a5f2:	429c      	cmp	r4, r3
   1a5f4:	d10a      	bne.n	1a60c <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1a5f6:	f7ff ffef 	bl	1a5d8 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   1a5fa:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1a5fe:	4b0e      	ldr	r3, [pc, #56]	; (1a638 <next_timeout+0x4c>)
   1a600:	691b      	ldr	r3, [r3, #16]
   1a602:	b113      	cbz	r3, 1a60a <next_timeout+0x1e>
   1a604:	4298      	cmp	r0, r3
   1a606:	bfa8      	it	ge
   1a608:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1a60a:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   1a60c:	f7ff ffe4 	bl	1a5d8 <elapsed>
	if ((to == NULL) ||
   1a610:	2c00      	cmp	r4, #0
   1a612:	d0f2      	beq.n	1a5fa <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   1a614:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   1a618:	1a1b      	subs	r3, r3, r0
   1a61a:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   1a61e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1a622:	f172 0100 	sbcs.w	r1, r2, #0
   1a626:	dae8      	bge.n	1a5fa <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   1a628:	2a00      	cmp	r2, #0
   1a62a:	bfac      	ite	ge
   1a62c:	4618      	movge	r0, r3
   1a62e:	2000      	movlt	r0, #0
   1a630:	e7e5      	b.n	1a5fe <next_timeout+0x12>
   1a632:	bf00      	nop
   1a634:	20008560 	.word	0x20008560
   1a638:	2000a140 	.word	0x2000a140

0001a63c <remove_timeout>:
{
   1a63c:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1a63e:	b170      	cbz	r0, 1a65e <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   1a640:	4b0b      	ldr	r3, [pc, #44]	; (1a670 <remove_timeout+0x34>)
   1a642:	685b      	ldr	r3, [r3, #4]
   1a644:	4298      	cmp	r0, r3
   1a646:	d00a      	beq.n	1a65e <remove_timeout+0x22>
   1a648:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   1a64a:	b143      	cbz	r3, 1a65e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   1a64c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1a650:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1a654:	1912      	adds	r2, r2, r4
   1a656:	eb41 0105 	adc.w	r1, r1, r5
   1a65a:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   1a65e:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
   1a662:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1a664:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1a666:	2300      	movs	r3, #0
	node->prev = NULL;
   1a668:	e9c0 3300 	strd	r3, r3, [r0]
}
   1a66c:	bd30      	pop	{r4, r5, pc}
   1a66e:	bf00      	nop
   1a670:	20008560 	.word	0x20008560

0001a674 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1a674:	f1b3 3fff 	cmp.w	r3, #4294967295
   1a678:	bf08      	it	eq
   1a67a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   1a67e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a680:	4604      	mov	r4, r0
   1a682:	461d      	mov	r5, r3
   1a684:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1a686:	d061      	beq.n	1a74c <z_add_timeout+0xd8>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1a688:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   1a68a:	f04f 0320 	mov.w	r3, #32
   1a68e:	f3ef 8711 	mrs	r7, BASEPRI
   1a692:	f383 8812 	msr	BASEPRI_MAX, r3
   1a696:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   1a69a:	3201      	adds	r2, #1
   1a69c:	f175 33ff 	sbcs.w	r3, r5, #4294967295
   1a6a0:	da24      	bge.n	1a6ec <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   1a6a2:	f06f 0301 	mvn.w	r3, #1
   1a6a6:	492f      	ldr	r1, [pc, #188]	; (1a764 <z_add_timeout+0xf0>)
   1a6a8:	e9d1 2000 	ldrd	r2, r0, [r1]
   1a6ac:	1a9b      	subs	r3, r3, r2
   1a6ae:	f04f 32ff 	mov.w	r2, #4294967295
   1a6b2:	eb62 0000 	sbc.w	r0, r2, r0
   1a6b6:	1b9e      	subs	r6, r3, r6
   1a6b8:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   1a6bc:	2e01      	cmp	r6, #1
   1a6be:	f170 0300 	sbcs.w	r3, r0, #0
   1a6c2:	da01      	bge.n	1a6c8 <z_add_timeout+0x54>
   1a6c4:	2601      	movs	r6, #1
   1a6c6:	2000      	movs	r0, #0
   1a6c8:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
   1a6cc:	4e26      	ldr	r6, [pc, #152]	; (1a768 <z_add_timeout+0xf4>)
   1a6ce:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
   1a6d2:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a6d4:	45b4      	cmp	ip, r6
   1a6d6:	bf08      	it	eq
   1a6d8:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   1a6dc:	f1bc 0f00 	cmp.w	ip, #0
   1a6e0:	d10d      	bne.n	1a6fe <z_add_timeout+0x8a>
	node->prev = tail;
   1a6e2:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
   1a6e6:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1a6e8:	6074      	str	r4, [r6, #4]
}
   1a6ea:	e01c      	b.n	1a726 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
   1a6ec:	f7ff ff74 	bl	1a5d8 <elapsed>
   1a6f0:	3601      	adds	r6, #1
   1a6f2:	f145 0500 	adc.w	r5, r5, #0
   1a6f6:	1836      	adds	r6, r6, r0
   1a6f8:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   1a6fc:	e7e4      	b.n	1a6c8 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
   1a6fe:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
   1a702:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
   1a706:	4293      	cmp	r3, r2
   1a708:	eb71 0e00 	sbcs.w	lr, r1, r0
   1a70c:	da1f      	bge.n	1a74e <z_add_timeout+0xda>
				t->dticks -= to->dticks;
   1a70e:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
   1a710:	f8dc 3004 	ldr.w	r3, [ip, #4]
   1a714:	eb60 0001 	sbc.w	r0, r0, r1
   1a718:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
   1a71c:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
   1a720:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1a722:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
   1a726:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a728:	42b3      	cmp	r3, r6
   1a72a:	d00b      	beq.n	1a744 <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1a72c:	429c      	cmp	r4, r3
   1a72e:	d109      	bne.n	1a744 <z_add_timeout+0xd0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   1a730:	f7ff ff5c 	bl	1a5ec <next_timeout>

			if (next_time == 0 ||
   1a734:	b118      	cbz	r0, 1a73e <z_add_timeout+0xca>
			    _current_cpu->slice_ticks != next_time) {
   1a736:	4b0d      	ldr	r3, [pc, #52]	; (1a76c <z_add_timeout+0xf8>)
			if (next_time == 0 ||
   1a738:	691b      	ldr	r3, [r3, #16]
   1a73a:	4283      	cmp	r3, r0
   1a73c:	d002      	beq.n	1a744 <z_add_timeout+0xd0>
				sys_clock_set_timeout(next_time, false);
   1a73e:	2100      	movs	r1, #0
   1a740:	f7fd f988 	bl	17a54 <sys_clock_set_timeout>
	__asm__ volatile(
   1a744:	f387 8811 	msr	BASEPRI, r7
   1a748:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   1a74c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
   1a74e:	1a9b      	subs	r3, r3, r2
   1a750:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   1a754:	45ac      	cmp	ip, r5
   1a756:	e9c4 3104 	strd	r3, r1, [r4, #16]
   1a75a:	d0c2      	beq.n	1a6e2 <z_add_timeout+0x6e>
   1a75c:	f8dc c000 	ldr.w	ip, [ip]
   1a760:	e7bc      	b.n	1a6dc <z_add_timeout+0x68>
   1a762:	bf00      	nop
   1a764:	20009cb0 	.word	0x20009cb0
   1a768:	20008560 	.word	0x20008560
   1a76c:	2000a140 	.word	0x2000a140

0001a770 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   1a770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a774:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1a776:	f7ff fcbd 	bl	1a0f4 <z_time_slice>
	__asm__ volatile(
   1a77a:	f04f 0320 	mov.w	r3, #32
   1a77e:	f3ef 8611 	mrs	r6, BASEPRI
   1a782:	f383 8812 	msr	BASEPRI_MAX, r3
   1a786:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   1a78a:	4f24      	ldr	r7, [pc, #144]	; (1a81c <sys_clock_announce+0xac>)
	return list->head == list;
   1a78c:	f8df 8090 	ldr.w	r8, [pc, #144]	; 1a820 <sys_clock_announce+0xb0>
   1a790:	f8d8 0000 	ldr.w	r0, [r8]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   1a794:	4a23      	ldr	r2, [pc, #140]	; (1a824 <sys_clock_announce+0xb4>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a796:	4540      	cmp	r0, r8
	announce_remaining = ticks;
   1a798:	603c      	str	r4, [r7, #0]
	return list->head == list;
   1a79a:	ea4f 71e4 	mov.w	r1, r4, asr #31
		curr_tick += dt;
   1a79e:	e9d2 3e00 	ldrd	r3, lr, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a7a2:	d00b      	beq.n	1a7bc <sys_clock_announce+0x4c>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   1a7a4:	b150      	cbz	r0, 1a7bc <sys_clock_announce+0x4c>
   1a7a6:	e9d0 5c04 	ldrd	r5, ip, [r0, #16]
   1a7aa:	42ac      	cmp	r4, r5
   1a7ac:	eb71 090c 	sbcs.w	r9, r1, ip
   1a7b0:	da17      	bge.n	1a7e2 <sys_clock_announce+0x72>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1a7b2:	1b2d      	subs	r5, r5, r4
   1a7b4:	eb6c 0c01 	sbc.w	ip, ip, r1
   1a7b8:	e9c0 5c04 	strd	r5, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   1a7bc:	18e3      	adds	r3, r4, r3
	announce_remaining = 0;
   1a7be:	f04f 0400 	mov.w	r4, #0
	curr_tick += announce_remaining;
   1a7c2:	eb4e 0101 	adc.w	r1, lr, r1
   1a7c6:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
   1a7ca:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
   1a7cc:	f7ff ff0e 	bl	1a5ec <next_timeout>
   1a7d0:	4621      	mov	r1, r4
   1a7d2:	f7fd f93f 	bl	17a54 <sys_clock_set_timeout>
	__asm__ volatile(
   1a7d6:	f386 8811 	msr	BASEPRI, r6
   1a7da:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1a7de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   1a7e2:	18eb      	adds	r3, r5, r3
   1a7e4:	eb4e 71e5 	adc.w	r1, lr, r5, asr #31
   1a7e8:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
   1a7ec:	2200      	movs	r2, #0
   1a7ee:	2300      	movs	r3, #0
   1a7f0:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
   1a7f4:	f7ff ff22 	bl	1a63c <remove_timeout>
   1a7f8:	f386 8811 	msr	BASEPRI, r6
   1a7fc:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1a800:	6883      	ldr	r3, [r0, #8]
   1a802:	4798      	blx	r3
	__asm__ volatile(
   1a804:	f04f 0320 	mov.w	r3, #32
   1a808:	f3ef 8611 	mrs	r6, BASEPRI
   1a80c:	f383 8812 	msr	BASEPRI_MAX, r3
   1a810:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
   1a814:	683c      	ldr	r4, [r7, #0]
   1a816:	1b64      	subs	r4, r4, r5
   1a818:	e7ba      	b.n	1a790 <sys_clock_announce+0x20>
   1a81a:	bf00      	nop
   1a81c:	2000a17c 	.word	0x2000a17c
   1a820:	20008560 	.word	0x20008560
   1a824:	20009cb0 	.word	0x20009cb0

0001a828 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   1a828:	b510      	push	{r4, lr}
   1a82a:	f04f 0320 	mov.w	r3, #32
   1a82e:	f3ef 8411 	mrs	r4, BASEPRI
   1a832:	f383 8812 	msr	BASEPRI_MAX, r3
   1a836:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   1a83a:	f7ff fecd 	bl	1a5d8 <elapsed>
   1a83e:	4603      	mov	r3, r0
   1a840:	4a05      	ldr	r2, [pc, #20]	; (1a858 <sys_clock_tick_get+0x30>)
   1a842:	e9d2 0100 	ldrd	r0, r1, [r2]
   1a846:	1818      	adds	r0, r3, r0
   1a848:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
   1a84c:	f384 8811 	msr	BASEPRI, r4
   1a850:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1a854:	bd10      	pop	{r4, pc}
   1a856:	bf00      	nop
   1a858:	20009cb0 	.word	0x20009cb0

0001a85c <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   1a85c:	b570      	push	{r4, r5, r6, lr}
   1a85e:	4604      	mov	r4, r0
	__asm__ volatile(
   1a860:	f04f 0320 	mov.w	r3, #32
   1a864:	f3ef 8511 	mrs	r5, BASEPRI
   1a868:	f383 8812 	msr	BASEPRI_MAX, r3
   1a86c:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1a870:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
   1a874:	3301      	adds	r3, #1
   1a876:	f142 0200 	adc.w	r2, r2, #0
   1a87a:	2b02      	cmp	r3, #2
   1a87c:	f172 0200 	sbcs.w	r2, r2, #0
   1a880:	d322      	bcc.n	1a8c8 <z_timer_expiration_handler+0x6c>
	return z_impl_k_uptime_ticks();
   1a882:	f006 ff32 	bl	216ea <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   1a886:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   1a88a:	3001      	adds	r0, #1
   1a88c:	f141 0100 	adc.w	r1, r1, #0
   1a890:	18c0      	adds	r0, r0, r3
   1a892:	eb41 0102 	adc.w	r1, r1, r2
   1a896:	2801      	cmp	r0, #1
   1a898:	f171 0100 	sbcs.w	r1, r1, #0
   1a89c:	db32      	blt.n	1a904 <z_timer_expiration_handler+0xa8>
   1a89e:	f006 ff24 	bl	216ea <z_impl_k_uptime_ticks>
   1a8a2:	3001      	adds	r0, #1
   1a8a4:	f141 0300 	adc.w	r3, r1, #0
   1a8a8:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
   1a8ac:	1880      	adds	r0, r0, r2
   1a8ae:	f06f 0201 	mvn.w	r2, #1
   1a8b2:	eb43 0301 	adc.w	r3, r3, r1
   1a8b6:	f04f 31ff 	mov.w	r1, #4294967295
   1a8ba:	1a12      	subs	r2, r2, r0
   1a8bc:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1a8c0:	4620      	mov	r0, r4
   1a8c2:	491a      	ldr	r1, [pc, #104]	; (1a92c <z_timer_expiration_handler+0xd0>)
   1a8c4:	f7ff fed6 	bl	1a674 <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   1a8c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1a8ca:	3301      	adds	r3, #1
   1a8cc:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   1a8ce:	6a23      	ldr	r3, [r4, #32]
   1a8d0:	b173      	cbz	r3, 1a8f0 <z_timer_expiration_handler+0x94>
	__asm__ volatile(
   1a8d2:	f385 8811 	msr	BASEPRI, r5
   1a8d6:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   1a8da:	4620      	mov	r0, r4
   1a8dc:	6a23      	ldr	r3, [r4, #32]
   1a8de:	4798      	blx	r3
	__asm__ volatile(
   1a8e0:	f04f 0320 	mov.w	r3, #32
   1a8e4:	f3ef 8511 	mrs	r5, BASEPRI
   1a8e8:	f383 8812 	msr	BASEPRI_MAX, r3
   1a8ec:	f3bf 8f6f 	isb	sy
	return list->head == list;
   1a8f0:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a8f4:	42a6      	cmp	r6, r4
   1a8f6:	d000      	beq.n	1a8fa <z_timer_expiration_handler+0x9e>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   1a8f8:	b94e      	cbnz	r6, 1a90e <z_timer_expiration_handler+0xb2>
	__asm__ volatile(
   1a8fa:	f385 8811 	msr	BASEPRI, r5
   1a8fe:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   1a902:	bd70      	pop	{r4, r5, r6, pc}
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   1a904:	f06f 0201 	mvn.w	r2, #1
   1a908:	f04f 33ff 	mov.w	r3, #4294967295
   1a90c:	e7d8      	b.n	1a8c0 <z_timer_expiration_handler+0x64>
	z_unpend_thread_no_timeout(thread);
   1a90e:	4630      	mov	r0, r6
   1a910:	f006 fe05 	bl	2151e <z_unpend_thread_no_timeout>
   1a914:	2300      	movs	r3, #0
   1a916:	67f3      	str	r3, [r6, #124]	; 0x7c
   1a918:	f385 8811 	msr	BASEPRI, r5
   1a91c:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   1a920:	4630      	mov	r0, r6
}
   1a922:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   1a926:	f006 bdea 	b.w	214fe <z_ready_thread>
   1a92a:	bf00      	nop
   1a92c:	0001a85d 	.word	0x0001a85d

0001a930 <z_impl_k_timer_start>:
void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1a930:	f1b3 3fff 	cmp.w	r3, #4294967295
   1a934:	bf08      	it	eq
   1a936:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   1a93a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a93e:	4619      	mov	r1, r3
   1a940:	4605      	mov	r5, r0
   1a942:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
   1a946:	4614      	mov	r4, r2
   1a948:	4691      	mov	r9, r2
   1a94a:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1a94c:	d037      	beq.n	1a9be <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   1a94e:	f1b0 3fff 	cmp.w	r0, #4294967295
   1a952:	bf08      	it	eq
   1a954:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1a958:	4637      	mov	r7, r6
   1a95a:	4682      	mov	sl, r0
   1a95c:	d011      	beq.n	1a982 <z_impl_k_timer_start+0x52>
   1a95e:	ea50 0306 	orrs.w	r3, r0, r6
   1a962:	d00e      	beq.n	1a982 <z_impl_k_timer_start+0x52>
   1a964:	1c72      	adds	r2, r6, #1
   1a966:	f170 33ff 	sbcs.w	r3, r0, #4294967295
   1a96a:	db0a      	blt.n	1a982 <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
   1a96c:	2e02      	cmp	r6, #2
   1a96e:	4684      	mov	ip, r0
   1a970:	f170 0000 	sbcs.w	r0, r0, #0
   1a974:	bfbc      	itt	lt
   1a976:	2702      	movlt	r7, #2
   1a978:	f04f 0c00 	movlt.w	ip, #0
   1a97c:	3f01      	subs	r7, #1
   1a97e:	f14c 3aff 	adc.w	sl, ip, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   1a982:	1c63      	adds	r3, r4, #1
   1a984:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   1a988:	db0a      	blt.n	1a9a0 <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
   1a98a:	2c01      	cmp	r4, #1
   1a98c:	f171 0300 	sbcs.w	r3, r1, #0
   1a990:	4622      	mov	r2, r4
   1a992:	bfbc      	itt	lt
   1a994:	2201      	movlt	r2, #1
   1a996:	2100      	movlt	r1, #0
   1a998:	f112 39ff 	adds.w	r9, r2, #4294967295
   1a99c:	f141 38ff 	adc.w	r8, r1, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
   1a9a0:	4628      	mov	r0, r5
   1a9a2:	f006 fe5c 	bl	2165e <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   1a9a6:	2300      	movs	r3, #0
	timer->period = period;
   1a9a8:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28
	timer->status = 0U;
   1a9ac:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1a9ae:	464a      	mov	r2, r9
   1a9b0:	4643      	mov	r3, r8
   1a9b2:	4628      	mov	r0, r5
		     duration);
}
   1a9b4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1a9b8:	4902      	ldr	r1, [pc, #8]	; (1a9c4 <z_impl_k_timer_start+0x94>)
   1a9ba:	f7ff be5b 	b.w	1a674 <z_add_timeout>
}
   1a9be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1a9c2:	bf00      	nop
   1a9c4:	0001a85d 	.word	0x0001a85d

0001a9c8 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   1a9c8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1a9cc:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   1a9ce:	4b29      	ldr	r3, [pc, #164]	; (1aa74 <z_impl_k_poll+0xac>)
{
   1a9d0:	4616      	mov	r6, r2
	struct z_poller *poller = &_current->poller;
   1a9d2:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   1a9d4:	2301      	movs	r3, #1
   1a9d6:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   1a9da:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   1a9de:	ea52 0305 	orrs.w	r3, r2, r5
   1a9e2:	bf0c      	ite	eq
   1a9e4:	2301      	moveq	r3, #1
   1a9e6:	2300      	movne	r3, #0
   1a9e8:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   1a9ec:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   1a9ee:	f006 fefe 	bl	217ee <register_events>
   1a9f2:	4681      	mov	r9, r0
	__asm__ volatile(
   1a9f4:	f04f 0320 	mov.w	r3, #32
   1a9f8:	f3ef 8a11 	mrs	sl, BASEPRI
   1a9fc:	f383 8812 	msr	BASEPRI_MAX, r3
   1aa00:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   1aa04:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   1aa08:	b964      	cbnz	r4, 1aa24 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   1aa0a:	4601      	mov	r1, r0
   1aa0c:	4652      	mov	r2, sl
   1aa0e:	4640      	mov	r0, r8
   1aa10:	f006 ffbe 	bl	21990 <clear_event_registrations>
	__asm__ volatile(
   1aa14:	f38a 8811 	msr	BASEPRI, sl
   1aa18:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   1aa1c:	4620      	mov	r0, r4
   1aa1e:	b002      	add	sp, #8
   1aa20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   1aa24:	2300      	movs	r3, #0
   1aa26:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1aa2a:	ea56 0305 	orrs.w	r3, r6, r5
   1aa2e:	d106      	bne.n	1aa3e <z_impl_k_poll+0x76>
   1aa30:	f38a 8811 	msr	BASEPRI, sl
   1aa34:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1aa38:	f06f 040a 	mvn.w	r4, #10
   1aa3c:	e7ee      	b.n	1aa1c <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1aa3e:	4651      	mov	r1, sl
   1aa40:	e9cd 6500 	strd	r6, r5, [sp]
   1aa44:	4a0c      	ldr	r2, [pc, #48]	; (1aa78 <z_impl_k_poll+0xb0>)
   1aa46:	480d      	ldr	r0, [pc, #52]	; (1aa7c <z_impl_k_poll+0xb4>)
   1aa48:	f7ff fb96 	bl	1a178 <z_pend_curr>
   1aa4c:	4604      	mov	r4, r0
	__asm__ volatile(
   1aa4e:	f04f 0320 	mov.w	r3, #32
   1aa52:	f3ef 8511 	mrs	r5, BASEPRI
   1aa56:	f383 8812 	msr	BASEPRI_MAX, r3
   1aa5a:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   1aa5e:	462a      	mov	r2, r5
   1aa60:	4649      	mov	r1, r9
   1aa62:	4640      	mov	r0, r8
   1aa64:	f006 ff94 	bl	21990 <clear_event_registrations>
	__asm__ volatile(
   1aa68:	f385 8811 	msr	BASEPRI, r5
   1aa6c:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1aa70:	e7d4      	b.n	1aa1c <z_impl_k_poll+0x54>
   1aa72:	bf00      	nop
   1aa74:	2000a140 	.word	0x2000a140
   1aa78:	20008568 	.word	0x20008568
   1aa7c:	2000a297 	.word	0x2000a297

0001aa80 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   1aa80:	b538      	push	{r3, r4, r5, lr}
   1aa82:	4603      	mov	r3, r0
	__asm__ volatile(
   1aa84:	f04f 0220 	mov.w	r2, #32
   1aa88:	f3ef 8511 	mrs	r5, BASEPRI
   1aa8c:	f382 8812 	msr	BASEPRI_MAX, r2
   1aa90:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   1aa94:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   1aa96:	2101      	movs	r1, #1
   1aa98:	6081      	str	r1, [r0, #8]
	return list->head == list;
   1aa9a:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1aa9c:	4283      	cmp	r3, r0
   1aa9e:	d106      	bne.n	1aaae <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   1aaa0:	f385 8811 	msr	BASEPRI, r5
   1aaa4:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   1aaa8:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   1aaaa:	4620      	mov	r0, r4
   1aaac:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   1aaae:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1aab2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1aab4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1aab6:	2300      	movs	r3, #0
	node->prev = NULL;
   1aab8:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1aabc:	f006 ff0e 	bl	218dc <signal_poll_event>
	z_reschedule(&lock, key);
   1aac0:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1aac2:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1aac4:	4801      	ldr	r0, [pc, #4]	; (1aacc <z_impl_k_poll_signal_raise+0x4c>)
   1aac6:	f7ff fbbb 	bl	1a240 <z_reschedule>
	return rc;
   1aaca:	e7ee      	b.n	1aaaa <z_impl_k_poll_signal_raise+0x2a>
   1aacc:	2000a297 	.word	0x2000a297

0001aad0 <k_aligned_alloc>:

K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
   1aad0:	460a      	mov	r2, r1
	__ASSERT((align & (align - 1)) == 0,
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   1aad2:	4601      	mov	r1, r0
   1aad4:	4801      	ldr	r0, [pc, #4]	; (1aadc <k_aligned_alloc+0xc>)
   1aad6:	f006 bfac 	b.w	21a32 <z_heap_aligned_alloc>
   1aada:	bf00      	nop
   1aadc:	200088b8 	.word	0x200088b8

0001aae0 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   1aae0:	4b01      	ldr	r3, [pc, #4]	; (1aae8 <k_thread_system_pool_assign+0x8>)
   1aae2:	6743      	str	r3, [r0, #116]	; 0x74
}
   1aae4:	4770      	bx	lr
   1aae6:	bf00      	nop
   1aae8:	200088b8 	.word	0x200088b8

0001aaec <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   1aaec:	b538      	push	{r3, r4, r5, lr}
   1aaee:	4604      	mov	r4, r0
   1aaf0:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   1aaf2:	f006 fa91 	bl	21018 <k_is_in_isr>
   1aaf6:	b920      	cbnz	r0, 1ab02 <z_thread_aligned_alloc+0x16>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   1aaf8:	4b06      	ldr	r3, [pc, #24]	; (1ab14 <z_thread_aligned_alloc+0x28>)
   1aafa:	689b      	ldr	r3, [r3, #8]
   1aafc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   1aafe:	b90b      	cbnz	r3, 1ab04 <z_thread_aligned_alloc+0x18>
	} else {
		ret = NULL;
	}

	return ret;
}
   1ab00:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   1ab02:	4b05      	ldr	r3, [pc, #20]	; (1ab18 <z_thread_aligned_alloc+0x2c>)
		ret = z_heap_aligned_alloc(heap, align, size);
   1ab04:	462a      	mov	r2, r5
   1ab06:	4621      	mov	r1, r4
   1ab08:	4618      	mov	r0, r3
}
   1ab0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   1ab0e:	f006 bf90 	b.w	21a32 <z_heap_aligned_alloc>
   1ab12:	bf00      	nop
   1ab14:	2000a140 	.word	0x2000a140
   1ab18:	200088b8 	.word	0x200088b8

0001ab1c <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   1ab1c:	4801      	ldr	r0, [pc, #4]	; (1ab24 <boot_banner+0x8>)
   1ab1e:	f001 bc2e 	b.w	1c37e <printk>
   1ab22:	bf00      	nop
   1ab24:	00026c74 	.word	0x00026c74

0001ab28 <malloc>:
   1ab28:	4b02      	ldr	r3, [pc, #8]	; (1ab34 <malloc+0xc>)
   1ab2a:	4601      	mov	r1, r0
   1ab2c:	6818      	ldr	r0, [r3, #0]
   1ab2e:	f000 b84d 	b.w	1abcc <_malloc_r>
   1ab32:	bf00      	nop
   1ab34:	20008570 	.word	0x20008570

0001ab38 <_free_r>:
   1ab38:	b538      	push	{r3, r4, r5, lr}
   1ab3a:	4605      	mov	r5, r0
   1ab3c:	2900      	cmp	r1, #0
   1ab3e:	d041      	beq.n	1abc4 <_free_r+0x8c>
   1ab40:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1ab44:	1f0c      	subs	r4, r1, #4
   1ab46:	2b00      	cmp	r3, #0
   1ab48:	bfb8      	it	lt
   1ab4a:	18e4      	addlt	r4, r4, r3
   1ab4c:	f000 fce8 	bl	1b520 <__malloc_lock>
   1ab50:	4a1d      	ldr	r2, [pc, #116]	; (1abc8 <_free_r+0x90>)
   1ab52:	6813      	ldr	r3, [r2, #0]
   1ab54:	b933      	cbnz	r3, 1ab64 <_free_r+0x2c>
   1ab56:	6063      	str	r3, [r4, #4]
   1ab58:	6014      	str	r4, [r2, #0]
   1ab5a:	4628      	mov	r0, r5
   1ab5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1ab60:	f000 bce4 	b.w	1b52c <__malloc_unlock>
   1ab64:	42a3      	cmp	r3, r4
   1ab66:	d908      	bls.n	1ab7a <_free_r+0x42>
   1ab68:	6820      	ldr	r0, [r4, #0]
   1ab6a:	1821      	adds	r1, r4, r0
   1ab6c:	428b      	cmp	r3, r1
   1ab6e:	bf01      	itttt	eq
   1ab70:	6819      	ldreq	r1, [r3, #0]
   1ab72:	685b      	ldreq	r3, [r3, #4]
   1ab74:	1809      	addeq	r1, r1, r0
   1ab76:	6021      	streq	r1, [r4, #0]
   1ab78:	e7ed      	b.n	1ab56 <_free_r+0x1e>
   1ab7a:	461a      	mov	r2, r3
   1ab7c:	685b      	ldr	r3, [r3, #4]
   1ab7e:	b10b      	cbz	r3, 1ab84 <_free_r+0x4c>
   1ab80:	42a3      	cmp	r3, r4
   1ab82:	d9fa      	bls.n	1ab7a <_free_r+0x42>
   1ab84:	6811      	ldr	r1, [r2, #0]
   1ab86:	1850      	adds	r0, r2, r1
   1ab88:	42a0      	cmp	r0, r4
   1ab8a:	d10b      	bne.n	1aba4 <_free_r+0x6c>
   1ab8c:	6820      	ldr	r0, [r4, #0]
   1ab8e:	4401      	add	r1, r0
   1ab90:	1850      	adds	r0, r2, r1
   1ab92:	6011      	str	r1, [r2, #0]
   1ab94:	4283      	cmp	r3, r0
   1ab96:	d1e0      	bne.n	1ab5a <_free_r+0x22>
   1ab98:	6818      	ldr	r0, [r3, #0]
   1ab9a:	685b      	ldr	r3, [r3, #4]
   1ab9c:	4408      	add	r0, r1
   1ab9e:	6053      	str	r3, [r2, #4]
   1aba0:	6010      	str	r0, [r2, #0]
   1aba2:	e7da      	b.n	1ab5a <_free_r+0x22>
   1aba4:	d902      	bls.n	1abac <_free_r+0x74>
   1aba6:	230c      	movs	r3, #12
   1aba8:	602b      	str	r3, [r5, #0]
   1abaa:	e7d6      	b.n	1ab5a <_free_r+0x22>
   1abac:	6820      	ldr	r0, [r4, #0]
   1abae:	1821      	adds	r1, r4, r0
   1abb0:	428b      	cmp	r3, r1
   1abb2:	bf02      	ittt	eq
   1abb4:	6819      	ldreq	r1, [r3, #0]
   1abb6:	685b      	ldreq	r3, [r3, #4]
   1abb8:	1809      	addeq	r1, r1, r0
   1abba:	6063      	str	r3, [r4, #4]
   1abbc:	bf08      	it	eq
   1abbe:	6021      	streq	r1, [r4, #0]
   1abc0:	6054      	str	r4, [r2, #4]
   1abc2:	e7ca      	b.n	1ab5a <_free_r+0x22>
   1abc4:	bd38      	pop	{r3, r4, r5, pc}
   1abc6:	bf00      	nop
   1abc8:	2000a184 	.word	0x2000a184

0001abcc <_malloc_r>:
   1abcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1abce:	1ccd      	adds	r5, r1, #3
   1abd0:	4606      	mov	r6, r0
   1abd2:	f025 0503 	bic.w	r5, r5, #3
   1abd6:	3508      	adds	r5, #8
   1abd8:	2d0c      	cmp	r5, #12
   1abda:	bf38      	it	cc
   1abdc:	250c      	movcc	r5, #12
   1abde:	2d00      	cmp	r5, #0
   1abe0:	db01      	blt.n	1abe6 <_malloc_r+0x1a>
   1abe2:	42a9      	cmp	r1, r5
   1abe4:	d903      	bls.n	1abee <_malloc_r+0x22>
   1abe6:	230c      	movs	r3, #12
   1abe8:	6033      	str	r3, [r6, #0]
   1abea:	2000      	movs	r0, #0
   1abec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1abee:	f000 fc97 	bl	1b520 <__malloc_lock>
   1abf2:	4921      	ldr	r1, [pc, #132]	; (1ac78 <_malloc_r+0xac>)
   1abf4:	680a      	ldr	r2, [r1, #0]
   1abf6:	4614      	mov	r4, r2
   1abf8:	b99c      	cbnz	r4, 1ac22 <_malloc_r+0x56>
   1abfa:	4f20      	ldr	r7, [pc, #128]	; (1ac7c <_malloc_r+0xb0>)
   1abfc:	683b      	ldr	r3, [r7, #0]
   1abfe:	b923      	cbnz	r3, 1ac0a <_malloc_r+0x3e>
   1ac00:	4621      	mov	r1, r4
   1ac02:	4630      	mov	r0, r6
   1ac04:	f000 fbb8 	bl	1b378 <_sbrk_r>
   1ac08:	6038      	str	r0, [r7, #0]
   1ac0a:	4629      	mov	r1, r5
   1ac0c:	4630      	mov	r0, r6
   1ac0e:	f000 fbb3 	bl	1b378 <_sbrk_r>
   1ac12:	1c43      	adds	r3, r0, #1
   1ac14:	d123      	bne.n	1ac5e <_malloc_r+0x92>
   1ac16:	230c      	movs	r3, #12
   1ac18:	4630      	mov	r0, r6
   1ac1a:	6033      	str	r3, [r6, #0]
   1ac1c:	f000 fc86 	bl	1b52c <__malloc_unlock>
   1ac20:	e7e3      	b.n	1abea <_malloc_r+0x1e>
   1ac22:	6823      	ldr	r3, [r4, #0]
   1ac24:	1b5b      	subs	r3, r3, r5
   1ac26:	d417      	bmi.n	1ac58 <_malloc_r+0x8c>
   1ac28:	2b0b      	cmp	r3, #11
   1ac2a:	d903      	bls.n	1ac34 <_malloc_r+0x68>
   1ac2c:	6023      	str	r3, [r4, #0]
   1ac2e:	441c      	add	r4, r3
   1ac30:	6025      	str	r5, [r4, #0]
   1ac32:	e004      	b.n	1ac3e <_malloc_r+0x72>
   1ac34:	6863      	ldr	r3, [r4, #4]
   1ac36:	42a2      	cmp	r2, r4
   1ac38:	bf0c      	ite	eq
   1ac3a:	600b      	streq	r3, [r1, #0]
   1ac3c:	6053      	strne	r3, [r2, #4]
   1ac3e:	4630      	mov	r0, r6
   1ac40:	f000 fc74 	bl	1b52c <__malloc_unlock>
   1ac44:	f104 000b 	add.w	r0, r4, #11
   1ac48:	1d23      	adds	r3, r4, #4
   1ac4a:	f020 0007 	bic.w	r0, r0, #7
   1ac4e:	1ac2      	subs	r2, r0, r3
   1ac50:	bf1c      	itt	ne
   1ac52:	1a1b      	subne	r3, r3, r0
   1ac54:	50a3      	strne	r3, [r4, r2]
   1ac56:	e7c9      	b.n	1abec <_malloc_r+0x20>
   1ac58:	4622      	mov	r2, r4
   1ac5a:	6864      	ldr	r4, [r4, #4]
   1ac5c:	e7cc      	b.n	1abf8 <_malloc_r+0x2c>
   1ac5e:	1cc4      	adds	r4, r0, #3
   1ac60:	f024 0403 	bic.w	r4, r4, #3
   1ac64:	42a0      	cmp	r0, r4
   1ac66:	d0e3      	beq.n	1ac30 <_malloc_r+0x64>
   1ac68:	1a21      	subs	r1, r4, r0
   1ac6a:	4630      	mov	r0, r6
   1ac6c:	f000 fb84 	bl	1b378 <_sbrk_r>
   1ac70:	3001      	adds	r0, #1
   1ac72:	d1dd      	bne.n	1ac30 <_malloc_r+0x64>
   1ac74:	e7cf      	b.n	1ac16 <_malloc_r+0x4a>
   1ac76:	bf00      	nop
   1ac78:	2000a184 	.word	0x2000a184
   1ac7c:	2000a180 	.word	0x2000a180

0001ac80 <_printf_float>:
   1ac80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ac84:	b091      	sub	sp, #68	; 0x44
   1ac86:	460c      	mov	r4, r1
   1ac88:	4616      	mov	r6, r2
   1ac8a:	461f      	mov	r7, r3
   1ac8c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   1ac90:	4605      	mov	r5, r0
   1ac92:	f000 fc41 	bl	1b518 <_localeconv_r>
   1ac96:	6803      	ldr	r3, [r0, #0]
   1ac98:	4618      	mov	r0, r3
   1ac9a:	9308      	str	r3, [sp, #32]
   1ac9c:	f7ee fb56 	bl	934c <strlen>
   1aca0:	2300      	movs	r3, #0
   1aca2:	9009      	str	r0, [sp, #36]	; 0x24
   1aca4:	930e      	str	r3, [sp, #56]	; 0x38
   1aca6:	f8d8 3000 	ldr.w	r3, [r8]
   1acaa:	f894 a018 	ldrb.w	sl, [r4, #24]
   1acae:	3307      	adds	r3, #7
   1acb0:	f8d4 b000 	ldr.w	fp, [r4]
   1acb4:	f023 0307 	bic.w	r3, r3, #7
   1acb8:	f103 0208 	add.w	r2, r3, #8
   1acbc:	f8c8 2000 	str.w	r2, [r8]
   1acc0:	f04f 32ff 	mov.w	r2, #4294967295
   1acc4:	e9d3 8900 	ldrd	r8, r9, [r3]
   1acc8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
   1accc:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   1acd0:	930b      	str	r3, [sp, #44]	; 0x2c
   1acd2:	4b9d      	ldr	r3, [pc, #628]	; (1af48 <_printf_float+0x2c8>)
   1acd4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1acd8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
   1acdc:	f7ee f9a0 	bl	9020 <__aeabi_dcmpun>
   1ace0:	bb70      	cbnz	r0, 1ad40 <_printf_float+0xc0>
   1ace2:	f04f 32ff 	mov.w	r2, #4294967295
   1ace6:	4b98      	ldr	r3, [pc, #608]	; (1af48 <_printf_float+0x2c8>)
   1ace8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1acec:	f7ee f97a 	bl	8fe4 <__aeabi_dcmple>
   1acf0:	bb30      	cbnz	r0, 1ad40 <_printf_float+0xc0>
   1acf2:	2200      	movs	r2, #0
   1acf4:	2300      	movs	r3, #0
   1acf6:	4640      	mov	r0, r8
   1acf8:	4649      	mov	r1, r9
   1acfa:	f7ee f969 	bl	8fd0 <__aeabi_dcmplt>
   1acfe:	b110      	cbz	r0, 1ad06 <_printf_float+0x86>
   1ad00:	232d      	movs	r3, #45	; 0x2d
   1ad02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   1ad06:	4a91      	ldr	r2, [pc, #580]	; (1af4c <_printf_float+0x2cc>)
   1ad08:	4b91      	ldr	r3, [pc, #580]	; (1af50 <_printf_float+0x2d0>)
   1ad0a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   1ad0e:	bf94      	ite	ls
   1ad10:	4690      	movls	r8, r2
   1ad12:	4698      	movhi	r8, r3
   1ad14:	2303      	movs	r3, #3
   1ad16:	f04f 0900 	mov.w	r9, #0
   1ad1a:	6123      	str	r3, [r4, #16]
   1ad1c:	f02b 0304 	bic.w	r3, fp, #4
   1ad20:	6023      	str	r3, [r4, #0]
   1ad22:	4633      	mov	r3, r6
   1ad24:	aa0f      	add	r2, sp, #60	; 0x3c
   1ad26:	4621      	mov	r1, r4
   1ad28:	4628      	mov	r0, r5
   1ad2a:	9700      	str	r7, [sp, #0]
   1ad2c:	f006 ff72 	bl	21c14 <_printf_common>
   1ad30:	3001      	adds	r0, #1
   1ad32:	f040 8099 	bne.w	1ae68 <_printf_float+0x1e8>
   1ad36:	f04f 30ff 	mov.w	r0, #4294967295
   1ad3a:	b011      	add	sp, #68	; 0x44
   1ad3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ad40:	4642      	mov	r2, r8
   1ad42:	464b      	mov	r3, r9
   1ad44:	4640      	mov	r0, r8
   1ad46:	4649      	mov	r1, r9
   1ad48:	f7ee f96a 	bl	9020 <__aeabi_dcmpun>
   1ad4c:	b140      	cbz	r0, 1ad60 <_printf_float+0xe0>
   1ad4e:	464b      	mov	r3, r9
   1ad50:	4a80      	ldr	r2, [pc, #512]	; (1af54 <_printf_float+0x2d4>)
   1ad52:	2b00      	cmp	r3, #0
   1ad54:	bfbc      	itt	lt
   1ad56:	232d      	movlt	r3, #45	; 0x2d
   1ad58:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   1ad5c:	4b7e      	ldr	r3, [pc, #504]	; (1af58 <_printf_float+0x2d8>)
   1ad5e:	e7d4      	b.n	1ad0a <_printf_float+0x8a>
   1ad60:	6863      	ldr	r3, [r4, #4]
   1ad62:	1c5a      	adds	r2, r3, #1
   1ad64:	d129      	bne.n	1adba <_printf_float+0x13a>
   1ad66:	2306      	movs	r3, #6
   1ad68:	6063      	str	r3, [r4, #4]
   1ad6a:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
   1ad6e:	2200      	movs	r2, #0
   1ad70:	4628      	mov	r0, r5
   1ad72:	6023      	str	r3, [r4, #0]
   1ad74:	9206      	str	r2, [sp, #24]
   1ad76:	aa0e      	add	r2, sp, #56	; 0x38
   1ad78:	e9cd a204 	strd	sl, r2, [sp, #16]
   1ad7c:	aa0d      	add	r2, sp, #52	; 0x34
   1ad7e:	9203      	str	r2, [sp, #12]
   1ad80:	f10d 0233 	add.w	r2, sp, #51	; 0x33
   1ad84:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1ad88:	6863      	ldr	r3, [r4, #4]
   1ad8a:	4642      	mov	r2, r8
   1ad8c:	9300      	str	r3, [sp, #0]
   1ad8e:	464b      	mov	r3, r9
   1ad90:	f006 fea0 	bl	21ad4 <__cvt>
   1ad94:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
   1ad98:	4680      	mov	r8, r0
   1ad9a:	990d      	ldr	r1, [sp, #52]	; 0x34
   1ad9c:	d115      	bne.n	1adca <_printf_float+0x14a>
   1ad9e:	1ccb      	adds	r3, r1, #3
   1ada0:	db3b      	blt.n	1ae1a <_printf_float+0x19a>
   1ada2:	6863      	ldr	r3, [r4, #4]
   1ada4:	4299      	cmp	r1, r3
   1ada6:	dc38      	bgt.n	1ae1a <_printf_float+0x19a>
   1ada8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1adaa:	4299      	cmp	r1, r3
   1adac:	db55      	blt.n	1ae5a <_printf_float+0x1da>
   1adae:	6823      	ldr	r3, [r4, #0]
   1adb0:	6121      	str	r1, [r4, #16]
   1adb2:	07d8      	lsls	r0, r3, #31
   1adb4:	d545      	bpl.n	1ae42 <_printf_float+0x1c2>
   1adb6:	1c4b      	adds	r3, r1, #1
   1adb8:	e042      	b.n	1ae40 <_printf_float+0x1c0>
   1adba:	f00a 02df 	and.w	r2, sl, #223	; 0xdf
   1adbe:	2a47      	cmp	r2, #71	; 0x47
   1adc0:	d1d3      	bne.n	1ad6a <_printf_float+0xea>
   1adc2:	2b00      	cmp	r3, #0
   1adc4:	d1d1      	bne.n	1ad6a <_printf_float+0xea>
   1adc6:	2301      	movs	r3, #1
   1adc8:	e7ce      	b.n	1ad68 <_printf_float+0xe8>
   1adca:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   1adce:	d107      	bne.n	1ade0 <_printf_float+0x160>
   1add0:	1cc8      	adds	r0, r1, #3
   1add2:	db25      	blt.n	1ae20 <_printf_float+0x1a0>
   1add4:	6863      	ldr	r3, [r4, #4]
   1add6:	428b      	cmp	r3, r1
   1add8:	db22      	blt.n	1ae20 <_printf_float+0x1a0>
   1adda:	f04f 0a67 	mov.w	sl, #103	; 0x67
   1adde:	e7e3      	b.n	1ada8 <_printf_float+0x128>
   1ade0:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   1ade4:	d81f      	bhi.n	1ae26 <_printf_float+0x1a6>
   1ade6:	3901      	subs	r1, #1
   1ade8:	4652      	mov	r2, sl
   1adea:	f104 0050 	add.w	r0, r4, #80	; 0x50
   1adee:	910d      	str	r1, [sp, #52]	; 0x34
   1adf0:	f006 fed7 	bl	21ba2 <__exponent>
   1adf4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1adf6:	4681      	mov	r9, r0
   1adf8:	1813      	adds	r3, r2, r0
   1adfa:	2a01      	cmp	r2, #1
   1adfc:	6123      	str	r3, [r4, #16]
   1adfe:	dc02      	bgt.n	1ae06 <_printf_float+0x186>
   1ae00:	6822      	ldr	r2, [r4, #0]
   1ae02:	07d2      	lsls	r2, r2, #31
   1ae04:	d501      	bpl.n	1ae0a <_printf_float+0x18a>
   1ae06:	3301      	adds	r3, #1
   1ae08:	6123      	str	r3, [r4, #16]
   1ae0a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   1ae0e:	2b00      	cmp	r3, #0
   1ae10:	d087      	beq.n	1ad22 <_printf_float+0xa2>
   1ae12:	232d      	movs	r3, #45	; 0x2d
   1ae14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   1ae18:	e783      	b.n	1ad22 <_printf_float+0xa2>
   1ae1a:	f04f 0a65 	mov.w	sl, #101	; 0x65
   1ae1e:	e7e2      	b.n	1ade6 <_printf_float+0x166>
   1ae20:	f04f 0a45 	mov.w	sl, #69	; 0x45
   1ae24:	e7df      	b.n	1ade6 <_printf_float+0x166>
   1ae26:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
   1ae2a:	d1bd      	bne.n	1ada8 <_printf_float+0x128>
   1ae2c:	2900      	cmp	r1, #0
   1ae2e:	6863      	ldr	r3, [r4, #4]
   1ae30:	dd0b      	ble.n	1ae4a <_printf_float+0x1ca>
   1ae32:	6121      	str	r1, [r4, #16]
   1ae34:	b913      	cbnz	r3, 1ae3c <_printf_float+0x1bc>
   1ae36:	6822      	ldr	r2, [r4, #0]
   1ae38:	07d0      	lsls	r0, r2, #31
   1ae3a:	d502      	bpl.n	1ae42 <_printf_float+0x1c2>
   1ae3c:	3301      	adds	r3, #1
   1ae3e:	440b      	add	r3, r1
   1ae40:	6123      	str	r3, [r4, #16]
   1ae42:	f04f 0900 	mov.w	r9, #0
   1ae46:	65a1      	str	r1, [r4, #88]	; 0x58
   1ae48:	e7df      	b.n	1ae0a <_printf_float+0x18a>
   1ae4a:	b913      	cbnz	r3, 1ae52 <_printf_float+0x1d2>
   1ae4c:	6822      	ldr	r2, [r4, #0]
   1ae4e:	07d2      	lsls	r2, r2, #31
   1ae50:	d501      	bpl.n	1ae56 <_printf_float+0x1d6>
   1ae52:	3302      	adds	r3, #2
   1ae54:	e7f4      	b.n	1ae40 <_printf_float+0x1c0>
   1ae56:	2301      	movs	r3, #1
   1ae58:	e7f2      	b.n	1ae40 <_printf_float+0x1c0>
   1ae5a:	2900      	cmp	r1, #0
   1ae5c:	bfd4      	ite	le
   1ae5e:	f1c1 0202 	rsble	r2, r1, #2
   1ae62:	2201      	movgt	r2, #1
   1ae64:	4413      	add	r3, r2
   1ae66:	e7eb      	b.n	1ae40 <_printf_float+0x1c0>
   1ae68:	6823      	ldr	r3, [r4, #0]
   1ae6a:	055a      	lsls	r2, r3, #21
   1ae6c:	d407      	bmi.n	1ae7e <_printf_float+0x1fe>
   1ae6e:	6923      	ldr	r3, [r4, #16]
   1ae70:	4642      	mov	r2, r8
   1ae72:	4631      	mov	r1, r6
   1ae74:	4628      	mov	r0, r5
   1ae76:	47b8      	blx	r7
   1ae78:	3001      	adds	r0, #1
   1ae7a:	d12b      	bne.n	1aed4 <_printf_float+0x254>
   1ae7c:	e75b      	b.n	1ad36 <_printf_float+0xb6>
   1ae7e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   1ae82:	f240 80dc 	bls.w	1b03e <_printf_float+0x3be>
   1ae86:	2200      	movs	r2, #0
   1ae88:	2300      	movs	r3, #0
   1ae8a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   1ae8e:	f7ee f895 	bl	8fbc <__aeabi_dcmpeq>
   1ae92:	2800      	cmp	r0, #0
   1ae94:	d033      	beq.n	1aefe <_printf_float+0x27e>
   1ae96:	2301      	movs	r3, #1
   1ae98:	4a30      	ldr	r2, [pc, #192]	; (1af5c <_printf_float+0x2dc>)
   1ae9a:	4631      	mov	r1, r6
   1ae9c:	4628      	mov	r0, r5
   1ae9e:	47b8      	blx	r7
   1aea0:	3001      	adds	r0, #1
   1aea2:	f43f af48 	beq.w	1ad36 <_printf_float+0xb6>
   1aea6:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	; 0x34
   1aeaa:	4543      	cmp	r3, r8
   1aeac:	db02      	blt.n	1aeb4 <_printf_float+0x234>
   1aeae:	6823      	ldr	r3, [r4, #0]
   1aeb0:	07d8      	lsls	r0, r3, #31
   1aeb2:	d50f      	bpl.n	1aed4 <_printf_float+0x254>
   1aeb4:	4631      	mov	r1, r6
   1aeb6:	4628      	mov	r0, r5
   1aeb8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   1aebc:	47b8      	blx	r7
   1aebe:	3001      	adds	r0, #1
   1aec0:	f43f af39 	beq.w	1ad36 <_printf_float+0xb6>
   1aec4:	f04f 0900 	mov.w	r9, #0
   1aec8:	f108 38ff 	add.w	r8, r8, #4294967295
   1aecc:	f104 0a1a 	add.w	sl, r4, #26
   1aed0:	45c8      	cmp	r8, r9
   1aed2:	dc09      	bgt.n	1aee8 <_printf_float+0x268>
   1aed4:	6823      	ldr	r3, [r4, #0]
   1aed6:	079b      	lsls	r3, r3, #30
   1aed8:	f100 8102 	bmi.w	1b0e0 <_printf_float+0x460>
   1aedc:	68e0      	ldr	r0, [r4, #12]
   1aede:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1aee0:	4298      	cmp	r0, r3
   1aee2:	bfb8      	it	lt
   1aee4:	4618      	movlt	r0, r3
   1aee6:	e728      	b.n	1ad3a <_printf_float+0xba>
   1aee8:	2301      	movs	r3, #1
   1aeea:	4652      	mov	r2, sl
   1aeec:	4631      	mov	r1, r6
   1aeee:	4628      	mov	r0, r5
   1aef0:	47b8      	blx	r7
   1aef2:	3001      	adds	r0, #1
   1aef4:	f43f af1f 	beq.w	1ad36 <_printf_float+0xb6>
   1aef8:	f109 0901 	add.w	r9, r9, #1
   1aefc:	e7e8      	b.n	1aed0 <_printf_float+0x250>
   1aefe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1af00:	2b00      	cmp	r3, #0
   1af02:	dc38      	bgt.n	1af76 <_printf_float+0x2f6>
   1af04:	2301      	movs	r3, #1
   1af06:	4a15      	ldr	r2, [pc, #84]	; (1af5c <_printf_float+0x2dc>)
   1af08:	4631      	mov	r1, r6
   1af0a:	4628      	mov	r0, r5
   1af0c:	47b8      	blx	r7
   1af0e:	3001      	adds	r0, #1
   1af10:	f43f af11 	beq.w	1ad36 <_printf_float+0xb6>
   1af14:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	; 0x34
   1af18:	ea59 0303 	orrs.w	r3, r9, r3
   1af1c:	d102      	bne.n	1af24 <_printf_float+0x2a4>
   1af1e:	6823      	ldr	r3, [r4, #0]
   1af20:	07d9      	lsls	r1, r3, #31
   1af22:	d5d7      	bpl.n	1aed4 <_printf_float+0x254>
   1af24:	4631      	mov	r1, r6
   1af26:	4628      	mov	r0, r5
   1af28:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   1af2c:	47b8      	blx	r7
   1af2e:	3001      	adds	r0, #1
   1af30:	f43f af01 	beq.w	1ad36 <_printf_float+0xb6>
   1af34:	f04f 0a00 	mov.w	sl, #0
   1af38:	f104 0b1a 	add.w	fp, r4, #26
   1af3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1af3e:	425b      	negs	r3, r3
   1af40:	4553      	cmp	r3, sl
   1af42:	dc0d      	bgt.n	1af60 <_printf_float+0x2e0>
   1af44:	464b      	mov	r3, r9
   1af46:	e793      	b.n	1ae70 <_printf_float+0x1f0>
   1af48:	7fefffff 	.word	0x7fefffff
   1af4c:	00026da3 	.word	0x00026da3
   1af50:	00023a27 	.word	0x00023a27
   1af54:	00026da7 	.word	0x00026da7
   1af58:	00026dab 	.word	0x00026dab
   1af5c:	000245f7 	.word	0x000245f7
   1af60:	2301      	movs	r3, #1
   1af62:	465a      	mov	r2, fp
   1af64:	4631      	mov	r1, r6
   1af66:	4628      	mov	r0, r5
   1af68:	47b8      	blx	r7
   1af6a:	3001      	adds	r0, #1
   1af6c:	f43f aee3 	beq.w	1ad36 <_printf_float+0xb6>
   1af70:	f10a 0a01 	add.w	sl, sl, #1
   1af74:	e7e2      	b.n	1af3c <_printf_float+0x2bc>
   1af76:	6da3      	ldr	r3, [r4, #88]	; 0x58
   1af78:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   1af7c:	4553      	cmp	r3, sl
   1af7e:	bfa8      	it	ge
   1af80:	4653      	movge	r3, sl
   1af82:	2b00      	cmp	r3, #0
   1af84:	4699      	mov	r9, r3
   1af86:	dc36      	bgt.n	1aff6 <_printf_float+0x376>
   1af88:	f04f 0b00 	mov.w	fp, #0
   1af8c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   1af90:	f104 021a 	add.w	r2, r4, #26
   1af94:	6da3      	ldr	r3, [r4, #88]	; 0x58
   1af96:	930a      	str	r3, [sp, #40]	; 0x28
   1af98:	eba3 0309 	sub.w	r3, r3, r9
   1af9c:	455b      	cmp	r3, fp
   1af9e:	dc31      	bgt.n	1b004 <_printf_float+0x384>
   1afa0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1afa2:	459a      	cmp	sl, r3
   1afa4:	dc3a      	bgt.n	1b01c <_printf_float+0x39c>
   1afa6:	6823      	ldr	r3, [r4, #0]
   1afa8:	07da      	lsls	r2, r3, #31
   1afaa:	d437      	bmi.n	1b01c <_printf_float+0x39c>
   1afac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1afae:	ebaa 0903 	sub.w	r9, sl, r3
   1afb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1afb4:	ebaa 0303 	sub.w	r3, sl, r3
   1afb8:	4599      	cmp	r9, r3
   1afba:	bfa8      	it	ge
   1afbc:	4699      	movge	r9, r3
   1afbe:	f1b9 0f00 	cmp.w	r9, #0
   1afc2:	dc33      	bgt.n	1b02c <_printf_float+0x3ac>
   1afc4:	f04f 0800 	mov.w	r8, #0
   1afc8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   1afcc:	f104 0b1a 	add.w	fp, r4, #26
   1afd0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1afd2:	ebaa 0303 	sub.w	r3, sl, r3
   1afd6:	eba3 0309 	sub.w	r3, r3, r9
   1afda:	4543      	cmp	r3, r8
   1afdc:	f77f af7a 	ble.w	1aed4 <_printf_float+0x254>
   1afe0:	2301      	movs	r3, #1
   1afe2:	465a      	mov	r2, fp
   1afe4:	4631      	mov	r1, r6
   1afe6:	4628      	mov	r0, r5
   1afe8:	47b8      	blx	r7
   1afea:	3001      	adds	r0, #1
   1afec:	f43f aea3 	beq.w	1ad36 <_printf_float+0xb6>
   1aff0:	f108 0801 	add.w	r8, r8, #1
   1aff4:	e7ec      	b.n	1afd0 <_printf_float+0x350>
   1aff6:	4642      	mov	r2, r8
   1aff8:	4631      	mov	r1, r6
   1affa:	4628      	mov	r0, r5
   1affc:	47b8      	blx	r7
   1affe:	3001      	adds	r0, #1
   1b000:	d1c2      	bne.n	1af88 <_printf_float+0x308>
   1b002:	e698      	b.n	1ad36 <_printf_float+0xb6>
   1b004:	2301      	movs	r3, #1
   1b006:	4631      	mov	r1, r6
   1b008:	4628      	mov	r0, r5
   1b00a:	920a      	str	r2, [sp, #40]	; 0x28
   1b00c:	47b8      	blx	r7
   1b00e:	3001      	adds	r0, #1
   1b010:	f43f ae91 	beq.w	1ad36 <_printf_float+0xb6>
   1b014:	f10b 0b01 	add.w	fp, fp, #1
   1b018:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1b01a:	e7bb      	b.n	1af94 <_printf_float+0x314>
   1b01c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   1b020:	4631      	mov	r1, r6
   1b022:	4628      	mov	r0, r5
   1b024:	47b8      	blx	r7
   1b026:	3001      	adds	r0, #1
   1b028:	d1c0      	bne.n	1afac <_printf_float+0x32c>
   1b02a:	e684      	b.n	1ad36 <_printf_float+0xb6>
   1b02c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1b02e:	464b      	mov	r3, r9
   1b030:	4631      	mov	r1, r6
   1b032:	4628      	mov	r0, r5
   1b034:	4442      	add	r2, r8
   1b036:	47b8      	blx	r7
   1b038:	3001      	adds	r0, #1
   1b03a:	d1c3      	bne.n	1afc4 <_printf_float+0x344>
   1b03c:	e67b      	b.n	1ad36 <_printf_float+0xb6>
   1b03e:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   1b042:	f1ba 0f01 	cmp.w	sl, #1
   1b046:	dc01      	bgt.n	1b04c <_printf_float+0x3cc>
   1b048:	07db      	lsls	r3, r3, #31
   1b04a:	d536      	bpl.n	1b0ba <_printf_float+0x43a>
   1b04c:	2301      	movs	r3, #1
   1b04e:	4642      	mov	r2, r8
   1b050:	4631      	mov	r1, r6
   1b052:	4628      	mov	r0, r5
   1b054:	47b8      	blx	r7
   1b056:	3001      	adds	r0, #1
   1b058:	f43f ae6d 	beq.w	1ad36 <_printf_float+0xb6>
   1b05c:	4631      	mov	r1, r6
   1b05e:	4628      	mov	r0, r5
   1b060:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   1b064:	47b8      	blx	r7
   1b066:	3001      	adds	r0, #1
   1b068:	f43f ae65 	beq.w	1ad36 <_printf_float+0xb6>
   1b06c:	2200      	movs	r2, #0
   1b06e:	2300      	movs	r3, #0
   1b070:	f10a 3aff 	add.w	sl, sl, #4294967295
   1b074:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   1b078:	f7ed ffa0 	bl	8fbc <__aeabi_dcmpeq>
   1b07c:	b9c0      	cbnz	r0, 1b0b0 <_printf_float+0x430>
   1b07e:	4653      	mov	r3, sl
   1b080:	f108 0201 	add.w	r2, r8, #1
   1b084:	4631      	mov	r1, r6
   1b086:	4628      	mov	r0, r5
   1b088:	47b8      	blx	r7
   1b08a:	3001      	adds	r0, #1
   1b08c:	d10c      	bne.n	1b0a8 <_printf_float+0x428>
   1b08e:	e652      	b.n	1ad36 <_printf_float+0xb6>
   1b090:	2301      	movs	r3, #1
   1b092:	465a      	mov	r2, fp
   1b094:	4631      	mov	r1, r6
   1b096:	4628      	mov	r0, r5
   1b098:	47b8      	blx	r7
   1b09a:	3001      	adds	r0, #1
   1b09c:	f43f ae4b 	beq.w	1ad36 <_printf_float+0xb6>
   1b0a0:	f108 0801 	add.w	r8, r8, #1
   1b0a4:	45d0      	cmp	r8, sl
   1b0a6:	dbf3      	blt.n	1b090 <_printf_float+0x410>
   1b0a8:	464b      	mov	r3, r9
   1b0aa:	f104 0250 	add.w	r2, r4, #80	; 0x50
   1b0ae:	e6e0      	b.n	1ae72 <_printf_float+0x1f2>
   1b0b0:	f04f 0800 	mov.w	r8, #0
   1b0b4:	f104 0b1a 	add.w	fp, r4, #26
   1b0b8:	e7f4      	b.n	1b0a4 <_printf_float+0x424>
   1b0ba:	2301      	movs	r3, #1
   1b0bc:	4642      	mov	r2, r8
   1b0be:	e7e1      	b.n	1b084 <_printf_float+0x404>
   1b0c0:	2301      	movs	r3, #1
   1b0c2:	464a      	mov	r2, r9
   1b0c4:	4631      	mov	r1, r6
   1b0c6:	4628      	mov	r0, r5
   1b0c8:	47b8      	blx	r7
   1b0ca:	3001      	adds	r0, #1
   1b0cc:	f43f ae33 	beq.w	1ad36 <_printf_float+0xb6>
   1b0d0:	f108 0801 	add.w	r8, r8, #1
   1b0d4:	68e3      	ldr	r3, [r4, #12]
   1b0d6:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1b0d8:	1a5b      	subs	r3, r3, r1
   1b0da:	4543      	cmp	r3, r8
   1b0dc:	dcf0      	bgt.n	1b0c0 <_printf_float+0x440>
   1b0de:	e6fd      	b.n	1aedc <_printf_float+0x25c>
   1b0e0:	f04f 0800 	mov.w	r8, #0
   1b0e4:	f104 0919 	add.w	r9, r4, #25
   1b0e8:	e7f4      	b.n	1b0d4 <_printf_float+0x454>
   1b0ea:	bf00      	nop

0001b0ec <_printf_i>:
   1b0ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1b0f0:	7e0f      	ldrb	r7, [r1, #24]
   1b0f2:	4691      	mov	r9, r2
   1b0f4:	4680      	mov	r8, r0
   1b0f6:	460c      	mov	r4, r1
   1b0f8:	2f78      	cmp	r7, #120	; 0x78
   1b0fa:	469a      	mov	sl, r3
   1b0fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1b0fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
   1b102:	d807      	bhi.n	1b114 <_printf_i+0x28>
   1b104:	2f62      	cmp	r7, #98	; 0x62
   1b106:	d80a      	bhi.n	1b11e <_printf_i+0x32>
   1b108:	2f00      	cmp	r7, #0
   1b10a:	f000 80e0 	beq.w	1b2ce <_printf_i+0x1e2>
   1b10e:	2f58      	cmp	r7, #88	; 0x58
   1b110:	f000 80bb 	beq.w	1b28a <_printf_i+0x19e>
   1b114:	f104 0642 	add.w	r6, r4, #66	; 0x42
   1b118:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   1b11c:	e03a      	b.n	1b194 <_printf_i+0xa8>
   1b11e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   1b122:	2b15      	cmp	r3, #21
   1b124:	d8f6      	bhi.n	1b114 <_printf_i+0x28>
   1b126:	a101      	add	r1, pc, #4	; (adr r1, 1b12c <_printf_i+0x40>)
   1b128:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   1b12c:	0001b185 	.word	0x0001b185
   1b130:	0001b199 	.word	0x0001b199
   1b134:	0001b115 	.word	0x0001b115
   1b138:	0001b115 	.word	0x0001b115
   1b13c:	0001b115 	.word	0x0001b115
   1b140:	0001b115 	.word	0x0001b115
   1b144:	0001b199 	.word	0x0001b199
   1b148:	0001b115 	.word	0x0001b115
   1b14c:	0001b115 	.word	0x0001b115
   1b150:	0001b115 	.word	0x0001b115
   1b154:	0001b115 	.word	0x0001b115
   1b158:	0001b2b5 	.word	0x0001b2b5
   1b15c:	0001b229 	.word	0x0001b229
   1b160:	0001b26b 	.word	0x0001b26b
   1b164:	0001b115 	.word	0x0001b115
   1b168:	0001b115 	.word	0x0001b115
   1b16c:	0001b2d7 	.word	0x0001b2d7
   1b170:	0001b115 	.word	0x0001b115
   1b174:	0001b229 	.word	0x0001b229
   1b178:	0001b115 	.word	0x0001b115
   1b17c:	0001b115 	.word	0x0001b115
   1b180:	0001b273 	.word	0x0001b273
   1b184:	682b      	ldr	r3, [r5, #0]
   1b186:	f104 0642 	add.w	r6, r4, #66	; 0x42
   1b18a:	1d1a      	adds	r2, r3, #4
   1b18c:	681b      	ldr	r3, [r3, #0]
   1b18e:	602a      	str	r2, [r5, #0]
   1b190:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   1b194:	2301      	movs	r3, #1
   1b196:	e0ab      	b.n	1b2f0 <_printf_i+0x204>
   1b198:	6823      	ldr	r3, [r4, #0]
   1b19a:	6829      	ldr	r1, [r5, #0]
   1b19c:	061f      	lsls	r7, r3, #24
   1b19e:	f101 0004 	add.w	r0, r1, #4
   1b1a2:	6028      	str	r0, [r5, #0]
   1b1a4:	d501      	bpl.n	1b1aa <_printf_i+0xbe>
   1b1a6:	680d      	ldr	r5, [r1, #0]
   1b1a8:	e003      	b.n	1b1b2 <_printf_i+0xc6>
   1b1aa:	065e      	lsls	r6, r3, #25
   1b1ac:	d5fb      	bpl.n	1b1a6 <_printf_i+0xba>
   1b1ae:	f9b1 5000 	ldrsh.w	r5, [r1]
   1b1b2:	2d00      	cmp	r5, #0
   1b1b4:	6861      	ldr	r1, [r4, #4]
   1b1b6:	da7a      	bge.n	1b2ae <_printf_i+0x1c2>
   1b1b8:	202d      	movs	r0, #45	; 0x2d
   1b1ba:	2900      	cmp	r1, #0
   1b1bc:	60a1      	str	r1, [r4, #8]
   1b1be:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
   1b1c2:	da2d      	bge.n	1b220 <_printf_i+0x134>
   1b1c4:	426d      	negs	r5, r5
   1b1c6:	485e      	ldr	r0, [pc, #376]	; (1b340 <_printf_i+0x254>)
   1b1c8:	230a      	movs	r3, #10
   1b1ca:	4616      	mov	r6, r2
   1b1cc:	fbb5 f1f3 	udiv	r1, r5, r3
   1b1d0:	fb03 5711 	mls	r7, r3, r1, r5
   1b1d4:	5dc7      	ldrb	r7, [r0, r7]
   1b1d6:	f806 7d01 	strb.w	r7, [r6, #-1]!
   1b1da:	462f      	mov	r7, r5
   1b1dc:	460d      	mov	r5, r1
   1b1de:	42bb      	cmp	r3, r7
   1b1e0:	d9f4      	bls.n	1b1cc <_printf_i+0xe0>
   1b1e2:	2b08      	cmp	r3, #8
   1b1e4:	d10b      	bne.n	1b1fe <_printf_i+0x112>
   1b1e6:	6823      	ldr	r3, [r4, #0]
   1b1e8:	07df      	lsls	r7, r3, #31
   1b1ea:	d508      	bpl.n	1b1fe <_printf_i+0x112>
   1b1ec:	6923      	ldr	r3, [r4, #16]
   1b1ee:	6861      	ldr	r1, [r4, #4]
   1b1f0:	4299      	cmp	r1, r3
   1b1f2:	bfde      	ittt	le
   1b1f4:	2330      	movle	r3, #48	; 0x30
   1b1f6:	f806 3c01 	strble.w	r3, [r6, #-1]
   1b1fa:	f106 36ff 	addle.w	r6, r6, #4294967295
   1b1fe:	1b92      	subs	r2, r2, r6
   1b200:	6122      	str	r2, [r4, #16]
   1b202:	464b      	mov	r3, r9
   1b204:	aa03      	add	r2, sp, #12
   1b206:	4621      	mov	r1, r4
   1b208:	4640      	mov	r0, r8
   1b20a:	f8cd a000 	str.w	sl, [sp]
   1b20e:	f006 fd01 	bl	21c14 <_printf_common>
   1b212:	3001      	adds	r0, #1
   1b214:	d171      	bne.n	1b2fa <_printf_i+0x20e>
   1b216:	f04f 30ff 	mov.w	r0, #4294967295
   1b21a:	b004      	add	sp, #16
   1b21c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b220:	f023 0304 	bic.w	r3, r3, #4
   1b224:	6023      	str	r3, [r4, #0]
   1b226:	e7cd      	b.n	1b1c4 <_printf_i+0xd8>
   1b228:	682b      	ldr	r3, [r5, #0]
   1b22a:	6820      	ldr	r0, [r4, #0]
   1b22c:	1d19      	adds	r1, r3, #4
   1b22e:	6029      	str	r1, [r5, #0]
   1b230:	0605      	lsls	r5, r0, #24
   1b232:	d501      	bpl.n	1b238 <_printf_i+0x14c>
   1b234:	681d      	ldr	r5, [r3, #0]
   1b236:	e002      	b.n	1b23e <_printf_i+0x152>
   1b238:	0641      	lsls	r1, r0, #25
   1b23a:	d5fb      	bpl.n	1b234 <_printf_i+0x148>
   1b23c:	881d      	ldrh	r5, [r3, #0]
   1b23e:	2f6f      	cmp	r7, #111	; 0x6f
   1b240:	483f      	ldr	r0, [pc, #252]	; (1b340 <_printf_i+0x254>)
   1b242:	bf14      	ite	ne
   1b244:	230a      	movne	r3, #10
   1b246:	2308      	moveq	r3, #8
   1b248:	2100      	movs	r1, #0
   1b24a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   1b24e:	6866      	ldr	r6, [r4, #4]
   1b250:	2e00      	cmp	r6, #0
   1b252:	60a6      	str	r6, [r4, #8]
   1b254:	dbb9      	blt.n	1b1ca <_printf_i+0xde>
   1b256:	6821      	ldr	r1, [r4, #0]
   1b258:	f021 0104 	bic.w	r1, r1, #4
   1b25c:	6021      	str	r1, [r4, #0]
   1b25e:	2d00      	cmp	r5, #0
   1b260:	d1b3      	bne.n	1b1ca <_printf_i+0xde>
   1b262:	2e00      	cmp	r6, #0
   1b264:	d1b1      	bne.n	1b1ca <_printf_i+0xde>
   1b266:	4616      	mov	r6, r2
   1b268:	e7bb      	b.n	1b1e2 <_printf_i+0xf6>
   1b26a:	6823      	ldr	r3, [r4, #0]
   1b26c:	f043 0320 	orr.w	r3, r3, #32
   1b270:	6023      	str	r3, [r4, #0]
   1b272:	2778      	movs	r7, #120	; 0x78
   1b274:	4833      	ldr	r0, [pc, #204]	; (1b344 <_printf_i+0x258>)
   1b276:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   1b27a:	6829      	ldr	r1, [r5, #0]
   1b27c:	6823      	ldr	r3, [r4, #0]
   1b27e:	1d0e      	adds	r6, r1, #4
   1b280:	602e      	str	r6, [r5, #0]
   1b282:	061e      	lsls	r6, r3, #24
   1b284:	d503      	bpl.n	1b28e <_printf_i+0x1a2>
   1b286:	680d      	ldr	r5, [r1, #0]
   1b288:	e004      	b.n	1b294 <_printf_i+0x1a8>
   1b28a:	482d      	ldr	r0, [pc, #180]	; (1b340 <_printf_i+0x254>)
   1b28c:	e7f3      	b.n	1b276 <_printf_i+0x18a>
   1b28e:	065d      	lsls	r5, r3, #25
   1b290:	d5f9      	bpl.n	1b286 <_printf_i+0x19a>
   1b292:	880d      	ldrh	r5, [r1, #0]
   1b294:	07d9      	lsls	r1, r3, #31
   1b296:	bf44      	itt	mi
   1b298:	f043 0320 	orrmi.w	r3, r3, #32
   1b29c:	6023      	strmi	r3, [r4, #0]
   1b29e:	b10d      	cbz	r5, 1b2a4 <_printf_i+0x1b8>
   1b2a0:	2310      	movs	r3, #16
   1b2a2:	e7d1      	b.n	1b248 <_printf_i+0x15c>
   1b2a4:	6823      	ldr	r3, [r4, #0]
   1b2a6:	f023 0320 	bic.w	r3, r3, #32
   1b2aa:	6023      	str	r3, [r4, #0]
   1b2ac:	e7f8      	b.n	1b2a0 <_printf_i+0x1b4>
   1b2ae:	4824      	ldr	r0, [pc, #144]	; (1b340 <_printf_i+0x254>)
   1b2b0:	230a      	movs	r3, #10
   1b2b2:	e7cc      	b.n	1b24e <_printf_i+0x162>
   1b2b4:	682b      	ldr	r3, [r5, #0]
   1b2b6:	6826      	ldr	r6, [r4, #0]
   1b2b8:	1d18      	adds	r0, r3, #4
   1b2ba:	6961      	ldr	r1, [r4, #20]
   1b2bc:	6028      	str	r0, [r5, #0]
   1b2be:	0635      	lsls	r5, r6, #24
   1b2c0:	681b      	ldr	r3, [r3, #0]
   1b2c2:	d501      	bpl.n	1b2c8 <_printf_i+0x1dc>
   1b2c4:	6019      	str	r1, [r3, #0]
   1b2c6:	e002      	b.n	1b2ce <_printf_i+0x1e2>
   1b2c8:	0670      	lsls	r0, r6, #25
   1b2ca:	d5fb      	bpl.n	1b2c4 <_printf_i+0x1d8>
   1b2cc:	8019      	strh	r1, [r3, #0]
   1b2ce:	2300      	movs	r3, #0
   1b2d0:	4616      	mov	r6, r2
   1b2d2:	6123      	str	r3, [r4, #16]
   1b2d4:	e795      	b.n	1b202 <_printf_i+0x116>
   1b2d6:	682b      	ldr	r3, [r5, #0]
   1b2d8:	2100      	movs	r1, #0
   1b2da:	1d1a      	adds	r2, r3, #4
   1b2dc:	602a      	str	r2, [r5, #0]
   1b2de:	681e      	ldr	r6, [r3, #0]
   1b2e0:	6862      	ldr	r2, [r4, #4]
   1b2e2:	4630      	mov	r0, r6
   1b2e4:	f006 fe03 	bl	21eee <memchr>
   1b2e8:	b108      	cbz	r0, 1b2ee <_printf_i+0x202>
   1b2ea:	1b80      	subs	r0, r0, r6
   1b2ec:	6060      	str	r0, [r4, #4]
   1b2ee:	6863      	ldr	r3, [r4, #4]
   1b2f0:	6123      	str	r3, [r4, #16]
   1b2f2:	2300      	movs	r3, #0
   1b2f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   1b2f8:	e783      	b.n	1b202 <_printf_i+0x116>
   1b2fa:	6923      	ldr	r3, [r4, #16]
   1b2fc:	4632      	mov	r2, r6
   1b2fe:	4649      	mov	r1, r9
   1b300:	4640      	mov	r0, r8
   1b302:	47d0      	blx	sl
   1b304:	3001      	adds	r0, #1
   1b306:	d086      	beq.n	1b216 <_printf_i+0x12a>
   1b308:	6823      	ldr	r3, [r4, #0]
   1b30a:	079b      	lsls	r3, r3, #30
   1b30c:	d414      	bmi.n	1b338 <_printf_i+0x24c>
   1b30e:	68e0      	ldr	r0, [r4, #12]
   1b310:	9b03      	ldr	r3, [sp, #12]
   1b312:	4298      	cmp	r0, r3
   1b314:	bfb8      	it	lt
   1b316:	4618      	movlt	r0, r3
   1b318:	e77f      	b.n	1b21a <_printf_i+0x12e>
   1b31a:	2301      	movs	r3, #1
   1b31c:	4632      	mov	r2, r6
   1b31e:	4649      	mov	r1, r9
   1b320:	4640      	mov	r0, r8
   1b322:	47d0      	blx	sl
   1b324:	3001      	adds	r0, #1
   1b326:	f43f af76 	beq.w	1b216 <_printf_i+0x12a>
   1b32a:	3501      	adds	r5, #1
   1b32c:	68e3      	ldr	r3, [r4, #12]
   1b32e:	9903      	ldr	r1, [sp, #12]
   1b330:	1a5b      	subs	r3, r3, r1
   1b332:	42ab      	cmp	r3, r5
   1b334:	dcf1      	bgt.n	1b31a <_printf_i+0x22e>
   1b336:	e7ea      	b.n	1b30e <_printf_i+0x222>
   1b338:	2500      	movs	r5, #0
   1b33a:	f104 0619 	add.w	r6, r4, #25
   1b33e:	e7f5      	b.n	1b32c <_printf_i+0x240>
   1b340:	00026daf 	.word	0x00026daf
   1b344:	00026dc0 	.word	0x00026dc0

0001b348 <iprintf>:
   1b348:	b40f      	push	{r0, r1, r2, r3}
   1b34a:	4b0a      	ldr	r3, [pc, #40]	; (1b374 <iprintf+0x2c>)
   1b34c:	b513      	push	{r0, r1, r4, lr}
   1b34e:	681c      	ldr	r4, [r3, #0]
   1b350:	b124      	cbz	r4, 1b35c <iprintf+0x14>
   1b352:	69a3      	ldr	r3, [r4, #24]
   1b354:	b913      	cbnz	r3, 1b35c <iprintf+0x14>
   1b356:	4620      	mov	r0, r4
   1b358:	f000 f860 	bl	1b41c <__sinit>
   1b35c:	ab05      	add	r3, sp, #20
   1b35e:	9a04      	ldr	r2, [sp, #16]
   1b360:	68a1      	ldr	r1, [r4, #8]
   1b362:	4620      	mov	r0, r4
   1b364:	9301      	str	r3, [sp, #4]
   1b366:	f000 fc05 	bl	1bb74 <_vfiprintf_r>
   1b36a:	b002      	add	sp, #8
   1b36c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b370:	b004      	add	sp, #16
   1b372:	4770      	bx	lr
   1b374:	20008570 	.word	0x20008570

0001b378 <_sbrk_r>:
   1b378:	b538      	push	{r3, r4, r5, lr}
   1b37a:	2300      	movs	r3, #0
   1b37c:	4d05      	ldr	r5, [pc, #20]	; (1b394 <_sbrk_r+0x1c>)
   1b37e:	4604      	mov	r4, r0
   1b380:	4608      	mov	r0, r1
   1b382:	602b      	str	r3, [r5, #0]
   1b384:	f7f3 f942 	bl	e60c <_sbrk>
   1b388:	1c43      	adds	r3, r0, #1
   1b38a:	d102      	bne.n	1b392 <_sbrk_r+0x1a>
   1b38c:	682b      	ldr	r3, [r5, #0]
   1b38e:	b103      	cbz	r3, 1b392 <_sbrk_r+0x1a>
   1b390:	6023      	str	r3, [r4, #0]
   1b392:	bd38      	pop	{r3, r4, r5, pc}
   1b394:	2000a188 	.word	0x2000a188

0001b398 <std>:
   1b398:	2300      	movs	r3, #0
   1b39a:	b510      	push	{r4, lr}
   1b39c:	4604      	mov	r4, r0
   1b39e:	6083      	str	r3, [r0, #8]
   1b3a0:	8181      	strh	r1, [r0, #12]
   1b3a2:	4619      	mov	r1, r3
   1b3a4:	6643      	str	r3, [r0, #100]	; 0x64
   1b3a6:	81c2      	strh	r2, [r0, #14]
   1b3a8:	2208      	movs	r2, #8
   1b3aa:	6183      	str	r3, [r0, #24]
   1b3ac:	e9c0 3300 	strd	r3, r3, [r0]
   1b3b0:	e9c0 3304 	strd	r3, r3, [r0, #16]
   1b3b4:	305c      	adds	r0, #92	; 0x5c
   1b3b6:	f006 fb77 	bl	21aa8 <memset>
   1b3ba:	4b05      	ldr	r3, [pc, #20]	; (1b3d0 <std+0x38>)
   1b3bc:	6224      	str	r4, [r4, #32]
   1b3be:	6263      	str	r3, [r4, #36]	; 0x24
   1b3c0:	4b04      	ldr	r3, [pc, #16]	; (1b3d4 <std+0x3c>)
   1b3c2:	62a3      	str	r3, [r4, #40]	; 0x28
   1b3c4:	4b04      	ldr	r3, [pc, #16]	; (1b3d8 <std+0x40>)
   1b3c6:	62e3      	str	r3, [r4, #44]	; 0x2c
   1b3c8:	4b04      	ldr	r3, [pc, #16]	; (1b3dc <std+0x44>)
   1b3ca:	6323      	str	r3, [r4, #48]	; 0x30
   1b3cc:	bd10      	pop	{r4, pc}
   1b3ce:	bf00      	nop
   1b3d0:	0002202d 	.word	0x0002202d
   1b3d4:	0002204f 	.word	0x0002204f
   1b3d8:	00022087 	.word	0x00022087
   1b3dc:	000220ab 	.word	0x000220ab

0001b3e0 <_cleanup_r>:
   1b3e0:	4901      	ldr	r1, [pc, #4]	; (1b3e8 <_cleanup_r+0x8>)
   1b3e2:	f006 bd65 	b.w	21eb0 <_fwalk_reent>
   1b3e6:	bf00      	nop
   1b3e8:	0001bfc9 	.word	0x0001bfc9

0001b3ec <__sfp_lock_acquire>:
   1b3ec:	4801      	ldr	r0, [pc, #4]	; (1b3f4 <__sfp_lock_acquire+0x8>)
   1b3ee:	f002 bc0a 	b.w	1dc06 <__retarget_lock_acquire_recursive>
   1b3f2:	bf00      	nop
   1b3f4:	200088e0 	.word	0x200088e0

0001b3f8 <__sfp_lock_release>:
   1b3f8:	4801      	ldr	r0, [pc, #4]	; (1b400 <__sfp_lock_release+0x8>)
   1b3fa:	f002 bc0a 	b.w	1dc12 <__retarget_lock_release_recursive>
   1b3fe:	bf00      	nop
   1b400:	200088e0 	.word	0x200088e0

0001b404 <__sinit_lock_acquire>:
   1b404:	4801      	ldr	r0, [pc, #4]	; (1b40c <__sinit_lock_acquire+0x8>)
   1b406:	f002 bbfe 	b.w	1dc06 <__retarget_lock_acquire_recursive>
   1b40a:	bf00      	nop
   1b40c:	200088f4 	.word	0x200088f4

0001b410 <__sinit_lock_release>:
   1b410:	4801      	ldr	r0, [pc, #4]	; (1b418 <__sinit_lock_release+0x8>)
   1b412:	f002 bbfe 	b.w	1dc12 <__retarget_lock_release_recursive>
   1b416:	bf00      	nop
   1b418:	200088f4 	.word	0x200088f4

0001b41c <__sinit>:
   1b41c:	b510      	push	{r4, lr}
   1b41e:	4604      	mov	r4, r0
   1b420:	f7ff fff0 	bl	1b404 <__sinit_lock_acquire>
   1b424:	69a3      	ldr	r3, [r4, #24]
   1b426:	b11b      	cbz	r3, 1b430 <__sinit+0x14>
   1b428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b42c:	f7ff bff0 	b.w	1b410 <__sinit_lock_release>
   1b430:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   1b434:	6523      	str	r3, [r4, #80]	; 0x50
   1b436:	4620      	mov	r0, r4
   1b438:	4b12      	ldr	r3, [pc, #72]	; (1b484 <__sinit+0x68>)
   1b43a:	4a13      	ldr	r2, [pc, #76]	; (1b488 <__sinit+0x6c>)
   1b43c:	681b      	ldr	r3, [r3, #0]
   1b43e:	62a2      	str	r2, [r4, #40]	; 0x28
   1b440:	42a3      	cmp	r3, r4
   1b442:	bf04      	itt	eq
   1b444:	2301      	moveq	r3, #1
   1b446:	61a3      	streq	r3, [r4, #24]
   1b448:	f000 f820 	bl	1b48c <__sfp>
   1b44c:	6060      	str	r0, [r4, #4]
   1b44e:	4620      	mov	r0, r4
   1b450:	f000 f81c 	bl	1b48c <__sfp>
   1b454:	60a0      	str	r0, [r4, #8]
   1b456:	4620      	mov	r0, r4
   1b458:	f000 f818 	bl	1b48c <__sfp>
   1b45c:	2200      	movs	r2, #0
   1b45e:	2104      	movs	r1, #4
   1b460:	60e0      	str	r0, [r4, #12]
   1b462:	6860      	ldr	r0, [r4, #4]
   1b464:	f7ff ff98 	bl	1b398 <std>
   1b468:	2201      	movs	r2, #1
   1b46a:	2109      	movs	r1, #9
   1b46c:	68a0      	ldr	r0, [r4, #8]
   1b46e:	f7ff ff93 	bl	1b398 <std>
   1b472:	2202      	movs	r2, #2
   1b474:	2112      	movs	r1, #18
   1b476:	68e0      	ldr	r0, [r4, #12]
   1b478:	f7ff ff8e 	bl	1b398 <std>
   1b47c:	2301      	movs	r3, #1
   1b47e:	61a3      	str	r3, [r4, #24]
   1b480:	e7d2      	b.n	1b428 <__sinit+0xc>
   1b482:	bf00      	nop
   1b484:	00023390 	.word	0x00023390
   1b488:	0001b3e1 	.word	0x0001b3e1

0001b48c <__sfp>:
   1b48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b48e:	4607      	mov	r7, r0
   1b490:	f7ff ffac 	bl	1b3ec <__sfp_lock_acquire>
   1b494:	4b1e      	ldr	r3, [pc, #120]	; (1b510 <__sfp+0x84>)
   1b496:	681e      	ldr	r6, [r3, #0]
   1b498:	69b3      	ldr	r3, [r6, #24]
   1b49a:	b913      	cbnz	r3, 1b4a2 <__sfp+0x16>
   1b49c:	4630      	mov	r0, r6
   1b49e:	f7ff ffbd 	bl	1b41c <__sinit>
   1b4a2:	3648      	adds	r6, #72	; 0x48
   1b4a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   1b4a8:	3b01      	subs	r3, #1
   1b4aa:	d503      	bpl.n	1b4b4 <__sfp+0x28>
   1b4ac:	6833      	ldr	r3, [r6, #0]
   1b4ae:	b30b      	cbz	r3, 1b4f4 <__sfp+0x68>
   1b4b0:	6836      	ldr	r6, [r6, #0]
   1b4b2:	e7f7      	b.n	1b4a4 <__sfp+0x18>
   1b4b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   1b4b8:	b9d5      	cbnz	r5, 1b4f0 <__sfp+0x64>
   1b4ba:	4b16      	ldr	r3, [pc, #88]	; (1b514 <__sfp+0x88>)
   1b4bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1b4c0:	6665      	str	r5, [r4, #100]	; 0x64
   1b4c2:	60e3      	str	r3, [r4, #12]
   1b4c4:	f002 fb95 	bl	1dbf2 <__retarget_lock_init_recursive>
   1b4c8:	f7ff ff96 	bl	1b3f8 <__sfp_lock_release>
   1b4cc:	2208      	movs	r2, #8
   1b4ce:	4629      	mov	r1, r5
   1b4d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   1b4d4:	6025      	str	r5, [r4, #0]
   1b4d6:	61a5      	str	r5, [r4, #24]
   1b4d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
   1b4dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
   1b4e0:	f006 fae2 	bl	21aa8 <memset>
   1b4e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   1b4e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   1b4ec:	4620      	mov	r0, r4
   1b4ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b4f0:	3468      	adds	r4, #104	; 0x68
   1b4f2:	e7d9      	b.n	1b4a8 <__sfp+0x1c>
   1b4f4:	2104      	movs	r1, #4
   1b4f6:	4638      	mov	r0, r7
   1b4f8:	f006 fcc4 	bl	21e84 <__sfmoreglue>
   1b4fc:	4604      	mov	r4, r0
   1b4fe:	6030      	str	r0, [r6, #0]
   1b500:	2800      	cmp	r0, #0
   1b502:	d1d5      	bne.n	1b4b0 <__sfp+0x24>
   1b504:	f7ff ff78 	bl	1b3f8 <__sfp_lock_release>
   1b508:	230c      	movs	r3, #12
   1b50a:	603b      	str	r3, [r7, #0]
   1b50c:	e7ee      	b.n	1b4ec <__sfp+0x60>
   1b50e:	bf00      	nop
   1b510:	00023390 	.word	0x00023390
   1b514:	ffff0001 	.word	0xffff0001

0001b518 <_localeconv_r>:
   1b518:	4800      	ldr	r0, [pc, #0]	; (1b51c <_localeconv_r+0x4>)
   1b51a:	4770      	bx	lr
   1b51c:	200086c4 	.word	0x200086c4

0001b520 <__malloc_lock>:
   1b520:	4801      	ldr	r0, [pc, #4]	; (1b528 <__malloc_lock+0x8>)
   1b522:	f002 bb70 	b.w	1dc06 <__retarget_lock_acquire_recursive>
   1b526:	bf00      	nop
   1b528:	200088cc 	.word	0x200088cc

0001b52c <__malloc_unlock>:
   1b52c:	4801      	ldr	r0, [pc, #4]	; (1b534 <__malloc_unlock+0x8>)
   1b52e:	f002 bb70 	b.w	1dc12 <__retarget_lock_release_recursive>
   1b532:	bf00      	nop
   1b534:	200088cc 	.word	0x200088cc

0001b538 <_Balloc>:
   1b538:	b570      	push	{r4, r5, r6, lr}
   1b53a:	6a46      	ldr	r6, [r0, #36]	; 0x24
   1b53c:	4604      	mov	r4, r0
   1b53e:	460d      	mov	r5, r1
   1b540:	b976      	cbnz	r6, 1b560 <_Balloc+0x28>
   1b542:	2010      	movs	r0, #16
   1b544:	f7ff faf0 	bl	1ab28 <malloc>
   1b548:	4602      	mov	r2, r0
   1b54a:	6260      	str	r0, [r4, #36]	; 0x24
   1b54c:	b920      	cbnz	r0, 1b558 <_Balloc+0x20>
   1b54e:	4b18      	ldr	r3, [pc, #96]	; (1b5b0 <_Balloc+0x78>)
   1b550:	2166      	movs	r1, #102	; 0x66
   1b552:	4818      	ldr	r0, [pc, #96]	; (1b5b4 <_Balloc+0x7c>)
   1b554:	f000 fd0a 	bl	1bf6c <__assert_func>
   1b558:	e9c0 6601 	strd	r6, r6, [r0, #4]
   1b55c:	6006      	str	r6, [r0, #0]
   1b55e:	60c6      	str	r6, [r0, #12]
   1b560:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1b562:	68f3      	ldr	r3, [r6, #12]
   1b564:	b183      	cbz	r3, 1b588 <_Balloc+0x50>
   1b566:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b568:	68db      	ldr	r3, [r3, #12]
   1b56a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   1b56e:	b9b8      	cbnz	r0, 1b5a0 <_Balloc+0x68>
   1b570:	2101      	movs	r1, #1
   1b572:	4620      	mov	r0, r4
   1b574:	fa01 f605 	lsl.w	r6, r1, r5
   1b578:	1d72      	adds	r2, r6, #5
   1b57a:	0092      	lsls	r2, r2, #2
   1b57c:	f006 fa9c 	bl	21ab8 <_calloc_r>
   1b580:	b160      	cbz	r0, 1b59c <_Balloc+0x64>
   1b582:	e9c0 5601 	strd	r5, r6, [r0, #4]
   1b586:	e00e      	b.n	1b5a6 <_Balloc+0x6e>
   1b588:	2221      	movs	r2, #33	; 0x21
   1b58a:	2104      	movs	r1, #4
   1b58c:	4620      	mov	r0, r4
   1b58e:	f006 fa93 	bl	21ab8 <_calloc_r>
   1b592:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b594:	60f0      	str	r0, [r6, #12]
   1b596:	68db      	ldr	r3, [r3, #12]
   1b598:	2b00      	cmp	r3, #0
   1b59a:	d1e4      	bne.n	1b566 <_Balloc+0x2e>
   1b59c:	2000      	movs	r0, #0
   1b59e:	bd70      	pop	{r4, r5, r6, pc}
   1b5a0:	6802      	ldr	r2, [r0, #0]
   1b5a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   1b5a6:	2300      	movs	r3, #0
   1b5a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
   1b5ac:	e7f7      	b.n	1b59e <_Balloc+0x66>
   1b5ae:	bf00      	nop
   1b5b0:	00026dde 	.word	0x00026dde
   1b5b4:	00026e7a 	.word	0x00026e7a

0001b5b8 <_Bfree>:
   1b5b8:	b570      	push	{r4, r5, r6, lr}
   1b5ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
   1b5bc:	4605      	mov	r5, r0
   1b5be:	460c      	mov	r4, r1
   1b5c0:	b976      	cbnz	r6, 1b5e0 <_Bfree+0x28>
   1b5c2:	2010      	movs	r0, #16
   1b5c4:	f7ff fab0 	bl	1ab28 <malloc>
   1b5c8:	4602      	mov	r2, r0
   1b5ca:	6268      	str	r0, [r5, #36]	; 0x24
   1b5cc:	b920      	cbnz	r0, 1b5d8 <_Bfree+0x20>
   1b5ce:	4b09      	ldr	r3, [pc, #36]	; (1b5f4 <_Bfree+0x3c>)
   1b5d0:	218a      	movs	r1, #138	; 0x8a
   1b5d2:	4809      	ldr	r0, [pc, #36]	; (1b5f8 <_Bfree+0x40>)
   1b5d4:	f000 fcca 	bl	1bf6c <__assert_func>
   1b5d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
   1b5dc:	6006      	str	r6, [r0, #0]
   1b5de:	60c6      	str	r6, [r0, #12]
   1b5e0:	b13c      	cbz	r4, 1b5f2 <_Bfree+0x3a>
   1b5e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1b5e4:	6862      	ldr	r2, [r4, #4]
   1b5e6:	68db      	ldr	r3, [r3, #12]
   1b5e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   1b5ec:	6021      	str	r1, [r4, #0]
   1b5ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   1b5f2:	bd70      	pop	{r4, r5, r6, pc}
   1b5f4:	00026dde 	.word	0x00026dde
   1b5f8:	00026e7a 	.word	0x00026e7a

0001b5fc <__multadd>:
   1b5fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b600:	f101 0c14 	add.w	ip, r1, #20
   1b604:	4607      	mov	r7, r0
   1b606:	460c      	mov	r4, r1
   1b608:	461e      	mov	r6, r3
   1b60a:	690d      	ldr	r5, [r1, #16]
   1b60c:	2000      	movs	r0, #0
   1b60e:	f8dc 3000 	ldr.w	r3, [ip]
   1b612:	3001      	adds	r0, #1
   1b614:	b299      	uxth	r1, r3
   1b616:	4285      	cmp	r5, r0
   1b618:	fb02 6101 	mla	r1, r2, r1, r6
   1b61c:	ea4f 4613 	mov.w	r6, r3, lsr #16
   1b620:	ea4f 4311 	mov.w	r3, r1, lsr #16
   1b624:	b289      	uxth	r1, r1
   1b626:	fb02 3306 	mla	r3, r2, r6, r3
   1b62a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   1b62e:	ea4f 4613 	mov.w	r6, r3, lsr #16
   1b632:	f84c 1b04 	str.w	r1, [ip], #4
   1b636:	dcea      	bgt.n	1b60e <__multadd+0x12>
   1b638:	b30e      	cbz	r6, 1b67e <__multadd+0x82>
   1b63a:	68a3      	ldr	r3, [r4, #8]
   1b63c:	42ab      	cmp	r3, r5
   1b63e:	dc19      	bgt.n	1b674 <__multadd+0x78>
   1b640:	6861      	ldr	r1, [r4, #4]
   1b642:	4638      	mov	r0, r7
   1b644:	3101      	adds	r1, #1
   1b646:	f7ff ff77 	bl	1b538 <_Balloc>
   1b64a:	4680      	mov	r8, r0
   1b64c:	b928      	cbnz	r0, 1b65a <__multadd+0x5e>
   1b64e:	4602      	mov	r2, r0
   1b650:	4b0c      	ldr	r3, [pc, #48]	; (1b684 <__multadd+0x88>)
   1b652:	21b5      	movs	r1, #181	; 0xb5
   1b654:	480c      	ldr	r0, [pc, #48]	; (1b688 <__multadd+0x8c>)
   1b656:	f000 fc89 	bl	1bf6c <__assert_func>
   1b65a:	6922      	ldr	r2, [r4, #16]
   1b65c:	f104 010c 	add.w	r1, r4, #12
   1b660:	300c      	adds	r0, #12
   1b662:	3202      	adds	r2, #2
   1b664:	0092      	lsls	r2, r2, #2
   1b666:	f006 fa12 	bl	21a8e <memcpy>
   1b66a:	4621      	mov	r1, r4
   1b66c:	4644      	mov	r4, r8
   1b66e:	4638      	mov	r0, r7
   1b670:	f7ff ffa2 	bl	1b5b8 <_Bfree>
   1b674:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   1b678:	3501      	adds	r5, #1
   1b67a:	615e      	str	r6, [r3, #20]
   1b67c:	6125      	str	r5, [r4, #16]
   1b67e:	4620      	mov	r0, r4
   1b680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b684:	00026e69 	.word	0x00026e69
   1b688:	00026e7a 	.word	0x00026e7a

0001b68c <__i2b>:
   1b68c:	b510      	push	{r4, lr}
   1b68e:	460c      	mov	r4, r1
   1b690:	2101      	movs	r1, #1
   1b692:	f7ff ff51 	bl	1b538 <_Balloc>
   1b696:	4602      	mov	r2, r0
   1b698:	b928      	cbnz	r0, 1b6a6 <__i2b+0x1a>
   1b69a:	4b05      	ldr	r3, [pc, #20]	; (1b6b0 <__i2b+0x24>)
   1b69c:	f44f 71a0 	mov.w	r1, #320	; 0x140
   1b6a0:	4804      	ldr	r0, [pc, #16]	; (1b6b4 <__i2b+0x28>)
   1b6a2:	f000 fc63 	bl	1bf6c <__assert_func>
   1b6a6:	2301      	movs	r3, #1
   1b6a8:	6144      	str	r4, [r0, #20]
   1b6aa:	6103      	str	r3, [r0, #16]
   1b6ac:	bd10      	pop	{r4, pc}
   1b6ae:	bf00      	nop
   1b6b0:	00026e69 	.word	0x00026e69
   1b6b4:	00026e7a 	.word	0x00026e7a

0001b6b8 <__multiply>:
   1b6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b6bc:	4614      	mov	r4, r2
   1b6be:	690a      	ldr	r2, [r1, #16]
   1b6c0:	460f      	mov	r7, r1
   1b6c2:	b085      	sub	sp, #20
   1b6c4:	6923      	ldr	r3, [r4, #16]
   1b6c6:	429a      	cmp	r2, r3
   1b6c8:	bfa2      	ittt	ge
   1b6ca:	4623      	movge	r3, r4
   1b6cc:	460c      	movge	r4, r1
   1b6ce:	461f      	movge	r7, r3
   1b6d0:	f8d4 a010 	ldr.w	sl, [r4, #16]
   1b6d4:	68a3      	ldr	r3, [r4, #8]
   1b6d6:	f8d7 9010 	ldr.w	r9, [r7, #16]
   1b6da:	6861      	ldr	r1, [r4, #4]
   1b6dc:	eb0a 0609 	add.w	r6, sl, r9
   1b6e0:	42b3      	cmp	r3, r6
   1b6e2:	bfb8      	it	lt
   1b6e4:	3101      	addlt	r1, #1
   1b6e6:	f7ff ff27 	bl	1b538 <_Balloc>
   1b6ea:	b930      	cbnz	r0, 1b6fa <__multiply+0x42>
   1b6ec:	4602      	mov	r2, r0
   1b6ee:	4b45      	ldr	r3, [pc, #276]	; (1b804 <__multiply+0x14c>)
   1b6f0:	f240 115d 	movw	r1, #349	; 0x15d
   1b6f4:	4844      	ldr	r0, [pc, #272]	; (1b808 <__multiply+0x150>)
   1b6f6:	f000 fc39 	bl	1bf6c <__assert_func>
   1b6fa:	f100 0514 	add.w	r5, r0, #20
   1b6fe:	2200      	movs	r2, #0
   1b700:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   1b704:	462b      	mov	r3, r5
   1b706:	4543      	cmp	r3, r8
   1b708:	d321      	bcc.n	1b74e <__multiply+0x96>
   1b70a:	f107 0114 	add.w	r1, r7, #20
   1b70e:	f104 0214 	add.w	r2, r4, #20
   1b712:	f104 0715 	add.w	r7, r4, #21
   1b716:	eb02 028a 	add.w	r2, r2, sl, lsl #2
   1b71a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
   1b71e:	9302      	str	r3, [sp, #8]
   1b720:	1b13      	subs	r3, r2, r4
   1b722:	3b15      	subs	r3, #21
   1b724:	f023 0303 	bic.w	r3, r3, #3
   1b728:	3304      	adds	r3, #4
   1b72a:	42ba      	cmp	r2, r7
   1b72c:	bf38      	it	cc
   1b72e:	2304      	movcc	r3, #4
   1b730:	9301      	str	r3, [sp, #4]
   1b732:	9b02      	ldr	r3, [sp, #8]
   1b734:	9103      	str	r1, [sp, #12]
   1b736:	428b      	cmp	r3, r1
   1b738:	d80c      	bhi.n	1b754 <__multiply+0x9c>
   1b73a:	2e00      	cmp	r6, #0
   1b73c:	dd03      	ble.n	1b746 <__multiply+0x8e>
   1b73e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   1b742:	2b00      	cmp	r3, #0
   1b744:	d05b      	beq.n	1b7fe <__multiply+0x146>
   1b746:	6106      	str	r6, [r0, #16]
   1b748:	b005      	add	sp, #20
   1b74a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b74e:	f843 2b04 	str.w	r2, [r3], #4
   1b752:	e7d8      	b.n	1b706 <__multiply+0x4e>
   1b754:	f8b1 a000 	ldrh.w	sl, [r1]
   1b758:	f1ba 0f00 	cmp.w	sl, #0
   1b75c:	d024      	beq.n	1b7a8 <__multiply+0xf0>
   1b75e:	f104 0e14 	add.w	lr, r4, #20
   1b762:	46a9      	mov	r9, r5
   1b764:	f04f 0c00 	mov.w	ip, #0
   1b768:	f85e 7b04 	ldr.w	r7, [lr], #4
   1b76c:	f8d9 3000 	ldr.w	r3, [r9]
   1b770:	fa1f fb87 	uxth.w	fp, r7
   1b774:	4572      	cmp	r2, lr
   1b776:	b29b      	uxth	r3, r3
   1b778:	ea4f 4717 	mov.w	r7, r7, lsr #16
   1b77c:	fb0a 330b 	mla	r3, sl, fp, r3
   1b780:	4463      	add	r3, ip
   1b782:	f8d9 c000 	ldr.w	ip, [r9]
   1b786:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
   1b78a:	fb0a c707 	mla	r7, sl, r7, ip
   1b78e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
   1b792:	b29b      	uxth	r3, r3
   1b794:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   1b798:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   1b79c:	f849 3b04 	str.w	r3, [r9], #4
   1b7a0:	d8e2      	bhi.n	1b768 <__multiply+0xb0>
   1b7a2:	9b01      	ldr	r3, [sp, #4]
   1b7a4:	f845 c003 	str.w	ip, [r5, r3]
   1b7a8:	9b03      	ldr	r3, [sp, #12]
   1b7aa:	3104      	adds	r1, #4
   1b7ac:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   1b7b0:	f1b9 0f00 	cmp.w	r9, #0
   1b7b4:	d021      	beq.n	1b7fa <__multiply+0x142>
   1b7b6:	682b      	ldr	r3, [r5, #0]
   1b7b8:	f104 0c14 	add.w	ip, r4, #20
   1b7bc:	46ae      	mov	lr, r5
   1b7be:	f04f 0a00 	mov.w	sl, #0
   1b7c2:	f8bc b000 	ldrh.w	fp, [ip]
   1b7c6:	b29b      	uxth	r3, r3
   1b7c8:	f8be 7002 	ldrh.w	r7, [lr, #2]
   1b7cc:	fb09 770b 	mla	r7, r9, fp, r7
   1b7d0:	4457      	add	r7, sl
   1b7d2:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   1b7d6:	f84e 3b04 	str.w	r3, [lr], #4
   1b7da:	f85c 3b04 	ldr.w	r3, [ip], #4
   1b7de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   1b7e2:	f8be 3000 	ldrh.w	r3, [lr]
   1b7e6:	4562      	cmp	r2, ip
   1b7e8:	fb09 330a 	mla	r3, r9, sl, r3
   1b7ec:	eb03 4317 	add.w	r3, r3, r7, lsr #16
   1b7f0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   1b7f4:	d8e5      	bhi.n	1b7c2 <__multiply+0x10a>
   1b7f6:	9f01      	ldr	r7, [sp, #4]
   1b7f8:	51eb      	str	r3, [r5, r7]
   1b7fa:	3504      	adds	r5, #4
   1b7fc:	e799      	b.n	1b732 <__multiply+0x7a>
   1b7fe:	3e01      	subs	r6, #1
   1b800:	e79b      	b.n	1b73a <__multiply+0x82>
   1b802:	bf00      	nop
   1b804:	00026e69 	.word	0x00026e69
   1b808:	00026e7a 	.word	0x00026e7a

0001b80c <__pow5mult>:
   1b80c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b810:	4615      	mov	r5, r2
   1b812:	f012 0203 	ands.w	r2, r2, #3
   1b816:	4607      	mov	r7, r0
   1b818:	460e      	mov	r6, r1
   1b81a:	d007      	beq.n	1b82c <__pow5mult+0x20>
   1b81c:	3a01      	subs	r2, #1
   1b81e:	4c25      	ldr	r4, [pc, #148]	; (1b8b4 <__pow5mult+0xa8>)
   1b820:	2300      	movs	r3, #0
   1b822:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   1b826:	f7ff fee9 	bl	1b5fc <__multadd>
   1b82a:	4606      	mov	r6, r0
   1b82c:	10ad      	asrs	r5, r5, #2
   1b82e:	d03d      	beq.n	1b8ac <__pow5mult+0xa0>
   1b830:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   1b832:	b97c      	cbnz	r4, 1b854 <__pow5mult+0x48>
   1b834:	2010      	movs	r0, #16
   1b836:	f7ff f977 	bl	1ab28 <malloc>
   1b83a:	4602      	mov	r2, r0
   1b83c:	6278      	str	r0, [r7, #36]	; 0x24
   1b83e:	b928      	cbnz	r0, 1b84c <__pow5mult+0x40>
   1b840:	4b1d      	ldr	r3, [pc, #116]	; (1b8b8 <__pow5mult+0xac>)
   1b842:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   1b846:	481d      	ldr	r0, [pc, #116]	; (1b8bc <__pow5mult+0xb0>)
   1b848:	f000 fb90 	bl	1bf6c <__assert_func>
   1b84c:	e9c0 4401 	strd	r4, r4, [r0, #4]
   1b850:	6004      	str	r4, [r0, #0]
   1b852:	60c4      	str	r4, [r0, #12]
   1b854:	f8d7 8024 	ldr.w	r8, [r7, #36]	; 0x24
   1b858:	f8d8 4008 	ldr.w	r4, [r8, #8]
   1b85c:	b94c      	cbnz	r4, 1b872 <__pow5mult+0x66>
   1b85e:	f240 2171 	movw	r1, #625	; 0x271
   1b862:	4638      	mov	r0, r7
   1b864:	f7ff ff12 	bl	1b68c <__i2b>
   1b868:	2300      	movs	r3, #0
   1b86a:	4604      	mov	r4, r0
   1b86c:	f8c8 0008 	str.w	r0, [r8, #8]
   1b870:	6003      	str	r3, [r0, #0]
   1b872:	f04f 0900 	mov.w	r9, #0
   1b876:	07eb      	lsls	r3, r5, #31
   1b878:	d50a      	bpl.n	1b890 <__pow5mult+0x84>
   1b87a:	4631      	mov	r1, r6
   1b87c:	4622      	mov	r2, r4
   1b87e:	4638      	mov	r0, r7
   1b880:	f7ff ff1a 	bl	1b6b8 <__multiply>
   1b884:	4680      	mov	r8, r0
   1b886:	4631      	mov	r1, r6
   1b888:	4638      	mov	r0, r7
   1b88a:	4646      	mov	r6, r8
   1b88c:	f7ff fe94 	bl	1b5b8 <_Bfree>
   1b890:	106d      	asrs	r5, r5, #1
   1b892:	d00b      	beq.n	1b8ac <__pow5mult+0xa0>
   1b894:	6820      	ldr	r0, [r4, #0]
   1b896:	b938      	cbnz	r0, 1b8a8 <__pow5mult+0x9c>
   1b898:	4622      	mov	r2, r4
   1b89a:	4621      	mov	r1, r4
   1b89c:	4638      	mov	r0, r7
   1b89e:	f7ff ff0b 	bl	1b6b8 <__multiply>
   1b8a2:	6020      	str	r0, [r4, #0]
   1b8a4:	f8c0 9000 	str.w	r9, [r0]
   1b8a8:	4604      	mov	r4, r0
   1b8aa:	e7e4      	b.n	1b876 <__pow5mult+0x6a>
   1b8ac:	4630      	mov	r0, r6
   1b8ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1b8b2:	bf00      	nop
   1b8b4:	000233f4 	.word	0x000233f4
   1b8b8:	00026dde 	.word	0x00026dde
   1b8bc:	00026e7a 	.word	0x00026e7a

0001b8c0 <__lshift>:
   1b8c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b8c4:	460c      	mov	r4, r1
   1b8c6:	4607      	mov	r7, r0
   1b8c8:	4691      	mov	r9, r2
   1b8ca:	ea4f 1a62 	mov.w	sl, r2, asr #5
   1b8ce:	6923      	ldr	r3, [r4, #16]
   1b8d0:	6849      	ldr	r1, [r1, #4]
   1b8d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
   1b8d6:	68a3      	ldr	r3, [r4, #8]
   1b8d8:	f108 0601 	add.w	r6, r8, #1
   1b8dc:	42b3      	cmp	r3, r6
   1b8de:	db0b      	blt.n	1b8f8 <__lshift+0x38>
   1b8e0:	4638      	mov	r0, r7
   1b8e2:	f7ff fe29 	bl	1b538 <_Balloc>
   1b8e6:	4605      	mov	r5, r0
   1b8e8:	b948      	cbnz	r0, 1b8fe <__lshift+0x3e>
   1b8ea:	4602      	mov	r2, r0
   1b8ec:	4b28      	ldr	r3, [pc, #160]	; (1b990 <__lshift+0xd0>)
   1b8ee:	f240 11d9 	movw	r1, #473	; 0x1d9
   1b8f2:	4828      	ldr	r0, [pc, #160]	; (1b994 <__lshift+0xd4>)
   1b8f4:	f000 fb3a 	bl	1bf6c <__assert_func>
   1b8f8:	3101      	adds	r1, #1
   1b8fa:	005b      	lsls	r3, r3, #1
   1b8fc:	e7ee      	b.n	1b8dc <__lshift+0x1c>
   1b8fe:	2300      	movs	r3, #0
   1b900:	f100 0114 	add.w	r1, r0, #20
   1b904:	f100 0210 	add.w	r2, r0, #16
   1b908:	4618      	mov	r0, r3
   1b90a:	4553      	cmp	r3, sl
   1b90c:	db33      	blt.n	1b976 <__lshift+0xb6>
   1b90e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   1b912:	f104 0314 	add.w	r3, r4, #20
   1b916:	6920      	ldr	r0, [r4, #16]
   1b918:	f019 091f 	ands.w	r9, r9, #31
   1b91c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   1b920:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   1b924:	d02b      	beq.n	1b97e <__lshift+0xbe>
   1b926:	f1c9 0e20 	rsb	lr, r9, #32
   1b92a:	468a      	mov	sl, r1
   1b92c:	2200      	movs	r2, #0
   1b92e:	6818      	ldr	r0, [r3, #0]
   1b930:	fa00 f009 	lsl.w	r0, r0, r9
   1b934:	4310      	orrs	r0, r2
   1b936:	f84a 0b04 	str.w	r0, [sl], #4
   1b93a:	f853 2b04 	ldr.w	r2, [r3], #4
   1b93e:	459c      	cmp	ip, r3
   1b940:	fa22 f20e 	lsr.w	r2, r2, lr
   1b944:	d8f3      	bhi.n	1b92e <__lshift+0x6e>
   1b946:	ebac 0304 	sub.w	r3, ip, r4
   1b94a:	f104 0015 	add.w	r0, r4, #21
   1b94e:	3b15      	subs	r3, #21
   1b950:	f023 0303 	bic.w	r3, r3, #3
   1b954:	3304      	adds	r3, #4
   1b956:	4584      	cmp	ip, r0
   1b958:	bf38      	it	cc
   1b95a:	2304      	movcc	r3, #4
   1b95c:	50ca      	str	r2, [r1, r3]
   1b95e:	b10a      	cbz	r2, 1b964 <__lshift+0xa4>
   1b960:	f108 0602 	add.w	r6, r8, #2
   1b964:	3e01      	subs	r6, #1
   1b966:	4638      	mov	r0, r7
   1b968:	4621      	mov	r1, r4
   1b96a:	612e      	str	r6, [r5, #16]
   1b96c:	f7ff fe24 	bl	1b5b8 <_Bfree>
   1b970:	4628      	mov	r0, r5
   1b972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b976:	3301      	adds	r3, #1
   1b978:	f842 0f04 	str.w	r0, [r2, #4]!
   1b97c:	e7c5      	b.n	1b90a <__lshift+0x4a>
   1b97e:	3904      	subs	r1, #4
   1b980:	f853 2b04 	ldr.w	r2, [r3], #4
   1b984:	459c      	cmp	ip, r3
   1b986:	f841 2f04 	str.w	r2, [r1, #4]!
   1b98a:	d8f9      	bhi.n	1b980 <__lshift+0xc0>
   1b98c:	e7ea      	b.n	1b964 <__lshift+0xa4>
   1b98e:	bf00      	nop
   1b990:	00026e69 	.word	0x00026e69
   1b994:	00026e7a 	.word	0x00026e7a

0001b998 <__mdiff>:
   1b998:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b99c:	4689      	mov	r9, r1
   1b99e:	4606      	mov	r6, r0
   1b9a0:	4611      	mov	r1, r2
   1b9a2:	4614      	mov	r4, r2
   1b9a4:	4648      	mov	r0, r9
   1b9a6:	f006 faff 	bl	21fa8 <__mcmp>
   1b9aa:	1e05      	subs	r5, r0, #0
   1b9ac:	d112      	bne.n	1b9d4 <__mdiff+0x3c>
   1b9ae:	4629      	mov	r1, r5
   1b9b0:	4630      	mov	r0, r6
   1b9b2:	f7ff fdc1 	bl	1b538 <_Balloc>
   1b9b6:	4602      	mov	r2, r0
   1b9b8:	b928      	cbnz	r0, 1b9c6 <__mdiff+0x2e>
   1b9ba:	4b40      	ldr	r3, [pc, #256]	; (1babc <__mdiff+0x124>)
   1b9bc:	f240 2132 	movw	r1, #562	; 0x232
   1b9c0:	483f      	ldr	r0, [pc, #252]	; (1bac0 <__mdiff+0x128>)
   1b9c2:	f000 fad3 	bl	1bf6c <__assert_func>
   1b9c6:	2301      	movs	r3, #1
   1b9c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
   1b9cc:	4610      	mov	r0, r2
   1b9ce:	b003      	add	sp, #12
   1b9d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b9d4:	bfbc      	itt	lt
   1b9d6:	464b      	movlt	r3, r9
   1b9d8:	46a1      	movlt	r9, r4
   1b9da:	4630      	mov	r0, r6
   1b9dc:	bfb8      	it	lt
   1b9de:	2501      	movlt	r5, #1
   1b9e0:	f8d9 1004 	ldr.w	r1, [r9, #4]
   1b9e4:	bfb4      	ite	lt
   1b9e6:	461c      	movlt	r4, r3
   1b9e8:	2500      	movge	r5, #0
   1b9ea:	f7ff fda5 	bl	1b538 <_Balloc>
   1b9ee:	4602      	mov	r2, r0
   1b9f0:	b918      	cbnz	r0, 1b9fa <__mdiff+0x62>
   1b9f2:	4b32      	ldr	r3, [pc, #200]	; (1babc <__mdiff+0x124>)
   1b9f4:	f44f 7110 	mov.w	r1, #576	; 0x240
   1b9f8:	e7e2      	b.n	1b9c0 <__mdiff+0x28>
   1b9fa:	f8d9 7010 	ldr.w	r7, [r9, #16]
   1b9fe:	f104 0e14 	add.w	lr, r4, #20
   1ba02:	6926      	ldr	r6, [r4, #16]
   1ba04:	f100 0b14 	add.w	fp, r0, #20
   1ba08:	60c5      	str	r5, [r0, #12]
   1ba0a:	f109 0514 	add.w	r5, r9, #20
   1ba0e:	f109 0310 	add.w	r3, r9, #16
   1ba12:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
   1ba16:	eb05 0887 	add.w	r8, r5, r7, lsl #2
   1ba1a:	46d9      	mov	r9, fp
   1ba1c:	f04f 0c00 	mov.w	ip, #0
   1ba20:	9301      	str	r3, [sp, #4]
   1ba22:	9b01      	ldr	r3, [sp, #4]
   1ba24:	f85e 0b04 	ldr.w	r0, [lr], #4
   1ba28:	f853 af04 	ldr.w	sl, [r3, #4]!
   1ba2c:	b281      	uxth	r1, r0
   1ba2e:	4576      	cmp	r6, lr
   1ba30:	9301      	str	r3, [sp, #4]
   1ba32:	fa1f f38a 	uxth.w	r3, sl
   1ba36:	ea4f 4010 	mov.w	r0, r0, lsr #16
   1ba3a:	eba3 0301 	sub.w	r3, r3, r1
   1ba3e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
   1ba42:	4463      	add	r3, ip
   1ba44:	eb00 4023 	add.w	r0, r0, r3, asr #16
   1ba48:	b29b      	uxth	r3, r3
   1ba4a:	ea4f 4c20 	mov.w	ip, r0, asr #16
   1ba4e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   1ba52:	f849 3b04 	str.w	r3, [r9], #4
   1ba56:	d8e4      	bhi.n	1ba22 <__mdiff+0x8a>
   1ba58:	1b33      	subs	r3, r6, r4
   1ba5a:	3415      	adds	r4, #21
   1ba5c:	3b15      	subs	r3, #21
   1ba5e:	f023 0303 	bic.w	r3, r3, #3
   1ba62:	3304      	adds	r3, #4
   1ba64:	42a6      	cmp	r6, r4
   1ba66:	bf38      	it	cc
   1ba68:	2304      	movcc	r3, #4
   1ba6a:	441d      	add	r5, r3
   1ba6c:	445b      	add	r3, fp
   1ba6e:	462c      	mov	r4, r5
   1ba70:	461e      	mov	r6, r3
   1ba72:	4544      	cmp	r4, r8
   1ba74:	d30e      	bcc.n	1ba94 <__mdiff+0xfc>
   1ba76:	f108 0103 	add.w	r1, r8, #3
   1ba7a:	1b49      	subs	r1, r1, r5
   1ba7c:	3d03      	subs	r5, #3
   1ba7e:	f021 0103 	bic.w	r1, r1, #3
   1ba82:	45a8      	cmp	r8, r5
   1ba84:	bf38      	it	cc
   1ba86:	2100      	movcc	r1, #0
   1ba88:	440b      	add	r3, r1
   1ba8a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   1ba8e:	b199      	cbz	r1, 1bab8 <__mdiff+0x120>
   1ba90:	6117      	str	r7, [r2, #16]
   1ba92:	e79b      	b.n	1b9cc <__mdiff+0x34>
   1ba94:	f854 1b04 	ldr.w	r1, [r4], #4
   1ba98:	46e6      	mov	lr, ip
   1ba9a:	fa1f fc81 	uxth.w	ip, r1
   1ba9e:	0c08      	lsrs	r0, r1, #16
   1baa0:	4471      	add	r1, lr
   1baa2:	44f4      	add	ip, lr
   1baa4:	b289      	uxth	r1, r1
   1baa6:	eb00 402c 	add.w	r0, r0, ip, asr #16
   1baaa:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   1baae:	ea4f 4c20 	mov.w	ip, r0, asr #16
   1bab2:	f846 1b04 	str.w	r1, [r6], #4
   1bab6:	e7dc      	b.n	1ba72 <__mdiff+0xda>
   1bab8:	3f01      	subs	r7, #1
   1baba:	e7e6      	b.n	1ba8a <__mdiff+0xf2>
   1babc:	00026e69 	.word	0x00026e69
   1bac0:	00026e7a 	.word	0x00026e7a

0001bac4 <__d2b>:
   1bac4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   1bac8:	2101      	movs	r1, #1
   1baca:	4690      	mov	r8, r2
   1bacc:	4699      	mov	r9, r3
   1bace:	9e08      	ldr	r6, [sp, #32]
   1bad0:	f7ff fd32 	bl	1b538 <_Balloc>
   1bad4:	4604      	mov	r4, r0
   1bad6:	b930      	cbnz	r0, 1bae6 <__d2b+0x22>
   1bad8:	4602      	mov	r2, r0
   1bada:	4b24      	ldr	r3, [pc, #144]	; (1bb6c <__d2b+0xa8>)
   1badc:	f240 310a 	movw	r1, #778	; 0x30a
   1bae0:	4823      	ldr	r0, [pc, #140]	; (1bb70 <__d2b+0xac>)
   1bae2:	f000 fa43 	bl	1bf6c <__assert_func>
   1bae6:	f3c9 550a 	ubfx	r5, r9, #20, #11
   1baea:	f3c9 0313 	ubfx	r3, r9, #0, #20
   1baee:	b10d      	cbz	r5, 1baf4 <__d2b+0x30>
   1baf0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1baf4:	9301      	str	r3, [sp, #4]
   1baf6:	f1b8 0300 	subs.w	r3, r8, #0
   1bafa:	d024      	beq.n	1bb46 <__d2b+0x82>
   1bafc:	4668      	mov	r0, sp
   1bafe:	9300      	str	r3, [sp, #0]
   1bb00:	f006 fa25 	bl	21f4e <__lo0bits>
   1bb04:	e9dd 1200 	ldrd	r1, r2, [sp]
   1bb08:	b1d8      	cbz	r0, 1bb42 <__d2b+0x7e>
   1bb0a:	f1c0 0320 	rsb	r3, r0, #32
   1bb0e:	fa02 f303 	lsl.w	r3, r2, r3
   1bb12:	40c2      	lsrs	r2, r0
   1bb14:	430b      	orrs	r3, r1
   1bb16:	9201      	str	r2, [sp, #4]
   1bb18:	6163      	str	r3, [r4, #20]
   1bb1a:	9b01      	ldr	r3, [sp, #4]
   1bb1c:	2b00      	cmp	r3, #0
   1bb1e:	61a3      	str	r3, [r4, #24]
   1bb20:	bf0c      	ite	eq
   1bb22:	2201      	moveq	r2, #1
   1bb24:	2202      	movne	r2, #2
   1bb26:	6122      	str	r2, [r4, #16]
   1bb28:	b1ad      	cbz	r5, 1bb56 <__d2b+0x92>
   1bb2a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   1bb2e:	4405      	add	r5, r0
   1bb30:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   1bb34:	6035      	str	r5, [r6, #0]
   1bb36:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1bb38:	6018      	str	r0, [r3, #0]
   1bb3a:	4620      	mov	r0, r4
   1bb3c:	b002      	add	sp, #8
   1bb3e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   1bb42:	6161      	str	r1, [r4, #20]
   1bb44:	e7e9      	b.n	1bb1a <__d2b+0x56>
   1bb46:	a801      	add	r0, sp, #4
   1bb48:	f006 fa01 	bl	21f4e <__lo0bits>
   1bb4c:	9b01      	ldr	r3, [sp, #4]
   1bb4e:	3020      	adds	r0, #32
   1bb50:	2201      	movs	r2, #1
   1bb52:	6163      	str	r3, [r4, #20]
   1bb54:	e7e7      	b.n	1bb26 <__d2b+0x62>
   1bb56:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   1bb5a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   1bb5e:	6030      	str	r0, [r6, #0]
   1bb60:	6918      	ldr	r0, [r3, #16]
   1bb62:	f006 f9d2 	bl	21f0a <__hi0bits>
   1bb66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   1bb6a:	e7e4      	b.n	1bb36 <__d2b+0x72>
   1bb6c:	00026e69 	.word	0x00026e69
   1bb70:	00026e7a 	.word	0x00026e7a

0001bb74 <_vfiprintf_r>:
   1bb74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bb78:	460d      	mov	r5, r1
   1bb7a:	b09d      	sub	sp, #116	; 0x74
   1bb7c:	4614      	mov	r4, r2
   1bb7e:	4698      	mov	r8, r3
   1bb80:	4606      	mov	r6, r0
   1bb82:	b118      	cbz	r0, 1bb8c <_vfiprintf_r+0x18>
   1bb84:	6983      	ldr	r3, [r0, #24]
   1bb86:	b90b      	cbnz	r3, 1bb8c <_vfiprintf_r+0x18>
   1bb88:	f7ff fc48 	bl	1b41c <__sinit>
   1bb8c:	4b87      	ldr	r3, [pc, #540]	; (1bdac <_vfiprintf_r+0x238>)
   1bb8e:	429d      	cmp	r5, r3
   1bb90:	d11b      	bne.n	1bbca <_vfiprintf_r+0x56>
   1bb92:	6875      	ldr	r5, [r6, #4]
   1bb94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   1bb96:	07d9      	lsls	r1, r3, #31
   1bb98:	d405      	bmi.n	1bba6 <_vfiprintf_r+0x32>
   1bb9a:	89ab      	ldrh	r3, [r5, #12]
   1bb9c:	059a      	lsls	r2, r3, #22
   1bb9e:	d402      	bmi.n	1bba6 <_vfiprintf_r+0x32>
   1bba0:	6da8      	ldr	r0, [r5, #88]	; 0x58
   1bba2:	f002 f830 	bl	1dc06 <__retarget_lock_acquire_recursive>
   1bba6:	89ab      	ldrh	r3, [r5, #12]
   1bba8:	071b      	lsls	r3, r3, #28
   1bbaa:	d501      	bpl.n	1bbb0 <_vfiprintf_r+0x3c>
   1bbac:	692b      	ldr	r3, [r5, #16]
   1bbae:	b9eb      	cbnz	r3, 1bbec <_vfiprintf_r+0x78>
   1bbb0:	4629      	mov	r1, r5
   1bbb2:	4630      	mov	r0, r6
   1bbb4:	f000 f96e 	bl	1be94 <__swsetup_r>
   1bbb8:	b1c0      	cbz	r0, 1bbec <_vfiprintf_r+0x78>
   1bbba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   1bbbc:	07dc      	lsls	r4, r3, #31
   1bbbe:	d50e      	bpl.n	1bbde <_vfiprintf_r+0x6a>
   1bbc0:	f04f 30ff 	mov.w	r0, #4294967295
   1bbc4:	b01d      	add	sp, #116	; 0x74
   1bbc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bbca:	4b79      	ldr	r3, [pc, #484]	; (1bdb0 <_vfiprintf_r+0x23c>)
   1bbcc:	429d      	cmp	r5, r3
   1bbce:	d101      	bne.n	1bbd4 <_vfiprintf_r+0x60>
   1bbd0:	68b5      	ldr	r5, [r6, #8]
   1bbd2:	e7df      	b.n	1bb94 <_vfiprintf_r+0x20>
   1bbd4:	4b77      	ldr	r3, [pc, #476]	; (1bdb4 <_vfiprintf_r+0x240>)
   1bbd6:	429d      	cmp	r5, r3
   1bbd8:	bf08      	it	eq
   1bbda:	68f5      	ldreq	r5, [r6, #12]
   1bbdc:	e7da      	b.n	1bb94 <_vfiprintf_r+0x20>
   1bbde:	89ab      	ldrh	r3, [r5, #12]
   1bbe0:	0598      	lsls	r0, r3, #22
   1bbe2:	d4ed      	bmi.n	1bbc0 <_vfiprintf_r+0x4c>
   1bbe4:	6da8      	ldr	r0, [r5, #88]	; 0x58
   1bbe6:	f002 f814 	bl	1dc12 <__retarget_lock_release_recursive>
   1bbea:	e7e9      	b.n	1bbc0 <_vfiprintf_r+0x4c>
   1bbec:	2300      	movs	r3, #0
   1bbee:	f8cd 800c 	str.w	r8, [sp, #12]
   1bbf2:	f04f 0901 	mov.w	r9, #1
   1bbf6:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 1bdb8 <_vfiprintf_r+0x244>
   1bbfa:	9309      	str	r3, [sp, #36]	; 0x24
   1bbfc:	2320      	movs	r3, #32
   1bbfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   1bc02:	2330      	movs	r3, #48	; 0x30
   1bc04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   1bc08:	4623      	mov	r3, r4
   1bc0a:	469a      	mov	sl, r3
   1bc0c:	f813 2b01 	ldrb.w	r2, [r3], #1
   1bc10:	b10a      	cbz	r2, 1bc16 <_vfiprintf_r+0xa2>
   1bc12:	2a25      	cmp	r2, #37	; 0x25
   1bc14:	d1f9      	bne.n	1bc0a <_vfiprintf_r+0x96>
   1bc16:	ebba 0b04 	subs.w	fp, sl, r4
   1bc1a:	d00b      	beq.n	1bc34 <_vfiprintf_r+0xc0>
   1bc1c:	465b      	mov	r3, fp
   1bc1e:	4622      	mov	r2, r4
   1bc20:	4629      	mov	r1, r5
   1bc22:	4630      	mov	r0, r6
   1bc24:	f006 f9f0 	bl	22008 <__sfputs_r>
   1bc28:	3001      	adds	r0, #1
   1bc2a:	f000 80a6 	beq.w	1bd7a <_vfiprintf_r+0x206>
   1bc2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1bc30:	445a      	add	r2, fp
   1bc32:	9209      	str	r2, [sp, #36]	; 0x24
   1bc34:	f89a 3000 	ldrb.w	r3, [sl]
   1bc38:	2b00      	cmp	r3, #0
   1bc3a:	f000 809e 	beq.w	1bd7a <_vfiprintf_r+0x206>
   1bc3e:	2300      	movs	r3, #0
   1bc40:	f04f 32ff 	mov.w	r2, #4294967295
   1bc44:	f10a 0a01 	add.w	sl, sl, #1
   1bc48:	9304      	str	r3, [sp, #16]
   1bc4a:	9307      	str	r3, [sp, #28]
   1bc4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   1bc50:	931a      	str	r3, [sp, #104]	; 0x68
   1bc52:	e9cd 2305 	strd	r2, r3, [sp, #20]
   1bc56:	4654      	mov	r4, sl
   1bc58:	2205      	movs	r2, #5
   1bc5a:	4857      	ldr	r0, [pc, #348]	; (1bdb8 <_vfiprintf_r+0x244>)
   1bc5c:	f814 1b01 	ldrb.w	r1, [r4], #1
   1bc60:	f006 f945 	bl	21eee <memchr>
   1bc64:	9b04      	ldr	r3, [sp, #16]
   1bc66:	b9d0      	cbnz	r0, 1bc9e <_vfiprintf_r+0x12a>
   1bc68:	06d9      	lsls	r1, r3, #27
   1bc6a:	bf44      	itt	mi
   1bc6c:	2220      	movmi	r2, #32
   1bc6e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   1bc72:	071a      	lsls	r2, r3, #28
   1bc74:	bf44      	itt	mi
   1bc76:	222b      	movmi	r2, #43	; 0x2b
   1bc78:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   1bc7c:	f89a 2000 	ldrb.w	r2, [sl]
   1bc80:	2a2a      	cmp	r2, #42	; 0x2a
   1bc82:	d014      	beq.n	1bcae <_vfiprintf_r+0x13a>
   1bc84:	9a07      	ldr	r2, [sp, #28]
   1bc86:	4654      	mov	r4, sl
   1bc88:	2000      	movs	r0, #0
   1bc8a:	f04f 0c0a 	mov.w	ip, #10
   1bc8e:	4621      	mov	r1, r4
   1bc90:	f811 3b01 	ldrb.w	r3, [r1], #1
   1bc94:	3b30      	subs	r3, #48	; 0x30
   1bc96:	2b09      	cmp	r3, #9
   1bc98:	d94a      	bls.n	1bd30 <_vfiprintf_r+0x1bc>
   1bc9a:	b970      	cbnz	r0, 1bcba <_vfiprintf_r+0x146>
   1bc9c:	e014      	b.n	1bcc8 <_vfiprintf_r+0x154>
   1bc9e:	eba0 0008 	sub.w	r0, r0, r8
   1bca2:	46a2      	mov	sl, r4
   1bca4:	fa09 f000 	lsl.w	r0, r9, r0
   1bca8:	4318      	orrs	r0, r3
   1bcaa:	9004      	str	r0, [sp, #16]
   1bcac:	e7d3      	b.n	1bc56 <_vfiprintf_r+0xe2>
   1bcae:	9a03      	ldr	r2, [sp, #12]
   1bcb0:	1d11      	adds	r1, r2, #4
   1bcb2:	6812      	ldr	r2, [r2, #0]
   1bcb4:	2a00      	cmp	r2, #0
   1bcb6:	9103      	str	r1, [sp, #12]
   1bcb8:	db01      	blt.n	1bcbe <_vfiprintf_r+0x14a>
   1bcba:	9207      	str	r2, [sp, #28]
   1bcbc:	e004      	b.n	1bcc8 <_vfiprintf_r+0x154>
   1bcbe:	4252      	negs	r2, r2
   1bcc0:	f043 0302 	orr.w	r3, r3, #2
   1bcc4:	9207      	str	r2, [sp, #28]
   1bcc6:	9304      	str	r3, [sp, #16]
   1bcc8:	7823      	ldrb	r3, [r4, #0]
   1bcca:	2b2e      	cmp	r3, #46	; 0x2e
   1bccc:	d10a      	bne.n	1bce4 <_vfiprintf_r+0x170>
   1bcce:	7863      	ldrb	r3, [r4, #1]
   1bcd0:	2b2a      	cmp	r3, #42	; 0x2a
   1bcd2:	d132      	bne.n	1bd3a <_vfiprintf_r+0x1c6>
   1bcd4:	9b03      	ldr	r3, [sp, #12]
   1bcd6:	3402      	adds	r4, #2
   1bcd8:	1d1a      	adds	r2, r3, #4
   1bcda:	681b      	ldr	r3, [r3, #0]
   1bcdc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
   1bce0:	9203      	str	r2, [sp, #12]
   1bce2:	9305      	str	r3, [sp, #20]
   1bce4:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 1bdbc <_vfiprintf_r+0x248>
   1bce8:	2203      	movs	r2, #3
   1bcea:	7821      	ldrb	r1, [r4, #0]
   1bcec:	4650      	mov	r0, sl
   1bcee:	f006 f8fe 	bl	21eee <memchr>
   1bcf2:	b138      	cbz	r0, 1bd04 <_vfiprintf_r+0x190>
   1bcf4:	eba0 000a 	sub.w	r0, r0, sl
   1bcf8:	2240      	movs	r2, #64	; 0x40
   1bcfa:	9b04      	ldr	r3, [sp, #16]
   1bcfc:	3401      	adds	r4, #1
   1bcfe:	4082      	lsls	r2, r0
   1bd00:	4313      	orrs	r3, r2
   1bd02:	9304      	str	r3, [sp, #16]
   1bd04:	f814 1b01 	ldrb.w	r1, [r4], #1
   1bd08:	2206      	movs	r2, #6
   1bd0a:	482d      	ldr	r0, [pc, #180]	; (1bdc0 <_vfiprintf_r+0x24c>)
   1bd0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   1bd10:	f006 f8ed 	bl	21eee <memchr>
   1bd14:	2800      	cmp	r0, #0
   1bd16:	d03f      	beq.n	1bd98 <_vfiprintf_r+0x224>
   1bd18:	4b2a      	ldr	r3, [pc, #168]	; (1bdc4 <_vfiprintf_r+0x250>)
   1bd1a:	bb1b      	cbnz	r3, 1bd64 <_vfiprintf_r+0x1f0>
   1bd1c:	9b03      	ldr	r3, [sp, #12]
   1bd1e:	3307      	adds	r3, #7
   1bd20:	f023 0307 	bic.w	r3, r3, #7
   1bd24:	3308      	adds	r3, #8
   1bd26:	9303      	str	r3, [sp, #12]
   1bd28:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1bd2a:	443b      	add	r3, r7
   1bd2c:	9309      	str	r3, [sp, #36]	; 0x24
   1bd2e:	e76b      	b.n	1bc08 <_vfiprintf_r+0x94>
   1bd30:	fb0c 3202 	mla	r2, ip, r2, r3
   1bd34:	460c      	mov	r4, r1
   1bd36:	2001      	movs	r0, #1
   1bd38:	e7a9      	b.n	1bc8e <_vfiprintf_r+0x11a>
   1bd3a:	2300      	movs	r3, #0
   1bd3c:	3401      	adds	r4, #1
   1bd3e:	f04f 0c0a 	mov.w	ip, #10
   1bd42:	4619      	mov	r1, r3
   1bd44:	9305      	str	r3, [sp, #20]
   1bd46:	4620      	mov	r0, r4
   1bd48:	f810 2b01 	ldrb.w	r2, [r0], #1
   1bd4c:	3a30      	subs	r2, #48	; 0x30
   1bd4e:	2a09      	cmp	r2, #9
   1bd50:	d903      	bls.n	1bd5a <_vfiprintf_r+0x1e6>
   1bd52:	2b00      	cmp	r3, #0
   1bd54:	d0c6      	beq.n	1bce4 <_vfiprintf_r+0x170>
   1bd56:	9105      	str	r1, [sp, #20]
   1bd58:	e7c4      	b.n	1bce4 <_vfiprintf_r+0x170>
   1bd5a:	fb0c 2101 	mla	r1, ip, r1, r2
   1bd5e:	4604      	mov	r4, r0
   1bd60:	2301      	movs	r3, #1
   1bd62:	e7f0      	b.n	1bd46 <_vfiprintf_r+0x1d2>
   1bd64:	ab03      	add	r3, sp, #12
   1bd66:	462a      	mov	r2, r5
   1bd68:	a904      	add	r1, sp, #16
   1bd6a:	4630      	mov	r0, r6
   1bd6c:	9300      	str	r3, [sp, #0]
   1bd6e:	4b16      	ldr	r3, [pc, #88]	; (1bdc8 <_vfiprintf_r+0x254>)
   1bd70:	f7fe ff86 	bl	1ac80 <_printf_float>
   1bd74:	4607      	mov	r7, r0
   1bd76:	1c78      	adds	r0, r7, #1
   1bd78:	d1d6      	bne.n	1bd28 <_vfiprintf_r+0x1b4>
   1bd7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   1bd7c:	07d9      	lsls	r1, r3, #31
   1bd7e:	d405      	bmi.n	1bd8c <_vfiprintf_r+0x218>
   1bd80:	89ab      	ldrh	r3, [r5, #12]
   1bd82:	059a      	lsls	r2, r3, #22
   1bd84:	d402      	bmi.n	1bd8c <_vfiprintf_r+0x218>
   1bd86:	6da8      	ldr	r0, [r5, #88]	; 0x58
   1bd88:	f001 ff43 	bl	1dc12 <__retarget_lock_release_recursive>
   1bd8c:	89ab      	ldrh	r3, [r5, #12]
   1bd8e:	065b      	lsls	r3, r3, #25
   1bd90:	f53f af16 	bmi.w	1bbc0 <_vfiprintf_r+0x4c>
   1bd94:	9809      	ldr	r0, [sp, #36]	; 0x24
   1bd96:	e715      	b.n	1bbc4 <_vfiprintf_r+0x50>
   1bd98:	ab03      	add	r3, sp, #12
   1bd9a:	462a      	mov	r2, r5
   1bd9c:	a904      	add	r1, sp, #16
   1bd9e:	4630      	mov	r0, r6
   1bda0:	9300      	str	r3, [sp, #0]
   1bda2:	4b09      	ldr	r3, [pc, #36]	; (1bdc8 <_vfiprintf_r+0x254>)
   1bda4:	f7ff f9a2 	bl	1b0ec <_printf_i>
   1bda8:	e7e4      	b.n	1bd74 <_vfiprintf_r+0x200>
   1bdaa:	bf00      	nop
   1bdac:	000233d4 	.word	0x000233d4
   1bdb0:	000233b4 	.word	0x000233b4
   1bdb4:	00023394 	.word	0x00023394
   1bdb8:	00026eef 	.word	0x00026eef
   1bdbc:	00026ef5 	.word	0x00026ef5
   1bdc0:	00026ef9 	.word	0x00026ef9
   1bdc4:	0001ac81 	.word	0x0001ac81
   1bdc8:	00022009 	.word	0x00022009

0001bdcc <__swbuf_r>:
   1bdcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bdce:	460e      	mov	r6, r1
   1bdd0:	4614      	mov	r4, r2
   1bdd2:	4605      	mov	r5, r0
   1bdd4:	b118      	cbz	r0, 1bdde <__swbuf_r+0x12>
   1bdd6:	6983      	ldr	r3, [r0, #24]
   1bdd8:	b90b      	cbnz	r3, 1bdde <__swbuf_r+0x12>
   1bdda:	f7ff fb1f 	bl	1b41c <__sinit>
   1bdde:	4b21      	ldr	r3, [pc, #132]	; (1be64 <__swbuf_r+0x98>)
   1bde0:	429c      	cmp	r4, r3
   1bde2:	d110      	bne.n	1be06 <__swbuf_r+0x3a>
   1bde4:	686c      	ldr	r4, [r5, #4]
   1bde6:	69a3      	ldr	r3, [r4, #24]
   1bde8:	60a3      	str	r3, [r4, #8]
   1bdea:	89a3      	ldrh	r3, [r4, #12]
   1bdec:	071a      	lsls	r2, r3, #28
   1bdee:	d501      	bpl.n	1bdf4 <__swbuf_r+0x28>
   1bdf0:	6923      	ldr	r3, [r4, #16]
   1bdf2:	b993      	cbnz	r3, 1be1a <__swbuf_r+0x4e>
   1bdf4:	4621      	mov	r1, r4
   1bdf6:	4628      	mov	r0, r5
   1bdf8:	f000 f84c 	bl	1be94 <__swsetup_r>
   1bdfc:	b168      	cbz	r0, 1be1a <__swbuf_r+0x4e>
   1bdfe:	f04f 37ff 	mov.w	r7, #4294967295
   1be02:	4638      	mov	r0, r7
   1be04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1be06:	4b18      	ldr	r3, [pc, #96]	; (1be68 <__swbuf_r+0x9c>)
   1be08:	429c      	cmp	r4, r3
   1be0a:	d101      	bne.n	1be10 <__swbuf_r+0x44>
   1be0c:	68ac      	ldr	r4, [r5, #8]
   1be0e:	e7ea      	b.n	1bde6 <__swbuf_r+0x1a>
   1be10:	4b16      	ldr	r3, [pc, #88]	; (1be6c <__swbuf_r+0xa0>)
   1be12:	429c      	cmp	r4, r3
   1be14:	bf08      	it	eq
   1be16:	68ec      	ldreq	r4, [r5, #12]
   1be18:	e7e5      	b.n	1bde6 <__swbuf_r+0x1a>
   1be1a:	6923      	ldr	r3, [r4, #16]
   1be1c:	b2f6      	uxtb	r6, r6
   1be1e:	6820      	ldr	r0, [r4, #0]
   1be20:	4637      	mov	r7, r6
   1be22:	1ac0      	subs	r0, r0, r3
   1be24:	6963      	ldr	r3, [r4, #20]
   1be26:	4283      	cmp	r3, r0
   1be28:	dc05      	bgt.n	1be36 <__swbuf_r+0x6a>
   1be2a:	4621      	mov	r1, r4
   1be2c:	4628      	mov	r0, r5
   1be2e:	f000 f8cb 	bl	1bfc8 <_fflush_r>
   1be32:	2800      	cmp	r0, #0
   1be34:	d1e3      	bne.n	1bdfe <__swbuf_r+0x32>
   1be36:	68a3      	ldr	r3, [r4, #8]
   1be38:	3001      	adds	r0, #1
   1be3a:	3b01      	subs	r3, #1
   1be3c:	60a3      	str	r3, [r4, #8]
   1be3e:	6823      	ldr	r3, [r4, #0]
   1be40:	1c5a      	adds	r2, r3, #1
   1be42:	6022      	str	r2, [r4, #0]
   1be44:	701e      	strb	r6, [r3, #0]
   1be46:	6963      	ldr	r3, [r4, #20]
   1be48:	4283      	cmp	r3, r0
   1be4a:	d004      	beq.n	1be56 <__swbuf_r+0x8a>
   1be4c:	89a3      	ldrh	r3, [r4, #12]
   1be4e:	07db      	lsls	r3, r3, #31
   1be50:	d5d7      	bpl.n	1be02 <__swbuf_r+0x36>
   1be52:	2e0a      	cmp	r6, #10
   1be54:	d1d5      	bne.n	1be02 <__swbuf_r+0x36>
   1be56:	4621      	mov	r1, r4
   1be58:	4628      	mov	r0, r5
   1be5a:	f000 f8b5 	bl	1bfc8 <_fflush_r>
   1be5e:	2800      	cmp	r0, #0
   1be60:	d0cf      	beq.n	1be02 <__swbuf_r+0x36>
   1be62:	e7cc      	b.n	1bdfe <__swbuf_r+0x32>
   1be64:	000233d4 	.word	0x000233d4
   1be68:	000233b4 	.word	0x000233b4
   1be6c:	00023394 	.word	0x00023394

0001be70 <_write_r>:
   1be70:	b538      	push	{r3, r4, r5, lr}
   1be72:	4604      	mov	r4, r0
   1be74:	4d06      	ldr	r5, [pc, #24]	; (1be90 <_write_r+0x20>)
   1be76:	4608      	mov	r0, r1
   1be78:	4611      	mov	r1, r2
   1be7a:	2200      	movs	r2, #0
   1be7c:	602a      	str	r2, [r5, #0]
   1be7e:	461a      	mov	r2, r3
   1be80:	f001 fea0 	bl	1dbc4 <_write>
   1be84:	1c43      	adds	r3, r0, #1
   1be86:	d102      	bne.n	1be8e <_write_r+0x1e>
   1be88:	682b      	ldr	r3, [r5, #0]
   1be8a:	b103      	cbz	r3, 1be8e <_write_r+0x1e>
   1be8c:	6023      	str	r3, [r4, #0]
   1be8e:	bd38      	pop	{r3, r4, r5, pc}
   1be90:	2000a188 	.word	0x2000a188

0001be94 <__swsetup_r>:
   1be94:	4b31      	ldr	r3, [pc, #196]	; (1bf5c <__swsetup_r+0xc8>)
   1be96:	b570      	push	{r4, r5, r6, lr}
   1be98:	681d      	ldr	r5, [r3, #0]
   1be9a:	4606      	mov	r6, r0
   1be9c:	460c      	mov	r4, r1
   1be9e:	b125      	cbz	r5, 1beaa <__swsetup_r+0x16>
   1bea0:	69ab      	ldr	r3, [r5, #24]
   1bea2:	b913      	cbnz	r3, 1beaa <__swsetup_r+0x16>
   1bea4:	4628      	mov	r0, r5
   1bea6:	f7ff fab9 	bl	1b41c <__sinit>
   1beaa:	4b2d      	ldr	r3, [pc, #180]	; (1bf60 <__swsetup_r+0xcc>)
   1beac:	429c      	cmp	r4, r3
   1beae:	d10e      	bne.n	1bece <__swsetup_r+0x3a>
   1beb0:	686c      	ldr	r4, [r5, #4]
   1beb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1beb6:	071a      	lsls	r2, r3, #28
   1beb8:	d42c      	bmi.n	1bf14 <__swsetup_r+0x80>
   1beba:	06dd      	lsls	r5, r3, #27
   1bebc:	d411      	bmi.n	1bee2 <__swsetup_r+0x4e>
   1bebe:	2209      	movs	r2, #9
   1bec0:	6032      	str	r2, [r6, #0]
   1bec2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1bec6:	f04f 30ff 	mov.w	r0, #4294967295
   1beca:	81a3      	strh	r3, [r4, #12]
   1becc:	e03d      	b.n	1bf4a <__swsetup_r+0xb6>
   1bece:	4b25      	ldr	r3, [pc, #148]	; (1bf64 <__swsetup_r+0xd0>)
   1bed0:	429c      	cmp	r4, r3
   1bed2:	d101      	bne.n	1bed8 <__swsetup_r+0x44>
   1bed4:	68ac      	ldr	r4, [r5, #8]
   1bed6:	e7ec      	b.n	1beb2 <__swsetup_r+0x1e>
   1bed8:	4b23      	ldr	r3, [pc, #140]	; (1bf68 <__swsetup_r+0xd4>)
   1beda:	429c      	cmp	r4, r3
   1bedc:	bf08      	it	eq
   1bede:	68ec      	ldreq	r4, [r5, #12]
   1bee0:	e7e7      	b.n	1beb2 <__swsetup_r+0x1e>
   1bee2:	0758      	lsls	r0, r3, #29
   1bee4:	d512      	bpl.n	1bf0c <__swsetup_r+0x78>
   1bee6:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1bee8:	b141      	cbz	r1, 1befc <__swsetup_r+0x68>
   1beea:	f104 0344 	add.w	r3, r4, #68	; 0x44
   1beee:	4299      	cmp	r1, r3
   1bef0:	d002      	beq.n	1bef8 <__swsetup_r+0x64>
   1bef2:	4630      	mov	r0, r6
   1bef4:	f7fe fe20 	bl	1ab38 <_free_r>
   1bef8:	2300      	movs	r3, #0
   1befa:	6363      	str	r3, [r4, #52]	; 0x34
   1befc:	89a3      	ldrh	r3, [r4, #12]
   1befe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   1bf02:	81a3      	strh	r3, [r4, #12]
   1bf04:	2300      	movs	r3, #0
   1bf06:	6063      	str	r3, [r4, #4]
   1bf08:	6923      	ldr	r3, [r4, #16]
   1bf0a:	6023      	str	r3, [r4, #0]
   1bf0c:	89a3      	ldrh	r3, [r4, #12]
   1bf0e:	f043 0308 	orr.w	r3, r3, #8
   1bf12:	81a3      	strh	r3, [r4, #12]
   1bf14:	6923      	ldr	r3, [r4, #16]
   1bf16:	b94b      	cbnz	r3, 1bf2c <__swsetup_r+0x98>
   1bf18:	89a3      	ldrh	r3, [r4, #12]
   1bf1a:	f403 7320 	and.w	r3, r3, #640	; 0x280
   1bf1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1bf22:	d003      	beq.n	1bf2c <__swsetup_r+0x98>
   1bf24:	4621      	mov	r1, r4
   1bf26:	4630      	mov	r0, r6
   1bf28:	f000 f8ae 	bl	1c088 <__smakebuf_r>
   1bf2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1bf30:	f013 0201 	ands.w	r2, r3, #1
   1bf34:	d00a      	beq.n	1bf4c <__swsetup_r+0xb8>
   1bf36:	2200      	movs	r2, #0
   1bf38:	60a2      	str	r2, [r4, #8]
   1bf3a:	6962      	ldr	r2, [r4, #20]
   1bf3c:	4252      	negs	r2, r2
   1bf3e:	61a2      	str	r2, [r4, #24]
   1bf40:	6922      	ldr	r2, [r4, #16]
   1bf42:	b942      	cbnz	r2, 1bf56 <__swsetup_r+0xc2>
   1bf44:	f013 0080 	ands.w	r0, r3, #128	; 0x80
   1bf48:	d1bb      	bne.n	1bec2 <__swsetup_r+0x2e>
   1bf4a:	bd70      	pop	{r4, r5, r6, pc}
   1bf4c:	0799      	lsls	r1, r3, #30
   1bf4e:	bf58      	it	pl
   1bf50:	6962      	ldrpl	r2, [r4, #20]
   1bf52:	60a2      	str	r2, [r4, #8]
   1bf54:	e7f4      	b.n	1bf40 <__swsetup_r+0xac>
   1bf56:	2000      	movs	r0, #0
   1bf58:	e7f7      	b.n	1bf4a <__swsetup_r+0xb6>
   1bf5a:	bf00      	nop
   1bf5c:	20008570 	.word	0x20008570
   1bf60:	000233d4 	.word	0x000233d4
   1bf64:	000233b4 	.word	0x000233b4
   1bf68:	00023394 	.word	0x00023394

0001bf6c <__assert_func>:
   1bf6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1bf6e:	4614      	mov	r4, r2
   1bf70:	461a      	mov	r2, r3
   1bf72:	4b09      	ldr	r3, [pc, #36]	; (1bf98 <__assert_func+0x2c>)
   1bf74:	4605      	mov	r5, r0
   1bf76:	681b      	ldr	r3, [r3, #0]
   1bf78:	68d8      	ldr	r0, [r3, #12]
   1bf7a:	b954      	cbnz	r4, 1bf92 <__assert_func+0x26>
   1bf7c:	4b07      	ldr	r3, [pc, #28]	; (1bf9c <__assert_func+0x30>)
   1bf7e:	461c      	mov	r4, r3
   1bf80:	9100      	str	r1, [sp, #0]
   1bf82:	4907      	ldr	r1, [pc, #28]	; (1bfa0 <__assert_func+0x34>)
   1bf84:	e9cd 3401 	strd	r3, r4, [sp, #4]
   1bf88:	462b      	mov	r3, r5
   1bf8a:	f000 f859 	bl	1c040 <fiprintf>
   1bf8e:	f006 f953 	bl	22238 <abort>
   1bf92:	4b04      	ldr	r3, [pc, #16]	; (1bfa4 <__assert_func+0x38>)
   1bf94:	e7f4      	b.n	1bf80 <__assert_func+0x14>
   1bf96:	bf00      	nop
   1bf98:	20008570 	.word	0x20008570
   1bf9c:	00023606 	.word	0x00023606
   1bfa0:	00026f0d 	.word	0x00026f0d
   1bfa4:	00026f00 	.word	0x00026f00

0001bfa8 <_close_r>:
   1bfa8:	b538      	push	{r3, r4, r5, lr}
   1bfaa:	2300      	movs	r3, #0
   1bfac:	4d05      	ldr	r5, [pc, #20]	; (1bfc4 <_close_r+0x1c>)
   1bfae:	4604      	mov	r4, r0
   1bfb0:	4608      	mov	r0, r1
   1bfb2:	602b      	str	r3, [r5, #0]
   1bfb4:	f001 fe0a 	bl	1dbcc <_close>
   1bfb8:	1c43      	adds	r3, r0, #1
   1bfba:	d102      	bne.n	1bfc2 <_close_r+0x1a>
   1bfbc:	682b      	ldr	r3, [r5, #0]
   1bfbe:	b103      	cbz	r3, 1bfc2 <_close_r+0x1a>
   1bfc0:	6023      	str	r3, [r4, #0]
   1bfc2:	bd38      	pop	{r3, r4, r5, pc}
   1bfc4:	2000a188 	.word	0x2000a188

0001bfc8 <_fflush_r>:
   1bfc8:	b538      	push	{r3, r4, r5, lr}
   1bfca:	690b      	ldr	r3, [r1, #16]
   1bfcc:	4605      	mov	r5, r0
   1bfce:	460c      	mov	r4, r1
   1bfd0:	b913      	cbnz	r3, 1bfd8 <_fflush_r+0x10>
   1bfd2:	2500      	movs	r5, #0
   1bfd4:	4628      	mov	r0, r5
   1bfd6:	bd38      	pop	{r3, r4, r5, pc}
   1bfd8:	b118      	cbz	r0, 1bfe2 <_fflush_r+0x1a>
   1bfda:	6983      	ldr	r3, [r0, #24]
   1bfdc:	b90b      	cbnz	r3, 1bfe2 <_fflush_r+0x1a>
   1bfde:	f7ff fa1d 	bl	1b41c <__sinit>
   1bfe2:	4b14      	ldr	r3, [pc, #80]	; (1c034 <_fflush_r+0x6c>)
   1bfe4:	429c      	cmp	r4, r3
   1bfe6:	d11b      	bne.n	1c020 <_fflush_r+0x58>
   1bfe8:	686c      	ldr	r4, [r5, #4]
   1bfea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1bfee:	2b00      	cmp	r3, #0
   1bff0:	d0ef      	beq.n	1bfd2 <_fflush_r+0xa>
   1bff2:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1bff4:	07d0      	lsls	r0, r2, #31
   1bff6:	d404      	bmi.n	1c002 <_fflush_r+0x3a>
   1bff8:	0599      	lsls	r1, r3, #22
   1bffa:	d402      	bmi.n	1c002 <_fflush_r+0x3a>
   1bffc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1bffe:	f001 fe02 	bl	1dc06 <__retarget_lock_acquire_recursive>
   1c002:	4628      	mov	r0, r5
   1c004:	4621      	mov	r1, r4
   1c006:	f006 f854 	bl	220b2 <__sflush_r>
   1c00a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1c00c:	4605      	mov	r5, r0
   1c00e:	07da      	lsls	r2, r3, #31
   1c010:	d4e0      	bmi.n	1bfd4 <_fflush_r+0xc>
   1c012:	89a3      	ldrh	r3, [r4, #12]
   1c014:	059b      	lsls	r3, r3, #22
   1c016:	d4dd      	bmi.n	1bfd4 <_fflush_r+0xc>
   1c018:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1c01a:	f001 fdfa 	bl	1dc12 <__retarget_lock_release_recursive>
   1c01e:	e7d9      	b.n	1bfd4 <_fflush_r+0xc>
   1c020:	4b05      	ldr	r3, [pc, #20]	; (1c038 <_fflush_r+0x70>)
   1c022:	429c      	cmp	r4, r3
   1c024:	d101      	bne.n	1c02a <_fflush_r+0x62>
   1c026:	68ac      	ldr	r4, [r5, #8]
   1c028:	e7df      	b.n	1bfea <_fflush_r+0x22>
   1c02a:	4b04      	ldr	r3, [pc, #16]	; (1c03c <_fflush_r+0x74>)
   1c02c:	429c      	cmp	r4, r3
   1c02e:	bf08      	it	eq
   1c030:	68ec      	ldreq	r4, [r5, #12]
   1c032:	e7da      	b.n	1bfea <_fflush_r+0x22>
   1c034:	000233d4 	.word	0x000233d4
   1c038:	000233b4 	.word	0x000233b4
   1c03c:	00023394 	.word	0x00023394

0001c040 <fiprintf>:
   1c040:	b40e      	push	{r1, r2, r3}
   1c042:	b503      	push	{r0, r1, lr}
   1c044:	ab03      	add	r3, sp, #12
   1c046:	4601      	mov	r1, r0
   1c048:	4805      	ldr	r0, [pc, #20]	; (1c060 <fiprintf+0x20>)
   1c04a:	f853 2b04 	ldr.w	r2, [r3], #4
   1c04e:	6800      	ldr	r0, [r0, #0]
   1c050:	9301      	str	r3, [sp, #4]
   1c052:	f7ff fd8f 	bl	1bb74 <_vfiprintf_r>
   1c056:	b002      	add	sp, #8
   1c058:	f85d eb04 	ldr.w	lr, [sp], #4
   1c05c:	b003      	add	sp, #12
   1c05e:	4770      	bx	lr
   1c060:	20008570 	.word	0x20008570

0001c064 <_lseek_r>:
   1c064:	b538      	push	{r3, r4, r5, lr}
   1c066:	4604      	mov	r4, r0
   1c068:	4d06      	ldr	r5, [pc, #24]	; (1c084 <_lseek_r+0x20>)
   1c06a:	4608      	mov	r0, r1
   1c06c:	4611      	mov	r1, r2
   1c06e:	2200      	movs	r2, #0
   1c070:	602a      	str	r2, [r5, #0]
   1c072:	461a      	mov	r2, r3
   1c074:	f001 fdad 	bl	1dbd2 <_lseek>
   1c078:	1c43      	adds	r3, r0, #1
   1c07a:	d102      	bne.n	1c082 <_lseek_r+0x1e>
   1c07c:	682b      	ldr	r3, [r5, #0]
   1c07e:	b103      	cbz	r3, 1c082 <_lseek_r+0x1e>
   1c080:	6023      	str	r3, [r4, #0]
   1c082:	bd38      	pop	{r3, r4, r5, pc}
   1c084:	2000a188 	.word	0x2000a188

0001c088 <__smakebuf_r>:
   1c088:	898b      	ldrh	r3, [r1, #12]
   1c08a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1c08c:	079d      	lsls	r5, r3, #30
   1c08e:	4606      	mov	r6, r0
   1c090:	460c      	mov	r4, r1
   1c092:	d507      	bpl.n	1c0a4 <__smakebuf_r+0x1c>
   1c094:	f104 0347 	add.w	r3, r4, #71	; 0x47
   1c098:	6023      	str	r3, [r4, #0]
   1c09a:	6123      	str	r3, [r4, #16]
   1c09c:	2301      	movs	r3, #1
   1c09e:	6163      	str	r3, [r4, #20]
   1c0a0:	b003      	add	sp, #12
   1c0a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c0a4:	ab01      	add	r3, sp, #4
   1c0a6:	466a      	mov	r2, sp
   1c0a8:	f006 f882 	bl	221b0 <__swhatbuf_r>
   1c0ac:	9f00      	ldr	r7, [sp, #0]
   1c0ae:	4605      	mov	r5, r0
   1c0b0:	4630      	mov	r0, r6
   1c0b2:	4639      	mov	r1, r7
   1c0b4:	f7fe fd8a 	bl	1abcc <_malloc_r>
   1c0b8:	b948      	cbnz	r0, 1c0ce <__smakebuf_r+0x46>
   1c0ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1c0be:	059a      	lsls	r2, r3, #22
   1c0c0:	d4ee      	bmi.n	1c0a0 <__smakebuf_r+0x18>
   1c0c2:	f023 0303 	bic.w	r3, r3, #3
   1c0c6:	f043 0302 	orr.w	r3, r3, #2
   1c0ca:	81a3      	strh	r3, [r4, #12]
   1c0cc:	e7e2      	b.n	1c094 <__smakebuf_r+0xc>
   1c0ce:	4b0d      	ldr	r3, [pc, #52]	; (1c104 <__smakebuf_r+0x7c>)
   1c0d0:	62b3      	str	r3, [r6, #40]	; 0x28
   1c0d2:	89a3      	ldrh	r3, [r4, #12]
   1c0d4:	6020      	str	r0, [r4, #0]
   1c0d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1c0da:	81a3      	strh	r3, [r4, #12]
   1c0dc:	9b01      	ldr	r3, [sp, #4]
   1c0de:	e9c4 0704 	strd	r0, r7, [r4, #16]
   1c0e2:	b15b      	cbz	r3, 1c0fc <__smakebuf_r+0x74>
   1c0e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   1c0e8:	4630      	mov	r0, r6
   1c0ea:	f000 f831 	bl	1c150 <_isatty_r>
   1c0ee:	b128      	cbz	r0, 1c0fc <__smakebuf_r+0x74>
   1c0f0:	89a3      	ldrh	r3, [r4, #12]
   1c0f2:	f023 0303 	bic.w	r3, r3, #3
   1c0f6:	f043 0301 	orr.w	r3, r3, #1
   1c0fa:	81a3      	strh	r3, [r4, #12]
   1c0fc:	89a3      	ldrh	r3, [r4, #12]
   1c0fe:	431d      	orrs	r5, r3
   1c100:	81a5      	strh	r5, [r4, #12]
   1c102:	e7cd      	b.n	1c0a0 <__smakebuf_r+0x18>
   1c104:	0001b3e1 	.word	0x0001b3e1

0001c108 <_read_r>:
   1c108:	b538      	push	{r3, r4, r5, lr}
   1c10a:	4604      	mov	r4, r0
   1c10c:	4d06      	ldr	r5, [pc, #24]	; (1c128 <_read_r+0x20>)
   1c10e:	4608      	mov	r0, r1
   1c110:	4611      	mov	r1, r2
   1c112:	2200      	movs	r2, #0
   1c114:	602a      	str	r2, [r5, #0]
   1c116:	461a      	mov	r2, r3
   1c118:	f001 fd50 	bl	1dbbc <_read>
   1c11c:	1c43      	adds	r3, r0, #1
   1c11e:	d102      	bne.n	1c126 <_read_r+0x1e>
   1c120:	682b      	ldr	r3, [r5, #0]
   1c122:	b103      	cbz	r3, 1c126 <_read_r+0x1e>
   1c124:	6023      	str	r3, [r4, #0]
   1c126:	bd38      	pop	{r3, r4, r5, pc}
   1c128:	2000a188 	.word	0x2000a188

0001c12c <_fstat_r>:
   1c12c:	b538      	push	{r3, r4, r5, lr}
   1c12e:	2300      	movs	r3, #0
   1c130:	4d06      	ldr	r5, [pc, #24]	; (1c14c <_fstat_r+0x20>)
   1c132:	4604      	mov	r4, r0
   1c134:	4608      	mov	r0, r1
   1c136:	4611      	mov	r1, r2
   1c138:	602b      	str	r3, [r5, #0]
   1c13a:	f001 fd55 	bl	1dbe8 <_fstat>
   1c13e:	1c43      	adds	r3, r0, #1
   1c140:	d102      	bne.n	1c148 <_fstat_r+0x1c>
   1c142:	682b      	ldr	r3, [r5, #0]
   1c144:	b103      	cbz	r3, 1c148 <_fstat_r+0x1c>
   1c146:	6023      	str	r3, [r4, #0]
   1c148:	bd38      	pop	{r3, r4, r5, pc}
   1c14a:	bf00      	nop
   1c14c:	2000a188 	.word	0x2000a188

0001c150 <_isatty_r>:
   1c150:	b538      	push	{r3, r4, r5, lr}
   1c152:	2300      	movs	r3, #0
   1c154:	4d05      	ldr	r5, [pc, #20]	; (1c16c <_isatty_r+0x1c>)
   1c156:	4604      	mov	r4, r0
   1c158:	4608      	mov	r0, r1
   1c15a:	602b      	str	r3, [r5, #0]
   1c15c:	f001 fd3b 	bl	1dbd6 <_isatty>
   1c160:	1c43      	adds	r3, r0, #1
   1c162:	d102      	bne.n	1c16a <_isatty_r+0x1a>
   1c164:	682b      	ldr	r3, [r5, #0]
   1c166:	b103      	cbz	r3, 1c16a <_isatty_r+0x1a>
   1c168:	6023      	str	r3, [r4, #0]
   1c16a:	bd38      	pop	{r3, r4, r5, pc}
   1c16c:	2000a188 	.word	0x2000a188

0001c170 <raise>:
   1c170:	4b02      	ldr	r3, [pc, #8]	; (1c17c <raise+0xc>)
   1c172:	4601      	mov	r1, r0
   1c174:	6818      	ldr	r0, [r3, #0]
   1c176:	f006 b866 	b.w	22246 <_raise_r>
   1c17a:	bf00      	nop
   1c17c:	20008570 	.word	0x20008570

0001c180 <_kill_r>:
   1c180:	b538      	push	{r3, r4, r5, lr}
   1c182:	2300      	movs	r3, #0
   1c184:	4d06      	ldr	r5, [pc, #24]	; (1c1a0 <_kill_r+0x20>)
   1c186:	4604      	mov	r4, r0
   1c188:	4608      	mov	r0, r1
   1c18a:	4611      	mov	r1, r2
   1c18c:	602b      	str	r3, [r5, #0]
   1c18e:	f001 fd27 	bl	1dbe0 <_kill>
   1c192:	1c43      	adds	r3, r0, #1
   1c194:	d102      	bne.n	1c19c <_kill_r+0x1c>
   1c196:	682b      	ldr	r3, [r5, #0]
   1c198:	b103      	cbz	r3, 1c19c <_kill_r+0x1c>
   1c19a:	6023      	str	r3, [r4, #0]
   1c19c:	bd38      	pop	{r3, r4, r5, pc}
   1c19e:	bf00      	nop
   1c1a0:	2000a188 	.word	0x2000a188

0001c1a4 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   1c1a4:	4770      	bx	lr

0001c1a6 <perip_thread>:
		k_sleep(K_MSEC(50));
		
  }
}

void perip_thread(void){
   1c1a6:	b508      	push	{r3, lr}
	while(1){
		set_heart_rate_value();
   1c1a8:	f7ee fbca 	bl	a940 <set_heart_rate_value>
		set_battery_perc();
   1c1ac:	f7ee fbe6 	bl	a97c <set_battery_perc>
	return z_impl_k_sleep(timeout);
   1c1b0:	2100      	movs	r1, #0
   1c1b2:	f640 40cd 	movw	r0, #3277	; 0xccd
   1c1b6:	f7fe f963 	bl	1a480 <z_impl_k_sleep>
	while(1){
   1c1ba:	e7f5      	b.n	1c1a8 <perip_thread+0x2>

0001c1bc <bt_thread>:
void bt_thread(void){
   1c1bc:	b508      	push	{r3, lr}
		bt_hrs_set();
   1c1be:	f7ee fb9f 	bl	a900 <bt_hrs_set>
		bt_bas_set();
   1c1c2:	f7ee fb7d 	bl	a8c0 <bt_bas_set>
   1c1c6:	2100      	movs	r1, #0
   1c1c8:	f44f 3020 	mov.w	r0, #163840	; 0x28000
   1c1cc:	f7fe f958 	bl	1a480 <z_impl_k_sleep>
	while(1){
   1c1d0:	e7f5      	b.n	1c1be <bt_thread+0x2>

0001c1d2 <bt_event_thread>:
void bt_event_thread(void){
   1c1d2:	b508      	push	{r3, lr}
		if(is_button1_pressed()){
   1c1d4:	f7ee fb54 	bl	a880 <is_button1_pressed>
   1c1d8:	b108      	cbz	r0, 1c1de <bt_event_thread+0xc>
			bt_hrs_set();
   1c1da:	f7ee fb91 	bl	a900 <bt_hrs_set>
		if(is_button2_pressed()){
   1c1de:	f7ee fb5f 	bl	a8a0 <is_button2_pressed>
   1c1e2:	b108      	cbz	r0, 1c1e8 <bt_event_thread+0x16>
			bt_bas_set();
   1c1e4:	f7ee fb6c 	bl	a8c0 <bt_bas_set>
   1c1e8:	2100      	movs	r1, #0
   1c1ea:	f240 6067 	movw	r0, #1639	; 0x667
   1c1ee:	f7fe f947 	bl	1a480 <z_impl_k_sleep>
	while(1){
   1c1f2:	e7ef      	b.n	1c1d4 <bt_event_thread+0x2>

0001c1f4 <main>:
	peripheral_init();
   1c1f4:	f7ee baee 	b.w	a7d4 <peripheral_init>

0001c1f8 <k_uptime_get_32>:
{
   1c1f8:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
   1c1fa:	f005 fa76 	bl	216ea <z_impl_k_uptime_ticks>
   1c1fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c202:	fba0 0302 	umull	r0, r3, r0, r2
   1c206:	fb02 3301 	mla	r3, r2, r1, r3
   1c20a:	0bc0      	lsrs	r0, r0, #15
}
   1c20c:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   1c210:	bd08      	pop	{r3, pc}

0001c212 <gpio_enable_interrupt>:
	gt[channel].g_int.active = enable;
   1c212:	232c      	movs	r3, #44	; 0x2c
   1c214:	fb01 0003 	mla	r0, r1, r3, r0
   1c218:	7602      	strb	r2, [r0, #24]
}
   1c21a:	4770      	bx	lr

0001c21c <gpio_enable>:
	gt[channel].active = enable;
   1c21c:	232c      	movs	r3, #44	; 0x2c
   1c21e:	434b      	muls	r3, r1
   1c220:	54c2      	strb	r2, [r0, r3]
}
   1c222:	4770      	bx	lr

0001c224 <get_gpio_pin_interrupt_config>:
	for (int i = 0; i < size; i++) {
   1c224:	2200      	movs	r2, #0
   1c226:	4603      	mov	r3, r0
uint32_t get_gpio_pin_interrupt_config(Gpio_t* gt, uint8_t size){
   1c228:	b530      	push	{r4, r5, lr}
	uint32_t pin_list = 0;
   1c22a:	4610      	mov	r0, r2
			pin_list |= BIT(gt[i].pin);
   1c22c:	2501      	movs	r5, #1
	for (int i = 0; i < size; i++) {
   1c22e:	4291      	cmp	r1, r2
   1c230:	dc00      	bgt.n	1c234 <get_gpio_pin_interrupt_config+0x10>
}
   1c232:	bd30      	pop	{r4, r5, pc}
		if (gt[i].active && gt[i].g_int.active) {
   1c234:	781c      	ldrb	r4, [r3, #0]
   1c236:	b12c      	cbz	r4, 1c244 <get_gpio_pin_interrupt_config+0x20>
   1c238:	7e1c      	ldrb	r4, [r3, #24]
   1c23a:	b11c      	cbz	r4, 1c244 <get_gpio_pin_interrupt_config+0x20>
			pin_list |= BIT(gt[i].pin);
   1c23c:	7a1c      	ldrb	r4, [r3, #8]
   1c23e:	fa05 f404 	lsl.w	r4, r5, r4
   1c242:	4320      	orrs	r0, r4
	for (int i = 0; i < size; i++) {
   1c244:	3201      	adds	r2, #1
   1c246:	332c      	adds	r3, #44	; 0x2c
   1c248:	e7f1      	b.n	1c22e <get_gpio_pin_interrupt_config+0xa>

0001c24a <reset_gpio_interrupt>:

void reset_gpio_interrupt(Gpio_t* gt, uint8_t channel){
	if (gt[channel].active && gt[channel].g_int.active){
   1c24a:	232c      	movs	r3, #44	; 0x2c
   1c24c:	4359      	muls	r1, r3
   1c24e:	5c42      	ldrb	r2, [r0, r1]
   1c250:	1843      	adds	r3, r0, r1
   1c252:	b122      	cbz	r2, 1c25e <reset_gpio_interrupt+0x14>
   1c254:	7e1a      	ldrb	r2, [r3, #24]
   1c256:	b112      	cbz	r2, 1c25e <reset_gpio_interrupt+0x14>
		gt[channel].g_int.status = false;
   1c258:	2200      	movs	r2, #0
   1c25a:	f883 2020 	strb.w	r2, [r3, #32]
	}
}
   1c25e:	4770      	bx	lr

0001c260 <get_gpio_interrupt_status>:

bool get_gpio_interrupt_status(Gpio_t* gt, uint8_t channel){
	if (gt[channel].active && gt[channel].g_int.active){
   1c260:	232c      	movs	r3, #44	; 0x2c
   1c262:	4359      	muls	r1, r3
   1c264:	1843      	adds	r3, r0, r1
   1c266:	5c40      	ldrb	r0, [r0, r1]
   1c268:	b118      	cbz	r0, 1c272 <get_gpio_interrupt_status+0x12>
   1c26a:	7e18      	ldrb	r0, [r3, #24]
   1c26c:	b108      	cbz	r0, 1c272 <get_gpio_interrupt_status+0x12>
		return gt[channel].g_int.status;
   1c26e:	f893 0020 	ldrb.w	r0, [r3, #32]
	}else{
		return false;
	}
   1c272:	4770      	bx	lr

0001c274 <k_uptime_get_32>:
{
   1c274:	b508      	push	{r3, lr}
   1c276:	f005 fa38 	bl	216ea <z_impl_k_uptime_ticks>
   1c27a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c27e:	fba0 0302 	umull	r0, r3, r0, r2
   1c282:	fb02 3301 	mla	r3, r2, r1, r3
   1c286:	0bc0      	lsrs	r0, r0, #15
}
   1c288:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   1c28c:	bd08      	pop	{r3, pc}

0001c28e <k_uptime_get_32>:
{
   1c28e:	b508      	push	{r3, lr}
   1c290:	f005 fa2b 	bl	216ea <z_impl_k_uptime_ticks>
   1c294:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c298:	fba0 0302 	umull	r0, r3, r0, r2
   1c29c:	fb02 3301 	mla	r3, r2, r1, r3
   1c2a0:	0bc0      	lsrs	r0, r0, #15
}
   1c2a2:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   1c2a6:	bd08      	pop	{r3, pc}

0001c2a8 <cbpprintf_external>:
{
   1c2a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c2ac:	4606      	mov	r6, r0
   1c2ae:	460d      	mov	r5, r1
   1c2b0:	4617      	mov	r7, r2
	if (buf == NULL) {
   1c2b2:	4698      	mov	r8, r3
   1c2b4:	b32b      	cbz	r3, 1c302 <cbpprintf_external+0x5a>
	for (i = 0; i < s_nbr; i++) {
   1c2b6:	f04f 0a00 	mov.w	sl, #0
	args_size = hdr->hdr.desc.len * sizeof(int);
   1c2ba:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
   1c2be:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   1c2c2:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
   1c2c4:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   1c2c6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   1c2ca:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   1c2ce:	441c      	add	r4, r3
   1c2d0:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
   1c2d2:	45ca      	cmp	sl, r9
   1c2d4:	d309      	bcc.n	1c2ea <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
   1c2d6:	4639      	mov	r1, r7
   1c2d8:	4630      	mov	r0, r6
   1c2da:	46ac      	mov	ip, r5
   1c2dc:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1c2e0:	f108 0308 	add.w	r3, r8, #8
}
   1c2e4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   1c2e8:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   1c2ea:	f814 3b01 	ldrb.w	r3, [r4], #1
	for (i = 0; i < s_nbr; i++) {
   1c2ee:	f10a 0a01 	add.w	sl, sl, #1
		s += strlen(s) + 1;
   1c2f2:	4620      	mov	r0, r4
		*ps = s;
   1c2f4:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
   1c2f8:	f7ed f828 	bl	934c <strlen>
   1c2fc:	3001      	adds	r0, #1
   1c2fe:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   1c300:	e7e7      	b.n	1c2d2 <cbpprintf_external+0x2a>
}
   1c302:	f06f 0015 	mvn.w	r0, #21
   1c306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001c30a <is_ptr>:
{
   1c30a:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
   1c30c:	2500      	movs	r5, #0
{
   1c30e:	4602      	mov	r2, r0
	bool mod = false;
   1c310:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
   1c312:	4614      	mov	r4, r2
   1c314:	f814 3b01 	ldrb.w	r3, [r4], #1
   1c318:	b90b      	cbnz	r3, 1c31e <is_ptr+0x14>
					return false;
   1c31a:	4618      	mov	r0, r3
   1c31c:	e009      	b.n	1c332 <is_ptr+0x28>
		if (mod) {
   1c31e:	b198      	cbz	r0, 1c348 <is_ptr+0x3e>
			if (cnt == n) {
   1c320:	428d      	cmp	r5, r1
   1c322:	d107      	bne.n	1c334 <is_ptr+0x2a>
				if (c == 'p') {
   1c324:	2b70      	cmp	r3, #112	; 0x70
   1c326:	d004      	beq.n	1c332 <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
   1c328:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
   1c32c:	2a3a      	cmp	r2, #58	; 0x3a
   1c32e:	d80b      	bhi.n	1c348 <is_ptr+0x3e>
					return false;
   1c330:	2000      	movs	r0, #0
}
   1c332:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
   1c334:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
   1c338:	2e3a      	cmp	r6, #58	; 0x3a
   1c33a:	d805      	bhi.n	1c348 <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
   1c33c:	7853      	ldrb	r3, [r2, #1]
				cnt++;
   1c33e:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
   1c340:	1c94      	adds	r4, r2, #2
   1c342:	2b00      	cmp	r3, #0
   1c344:	d0e9      	beq.n	1c31a <is_ptr+0x10>
   1c346:	2000      	movs	r0, #0
		if (c == '%') {
   1c348:	2b25      	cmp	r3, #37	; 0x25
	while ((c = *fmt++) != '\0') {
   1c34a:	4622      	mov	r2, r4
			mod = !mod;
   1c34c:	bf08      	it	eq
   1c34e:	f080 0001 	eoreq.w	r0, r0, #1
   1c352:	e7de      	b.n	1c312 <is_ptr+0x8>

0001c354 <arch_printk_char_out>:
}
   1c354:	2000      	movs	r0, #0
   1c356:	4770      	bx	lr

0001c358 <str_out>:
{
   1c358:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1c35a:	688a      	ldr	r2, [r1, #8]
   1c35c:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   1c35e:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1c360:	b114      	cbz	r4, 1c368 <str_out+0x10>
   1c362:	684b      	ldr	r3, [r1, #4]
   1c364:	4293      	cmp	r3, r2
   1c366:	dc01      	bgt.n	1c36c <str_out+0x14>
		ctx->count++;
   1c368:	608d      	str	r5, [r1, #8]
}
   1c36a:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1c36c:	3b01      	subs	r3, #1
   1c36e:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1c370:	bf08      	it	eq
   1c372:	2200      	moveq	r2, #0
   1c374:	608d      	str	r5, [r1, #8]
   1c376:	bf0c      	ite	eq
   1c378:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1c37a:	54a0      	strbne	r0, [r4, r2]
   1c37c:	e7f5      	b.n	1c36a <str_out+0x12>

0001c37e <printk>:
{
   1c37e:	b40f      	push	{r0, r1, r2, r3}
   1c380:	b507      	push	{r0, r1, r2, lr}
   1c382:	a904      	add	r1, sp, #16
   1c384:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1c388:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   1c38a:	f7ee feff 	bl	b18c <vprintk>
}
   1c38e:	b003      	add	sp, #12
   1c390:	f85d eb04 	ldr.w	lr, [sp], #4
   1c394:	b004      	add	sp, #16
   1c396:	4770      	bx	lr

0001c398 <snprintk>:
{
   1c398:	b40c      	push	{r2, r3}
   1c39a:	b507      	push	{r0, r1, r2, lr}
   1c39c:	ab04      	add	r3, sp, #16
   1c39e:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1c3a2:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1c3a4:	f7ee ff00 	bl	b1a8 <vsnprintk>
}
   1c3a8:	b003      	add	sp, #12
   1c3aa:	f85d eb04 	ldr.w	lr, [sp], #4
   1c3ae:	b002      	add	sp, #8
   1c3b0:	4770      	bx	lr

0001c3b2 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1c3b2:	4604      	mov	r4, r0
   1c3b4:	b508      	push	{r3, lr}
   1c3b6:	4608      	mov	r0, r1
   1c3b8:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   1c3ba:	461a      	mov	r2, r3
   1c3bc:	47a0      	blx	r4
	return z_impl_z_current_get();
   1c3be:	f7fe f879 	bl	1a4b4 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   1c3c2:	f7f1 ff0b 	bl	e1dc <z_impl_k_thread_abort>

0001c3c6 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   1c3c6:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   1c3ca:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   1c3cc:	0840      	lsrs	r0, r0, #1
   1c3ce:	4770      	bx	lr

0001c3d0 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   1c3d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c3d2:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   1c3d4:	f7ff fff7 	bl	1c3c6 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   1c3d8:	fab0 f080 	clz	r0, r0
   1c3dc:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   1c3e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   1c3e4:	f8dc 6010 	ldr.w	r6, [ip, #16]
	void *cmem = &buf[c];
   1c3e8:	00ca      	lsls	r2, r1, #3
		((uint16_t *)cmem)[f] = val;
   1c3ea:	1d17      	adds	r7, r2, #4
{
   1c3ec:	460c      	mov	r4, r1
   1c3ee:	3206      	adds	r2, #6
   1c3f0:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   1c3f2:	b956      	cbnz	r6, 1c40a <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   1c3f4:	2101      	movs	r1, #1
   1c3f6:	fa01 f000 	lsl.w	r0, r1, r0
   1c3fa:	68d9      	ldr	r1, [r3, #12]
   1c3fc:	4301      	orrs	r1, r0
   1c3fe:	60d9      	str	r1, [r3, #12]
		b->next = c;
   1c400:	f8cc 4010 	str.w	r4, [ip, #16]
   1c404:	53dd      	strh	r5, [r3, r7]
   1c406:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   1c408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   1c40a:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   1c40c:	3104      	adds	r1, #4
   1c40e:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   1c410:	53d8      	strh	r0, [r3, r7]
   1c412:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1c416:	529e      	strh	r6, [r3, r2]
   1c418:	80c5      	strh	r5, [r0, #6]
   1c41a:	525d      	strh	r5, [r3, r1]
   1c41c:	e7f4      	b.n	1c408 <free_list_add+0x38>

0001c41e <free_list_remove_bidx>:
{
   1c41e:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   1c420:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   1c424:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   1c426:	4299      	cmp	r1, r3
   1c428:	f102 0104 	add.w	r1, r2, #4
   1c42c:	d10a      	bne.n	1c444 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   1c42e:	2301      	movs	r3, #1
   1c430:	fa03 f202 	lsl.w	r2, r3, r2
   1c434:	68c3      	ldr	r3, [r0, #12]
   1c436:	ea23 0302 	bic.w	r3, r3, r2
   1c43a:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   1c43c:	2300      	movs	r3, #0
   1c43e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   1c442:	bd10      	pop	{r4, pc}
   1c444:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   1c446:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   1c44a:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   1c44e:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   1c452:	80cb      	strh	r3, [r1, #6]
   1c454:	8082      	strh	r2, [r0, #4]
}
   1c456:	e7f4      	b.n	1c442 <free_list_remove_bidx+0x24>

0001c458 <free_list_remove>:
{
   1c458:	b508      	push	{r3, lr}
   1c45a:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   1c45c:	f7ff ffb3 	bl	1c3c6 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   1c460:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   1c464:	4618      	mov	r0, r3
}
   1c466:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   1c46a:	f1c2 021f 	rsb	r2, r2, #31
   1c46e:	f7ff bfd6 	b.w	1c41e <free_list_remove_bidx>

0001c472 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   1c472:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c476:	fab1 f581 	clz	r5, r1
   1c47a:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   1c47e:	eb00 0889 	add.w	r8, r0, r9, lsl #2
   1c482:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   1c486:	4603      	mov	r3, r0
   1c488:	460e      	mov	r6, r1
	if (b->next) {
   1c48a:	b1c2      	cbz	r2, 1c4be <alloc_chunk+0x4c>
   1c48c:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   1c48e:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   1c492:	4618      	mov	r0, r3
   1c494:	4621      	mov	r1, r4
   1c496:	f7ff ff96 	bl	1c3c6 <chunk_size>
   1c49a:	42b0      	cmp	r0, r6
   1c49c:	d306      	bcc.n	1c4ac <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   1c49e:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   1c4a0:	4618      	mov	r0, r3
   1c4a2:	f7ff ffbc 	bl	1c41e <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   1c4a6:	4620      	mov	r0, r4
   1c4a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   1c4ac:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   1c4b0:	88e0      	ldrh	r0, [r4, #6]
		} while (--i && b->next != first);
   1c4b2:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   1c4b4:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   1c4b8:	d001      	beq.n	1c4be <alloc_chunk+0x4c>
   1c4ba:	4282      	cmp	r2, r0
   1c4bc:	d1e7      	bne.n	1c48e <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   1c4be:	f04f 34ff 	mov.w	r4, #4294967295
   1c4c2:	f1c5 0220 	rsb	r2, r5, #32
   1c4c6:	4094      	lsls	r4, r2
   1c4c8:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   1c4ca:	4014      	ands	r4, r2
   1c4cc:	d0eb      	beq.n	1c4a6 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   1c4ce:	fa94 f2a4 	rbit	r2, r4
   1c4d2:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1c4d6:	1d11      	adds	r1, r2, #4
   1c4d8:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   1c4dc:	4621      	mov	r1, r4
   1c4de:	e7df      	b.n	1c4a0 <alloc_chunk+0x2e>

0001c4e0 <merge_chunks>:
{
   1c4e0:	b538      	push	{r3, r4, r5, lr}
   1c4e2:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1c4e4:	f7ff ff6f 	bl	1c3c6 <chunk_size>
{
   1c4e8:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1c4ea:	4604      	mov	r4, r0
   1c4ec:	4611      	mov	r1, r2
   1c4ee:	4618      	mov	r0, r3
   1c4f0:	f7ff ff69 	bl	1c3c6 <chunk_size>
   1c4f4:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1c4f6:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   1c4f8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   1c4fc:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   1c4fe:	4618      	mov	r0, r3
   1c500:	f7ff ff61 	bl	1c3c6 <chunk_size>
	void *cmem = &buf[c];
   1c504:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   1c506:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   1c50a:	bd38      	pop	{r3, r4, r5, pc}

0001c50c <split_chunks>:
{
   1c50c:	b538      	push	{r3, r4, r5, lr}
   1c50e:	460c      	mov	r4, r1
   1c510:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   1c512:	f7ff ff58 	bl	1c3c6 <chunk_size>
	chunksz_t rsz = sz0 - lsz;
   1c516:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   1c518:	1a51      	subs	r1, r2, r1
	chunksz_t rsz = sz0 - lsz;
   1c51a:	4405      	add	r5, r0
   1c51c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1c520:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   1c522:	8060      	strh	r0, [r4, #2]
   1c524:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1c528:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   1c52a:	8044      	strh	r4, [r0, #2]
   1c52c:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   1c530:	4618      	mov	r0, r3
   1c532:	4611      	mov	r1, r2
   1c534:	f7ff ff47 	bl	1c3c6 <chunk_size>
	void *cmem = &buf[c];
   1c538:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   1c53a:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   1c53e:	bd38      	pop	{r3, r4, r5, pc}

0001c540 <free_chunk>:
{
   1c540:	b538      	push	{r3, r4, r5, lr}
   1c542:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   1c544:	f7ff ff3f 	bl	1c3c6 <chunk_size>
   1c548:	460c      	mov	r4, r1
   1c54a:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   1c54c:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1c550:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   1c552:	07da      	lsls	r2, r3, #31
   1c554:	d40a      	bmi.n	1c56c <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   1c556:	4628      	mov	r0, r5
   1c558:	f7ff ff7e 	bl	1c458 <free_list_remove>
	return c + chunk_size(h, c);
   1c55c:	4621      	mov	r1, r4
   1c55e:	4628      	mov	r0, r5
   1c560:	f7ff ff31 	bl	1c3c6 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1c564:	1822      	adds	r2, r4, r0
   1c566:	4628      	mov	r0, r5
   1c568:	f7ff ffba 	bl	1c4e0 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   1c56c:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   1c570:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   1c572:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1c576:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   1c578:	07db      	lsls	r3, r3, #31
   1c57a:	d40c      	bmi.n	1c596 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   1c57c:	4628      	mov	r0, r5
   1c57e:	f7ff ff6b 	bl	1c458 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   1c582:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   1c586:	4622      	mov	r2, r4
   1c588:	1a61      	subs	r1, r4, r1
   1c58a:	4628      	mov	r0, r5
   1c58c:	f7ff ffa8 	bl	1c4e0 <merge_chunks>
   1c590:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   1c594:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   1c596:	4621      	mov	r1, r4
   1c598:	4628      	mov	r0, r5
}
   1c59a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   1c59e:	f7ff bf17 	b.w	1c3d0 <free_list_add>

0001c5a2 <sys_heap_free>:
	if (mem == NULL) {
   1c5a2:	b161      	cbz	r1, 1c5be <sys_heap_free+0x1c>
   1c5a4:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1c5a6:	3904      	subs	r1, #4
   1c5a8:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   1c5aa:	f021 0307 	bic.w	r3, r1, #7
   1c5ae:	4403      	add	r3, r0
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1c5b0:	885a      	ldrh	r2, [r3, #2]
	free_chunk(h, c);
   1c5b2:	08c9      	lsrs	r1, r1, #3
   1c5b4:	f022 0201 	bic.w	r2, r2, #1
   1c5b8:	805a      	strh	r2, [r3, #2]
   1c5ba:	f7ff bfc1 	b.w	1c540 <free_chunk>
}
   1c5be:	4770      	bx	lr

0001c5c0 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   1c5c0:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   1c5c2:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   1c5c4:	b909      	cbnz	r1, 1c5ca <sys_heap_alloc+0xa>
		return NULL;
   1c5c6:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   1c5c8:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   1c5ca:	68ab      	ldr	r3, [r5, #8]
   1c5cc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1c5d0:	d9f9      	bls.n	1c5c6 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1c5d2:	310b      	adds	r1, #11
   1c5d4:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1c5d6:	4621      	mov	r1, r4
   1c5d8:	4628      	mov	r0, r5
   1c5da:	f7ff ff4a 	bl	1c472 <alloc_chunk>
	if (c == 0U) {
   1c5de:	4606      	mov	r6, r0
   1c5e0:	2800      	cmp	r0, #0
   1c5e2:	d0f0      	beq.n	1c5c6 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   1c5e4:	4601      	mov	r1, r0
   1c5e6:	4628      	mov	r0, r5
   1c5e8:	f7ff feed 	bl	1c3c6 <chunk_size>
   1c5ec:	42a0      	cmp	r0, r4
   1c5ee:	d907      	bls.n	1c600 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   1c5f0:	4628      	mov	r0, r5
   1c5f2:	1932      	adds	r2, r6, r4
   1c5f4:	f7ff ff8a 	bl	1c50c <split_chunks>
		free_list_add(h, c + chunk_sz);
   1c5f8:	4611      	mov	r1, r2
   1c5fa:	4628      	mov	r0, r5
   1c5fc:	f7ff fee8 	bl	1c3d0 <free_list_add>
	void *cmem = &buf[c];
   1c600:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1c604:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1c606:	8853      	ldrh	r3, [r2, #2]
   1c608:	3004      	adds	r0, #4
   1c60a:	f043 0301 	orr.w	r3, r3, #1
   1c60e:	8053      	strh	r3, [r2, #2]
	return mem;
   1c610:	e7da      	b.n	1c5c8 <sys_heap_alloc+0x8>

0001c612 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   1c612:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c616:	f101 39ff 	add.w	r9, r1, #4294967295
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
   1c61a:	ea19 0901 	ands.w	r9, r9, r1
{
   1c61e:	460f      	mov	r7, r1
   1c620:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
   1c622:	6806      	ldr	r6, [r0, #0]
	if (align != rew) {
   1c624:	d00c      	beq.n	1c640 <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
   1c626:	424b      	negs	r3, r1
   1c628:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   1c62a:	2b04      	cmp	r3, #4
   1c62c:	461a      	mov	r2, r3
   1c62e:	464f      	mov	r7, r9
   1c630:	bf28      	it	cs
   1c632:	2204      	movcs	r2, #4
	rew = align & -align;
   1c634:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   1c636:	b964      	cbnz	r4, 1c652 <sys_heap_aligned_alloc+0x40>
		return NULL;
   1c638:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   1c63a:	4628      	mov	r0, r5
   1c63c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   1c640:	2904      	cmp	r1, #4
   1c642:	d804      	bhi.n	1c64e <sys_heap_aligned_alloc+0x3c>
}
   1c644:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   1c648:	4611      	mov	r1, r2
   1c64a:	f7ff bfb9 	b.w	1c5c0 <sys_heap_alloc>
		gap = chunk_header_bytes(h);
   1c64e:	2204      	movs	r2, #4
   1c650:	e7f1      	b.n	1c636 <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
   1c652:	68b3      	ldr	r3, [r6, #8]
   1c654:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   1c658:	d9ee      	bls.n	1c638 <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1c65a:	f104 010b 	add.w	r1, r4, #11
   1c65e:	4439      	add	r1, r7
   1c660:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   1c662:	4630      	mov	r0, r6
   1c664:	08c9      	lsrs	r1, r1, #3
   1c666:	f7ff ff04 	bl	1c472 <alloc_chunk>
	if (c0 == 0) {
   1c66a:	4680      	mov	r8, r0
   1c66c:	2800      	cmp	r0, #0
   1c66e:	d0e3      	beq.n	1c638 <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   1c670:	f109 0504 	add.w	r5, r9, #4
   1c674:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   1c678:	1e7b      	subs	r3, r7, #1
   1c67a:	4435      	add	r5, r6
   1c67c:	441d      	add	r5, r3
   1c67e:	427f      	negs	r7, r7
   1c680:	403d      	ands	r5, r7
   1c682:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1c686:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1c688:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1c68a:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1c68c:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1c68e:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   1c692:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   1c694:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1c698:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   1c69c:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   1c6a0:	d208      	bcs.n	1c6b4 <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
   1c6a2:	4601      	mov	r1, r0
   1c6a4:	463a      	mov	r2, r7
   1c6a6:	4630      	mov	r0, r6
   1c6a8:	f7ff ff30 	bl	1c50c <split_chunks>
		free_list_add(h, c0);
   1c6ac:	4641      	mov	r1, r8
   1c6ae:	4630      	mov	r0, r6
   1c6b0:	f7ff fe8e 	bl	1c3d0 <free_list_add>
	return c + chunk_size(h, c);
   1c6b4:	4639      	mov	r1, r7
   1c6b6:	4630      	mov	r0, r6
   1c6b8:	f7ff fe85 	bl	1c3c6 <chunk_size>
   1c6bc:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   1c6be:	4284      	cmp	r4, r0
   1c6c0:	d207      	bcs.n	1c6d2 <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
   1c6c2:	4630      	mov	r0, r6
   1c6c4:	4622      	mov	r2, r4
   1c6c6:	f7ff ff21 	bl	1c50c <split_chunks>
		free_list_add(h, c_end);
   1c6ca:	4621      	mov	r1, r4
   1c6cc:	4630      	mov	r0, r6
   1c6ce:	f7ff fe7f 	bl	1c3d0 <free_list_add>
	void *cmem = &buf[c];
   1c6d2:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1c6d6:	8873      	ldrh	r3, [r6, #2]
   1c6d8:	f043 0301 	orr.w	r3, r3, #1
   1c6dc:	8073      	strh	r3, [r6, #2]
   1c6de:	e7ac      	b.n	1c63a <sys_heap_aligned_alloc+0x28>

0001c6e0 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   1c6e0:	b4f0      	push	{r4, r5, r6, r7}
   1c6e2:	4604      	mov	r4, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   1c6e4:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1c6e6:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1c6e8:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1c6ea:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1c6ee:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1c6f2:	1a0e      	subs	r6, r1, r0
   1c6f4:	08f3      	lsrs	r3, r6, #3
	return 31 - __builtin_clz(usable_sz);
   1c6f6:	fab3 f283 	clz	r2, r3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   1c6fa:	6020      	str	r0, [r4, #0]
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   1c6fc:	2700      	movs	r7, #0
   1c6fe:	4604      	mov	r4, r0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1c700:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
   1c704:	00ad      	lsls	r5, r5, #2
	h->end_chunk = heap_sz;
   1c706:	6083      	str	r3, [r0, #8]
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1c708:	3507      	adds	r5, #7
	h->avail_buckets = 0;
   1c70a:	f844 7f0c 	str.w	r7, [r4, #12]!
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1c70e:	f1c2 0220 	rsb	r2, r2, #32
   1c712:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   1c714:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
   1c718:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
   1c71c:	4294      	cmp	r4, r2
   1c71e:	d1fb      	bne.n	1c718 <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1c720:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1c722:	f042 0201 	orr.w	r2, r2, #1
   1c726:	8042      	strh	r2, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1c728:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1c72a:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
   1c72c:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   1c730:	8007      	strh	r7, [r0, #0]
   1c732:	8065      	strh	r5, [r4, #2]
   1c734:	1984      	adds	r4, r0, r6
   1c736:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
   1c73a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
   1c73e:	8067      	strh	r7, [r4, #2]
   1c740:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1c742:	885a      	ldrh	r2, [r3, #2]
   1c744:	f042 0201 	orr.w	r2, r2, #1
   1c748:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   1c74a:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   1c74c:	f7ff be40 	b.w	1c3d0 <free_list_add>

0001c750 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1c750:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   1c752:	f013 0307 	ands.w	r3, r3, #7
   1c756:	d105      	bne.n	1c764 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1c758:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   1c75a:	2b00      	cmp	r3, #0
   1c75c:	bf0c      	ite	eq
   1c75e:	2000      	moveq	r0, #0
   1c760:	2003      	movne	r0, #3
   1c762:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1c764:	2b02      	cmp	r3, #2
   1c766:	d105      	bne.n	1c774 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1c768:	8b40      	ldrh	r0, [r0, #26]
   1c76a:	fab0 f080 	clz	r0, r0
   1c76e:	0940      	lsrs	r0, r0, #5
   1c770:	0080      	lsls	r0, r0, #2
   1c772:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1c774:	2b01      	cmp	r3, #1
   1c776:	d105      	bne.n	1c784 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1c778:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   1c77a:	2b00      	cmp	r3, #0
   1c77c:	bf0c      	ite	eq
   1c77e:	2000      	moveq	r0, #0
   1c780:	2005      	movne	r0, #5
   1c782:	4770      	bx	lr
	int evt = EVT_NOP;
   1c784:	2000      	movs	r0, #0
}
   1c786:	4770      	bx	lr

0001c788 <validate_args>:
{
   1c788:	b510      	push	{r4, lr}
   1c78a:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1c78c:	b100      	cbz	r0, 1c790 <validate_args+0x8>
   1c78e:	b911      	cbnz	r1, 1c796 <validate_args+0xe>
		return -EINVAL;
   1c790:	f06f 0015 	mvn.w	r0, #21
}
   1c794:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   1c796:	1d08      	adds	r0, r1, #4
   1c798:	f000 f895 	bl	1c8c6 <sys_notify_validate>
	if ((rv == 0)
   1c79c:	2800      	cmp	r0, #0
   1c79e:	d1f9      	bne.n	1c794 <validate_args+0xc>
	    && ((cli->notify.flags
   1c7a0:	68a3      	ldr	r3, [r4, #8]
   1c7a2:	2b03      	cmp	r3, #3
   1c7a4:	d9f6      	bls.n	1c794 <validate_args+0xc>
   1c7a6:	e7f3      	b.n	1c790 <validate_args+0x8>

0001c7a8 <notify_one>:
{
   1c7a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c7ac:	460d      	mov	r5, r1
   1c7ae:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1c7b0:	4619      	mov	r1, r3
   1c7b2:	1d28      	adds	r0, r5, #4
{
   1c7b4:	4690      	mov	r8, r2
   1c7b6:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1c7b8:	f000 f899 	bl	1c8ee <sys_notify_finalize>
	if (cb) {
   1c7bc:	4604      	mov	r4, r0
   1c7be:	b138      	cbz	r0, 1c7d0 <notify_one+0x28>
		cb(mgr, cli, state, res);
   1c7c0:	4633      	mov	r3, r6
   1c7c2:	4642      	mov	r2, r8
   1c7c4:	4629      	mov	r1, r5
   1c7c6:	4638      	mov	r0, r7
   1c7c8:	46a4      	mov	ip, r4
}
   1c7ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1c7ce:	4760      	bx	ip
}
   1c7d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001c7d4 <transition_complete>:
{
   1c7d4:	b410      	push	{r4}
	__asm__ volatile(
   1c7d6:	f04f 0420 	mov.w	r4, #32
   1c7da:	f3ef 8211 	mrs	r2, BASEPRI
   1c7de:	f384 8812 	msr	BASEPRI_MAX, r4
   1c7e2:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   1c7e6:	6141      	str	r1, [r0, #20]
}
   1c7e8:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   1c7ea:	2101      	movs	r1, #1
   1c7ec:	f7ee bcf2 	b.w	b1d4 <process_event>

0001c7f0 <onoff_manager_init>:
{
   1c7f0:	b538      	push	{r3, r4, r5, lr}
   1c7f2:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1c7f4:	4605      	mov	r5, r0
   1c7f6:	b158      	cbz	r0, 1c810 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1c7f8:	b151      	cbz	r1, 1c810 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1c7fa:	680b      	ldr	r3, [r1, #0]
   1c7fc:	b143      	cbz	r3, 1c810 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1c7fe:	684b      	ldr	r3, [r1, #4]
   1c800:	b133      	cbz	r3, 1c810 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1c802:	221c      	movs	r2, #28
   1c804:	2100      	movs	r1, #0
   1c806:	f005 f94f 	bl	21aa8 <memset>
	return 0;
   1c80a:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1c80c:	612c      	str	r4, [r5, #16]
}
   1c80e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1c810:	f06f 0015 	mvn.w	r0, #21
   1c814:	e7fb      	b.n	1c80e <onoff_manager_init+0x1e>

0001c816 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1c816:	b570      	push	{r4, r5, r6, lr}
   1c818:	4605      	mov	r5, r0
   1c81a:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1c81c:	f7ff ffb4 	bl	1c788 <validate_args>

	if (rv < 0) {
   1c820:	1e04      	subs	r4, r0, #0
   1c822:	db15      	blt.n	1c850 <onoff_request+0x3a>
   1c824:	f04f 0320 	mov.w	r3, #32
   1c828:	f3ef 8211 	mrs	r2, BASEPRI
   1c82c:	f383 8812 	msr	BASEPRI_MAX, r3
   1c830:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1c834:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1c838:	8b6b      	ldrh	r3, [r5, #26]
   1c83a:	8b2c      	ldrh	r4, [r5, #24]
   1c83c:	428b      	cmp	r3, r1
   1c83e:	f004 0407 	and.w	r4, r4, #7
   1c842:	d107      	bne.n	1c854 <onoff_request+0x3e>
	__asm__ volatile(
   1c844:	f382 8811 	msr	BASEPRI, r2
   1c848:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
   1c84c:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   1c850:	4620      	mov	r0, r4
   1c852:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   1c854:	2c02      	cmp	r4, #2
   1c856:	d10c      	bne.n	1c872 <onoff_request+0x5c>
		mgr->refs += 1U;
   1c858:	3301      	adds	r3, #1
   1c85a:	836b      	strh	r3, [r5, #26]
   1c85c:	f382 8811 	msr	BASEPRI, r2
   1c860:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
   1c864:	2300      	movs	r3, #0
   1c866:	4622      	mov	r2, r4
   1c868:	4631      	mov	r1, r6
   1c86a:	4628      	mov	r0, r5
   1c86c:	f7ff ff9c 	bl	1c7a8 <notify_one>
   1c870:	e7ee      	b.n	1c850 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
   1c872:	2c06      	cmp	r4, #6
   1c874:	d814      	bhi.n	1c8a0 <onoff_request+0x8a>
   1c876:	e8df f004 	tbb	[pc, r4]
   1c87a:	1304      	.short	0x1304
   1c87c:	1a041313 	.word	0x1a041313
   1c880:	04          	.byte	0x04
   1c881:	00          	.byte	0x00
	parent->next = child;
   1c882:	2300      	movs	r3, #0
   1c884:	6033      	str	r3, [r6, #0]
	return list->tail;
   1c886:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   1c888:	b93b      	cbnz	r3, 1c89a <onoff_request+0x84>
	list->head = node;
   1c88a:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
   1c88e:	b9ac      	cbnz	r4, 1c8bc <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
   1c890:	2102      	movs	r1, #2
   1c892:	4628      	mov	r0, r5
   1c894:	f7ee fc9e 	bl	b1d4 <process_event>
   1c898:	e7da      	b.n	1c850 <onoff_request+0x3a>
	parent->next = child;
   1c89a:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1c89c:	606e      	str	r6, [r5, #4]
}
   1c89e:	e7f6      	b.n	1c88e <onoff_request+0x78>
   1c8a0:	f382 8811 	msr	BASEPRI, r2
   1c8a4:	f3bf 8f6f 	isb	sy
		rv = -EIO;
   1c8a8:	f06f 0404 	mvn.w	r4, #4
   1c8ac:	e7d0      	b.n	1c850 <onoff_request+0x3a>
   1c8ae:	f382 8811 	msr	BASEPRI, r2
   1c8b2:	f3bf 8f6f 	isb	sy
   1c8b6:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1c8ba:	e7c9      	b.n	1c850 <onoff_request+0x3a>
   1c8bc:	f382 8811 	msr	BASEPRI, r2
   1c8c0:	f3bf 8f6f 	isb	sy
		if (notify) {
   1c8c4:	e7c4      	b.n	1c850 <onoff_request+0x3a>

0001c8c6 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   1c8c6:	4603      	mov	r3, r0
   1c8c8:	b140      	cbz	r0, 1c8dc <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1c8ca:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1c8cc:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   1c8d0:	2a02      	cmp	r2, #2
   1c8d2:	d006      	beq.n	1c8e2 <sys_notify_validate+0x1c>
   1c8d4:	2a03      	cmp	r2, #3
   1c8d6:	d004      	beq.n	1c8e2 <sys_notify_validate+0x1c>
   1c8d8:	2a01      	cmp	r2, #1
   1c8da:	d005      	beq.n	1c8e8 <sys_notify_validate+0x22>
   1c8dc:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   1c8e0:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1c8e2:	681a      	ldr	r2, [r3, #0]
   1c8e4:	2a00      	cmp	r2, #0
   1c8e6:	d0f9      	beq.n	1c8dc <sys_notify_validate+0x16>
		notify->result = 0;
   1c8e8:	2000      	movs	r0, #0
   1c8ea:	6098      	str	r0, [r3, #8]
   1c8ec:	4770      	bx	lr

0001c8ee <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   1c8ee:	b510      	push	{r4, lr}
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1c8f0:	6842      	ldr	r2, [r0, #4]
   1c8f2:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
   1c8f4:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   1c8f8:	2a02      	cmp	r2, #2
   1c8fa:	f04f 0400 	mov.w	r4, #0
	notify->result = res;
   1c8fe:	6081      	str	r1, [r0, #8]
	switch (method) {
   1c900:	d007      	beq.n	1c912 <sys_notify_finalize+0x24>
   1c902:	2a03      	cmp	r2, #3
   1c904:	d002      	beq.n	1c90c <sys_notify_finalize+0x1e>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1c906:	605c      	str	r4, [r3, #4]
	sys_notify_generic_callback rv = NULL;
   1c908:	2000      	movs	r0, #0
   1c90a:	e001      	b.n	1c910 <sys_notify_finalize+0x22>
		rv = notify->method.callback;
   1c90c:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1c90e:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1c910:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   1c912:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1c914:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   1c916:	2800      	cmp	r0, #0
   1c918:	d0f6      	beq.n	1c908 <sys_notify_finalize+0x1a>
	return z_impl_k_poll_signal_raise(sig, result);
   1c91a:	f7fe f8b1 	bl	1aa80 <z_impl_k_poll_signal_raise>
   1c91e:	e7f3      	b.n	1c908 <sys_notify_finalize+0x1a>

0001c920 <outs>:
{
   1c920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c924:	4607      	mov	r7, r0
   1c926:	4688      	mov	r8, r1
   1c928:	4615      	mov	r5, r2
   1c92a:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1c92c:	4614      	mov	r4, r2
   1c92e:	42b4      	cmp	r4, r6
   1c930:	d305      	bcc.n	1c93e <outs+0x1e>
   1c932:	b10e      	cbz	r6, 1c938 <outs+0x18>
	return (int)count;
   1c934:	1b60      	subs	r0, r4, r5
   1c936:	e008      	b.n	1c94a <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1c938:	7823      	ldrb	r3, [r4, #0]
   1c93a:	2b00      	cmp	r3, #0
   1c93c:	d0fa      	beq.n	1c934 <outs+0x14>
		int rc = out((int)*sp++, ctx);
   1c93e:	4641      	mov	r1, r8
   1c940:	f814 0b01 	ldrb.w	r0, [r4], #1
   1c944:	47b8      	blx	r7
		if (rc < 0) {
   1c946:	2800      	cmp	r0, #0
   1c948:	daf1      	bge.n	1c92e <outs+0xe>
}
   1c94a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001c94e <assert_print>:

	k_panic();
}

void assert_print(const char *fmt, ...)
{
   1c94e:	b40f      	push	{r0, r1, r2, r3}
   1c950:	b507      	push	{r0, r1, r2, lr}
   1c952:	a904      	add	r1, sp, #16
   1c954:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   1c958:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   1c95a:	f7ee fc17 	bl	b18c <vprintk>

	va_end(ap);
}
   1c95e:	b003      	add	sp, #12
   1c960:	f85d eb04 	ldr.w	lr, [sp], #4
   1c964:	b004      	add	sp, #16
   1c966:	4770      	bx	lr

0001c968 <free_space>:
	ARG_UNUSED(err);
}

static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   1c968:	68c3      	ldr	r3, [r0, #12]
   1c96a:	6802      	ldr	r2, [r0, #0]
   1c96c:	4293      	cmp	r3, r2
   1c96e:	d904      	bls.n	1c97a <free_space+0x12>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
   1c970:	3b01      	subs	r3, #1
   1c972:	1a9a      	subs	r2, r3, r2

		return false;
   1c974:	2000      	movs	r0, #0
	} else if (!buffer->rd_idx) {
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   1c976:	600a      	str	r2, [r1, #0]
	}

	*res = buffer->size - buffer->tmp_wr_idx;

	return true;
}
   1c978:	4770      	bx	lr
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   1c97a:	6a00      	ldr	r0, [r0, #32]
	} else if (!buffer->rd_idx) {
   1c97c:	b913      	cbnz	r3, 1c984 <free_space+0x1c>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   1c97e:	3801      	subs	r0, #1
   1c980:	1a82      	subs	r2, r0, r2
		return false;
   1c982:	e7f7      	b.n	1c974 <free_space+0xc>
	*res = buffer->size - buffer->tmp_wr_idx;
   1c984:	1a82      	subs	r2, r0, r2
	return true;
   1c986:	2001      	movs	r0, #1
   1c988:	e7f5      	b.n	1c976 <free_space+0xe>

0001c98a <get_usage>:

	return true;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
   1c98a:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
   1c98c:	a901      	add	r1, sp, #4
{
   1c98e:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
   1c990:	f7ff ffea 	bl	1c968 <free_space>
   1c994:	b120      	cbz	r0, 1c9a0 <get_usage+0x16>
		f += (buffer->rd_idx - 1);
   1c996:	9b01      	ldr	r3, [sp, #4]
   1c998:	68e2      	ldr	r2, [r4, #12]
   1c99a:	3b01      	subs	r3, #1
   1c99c:	4413      	add	r3, r2
   1c99e:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
   1c9a0:	6a20      	ldr	r0, [r4, #32]
   1c9a2:	9b01      	ldr	r3, [sp, #4]
   1c9a4:	1ac0      	subs	r0, r0, r3
}
   1c9a6:	3801      	subs	r0, #1
   1c9a8:	b002      	add	sp, #8
   1c9aa:	bd10      	pop	{r4, pc}

0001c9ac <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, uint32_t val)
{
   1c9ac:	b510      	push	{r4, lr}
   1c9ae:	4604      	mov	r4, r0
	uint32_t i = idx + val;
   1c9b0:	1888      	adds	r0, r1, r2

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   1c9b2:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
   1c9b4:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   1c9b6:	07d2      	lsls	r2, r2, #31
   1c9b8:	d502      	bpl.n	1c9c0 <idx_inc+0x14>
		return i & (buffer->size - 1);
   1c9ba:	3b01      	subs	r3, #1
   1c9bc:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
   1c9be:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
   1c9c0:	4298      	cmp	r0, r3
   1c9c2:	bf28      	it	cs
   1c9c4:	1ac0      	subcs	r0, r0, r3
   1c9c6:	e7fa      	b.n	1c9be <idx_inc+0x12>

0001c9c8 <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
   1c9c8:	b538      	push	{r3, r4, r5, lr}
   1c9ca:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   1c9cc:	69c2      	ldr	r2, [r0, #28]
	union mpsc_pbuf_generic skip = {
   1c9ce:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   1c9d0:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
   1c9d2:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   1c9d6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   1c9da:	6801      	ldr	r1, [r0, #0]
   1c9dc:	462a      	mov	r2, r5
{
   1c9de:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   1c9e0:	f7ff ffe4 	bl	1c9ac <idx_inc>
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   1c9e4:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   1c9e6:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   1c9e8:	462a      	mov	r2, r5
   1c9ea:	4620      	mov	r0, r4
   1c9ec:	f7ff ffde 	bl	1c9ac <idx_inc>
   1c9f0:	6060      	str	r0, [r4, #4]
}
   1c9f2:	bd38      	pop	{r3, r4, r5, pc}

0001c9f4 <max_utilization_update>:
{
   1c9f4:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   1c9f6:	6903      	ldr	r3, [r0, #16]
{
   1c9f8:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   1c9fa:	075b      	lsls	r3, r3, #29
   1c9fc:	d506      	bpl.n	1ca0c <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   1c9fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
   1ca00:	f7ff ffc3 	bl	1c98a <get_usage>
   1ca04:	4285      	cmp	r5, r0
   1ca06:	bf2c      	ite	cs
   1ca08:	6265      	strcs	r5, [r4, #36]	; 0x24
   1ca0a:	6260      	strcc	r0, [r4, #36]	; 0x24
}
   1ca0c:	bd38      	pop	{r3, r4, r5, pc}

0001ca0e <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
   1ca0e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ca12:	461f      	mov	r7, r3
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
   1ca14:	2300      	movs	r3, #0
   1ca16:	703b      	strb	r3, [r7, #0]
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   1ca18:	f8d0 a00c 	ldr.w	sl, [r0, #12]
   1ca1c:	f8d0 901c 	ldr.w	r9, [r0, #28]
{
   1ca20:	4604      	mov	r4, r0
	if (item->hdr.busy && !item->hdr.valid) {
   1ca22:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
{
   1ca26:	468b      	mov	fp, r1
	if (item->hdr.busy && !item->hdr.valid) {
   1ca28:	f003 0303 	and.w	r3, r3, #3
   1ca2c:	2b02      	cmp	r3, #2
{
   1ca2e:	4690      	mov	r8, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   1ca30:	eb09 068a 	add.w	r6, r9, sl, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   1ca34:	d103      	bne.n	1ca3e <drop_item_locked+0x30>
		return item->skip.len;
   1ca36:	f859 502a 	ldr.w	r5, [r9, sl, lsl #2]
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
   1ca3a:	08ad      	lsrs	r5, r5, #2
   1ca3c:	d12e      	bne.n	1ca9c <drop_item_locked+0x8e>
   1ca3e:	4630      	mov	r0, r6
   1ca40:	69a3      	ldr	r3, [r4, #24]
   1ca42:	4798      	blx	r3
   1ca44:	4605      	mov	r5, r0
	if (skip_wlen) {
		allow_drop = true;
	} else if (allow_drop) {
   1ca46:	f1b8 0f00 	cmp.w	r8, #0
   1ca4a:	d038      	beq.n	1cabe <drop_item_locked+0xb0>
		if (item->hdr.busy) {
   1ca4c:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
   1ca50:	079b      	lsls	r3, r3, #30
   1ca52:	d531      	bpl.n	1cab8 <drop_item_locked+0xaa>
			/* item is currently processed and cannot be overwritten. */
			add_skip_item(buffer, free_wlen + 1);
   1ca54:	4620      	mov	r0, r4
   1ca56:	f10b 0101 	add.w	r1, fp, #1
   1ca5a:	f7ff ffb5 	bl	1c9c8 <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   1ca5e:	6861      	ldr	r1, [r4, #4]
   1ca60:	462a      	mov	r2, r5
   1ca62:	4620      	mov	r0, r4
   1ca64:	f7ff ffa2 	bl	1c9ac <idx_inc>
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   1ca68:	6821      	ldr	r1, [r4, #0]
   1ca6a:	462a      	mov	r2, r5
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   1ca6c:	6060      	str	r0, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   1ca6e:	4620      	mov	r0, r4
   1ca70:	f7ff ff9c 	bl	1c9ac <idx_inc>

			/* Get next itme followed the busy one. */
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   1ca74:	462a      	mov	r2, r5
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   1ca76:	6020      	str	r0, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   1ca78:	68e1      	ldr	r1, [r4, #12]
   1ca7a:	4620      	mov	r0, r4
   1ca7c:	f7ff ff96 	bl	1c9ac <idx_inc>

			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   1ca80:	69e3      	ldr	r3, [r4, #28]
	if (item->hdr.busy && !item->hdr.valid) {
   1ca82:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   1ca86:	eb03 0680 	add.w	r6, r3, r0, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   1ca8a:	f002 0203 	and.w	r2, r2, #3
   1ca8e:	2a02      	cmp	r2, #2
   1ca90:	d10e      	bne.n	1cab0 <drop_item_locked+0xa2>
		return item->skip.len;
   1ca92:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			skip_wlen = get_skip(item);
			if (skip_wlen) {
   1ca96:	089b      	lsrs	r3, r3, #2
   1ca98:	d00a      	beq.n	1cab0 <drop_item_locked+0xa2>
				rd_wlen += skip_wlen;
   1ca9a:	441d      	add	r5, r3
	} else {
		item = NULL;
	}

	if (allow_drop) {
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   1ca9c:	68e1      	ldr	r1, [r4, #12]
   1ca9e:	462a      	mov	r2, r5
   1caa0:	4620      	mov	r0, r4
   1caa2:	f7ff ff83 	bl	1c9ac <idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   1caa6:	e9c4 0002 	strd	r0, r0, [r4, #8]
	}

	return item;
}
   1caaa:	4630      	mov	r0, r6
   1caac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				rd_wlen += buffer->get_wlen(item);
   1cab0:	4630      	mov	r0, r6
   1cab2:	69a3      	ldr	r3, [r4, #24]
   1cab4:	4798      	blx	r3
   1cab6:	4405      	add	r5, r0
			*user_packet = true;
   1cab8:	2301      	movs	r3, #1
   1caba:	703b      	strb	r3, [r7, #0]
	if (allow_drop) {
   1cabc:	e7ee      	b.n	1ca9c <drop_item_locked+0x8e>
		item = NULL;
   1cabe:	4646      	mov	r6, r8
	return item;
   1cac0:	e7f3      	b.n	1caaa <drop_item_locked+0x9c>

0001cac2 <mpsc_pbuf_init>:
{
   1cac2:	b538      	push	{r3, r4, r5, lr}
   1cac4:	460d      	mov	r5, r1
   1cac6:	4604      	mov	r4, r0
   1cac8:	221c      	movs	r2, #28
   1caca:	2100      	movs	r1, #0
   1cacc:	f004 ffec 	bl	21aa8 <memset>
	buffer->max_usage = 0;
   1cad0:	2200      	movs	r2, #0
	buffer->get_wlen = cfg->get_wlen;
   1cad2:	68eb      	ldr	r3, [r5, #12]
   1cad4:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
   1cad6:	68ab      	ldr	r3, [r5, #8]
   1cad8:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
   1cada:	682b      	ldr	r3, [r5, #0]
   1cadc:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
   1cade:	686b      	ldr	r3, [r5, #4]
	buffer->max_usage = 0;
   1cae0:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->size = cfg->size;
   1cae2:	6223      	str	r3, [r4, #32]
	buffer->flags = cfg->flags;
   1cae4:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
   1cae6:	b123      	cbz	r3, 1caf2 <mpsc_pbuf_init+0x30>
   1cae8:	1e59      	subs	r1, r3, #1
   1caea:	4219      	tst	r1, r3
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
   1caec:	bf08      	it	eq
   1caee:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
   1caf2:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1caf4:	2201      	movs	r2, #1
   1caf6:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1cafa:	2100      	movs	r1, #0
}
   1cafc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1cb00:	f004 bb7f 	b.w	21202 <z_impl_k_sem_init>

0001cb04 <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
   1cb04:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1cb08:	4698      	mov	r8, r3
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
   1cb0a:	6a03      	ldr	r3, [r0, #32]
{
   1cb0c:	4604      	mov	r4, r0
	if (wlen > (buffer->size - 1)) {
   1cb0e:	3b01      	subs	r3, #1
   1cb10:	428b      	cmp	r3, r1
{
   1cb12:	460e      	mov	r6, r1
   1cb14:	4617      	mov	r7, r2
	if (wlen > (buffer->size - 1)) {
   1cb16:	d351      	bcc.n	1cbbc <mpsc_pbuf_alloc+0xb8>
	union mpsc_pbuf_generic *dropped_item = NULL;
   1cb18:	2500      	movs	r5, #0
	__asm__ volatile(
   1cb1a:	f04f 0320 	mov.w	r3, #32
   1cb1e:	f3ef 8911 	mrs	r9, BASEPRI
   1cb22:	f383 8812 	msr	BASEPRI_MAX, r3
   1cb26:	f3bf 8f6f 	isb	sy
		k_spinlock_key_t key;
		bool wrap;

		cont = false;
		key = k_spin_lock(&buffer->lock);
		wrap = free_space(buffer, &free_wlen);
   1cb2a:	4620      	mov	r0, r4
   1cb2c:	a901      	add	r1, sp, #4
   1cb2e:	f7ff ff1b 	bl	1c968 <free_space>

		if (free_wlen >= wlen) {
   1cb32:	f8dd a004 	ldr.w	sl, [sp, #4]
   1cb36:	45b2      	cmp	sl, r6
   1cb38:	d317      	bcc.n	1cb6a <mpsc_pbuf_alloc+0x66>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
   1cb3a:	6822      	ldr	r2, [r4, #0]
			item =
   1cb3c:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
			item->hdr.busy = 0;
			buffer->tmp_wr_idx = idx_inc(buffer,
   1cb3e:	4620      	mov	r0, r4
			item->hdr.valid = 0;
   1cb40:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
			item =
   1cb44:	eb03 0582 	add.w	r5, r3, r2, lsl #2
			item->hdr.valid = 0;
   1cb48:	f021 0103 	bic.w	r1, r1, #3
   1cb4c:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
   1cb50:	6821      	ldr	r1, [r4, #0]
   1cb52:	4632      	mov	r2, r6
   1cb54:	f7ff ff2a 	bl	1c9ac <idx_inc>
   1cb58:	6020      	str	r0, [r4, #0]
	__asm__ volatile(
   1cb5a:	f389 8811 	msr	BASEPRI, r9
   1cb5e:	f3bf 8f6f 	isb	sy
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
   1cb62:	4628      	mov	r0, r5
   1cb64:	b002      	add	sp, #8
   1cb66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (wrap) {
   1cb6a:	b150      	cbz	r0, 1cb82 <mpsc_pbuf_alloc+0x7e>
			add_skip_item(buffer, free_wlen);
   1cb6c:	4651      	mov	r1, sl
   1cb6e:	4620      	mov	r0, r4
   1cb70:	f7ff ff2a 	bl	1c9c8 <add_skip_item>
   1cb74:	f389 8811 	msr	BASEPRI, r9
   1cb78:	f3bf 8f6f 	isb	sy
		if (cont && dropped_item && valid_drop) {
   1cb7c:	2d00      	cmp	r5, #0
   1cb7e:	d0cb      	beq.n	1cb18 <mpsc_pbuf_alloc+0x14>
   1cb80:	e033      	b.n	1cbea <mpsc_pbuf_alloc+0xe6>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1cb82:	ea57 0308 	orrs.w	r3, r7, r8
   1cb86:	d020      	beq.n	1cbca <mpsc_pbuf_alloc+0xc6>
			   !k_is_in_isr()) {
   1cb88:	f004 fa46 	bl	21018 <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1cb8c:	b9e8      	cbnz	r0, 1cbca <mpsc_pbuf_alloc+0xc6>
   1cb8e:	f389 8811 	msr	BASEPRI, r9
   1cb92:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
   1cb96:	463a      	mov	r2, r7
   1cb98:	4643      	mov	r3, r8
   1cb9a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1cb9e:	f7fc ff71 	bl	19a84 <z_impl_k_sem_take>
	__asm__ volatile(
   1cba2:	f04f 0220 	mov.w	r2, #32
   1cba6:	f3ef 8311 	mrs	r3, BASEPRI
   1cbaa:	f382 8812 	msr	BASEPRI_MAX, r2
   1cbae:	f3bf 8f6f 	isb	sy
			if (err == 0) {
   1cbb2:	b128      	cbz	r0, 1cbc0 <mpsc_pbuf_alloc+0xbc>
	__asm__ volatile(
   1cbb4:	f383 8811 	msr	BASEPRI, r3
   1cbb8:	f3bf 8f6f 	isb	sy
		return NULL;
   1cbbc:	2500      	movs	r5, #0
   1cbbe:	e7d0      	b.n	1cb62 <mpsc_pbuf_alloc+0x5e>
   1cbc0:	f383 8811 	msr	BASEPRI, r3
   1cbc4:	f3bf 8f6f 	isb	sy
		if (cont && dropped_item && valid_drop) {
   1cbc8:	e7d8      	b.n	1cb7c <mpsc_pbuf_alloc+0x78>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
   1cbca:	6922      	ldr	r2, [r4, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
   1cbcc:	4651      	mov	r1, sl
   1cbce:	4620      	mov	r0, r4
   1cbd0:	f10d 0303 	add.w	r3, sp, #3
   1cbd4:	f3c2 0240 	ubfx	r2, r2, #1, #1
   1cbd8:	f7ff ff19 	bl	1ca0e <drop_item_locked>
   1cbdc:	4605      	mov	r5, r0
   1cbde:	f389 8811 	msr	BASEPRI, r9
   1cbe2:	f3bf 8f6f 	isb	sy
		if (cont && dropped_item && valid_drop) {
   1cbe6:	2800      	cmp	r0, #0
   1cbe8:	d0e8      	beq.n	1cbbc <mpsc_pbuf_alloc+0xb8>
   1cbea:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1cbee:	2b00      	cmp	r3, #0
   1cbf0:	d093      	beq.n	1cb1a <mpsc_pbuf_alloc+0x16>
			if (buffer->notify_drop) {
   1cbf2:	6963      	ldr	r3, [r4, #20]
   1cbf4:	2b00      	cmp	r3, #0
   1cbf6:	d08f      	beq.n	1cb18 <mpsc_pbuf_alloc+0x14>
				buffer->notify_drop(buffer, dropped_item);
   1cbf8:	4629      	mov	r1, r5
   1cbfa:	4620      	mov	r0, r4
   1cbfc:	4798      	blx	r3
   1cbfe:	e78b      	b.n	1cb18 <mpsc_pbuf_alloc+0x14>

0001cc00 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
   1cc00:	b570      	push	{r4, r5, r6, lr}
   1cc02:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   1cc04:	6983      	ldr	r3, [r0, #24]
   1cc06:	4608      	mov	r0, r1
{
   1cc08:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   1cc0a:	4798      	blx	r3
   1cc0c:	4602      	mov	r2, r0
	__asm__ volatile(
   1cc0e:	f04f 0320 	mov.w	r3, #32
   1cc12:	f3ef 8611 	mrs	r6, BASEPRI
   1cc16:	f383 8812 	msr	BASEPRI_MAX, r3
   1cc1a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
   1cc1e:	782b      	ldrb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   1cc20:	4620      	mov	r0, r4
	item->hdr.valid = 1;
   1cc22:	f043 0301 	orr.w	r3, r3, #1
   1cc26:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   1cc28:	6861      	ldr	r1, [r4, #4]
   1cc2a:	f7ff febf 	bl	1c9ac <idx_inc>
   1cc2e:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
   1cc30:	4620      	mov	r0, r4
   1cc32:	f7ff fedf 	bl	1c9f4 <max_utilization_update>
	__asm__ volatile(
   1cc36:	f386 8811 	msr	BASEPRI, r6
   1cc3a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
   1cc3e:	bd70      	pop	{r4, r5, r6, pc}

0001cc40 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
   1cc40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cc42:	4604      	mov	r4, r0
	__asm__ volatile(
   1cc44:	f04f 0320 	mov.w	r3, #32
   1cc48:	f3ef 8611 	mrs	r6, BASEPRI
   1cc4c:	f383 8812 	msr	BASEPRI_MAX, r3
   1cc50:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   1cc54:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1cc58:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
   1cc5a:	bf88      	it	hi
   1cc5c:	6a22      	ldrhi	r2, [r4, #32]

		cont = false;
		key = k_spin_lock(&buffer->lock);
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];
   1cc5e:	69e1      	ldr	r1, [r4, #28]
	*res = buffer->size - buffer->tmp_rd_idx;
   1cc60:	1ad2      	subs	r2, r2, r3

		if (!a || is_invalid(item)) {
   1cc62:	b132      	cbz	r2, 1cc72 <mpsc_pbuf_claim+0x32>
	return !item->hdr.valid && !item->hdr.busy;
   1cc64:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
		item = (union mpsc_pbuf_generic *)
   1cc68:	eb01 0783 	add.w	r7, r1, r3, lsl #2
		if (!a || is_invalid(item)) {
   1cc6c:	f012 0003 	ands.w	r0, r2, #3
   1cc70:	d105      	bne.n	1cc7e <mpsc_pbuf_claim+0x3e>
	__asm__ volatile(
   1cc72:	f386 8811 	msr	BASEPRI, r6
   1cc76:	f3bf 8f6f 	isb	sy
			item = NULL;
   1cc7a:	2700      	movs	r7, #0
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);

	return item;
   1cc7c:	e02e      	b.n	1ccdc <mpsc_pbuf_claim+0x9c>
	if (item->hdr.busy && !item->hdr.valid) {
   1cc7e:	2802      	cmp	r0, #2
   1cc80:	d103      	bne.n	1cc8a <mpsc_pbuf_claim+0x4a>
		return item->skip.len;
   1cc82:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
			if (skip || !is_valid(item)) {
   1cc86:	08ad      	lsrs	r5, r5, #2
   1cc88:	d105      	bne.n	1cc96 <mpsc_pbuf_claim+0x56>
   1cc8a:	07d0      	lsls	r0, r2, #31
   1cc8c:	d414      	bmi.n	1ccb8 <mpsc_pbuf_claim+0x78>
					skip ? skip : buffer->get_wlen(item);
   1cc8e:	4638      	mov	r0, r7
   1cc90:	69a3      	ldr	r3, [r4, #24]
   1cc92:	4798      	blx	r3
   1cc94:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
   1cc96:	68a1      	ldr	r1, [r4, #8]
   1cc98:	462a      	mov	r2, r5
   1cc9a:	4620      	mov	r0, r4
   1cc9c:	f7ff fe86 	bl	1c9ac <idx_inc>
					idx_inc(buffer, buffer->rd_idx, inc);
   1cca0:	68e1      	ldr	r1, [r4, #12]
				buffer->tmp_rd_idx =
   1cca2:	60a0      	str	r0, [r4, #8]
					idx_inc(buffer, buffer->rd_idx, inc);
   1cca4:	462a      	mov	r2, r5
   1cca6:	4620      	mov	r0, r4
   1cca8:	f7ff fe80 	bl	1c9ac <idx_inc>
				buffer->rd_idx =
   1ccac:	60e0      	str	r0, [r4, #12]
   1ccae:	f386 8811 	msr	BASEPRI, r6
   1ccb2:	f3bf 8f6f 	isb	sy
	} while (cont);
   1ccb6:	e7c5      	b.n	1cc44 <mpsc_pbuf_claim+0x4>
				item->hdr.busy = 1;
   1ccb8:	f042 0202 	orr.w	r2, r2, #2
   1ccbc:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
					idx_inc(buffer, buffer->tmp_rd_idx,
   1ccc0:	69a3      	ldr	r3, [r4, #24]
   1ccc2:	4638      	mov	r0, r7
   1ccc4:	68a5      	ldr	r5, [r4, #8]
   1ccc6:	4798      	blx	r3
   1ccc8:	4629      	mov	r1, r5
   1ccca:	4602      	mov	r2, r0
   1cccc:	4620      	mov	r0, r4
   1ccce:	f7ff fe6d 	bl	1c9ac <idx_inc>
				buffer->tmp_rd_idx =
   1ccd2:	60a0      	str	r0, [r4, #8]
   1ccd4:	f386 8811 	msr	BASEPRI, r6
   1ccd8:	f3bf 8f6f 	isb	sy
}
   1ccdc:	4638      	mov	r0, r7
   1ccde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001cce0 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
   1cce0:	b570      	push	{r4, r5, r6, lr}
   1cce2:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   1cce4:	6983      	ldr	r3, [r0, #24]
   1cce6:	4608      	mov	r0, r1
{
   1cce8:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   1ccea:	4798      	blx	r3
   1ccec:	4602      	mov	r2, r0
	__asm__ volatile(
   1ccee:	f04f 0320 	mov.w	r3, #32
   1ccf2:	f3ef 8611 	mrs	r6, BASEPRI
   1ccf6:	f383 8812 	msr	BASEPRI_MAX, r3
   1ccfa:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
   1ccfe:	782b      	ldrb	r3, [r5, #0]
   1cd00:	f36f 0300 	bfc	r3, #0, #1
   1cd04:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   1cd06:	6923      	ldr	r3, [r4, #16]
   1cd08:	079b      	lsls	r3, r3, #30
   1cd0a:	d505      	bpl.n	1cd18 <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
   1cd0c:	68e1      	ldr	r1, [r4, #12]
   1cd0e:	69e3      	ldr	r3, [r4, #28]
   1cd10:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   1cd14:	429d      	cmp	r5, r3
   1cd16:	d112      	bne.n	1cd3e <mpsc_pbuf_free+0x5e>
		witem->hdr.busy = 0;
   1cd18:	782b      	ldrb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   1cd1a:	4620      	mov	r0, r4
		witem->hdr.busy = 0;
   1cd1c:	f36f 0341 	bfc	r3, #1, #1
   1cd20:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   1cd22:	68e1      	ldr	r1, [r4, #12]
   1cd24:	f7ff fe42 	bl	1c9ac <idx_inc>
   1cd28:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1cd2a:	f386 8811 	msr	BASEPRI, r6
   1cd2e:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   1cd32:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
   1cd36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1cd3a:	f7fc be7d 	b.w	19a38 <z_impl_k_sem_give>
		witem->skip.len = wlen;
   1cd3e:	682b      	ldr	r3, [r5, #0]
   1cd40:	f360 039f 	bfi	r3, r0, #2, #30
   1cd44:	602b      	str	r3, [r5, #0]
   1cd46:	e7f0      	b.n	1cd2a <mpsc_pbuf_free+0x4a>

0001cd48 <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   1cd48:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   1cd4c:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
   1cd4e:	bf88      	it	hi
   1cd50:	6a02      	ldrhi	r2, [r0, #32]
   1cd52:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   1cd54:	1e18      	subs	r0, r3, #0
   1cd56:	bf18      	it	ne
   1cd58:	2001      	movne	r0, #1
   1cd5a:	4770      	bx	lr

0001cd5c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1cd5c:	4770      	bx	lr

0001cd5e <nordicsemi_nrf53_init>:
{
   1cd5e:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1cd60:	f04f 0320 	mov.w	r3, #32
   1cd64:	f3ef 8511 	mrs	r5, BASEPRI
   1cd68:	f383 8812 	msr	BASEPRI_MAX, r3
   1cd6c:	f3bf 8f6f 	isb	sy
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
   1cd70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
   1cd74:	2401      	movs	r4, #1
   1cd76:	2202      	movs	r2, #2
		soc_secure_gpio_pin_mcu_select(forwarded_psels[i], NRF_GPIO_PIN_SEL_NETWORK);
   1cd78:	4621      	mov	r1, r4
   1cd7a:	f8c3 26d0 	str.w	r2, [r3, #1744]	; 0x6d0
   1cd7e:	2021      	movs	r0, #33	; 0x21
   1cd80:	f8c3 4704 	str.w	r4, [r3, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
   1cd84:	f8c3 4904 	str.w	r4, [r3, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
   1cd88:	f8c3 4b00 	str.w	r4, [r3, #2816]	; 0xb00
   1cd8c:	f000 f824 	bl	1cdd8 <soc_secure_gpio_pin_mcu_select>
   1cd90:	4621      	mov	r1, r4
   1cd92:	2020      	movs	r0, #32
   1cd94:	f000 f820 	bl	1cdd8 <soc_secure_gpio_pin_mcu_select>
   1cd98:	4621      	mov	r1, r4
   1cd9a:	200b      	movs	r0, #11
   1cd9c:	f000 f81c 	bl	1cdd8 <soc_secure_gpio_pin_mcu_select>
   1cda0:	4621      	mov	r1, r4
   1cda2:	200a      	movs	r0, #10
   1cda4:	f000 f818 	bl	1cdd8 <soc_secure_gpio_pin_mcu_select>
	__asm__ volatile(
   1cda8:	f385 8811 	msr	BASEPRI, r5
   1cdac:	f3bf 8f6f 	isb	sy
}
   1cdb0:	2000      	movs	r0, #0
   1cdb2:	bd38      	pop	{r3, r4, r5, pc}

0001cdb4 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   1cdb4:	2806      	cmp	r0, #6
   1cdb6:	d108      	bne.n	1cdca <pm_state_set+0x16>
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   1cdb8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   1cdbc:	2201      	movs	r2, #1
   1cdbe:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   1cdc2:	f3bf 8f4f 	dsb	sy
        __WFE();
   1cdc6:	bf20      	wfe
    while (true)
   1cdc8:	e7fd      	b.n	1cdc6 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   1cdca:	4770      	bx	lr

0001cdcc <pm_state_exit_post_ops>:
   1cdcc:	2300      	movs	r3, #0
   1cdce:	f383 8811 	msr	BASEPRI, r3
   1cdd2:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   1cdd6:	4770      	bx	lr

0001cdd8 <soc_secure_gpio_pin_mcu_select>:
#include "tfm_platform_api.h"
#include "tfm_ioctl_api.h"

#if NRF_GPIO_HAS_SEL
void soc_secure_gpio_pin_mcu_select(uint32_t pin_number, nrf_gpio_pin_sel_t mcu)
{
   1cdd8:	b507      	push	{r0, r1, r2, lr}
	uint32_t result;
	enum tfm_platform_err_t err;

	err = tfm_platform_gpio_pin_mcu_select(pin_number, mcu, &result);
   1cdda:	aa01      	add	r2, sp, #4
   1cddc:	f003 faa4 	bl	20328 <tfm_platform_gpio_pin_mcu_select>
	__ASSERT(err == TFM_PLATFORM_ERR_SUCCESS, "TFM platform error (%d)", err);
	__ASSERT(result == 0, "GPIO service error (%d)", result);
}
   1cde0:	b003      	add	sp, #12
   1cde2:	f85d fb04 	ldr.w	pc, [sp], #4

0001cde6 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
   1cde6:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   1cde8:	075b      	lsls	r3, r3, #29
   1cdea:	d40b      	bmi.n	1ce04 <log_msg_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   1cdec:	6803      	ldr	r3, [r0, #0]
   1cdee:	8842      	ldrh	r2, [r0, #2]
   1cdf0:	f3c3 2349 	ubfx	r3, r3, #9, #10
   1cdf4:	f3c2 02cb 	ubfx	r2, r2, #3, #12
   1cdf8:	1898      	adds	r0, r3, r2
   1cdfa:	3017      	adds	r0, #23
   1cdfc:	f020 0007 	bic.w	r0, r0, #7
   1ce00:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
   1ce02:	4770      	bx	lr
	return 0;
   1ce04:	2000      	movs	r0, #0
}
   1ce06:	4770      	bx	lr

0001ce08 <dummy_timestamp>:
}
   1ce08:	2000      	movs	r0, #0
   1ce0a:	4770      	bx	lr

0001ce0c <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   1ce0c:	f003 ba2e 	b.w	2026c <sys_clock_cycle_get_32>

0001ce10 <atomic_inc>:
{
   1ce10:	4603      	mov	r3, r0
}
   1ce12:	e8d3 0fef 	ldaex	r0, [r3]
   1ce16:	1c42      	adds	r2, r0, #1
   1ce18:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1ce1c:	2900      	cmp	r1, #0
   1ce1e:	d1f8      	bne.n	1ce12 <atomic_inc+0x2>
   1ce20:	4770      	bx	lr

0001ce22 <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
   1ce22:	2001      	movs	r0, #1
   1ce24:	f7ef b892 	b.w	bf4c <z_log_dropped>

0001ce28 <z_log_get_tag>:
}
   1ce28:	2000      	movs	r0, #0
   1ce2a:	4770      	bx	lr

0001ce2c <z_cbprintf_cpy>:
{
   1ce2c:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
   1ce2e:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
   1ce32:	1b9b      	subs	r3, r3, r6
   1ce34:	428b      	cmp	r3, r1
{
   1ce36:	460c      	mov	r4, r1
   1ce38:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
   1ce3a:	d30a      	bcc.n	1ce52 <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
   1ce3c:	6813      	ldr	r3, [r2, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1ce3e:	460a      	mov	r2, r1
   1ce40:	4601      	mov	r1, r0
   1ce42:	1998      	adds	r0, r3, r6
   1ce44:	f004 fe23 	bl	21a8e <memcpy>
	return len;
   1ce48:	4620      	mov	r0, r4
	desc->off += len;
   1ce4a:	68ab      	ldr	r3, [r5, #8]
   1ce4c:	4423      	add	r3, r4
   1ce4e:	60ab      	str	r3, [r5, #8]
}
   1ce50:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
   1ce52:	f06f 001b 	mvn.w	r0, #27
   1ce56:	e7fb      	b.n	1ce50 <z_cbprintf_cpy+0x24>

0001ce58 <z_log_msg_finalize>:
{
   1ce58:	b570      	push	{r4, r5, r6, lr}
   1ce5a:	460e      	mov	r6, r1
   1ce5c:	4615      	mov	r5, r2
   1ce5e:	4619      	mov	r1, r3
	if (!msg) {
   1ce60:	4604      	mov	r4, r0
   1ce62:	f3c2 42cb 	ubfx	r2, r2, #19, #12
   1ce66:	b918      	cbnz	r0, 1ce70 <z_log_msg_finalize+0x18>
}
   1ce68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   1ce6c:	f7ef b86e 	b.w	bf4c <z_log_dropped>
	if (data) {
   1ce70:	b12b      	cbz	r3, 1ce7e <z_log_msg_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
   1ce72:	3010      	adds	r0, #16
   1ce74:	f3c5 2349 	ubfx	r3, r5, #9, #10
   1ce78:	4418      	add	r0, r3
   1ce7a:	f004 fe08 	bl	21a8e <memcpy>
	msg->hdr.source = source;
   1ce7e:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
   1ce82:	4620      	mov	r0, r4
}
   1ce84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
   1ce88:	f7ef b9e0 	b.w	c24c <z_log_msg_commit>

0001ce8c <buffer_write>:
{
   1ce8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ce8e:	4606      	mov	r6, r0
   1ce90:	460d      	mov	r5, r1
   1ce92:	4614      	mov	r4, r2
   1ce94:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   1ce96:	4621      	mov	r1, r4
   1ce98:	4628      	mov	r0, r5
   1ce9a:	463a      	mov	r2, r7
   1ce9c:	47b0      	blx	r6
	} while (len != 0);
   1ce9e:	1a24      	subs	r4, r4, r0
		buf += processed;
   1cea0:	4405      	add	r5, r0
	} while (len != 0);
   1cea2:	d1f8      	bne.n	1ce96 <buffer_write+0xa>
}
   1cea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001cea6 <cbvprintf>:
{
   1cea6:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   1cea8:	2400      	movs	r4, #0
   1ceaa:	9400      	str	r4, [sp, #0]
   1ceac:	f7ee fb02 	bl	b4b4 <z_cbvprintf_impl>
}
   1ceb0:	b002      	add	sp, #8
   1ceb2:	bd10      	pop	{r4, pc}

0001ceb4 <log_output_flush>:
{
   1ceb4:	b510      	push	{r4, lr}
		     output->control_block->offset,
   1ceb6:	6842      	ldr	r2, [r0, #4]
{
   1ceb8:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   1ceba:	e9d2 2300 	ldrd	r2, r3, [r2]
   1cebe:	6881      	ldr	r1, [r0, #8]
   1cec0:	6800      	ldr	r0, [r0, #0]
   1cec2:	f7ff ffe3 	bl	1ce8c <buffer_write>
	output->control_block->offset = 0;
   1cec6:	2200      	movs	r2, #0
   1cec8:	6863      	ldr	r3, [r4, #4]
   1ceca:	601a      	str	r2, [r3, #0]
}
   1cecc:	bd10      	pop	{r4, pc}

0001cece <out_func>:
{
   1cece:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   1ced0:	684b      	ldr	r3, [r1, #4]
{
   1ced2:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
   1ced4:	681a      	ldr	r2, [r3, #0]
   1ced6:	68cb      	ldr	r3, [r1, #12]
{
   1ced8:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   1ceda:	429a      	cmp	r2, r3
   1cedc:	d102      	bne.n	1cee4 <out_func+0x16>
		log_output_flush(out_ctx);
   1cede:	4608      	mov	r0, r1
   1cee0:	f7ff ffe8 	bl	1ceb4 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1cee4:	6863      	ldr	r3, [r4, #4]
   1cee6:	e8d3 2fef 	ldaex	r2, [r3]
   1ceea:	1c51      	adds	r1, r2, #1
   1ceec:	e8c3 1fe0 	stlex	r0, r1, [r3]
   1cef0:	2800      	cmp	r0, #0
   1cef2:	d1f8      	bne.n	1cee6 <out_func+0x18>
	out_ctx->buf[idx] = (uint8_t)c;
   1cef4:	68a3      	ldr	r3, [r4, #8]
}
   1cef6:	2000      	movs	r0, #0
	out_ctx->buf[idx] = (uint8_t)c;
   1cef8:	549d      	strb	r5, [r3, r2]
}
   1cefa:	bd38      	pop	{r3, r4, r5, pc}

0001cefc <cr_out_func>:
	if (c == '\n') {
   1cefc:	280a      	cmp	r0, #10
{
   1cefe:	b538      	push	{r3, r4, r5, lr}
   1cf00:	4604      	mov	r4, r0
   1cf02:	460d      	mov	r5, r1
	if (c == '\n') {
   1cf04:	d102      	bne.n	1cf0c <cr_out_func+0x10>
		out_func((int)'\r', ctx);
   1cf06:	200d      	movs	r0, #13
   1cf08:	f7ff ffe1 	bl	1cece <out_func>
	out_func(c, ctx);
   1cf0c:	4629      	mov	r1, r5
   1cf0e:	4620      	mov	r0, r4
   1cf10:	f7ff ffdd 	bl	1cece <out_func>
}
   1cf14:	2000      	movs	r0, #0
   1cf16:	bd38      	pop	{r3, r4, r5, pc}

0001cf18 <log_backend_uart_init>:
}
   1cf18:	4770      	bx	lr

0001cf1a <read_str>:
#endif /* CONFIG_BT_DIS_SETTINGS */

static ssize_t read_str(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  uint16_t len, uint16_t offset)
{
   1cf1a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   1cf1e:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   1cf22:	4605      	mov	r5, r0
				 strlen(attr->user_data));
   1cf24:	4640      	mov	r0, r8
{
   1cf26:	461f      	mov	r7, r3
   1cf28:	460c      	mov	r4, r1
   1cf2a:	4616      	mov	r6, r2
				 strlen(attr->user_data));
   1cf2c:	f7ec fa0e 	bl	934c <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   1cf30:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1cf34:	b280      	uxth	r0, r0
   1cf36:	e9cd 8001 	strd	r8, r0, [sp, #4]
   1cf3a:	9300      	str	r3, [sp, #0]
   1cf3c:	4632      	mov	r2, r6
   1cf3e:	463b      	mov	r3, r7
   1cf40:	4621      	mov	r1, r4
   1cf42:	4628      	mov	r0, r5
   1cf44:	f002 f9e7 	bl	1f316 <bt_gatt_attr_read>
}
   1cf48:	b004      	add	sp, #16
   1cf4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001cf4e <bas_init>:
}
   1cf4e:	2000      	movs	r0, #0
   1cf50:	4770      	bx	lr

0001cf52 <z_log_msg_static_create.constprop.0>:
   1cf52:	2300      	movs	r3, #0
   1cf54:	f7ef b9ae 	b.w	c2b4 <z_impl_z_log_msg_static_create>

0001cf58 <get_tx_buffer_size>:
	return data->tx_buffer_size;
   1cf58:	6903      	ldr	r3, [r0, #16]
}
   1cf5a:	f8d3 0358 	ldr.w	r0, [r3, #856]	; 0x358
   1cf5e:	4770      	bx	lr

0001cf60 <drop_tx_buffer>:
}
   1cf60:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1cf64:	4770      	bx	lr

0001cf66 <release_rx_buffer>:
{
   1cf66:	4608      	mov	r0, r1
   1cf68:	b508      	push	{r3, lr}
   1cf6a:	4611      	mov	r1, r2
	if (!rpmsg_ept) {
   1cf6c:	b118      	cbz	r0, 1cf76 <release_rx_buffer+0x10>
	rpmsg_release_rx_buffer(&rpmsg_ept->ep, data);
   1cf6e:	f003 fd59 	bl	20a24 <rpmsg_release_rx_buffer>
	return 0;
   1cf72:	2000      	movs	r0, #0
}
   1cf74:	bd08      	pop	{r3, pc}
		return -ENOENT;
   1cf76:	f06f 0001 	mvn.w	r0, #1
   1cf7a:	e7fb      	b.n	1cf74 <release_rx_buffer+0xe>

0001cf7c <hold_rx_buffer>:
{
   1cf7c:	4608      	mov	r0, r1
   1cf7e:	b508      	push	{r3, lr}
   1cf80:	4611      	mov	r1, r2
	if (!rpmsg_ept) {
   1cf82:	b118      	cbz	r0, 1cf8c <hold_rx_buffer+0x10>
	rpmsg_hold_rx_buffer(&rpmsg_ept->ep, data);
   1cf84:	f003 fd46 	bl	20a14 <rpmsg_hold_rx_buffer>
	return 0;
   1cf88:	2000      	movs	r0, #0
}
   1cf8a:	bd08      	pop	{r3, pc}
		return -ENOENT;
   1cf8c:	f06f 0001 	mvn.w	r0, #1
   1cf90:	e7fb      	b.n	1cf8a <hold_rx_buffer+0xe>

0001cf92 <send_nocopy>:
{
   1cf92:	b513      	push	{r0, r1, r4, lr}
   1cf94:	4604      	mov	r4, r0
   1cf96:	4608      	mov	r0, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1cf98:	6921      	ldr	r1, [r4, #16]
   1cf9a:	f501 7155 	add.w	r1, r1, #852	; 0x354
   1cf9e:	e8d1 1faf 	lda	r1, [r1]
	if (atomic_get(&data->state) != STATE_INITED) {
   1cfa2:	2902      	cmp	r1, #2
   1cfa4:	d109      	bne.n	1cfba <send_nocopy+0x28>
	if (len == 0) {
   1cfa6:	b15b      	cbz	r3, 1cfc0 <send_nocopy+0x2e>
	if (!rpmsg_ept) {
   1cfa8:	b168      	cbz	r0, 1cfc6 <send_nocopy+0x34>
 * @see rpmsg_sendto_nocopy
 */
static inline int rpmsg_send_nocopy(struct rpmsg_endpoint *ept,
				    const void *data, int len)
{
	return rpmsg_send_offchannel_nocopy(ept, ept->addr,
   1cfaa:	9300      	str	r3, [sp, #0]
   1cfac:	4613      	mov	r3, r2
   1cfae:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
   1cfb2:	f7fb ff97 	bl	18ee4 <rpmsg_send_offchannel_nocopy>
}
   1cfb6:	b002      	add	sp, #8
   1cfb8:	bd10      	pop	{r4, pc}
		return -EBUSY;
   1cfba:	f06f 000f 	mvn.w	r0, #15
   1cfbe:	e7fa      	b.n	1cfb6 <send_nocopy+0x24>
		return -EBADMSG;
   1cfc0:	f06f 004c 	mvn.w	r0, #76	; 0x4c
   1cfc4:	e7f7      	b.n	1cfb6 <send_nocopy+0x24>
		return -ENOENT;
   1cfc6:	f06f 0001 	mvn.w	r0, #1
   1cfca:	e7f4      	b.n	1cfb6 <send_nocopy+0x24>

0001cfcc <get_tx_buffer>:
{
   1cfcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1cfd0:	461c      	mov	r4, r3
   1cfd2:	e9dd 5308 	ldrd	r5, r3, [sp, #32]
   1cfd6:	4616      	mov	r6, r2
   1cfd8:	4698      	mov	r8, r3
	if (!rpmsg_ept) {
   1cfda:	460f      	mov	r7, r1
	struct backend_data_t *data = instance->data;
   1cfdc:	6900      	ldr	r0, [r0, #16]
	if (!rpmsg_ept) {
   1cfde:	b339      	cbz	r1, 1d030 <get_tx_buffer+0x64>
	if (!r_data || !size) {
   1cfe0:	b34a      	cbz	r2, 1d036 <get_tx_buffer+0x6a>
   1cfe2:	b344      	cbz	r4, 1d036 <get_tx_buffer+0x6a>
	if (!K_TIMEOUT_EQ(wait, K_FOREVER) && !K_TIMEOUT_EQ(wait, K_NO_WAIT)) {
   1cfe4:	1c6a      	adds	r2, r5, #1
   1cfe6:	f143 0300 	adc.w	r3, r3, #0
   1cfea:	2a02      	cmp	r2, #2
   1cfec:	f173 0300 	sbcs.w	r3, r3, #0
   1cff0:	d224      	bcs.n	1d03c <get_tx_buffer+0x70>
	if ((*size) && (*size > data->tx_buffer_size)) {
   1cff2:	6822      	ldr	r2, [r4, #0]
   1cff4:	b142      	cbz	r2, 1d008 <get_tx_buffer+0x3c>
   1cff6:	f8d0 3358 	ldr.w	r3, [r0, #856]	; 0x358
   1cffa:	429a      	cmp	r2, r3
   1cffc:	d904      	bls.n	1d008 <get_tx_buffer+0x3c>
		return -ENOMEM;
   1cffe:	f06f 000b 	mvn.w	r0, #11
		*size = data->tx_buffer_size;
   1d002:	6023      	str	r3, [r4, #0]
}
   1d004:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		payload = rpmsg_get_tx_payload_buffer(&rpmsg_ept->ep, size,
   1d008:	ea05 0908 	and.w	r9, r5, r8
   1d00c:	f109 0301 	add.w	r3, r9, #1
   1d010:	425a      	negs	r2, r3
   1d012:	415a      	adcs	r2, r3
   1d014:	4621      	mov	r1, r4
   1d016:	4638      	mov	r0, r7
   1d018:	f003 fd0c 	bl	20a34 <rpmsg_get_tx_payload_buffer>
	} while ((!payload) && K_TIMEOUT_EQ(wait, K_FOREVER));
   1d01c:	b988      	cbnz	r0, 1d042 <get_tx_buffer+0x76>
   1d01e:	f1b8 3fff 	cmp.w	r8, #4294967295
   1d022:	bf08      	it	eq
   1d024:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   1d028:	d0f0      	beq.n	1d00c <get_tx_buffer+0x40>
		return -ENOBUFS;
   1d02a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1d02e:	e7e9      	b.n	1d004 <get_tx_buffer+0x38>
		return -ENOENT;
   1d030:	f06f 0001 	mvn.w	r0, #1
   1d034:	e7e6      	b.n	1d004 <get_tx_buffer+0x38>
		return -EINVAL;
   1d036:	f06f 0015 	mvn.w	r0, #21
   1d03a:	e7e3      	b.n	1d004 <get_tx_buffer+0x38>
		return -ENOTSUP;
   1d03c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1d040:	e7e0      	b.n	1d004 <get_tx_buffer+0x38>
	(*r_data) = payload;
   1d042:	6030      	str	r0, [r6, #0]
	return 0;
   1d044:	2000      	movs	r0, #0
   1d046:	e7dd      	b.n	1d004 <get_tx_buffer+0x38>

0001d048 <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   1d048:	f003 bd39 	b.w	20abe <rpmsg_destroy_ept>

0001d04c <get_ept_slot_with_name>:
{
   1d04c:	b538      	push	{r3, r4, r5, lr}
   1d04e:	460d      	mov	r5, r1
   1d050:	4604      	mov	r4, r0
		if (strcmp(name, rpmsg_ept->name) == 0) {
   1d052:	f100 0140 	add.w	r1, r0, #64	; 0x40
   1d056:	4628      	mov	r0, r5
   1d058:	f7ec f96e 	bl	9338 <strcmp>
   1d05c:	b130      	cbz	r0, 1d06c <get_ept_slot_with_name+0x20>
   1d05e:	4628      	mov	r0, r5
   1d060:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   1d064:	f7ec f968 	bl	9338 <strcmp>
   1d068:	b920      	cbnz	r0, 1d074 <get_ept_slot_with_name+0x28>
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
   1d06a:	2001      	movs	r0, #1
			return &rpmsg_inst->endpoint[i];
   1d06c:	2370      	movs	r3, #112	; 0x70
   1d06e:	fb03 4000 	mla	r0, r3, r0, r4
}
   1d072:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
   1d074:	2000      	movs	r0, #0
   1d076:	e7fc      	b.n	1d072 <get_ept_slot_with_name+0x26>

0001d078 <mbox_callback>:
	k_work_submit_to_queue(&data->mbox_wq, &data->mbox_work);
   1d078:	f502 7126 	add.w	r1, r2, #664	; 0x298
   1d07c:	f502 702a 	add.w	r0, r2, #680	; 0x2a8
   1d080:	f004 b96e 	b.w	21360 <k_work_submit_to_queue>

0001d084 <mbox_callback_process>:
	vq_id = (data->role == ROLE_HOST) ? VIRTQUEUE_ID_HOST : VIRTQUEUE_ID_REMOTE;
   1d084:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
	virtqueue_notification(data->vr.vq[vq_id]);
   1d088:	f5a0 7026 	sub.w	r0, r0, #664	; 0x298
	vq_id = (data->role == ROLE_HOST) ? VIRTQUEUE_ID_HOST : VIRTQUEUE_ID_REMOTE;
   1d08c:	3b00      	subs	r3, #0
   1d08e:	bf18      	it	ne
   1d090:	2301      	movne	r3, #1
	virtqueue_notification(data->vr.vq[vq_id]);
   1d092:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1d096:	f8d0 0284 	ldr.w	r0, [r0, #644]	; 0x284
   1d09a:	f003 bc6d 	b.w	20978 <virtqueue_notification>

0001d09e <ept_cb>:
{
   1d09e:	b510      	push	{r4, lr}
   1d0a0:	4608      	mov	r0, r1
   1d0a2:	9b02      	ldr	r3, [sp, #8]
	if (len == 0) {
   1d0a4:	4611      	mov	r1, r2
   1d0a6:	b952      	cbnz	r2, 1d0be <ept_cb+0x20>
		if (!ept->bound) {
   1d0a8:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
   1d0ac:	b92a      	cbnz	r2, 1d0ba <ept_cb+0x1c>
			ept->bound = true;
   1d0ae:	2201      	movs	r2, #1
			bound_cb(ept);
   1d0b0:	4618      	mov	r0, r3
			ept->bound = true;
   1d0b2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			bound_cb(ept);
   1d0b6:	f7ef fd05 	bl	cac4 <bound_cb>
}
   1d0ba:	2000      	movs	r0, #0
   1d0bc:	bd10      	pop	{r4, pc}
	if (ept->cb->received) {
   1d0be:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   1d0c0:	6854      	ldr	r4, [r2, #4]
   1d0c2:	2c00      	cmp	r4, #0
   1d0c4:	d0f9      	beq.n	1d0ba <ept_cb+0x1c>
		ept->cb->received(data, len, ept->priv);
   1d0c6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   1d0c8:	47a0      	blx	r4
   1d0ca:	e7f6      	b.n	1d0ba <ept_cb+0x1c>

0001d0cc <virtio_notify_cb>:
	if (conf->mbox_tx.dev) {
   1d0cc:	68cb      	ldr	r3, [r1, #12]
   1d0ce:	b133      	cbz	r3, 1d0de <virtio_notify_cb+0x12>
		(const struct mbox_driver_api *)channel->dev->api;
   1d0d0:	68c8      	ldr	r0, [r1, #12]
	if (api->send == NULL) {
   1d0d2:	6883      	ldr	r3, [r0, #8]
   1d0d4:	681b      	ldr	r3, [r3, #0]
   1d0d6:	b113      	cbz	r3, 1d0de <virtio_notify_cb+0x12>
	return api->send(channel->dev, channel->id, msg);
   1d0d8:	2200      	movs	r2, #0
   1d0da:	6909      	ldr	r1, [r1, #16]
   1d0dc:	4718      	bx	r3
}
   1d0de:	4770      	bx	lr

0001d0e0 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   1d0e0:	f7fc bc3a 	b.w	19958 <z_impl_k_mutex_unlock>

0001d0e4 <atomic_set.isra.0>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1d0e4:	e8d0 3fef 	ldaex	r3, [r0]
   1d0e8:	e8c0 1fe2 	stlex	r2, r1, [r0]
   1d0ec:	2a00      	cmp	r2, #0
   1d0ee:	d1f9      	bne.n	1d0e4 <atomic_set.isra.0>
}
   1d0f0:	4770      	bx	lr

0001d0f2 <backend_init>:
{
   1d0f2:	b510      	push	{r4, lr}
	data->role = conf->role;
   1d0f4:	6843      	ldr	r3, [r0, #4]
	struct backend_data_t *data = instance->data;
   1d0f6:	6904      	ldr	r4, [r0, #16]
	data->role = conf->role;
   1d0f8:	681b      	ldr	r3, [r3, #0]
   1d0fa:	f8c4 3350 	str.w	r3, [r4, #848]	; 0x350
	return z_impl_k_mutex_init(mutex);
   1d0fe:	f504 70ce 	add.w	r0, r4, #412	; 0x19c
   1d102:	f003 ffa5 	bl	21050 <z_impl_k_mutex_init>
	atomic_set(&data->state, STATE_READY);
   1d106:	2100      	movs	r1, #0
   1d108:	f504 7055 	add.w	r0, r4, #852	; 0x354
   1d10c:	f7ff ffea 	bl	1d0e4 <atomic_set.isra.0>
}
   1d110:	4608      	mov	r0, r1
   1d112:	bd10      	pop	{r4, pc}

0001d114 <ns_bind_cb>:
{
   1d114:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1d118:	4617      	mov	r7, r2
	if (name == NULL || name[0] == '\0') {
   1d11a:	460d      	mov	r5, r1
   1d11c:	b379      	cbz	r1, 1d17e <ns_bind_cb+0x6a>
   1d11e:	780b      	ldrb	r3, [r1, #0]
   1d120:	b36b      	cbz	r3, 1d17e <ns_bind_cb+0x6a>
	rpmsg_inst = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);
   1d122:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
   1d126:	f5a4 78c4 	sub.w	r8, r4, #392	; 0x188
	k_mutex_lock(&rpmsg_inst->mtx, K_FOREVER);
   1d12a:	3414      	adds	r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   1d12c:	f04f 32ff 	mov.w	r2, #4294967295
   1d130:	f04f 33ff 	mov.w	r3, #4294967295
   1d134:	4620      	mov	r0, r4
   1d136:	f7fc fb95 	bl	19864 <z_impl_k_mutex_lock>
	ept_cached = get_ept(rpmsg_inst, &rpmsg_ept, name);
   1d13a:	462a      	mov	r2, r5
   1d13c:	4640      	mov	r0, r8
   1d13e:	a901      	add	r1, sp, #4
   1d140:	f7ef fd00 	bl	cb44 <get_ept>
	if (rpmsg_ept == NULL) {
   1d144:	9e01      	ldr	r6, [sp, #4]
   1d146:	b92e      	cbnz	r6, 1d154 <ns_bind_cb+0x40>
		k_mutex_unlock(&rpmsg_inst->mtx);
   1d148:	4620      	mov	r0, r4
}
   1d14a:	b002      	add	sp, #8
   1d14c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_mutex_unlock(&rpmsg_inst->mtx);
   1d150:	f7ff bfc6 	b.w	1d0e0 <k_mutex_unlock.isra.0>
	if (ept_cached) {
   1d154:	b158      	cbz	r0, 1d16e <ns_bind_cb+0x5a>
		k_mutex_unlock(&rpmsg_inst->mtx);
   1d156:	4620      	mov	r0, r4
   1d158:	f7ff ffc2 	bl	1d0e0 <k_mutex_unlock.isra.0>
		advertise_ept(rpmsg_inst, rpmsg_ept, name, dest);
   1d15c:	463b      	mov	r3, r7
   1d15e:	462a      	mov	r2, r5
   1d160:	4631      	mov	r1, r6
   1d162:	4640      	mov	r0, r8
}
   1d164:	b002      	add	sp, #8
   1d166:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		advertise_ept(rpmsg_inst, rpmsg_ept, name, dest);
   1d16a:	f7ef bcc9 	b.w	cb00 <advertise_ept>
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   1d16e:	2220      	movs	r2, #32
   1d170:	4629      	mov	r1, r5
   1d172:	f106 0040 	add.w	r0, r6, #64	; 0x40
   1d176:	f004 fdd9 	bl	21d2c <strncpy>
		rpmsg_ept->dest = dest;
   1d17a:	6637      	str	r7, [r6, #96]	; 0x60
   1d17c:	e7e4      	b.n	1d148 <ns_bind_cb+0x34>
}
   1d17e:	b002      	add	sp, #8
   1d180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001d184 <deregister_ept>:
{
   1d184:	b510      	push	{r4, lr}
   1d186:	460c      	mov	r4, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d188:	6903      	ldr	r3, [r0, #16]
   1d18a:	f503 7355 	add.w	r3, r3, #852	; 0x354
   1d18e:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&data->state) != STATE_INITED) {
   1d192:	2b02      	cmp	r3, #2
   1d194:	d10a      	bne.n	1d1ac <deregister_ept+0x28>
	if (!rpmsg_ept) {
   1d196:	b161      	cbz	r1, 1d1b2 <deregister_ept+0x2e>
	rpmsg_destroy_ept(&rpmsg_ept->ep);
   1d198:	4608      	mov	r0, r1
   1d19a:	f003 fc90 	bl	20abe <rpmsg_destroy_ept>
__ssp_bos_icheck3(memset, void *, int)
   1d19e:	2270      	movs	r2, #112	; 0x70
   1d1a0:	2100      	movs	r1, #0
   1d1a2:	4620      	mov	r0, r4
   1d1a4:	f004 fc80 	bl	21aa8 <memset>
	return 0;
   1d1a8:	2000      	movs	r0, #0
}
   1d1aa:	bd10      	pop	{r4, pc}
		return -EBUSY;
   1d1ac:	f06f 000f 	mvn.w	r0, #15
   1d1b0:	e7fb      	b.n	1d1aa <deregister_ept+0x26>
		return -ENOENT;
   1d1b2:	f06f 0001 	mvn.w	r0, #1
   1d1b6:	e7f8      	b.n	1d1aa <deregister_ept+0x26>

0001d1b8 <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   1d1b8:	f003 bc81 	b.w	20abe <rpmsg_destroy_ept>

0001d1bc <ipc_rpmsg_deinit>:

int ipc_rpmsg_deinit(struct ipc_rpmsg_instance *instance,
		   unsigned int role)
{
   1d1bc:	b538      	push	{r3, r4, r5, lr}
   1d1be:	460d      	mov	r5, r1
	if (!instance) {
   1d1c0:	4604      	mov	r4, r0
   1d1c2:	b160      	cbz	r0, 1d1de <ipc_rpmsg_deinit+0x22>
		return -EINVAL;
	}

	rpmsg_deinit_vdev(&instance->rvdev);
   1d1c4:	30e0      	adds	r0, #224	; 0xe0
   1d1c6:	f003 fe59 	bl	20e7c <rpmsg_deinit_vdev>

	if (role == RPMSG_HOST) {
   1d1ca:	b10d      	cbz	r5, 1d1d0 <ipc_rpmsg_deinit+0x14>
		memset(&instance->shm_pool, 0, sizeof(struct rpmsg_virtio_shm_pool));
	}

	return 0;
   1d1cc:	2000      	movs	r0, #0
}
   1d1ce:	bd38      	pop	{r3, r4, r5, pc}
   1d1d0:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
   1d1d4:	f8c4 518c 	str.w	r5, [r4, #396]	; 0x18c
   1d1d8:	f8c4 5190 	str.w	r5, [r4, #400]	; 0x190
   1d1dc:	e7f6      	b.n	1d1cc <ipc_rpmsg_deinit+0x10>
		return -EINVAL;
   1d1de:	f06f 0015 	mvn.w	r0, #21
   1d1e2:	e7f4      	b.n	1d1ce <ipc_rpmsg_deinit+0x12>

0001d1e4 <virtio_notify>:
	vr = CONTAINER_OF(vq->vq_dev, struct ipc_static_vrings, vdev);
   1d1e4:	6802      	ldr	r2, [r0, #0]
	if (vr->notify_cb) {
   1d1e6:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   1d1ea:	b113      	cbz	r3, 1d1f2 <virtio_notify+0xe>
		vr->notify_cb(vq, vr->priv);
   1d1ec:	f8d2 10dc 	ldr.w	r1, [r2, #220]	; 0xdc
   1d1f0:	4718      	bx	r3
}
   1d1f2:	4770      	bx	lr

0001d1f4 <virtio_set_features>:
}
   1d1f4:	4770      	bx	lr

0001d1f6 <virtio_set_status>:
	if (p_vdev->role != VIRTIO_DEV_DRIVER) {
   1d1f6:	6983      	ldr	r3, [r0, #24]
   1d1f8:	b913      	cbnz	r3, 1d200 <virtio_set_status+0xa>
	return *(volatile uint8_t *)addr;
}

static ALWAYS_INLINE void sys_write8(uint8_t data, mem_addr_t addr)
{
	*(volatile uint8_t *)addr = data;
   1d1fa:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
   1d1fe:	7019      	strb	r1, [r3, #0]
}
   1d200:	4770      	bx	lr

0001d202 <virtio_get_features>:
}
   1d202:	2001      	movs	r0, #1
   1d204:	4770      	bx	lr

0001d206 <virtio_get_status>:
	if (p_vdev->role == VIRTIO_DEV_DEVICE) {
   1d206:	6983      	ldr	r3, [r0, #24]
   1d208:	2b01      	cmp	r3, #1
   1d20a:	d104      	bne.n	1d216 <virtio_get_status+0x10>
	return *(volatile uint8_t *)addr;
   1d20c:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
   1d210:	7818      	ldrb	r0, [r3, #0]
   1d212:	b2c0      	uxtb	r0, r0
   1d214:	4770      	bx	lr
	ret = VIRTIO_CONFIG_STATUS_DRIVER_OK;
   1d216:	2004      	movs	r0, #4
}
   1d218:	4770      	bx	lr

0001d21a <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
   1d21a:	b538      	push	{r3, r4, r5, lr}
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);
   1d21c:	00c4      	lsls	r4, r0, #3
	uint32_t vq_size = sizeof(struct virtqueue) +
   1d21e:	3434      	adds	r4, #52	; 0x34
	return k_malloc(size);
   1d220:	4620      	mov	r0, r4
   1d222:	f004 fc20 	bl	21a66 <k_malloc>

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
	if (vqs) {
   1d226:	4605      	mov	r5, r0
   1d228:	b118      	cbz	r0, 1d232 <virtqueue_allocate+0x18>
   1d22a:	4622      	mov	r2, r4
   1d22c:	2100      	movs	r1, #0
   1d22e:	f004 fc3b 	bl	21aa8 <memset>
		memset(vqs, 0x00, vq_size);
	}

	return vqs;
}
   1d232:	4628      	mov	r0, r5
   1d234:	bd38      	pop	{r3, r4, r5, pc}

0001d236 <ipc_static_vrings_deinit>:

int ipc_static_vrings_deinit(struct ipc_static_vrings *vr, unsigned int role)
{
   1d236:	b538      	push	{r3, r4, r5, lr}
   1d238:	4604      	mov	r4, r0
   1d23a:	2230      	movs	r2, #48	; 0x30
   1d23c:	2100      	movs	r1, #0
   1d23e:	f004 fc33 	bl	21aa8 <memset>
   1d242:	2218      	movs	r2, #24
   1d244:	2100      	movs	r1, #0
   1d246:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   1d24a:	f004 fc2d 	bl	21aa8 <memset>
   1d24e:	2218      	movs	r2, #24
   1d250:	2100      	movs	r1, #0
   1d252:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
   1d256:	f004 fc27 	bl	21aa8 <memset>
	virtqueue_free(vr->vq[RPMSG_VQ_1]);
   1d25a:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
   1d25e:	f7fb fdf7 	bl	18e50 <virtqueue_free>
	virtqueue_free(vr->vq[RPMSG_VQ_0]);
   1d262:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   1d266:	f7fb fdf3 	bl	18e50 <virtqueue_free>
	vr->shm_io = 0;
   1d26a:	2300      	movs	r3, #0
	metal_device_close(&vr->shm_device);
   1d26c:	f104 0034 	add.w	r0, r4, #52	; 0x34
	vr->shm_io = 0;
   1d270:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	metal_device_close(&vr->shm_device);
   1d274:	f003 f8f8 	bl	20468 <metal_device_close>
	metal_finish();
   1d278:	f7fb fd62 	bl	18d40 <metal_finish>
	if (io->ops.close)
   1d27c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	err = libmetal_teardown(vr);
	if (err != 0) {
		return err;
	}

	metal_io_finish(vr->shm_device.regions);
   1d27e:	f104 0540 	add.w	r5, r4, #64	; 0x40
   1d282:	b10b      	cbz	r3, 1d288 <ipc_static_vrings_deinit+0x52>
		(*io->ops.close)(io);
   1d284:	4628      	mov	r0, r5
   1d286:	4798      	blx	r3
   1d288:	2238      	movs	r2, #56	; 0x38
   1d28a:	2100      	movs	r1, #0
   1d28c:	4628      	mov	r0, r5
   1d28e:	f004 fc0b 	bl	21aa8 <memset>

	return 0;
}
   1d292:	2000      	movs	r0, #0
   1d294:	bd38      	pop	{r3, r4, r5, pc}

0001d296 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   1d296:	b538      	push	{r3, r4, r5, lr}
   1d298:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   1d29a:	42ab      	cmp	r3, r5
{
   1d29c:	4611      	mov	r1, r2
   1d29e:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   1d2a0:	d804      	bhi.n	1d2ac <_copy+0x16>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1d2a2:	461a      	mov	r2, r3
   1d2a4:	f004 fbf3 	bl	21a8e <memcpy>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   1d2a8:	4620      	mov	r0, r4
   1d2aa:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   1d2ac:	2400      	movs	r4, #0
   1d2ae:	e7fb      	b.n	1d2a8 <_copy+0x12>

0001d2b0 <_set>:
__ssp_bos_icheck3(memset, void *, int)
   1d2b0:	f004 bbfa 	b.w	21aa8 <memset>

0001d2b4 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   1d2b4:	09c3      	lsrs	r3, r0, #7
   1d2b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1d2ba:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1d2be:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   1d2c2:	b2c0      	uxtb	r0, r0
   1d2c4:	4770      	bx	lr

0001d2c6 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   1d2c6:	78cb      	ldrb	r3, [r1, #3]
   1d2c8:	7802      	ldrb	r2, [r0, #0]
   1d2ca:	4053      	eors	r3, r2
   1d2cc:	7003      	strb	r3, [r0, #0]
   1d2ce:	884b      	ldrh	r3, [r1, #2]
   1d2d0:	7842      	ldrb	r2, [r0, #1]
   1d2d2:	4053      	eors	r3, r2
   1d2d4:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   1d2d6:	680a      	ldr	r2, [r1, #0]
   1d2d8:	7883      	ldrb	r3, [r0, #2]
   1d2da:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1d2de:	7083      	strb	r3, [r0, #2]
   1d2e0:	680a      	ldr	r2, [r1, #0]
   1d2e2:	78c3      	ldrb	r3, [r0, #3]
   1d2e4:	4053      	eors	r3, r2
   1d2e6:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1d2e8:	79cb      	ldrb	r3, [r1, #7]
   1d2ea:	7902      	ldrb	r2, [r0, #4]
   1d2ec:	4053      	eors	r3, r2
   1d2ee:	7103      	strb	r3, [r0, #4]
   1d2f0:	88cb      	ldrh	r3, [r1, #6]
   1d2f2:	7942      	ldrb	r2, [r0, #5]
   1d2f4:	4053      	eors	r3, r2
   1d2f6:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   1d2f8:	684a      	ldr	r2, [r1, #4]
   1d2fa:	7983      	ldrb	r3, [r0, #6]
   1d2fc:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1d300:	7183      	strb	r3, [r0, #6]
   1d302:	684a      	ldr	r2, [r1, #4]
   1d304:	79c3      	ldrb	r3, [r0, #7]
   1d306:	4053      	eors	r3, r2
   1d308:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   1d30a:	7acb      	ldrb	r3, [r1, #11]
   1d30c:	7a02      	ldrb	r2, [r0, #8]
   1d30e:	4053      	eors	r3, r2
   1d310:	7203      	strb	r3, [r0, #8]
   1d312:	7a42      	ldrb	r2, [r0, #9]
   1d314:	894b      	ldrh	r3, [r1, #10]
   1d316:	4053      	eors	r3, r2
   1d318:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   1d31a:	688a      	ldr	r2, [r1, #8]
   1d31c:	7a83      	ldrb	r3, [r0, #10]
   1d31e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1d322:	7283      	strb	r3, [r0, #10]
   1d324:	688a      	ldr	r2, [r1, #8]
   1d326:	7ac3      	ldrb	r3, [r0, #11]
   1d328:	4053      	eors	r3, r2
   1d32a:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1d32c:	7bcb      	ldrb	r3, [r1, #15]
   1d32e:	7b02      	ldrb	r2, [r0, #12]
   1d330:	4053      	eors	r3, r2
   1d332:	7303      	strb	r3, [r0, #12]
   1d334:	89cb      	ldrh	r3, [r1, #14]
   1d336:	7b42      	ldrb	r2, [r0, #13]
   1d338:	4053      	eors	r3, r2
   1d33a:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1d33c:	68ca      	ldr	r2, [r1, #12]
   1d33e:	7b83      	ldrb	r3, [r0, #14]
   1d340:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1d344:	7383      	strb	r3, [r0, #14]
   1d346:	68ca      	ldr	r2, [r1, #12]
   1d348:	7bc3      	ldrb	r3, [r0, #15]
   1d34a:	4053      	eors	r3, r2
   1d34c:	73c3      	strb	r3, [r0, #15]
}
   1d34e:	4770      	bx	lr

0001d350 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   1d350:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1d352:	7802      	ldrb	r2, [r0, #0]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1d354:	7ac3      	ldrb	r3, [r0, #11]
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1d356:	f88d 2000 	strb.w	r2, [sp]
   1d35a:	7942      	ldrb	r2, [r0, #5]
   1d35c:	f88d 2001 	strb.w	r2, [sp, #1]
   1d360:	7a82      	ldrb	r2, [r0, #10]
   1d362:	f88d 2002 	strb.w	r2, [sp, #2]
   1d366:	7bc2      	ldrb	r2, [r0, #15]
   1d368:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   1d36c:	7902      	ldrb	r2, [r0, #4]
   1d36e:	f88d 2004 	strb.w	r2, [sp, #4]
   1d372:	7a42      	ldrb	r2, [r0, #9]
   1d374:	f88d 2005 	strb.w	r2, [sp, #5]
   1d378:	7b82      	ldrb	r2, [r0, #14]
   1d37a:	f88d 2006 	strb.w	r2, [sp, #6]
   1d37e:	78c2      	ldrb	r2, [r0, #3]
   1d380:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   1d384:	7a02      	ldrb	r2, [r0, #8]
   1d386:	f88d 2008 	strb.w	r2, [sp, #8]
   1d38a:	7b42      	ldrb	r2, [r0, #13]
   1d38c:	f88d 2009 	strb.w	r2, [sp, #9]
   1d390:	7882      	ldrb	r2, [r0, #2]
   1d392:	f88d 200a 	strb.w	r2, [sp, #10]
   1d396:	79c2      	ldrb	r2, [r0, #7]
   1d398:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1d39c:	7b02      	ldrb	r2, [r0, #12]
   1d39e:	f88d 200c 	strb.w	r2, [sp, #12]
   1d3a2:	7842      	ldrb	r2, [r0, #1]
   1d3a4:	f88d 200d 	strb.w	r2, [sp, #13]
   1d3a8:	7982      	ldrb	r2, [r0, #6]
   1d3aa:	f88d 200e 	strb.w	r2, [sp, #14]
   1d3ae:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1d3b2:	2310      	movs	r3, #16
   1d3b4:	466a      	mov	r2, sp
   1d3b6:	4619      	mov	r1, r3
   1d3b8:	f7ff ff6d 	bl	1d296 <_copy>
}
   1d3bc:	b005      	add	sp, #20
   1d3be:	f85d fb04 	ldr.w	pc, [sp], #4

0001d3c2 <mult_row_column>:
{
   1d3c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d3c4:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1d3c6:	7808      	ldrb	r0, [r1, #0]
{
   1d3c8:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1d3ca:	f7ff ff73 	bl	1d2b4 <_double_byte>
   1d3ce:	4605      	mov	r5, r0
   1d3d0:	7860      	ldrb	r0, [r4, #1]
   1d3d2:	f7ff ff6f 	bl	1d2b4 <_double_byte>
   1d3d6:	78a2      	ldrb	r2, [r4, #2]
   1d3d8:	7863      	ldrb	r3, [r4, #1]
   1d3da:	4053      	eors	r3, r2
   1d3dc:	78e2      	ldrb	r2, [r4, #3]
   1d3de:	4053      	eors	r3, r2
   1d3e0:	405d      	eors	r5, r3
   1d3e2:	4068      	eors	r0, r5
   1d3e4:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   1d3e6:	7860      	ldrb	r0, [r4, #1]
   1d3e8:	7827      	ldrb	r7, [r4, #0]
   1d3ea:	f7ff ff63 	bl	1d2b4 <_double_byte>
   1d3ee:	4605      	mov	r5, r0
   1d3f0:	78a0      	ldrb	r0, [r4, #2]
   1d3f2:	f7ff ff5f 	bl	1d2b4 <_double_byte>
   1d3f6:	78a3      	ldrb	r3, [r4, #2]
   1d3f8:	405f      	eors	r7, r3
   1d3fa:	78e3      	ldrb	r3, [r4, #3]
   1d3fc:	405f      	eors	r7, r3
   1d3fe:	407d      	eors	r5, r7
   1d400:	4068      	eors	r0, r5
   1d402:	7070      	strb	r0, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   1d404:	7863      	ldrb	r3, [r4, #1]
   1d406:	7827      	ldrb	r7, [r4, #0]
   1d408:	78a0      	ldrb	r0, [r4, #2]
   1d40a:	405f      	eors	r7, r3
   1d40c:	f7ff ff52 	bl	1d2b4 <_double_byte>
   1d410:	4605      	mov	r5, r0
   1d412:	78e0      	ldrb	r0, [r4, #3]
   1d414:	f7ff ff4e 	bl	1d2b4 <_double_byte>
   1d418:	78e3      	ldrb	r3, [r4, #3]
   1d41a:	405f      	eors	r7, r3
   1d41c:	407d      	eors	r5, r7
   1d41e:	4068      	eors	r0, r5
   1d420:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1d422:	7820      	ldrb	r0, [r4, #0]
   1d424:	f7ff ff46 	bl	1d2b4 <_double_byte>
   1d428:	7862      	ldrb	r2, [r4, #1]
   1d42a:	7823      	ldrb	r3, [r4, #0]
   1d42c:	4053      	eors	r3, r2
   1d42e:	78a2      	ldrb	r2, [r4, #2]
   1d430:	4053      	eors	r3, r2
   1d432:	ea80 0503 	eor.w	r5, r0, r3
   1d436:	78e0      	ldrb	r0, [r4, #3]
   1d438:	f7ff ff3c 	bl	1d2b4 <_double_byte>
   1d43c:	b2ed      	uxtb	r5, r5
   1d43e:	4045      	eors	r5, r0
   1d440:	70f5      	strb	r5, [r6, #3]
}
   1d442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001d444 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   1d444:	b570      	push	{r4, r5, r6, lr}
   1d446:	4614      	mov	r4, r2
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   1d448:	4605      	mov	r5, r0
{
   1d44a:	b088      	sub	sp, #32
	if (out == (uint8_t *) 0) {
   1d44c:	2800      	cmp	r0, #0
   1d44e:	d049      	beq.n	1d4e4 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   1d450:	2900      	cmp	r1, #0
   1d452:	d049      	beq.n	1d4e8 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   1d454:	2a00      	cmp	r2, #0
   1d456:	d049      	beq.n	1d4ec <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   1d458:	2310      	movs	r3, #16
   1d45a:	460a      	mov	r2, r1
   1d45c:	4668      	mov	r0, sp
   1d45e:	4619      	mov	r1, r3
   1d460:	f7ff ff19 	bl	1d296 <_copy>
	add_round_key(state, s->words);
   1d464:	4621      	mov	r1, r4
   1d466:	4668      	mov	r0, sp
   1d468:	f7ff ff2d 	bl	1d2c6 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   1d46c:	3410      	adds	r4, #16
   1d46e:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   1d472:	4668      	mov	r0, sp
   1d474:	f7ef ff88 	bl	d388 <sub_bytes>
		shift_rows(state);
   1d478:	4668      	mov	r0, sp
   1d47a:	f7ff ff69 	bl	1d350 <shift_rows>
	mult_row_column(t, s);
   1d47e:	4669      	mov	r1, sp
   1d480:	a804      	add	r0, sp, #16
   1d482:	f7ff ff9e 	bl	1d3c2 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   1d486:	a901      	add	r1, sp, #4
   1d488:	a805      	add	r0, sp, #20
   1d48a:	f7ff ff9a 	bl	1d3c2 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   1d48e:	a902      	add	r1, sp, #8
   1d490:	a806      	add	r0, sp, #24
   1d492:	f7ff ff96 	bl	1d3c2 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   1d496:	a903      	add	r1, sp, #12
   1d498:	a807      	add	r0, sp, #28
   1d49a:	f7ff ff92 	bl	1d3c2 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1d49e:	2310      	movs	r3, #16
   1d4a0:	4668      	mov	r0, sp
   1d4a2:	4619      	mov	r1, r3
   1d4a4:	eb0d 0203 	add.w	r2, sp, r3
   1d4a8:	f7ff fef5 	bl	1d296 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   1d4ac:	4621      	mov	r1, r4
   1d4ae:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   1d4b0:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   1d4b2:	f7ff ff08 	bl	1d2c6 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   1d4b6:	42b4      	cmp	r4, r6
   1d4b8:	d1db      	bne.n	1d472 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   1d4ba:	f7ef ff65 	bl	d388 <sub_bytes>
	shift_rows(state);
   1d4be:	4668      	mov	r0, sp
   1d4c0:	f7ff ff46 	bl	1d350 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   1d4c4:	4621      	mov	r1, r4
   1d4c6:	4668      	mov	r0, sp
   1d4c8:	f7ff fefd 	bl	1d2c6 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   1d4cc:	2310      	movs	r3, #16
   1d4ce:	466a      	mov	r2, sp
   1d4d0:	4619      	mov	r1, r3
   1d4d2:	4628      	mov	r0, r5
   1d4d4:	f7ff fedf 	bl	1d296 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   1d4d8:	4668      	mov	r0, sp
   1d4da:	2210      	movs	r2, #16
   1d4dc:	2100      	movs	r1, #0
   1d4de:	f7ff fee7 	bl	1d2b0 <_set>

	return TC_CRYPTO_SUCCESS;
   1d4e2:	2001      	movs	r0, #1
}
   1d4e4:	b008      	add	sp, #32
   1d4e6:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1d4e8:	4608      	mov	r0, r1
   1d4ea:	e7fb      	b.n	1d4e4 <tc_aes_encrypt+0xa0>
   1d4ec:	4610      	mov	r0, r2
   1d4ee:	e7f9      	b.n	1d4e4 <tc_aes_encrypt+0xa0>

0001d4f0 <gf_double>:

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1d4f0:	460a      	mov	r2, r1
{
   1d4f2:	b510      	push	{r4, lr}
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1d4f4:	f912 3b10 	ldrsb.w	r3, [r2], #16

	out += (TC_AES_BLOCK_SIZE - 1);
   1d4f8:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1d4fa:	2b00      	cmp	r3, #0
   1d4fc:	bfac      	ite	ge
   1d4fe:	2300      	movge	r3, #0
   1d500:	2387      	movlt	r3, #135	; 0x87
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   1d502:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1d506:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   1d50a:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
   1d50c:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   1d510:	d002      	beq.n	1d518 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   1d512:	7813      	ldrb	r3, [r2, #0]
   1d514:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   1d516:	e7f4      	b.n	1d502 <gf_double+0x12>
	}
}
   1d518:	bd10      	pop	{r4, pc}

0001d51a <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   1d51a:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   1d51c:	b120      	cbz	r0, 1d528 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   1d51e:	2258      	movs	r2, #88	; 0x58
   1d520:	2100      	movs	r1, #0
   1d522:	f7ff fec5 	bl	1d2b0 <_set>
   1d526:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1d528:	bd08      	pop	{r3, pc}

0001d52a <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   1d52a:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1d52c:	4604      	mov	r4, r0
   1d52e:	b188      	cbz	r0, 1d554 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1d530:	2210      	movs	r2, #16
   1d532:	2100      	movs	r1, #0
   1d534:	f7ff febc 	bl	1d2b0 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   1d538:	2210      	movs	r2, #16
   1d53a:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1d53e:	2100      	movs	r1, #0
   1d540:	f7ff feb6 	bl	1d2b0 <_set>
	s->leftover_offset = 0;
   1d544:	2300      	movs	r3, #0

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   1d546:	2200      	movs	r2, #0
	s->leftover_offset = 0;
   1d548:	6463      	str	r3, [r4, #68]	; 0x44
	s->countdown = MAX_CALLS;
   1d54a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1d54e:	2001      	movs	r0, #1
   1d550:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
}
   1d554:	bd10      	pop	{r4, pc}

0001d556 <tc_cmac_setup>:
{
   1d556:	b570      	push	{r4, r5, r6, lr}
   1d558:	4604      	mov	r4, r0
   1d55a:	460d      	mov	r5, r1
   1d55c:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   1d55e:	b310      	cbz	r0, 1d5a6 <tc_cmac_setup+0x50>
   1d560:	b311      	cbz	r1, 1d5a8 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   1d562:	2258      	movs	r2, #88	; 0x58
   1d564:	2100      	movs	r1, #0
   1d566:	f7ff fea3 	bl	1d2b0 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   1d56a:	4629      	mov	r1, r5
   1d56c:	4630      	mov	r0, r6
	s->sched = sched;
   1d56e:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   1d570:	f7ef ff16 	bl	d3a0 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1d574:	2210      	movs	r2, #16
   1d576:	2100      	movs	r1, #0
   1d578:	4620      	mov	r0, r4
   1d57a:	f7ff fe99 	bl	1d2b0 <_set>
	gf_double (s->K1, s->iv);
   1d57e:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   1d582:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1d584:	4621      	mov	r1, r4
   1d586:	4620      	mov	r0, r4
   1d588:	f7ff ff5c 	bl	1d444 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   1d58c:	4621      	mov	r1, r4
   1d58e:	4628      	mov	r0, r5
   1d590:	f7ff ffae 	bl	1d4f0 <gf_double>
	gf_double (s->K2, s->K1);
   1d594:	4629      	mov	r1, r5
   1d596:	f104 0020 	add.w	r0, r4, #32
   1d59a:	f7ff ffa9 	bl	1d4f0 <gf_double>
	tc_cmac_init(s);
   1d59e:	4620      	mov	r0, r4
   1d5a0:	f7ff ffc3 	bl	1d52a <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   1d5a4:	2001      	movs	r0, #1
}
   1d5a6:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1d5a8:	4608      	mov	r0, r1
   1d5aa:	e7fc      	b.n	1d5a6 <tc_cmac_setup+0x50>

0001d5ac <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   1d5ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d5b0:	460e      	mov	r6, r1
   1d5b2:	4615      	mov	r5, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1d5b4:	4604      	mov	r4, r0
   1d5b6:	2800      	cmp	r0, #0
   1d5b8:	d060      	beq.n	1d67c <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   1d5ba:	b1fa      	cbz	r2, 1d5fc <tc_cmac_update+0x50>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   1d5bc:	2900      	cmp	r1, #0
   1d5be:	d05d      	beq.n	1d67c <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   1d5c0:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   1d5c4:	ea53 0102 	orrs.w	r1, r3, r2
   1d5c8:	d058      	beq.n	1d67c <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   1d5ca:	3b01      	subs	r3, #1

	if (s->leftover_offset > 0) {
   1d5cc:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   1d5d0:	f142 32ff 	adc.w	r2, r2, #4294967295
   1d5d4:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   1d5d8:	f1b8 0f00 	cmp.w	r8, #0
   1d5dc:	d02c      	beq.n	1d638 <tc_cmac_update+0x8c>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   1d5de:	f1c8 0710 	rsb	r7, r8, #16

		if (data_length < remaining_space) {
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1d5e2:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   1d5e6:	42bd      	cmp	r5, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1d5e8:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   1d5ea:	d20a      	bcs.n	1d602 <tc_cmac_update+0x56>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1d5ec:	462b      	mov	r3, r5
   1d5ee:	4632      	mov	r2, r6
   1d5f0:	4629      	mov	r1, r5
   1d5f2:	f7ff fe50 	bl	1d296 <_copy>
			s->leftover_offset += data_length;
   1d5f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1d5f8:	442b      	add	r3, r5
   1d5fa:	6463      	str	r3, [r4, #68]	; 0x44
		return  TC_CRYPTO_SUCCESS;
   1d5fc:	2001      	movs	r0, #1
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
}
   1d5fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_copy(&s->leftover[s->leftover_offset],
   1d602:	463b      	mov	r3, r7
   1d604:	4632      	mov	r2, r6
   1d606:	4639      	mov	r1, r7
   1d608:	f7ff fe45 	bl	1d296 <_copy>
		s->leftover_offset = 0;
   1d60c:	2300      	movs	r3, #0
   1d60e:	3d10      	subs	r5, #16
   1d610:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   1d612:	4445      	add	r5, r8
		data += remaining_space;
   1d614:	443e      	add	r6, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d616:	1e63      	subs	r3, r4, #1
   1d618:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   1d61c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1d620:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d624:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   1d626:	ea82 0200 	eor.w	r2, r2, r0
   1d62a:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d62c:	d1f6      	bne.n	1d61c <tc_cmac_update+0x70>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1d62e:	4621      	mov	r1, r4
   1d630:	4620      	mov	r0, r4
   1d632:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1d634:	f7ff ff06 	bl	1d444 <tc_aes_encrypt>
   1d638:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   1d63c:	2d10      	cmp	r5, #16
   1d63e:	d80a      	bhi.n	1d656 <tc_cmac_update+0xaa>
	if (data_length > 0) {
   1d640:	2d00      	cmp	r5, #0
   1d642:	d0db      	beq.n	1d5fc <tc_cmac_update+0x50>
		_copy(s->leftover, data_length, data, data_length);
   1d644:	462b      	mov	r3, r5
   1d646:	4632      	mov	r2, r6
   1d648:	4629      	mov	r1, r5
   1d64a:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1d64e:	f7ff fe22 	bl	1d296 <_copy>
		s->leftover_offset = data_length;
   1d652:	6465      	str	r5, [r4, #68]	; 0x44
   1d654:	e7d2      	b.n	1d5fc <tc_cmac_update+0x50>
   1d656:	1e63      	subs	r3, r4, #1
   1d658:	1e71      	subs	r1, r6, #1
			s->iv[i] ^= data[i];
   1d65a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1d65e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d662:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   1d664:	ea82 0200 	eor.w	r2, r2, r0
   1d668:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d66a:	d1f6      	bne.n	1d65a <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1d66c:	4621      	mov	r1, r4
   1d66e:	4620      	mov	r0, r4
   1d670:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1d672:	f7ff fee7 	bl	1d444 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   1d676:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   1d678:	3d10      	subs	r5, #16
   1d67a:	e7df      	b.n	1d63c <tc_cmac_update+0x90>
		return TC_CRYPTO_FAIL;
   1d67c:	2000      	movs	r0, #0
   1d67e:	e7be      	b.n	1d5fe <tc_cmac_update+0x52>

0001d680 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   1d680:	b570      	push	{r4, r5, r6, lr}
   1d682:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1d684:	4605      	mov	r5, r0
   1d686:	b1f0      	cbz	r0, 1d6c6 <tc_cmac_final+0x46>
   1d688:	b371      	cbz	r1, 1d6e8 <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   1d68a:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   1d68c:	2a10      	cmp	r2, #16
   1d68e:	d11b      	bne.n	1d6c8 <tc_cmac_final+0x48>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   1d690:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d692:	1e63      	subs	r3, r4, #1
   1d694:	3901      	subs	r1, #1
   1d696:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1d69a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1d69e:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d6a2:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1d6a4:	ea82 0206 	eor.w	r2, r2, r6
   1d6a8:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   1d6ac:	ea82 0206 	eor.w	r2, r2, r6
   1d6b0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d6b2:	d1f2      	bne.n	1d69a <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   1d6b4:	4621      	mov	r1, r4
   1d6b6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1d6b8:	4628      	mov	r0, r5
   1d6ba:	f7ff fec3 	bl	1d444 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   1d6be:	4620      	mov	r0, r4
   1d6c0:	f7ff ff2b 	bl	1d51a <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   1d6c4:	2001      	movs	r0, #1
}
   1d6c6:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   1d6c8:	f102 0030 	add.w	r0, r2, #48	; 0x30
   1d6cc:	2100      	movs	r1, #0
   1d6ce:	f1c2 0210 	rsb	r2, r2, #16
   1d6d2:	4420      	add	r0, r4
   1d6d4:	f7ff fdec 	bl	1d2b0 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1d6d8:	2280      	movs	r2, #128	; 0x80
   1d6da:	6c63      	ldr	r3, [r4, #68]	; 0x44
		k = (uint8_t *) s->K2;
   1d6dc:	f104 0120 	add.w	r1, r4, #32
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1d6e0:	4423      	add	r3, r4
   1d6e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   1d6e6:	e7d4      	b.n	1d692 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   1d6e8:	4608      	mov	r0, r1
   1d6ea:	e7ec      	b.n	1d6c6 <tc_cmac_final+0x46>

0001d6ec <tc_sha256_update>:
{
   1d6ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d6ee:	460c      	mov	r4, r1
	if (s == (TCSha256State_t) 0 ||
   1d6f0:	b110      	cbz	r0, 1d6f8 <tc_sha256_update+0xc>
   1d6f2:	b1f9      	cbz	r1, 1d734 <tc_sha256_update+0x48>
	} else if (datalen == 0) {
   1d6f4:	b90a      	cbnz	r2, 1d6fa <tc_sha256_update+0xe>
		return TC_CRYPTO_SUCCESS;
   1d6f6:	2001      	movs	r0, #1
}
   1d6f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			s->leftover_offset = 0;
   1d6fa:	2700      	movs	r7, #0
   1d6fc:	188d      	adds	r5, r1, r2
			compress(s->iv, s->leftover);
   1d6fe:	f100 0628 	add.w	r6, r0, #40	; 0x28
		s->leftover[s->leftover_offset++] = *(data++);
   1d702:	6e83      	ldr	r3, [r0, #104]	; 0x68
   1d704:	1c5a      	adds	r2, r3, #1
   1d706:	6682      	str	r2, [r0, #104]	; 0x68
   1d708:	f814 1b01 	ldrb.w	r1, [r4], #1
   1d70c:	4403      	add	r3, r0
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   1d70e:	2a3f      	cmp	r2, #63	; 0x3f
		s->leftover[s->leftover_offset++] = *(data++);
   1d710:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   1d714:	d90b      	bls.n	1d72e <tc_sha256_update+0x42>
			compress(s->iv, s->leftover);
   1d716:	4631      	mov	r1, r6
   1d718:	f7ef fe96 	bl	d448 <compress>
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   1d71c:	e9d0 3208 	ldrd	r3, r2, [r0, #32]
   1d720:	f513 7300 	adds.w	r3, r3, #512	; 0x200
   1d724:	f142 0200 	adc.w	r2, r2, #0
   1d728:	e9c0 3208 	strd	r3, r2, [r0, #32]
			s->leftover_offset = 0;
   1d72c:	6687      	str	r7, [r0, #104]	; 0x68
	while (datalen-- > 0) {
   1d72e:	42a5      	cmp	r5, r4
   1d730:	d1e7      	bne.n	1d702 <tc_sha256_update+0x16>
   1d732:	e7e0      	b.n	1d6f6 <tc_sha256_update+0xa>
		return TC_CRYPTO_FAIL;
   1d734:	4608      	mov	r0, r1
   1d736:	e7df      	b.n	1d6f8 <tc_sha256_update+0xc>

0001d738 <tc_sha256_final>:
{
   1d738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d73a:	460c      	mov	r4, r1
	if (digest == (uint8_t *) 0 ||
   1d73c:	4605      	mov	r5, r0
   1d73e:	2800      	cmp	r0, #0
   1d740:	d054      	beq.n	1d7ec <tc_sha256_final+0xb4>
   1d742:	2900      	cmp	r1, #0
   1d744:	d053      	beq.n	1d7ee <tc_sha256_final+0xb6>
	s->bits_hashed += (s->leftover_offset << 3);
   1d746:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   1d748:	e9d1 2108 	ldrd	r2, r1, [r1, #32]
   1d74c:	00d8      	lsls	r0, r3, #3
   1d74e:	1812      	adds	r2, r2, r0
   1d750:	f141 0100 	adc.w	r1, r1, #0
   1d754:	e9c4 2108 	strd	r2, r1, [r4, #32]
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   1d758:	2280      	movs	r2, #128	; 0x80
   1d75a:	1c58      	adds	r0, r3, #1
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   1d75c:	2838      	cmp	r0, #56	; 0x38
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   1d75e:	4423      	add	r3, r4
   1d760:	66a0      	str	r0, [r4, #104]	; 0x68
	s->bits_hashed += (s->leftover_offset << 3);
   1d762:	f04f 0700 	mov.w	r7, #0
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   1d766:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		_set(s->leftover + s->leftover_offset, 0x00,
   1d76a:	f104 0628 	add.w	r6, r4, #40	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   1d76e:	d90a      	bls.n	1d786 <tc_sha256_final+0x4e>
		_set(s->leftover + s->leftover_offset, 0x00,
   1d770:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   1d774:	4639      	mov	r1, r7
   1d776:	4430      	add	r0, r6
   1d778:	f7ff fd9a 	bl	1d2b0 <_set>
		compress(s->iv, s->leftover);
   1d77c:	4631      	mov	r1, r6
   1d77e:	4620      	mov	r0, r4
   1d780:	f7ef fe62 	bl	d448 <compress>
		s->leftover_offset = 0;
   1d784:	66a7      	str	r7, [r4, #104]	; 0x68
	_set(s->leftover + s->leftover_offset, 0x00,
   1d786:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   1d788:	2100      	movs	r1, #0
   1d78a:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   1d78e:	4430      	add	r0, r6
   1d790:	f7ff fd8e 	bl	1d2b0 <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   1d794:	6a23      	ldr	r3, [r4, #32]
	compress(s->iv, s->leftover);
   1d796:	4631      	mov	r1, r6
   1d798:	ba1a      	rev	r2, r3
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   1d79a:	6a63      	ldr	r3, [r4, #36]	; 0x24
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
   1d79c:	6662      	str	r2, [r4, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   1d79e:	0a1a      	lsrs	r2, r3, #8
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
   1d7a0:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   1d7a4:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   1d7a8:	0c1a      	lsrs	r2, r3, #16
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   1d7aa:	0e1b      	lsrs	r3, r3, #24
   1d7ac:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	compress(s->iv, s->leftover);
   1d7b0:	4620      	mov	r0, r4
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   1d7b2:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	compress(s->iv, s->leftover);
   1d7b6:	f7ef fe47 	bl	d448 <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   1d7ba:	1d2b      	adds	r3, r5, #4
   1d7bc:	1f21      	subs	r1, r4, #4
   1d7be:	3524      	adds	r5, #36	; 0x24
		unsigned int t = *((unsigned int *) &s->iv[i]);
   1d7c0:	f851 2f04 	ldr.w	r2, [r1, #4]!
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   1d7c4:	3304      	adds	r3, #4
		*digest++ = (uint8_t)(t >> 24);
   1d7c6:	0e10      	lsrs	r0, r2, #24
   1d7c8:	f803 0c08 	strb.w	r0, [r3, #-8]
		*digest++ = (uint8_t)(t >> 16);
   1d7cc:	0c10      	lsrs	r0, r2, #16
   1d7ce:	f803 0c07 	strb.w	r0, [r3, #-7]
		*digest++ = (uint8_t)(t >> 8);
   1d7d2:	0a10      	lsrs	r0, r2, #8
   1d7d4:	f803 0c06 	strb.w	r0, [r3, #-6]
		*digest++ = (uint8_t)(t);
   1d7d8:	f803 2c05 	strb.w	r2, [r3, #-5]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   1d7dc:	42ab      	cmp	r3, r5
   1d7de:	d1ef      	bne.n	1d7c0 <tc_sha256_final+0x88>
	_set(s, 0, sizeof(*s));
   1d7e0:	4620      	mov	r0, r4
   1d7e2:	2270      	movs	r2, #112	; 0x70
   1d7e4:	2100      	movs	r1, #0
   1d7e6:	f7ff fd63 	bl	1d2b0 <_set>
	return TC_CRYPTO_SUCCESS;
   1d7ea:	2001      	movs	r0, #1
}
   1d7ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   1d7ee:	4608      	mov	r0, r1
   1d7f0:	e7fc      	b.n	1d7ec <tc_sha256_final+0xb4>

0001d7f2 <rekey>:
#include <tinycrypt/hmac.h>
#include <tinycrypt/constants.h>
#include <tinycrypt/utils.h>

static void rekey(uint8_t *key, const uint8_t *new_key, unsigned int key_size)
{
   1d7f2:	b530      	push	{r4, r5, lr}
   1d7f4:	1e43      	subs	r3, r0, #1
   1d7f6:	188d      	adds	r5, r1, r2
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
   1d7f8:	42a9      	cmp	r1, r5
   1d7fa:	d106      	bne.n	1d80a <rekey+0x18>
		key[i] = inner_pad ^ new_key[i];
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   1d7fc:	2136      	movs	r1, #54	; 0x36
   1d7fe:	245c      	movs	r4, #92	; 0x5c
   1d800:	4402      	add	r2, r0
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   1d802:	1a13      	subs	r3, r2, r0
   1d804:	2b3f      	cmp	r3, #63	; 0x3f
   1d806:	d90c      	bls.n	1d822 <rekey+0x30>
	}
}
   1d808:	bd30      	pop	{r4, r5, pc}
		key[i] = inner_pad ^ new_key[i];
   1d80a:	780c      	ldrb	r4, [r1, #0]
   1d80c:	f084 0436 	eor.w	r4, r4, #54	; 0x36
   1d810:	f803 4f01 	strb.w	r4, [r3, #1]!
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
   1d814:	f811 4b01 	ldrb.w	r4, [r1], #1
   1d818:	f084 045c 	eor.w	r4, r4, #92	; 0x5c
   1d81c:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
	for (i = 0; i < key_size; ++i) {
   1d820:	e7ea      	b.n	1d7f8 <rekey+0x6>
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   1d822:	f802 1b01 	strb.w	r1, [r2], #1
   1d826:	f882 403f 	strb.w	r4, [r2, #63]	; 0x3f
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   1d82a:	e7ea      	b.n	1d802 <rekey+0x10>

0001d82c <tc_hmac_set_key>:

int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{
   1d82c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d82e:	460e      	mov	r6, r1
   1d830:	4614      	mov	r4, r2
	/* Input sanity check */
	if (ctx == (TCHmacState_t) 0 ||
   1d832:	4605      	mov	r5, r0
{
   1d834:	b0cd      	sub	sp, #308	; 0x134
	if (ctx == (TCHmacState_t) 0 ||
   1d836:	b1b8      	cbz	r0, 1d868 <tc_hmac_set_key+0x3c>
   1d838:	b341      	cbz	r1, 1d88c <tc_hmac_set_key+0x60>
	    key == (const uint8_t *) 0 ||
   1d83a:	b34a      	cbz	r2, 1d890 <tc_hmac_set_key+0x64>
	}

	const uint8_t dummy_key[TC_SHA256_BLOCK_SIZE];
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   1d83c:	2a40      	cmp	r2, #64	; 0x40
				       key_size);
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
   1d83e:	f100 0770 	add.w	r7, r0, #112	; 0x70
	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   1d842:	d813      	bhi.n	1d86c <tc_hmac_set_key+0x40>
		(void)tc_sha256_init(&dummy_state.hash_state);
   1d844:	a810      	add	r0, sp, #64	; 0x40
   1d846:	f7ef fee9 	bl	d61c <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
   1d84a:	4622      	mov	r2, r4
   1d84c:	4669      	mov	r1, sp
   1d84e:	a810      	add	r0, sp, #64	; 0x40
   1d850:	f7ff ff4c 	bl	1d6ec <tc_sha256_update>
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
   1d854:	a910      	add	r1, sp, #64	; 0x40
   1d856:	a834      	add	r0, sp, #208	; 0xd0
   1d858:	f7ff ff6e 	bl	1d738 <tc_sha256_final>
		rekey(ctx->key, key, key_size);
   1d85c:	4622      	mov	r2, r4
   1d85e:	4631      	mov	r1, r6
	} else {
		(void)tc_sha256_init(&ctx->hash_state);
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
				      &ctx->hash_state);
		rekey(ctx->key,
   1d860:	4638      	mov	r0, r7
   1d862:	f7ff ffc6 	bl	1d7f2 <rekey>
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
   1d866:	2001      	movs	r0, #1
}
   1d868:	b04d      	add	sp, #308	; 0x134
   1d86a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)tc_sha256_init(&ctx->hash_state);
   1d86c:	f7ef fed6 	bl	d61c <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   1d870:	4622      	mov	r2, r4
   1d872:	4631      	mov	r1, r6
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   1d874:	f105 0490 	add.w	r4, r5, #144	; 0x90
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   1d878:	4628      	mov	r0, r5
   1d87a:	f7ff ff37 	bl	1d6ec <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   1d87e:	4629      	mov	r1, r5
   1d880:	4620      	mov	r0, r4
   1d882:	f7ff ff59 	bl	1d738 <tc_sha256_final>
		rekey(ctx->key,
   1d886:	2220      	movs	r2, #32
   1d888:	4621      	mov	r1, r4
   1d88a:	e7e9      	b.n	1d860 <tc_hmac_set_key+0x34>
		return TC_CRYPTO_FAIL;
   1d88c:	4608      	mov	r0, r1
   1d88e:	e7eb      	b.n	1d868 <tc_hmac_set_key+0x3c>
   1d890:	4610      	mov	r0, r2
   1d892:	e7e9      	b.n	1d868 <tc_hmac_set_key+0x3c>

0001d894 <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{
   1d894:	b510      	push	{r4, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   1d896:	4604      	mov	r4, r0
   1d898:	b140      	cbz	r0, 1d8ac <tc_hmac_init+0x18>
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
   1d89a:	f7ef febf 	bl	d61c <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
   1d89e:	2240      	movs	r2, #64	; 0x40
   1d8a0:	4620      	mov	r0, r4
   1d8a2:	f104 0170 	add.w	r1, r4, #112	; 0x70
   1d8a6:	f7ff ff21 	bl	1d6ec <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   1d8aa:	2001      	movs	r0, #1
}
   1d8ac:	bd10      	pop	{r4, pc}

0001d8ae <tc_hmac_update>:

int tc_hmac_update(TCHmacState_t ctx,
		   const void *data,
		   unsigned int data_length)
{
   1d8ae:	b508      	push	{r3, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   1d8b0:	b110      	cbz	r0, 1d8b8 <tc_hmac_update+0xa>
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
   1d8b2:	f7ff ff1b 	bl	1d6ec <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   1d8b6:	2001      	movs	r0, #1
}
   1d8b8:	bd08      	pop	{r3, pc}

0001d8ba <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{
   1d8ba:	b570      	push	{r4, r5, r6, lr}
   1d8bc:	460e      	mov	r6, r1
   1d8be:	4614      	mov	r4, r2

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1d8c0:	4605      	mov	r5, r0
   1d8c2:	b1f0      	cbz	r0, 1d902 <tc_hmac_final+0x48>
   1d8c4:	2920      	cmp	r1, #32
   1d8c6:	d11c      	bne.n	1d902 <tc_hmac_final+0x48>
	    taglen != TC_SHA256_DIGEST_SIZE ||
   1d8c8:	b1ea      	cbz	r2, 1d906 <tc_hmac_final+0x4c>
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	(void) tc_sha256_final(tag, &ctx->hash_state);
   1d8ca:	4611      	mov	r1, r2
   1d8cc:	f7ff ff34 	bl	1d738 <tc_sha256_final>

	(void)tc_sha256_init(&ctx->hash_state);
   1d8d0:	4620      	mov	r0, r4
   1d8d2:	f7ef fea3 	bl	d61c <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
   1d8d6:	2240      	movs	r2, #64	; 0x40
   1d8d8:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   1d8dc:	4620      	mov	r0, r4
   1d8de:	f7ff ff05 	bl	1d6ec <tc_sha256_update>
			       &ctx->key[TC_SHA256_BLOCK_SIZE],
				TC_SHA256_BLOCK_SIZE);
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
   1d8e2:	4632      	mov	r2, r6
   1d8e4:	4629      	mov	r1, r5
   1d8e6:	4620      	mov	r0, r4
   1d8e8:	f7ff ff00 	bl	1d6ec <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
   1d8ec:	4621      	mov	r1, r4
   1d8ee:	4628      	mov	r0, r5
   1d8f0:	f7ff ff22 	bl	1d738 <tc_sha256_final>

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));
   1d8f4:	4620      	mov	r0, r4
   1d8f6:	22f0      	movs	r2, #240	; 0xf0
   1d8f8:	2100      	movs	r1, #0
   1d8fa:	f7ff fcd9 	bl	1d2b0 <_set>

	return TC_CRYPTO_SUCCESS;
   1d8fe:	2001      	movs	r0, #1
}
   1d900:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1d902:	2000      	movs	r0, #0
   1d904:	e7fc      	b.n	1d900 <tc_hmac_final+0x46>
   1d906:	4610      	mov	r0, r2
   1d908:	e7fa      	b.n	1d900 <tc_hmac_final+0x46>

0001d90a <update>:

/*
 * Assumes: prng != NULL
 */
static void update(TCHmacPrng_t prng, const uint8_t *data, unsigned int datalen, const uint8_t *additional_data, unsigned int additional_datalen)
{
   1d90a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d90e:	4604      	mov	r4, r0
	const uint8_t separator0 = 0x00;
	const uint8_t separator1 = 0x01;
   1d910:	f04f 0b01 	mov.w	fp, #1
{
   1d914:	461f      	mov	r7, r3
	const uint8_t separator0 = 0x00;
   1d916:	2300      	movs	r3, #0
{
   1d918:	4688      	mov	r8, r1

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1d91a:	f100 06f0 	add.w	r6, r0, #240	; 0xf0
   1d91e:	4631      	mov	r1, r6
{
   1d920:	4691      	mov	r9, r2
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1d922:	2220      	movs	r2, #32
	const uint8_t separator0 = 0x00;
   1d924:	f88d 3006 	strb.w	r3, [sp, #6]
{
   1d928:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
	const uint8_t separator1 = 0x01;
   1d92c:	f88d b007 	strb.w	fp, [sp, #7]

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1d930:	f504 7588 	add.w	r5, r4, #272	; 0x110
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1d934:	f7ff ff7a 	bl	1d82c <tc_hmac_set_key>
	(void)tc_hmac_init(&prng->h);
   1d938:	4620      	mov	r0, r4
   1d93a:	f7ff ffab 	bl	1d894 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1d93e:	2220      	movs	r2, #32
   1d940:	4629      	mov	r1, r5
   1d942:	4620      	mov	r0, r4
   1d944:	f7ff ffb3 	bl	1d8ae <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
   1d948:	465a      	mov	r2, fp
   1d94a:	4620      	mov	r0, r4
   1d94c:	f10d 0106 	add.w	r1, sp, #6
   1d950:	f7ff ffad 	bl	1d8ae <tc_hmac_update>

	if (data && datalen)
   1d954:	f1b8 0f00 	cmp.w	r8, #0
   1d958:	d007      	beq.n	1d96a <update+0x60>
   1d95a:	f1b9 0f00 	cmp.w	r9, #0
   1d95e:	d004      	beq.n	1d96a <update+0x60>
		(void)tc_hmac_update(&prng->h, data, datalen);
   1d960:	464a      	mov	r2, r9
   1d962:	4641      	mov	r1, r8
   1d964:	4620      	mov	r0, r4
   1d966:	f7ff ffa2 	bl	1d8ae <tc_hmac_update>
	if (additional_data && additional_datalen)
   1d96a:	b13f      	cbz	r7, 1d97c <update+0x72>
   1d96c:	f1ba 0f00 	cmp.w	sl, #0
   1d970:	d004      	beq.n	1d97c <update+0x72>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   1d972:	4652      	mov	r2, sl
   1d974:	4639      	mov	r1, r7
   1d976:	4620      	mov	r0, r4
   1d978:	f7ff ff99 	bl	1d8ae <tc_hmac_update>

	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   1d97c:	4622      	mov	r2, r4
   1d97e:	2120      	movs	r1, #32
   1d980:	4630      	mov	r0, r6
   1d982:	f7ff ff9a 	bl	1d8ba <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1d986:	2220      	movs	r2, #32
   1d988:	4631      	mov	r1, r6
   1d98a:	4620      	mov	r0, r4
   1d98c:	f7ff ff4e 	bl	1d82c <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   1d990:	4620      	mov	r0, r4
   1d992:	f7ff ff7f 	bl	1d894 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1d996:	2220      	movs	r2, #32
   1d998:	4629      	mov	r1, r5
   1d99a:	4620      	mov	r0, r4
   1d99c:	f7ff ff87 	bl	1d8ae <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   1d9a0:	4622      	mov	r2, r4
   1d9a2:	2120      	movs	r1, #32
   1d9a4:	4628      	mov	r0, r5
   1d9a6:	f7ff ff88 	bl	1d8ba <tc_hmac_final>

	if (data == 0 || datalen == 0)
   1d9aa:	f1b8 0f00 	cmp.w	r8, #0
   1d9ae:	d03a      	beq.n	1da26 <update+0x11c>
   1d9b0:	f1b9 0f00 	cmp.w	r9, #0
   1d9b4:	d037      	beq.n	1da26 <update+0x11c>
		return;

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1d9b6:	2220      	movs	r2, #32
   1d9b8:	4631      	mov	r1, r6
   1d9ba:	4620      	mov	r0, r4
   1d9bc:	f7ff ff36 	bl	1d82c <tc_hmac_set_key>

	/* use current state, e and separator 1 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
   1d9c0:	4620      	mov	r0, r4
   1d9c2:	f7ff ff67 	bl	1d894 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1d9c6:	2220      	movs	r2, #32
   1d9c8:	4629      	mov	r1, r5
   1d9ca:	4620      	mov	r0, r4
   1d9cc:	f7ff ff6f 	bl	1d8ae <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
   1d9d0:	2201      	movs	r2, #1
   1d9d2:	f10d 0107 	add.w	r1, sp, #7
   1d9d6:	4620      	mov	r0, r4
   1d9d8:	f7ff ff69 	bl	1d8ae <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, data, datalen);
   1d9dc:	464a      	mov	r2, r9
   1d9de:	4641      	mov	r1, r8
   1d9e0:	4620      	mov	r0, r4
   1d9e2:	f7ff ff64 	bl	1d8ae <tc_hmac_update>
	if (additional_data && additional_datalen)
   1d9e6:	b13f      	cbz	r7, 1d9f8 <update+0xee>
   1d9e8:	f1ba 0f00 	cmp.w	sl, #0
   1d9ec:	d004      	beq.n	1d9f8 <update+0xee>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   1d9ee:	4652      	mov	r2, sl
   1d9f0:	4639      	mov	r1, r7
   1d9f2:	4620      	mov	r0, r4
   1d9f4:	f7ff ff5b 	bl	1d8ae <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   1d9f8:	4622      	mov	r2, r4
   1d9fa:	2120      	movs	r1, #32
   1d9fc:	4630      	mov	r0, r6
   1d9fe:	f7ff ff5c 	bl	1d8ba <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1da02:	2220      	movs	r2, #32
   1da04:	4631      	mov	r1, r6
   1da06:	4620      	mov	r0, r4
   1da08:	f7ff ff10 	bl	1d82c <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   1da0c:	4620      	mov	r0, r4
   1da0e:	f7ff ff41 	bl	1d894 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1da12:	2220      	movs	r2, #32
   1da14:	4629      	mov	r1, r5
   1da16:	4620      	mov	r0, r4
   1da18:	f7ff ff49 	bl	1d8ae <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   1da1c:	4622      	mov	r2, r4
   1da1e:	2120      	movs	r1, #32
   1da20:	4628      	mov	r0, r5
   1da22:	f7ff ff4a 	bl	1d8ba <tc_hmac_final>
}
   1da26:	b003      	add	sp, #12
   1da28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001da2c <tc_hmac_prng_init>:

int tc_hmac_prng_init(TCHmacPrng_t prng,
		      const uint8_t *personalization,
		      unsigned int plen)
{
   1da2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1da2e:	460c      	mov	r4, r1
   1da30:	4617      	mov	r7, r2

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   1da32:	4605      	mov	r5, r0
   1da34:	b1b0      	cbz	r0, 1da64 <tc_hmac_prng_init+0x38>
	    personalization == (uint8_t *) 0 ||
   1da36:	b1b9      	cbz	r1, 1da68 <tc_hmac_prng_init+0x3c>

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
	_set(prng->v, 0x01, sizeof(prng->v));

	update(prng, personalization, plen, 0, 0);
   1da38:	2600      	movs	r6, #0
	_set(prng->key, 0x00, sizeof(prng->key));
   1da3a:	2220      	movs	r2, #32
   1da3c:	2100      	movs	r1, #0
   1da3e:	30f0      	adds	r0, #240	; 0xf0
   1da40:	f7ff fc36 	bl	1d2b0 <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
   1da44:	2220      	movs	r2, #32
   1da46:	2101      	movs	r1, #1
   1da48:	f505 7088 	add.w	r0, r5, #272	; 0x110
   1da4c:	f7ff fc30 	bl	1d2b0 <_set>
	update(prng, personalization, plen, 0, 0);
   1da50:	4628      	mov	r0, r5
   1da52:	4633      	mov	r3, r6
   1da54:	463a      	mov	r2, r7
   1da56:	4621      	mov	r1, r4
   1da58:	9600      	str	r6, [sp, #0]
   1da5a:	f7ff ff56 	bl	1d90a <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;

	return TC_CRYPTO_SUCCESS;
   1da5e:	2001      	movs	r0, #1
	prng->countdown = 0;
   1da60:	f8c5 6130 	str.w	r6, [r5, #304]	; 0x130
}
   1da64:	b003      	add	sp, #12
   1da66:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   1da68:	4608      	mov	r0, r1
   1da6a:	e7fb      	b.n	1da64 <tc_hmac_prng_init+0x38>

0001da6c <tc_hmac_prng_reseed>:
int tc_hmac_prng_reseed(TCHmacPrng_t prng,
			const uint8_t *seed,
			unsigned int seedlen,
			const uint8_t *additional_input,
			unsigned int additionallen)
{
   1da6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1da6e:	9c08      	ldr	r4, [sp, #32]

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   1da70:	4605      	mov	r5, r0
   1da72:	b180      	cbz	r0, 1da96 <tc_hmac_prng_reseed+0x2a>
   1da74:	b179      	cbz	r1, 1da96 <tc_hmac_prng_reseed+0x2a>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
   1da76:	2a1f      	cmp	r2, #31
   1da78:	d90d      	bls.n	1da96 <tc_hmac_prng_reseed+0x2a>
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
   1da7a:	b153      	cbz	r3, 1da92 <tc_hmac_prng_reseed+0x26>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
   1da7c:	b16c      	cbz	r4, 1da9a <tc_hmac_prng_reseed+0x2e>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
		} else {
			/* call update for the seed and additional_input */
			update(prng, seed, seedlen, additional_input, additionallen);
   1da7e:	9400      	str	r4, [sp, #0]
		}
	} else {
		/* call update only for the seed */
		update(prng, seed, seedlen, 0, 0);
   1da80:	f7ff ff43 	bl	1d90a <update>
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
   1da84:	f04f 33ff 	mov.w	r3, #4294967295

	return TC_CRYPTO_SUCCESS;
   1da88:	2001      	movs	r0, #1
	prng->countdown = MAX_GENS;
   1da8a:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
}
   1da8e:	b003      	add	sp, #12
   1da90:	bdf0      	pop	{r4, r5, r6, r7, pc}
		update(prng, seed, seedlen, 0, 0);
   1da92:	9300      	str	r3, [sp, #0]
   1da94:	e7f4      	b.n	1da80 <tc_hmac_prng_reseed+0x14>
		return TC_CRYPTO_FAIL;
   1da96:	2000      	movs	r0, #0
   1da98:	e7f9      	b.n	1da8e <tc_hmac_prng_reseed+0x22>
   1da9a:	4620      	mov	r0, r4
   1da9c:	e7f7      	b.n	1da8e <tc_hmac_prng_reseed+0x22>

0001da9e <tc_hmac_prng_generate>:

int tc_hmac_prng_generate(uint8_t *out, unsigned int outlen, TCHmacPrng_t prng)
{
   1da9e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1daa2:	460d      	mov	r5, r1
   1daa4:	4614      	mov	r4, r2
	unsigned int bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
   1daa6:	4680      	mov	r8, r0
   1daa8:	b3d8      	cbz	r0, 1db22 <tc_hmac_prng_generate+0x84>
   1daaa:	b3d2      	cbz	r2, 1db22 <tc_hmac_prng_generate+0x84>
	    prng == (TCHmacPrng_t) 0 ||
   1daac:	1e4b      	subs	r3, r1, #1
   1daae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
   1dab2:	d236      	bcs.n	1db22 <tc_hmac_prng_generate+0x84>
	    outlen == 0 ||
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
   1dab4:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   1dab8:	b3ab      	cbz	r3, 1db26 <tc_hmac_prng_generate+0x88>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
   1daba:	3b01      	subs	r3, #1
   1dabc:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
		/* configure the new prng key into the prng's instance of hmac */
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1dac0:	f102 09f0 	add.w	r9, r2, #240	; 0xf0

		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1dac4:	f502 7788 	add.w	r7, r2, #272	; 0x110
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1dac8:	2220      	movs	r2, #32
   1daca:	4649      	mov	r1, r9
   1dacc:	4620      	mov	r0, r4
   1dace:	f7ff fead 	bl	1d82c <tc_hmac_set_key>
		(void)tc_hmac_init(&prng->h);
   1dad2:	4620      	mov	r0, r4
   1dad4:	f7ff fede 	bl	1d894 <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1dad8:	2220      	movs	r2, #32
   1dada:	4639      	mov	r1, r7
   1dadc:	4620      	mov	r0, r4
   1dade:	f7ff fee6 	bl	1d8ae <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   1dae2:	4622      	mov	r2, r4
   1dae4:	2120      	movs	r1, #32
   1dae6:	4638      	mov	r0, r7
   1dae8:	f7ff fee7 	bl	1d8ba <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
   1daec:	2d20      	cmp	r5, #32
   1daee:	462e      	mov	r6, r5
   1daf0:	bf28      	it	cs
   1daf2:	2620      	movcs	r6, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
   1daf4:	4640      	mov	r0, r8
   1daf6:	4633      	mov	r3, r6
   1daf8:	463a      	mov	r2, r7
   1dafa:	4631      	mov	r1, r6
   1dafc:	f7ff fbcb 	bl	1d296 <_copy>

		out += bufferlen;
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
   1db00:	2d20      	cmp	r5, #32
   1db02:	bf38      	it	cc
   1db04:	2520      	movcc	r5, #32
	while (outlen != 0) {
   1db06:	3d20      	subs	r5, #32
		out += bufferlen;
   1db08:	44b0      	add	r8, r6
	while (outlen != 0) {
   1db0a:	d1dd      	bne.n	1dac8 <tc_hmac_prng_generate+0x2a>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, 0, 0, 0, 0);
   1db0c:	4620      	mov	r0, r4
   1db0e:	462b      	mov	r3, r5
   1db10:	462a      	mov	r2, r5
   1db12:	4629      	mov	r1, r5
   1db14:	9500      	str	r5, [sp, #0]
   1db16:	f7ff fef8 	bl	1d90a <update>

	return TC_CRYPTO_SUCCESS;
   1db1a:	2001      	movs	r0, #1
}
   1db1c:	b003      	add	sp, #12
   1db1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   1db22:	2000      	movs	r0, #0
   1db24:	e7fa      	b.n	1db1c <tc_hmac_prng_generate+0x7e>
		return TC_HMAC_PRNG_RESEED_REQ;
   1db26:	f04f 30ff 	mov.w	r0, #4294967295
   1db2a:	e7f7      	b.n	1db1c <tc_hmac_prng_generate+0x7e>

0001db2c <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   1db2c:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   1db2e:	6800      	ldr	r0, [r0, #0]
   1db30:	f7ef bdbe 	b.w	d6b0 <z_arm_fatal_error>

0001db34 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1db34:	2100      	movs	r1, #0
   1db36:	2001      	movs	r0, #1
   1db38:	f7ef bdba 	b.w	d6b0 <z_arm_fatal_error>

0001db3c <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   1db3c:	b508      	push	{r3, lr}
	handler();
   1db3e:	f7ef fe6b 	bl	d818 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1db42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1db46:	f7ef bf35 	b.w	d9b4 <z_arm_exc_exit>

0001db4a <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   1db4a:	6e83      	ldr	r3, [r0, #104]	; 0x68
   1db4c:	f383 880b 	msr	PSPLIM, r3
}
   1db50:	4770      	bx	lr

0001db52 <z_log_msg_static_create.constprop.0>:
   1db52:	2300      	movs	r3, #0
   1db54:	f7ee bbae 	b.w	c2b4 <z_impl_z_log_msg_static_create>

0001db58 <z_arm_save_fp_context>:
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   1db58:	4770      	bx	lr

0001db5a <z_arm_restore_fp_context>:

void z_arm_restore_fp_context(const struct fpu_ctx_full *buffer)
   1db5a:	4770      	bx	lr

0001db5c <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   1db5c:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   1db60:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1db64:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
   1db66:	bf08      	it	eq
   1db68:	f06f 0015 	mvneq.w	r0, #21
   1db6c:	4770      	bx	lr

0001db6e <mpu_configure_region>:
{
   1db6e:	b530      	push	{r4, r5, lr}
	p_attr->rbar = attr->rbar &
   1db70:	890a      	ldrh	r2, [r1, #8]
   1db72:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
   1db74:	680b      	ldr	r3, [r1, #0]
		&new_region->attr, new_region->start, new_region->size);
   1db76:	684c      	ldr	r4, [r1, #4]
   1db78:	f002 021f 	and.w	r2, r2, #31
{
   1db7c:	b085      	sub	sp, #20
   1db7e:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	region_conf.base = new_region->start;
   1db82:	9300      	str	r3, [sp, #0]
   1db84:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1db88:	f023 031f 	bic.w	r3, r3, #31
   1db8c:	1e62      	subs	r2, r4, #1
   1db8e:	4413      	add	r3, r2
   1db90:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   1db94:	2807      	cmp	r0, #7
   1db96:	9303      	str	r3, [sp, #12]
   1db98:	d904      	bls.n	1dba4 <mpu_configure_region+0x36>
}
   1db9a:	b005      	add	sp, #20
   1db9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1dba0:	f7f0 bb68 	b.w	e274 <region_allocate_and_init.part.0>
	region_init(index, region_conf);
   1dba4:	4669      	mov	r1, sp
   1dba6:	f7f0 fb4b 	bl	e240 <region_init>
}
   1dbaa:	b005      	add	sp, #20
   1dbac:	bd30      	pop	{r4, r5, pc}

0001dbae <malloc_prepare>:
}
   1dbae:	2000      	movs	r0, #0
   1dbb0:	4770      	bx	lr

0001dbb2 <_stdout_hook_default>:
}
   1dbb2:	f04f 30ff 	mov.w	r0, #4294967295
   1dbb6:	4770      	bx	lr

0001dbb8 <_stdin_hook_default>:
}
   1dbb8:	2000      	movs	r0, #0
   1dbba:	4770      	bx	lr

0001dbbc <_read>:
{
   1dbbc:	4608      	mov	r0, r1
   1dbbe:	4611      	mov	r1, r2
	return z_impl_zephyr_read_stdin(buf, nbytes);
   1dbc0:	f7f0 bcf0 	b.w	e5a4 <z_impl_zephyr_read_stdin>

0001dbc4 <_write>:
{
   1dbc4:	4608      	mov	r0, r1
   1dbc6:	4611      	mov	r1, r2
	return z_impl_zephyr_write_stdout(buf, nbytes);
   1dbc8:	f7f0 bd00 	b.w	e5cc <z_impl_zephyr_write_stdout>

0001dbcc <_close>:
int _close(int file)
   1dbcc:	f04f 30ff 	mov.w	r0, #4294967295
   1dbd0:	4770      	bx	lr

0001dbd2 <_lseek>:
}
   1dbd2:	2000      	movs	r0, #0
   1dbd4:	4770      	bx	lr

0001dbd6 <_isatty>:
}
   1dbd6:	2802      	cmp	r0, #2
   1dbd8:	bfcc      	ite	gt
   1dbda:	2000      	movgt	r0, #0
   1dbdc:	2001      	movle	r0, #1
   1dbde:	4770      	bx	lr

0001dbe0 <_kill>:
}
   1dbe0:	2000      	movs	r0, #0
   1dbe2:	4770      	bx	lr

0001dbe4 <_getpid>:
}
   1dbe4:	2000      	movs	r0, #0
   1dbe6:	4770      	bx	lr

0001dbe8 <_fstat>:
	st->st_mode = S_IFCHR;
   1dbe8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   1dbec:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   1dbee:	604b      	str	r3, [r1, #4]
}
   1dbf0:	4770      	bx	lr

0001dbf2 <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
   1dbf2:	b510      	push	{r4, lr}
   1dbf4:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(lock != NULL);

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
   1dbf6:	2014      	movs	r0, #20
   1dbf8:	f7fc ff96 	bl	1ab28 <malloc>
   1dbfc:	6020      	str	r0, [r4, #0]
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");

	k_mutex_init((struct k_mutex *)*lock);
}
   1dbfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_init(mutex);
   1dc02:	f003 ba25 	b.w	21050 <z_impl_k_mutex_init>

0001dc06 <__retarget_lock_acquire_recursive>:
	return z_impl_k_mutex_lock(mutex, timeout);
   1dc06:	f04f 32ff 	mov.w	r2, #4294967295
   1dc0a:	f04f 33ff 	mov.w	r3, #4294967295
   1dc0e:	f7fb be29 	b.w	19864 <z_impl_k_mutex_lock>

0001dc12 <__retarget_lock_release_recursive>:
	return z_impl_k_mutex_unlock(mutex);
   1dc12:	f7fb bea1 	b.w	19958 <z_impl_k_mutex_unlock>

0001dc16 <bt_rpa_irk_matches>:
	return 0;
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   1dc16:	b530      	push	{r4, r5, lr}
   1dc18:	4605      	mov	r5, r0
	memcpy(res, r, 3);
   1dc1a:	f8b1 2003 	ldrh.w	r2, [r1, #3]
{
   1dc1e:	b087      	sub	sp, #28
	memcpy(res, r, 3);
   1dc20:	794b      	ldrb	r3, [r1, #5]
   1dc22:	f8ad 2008 	strh.w	r2, [sp, #8]
{
   1dc26:	460c      	mov	r4, r1
	(void)memset(res + 3, 0, 13);
   1dc28:	220d      	movs	r2, #13
   1dc2a:	2100      	movs	r1, #0
   1dc2c:	f10d 000b 	add.w	r0, sp, #11
	memcpy(res, r, 3);
   1dc30:	f88d 300a 	strb.w	r3, [sp, #10]
	(void)memset(res + 3, 0, 13);
   1dc34:	f003 ff38 	bl	21aa8 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   1dc38:	aa02      	add	r2, sp, #8
   1dc3a:	4611      	mov	r1, r2
   1dc3c:	4628      	mov	r0, r5
   1dc3e:	f000 fb57 	bl	1e2f0 <bt_encrypt_le>
	if (err) {
   1dc42:	b110      	cbz	r0, 1dc4a <bt_rpa_irk_matches+0x34>

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
	if (err) {
		return false;
   1dc44:	2000      	movs	r0, #0
	}

	return !memcmp(addr->val, hash, 3);
}
   1dc46:	b007      	add	sp, #28
   1dc48:	bd30      	pop	{r4, r5, pc}
	memcpy(out, res, 3);
   1dc4a:	9b02      	ldr	r3, [sp, #8]
	return !memcmp(addr->val, hash, 3);
   1dc4c:	2203      	movs	r2, #3
	memcpy(out, res, 3);
   1dc4e:	f8ad 3004 	strh.w	r3, [sp, #4]
	return !memcmp(addr->val, hash, 3);
   1dc52:	4620      	mov	r0, r4
	memcpy(out, res, 3);
   1dc54:	0c1b      	lsrs	r3, r3, #16
	return !memcmp(addr->val, hash, 3);
   1dc56:	a901      	add	r1, sp, #4
	memcpy(out, res, 3);
   1dc58:	f88d 3006 	strb.w	r3, [sp, #6]
	return !memcmp(addr->val, hash, 3);
   1dc5c:	f003 ff07 	bl	21a6e <memcmp>
   1dc60:	fab0 f080 	clz	r0, r0
   1dc64:	0940      	lsrs	r0, r0, #5
   1dc66:	e7ee      	b.n	1dc46 <bt_rpa_irk_matches+0x30>

0001dc68 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   1dc68:	b510      	push	{r4, lr}
   1dc6a:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   1dc6c:	7801      	ldrb	r1, [r0, #0]
   1dc6e:	7822      	ldrb	r2, [r4, #0]
{
   1dc70:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   1dc72:	428a      	cmp	r2, r1
   1dc74:	d00f      	beq.n	1dc96 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   1dc76:	4669      	mov	r1, sp
   1dc78:	f7f0 fd66 	bl	e748 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   1dc7c:	4620      	mov	r0, r4
   1dc7e:	a905      	add	r1, sp, #20
   1dc80:	f7f0 fd62 	bl	e748 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   1dc84:	2210      	movs	r2, #16
   1dc86:	f10d 0115 	add.w	r1, sp, #21
   1dc8a:	f10d 0001 	add.w	r0, sp, #1
   1dc8e:	f003 feee 	bl	21a6e <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   1dc92:	b00a      	add	sp, #40	; 0x28
   1dc94:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   1dc96:	2a01      	cmp	r2, #1
   1dc98:	d006      	beq.n	1dca8 <bt_uuid_cmp+0x40>
   1dc9a:	2a02      	cmp	r2, #2
   1dc9c:	d007      	beq.n	1dcae <bt_uuid_cmp+0x46>
   1dc9e:	b972      	cbnz	r2, 1dcbe <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   1dca0:	8840      	ldrh	r0, [r0, #2]
   1dca2:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1dca4:	1ac0      	subs	r0, r0, r3
   1dca6:	e7f4      	b.n	1dc92 <bt_uuid_cmp+0x2a>
   1dca8:	6840      	ldr	r0, [r0, #4]
   1dcaa:	6863      	ldr	r3, [r4, #4]
   1dcac:	e7fa      	b.n	1dca4 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1dcae:	2210      	movs	r2, #16
   1dcb0:	1c61      	adds	r1, r4, #1
   1dcb2:	3001      	adds	r0, #1
}
   1dcb4:	b00a      	add	sp, #40	; 0x28
   1dcb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1dcba:	f003 bed8 	b.w	21a6e <memcmp>
	switch (u1->type) {
   1dcbe:	f06f 0015 	mvn.w	r0, #21
   1dcc2:	e7e6      	b.n	1dc92 <bt_uuid_cmp+0x2a>

0001dcc4 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   1dcc4:	2a04      	cmp	r2, #4
   1dcc6:	d00a      	beq.n	1dcde <bt_uuid_create+0x1a>
   1dcc8:	2a10      	cmp	r2, #16
   1dcca:	d00d      	beq.n	1dce8 <bt_uuid_create+0x24>
   1dccc:	2a02      	cmp	r2, #2
   1dcce:	f04f 0300 	mov.w	r3, #0
   1dcd2:	d115      	bne.n	1dd00 <bt_uuid_create+0x3c>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   1dcd4:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   1dcd6:	880b      	ldrh	r3, [r1, #0]
   1dcd8:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   1dcda:	2001      	movs	r0, #1
   1dcdc:	4770      	bx	lr
		uuid->type = BT_UUID_TYPE_32;
   1dcde:	2301      	movs	r3, #1
   1dce0:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1dce2:	680b      	ldr	r3, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   1dce4:	6043      	str	r3, [r0, #4]
		break;
   1dce6:	e7f8      	b.n	1dcda <bt_uuid_create+0x16>
		uuid->type = BT_UUID_TYPE_128;
   1dce8:	2302      	movs	r3, #2
   1dcea:	f800 3b01 	strb.w	r3, [r0], #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1dcee:	f101 0310 	add.w	r3, r1, #16
   1dcf2:	f851 2b04 	ldr.w	r2, [r1], #4
   1dcf6:	4299      	cmp	r1, r3
   1dcf8:	f840 2b04 	str.w	r2, [r0], #4
   1dcfc:	d1f9      	bne.n	1dcf2 <bt_uuid_create+0x2e>
   1dcfe:	e7ec      	b.n	1dcda <bt_uuid_create+0x16>
	switch (data_len) {
   1dd00:	4618      	mov	r0, r3
}
   1dd02:	4770      	bx	lr

0001dd04 <bt_addr_le_create_static>:
#include <zephyr/bluetooth/addr.h>
#include <zephyr/bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   1dd04:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   1dd06:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   1dd08:	2106      	movs	r1, #6
{
   1dd0a:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   1dd0c:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   1dd10:	f7f3 f9fc 	bl	1110c <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   1dd14:	b918      	cbnz	r0, 1dd1e <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   1dd16:	79a3      	ldrb	r3, [r4, #6]
   1dd18:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1dd1c:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   1dd1e:	bd10      	pop	{r4, pc}

0001dd20 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   1dd20:	280f      	cmp	r0, #15
   1dd22:	d807      	bhi.n	1dd34 <bt_hci_evt_get_flags+0x14>
   1dd24:	280d      	cmp	r0, #13
   1dd26:	d80b      	bhi.n	1dd40 <bt_hci_evt_get_flags+0x20>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   1dd28:	2805      	cmp	r0, #5
   1dd2a:	bf08      	it	eq
   1dd2c:	2003      	moveq	r0, #3
   1dd2e:	bf18      	it	ne
   1dd30:	2002      	movne	r0, #2
   1dd32:	4770      	bx	lr
	switch (evt) {
   1dd34:	2813      	cmp	r0, #19
   1dd36:	d003      	beq.n	1dd40 <bt_hci_evt_get_flags+0x20>
		return BT_HCI_EVT_FLAG_RECV;
   1dd38:	281a      	cmp	r0, #26
   1dd3a:	bf08      	it	eq
   1dd3c:	2001      	moveq	r0, #1
   1dd3e:	e7f6      	b.n	1dd2e <bt_hci_evt_get_flags+0xe>
	switch (evt) {
   1dd40:	2001      	movs	r0, #1
	}
}
   1dd42:	4770      	bx	lr

0001dd44 <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   1dd44:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
   1dd48:	b183      	cbz	r3, 1dd6c <update_sec_level+0x28>
   1dd4a:	7b5a      	ldrb	r2, [r3, #13]
   1dd4c:	07d1      	lsls	r1, r2, #31
   1dd4e:	d50d      	bpl.n	1dd6c <update_sec_level+0x28>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   1dd50:	06d2      	lsls	r2, r2, #27
   1dd52:	d50d      	bpl.n	1dd70 <update_sec_level+0x2c>
   1dd54:	7b1b      	ldrb	r3, [r3, #12]
   1dd56:	2b10      	cmp	r3, #16
   1dd58:	bf14      	ite	ne
   1dd5a:	2303      	movne	r3, #3
   1dd5c:	2304      	moveq	r3, #4
			conn->sec_level = BT_SECURITY_L3;
   1dd5e:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   1dd60:	7a80      	ldrb	r0, [r0, #10]
}
   1dd62:	4298      	cmp	r0, r3
   1dd64:	bf8c      	ite	hi
   1dd66:	2000      	movhi	r0, #0
   1dd68:	2001      	movls	r0, #1
   1dd6a:	4770      	bx	lr
   1dd6c:	2302      	movs	r3, #2
   1dd6e:	e7f6      	b.n	1dd5e <update_sec_level+0x1a>
   1dd70:	2303      	movs	r3, #3
   1dd72:	e7f4      	b.n	1dd5e <update_sec_level+0x1a>

0001dd74 <hci_vendor_event>:
}
   1dd74:	4770      	bx	lr

0001dd76 <atomic_or>:
{
   1dd76:	4603      	mov	r3, r0
   1dd78:	b510      	push	{r4, lr}
}
   1dd7a:	e8d3 0fef 	ldaex	r0, [r3]
   1dd7e:	ea40 0201 	orr.w	r2, r0, r1
   1dd82:	e8c3 2fe4 	stlex	r4, r2, [r3]
   1dd86:	2c00      	cmp	r4, #0
   1dd88:	d1f7      	bne.n	1dd7a <atomic_or+0x4>
   1dd8a:	bd10      	pop	{r4, pc}

0001dd8c <bt_addr_copy>:
   1dd8c:	680b      	ldr	r3, [r1, #0]
   1dd8e:	6003      	str	r3, [r0, #0]
   1dd90:	888b      	ldrh	r3, [r1, #4]
   1dd92:	8083      	strh	r3, [r0, #4]
}
   1dd94:	4770      	bx	lr

0001dd96 <bt_addr_le_copy>:
   1dd96:	680b      	ldr	r3, [r1, #0]
   1dd98:	6003      	str	r3, [r0, #0]
   1dd9a:	888b      	ldrh	r3, [r1, #4]
   1dd9c:	8083      	strh	r3, [r0, #4]
   1dd9e:	798b      	ldrb	r3, [r1, #6]
   1dda0:	7183      	strb	r3, [r0, #6]
}
   1dda2:	4770      	bx	lr

0001dda4 <z_log_msg_static_create.constprop.0>:
   1dda4:	2300      	movs	r3, #0
   1dda6:	f7ee ba85 	b.w	c2b4 <z_impl_z_log_msg_static_create>

0001ddaa <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1ddaa:	e8d0 3fef 	ldaex	r3, [r0]
   1ddae:	400b      	ands	r3, r1
   1ddb0:	e8c0 3fe2 	stlex	r2, r3, [r0]
   1ddb4:	2a00      	cmp	r2, #0
   1ddb6:	d1f8      	bne.n	1ddaa <atomic_and.isra.0>
}
   1ddb8:	4770      	bx	lr

0001ddba <sys_put_le64>:
	dst[1] = val >> 8;
   1ddba:	f3c0 2307 	ubfx	r3, r0, #8, #8
   1ddbe:	7053      	strb	r3, [r2, #1]
	dst[0] = val;
   1ddc0:	2300      	movs	r3, #0
   1ddc2:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   1ddc4:	0e00      	lsrs	r0, r0, #24
   1ddc6:	70d0      	strb	r0, [r2, #3]
   1ddc8:	f3c1 2007 	ubfx	r0, r1, #8, #8
   1ddcc:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   1ddce:	7093      	strb	r3, [r2, #2]
   1ddd0:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   1ddd2:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   1ddd4:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   1ddd6:	71d1      	strb	r1, [r2, #7]
}
   1ddd8:	4770      	bx	lr

0001ddda <bt_hci_disconnect>:
{
   1ddda:	b570      	push	{r4, r5, r6, lr}
   1dddc:	4606      	mov	r6, r0
   1ddde:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   1dde0:	f240 4006 	movw	r0, #1030	; 0x406
   1dde4:	2103      	movs	r1, #3
   1dde6:	f7f1 f9c7 	bl	f178 <bt_hci_cmd_create>
	if (!buf) {
   1ddea:	4604      	mov	r4, r0
   1ddec:	b168      	cbz	r0, 1de0a <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   1ddee:	2103      	movs	r1, #3
   1ddf0:	3008      	adds	r0, #8
   1ddf2:	f002 f84b 	bl	1fe8c <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   1ddf6:	8006      	strh	r6, [r0, #0]
	disconn->reason = reason;
   1ddf8:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1ddfa:	4621      	mov	r1, r4
}
   1ddfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1de00:	2200      	movs	r2, #0
   1de02:	f240 4006 	movw	r0, #1030	; 0x406
   1de06:	f7f1 b9f1 	b.w	f1ec <bt_hci_cmd_send_sync>
}
   1de0a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1de0e:	bd70      	pop	{r4, r5, r6, pc}

0001de10 <bt_le_set_data_len>:
{
   1de10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1de12:	4607      	mov	r7, r0
   1de14:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1de16:	f242 0022 	movw	r0, #8226	; 0x2022
   1de1a:	2106      	movs	r1, #6
{
   1de1c:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1de1e:	f7f1 f9ab 	bl	f178 <bt_hci_cmd_create>
	if (!buf) {
   1de22:	4604      	mov	r4, r0
   1de24:	b178      	cbz	r0, 1de46 <bt_le_set_data_len+0x36>
   1de26:	2106      	movs	r1, #6
   1de28:	3008      	adds	r0, #8
   1de2a:	f002 f82f 	bl	1fe8c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1de2e:	883b      	ldrh	r3, [r7, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   1de30:	8046      	strh	r6, [r0, #2]
	cp->handle = sys_cpu_to_le16(conn->handle);
   1de32:	8003      	strh	r3, [r0, #0]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   1de34:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   1de36:	4621      	mov	r1, r4
}
   1de38:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   1de3c:	2200      	movs	r2, #0
   1de3e:	f242 0022 	movw	r0, #8226	; 0x2022
   1de42:	f7f1 b9d3 	b.w	f1ec <bt_hci_cmd_send_sync>
}
   1de46:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1de4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001de4c <bt_le_set_phy>:
{
   1de4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1de50:	4681      	mov	r9, r0
   1de52:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1de54:	f242 0032 	movw	r0, #8242	; 0x2032
   1de58:	2107      	movs	r1, #7
{
   1de5a:	4617      	mov	r7, r2
   1de5c:	461e      	mov	r6, r3
   1de5e:	f89d a020 	ldrb.w	sl, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1de62:	f7f1 f989 	bl	f178 <bt_hci_cmd_create>
	if (!buf) {
   1de66:	4605      	mov	r5, r0
   1de68:	b1a0      	cbz	r0, 1de94 <bt_le_set_phy+0x48>
   1de6a:	2107      	movs	r1, #7
   1de6c:	3008      	adds	r0, #8
   1de6e:	f002 f80d 	bl	1fe8c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1de72:	f8b9 3000 	ldrh.w	r3, [r9]
	cp->all_phys = all_phys;
   1de76:	f880 8002 	strb.w	r8, [r0, #2]
	cp->handle = sys_cpu_to_le16(conn->handle);
   1de7a:	8003      	strh	r3, [r0, #0]
	cp->tx_phys = pref_tx_phy;
   1de7c:	70c7      	strb	r7, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   1de7e:	7106      	strb	r6, [r0, #4]
	cp->phy_opts = phy_opts;
   1de80:	f8a0 a005 	strh.w	sl, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   1de84:	4629      	mov	r1, r5
}
   1de86:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   1de8a:	2200      	movs	r2, #0
   1de8c:	f242 0032 	movw	r0, #8242	; 0x2032
   1de90:	f7f1 b9ac 	b.w	f1ec <bt_hci_cmd_send_sync>
}
   1de94:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1de98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001de9c <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   1de9c:	6880      	ldr	r0, [r0, #8]
   1de9e:	f7f1 ba83 	b.w	f3a8 <bt_hci_le_enh_conn_complete>

0001dea2 <bt_le_conn_params_valid>:
{
   1dea2:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   1dea4:	8803      	ldrh	r3, [r0, #0]
   1dea6:	8842      	ldrh	r2, [r0, #2]
   1dea8:	4293      	cmp	r3, r2
   1deaa:	d819      	bhi.n	1dee0 <bt_le_conn_params_valid+0x3e>
   1deac:	2b05      	cmp	r3, #5
   1deae:	d917      	bls.n	1dee0 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   1deb0:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   1deb4:	d814      	bhi.n	1dee0 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   1deb6:	8883      	ldrh	r3, [r0, #4]
   1deb8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   1debc:	d210      	bcs.n	1dee0 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   1debe:	f640 4476 	movw	r4, #3190	; 0xc76
   1dec2:	88c0      	ldrh	r0, [r0, #6]
   1dec4:	f1a0 010a 	sub.w	r1, r0, #10
   1dec8:	b289      	uxth	r1, r1
   1deca:	42a1      	cmp	r1, r4
   1decc:	d808      	bhi.n	1dee0 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   1dece:	3301      	adds	r3, #1
   1ded0:	b29b      	uxth	r3, r3
   1ded2:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   1ded4:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   1ded8:	bf34      	ite	cc
   1deda:	2001      	movcc	r0, #1
   1dedc:	2000      	movcs	r0, #0
}
   1dede:	bd10      	pop	{r4, pc}
		return false;
   1dee0:	2000      	movs	r0, #0
   1dee2:	e7fc      	b.n	1dede <bt_le_conn_params_valid+0x3c>

0001dee4 <le_conn_param_neg_reply>:
{
   1dee4:	b570      	push	{r4, r5, r6, lr}
   1dee6:	4606      	mov	r6, r0
   1dee8:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   1deea:	f242 0021 	movw	r0, #8225	; 0x2021
   1deee:	2103      	movs	r1, #3
   1def0:	f7f1 f942 	bl	f178 <bt_hci_cmd_create>
	if (!buf) {
   1def4:	4604      	mov	r4, r0
   1def6:	b918      	cbnz	r0, 1df00 <le_conn_param_neg_reply+0x1c>
}
   1def8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1defc:	f7f0 bd28 	b.w	e950 <le_conn_param_neg_reply.part.0>
   1df00:	2103      	movs	r1, #3
   1df02:	3008      	adds	r0, #8
   1df04:	f001 ffc2 	bl	1fe8c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   1df08:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   1df0a:	7085      	strb	r5, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1df0c:	4621      	mov	r1, r4
}
   1df0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1df12:	f242 0021 	movw	r0, #8225	; 0x2021
   1df16:	f7f1 bcd1 	b.w	f8bc <bt_hci_cmd_send>

0001df1a <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   1df1a:	f240 3041 	movw	r0, #833	; 0x341
   1df1e:	4770      	bx	lr

0001df20 <bt_addr_le_is_bonded>:
	return 0;
}
#endif

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   1df20:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   1df22:	f7f8 f939 	bl	16198 <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   1df26:	b118      	cbz	r0, 1df30 <bt_addr_le_is_bonded+0x10>
   1df28:	89c0      	ldrh	r0, [r0, #14]
   1df2a:	3800      	subs	r0, #0
   1df2c:	bf18      	it	ne
   1df2e:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
   1df30:	bd08      	pop	{r3, pc}

0001df32 <bt_addr_le_eq>:
	return memcmp(a, b, sizeof(*a));
   1df32:	2207      	movs	r2, #7
{
   1df34:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   1df36:	f003 fd9a 	bl	21a6e <memcmp>
}
   1df3a:	fab0 f080 	clz	r0, r0
   1df3e:	0940      	lsrs	r0, r0, #5
   1df40:	bd08      	pop	{r3, pc}

0001df42 <bt_addr_copy>:
   1df42:	680b      	ldr	r3, [r1, #0]
   1df44:	6003      	str	r3, [r0, #0]
   1df46:	888b      	ldrh	r3, [r1, #4]
   1df48:	8083      	strh	r3, [r0, #4]
}
   1df4a:	4770      	bx	lr

0001df4c <bt_addr_le_copy>:
   1df4c:	680b      	ldr	r3, [r1, #0]
   1df4e:	6003      	str	r3, [r0, #0]
   1df50:	888b      	ldrh	r3, [r1, #4]
   1df52:	8083      	strh	r3, [r0, #4]
   1df54:	798b      	ldrb	r3, [r1, #6]
   1df56:	7183      	strb	r3, [r0, #6]
}
   1df58:	4770      	bx	lr

0001df5a <hci_id_add>:
{
   1df5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1df5c:	460f      	mov	r7, r1
   1df5e:	4614      	mov	r4, r2
	if (id >= CONFIG_BT_ID_MAX) {
   1df60:	bb30      	cbnz	r0, 1dfb0 <hci_id_add+0x56>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   1df62:	2127      	movs	r1, #39	; 0x27
   1df64:	f242 0027 	movw	r0, #8231	; 0x2027
   1df68:	f7f1 f906 	bl	f178 <bt_hci_cmd_create>
	if (!buf) {
   1df6c:	4605      	mov	r5, r0
   1df6e:	b310      	cbz	r0, 1dfb6 <hci_id_add+0x5c>
   1df70:	2127      	movs	r1, #39	; 0x27
   1df72:	3008      	adds	r0, #8
   1df74:	f001 ff8a 	bl	1fe8c <net_buf_simple_add>
   1df78:	4622      	mov	r2, r4
   1df7a:	4606      	mov	r6, r0
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   1df7c:	4639      	mov	r1, r7
   1df7e:	f7ff ffe5 	bl	1df4c <bt_addr_le_copy>
   1df82:	1dc3      	adds	r3, r0, #7
   1df84:	f104 0110 	add.w	r1, r4, #16
   1df88:	f852 0b04 	ldr.w	r0, [r2], #4
   1df8c:	428a      	cmp	r2, r1
   1df8e:	f843 0b04 	str.w	r0, [r3], #4
   1df92:	d1f9      	bne.n	1df88 <hci_id_add+0x2e>
__ssp_bos_icheck3(memset, void *, int)
   1df94:	2210      	movs	r2, #16
   1df96:	2100      	movs	r1, #0
   1df98:	f106 0017 	add.w	r0, r6, #23
   1df9c:	f003 fd84 	bl	21aa8 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   1dfa0:	4629      	mov	r1, r5
}
   1dfa2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   1dfa6:	2200      	movs	r2, #0
   1dfa8:	f242 0027 	movw	r0, #8231	; 0x2027
   1dfac:	f7f1 b91e 	b.w	f1ec <bt_hci_cmd_send_sync>
		return -EINVAL;
   1dfb0:	f06f 0015 	mvn.w	r0, #21
}
   1dfb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   1dfb6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1dfba:	e7fb      	b.n	1dfb4 <hci_id_add+0x5a>

0001dfbc <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   1dfbc:	7a03      	ldrb	r3, [r0, #8]
{
   1dfbe:	4602      	mov	r2, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   1dfc0:	075b      	lsls	r3, r3, #29
   1dfc2:	d505      	bpl.n	1dfd0 <keys_add_id+0x14>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   1dfc4:	4601      	mov	r1, r0
   1dfc6:	322a      	adds	r2, #42	; 0x2a
   1dfc8:	f811 0b01 	ldrb.w	r0, [r1], #1
   1dfcc:	f7ff bfc5 	b.w	1df5a <hci_id_add>
}
   1dfd0:	4770      	bx	lr

0001dfd2 <z_log_msg_static_create.constprop.0>:
   1dfd2:	2300      	movs	r3, #0
   1dfd4:	f7ee b96e 	b.w	c2b4 <z_impl_z_log_msg_static_create>

0001dfd8 <addr_res_enable>:
{
   1dfd8:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   1dfda:	2101      	movs	r1, #1
{
   1dfdc:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   1dfde:	f242 002d 	movw	r0, #8237	; 0x202d
   1dfe2:	f7f1 f8c9 	bl	f178 <bt_hci_cmd_create>
	if (!buf) {
   1dfe6:	4604      	mov	r4, r0
   1dfe8:	b158      	cbz	r0, 1e002 <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   1dfea:	4629      	mov	r1, r5
   1dfec:	3008      	adds	r0, #8
   1dfee:	f001 ff5c 	bl	1feaa <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   1dff2:	4621      	mov	r1, r4
}
   1dff4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   1dff8:	2200      	movs	r2, #0
   1dffa:	f242 002d 	movw	r0, #8237	; 0x202d
   1dffe:	f7f1 b8f5 	b.w	f1ec <bt_hci_cmd_send_sync>
}
   1e002:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1e006:	bd38      	pop	{r3, r4, r5, pc}

0001e008 <adv_unpause_enabled>:
{
   1e008:	b410      	push	{r4}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e00a:	f100 0310 	add.w	r3, r0, #16
   1e00e:	e8d3 2fef 	ldaex	r2, [r3]
   1e012:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
   1e016:	e8c3 1fe4 	stlex	r4, r1, [r3]
   1e01a:	2c00      	cmp	r4, #0
   1e01c:	d1f7      	bne.n	1e00e <adv_unpause_enabled+0x6>
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   1e01e:	0413      	lsls	r3, r2, #16
   1e020:	d503      	bpl.n	1e02a <adv_unpause_enabled+0x22>
		bt_le_adv_set_enable(adv, true);
   1e022:	2101      	movs	r1, #1
}
   1e024:	bc10      	pop	{r4}
		bt_le_adv_set_enable(adv, true);
   1e026:	f000 b95e 	b.w	1e2e6 <bt_le_adv_set_enable>
}
   1e02a:	bc10      	pop	{r4}
   1e02c:	4770      	bx	lr

0001e02e <find_rl_conflict>:
{
   1e02e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conflict->found) {
   1e032:	684f      	ldr	r7, [r1, #4]
{
   1e034:	4605      	mov	r5, r0
   1e036:	460c      	mov	r4, r1
   1e038:	b086      	sub	sp, #24
	if (conflict->found) {
   1e03a:	b9c7      	cbnz	r7, 1e06e <find_rl_conflict+0x40>
	if ((resident->state & BT_KEYS_ID_ADDED) == 0) {
   1e03c:	7a03      	ldrb	r3, [r0, #8]
   1e03e:	075b      	lsls	r3, r3, #29
   1e040:	d515      	bpl.n	1e06e <find_rl_conflict+0x40>
	addr_conflict = bt_addr_le_eq(&conflict->candidate->addr, &resident->addr);
   1e042:	6808      	ldr	r0, [r1, #0]
   1e044:	1c69      	adds	r1, r5, #1
   1e046:	3001      	adds	r0, #1
   1e048:	f7ff ff73 	bl	1df32 <bt_addr_le_eq>
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   1e04c:	f8d4 8000 	ldr.w	r8, [r4]
   1e050:	2216      	movs	r2, #22
   1e052:	4639      	mov	r1, r7
	addr_conflict = bt_addr_le_eq(&conflict->candidate->addr, &resident->addr);
   1e054:	4606      	mov	r6, r0
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   1e056:	4668      	mov	r0, sp
   1e058:	f003 fd26 	bl	21aa8 <memset>
	bt_addr_t               rpa;
};

static inline bool bt_irk_eq(struct bt_irk const *a, struct bt_irk const *b)
{
	return (memcmp(a->val, b->val, sizeof(a->val)) == 0);
   1e05c:	2210      	movs	r2, #16
   1e05e:	4669      	mov	r1, sp
   1e060:	f108 002a 	add.w	r0, r8, #42	; 0x2a
   1e064:	f003 fd03 	bl	21a6e <memcmp>
   1e068:	b920      	cbnz	r0, 1e074 <find_rl_conflict+0x46>
	if (addr_conflict || irk_conflict) {
   1e06a:	b106      	cbz	r6, 1e06e <find_rl_conflict+0x40>
		conflict->found = resident;
   1e06c:	6065      	str	r5, [r4, #4]
}
   1e06e:	b006      	add	sp, #24
   1e070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e074:	6820      	ldr	r0, [r4, #0]
   1e076:	2210      	movs	r2, #16
   1e078:	f105 012a 	add.w	r1, r5, #42	; 0x2a
   1e07c:	302a      	adds	r0, #42	; 0x2a
   1e07e:	f003 fcf6 	bl	21a6e <memcmp>
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   1e082:	2800      	cmp	r0, #0
   1e084:	d0f2      	beq.n	1e06c <find_rl_conflict+0x3e>
   1e086:	e7f0      	b.n	1e06a <find_rl_conflict+0x3c>

0001e088 <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1e088:	f100 0310 	add.w	r3, r0, #16
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e08c:	e8d3 2faf 	lda	r2, [r3]
   1e090:	0612      	lsls	r2, r2, #24
   1e092:	d50a      	bpl.n	1e0aa <adv_pause_enabled+0x22>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e094:	e8d3 1fef 	ldaex	r1, [r3]
   1e098:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
   1e09c:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1e0a0:	2a00      	cmp	r2, #0
   1e0a2:	d1f7      	bne.n	1e094 <adv_pause_enabled+0xc>
		bt_le_adv_set_enable(adv, false);
   1e0a4:	2100      	movs	r1, #0
   1e0a6:	f000 b91e 	b.w	1e2e6 <bt_le_adv_set_enable>
}
   1e0aa:	4770      	bx	lr

0001e0ac <bt_lookup_id_addr>:
{
   1e0ac:	b510      	push	{r4, lr}
   1e0ae:	460c      	mov	r4, r1
	CHECKIF(id >= CONFIG_BT_ID_MAX || addr == NULL) {
   1e0b0:	b930      	cbnz	r0, 1e0c0 <bt_lookup_id_addr+0x14>
   1e0b2:	b119      	cbz	r1, 1e0bc <bt_lookup_id_addr+0x10>
		keys = bt_keys_find_irk(id, addr);
   1e0b4:	f7f8 f82a 	bl	1610c <bt_keys_find_irk>
		if (keys) {
   1e0b8:	b100      	cbz	r0, 1e0bc <bt_lookup_id_addr+0x10>
			return &keys->addr;
   1e0ba:	1c44      	adds	r4, r0, #1
}
   1e0bc:	4620      	mov	r0, r4
   1e0be:	bd10      	pop	{r4, pc}
		return NULL;
   1e0c0:	2400      	movs	r4, #0
   1e0c2:	e7fb      	b.n	1e0bc <bt_lookup_id_addr+0x10>

0001e0c4 <bt_id_set_adv_random_addr>:
	CHECKIF(adv == NULL || addr == NULL) {
   1e0c4:	b118      	cbz	r0, 1e0ce <bt_id_set_adv_random_addr+0xa>
   1e0c6:	b111      	cbz	r1, 1e0ce <bt_id_set_adv_random_addr+0xa>
		return set_random_address(addr);
   1e0c8:	4608      	mov	r0, r1
   1e0ca:	f7f2 b997 	b.w	103fc <set_random_address>
}
   1e0ce:	f06f 0015 	mvn.w	r0, #21
   1e0d2:	4770      	bx	lr

0001e0d4 <bt_id_set_adv_private_addr>:
{
   1e0d4:	b513      	push	{r0, r1, r4, lr}
	CHECKIF(adv == NULL) {
   1e0d6:	4604      	mov	r4, r0
   1e0d8:	b180      	cbz	r0, 1e0fc <bt_id_set_adv_private_addr+0x28>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   1e0da:	2106      	movs	r1, #6
   1e0dc:	4668      	mov	r0, sp
   1e0de:	f7f3 f815 	bl	1110c <bt_rand>
	if (err) {
   1e0e2:	b948      	cbnz	r0, 1e0f8 <bt_id_set_adv_private_addr+0x24>
	BT_ADDR_SET_NRPA(&nrpa);
   1e0e4:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   1e0e8:	4669      	mov	r1, sp
	BT_ADDR_SET_NRPA(&nrpa);
   1e0ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   1e0ee:	4620      	mov	r0, r4
	BT_ADDR_SET_NRPA(&nrpa);
   1e0f0:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   1e0f4:	f7ff ffe6 	bl	1e0c4 <bt_id_set_adv_random_addr>
}
   1e0f8:	b002      	add	sp, #8
   1e0fa:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1e0fc:	f06f 0015 	mvn.w	r0, #21
   1e100:	e7fa      	b.n	1e0f8 <bt_id_set_adv_private_addr+0x24>

0001e102 <bt_id_adv_random_addr_check>:
}
   1e102:	3800      	subs	r0, #0
   1e104:	bf18      	it	ne
   1e106:	2001      	movne	r0, #1
   1e108:	4770      	bx	lr

0001e10a <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   1e10a:	7a03      	ldrb	r3, [r0, #8]
   1e10c:	07d9      	lsls	r1, r3, #31
   1e10e:	d504      	bpl.n	1e11a <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   1e110:	f023 0301 	bic.w	r3, r3, #1
   1e114:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   1e116:	f7f2 ba57 	b.w	105c8 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   1e11a:	0799      	lsls	r1, r3, #30
   1e11c:	d504      	bpl.n	1e128 <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   1e11e:	f023 0302 	bic.w	r3, r3, #2
   1e122:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   1e124:	f7f2 ba6a 	b.w	105fc <bt_id_del>
}
   1e128:	4770      	bx	lr

0001e12a <get_adv_channel_map>:
{
   1e12a:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   1e12c:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   1e130:	bf0c      	ite	eq
   1e132:	2007      	moveq	r0, #7
   1e134:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   1e136:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   1e138:	bf48      	it	mi
   1e13a:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   1e13e:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   1e140:	bf48      	it	mi
   1e142:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   1e146:	4770      	bx	lr

0001e148 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e148:	e8d0 0faf 	lda	r0, [r0]
}
   1e14c:	4770      	bx	lr

0001e14e <atomic_and>:
{
   1e14e:	4603      	mov	r3, r0
   1e150:	b510      	push	{r4, lr}
}
   1e152:	e8d3 0fef 	ldaex	r0, [r3]
   1e156:	ea00 0201 	and.w	r2, r0, r1
   1e15a:	e8c3 2fe4 	stlex	r4, r2, [r3]
   1e15e:	2c00      	cmp	r4, #0
   1e160:	d1f7      	bne.n	1e152 <atomic_and+0x4>
   1e162:	bd10      	pop	{r4, pc}

0001e164 <bt_addr_le_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1e164:	680b      	ldr	r3, [r1, #0]
   1e166:	6003      	str	r3, [r0, #0]
   1e168:	888b      	ldrh	r3, [r1, #4]
   1e16a:	8083      	strh	r3, [r0, #4]
   1e16c:	798b      	ldrb	r3, [r1, #6]
   1e16e:	7183      	strb	r3, [r0, #6]
   1e170:	4770      	bx	lr

0001e172 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1e172:	2301      	movs	r3, #1
{
   1e174:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1e176:	fa03 f101 	lsl.w	r1, r3, r1
{
   1e17a:	4604      	mov	r4, r0
	if (val) {
   1e17c:	b142      	cbz	r2, 1e190 <atomic_set_bit_to+0x1e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e17e:	e8d4 3fef 	ldaex	r3, [r4]
   1e182:	430b      	orrs	r3, r1
   1e184:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1e188:	2a00      	cmp	r2, #0
   1e18a:	d1f8      	bne.n	1e17e <atomic_set_bit_to+0xc>
	}
}
   1e18c:	bc10      	pop	{r4}
   1e18e:	4770      	bx	lr
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1e190:	43c9      	mvns	r1, r1
}
   1e192:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1e194:	f7ff bfdb 	b.w	1e14e <atomic_and>

0001e198 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   1e198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e19c:	b087      	sub	sp, #28
   1e19e:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   1e1a2:	4605      	mov	r5, r0
   1e1a4:	460c      	mov	r4, r1
   1e1a6:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   1e1a8:	2100      	movs	r1, #0
   1e1aa:	2210      	movs	r2, #16
   1e1ac:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   1e1ae:	461f      	mov	r7, r3
   1e1b0:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   1e1b4:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
	struct bt_ad d[2] = {};
   1e1b8:	f003 fc76 	bl	21aa8 <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   1e1bc:	b9ce      	cbnz	r6, 1e1f2 <le_adv_update.constprop.0+0x5a>
		d[0].len = ad_len;
   1e1be:	e9cd 4802 	strd	r4, r8, [sp, #8]
		d_len = 1;
   1e1c2:	2201      	movs	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   1e1c4:	f242 0008 	movw	r0, #8200	; 0x2008
   1e1c8:	a902      	add	r1, sp, #8
   1e1ca:	f7f2 fc1d 	bl	10a08 <hci_set_ad>
		if (err) {
   1e1ce:	4604      	mov	r4, r0
   1e1d0:	b958      	cbnz	r0, 1e1ea <le_adv_update.constprop.0+0x52>
	if (scannable) {
   1e1d2:	f1ba 0f00 	cmp.w	sl, #0
   1e1d6:	d13a      	bne.n	1e24e <le_adv_update.constprop.0+0xb6>
   1e1d8:	3510      	adds	r5, #16
   1e1da:	e8d5 3fef 	ldaex	r3, [r5]
   1e1de:	f043 0304 	orr.w	r3, r3, #4
   1e1e2:	e8c5 3fe2 	stlex	r2, r3, [r5]
   1e1e6:	2a00      	cmp	r2, #0
   1e1e8:	d1f7      	bne.n	1e1da <le_adv_update.constprop.0+0x42>
}
   1e1ea:	4620      	mov	r0, r4
   1e1ec:	b007      	add	sp, #28
   1e1ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   1e1f2:	f7f1 ffd9 	bl	101a8 <bt_get_name>
   1e1f6:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   1e1f8:	b9e4      	cbnz	r4, 1e234 <le_adv_update.constprop.0+0x9c>
   1e1fa:	bb37      	cbnz	r7, 1e24a <le_adv_update.constprop.0+0xb2>
		data = (struct bt_data)BT_DATA(
   1e1fc:	4658      	mov	r0, fp
   1e1fe:	f7eb f8a5 	bl	934c <strlen>
   1e202:	2309      	movs	r3, #9
		if (name_type == ADV_NAME_TYPE_AD) {
   1e204:	2e01      	cmp	r6, #1
		d[0].data = ad;
   1e206:	e9cd b401 	strd	fp, r4, [sp, #4]
		data = (struct bt_data)BT_DATA(
   1e20a:	f88d 3000 	strb.w	r3, [sp]
   1e20e:	f88d 0001 	strb.w	r0, [sp, #1]
		d[0].len = ad_len;
   1e212:	f8cd 800c 	str.w	r8, [sp, #12]
		if (name_type == ADV_NAME_TYPE_AD) {
   1e216:	d1d4      	bne.n	1e1c2 <le_adv_update.constprop.0+0x2a>
			d_len = 2;
   1e218:	2202      	movs	r2, #2
			d[1].data = &data;
   1e21a:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   1e21e:	9605      	str	r6, [sp, #20]
			d_len = 2;
   1e220:	e7d0      	b.n	1e1c4 <le_adv_update.constprop.0+0x2c>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   1e222:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   1e226:	3a08      	subs	r2, #8
   1e228:	2a01      	cmp	r2, #1
   1e22a:	d924      	bls.n	1e276 <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
   1e22c:	3301      	adds	r3, #1
   1e22e:	4598      	cmp	r8, r3
   1e230:	d1f7      	bne.n	1e222 <le_adv_update.constprop.0+0x8a>
   1e232:	e7e2      	b.n	1e1fa <le_adv_update.constprop.0+0x62>
   1e234:	2300      	movs	r3, #0
   1e236:	e7fa      	b.n	1e22e <le_adv_update.constprop.0+0x96>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   1e238:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   1e23c:	3a08      	subs	r2, #8
   1e23e:	2a01      	cmp	r2, #1
   1e240:	d919      	bls.n	1e276 <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
   1e242:	3301      	adds	r3, #1
   1e244:	4599      	cmp	r9, r3
   1e246:	d1f7      	bne.n	1e238 <le_adv_update.constprop.0+0xa0>
   1e248:	e7d8      	b.n	1e1fc <le_adv_update.constprop.0+0x64>
   1e24a:	2300      	movs	r3, #0
   1e24c:	e7fa      	b.n	1e244 <le_adv_update.constprop.0+0xac>
		d[0].data = sd;
   1e24e:	2201      	movs	r2, #1
		if (name_type == ADV_NAME_TYPE_SD) {
   1e250:	2e02      	cmp	r6, #2
			d[1].len = 1;
   1e252:	bf08      	it	eq
   1e254:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   1e256:	f242 0009 	movw	r0, #8201	; 0x2009
			d_len = 2;
   1e25a:	bf08      	it	eq
   1e25c:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   1e25e:	a902      	add	r1, sp, #8
			d[1].data = &data;
   1e260:	bf08      	it	eq
   1e262:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   1e266:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   1e26a:	f7f2 fbcd 	bl	10a08 <hci_set_ad>
		if (err) {
   1e26e:	2800      	cmp	r0, #0
   1e270:	d0b2      	beq.n	1e1d8 <le_adv_update.constprop.0+0x40>
   1e272:	4604      	mov	r4, r0
   1e274:	e7b9      	b.n	1e1ea <le_adv_update.constprop.0+0x52>
			return -EINVAL;
   1e276:	f06f 0415 	mvn.w	r4, #21
   1e27a:	e7b6      	b.n	1e1ea <le_adv_update.constprop.0+0x52>

0001e27c <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   1e27c:	6843      	ldr	r3, [r0, #4]
   1e27e:	f013 0008 	ands.w	r0, r3, #8
   1e282:	d00a      	beq.n	1e29a <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   1e284:	035a      	lsls	r2, r3, #13
   1e286:	d407      	bmi.n	1e298 <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   1e288:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			return ADV_NAME_TYPE_AD;
   1e28c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1e290:	bf14      	ite	ne
   1e292:	2002      	movne	r0, #2
   1e294:	2001      	moveq	r0, #1
   1e296:	4770      	bx	lr
   1e298:	2001      	movs	r0, #1
}
   1e29a:	4770      	bx	lr

0001e29c <bt_le_adv_set_enable_legacy>:
{
   1e29c:	b570      	push	{r4, r5, r6, lr}
   1e29e:	4606      	mov	r6, r0
   1e2a0:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   1e2a2:	f242 000a 	movw	r0, #8202	; 0x200a
   1e2a6:	2101      	movs	r1, #1
{
   1e2a8:	b086      	sub	sp, #24
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   1e2aa:	f7f0 ff65 	bl	f178 <bt_hci_cmd_create>
	if (!buf) {
   1e2ae:	4604      	mov	r4, r0
   1e2b0:	b1b0      	cbz	r0, 1e2e0 <bt_le_adv_set_enable_legacy+0x44>
   1e2b2:	3008      	adds	r0, #8
	if (enable) {
   1e2b4:	b195      	cbz	r5, 1e2dc <bt_le_adv_set_enable_legacy+0x40>
   1e2b6:	2101      	movs	r1, #1
   1e2b8:	f001 fdf7 	bl	1feaa <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   1e2bc:	4620      	mov	r0, r4
   1e2be:	f106 0210 	add.w	r2, r6, #16
   1e2c2:	a903      	add	r1, sp, #12
   1e2c4:	2307      	movs	r3, #7
   1e2c6:	9500      	str	r5, [sp, #0]
   1e2c8:	f7f0 ff44 	bl	f154 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   1e2cc:	2200      	movs	r2, #0
   1e2ce:	4621      	mov	r1, r4
   1e2d0:	f242 000a 	movw	r0, #8202	; 0x200a
   1e2d4:	f7f0 ff8a 	bl	f1ec <bt_hci_cmd_send_sync>
}
   1e2d8:	b006      	add	sp, #24
   1e2da:	bd70      	pop	{r4, r5, r6, pc}
   1e2dc:	4629      	mov	r1, r5
   1e2de:	e7eb      	b.n	1e2b8 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   1e2e0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1e2e4:	e7f8      	b.n	1e2d8 <bt_le_adv_set_enable_legacy+0x3c>

0001e2e6 <bt_le_adv_set_enable>:
	return bt_le_adv_set_enable_legacy(adv, enable);
   1e2e6:	f7ff bfd9 	b.w	1e29c <bt_le_adv_set_enable_legacy>

0001e2ea <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   1e2ea:	3018      	adds	r0, #24
   1e2ec:	f003 b85d 	b.w	213aa <k_work_cancel_delayable>

0001e2f0 <bt_encrypt_le>:
}
#endif /* CONFIG_BT_HOST_CRYPTO_PRNG */

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   1e2f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e2f2:	460d      	mov	r5, r1
   1e2f4:	4614      	mov	r4, r2
   1e2f6:	b0b1      	sub	sp, #196	; 0xc4
	struct tc_aes_key_sched_struct s;
	uint8_t tmp[16];

	CHECKIF(key == NULL || plaintext == NULL || enc_data == NULL) {
   1e2f8:	b370      	cbz	r0, 1e358 <bt_encrypt_le+0x68>
   1e2fa:	b369      	cbz	r1, 1e358 <bt_encrypt_le+0x68>
   1e2fc:	b362      	cbz	r2, 1e358 <bt_encrypt_le+0x68>
	for (; length > 0; length--) {
   1e2fe:	466e      	mov	r6, sp
   1e300:	4632      	mov	r2, r6
   1e302:	4637      	mov	r7, r6
   1e304:	f100 0310 	add.w	r3, r0, #16
		*pdst++ = *psrc--;
   1e308:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
	for (; length > 0; length--) {
   1e30c:	4283      	cmp	r3, r0
		*pdst++ = *psrc--;
   1e30e:	f802 1b01 	strb.w	r1, [r2], #1
	for (; length > 0; length--) {
   1e312:	d1f9      	bne.n	1e308 <bt_encrypt_le+0x18>
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	sys_memcpy_swap(tmp, key, 16);

	if (tc_aes128_set_encrypt_key(&s, tmp) == TC_CRYPTO_FAIL) {
   1e314:	4631      	mov	r1, r6
   1e316:	a804      	add	r0, sp, #16
   1e318:	f7ef f842 	bl	d3a0 <tc_aes128_set_encrypt_key>
   1e31c:	b1e0      	cbz	r0, 1e358 <bt_encrypt_le+0x68>
   1e31e:	f105 0310 	add.w	r3, r5, #16
		*pdst++ = *psrc--;
   1e322:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
	for (; length > 0; length--) {
   1e326:	42ab      	cmp	r3, r5
		*pdst++ = *psrc--;
   1e328:	f806 2b01 	strb.w	r2, [r6], #1
	for (; length > 0; length--) {
   1e32c:	d1f9      	bne.n	1e322 <bt_encrypt_le+0x32>
		return -EINVAL;
	}

	sys_memcpy_swap(tmp, plaintext, 16);

	if (tc_aes_encrypt(enc_data, tmp, &s) == TC_CRYPTO_FAIL) {
   1e32e:	4639      	mov	r1, r7
   1e330:	4620      	mov	r0, r4
   1e332:	aa04      	add	r2, sp, #16
   1e334:	f7ff f886 	bl	1d444 <tc_aes_encrypt>
   1e338:	b170      	cbz	r0, 1e358 <bt_encrypt_le+0x68>
   1e33a:	1e63      	subs	r3, r4, #1
   1e33c:	f104 0210 	add.w	r2, r4, #16
   1e340:	3407      	adds	r4, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   1e342:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1e346:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   1e34a:	429c      	cmp	r4, r3
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1e34c:	7018      	strb	r0, [r3, #0]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1e34e:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   1e350:	d1f7      	bne.n	1e342 <bt_encrypt_le+0x52>

	sys_mem_swap(enc_data, 16);

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
   1e352:	2000      	movs	r0, #0
}
   1e354:	b031      	add	sp, #196	; 0xc4
   1e356:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
   1e358:	f06f 0015 	mvn.w	r0, #21
   1e35c:	e7fa      	b.n	1e354 <bt_encrypt_le+0x64>

0001e35e <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1e35e:	2200      	movs	r2, #0
	return list->head;
   1e360:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1e362:	b90b      	cbnz	r3, 1e368 <sys_slist_find_and_remove+0xa>
   1e364:	4618      	mov	r0, r3
   1e366:	4770      	bx	lr
   1e368:	428b      	cmp	r3, r1
   1e36a:	d110      	bne.n	1e38e <sys_slist_find_and_remove+0x30>
	return node->next;
   1e36c:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   1e36e:	b942      	cbnz	r2, 1e382 <sys_slist_find_and_remove+0x24>
   1e370:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   1e372:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1e374:	4291      	cmp	r1, r2
   1e376:	d100      	bne.n	1e37a <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   1e378:	6043      	str	r3, [r0, #4]
	parent->next = child;
   1e37a:	2300      	movs	r3, #0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1e37c:	2001      	movs	r0, #1
	parent->next = child;
   1e37e:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   1e380:	4770      	bx	lr
	parent->next = child;
   1e382:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1e384:	6843      	ldr	r3, [r0, #4]
   1e386:	4299      	cmp	r1, r3
	list->tail = node;
   1e388:	bf08      	it	eq
   1e38a:	6042      	streq	r2, [r0, #4]
}
   1e38c:	e7f5      	b.n	1e37a <sys_slist_find_and_remove+0x1c>
	return node->next;
   1e38e:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1e390:	681b      	ldr	r3, [r3, #0]
   1e392:	e7e6      	b.n	1e362 <sys_slist_find_and_remove+0x4>

0001e394 <atomic_and>:
{
   1e394:	4603      	mov	r3, r0
   1e396:	b510      	push	{r4, lr}
}
   1e398:	e8d3 0fef 	ldaex	r0, [r3]
   1e39c:	ea00 0201 	and.w	r2, r0, r1
   1e3a0:	e8c3 2fe4 	stlex	r4, r2, [r3]
   1e3a4:	2c00      	cmp	r4, #0
   1e3a6:	d1f7      	bne.n	1e398 <atomic_and+0x4>
   1e3a8:	bd10      	pop	{r4, pc}

0001e3aa <z_log_msg_static_create.constprop.0>:
   1e3aa:	2300      	movs	r3, #0
   1e3ac:	f7ed bf82 	b.w	c2b4 <z_impl_z_log_msg_static_create>

0001e3b0 <tx_complete_work>:
	tx_notify(conn);
   1e3b0:	3828      	subs	r0, #40	; 0x28
   1e3b2:	f7f3 b85f 	b.w	11474 <tx_notify>

0001e3b6 <bt_conn_reset_rx_state>:
{
   1e3b6:	b510      	push	{r4, lr}
   1e3b8:	4604      	mov	r4, r0
	if (!conn->rx) {
   1e3ba:	6900      	ldr	r0, [r0, #16]
   1e3bc:	b118      	cbz	r0, 1e3c6 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   1e3be:	f7f7 ffbd 	bl	1633c <net_buf_unref>
	conn->rx = NULL;
   1e3c2:	2300      	movs	r3, #0
   1e3c4:	6123      	str	r3, [r4, #16]
}
   1e3c6:	bd10      	pop	{r4, pc}

0001e3c8 <conn_cleanup>:
{
   1e3c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e3cc:	4604      	mov	r4, r0
		tx_data(buf)->tx = NULL;
   1e3ce:	2700      	movs	r7, #0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   1e3d0:	f104 0638 	add.w	r6, r4, #56	; 0x38
   1e3d4:	2300      	movs	r3, #0
   1e3d6:	2200      	movs	r2, #0
   1e3d8:	4630      	mov	r0, r6
   1e3da:	f001 fcbc 	bl	1fd56 <net_buf_get>
   1e3de:	4603      	mov	r3, r0
   1e3e0:	b950      	cbnz	r0, 1e3f8 <conn_cleanup+0x30>
	bt_conn_reset_rx_state(conn);
   1e3e2:	4620      	mov	r0, r4
   1e3e4:	f7ff ffe7 	bl	1e3b6 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   1e3e8:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1e3ec:	2200      	movs	r2, #0
}
   1e3ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   1e3f2:	2300      	movs	r3, #0
   1e3f4:	f7fb bd76 	b.w	19ee4 <k_work_reschedule>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   1e3f8:	695d      	ldr	r5, [r3, #20]
		tx_data(buf)->tx = NULL;
   1e3fa:	615f      	str	r7, [r3, #20]
		net_buf_unref(buf);
   1e3fc:	f7f7 ff9e 	bl	1633c <net_buf_unref>
		if (tx) {
   1e400:	2d00      	cmp	r5, #0
   1e402:	d0e7      	beq.n	1e3d4 <conn_cleanup+0xc>
			conn_tx_destroy(conn, tx);
   1e404:	4629      	mov	r1, r5
   1e406:	4620      	mov	r0, r4
   1e408:	f7f3 f864 	bl	114d4 <conn_tx_destroy>
   1e40c:	e7e0      	b.n	1e3d0 <conn_cleanup+0x8>

0001e40e <bt_conn_ref>:
{
   1e40e:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   1e410:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e414:	e8d2 3faf 	lda	r3, [r2]
		if (!old) {
   1e418:	b15b      	cbz	r3, 1e432 <bt_conn_ref+0x24>
	} while (!atomic_cas(&conn->ref, old, old + 1));
   1e41a:	1c59      	adds	r1, r3, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1e41c:	e8d2 4fef 	ldaex	r4, [r2]
   1e420:	429c      	cmp	r4, r3
   1e422:	d104      	bne.n	1e42e <bt_conn_ref+0x20>
   1e424:	e8c2 1fec 	stlex	ip, r1, [r2]
   1e428:	f1bc 0f00 	cmp.w	ip, #0
   1e42c:	d1f6      	bne.n	1e41c <bt_conn_ref+0xe>
   1e42e:	d1f1      	bne.n	1e414 <bt_conn_ref+0x6>
}
   1e430:	bd10      	pop	{r4, pc}
			return NULL;
   1e432:	4618      	mov	r0, r3
   1e434:	e7fc      	b.n	1e430 <bt_conn_ref+0x22>

0001e436 <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   1e436:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1e43a:	e8d3 2fef 	ldaex	r2, [r3]
   1e43e:	3a01      	subs	r2, #1
   1e440:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1e444:	2900      	cmp	r1, #0
   1e446:	d1f8      	bne.n	1e43a <bt_conn_unref+0x4>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   1e448:	f240 1201 	movw	r2, #257	; 0x101
   1e44c:	8841      	ldrh	r1, [r0, #2]
   1e44e:	4291      	cmp	r1, r2
   1e450:	d104      	bne.n	1e45c <bt_conn_unref+0x26>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e452:	e8d3 3faf 	lda	r3, [r3]
	    conn->role == BT_CONN_ROLE_PERIPHERAL && atomic_get(&conn->ref) == 0) {
   1e456:	b90b      	cbnz	r3, 1e45c <bt_conn_unref+0x26>
		bt_le_adv_resume();
   1e458:	f7f2 bda4 	b.w	10fa4 <bt_le_adv_resume>
}
   1e45c:	4770      	bx	lr

0001e45e <conn_lookup_handle>:
{
   1e45e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e462:	4607      	mov	r7, r0
   1e464:	460e      	mov	r6, r1
   1e466:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   1e468:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1e46a:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   1e46e:	42b4      	cmp	r4, r6
   1e470:	d103      	bne.n	1e47a <conn_lookup_handle+0x1c>
	return NULL;
   1e472:	2300      	movs	r3, #0
}
   1e474:	4618      	mov	r0, r3
   1e476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1e47a:	fb09 7004 	mla	r0, r9, r4, r7
   1e47e:	f7ff ffc6 	bl	1e40e <bt_conn_ref>
   1e482:	4603      	mov	r3, r0
		if (!conn) {
   1e484:	b158      	cbz	r0, 1e49e <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   1e486:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   1e488:	2d01      	cmp	r5, #1
   1e48a:	d002      	beq.n	1e492 <conn_lookup_handle+0x34>
   1e48c:	3d07      	subs	r5, #7
   1e48e:	2d01      	cmp	r5, #1
   1e490:	d803      	bhi.n	1e49a <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   1e492:	881a      	ldrh	r2, [r3, #0]
   1e494:	4542      	cmp	r2, r8
   1e496:	d0ed      	beq.n	1e474 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   1e498:	4618      	mov	r0, r3
   1e49a:	f7ff ffcc 	bl	1e436 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   1e49e:	3401      	adds	r4, #1
   1e4a0:	e7e5      	b.n	1e46e <conn_lookup_handle+0x10>

0001e4a2 <bt_conn_connected>:
{
   1e4a2:	b510      	push	{r4, lr}
   1e4a4:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   1e4a6:	f7f3 fe95 	bl	121d4 <bt_l2cap_connected>
	notify_connected(conn);
   1e4aa:	4620      	mov	r0, r4
}
   1e4ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   1e4b0:	f7f2 bfa8 	b.w	11404 <notify_connected>

0001e4b4 <bt_conn_disconnect>:
{
   1e4b4:	b510      	push	{r4, lr}
	switch (conn->state) {
   1e4b6:	7b43      	ldrb	r3, [r0, #13]
{
   1e4b8:	4604      	mov	r4, r0
	switch (conn->state) {
   1e4ba:	3b02      	subs	r3, #2
   1e4bc:	2b06      	cmp	r3, #6
   1e4be:	d816      	bhi.n	1e4ee <bt_conn_disconnect+0x3a>
   1e4c0:	e8df f003 	tbb	[pc, r3]
   1e4c4:	15151504 	.word	0x15151504
   1e4c8:	0b09      	.short	0x0b09
   1e4ca:	09          	.byte	0x09
   1e4cb:	00          	.byte	0x00
		conn->err = reason;
   1e4cc:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1e4ce:	2100      	movs	r1, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   1e4d0:	4620      	mov	r0, r4
   1e4d2:	f7f3 fa57 	bl	11984 <bt_conn_set_state>
{
   1e4d6:	2000      	movs	r0, #0
}
   1e4d8:	bd10      	pop	{r4, pc}
	err = bt_hci_disconnect(conn->handle, reason);
   1e4da:	8800      	ldrh	r0, [r0, #0]
   1e4dc:	f7ff fc7d 	bl	1ddda <bt_hci_disconnect>
	if (err) {
   1e4e0:	2800      	cmp	r0, #0
   1e4e2:	d1f9      	bne.n	1e4d8 <bt_conn_disconnect+0x24>
	if (conn->state == BT_CONN_CONNECTED) {
   1e4e4:	7b63      	ldrb	r3, [r4, #13]
   1e4e6:	2b07      	cmp	r3, #7
   1e4e8:	d1f5      	bne.n	1e4d6 <bt_conn_disconnect+0x22>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   1e4ea:	2108      	movs	r1, #8
   1e4ec:	e7f0      	b.n	1e4d0 <bt_conn_disconnect+0x1c>
		return -ENOTCONN;
   1e4ee:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1e4f2:	e7f1      	b.n	1e4d8 <bt_conn_disconnect+0x24>

0001e4f4 <bt_conn_set_security>:
{
   1e4f4:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1e4f6:	7b43      	ldrb	r3, [r0, #13]
{
   1e4f8:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   1e4fa:	2b07      	cmp	r3, #7
{
   1e4fc:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   1e4fe:	d122      	bne.n	1e546 <bt_conn_set_security+0x52>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   1e500:	7a43      	ldrb	r3, [r0, #9]
   1e502:	428b      	cmp	r3, r1
   1e504:	d215      	bcs.n	1e532 <bt_conn_set_security+0x3e>
   1e506:	7a83      	ldrb	r3, [r0, #10]
   1e508:	428b      	cmp	r3, r1
   1e50a:	d212      	bcs.n	1e532 <bt_conn_set_security+0x3e>
	if (val) {
   1e50c:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   1e50e:	f100 0004 	add.w	r0, r0, #4
   1e512:	d510      	bpl.n	1e536 <bt_conn_set_security+0x42>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e514:	e8d0 3fef 	ldaex	r3, [r0]
   1e518:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1e51c:	e8c0 3fe2 	stlex	r2, r3, [r0]
   1e520:	2a00      	cmp	r2, #0
   1e522:	d1f7      	bne.n	1e514 <bt_conn_set_security+0x20>
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   1e524:	f005 057f 	and.w	r5, r5, #127	; 0x7f
		return bt_smp_start_security(conn);
   1e528:	4620      	mov	r0, r4
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   1e52a:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   1e52c:	f7f6 ff92 	bl	15454 <bt_smp_start_security>
	if (err) {
   1e530:	b930      	cbnz	r0, 1e540 <bt_conn_set_security+0x4c>
		return -ENOTCONN;
   1e532:	2000      	movs	r0, #0
}
   1e534:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1e536:	f46f 6180 	mvn.w	r1, #1024	; 0x400
   1e53a:	f7ff ff2b 	bl	1e394 <atomic_and>
   1e53e:	e7f1      	b.n	1e524 <bt_conn_set_security+0x30>
		conn->required_sec_level = conn->sec_level;
   1e540:	7a63      	ldrb	r3, [r4, #9]
   1e542:	72a3      	strb	r3, [r4, #10]
   1e544:	e7f6      	b.n	1e534 <bt_conn_set_security+0x40>
		return -ENOTCONN;
   1e546:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1e54a:	e7f3      	b.n	1e534 <bt_conn_set_security+0x40>

0001e54c <bt_conn_get_security>:
}
   1e54c:	7a40      	ldrb	r0, [r0, #9]
   1e54e:	4770      	bx	lr

0001e550 <bt_conn_is_peer_addr_le>:
{
   1e550:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   1e552:	7a03      	ldrb	r3, [r0, #8]
{
   1e554:	4604      	mov	r4, r0
	if (id != conn->id) {
   1e556:	428b      	cmp	r3, r1
{
   1e558:	4615      	mov	r5, r2
	if (id != conn->id) {
   1e55a:	d115      	bne.n	1e588 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   1e55c:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1e560:	2207      	movs	r2, #7
   1e562:	4628      	mov	r0, r5
   1e564:	f003 fa83 	bl	21a6e <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   1e568:	b180      	cbz	r0, 1e58c <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1e56a:	78e3      	ldrb	r3, [r4, #3]
   1e56c:	2207      	movs	r2, #7
   1e56e:	b943      	cbnz	r3, 1e582 <bt_conn_is_peer_addr_le+0x32>
   1e570:	f104 0196 	add.w	r1, r4, #150	; 0x96
   1e574:	4628      	mov	r0, r5
   1e576:	f003 fa7a 	bl	21a6e <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   1e57a:	fab0 f080 	clz	r0, r0
   1e57e:	0940      	lsrs	r0, r0, #5
}
   1e580:	bd38      	pop	{r3, r4, r5, pc}
	return memcmp(a, b, sizeof(*a));
   1e582:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   1e586:	e7f5      	b.n	1e574 <bt_conn_is_peer_addr_le+0x24>
		return false;
   1e588:	2000      	movs	r0, #0
   1e58a:	e7f9      	b.n	1e580 <bt_conn_is_peer_addr_le+0x30>
		return true;
   1e58c:	2001      	movs	r0, #1
   1e58e:	e7f7      	b.n	1e580 <bt_conn_is_peer_addr_le+0x30>

0001e590 <bt_conn_get_dst>:
}
   1e590:	3088      	adds	r0, #136	; 0x88
   1e592:	4770      	bx	lr

0001e594 <bt_conn_le_conn_update>:
{
   1e594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e596:	4607      	mov	r7, r0
   1e598:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   1e59a:	f242 0013 	movw	r0, #8211	; 0x2013
   1e59e:	210e      	movs	r1, #14
   1e5a0:	f7f0 fdea 	bl	f178 <bt_hci_cmd_create>
	if (!buf) {
   1e5a4:	4606      	mov	r6, r0
   1e5a6:	b1d0      	cbz	r0, 1e5de <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   1e5a8:	210e      	movs	r1, #14
   1e5aa:	3008      	adds	r0, #8
   1e5ac:	f001 fc6e 	bl	1fe8c <net_buf_simple_add>
   1e5b0:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
   1e5b2:	220e      	movs	r2, #14
   1e5b4:	2100      	movs	r1, #0
   1e5b6:	f003 fa77 	bl	21aa8 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1e5ba:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1e5bc:	4631      	mov	r1, r6
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1e5be:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1e5c0:	882b      	ldrh	r3, [r5, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1e5c2:	2200      	movs	r2, #0
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1e5c4:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1e5c6:	886b      	ldrh	r3, [r5, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1e5c8:	f242 0013 	movw	r0, #8211	; 0x2013
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1e5cc:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   1e5ce:	88ab      	ldrh	r3, [r5, #4]
   1e5d0:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   1e5d2:	88eb      	ldrh	r3, [r5, #6]
   1e5d4:	8123      	strh	r3, [r4, #8]
}
   1e5d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1e5da:	f7f0 be07 	b.w	f1ec <bt_hci_cmd_send_sync>
}
   1e5de:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1e5e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001e5e4 <l2cap_connected>:
}
   1e5e4:	4770      	bx	lr

0001e5e6 <z_log_msg_static_create.constprop.0>:
   1e5e6:	2300      	movs	r3, #0
   1e5e8:	f7ed be64 	b.w	c2b4 <z_impl_z_log_msg_static_create>

0001e5ec <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   1e5ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e5ee:	4605      	mov	r5, r0
   1e5f0:	460f      	mov	r7, r1
   1e5f2:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   1e5f4:	2300      	movs	r3, #0
   1e5f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1e5fa:	2104      	movs	r1, #4
   1e5fc:	2000      	movs	r0, #0
   1e5fe:	f7f3 fac3 	bl	11b88 <bt_conn_create_pdu_timeout>
	if (!buf) {
   1e602:	4604      	mov	r4, r0
   1e604:	b920      	cbnz	r0, 1e610 <l2cap_create_le_sig_pdu.constprop.0+0x24>
   1e606:	4628      	mov	r0, r5
}
   1e608:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1e60c:	f7f3 bd9e 	b.w	1214c <l2cap_create_le_sig_pdu.part.0>
   1e610:	2104      	movs	r1, #4
   1e612:	3008      	adds	r0, #8
   1e614:	f001 fc3a 	bl	1fe8c <net_buf_simple_add>
	hdr->code = code;
   1e618:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   1e61a:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   1e61c:	8046      	strh	r6, [r0, #2]
}
   1e61e:	4620      	mov	r0, r4
   1e620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001e622 <l2cap_disconnected>:
static void l2cap_disconnected(struct bt_l2cap_chan *chan)
   1e622:	4770      	bx	lr

0001e624 <bt_l2cap_chan_del>:
{
   1e624:	b570      	push	{r4, r5, r6, lr}
   1e626:	4604      	mov	r4, r0
	if (!chan->conn) {
   1e628:	e9d0 3500 	ldrd	r3, r5, [r0]
   1e62c:	b123      	cbz	r3, 1e638 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   1e62e:	686b      	ldr	r3, [r5, #4]
   1e630:	b103      	cbz	r3, 1e634 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   1e632:	4798      	blx	r3
	chan->conn = NULL;
   1e634:	2300      	movs	r3, #0
   1e636:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   1e638:	68e3      	ldr	r3, [r4, #12]
   1e63a:	b10b      	cbz	r3, 1e640 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   1e63c:	4620      	mov	r0, r4
   1e63e:	4798      	blx	r3
	if (ops->released) {
   1e640:	6a2b      	ldr	r3, [r5, #32]
   1e642:	b11b      	cbz	r3, 1e64c <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   1e644:	4620      	mov	r0, r4
}
   1e646:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   1e64a:	4718      	bx	r3
}
   1e64c:	bd70      	pop	{r4, r5, r6, pc}

0001e64e <bt_l2cap_disconnected>:
{
   1e64e:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   1e650:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1e652:	b130      	cbz	r0, 1e662 <bt_l2cap_disconnected+0x14>
	return node->next;
   1e654:	f850 4908 	ldr.w	r4, [r0], #-8
   1e658:	b104      	cbz	r4, 1e65c <bt_l2cap_disconnected+0xe>
   1e65a:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   1e65c:	f7ff ffe2 	bl	1e624 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1e660:	b904      	cbnz	r4, 1e664 <bt_l2cap_disconnected+0x16>
}
   1e662:	bd38      	pop	{r3, r4, r5, pc}
   1e664:	68a5      	ldr	r5, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1e666:	b12d      	cbz	r5, 1e674 <bt_l2cap_disconnected+0x26>
		bt_l2cap_chan_del(chan);
   1e668:	4620      	mov	r0, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1e66a:	3d08      	subs	r5, #8
		bt_l2cap_chan_del(chan);
   1e66c:	f7ff ffda 	bl	1e624 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1e670:	462c      	mov	r4, r5
   1e672:	e7f7      	b.n	1e664 <bt_l2cap_disconnected+0x16>
		bt_l2cap_chan_del(chan);
   1e674:	4620      	mov	r0, r4
}
   1e676:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_l2cap_chan_del(chan);
   1e67a:	f7ff bfd3 	b.w	1e624 <bt_l2cap_chan_del>

0001e67e <bt_l2cap_security_changed>:
{
   1e67e:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   1e680:	6d03      	ldr	r3, [r0, #80]	; 0x50
   1e682:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1e684:	b1bb      	cbz	r3, 1e6b6 <bt_l2cap_security_changed+0x38>
   1e686:	4618      	mov	r0, r3
	return node->next;
   1e688:	f850 4908 	ldr.w	r4, [r0], #-8
   1e68c:	b104      	cbz	r4, 1e690 <bt_l2cap_security_changed+0x12>
   1e68e:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   1e690:	f853 3c04 	ldr.w	r3, [r3, #-4]
   1e694:	689b      	ldr	r3, [r3, #8]
   1e696:	b10b      	cbz	r3, 1e69c <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   1e698:	4629      	mov	r1, r5
   1e69a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1e69c:	b15c      	cbz	r4, 1e6b6 <bt_l2cap_security_changed+0x38>
   1e69e:	4620      	mov	r0, r4
   1e6a0:	68a4      	ldr	r4, [r4, #8]
   1e6a2:	6843      	ldr	r3, [r0, #4]
   1e6a4:	b124      	cbz	r4, 1e6b0 <bt_l2cap_security_changed+0x32>
		if (chan->ops->encrypt_change) {
   1e6a6:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1e6a8:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   1e6aa:	2b00      	cmp	r3, #0
   1e6ac:	d1f4      	bne.n	1e698 <bt_l2cap_security_changed+0x1a>
   1e6ae:	e7f6      	b.n	1e69e <bt_l2cap_security_changed+0x20>
   1e6b0:	689b      	ldr	r3, [r3, #8]
   1e6b2:	2b00      	cmp	r3, #0
   1e6b4:	d1f0      	bne.n	1e698 <bt_l2cap_security_changed+0x1a>
}
   1e6b6:	bd38      	pop	{r3, r4, r5, pc}

0001e6b8 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   1e6b8:	3104      	adds	r1, #4
   1e6ba:	f7f3 ba65 	b.w	11b88 <bt_conn_create_pdu_timeout>

0001e6be <bt_l2cap_send_cb>:
{
   1e6be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e6c2:	4614      	mov	r4, r2
   1e6c4:	4605      	mov	r5, r0
   1e6c6:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   1e6c8:	f102 0008 	add.w	r0, r2, #8
   1e6cc:	2104      	movs	r1, #4
   1e6ce:	461e      	mov	r6, r3
   1e6d0:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1e6d4:	f001 fbf1 	bl	1feba <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1e6d8:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   1e6da:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1e6dc:	3a04      	subs	r2, #4
   1e6de:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1e6e0:	4643      	mov	r3, r8
   1e6e2:	4632      	mov	r2, r6
   1e6e4:	4621      	mov	r1, r4
   1e6e6:	4628      	mov	r0, r5
}
   1e6e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1e6ec:	f7f3 b88c 	b.w	11808 <bt_conn_send_cb>

0001e6f0 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   1e6f0:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1e6f2:	b128      	cbz	r0, 1e700 <bt_l2cap_le_lookup_tx_cid+0x10>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   1e6f4:	8b83      	ldrh	r3, [r0, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1e6f6:	3808      	subs	r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   1e6f8:	428b      	cmp	r3, r1
   1e6fa:	d001      	beq.n	1e700 <bt_l2cap_le_lookup_tx_cid+0x10>
	return node->next;
   1e6fc:	6880      	ldr	r0, [r0, #8]
   1e6fe:	e7f8      	b.n	1e6f2 <bt_l2cap_le_lookup_tx_cid+0x2>
}
   1e700:	4770      	bx	lr

0001e702 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   1e702:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1e704:	b128      	cbz	r0, 1e712 <bt_l2cap_le_lookup_rx_cid+0x10>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1e706:	8983      	ldrh	r3, [r0, #12]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1e708:	3808      	subs	r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1e70a:	428b      	cmp	r3, r1
   1e70c:	d001      	beq.n	1e712 <bt_l2cap_le_lookup_rx_cid+0x10>
	return node->next;
   1e70e:	6880      	ldr	r0, [r0, #8]
   1e710:	e7f8      	b.n	1e704 <bt_l2cap_le_lookup_rx_cid+0x2>
}
   1e712:	4770      	bx	lr

0001e714 <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   1e714:	4770      	bx	lr

0001e716 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   1e716:	4603      	mov	r3, r0
	return list->head;
   1e718:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   1e71a:	b128      	cbz	r0, 1e728 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1e71c:	6859      	ldr	r1, [r3, #4]
	return node->next;
   1e71e:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1e720:	4288      	cmp	r0, r1
	list->head = node;
   1e722:	601a      	str	r2, [r3, #0]
	list->tail = node;
   1e724:	bf08      	it	eq
   1e726:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   1e728:	4770      	bx	lr

0001e72a <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   1e72a:	4603      	mov	r3, r0
	size_t bytes = 0;
   1e72c:	2000      	movs	r0, #0

	while (buf) {
   1e72e:	b903      	cbnz	r3, 1e732 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   1e730:	4770      	bx	lr
		bytes += buf->len;
   1e732:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   1e734:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   1e736:	4410      	add	r0, r2
		buf = buf->frags;
   1e738:	e7f9      	b.n	1e72e <net_buf_frags_len+0x4>

0001e73a <attr_read_type_cb>:
{
   1e73a:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   1e73c:	68d4      	ldr	r4, [r2, #12]
   1e73e:	3102      	adds	r1, #2
   1e740:	7823      	ldrb	r3, [r4, #0]
   1e742:	b913      	cbnz	r3, 1e74a <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   1e744:	7021      	strb	r1, [r4, #0]
	return true;
   1e746:	2001      	movs	r0, #1
}
   1e748:	bd10      	pop	{r4, pc}
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   1e74a:	428b      	cmp	r3, r1
   1e74c:	d0fb      	beq.n	1e746 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   1e74e:	8983      	ldrh	r3, [r0, #12]
   1e750:	3b02      	subs	r3, #2
   1e752:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   1e754:	2000      	movs	r0, #0
   1e756:	6110      	str	r0, [r2, #16]
		return false;
   1e758:	e7f6      	b.n	1e748 <attr_read_type_cb+0xe>

0001e75a <att_prepare_write_req>:
}
   1e75a:	2006      	movs	r0, #6
   1e75c:	4770      	bx	lr

0001e75e <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e75e:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1e762:	4108      	asrs	r0, r1
}
   1e764:	f000 0001 	and.w	r0, r0, #1
   1e768:	4770      	bx	lr

0001e76a <write_cb>:
{
   1e76a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1e76c:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   1e76e:	4601      	mov	r1, r0
{
   1e770:	4605      	mov	r5, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   1e772:	f44f 7295 	mov.w	r2, #298	; 0x12a
   1e776:	6820      	ldr	r0, [r4, #0]
   1e778:	f000 fe38 	bl	1f3ec <bt_gatt_check_perm>
   1e77c:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1e77e:	bb00      	cbnz	r0, 1e7c2 <write_cb+0x58>
	if (!data->req) {
   1e780:	7a23      	ldrb	r3, [r4, #8]
   1e782:	b1b3      	cbz	r3, 1e7b2 <write_cb+0x48>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   1e784:	f1a3 0218 	sub.w	r2, r3, #24
   1e788:	4253      	negs	r3, r2
   1e78a:	4153      	adcs	r3, r2
   1e78c:	009b      	lsls	r3, r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   1e78e:	9301      	str	r3, [sp, #4]
   1e790:	8a63      	ldrh	r3, [r4, #18]
   1e792:	4629      	mov	r1, r5
   1e794:	9300      	str	r3, [sp, #0]
   1e796:	68ae      	ldr	r6, [r5, #8]
   1e798:	8a23      	ldrh	r3, [r4, #16]
   1e79a:	68e2      	ldr	r2, [r4, #12]
   1e79c:	6820      	ldr	r0, [r4, #0]
   1e79e:	47b0      	blx	r6
	if (write < 0 || write != data->len) {
   1e7a0:	2800      	cmp	r0, #0
   1e7a2:	db08      	blt.n	1e7b6 <write_cb+0x4c>
   1e7a4:	8a23      	ldrh	r3, [r4, #16]
   1e7a6:	4298      	cmp	r0, r3
   1e7a8:	d10e      	bne.n	1e7c8 <write_cb+0x5e>
	data->err = 0U;
   1e7aa:	2300      	movs	r3, #0
	return BT_GATT_ITER_CONTINUE;
   1e7ac:	2001      	movs	r0, #1
	data->err = 0U;
   1e7ae:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   1e7b0:	e008      	b.n	1e7c4 <write_cb+0x5a>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   1e7b2:	2302      	movs	r3, #2
   1e7b4:	e7eb      	b.n	1e78e <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   1e7b6:	f110 0fff 	cmn.w	r0, #255	; 0xff
   1e7ba:	d305      	bcc.n	1e7c8 <write_cb+0x5e>
		return -err;
   1e7bc:	4240      	negs	r0, r0
   1e7be:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   1e7c0:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   1e7c2:	2000      	movs	r0, #0
}
   1e7c4:	b002      	add	sp, #8
   1e7c6:	bd70      	pop	{r4, r5, r6, pc}
	return BT_ATT_ERR_UNLIKELY;
   1e7c8:	200e      	movs	r0, #14
   1e7ca:	e7f9      	b.n	1e7c0 <write_cb+0x56>

0001e7cc <bt_gatt_foreach_attr>:
{
   1e7cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1e7ce:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1e7d2:	2300      	movs	r3, #0
   1e7d4:	461a      	mov	r2, r3
   1e7d6:	9300      	str	r3, [sp, #0]
   1e7d8:	f7f5 f970 	bl	13abc <bt_gatt_foreach_attr_type>
}
   1e7dc:	b005      	add	sp, #20
   1e7de:	f85d fb04 	ldr.w	pc, [sp], #4

0001e7e2 <att_chan_mtu_updated>:
{
   1e7e2:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   1e7e4:	6805      	ldr	r5, [r0, #0]
	return list->head;
   1e7e6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1e7e8:	b352      	cbz	r2, 1e840 <att_chan_mtu_updated+0x5e>
	return node->next;
   1e7ea:	6813      	ldr	r3, [r2, #0]
   1e7ec:	b103      	cbz	r3, 1e7f0 <att_chan_mtu_updated+0xe>
   1e7ee:	3be0      	subs	r3, #224	; 0xe0
   1e7f0:	f1a2 04e0 	sub.w	r4, r2, #224	; 0xe0
   1e7f4:	2200      	movs	r2, #0
   1e7f6:	4611      	mov	r1, r2
   1e7f8:	e000      	b.n	1e7fc <att_chan_mtu_updated+0x1a>
   1e7fa:	3be0      	subs	r3, #224	; 0xe0
		if (chan == updated_chan) {
   1e7fc:	4284      	cmp	r4, r0
   1e7fe:	d007      	beq.n	1e810 <att_chan_mtu_updated+0x2e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   1e800:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   1e802:	8b64      	ldrh	r4, [r4, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   1e804:	42b1      	cmp	r1, r6
   1e806:	bf38      	it	cc
   1e808:	4631      	movcc	r1, r6
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   1e80a:	42a2      	cmp	r2, r4
   1e80c:	bf38      	it	cc
   1e80e:	4622      	movcc	r2, r4
   1e810:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1e812:	b12b      	cbz	r3, 1e820 <att_chan_mtu_updated+0x3e>
   1e814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   1e818:	2b00      	cmp	r3, #0
   1e81a:	d1ee      	bne.n	1e7fa <att_chan_mtu_updated+0x18>
		if (chan == updated_chan) {
   1e81c:	4284      	cmp	r4, r0
   1e81e:	d1ef      	bne.n	1e800 <att_chan_mtu_updated+0x1e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   1e820:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   1e822:	8b40      	ldrh	r0, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   1e824:	428b      	cmp	r3, r1
   1e826:	d801      	bhi.n	1e82c <att_chan_mtu_updated+0x4a>
   1e828:	4290      	cmp	r0, r2
   1e82a:	d90b      	bls.n	1e844 <att_chan_mtu_updated+0x62>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   1e82c:	4282      	cmp	r2, r0
   1e82e:	bf38      	it	cc
   1e830:	4602      	movcc	r2, r0
   1e832:	4299      	cmp	r1, r3
   1e834:	6828      	ldr	r0, [r5, #0]
   1e836:	bf38      	it	cc
   1e838:	4619      	movcc	r1, r3
}
   1e83a:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   1e83c:	f7f5 bdec 	b.w	14418 <bt_gatt_att_max_mtu_changed>
   1e840:	4611      	mov	r1, r2
   1e842:	e7ed      	b.n	1e820 <att_chan_mtu_updated+0x3e>
}
   1e844:	bc70      	pop	{r4, r5, r6}
   1e846:	4770      	bx	lr

0001e848 <attr_read_group_cb>:
	if (!data->rsp->len) {
   1e848:	68d0      	ldr	r0, [r2, #12]
   1e84a:	3104      	adds	r1, #4
   1e84c:	7803      	ldrb	r3, [r0, #0]
   1e84e:	b913      	cbnz	r3, 1e856 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   1e850:	7001      	strb	r1, [r0, #0]
	return true;
   1e852:	2001      	movs	r0, #1
   1e854:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   1e856:	428b      	cmp	r3, r1
   1e858:	d0fb      	beq.n	1e852 <attr_read_group_cb+0xa>
		data->group = NULL;
   1e85a:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   1e85c:	6891      	ldr	r1, [r2, #8]
   1e85e:	898b      	ldrh	r3, [r1, #12]
   1e860:	3b04      	subs	r3, #4
   1e862:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   1e864:	6110      	str	r0, [r2, #16]
}
   1e866:	4770      	bx	lr

0001e868 <find_info_cb>:
{
   1e868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   1e86a:	6893      	ldr	r3, [r2, #8]
{
   1e86c:	4605      	mov	r5, r0
   1e86e:	460f      	mov	r7, r1
   1e870:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1e872:	6816      	ldr	r6, [r2, #0]
	if (!data->rsp) {
   1e874:	b963      	cbnz	r3, 1e890 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   1e876:	6850      	ldr	r0, [r2, #4]
   1e878:	2101      	movs	r1, #1
   1e87a:	3008      	adds	r0, #8
   1e87c:	f001 fb06 	bl	1fe8c <net_buf_simple_add>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1e880:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1e882:	682b      	ldr	r3, [r5, #0]
   1e884:	781b      	ldrb	r3, [r3, #0]
   1e886:	2b00      	cmp	r3, #0
   1e888:	bf14      	ite	ne
   1e88a:	2302      	movne	r3, #2
   1e88c:	2301      	moveq	r3, #1
   1e88e:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   1e890:	68a3      	ldr	r3, [r4, #8]
   1e892:	781b      	ldrb	r3, [r3, #0]
   1e894:	2b01      	cmp	r3, #1
   1e896:	d003      	beq.n	1e8a0 <find_info_cb+0x38>
   1e898:	2b02      	cmp	r3, #2
   1e89a:	d019      	beq.n	1e8d0 <find_info_cb+0x68>
   1e89c:	2000      	movs	r0, #0
   1e89e:	e016      	b.n	1e8ce <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   1e8a0:	682b      	ldr	r3, [r5, #0]
   1e8a2:	781b      	ldrb	r3, [r3, #0]
   1e8a4:	2b00      	cmp	r3, #0
   1e8a6:	d1f9      	bne.n	1e89c <find_info_cb+0x34>
   1e8a8:	6860      	ldr	r0, [r4, #4]
   1e8aa:	2104      	movs	r1, #4
   1e8ac:	3008      	adds	r0, #8
   1e8ae:	f001 faed 	bl	1fe8c <net_buf_simple_add>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1e8b2:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   1e8b4:	8007      	strh	r7, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1e8b6:	682a      	ldr	r2, [r5, #0]
   1e8b8:	68e3      	ldr	r3, [r4, #12]
   1e8ba:	8852      	ldrh	r2, [r2, #2]
   1e8bc:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   1e8be:	6863      	ldr	r3, [r4, #4]
   1e8c0:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
   1e8c2:	899b      	ldrh	r3, [r3, #12]
   1e8c4:	1ac0      	subs	r0, r0, r3
   1e8c6:	2804      	cmp	r0, #4
		if (chan->chan.tx.mtu - data->buf->len >
   1e8c8:	bf94      	ite	ls
   1e8ca:	2000      	movls	r0, #0
   1e8cc:	2001      	movhi	r0, #1
}
   1e8ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   1e8d0:	682b      	ldr	r3, [r5, #0]
   1e8d2:	781b      	ldrb	r3, [r3, #0]
   1e8d4:	2b02      	cmp	r3, #2
   1e8d6:	d1e1      	bne.n	1e89c <find_info_cb+0x34>
   1e8d8:	6860      	ldr	r0, [r4, #4]
   1e8da:	2112      	movs	r1, #18
   1e8dc:	3008      	adds	r0, #8
   1e8de:	f001 fad5 	bl	1fe8c <net_buf_simple_add>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   1e8e2:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   1e8e4:	8007      	strh	r7, [r0, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1e8e6:	682b      	ldr	r3, [r5, #0]
   1e8e8:	68e2      	ldr	r2, [r4, #12]
   1e8ea:	1c59      	adds	r1, r3, #1
   1e8ec:	3202      	adds	r2, #2
   1e8ee:	3311      	adds	r3, #17
   1e8f0:	f851 0b04 	ldr.w	r0, [r1], #4
   1e8f4:	4299      	cmp	r1, r3
   1e8f6:	f842 0b04 	str.w	r0, [r2], #4
   1e8fa:	d1f9      	bne.n	1e8f0 <find_info_cb+0x88>
		if (chan->chan.tx.mtu - data->buf->len >
   1e8fc:	6863      	ldr	r3, [r4, #4]
   1e8fe:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
   1e900:	899b      	ldrh	r3, [r3, #12]
   1e902:	1ac0      	subs	r0, r0, r3
   1e904:	2812      	cmp	r0, #18
   1e906:	e7df      	b.n	1e8c8 <find_info_cb+0x60>

0001e908 <z_log_msg_static_create.constprop.0>:
   1e908:	2300      	movs	r3, #0
   1e90a:	f7ed bcd3 	b.w	c2b4 <z_impl_z_log_msg_static_create>

0001e90e <chan_req_send>:
{
   1e90e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e910:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1e912:	6888      	ldr	r0, [r1, #8]
   1e914:	f7ff ff09 	bl	1e72a <net_buf_frags_len>
   1e918:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
{
   1e91a:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1e91c:	4283      	cmp	r3, r0
   1e91e:	d30d      	bcc.n	1e93c <chan_req_send+0x2e>
	req->buf = NULL;
   1e920:	2600      	movs	r6, #0
	chan->req = req;
   1e922:	f8c5 1094 	str.w	r1, [r5, #148]	; 0x94
	buf = req->buf;
   1e926:	688f      	ldr	r7, [r1, #8]
	return chan_send(chan, buf);
   1e928:	4628      	mov	r0, r5
	req->buf = NULL;
   1e92a:	608e      	str	r6, [r1, #8]
	return chan_send(chan, buf);
   1e92c:	4639      	mov	r1, r7
   1e92e:	f7f3 fead 	bl	1268c <chan_send>
	if (err) {
   1e932:	b110      	cbz	r0, 1e93a <chan_req_send+0x2c>
		req->buf = buf;
   1e934:	60a7      	str	r7, [r4, #8]
		chan->req = NULL;
   1e936:	f8c5 6094 	str.w	r6, [r5, #148]	; 0x94
}
   1e93a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   1e93c:	f06f 0079 	mvn.w	r0, #121	; 0x79
   1e940:	e7fb      	b.n	1e93a <chan_req_send+0x2c>

0001e942 <process_queue>:
{
   1e942:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   1e944:	2200      	movs	r2, #0
{
   1e946:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   1e948:	2300      	movs	r3, #0
   1e94a:	4608      	mov	r0, r1
{
   1e94c:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   1e94e:	f001 fa02 	bl	1fd56 <net_buf_get>
	if (buf) {
   1e952:	4605      	mov	r5, r0
   1e954:	b158      	cbz	r0, 1e96e <process_queue+0x2c>
	return chan_send(chan, buf);
   1e956:	4601      	mov	r1, r0
   1e958:	4620      	mov	r0, r4
   1e95a:	f7f3 fe97 	bl	1268c <chan_send>
		if (err) {
   1e95e:	4604      	mov	r4, r0
   1e960:	b118      	cbz	r0, 1e96a <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   1e962:	4629      	mov	r1, r5
   1e964:	4630      	mov	r0, r6
   1e966:	f002 fc03 	bl	21170 <k_queue_prepend>
}
   1e96a:	4620      	mov	r0, r4
   1e96c:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   1e96e:	f06f 0401 	mvn.w	r4, #1
   1e972:	e7fa      	b.n	1e96a <process_queue+0x28>

0001e974 <bt_att_chan_send_rsp>:
{
   1e974:	b538      	push	{r3, r4, r5, lr}
   1e976:	4604      	mov	r4, r0
   1e978:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   1e97a:	f7f3 fe87 	bl	1268c <chan_send>
	if (err) {
   1e97e:	b130      	cbz	r0, 1e98e <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   1e980:	4629      	mov	r1, r5
   1e982:	f104 0098 	add.w	r0, r4, #152	; 0x98
}
   1e986:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   1e98a:	f001 ba4c 	b.w	1fe26 <net_buf_put>
}
   1e98e:	bd38      	pop	{r3, r4, r5, pc}

0001e990 <att_chan_read>:
{
   1e990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e994:	4680      	mov	r8, r0
   1e996:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1e998:	4610      	mov	r0, r2
{
   1e99a:	4699      	mov	r9, r3
   1e99c:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1e99e:	f7ff fec4 	bl	1e72a <net_buf_frags_len>
   1e9a2:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
{
   1e9a6:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1e9a8:	4283      	cmp	r3, r0
   1e9aa:	d97a      	bls.n	1eaa2 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   1e9ac:	f8d8 3004 	ldr.w	r3, [r8, #4]
	frag = net_buf_frag_last(buf);
   1e9b0:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->chan.chan.conn;
   1e9b2:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   1e9b4:	f001 fa48 	bl	1fe48 <net_buf_frag_last>
	size_t len, total = 0;
   1e9b8:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   1e9bc:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1e9be:	4630      	mov	r0, r6
   1e9c0:	f7ff feb3 	bl	1e72a <net_buf_frags_len>
   1e9c4:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   1e9c8:	f105 0708 	add.w	r7, r5, #8
   1e9cc:	1a24      	subs	r4, r4, r0
   1e9ce:	4638      	mov	r0, r7
   1e9d0:	f001 faa0 	bl	1ff14 <net_buf_simple_tailroom>
   1e9d4:	4284      	cmp	r4, r0
   1e9d6:	d211      	bcs.n	1e9fc <att_chan_read+0x6c>
   1e9d8:	4630      	mov	r0, r6
   1e9da:	f7ff fea6 	bl	1e72a <net_buf_frags_len>
   1e9de:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   1e9e2:	1a24      	subs	r4, r4, r0
		if (!len) {
   1e9e4:	bb34      	cbnz	r4, 1ea34 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   1e9e6:	79b0      	ldrb	r0, [r6, #6]
   1e9e8:	f7f7 fbe6 	bl	161b8 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1e9ec:	2200      	movs	r2, #0
   1e9ee:	2300      	movs	r3, #0
   1e9f0:	f001 f9ac 	bl	1fd4c <net_buf_alloc_fixed>
			if (!frag) {
   1e9f4:	4605      	mov	r5, r0
   1e9f6:	b930      	cbnz	r0, 1ea06 <att_chan_read+0x76>
	return total;
   1e9f8:	4657      	mov	r7, sl
   1e9fa:	e02c      	b.n	1ea56 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   1e9fc:	4638      	mov	r0, r7
   1e9fe:	f001 fa89 	bl	1ff14 <net_buf_simple_tailroom>
   1ea02:	4604      	mov	r4, r0
   1ea04:	e7ee      	b.n	1e9e4 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   1ea06:	4601      	mov	r1, r0
   1ea08:	4630      	mov	r0, r6
   1ea0a:	f001 fa2e 	bl	1fe6a <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1ea0e:	4630      	mov	r0, r6
   1ea10:	f7ff fe8b 	bl	1e72a <net_buf_frags_len>
   1ea14:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   1ea18:	f105 0708 	add.w	r7, r5, #8
   1ea1c:	1a24      	subs	r4, r4, r0
   1ea1e:	4638      	mov	r0, r7
   1ea20:	f001 fa78 	bl	1ff14 <net_buf_simple_tailroom>
   1ea24:	4284      	cmp	r4, r0
   1ea26:	d21a      	bcs.n	1ea5e <att_chan_read+0xce>
   1ea28:	4630      	mov	r0, r6
   1ea2a:	f7ff fe7e 	bl	1e72a <net_buf_frags_len>
   1ea2e:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   1ea32:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   1ea34:	68a9      	ldr	r1, [r5, #8]
   1ea36:	89aa      	ldrh	r2, [r5, #12]
   1ea38:	f8cd 9000 	str.w	r9, [sp]
   1ea3c:	f8db 7004 	ldr.w	r7, [fp, #4]
   1ea40:	440a      	add	r2, r1
   1ea42:	9803      	ldr	r0, [sp, #12]
   1ea44:	4659      	mov	r1, fp
   1ea46:	b2a3      	uxth	r3, r4
   1ea48:	47b8      	blx	r7
		if (read < 0) {
   1ea4a:	1e07      	subs	r7, r0, #0
   1ea4c:	da0c      	bge.n	1ea68 <att_chan_read+0xd8>
				return total;
   1ea4e:	f1ba 0f00 	cmp.w	sl, #0
   1ea52:	bf18      	it	ne
   1ea54:	4657      	movne	r7, sl
}
   1ea56:	4638      	mov	r0, r7
   1ea58:	b005      	add	sp, #20
   1ea5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ea5e:	4638      	mov	r0, r7
   1ea60:	f001 fa58 	bl	1ff14 <net_buf_simple_tailroom>
   1ea64:	4604      	mov	r4, r0
   1ea66:	e7e5      	b.n	1ea34 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   1ea68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1ea6a:	b993      	cbnz	r3, 1ea92 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   1ea6c:	4639      	mov	r1, r7
   1ea6e:	f105 0008 	add.w	r0, r5, #8
   1ea72:	f001 fa0b 	bl	1fe8c <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1ea76:	4630      	mov	r0, r6
   1ea78:	f7ff fe57 	bl	1e72a <net_buf_frags_len>
   1ea7c:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   1ea80:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1ea82:	4283      	cmp	r3, r0
		total += read;
   1ea84:	44ba      	add	sl, r7
		offset += read;
   1ea86:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1ea8a:	d9b5      	bls.n	1e9f8 <att_chan_read+0x68>
   1ea8c:	42a7      	cmp	r7, r4
   1ea8e:	d096      	beq.n	1e9be <att_chan_read+0x2e>
   1ea90:	e7b2      	b.n	1e9f8 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   1ea92:	4639      	mov	r1, r7
   1ea94:	4628      	mov	r0, r5
   1ea96:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1ea98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1ea9a:	4798      	blx	r3
   1ea9c:	2800      	cmp	r0, #0
   1ea9e:	d1e5      	bne.n	1ea6c <att_chan_read+0xdc>
   1eaa0:	e7aa      	b.n	1e9f8 <att_chan_read+0x68>
		return 0;
   1eaa2:	2700      	movs	r7, #0
   1eaa4:	e7d7      	b.n	1ea56 <att_chan_read+0xc6>

0001eaa6 <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1eaa6:	2200      	movs	r2, #0
	return list->head;
   1eaa8:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1eaaa:	b903      	cbnz	r3, 1eaae <sys_slist_find_and_remove.isra.0+0x8>
   1eaac:	4770      	bx	lr
   1eaae:	428b      	cmp	r3, r1
   1eab0:	d10f      	bne.n	1ead2 <sys_slist_find_and_remove.isra.0+0x2c>
	return node->next;
   1eab2:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   1eab4:	b93a      	cbnz	r2, 1eac6 <sys_slist_find_and_remove.isra.0+0x20>
   1eab6:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   1eab8:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1eaba:	4291      	cmp	r1, r2
   1eabc:	d100      	bne.n	1eac0 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   1eabe:	6043      	str	r3, [r0, #4]
	parent->next = child;
   1eac0:	2300      	movs	r3, #0
   1eac2:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   1eac4:	4770      	bx	lr
	parent->next = child;
   1eac6:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1eac8:	6843      	ldr	r3, [r0, #4]
   1eaca:	4299      	cmp	r1, r3
	list->tail = node;
   1eacc:	bf08      	it	eq
   1eace:	6042      	streq	r2, [r0, #4]
}
   1ead0:	e7f6      	b.n	1eac0 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   1ead2:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1ead4:	681b      	ldr	r3, [r3, #0]
   1ead6:	e7e8      	b.n	1eaaa <sys_slist_find_and_remove.isra.0+0x4>

0001ead8 <att_exec_write_req>:
static uint8_t att_exec_write_req(struct bt_att_chan *chan, struct net_buf *buf)
   1ead8:	2006      	movs	r0, #6
   1eada:	4770      	bx	lr

0001eadc <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1eadc:	2301      	movs	r3, #1
{
   1eade:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1eae0:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1eae4:	e8d0 3fef 	ldaex	r3, [r0]
   1eae8:	ea43 0201 	orr.w	r2, r3, r1
   1eaec:	e8c0 2fe4 	stlex	r4, r2, [r0]
   1eaf0:	2c00      	cmp	r4, #0
   1eaf2:	d1f7      	bne.n	1eae4 <atomic_test_and_set_bit+0x8>
	return (old & mask) != 0;
   1eaf4:	4219      	tst	r1, r3
}
   1eaf6:	bf14      	ite	ne
   1eaf8:	2001      	movne	r0, #1
   1eafa:	2000      	moveq	r0, #0
   1eafc:	bd10      	pop	{r4, pc}

0001eafe <read_cb>:
{
   1eafe:	b573      	push	{r0, r1, r4, r5, r6, lr}
	data->err = 0x00;
   1eb00:	2300      	movs	r3, #0
{
   1eb02:	4605      	mov	r5, r0
	struct bt_att_chan *chan = data->chan;
   1eb04:	6816      	ldr	r6, [r2, #0]
{
   1eb06:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   1eb08:	6870      	ldr	r0, [r6, #4]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1eb0a:	4629      	mov	r1, r5
	data->err = 0x00;
   1eb0c:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1eb0e:	2295      	movs	r2, #149	; 0x95
   1eb10:	f000 fc6c 	bl	1f3ec <bt_gatt_check_perm>
   1eb14:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   1eb16:	b980      	cbnz	r0, 1eb3a <read_cb+0x3c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1eb18:	e9cd 0000 	strd	r0, r0, [sp]
   1eb1c:	4629      	mov	r1, r5
   1eb1e:	4630      	mov	r0, r6
   1eb20:	88a3      	ldrh	r3, [r4, #4]
   1eb22:	68a2      	ldr	r2, [r4, #8]
   1eb24:	f7ff ff34 	bl	1e990 <att_chan_read>
	if (ret < 0) {
   1eb28:	2800      	cmp	r0, #0
   1eb2a:	da09      	bge.n	1eb40 <read_cb+0x42>
	if (err < 0 && err >= -0xff) {
   1eb2c:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   1eb30:	bf32      	itee	cc
   1eb32:	200e      	movcc	r0, #14
		return -err;
   1eb34:	4240      	negcs	r0, r0
   1eb36:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(ret);
   1eb38:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   1eb3a:	2000      	movs	r0, #0
}
   1eb3c:	b002      	add	sp, #8
   1eb3e:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_CONTINUE;
   1eb40:	2001      	movs	r0, #1
   1eb42:	e7fb      	b.n	1eb3c <read_cb+0x3e>

0001eb44 <read_vl_cb>:
{
   1eb44:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	data->err = 0x00;
   1eb48:	2300      	movs	r3, #0
{
   1eb4a:	4606      	mov	r6, r0
	struct bt_att_chan *chan = data->chan;
   1eb4c:	f8d2 8000 	ldr.w	r8, [r2]
{
   1eb50:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   1eb52:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1eb56:	4631      	mov	r1, r6
	data->err = 0x00;
   1eb58:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1eb5a:	2295      	movs	r2, #149	; 0x95
   1eb5c:	f000 fc46 	bl	1f3ec <bt_gatt_check_perm>
   1eb60:	4605      	mov	r5, r0
   1eb62:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   1eb64:	b9e0      	cbnz	r0, 1eba0 <read_vl_cb+0x5c>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   1eb66:	68a0      	ldr	r0, [r4, #8]
   1eb68:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   1eb6c:	8982      	ldrh	r2, [r0, #12]
   1eb6e:	1a9b      	subs	r3, r3, r2
   1eb70:	2b01      	cmp	r3, #1
   1eb72:	dd15      	ble.n	1eba0 <read_vl_cb+0x5c>
   1eb74:	2102      	movs	r1, #2
   1eb76:	3008      	adds	r0, #8
   1eb78:	f001 f988 	bl	1fe8c <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1eb7c:	e9cd 5500 	strd	r5, r5, [sp]
   1eb80:	4607      	mov	r7, r0
   1eb82:	88a3      	ldrh	r3, [r4, #4]
   1eb84:	4631      	mov	r1, r6
   1eb86:	4640      	mov	r0, r8
   1eb88:	68a2      	ldr	r2, [r4, #8]
   1eb8a:	f7ff ff01 	bl	1e990 <att_chan_read>
	if (read < 0) {
   1eb8e:	1e03      	subs	r3, r0, #0
   1eb90:	da0a      	bge.n	1eba8 <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   1eb92:	f113 0fff 	cmn.w	r3, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   1eb96:	bf32      	itee	cc
   1eb98:	230e      	movcc	r3, #14
		return -err;
   1eb9a:	425b      	negcs	r3, r3
   1eb9c:	b2db      	uxtbcs	r3, r3
		data->err = err_to_att(read);
   1eb9e:	7323      	strb	r3, [r4, #12]
		return BT_GATT_ITER_STOP;
   1eba0:	2000      	movs	r0, #0
}
   1eba2:	b002      	add	sp, #8
   1eba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return BT_GATT_ITER_CONTINUE;
   1eba8:	2001      	movs	r0, #1
	rsp->len = read;
   1ebaa:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   1ebac:	e7f9      	b.n	1eba2 <read_vl_cb+0x5e>

0001ebae <bt_att_sent>:
{
   1ebae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ebb0:	4605      	mov	r5, r0
	struct bt_att *att = chan->att;
   1ebb2:	f850 4c04 	ldr.w	r4, [r0, #-4]
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1ebb6:	1f07      	subs	r7, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1ebb8:	f100 038c 	add.w	r3, r0, #140	; 0x8c
   1ebbc:	e8d3 1fef 	ldaex	r1, [r3]
   1ebc0:	f021 0110 	bic.w	r1, r1, #16
   1ebc4:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1ebc8:	2a00      	cmp	r2, #0
   1ebca:	d1f7      	bne.n	1ebbc <bt_att_sent+0xe>
	if (!att) {
   1ebcc:	b30c      	cbz	r4, 1ec12 <bt_att_sent+0x64>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   1ebce:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   1ebd2:	b98b      	cbnz	r3, 1ebf8 <bt_att_sent+0x4a>
   1ebd4:	6863      	ldr	r3, [r4, #4]
   1ebd6:	b17b      	cbz	r3, 1ebf8 <bt_att_sent+0x4a>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1ebd8:	1d20      	adds	r0, r4, #4
   1ebda:	f7ff fd9c 	bl	1e716 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1ebde:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1ebe0:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1ebe2:	4638      	mov	r0, r7
   1ebe4:	f7ff fe93 	bl	1e90e <chan_req_send>
   1ebe8:	2800      	cmp	r0, #0
   1ebea:	da12      	bge.n	1ec12 <bt_att_sent+0x64>
	return list->head;
   1ebec:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   1ebee:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1ebf0:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   1ebf2:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   1ebf4:	b903      	cbnz	r3, 1ebf8 <bt_att_sent+0x4a>
	list->tail = node;
   1ebf6:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   1ebf8:	4638      	mov	r0, r7
   1ebfa:	f105 0194 	add.w	r1, r5, #148	; 0x94
   1ebfe:	f7ff fea0 	bl	1e942 <process_queue>
	if (!err) {
   1ec02:	b130      	cbz	r0, 1ec12 <bt_att_sent+0x64>
	(void)process_queue(chan, &att->tx_queue);
   1ec04:	4638      	mov	r0, r7
   1ec06:	f104 010c 	add.w	r1, r4, #12
}
   1ec0a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   1ec0e:	f7ff be98 	b.w	1e942 <process_queue>
}
   1ec12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001ec14 <att_req_send_process>:
{
   1ec14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   1ec18:	6a44      	ldr	r4, [r0, #36]	; 0x24
   1ec1a:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ec1c:	2c00      	cmp	r4, #0
   1ec1e:	d03b      	beq.n	1ec98 <att_req_send_process+0x84>
	return node->next;
   1ec20:	f854 69e0 	ldr.w	r6, [r4], #-224
   1ec24:	b106      	cbz	r6, 1ec28 <att_req_send_process+0x14>
   1ec26:	3ee0      	subs	r6, #224	; 0xe0
{
   1ec28:	2300      	movs	r3, #0
		req = get_first_req_matching_chan(&att->reqs, chan);
   1ec2a:	f108 0704 	add.w	r7, r8, #4
{
   1ec2e:	461d      	mov	r5, r3
   1ec30:	e013      	b.n	1ec5a <att_req_send_process+0x46>
		if (!req && prev &&
   1ec32:	b1c3      	cbz	r3, 1ec66 <att_req_send_process+0x52>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   1ec34:	2103      	movs	r1, #3
   1ec36:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1ec3a:	f7ff fd90 	bl	1e75e <atomic_test_bit>
   1ec3e:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   1ec40:	f103 0090 	add.w	r0, r3, #144	; 0x90
   1ec44:	f7ff fd8b 	bl	1e75e <atomic_test_bit>
		if (!req && prev &&
   1ec48:	4282      	cmp	r2, r0
   1ec4a:	d10c      	bne.n	1ec66 <att_req_send_process+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ec4c:	b326      	cbz	r6, 1ec98 <att_req_send_process+0x84>
   1ec4e:	f8d6 20e0 	ldr.w	r2, [r6, #224]	; 0xe0
   1ec52:	b102      	cbz	r2, 1ec56 <att_req_send_process+0x42>
   1ec54:	3ae0      	subs	r2, #224	; 0xe0
{
   1ec56:	4634      	mov	r4, r6
   1ec58:	4616      	mov	r6, r2
		if (chan->req) {
   1ec5a:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   1ec5e:	2a00      	cmp	r2, #0
   1ec60:	d1f4      	bne.n	1ec4c <att_req_send_process+0x38>
		if (!req && prev &&
   1ec62:	2d00      	cmp	r5, #0
   1ec64:	d0e5      	beq.n	1ec32 <att_req_send_process+0x1e>
	sys_snode_t *node = sys_slist_get(reqs);
   1ec66:	4638      	mov	r0, r7
   1ec68:	f7ff fd55 	bl	1e716 <sys_slist_get>
	if (node) {
   1ec6c:	4605      	mov	r5, r0
   1ec6e:	b908      	cbnz	r0, 1ec74 <att_req_send_process+0x60>
   1ec70:	4623      	mov	r3, r4
   1ec72:	e7eb      	b.n	1ec4c <att_req_send_process+0x38>
	return chan_req_send(chan, req);
   1ec74:	4601      	mov	r1, r0
   1ec76:	4620      	mov	r0, r4
   1ec78:	f7ff fe49 	bl	1e90e <chan_req_send>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   1ec7c:	2800      	cmp	r0, #0
   1ec7e:	da0b      	bge.n	1ec98 <att_req_send_process+0x84>
	return list->head;
   1ec80:	f8d8 3004 	ldr.w	r3, [r8, #4]
	parent->next = child;
   1ec84:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   1ec86:	f8d8 3008 	ldr.w	r3, [r8, #8]
	list->head = node;
   1ec8a:	f8c8 5004 	str.w	r5, [r8, #4]
Z_GENLIST_PREPEND(slist, snode)
   1ec8e:	2b00      	cmp	r3, #0
   1ec90:	d1ee      	bne.n	1ec70 <att_req_send_process+0x5c>
	list->tail = node;
   1ec92:	f8c8 5008 	str.w	r5, [r8, #8]
}
   1ec96:	e7eb      	b.n	1ec70 <att_req_send_process+0x5c>
}
   1ec98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001ec9c <bt_att_status>:
{
   1ec9c:	b538      	push	{r3, r4, r5, lr}
   1ec9e:	4605      	mov	r5, r0
   1eca0:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1eca2:	2100      	movs	r1, #0
   1eca4:	f7ff fd5b 	bl	1e75e <atomic_test_bit>
   1eca8:	b1c0      	cbz	r0, 1ecdc <bt_att_status+0x40>
	if (!chan->att) {
   1ecaa:	f855 0c04 	ldr.w	r0, [r5, #-4]
   1ecae:	b1a8      	cbz	r0, 1ecdc <bt_att_status+0x40>
	if (chan->req) {
   1ecb0:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   1ecb4:	b993      	cbnz	r3, 1ecdc <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
   1ecb6:	3004      	adds	r0, #4
   1ecb8:	f7ff fd2d 	bl	1e716 <sys_slist_get>
	if (!node) {
   1ecbc:	4604      	mov	r4, r0
   1ecbe:	b168      	cbz	r0, 1ecdc <bt_att_status+0x40>
	return chan_req_send(chan, req);
   1ecc0:	4601      	mov	r1, r0
   1ecc2:	1f28      	subs	r0, r5, #4
   1ecc4:	f7ff fe23 	bl	1e90e <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1ecc8:	2800      	cmp	r0, #0
   1ecca:	da07      	bge.n	1ecdc <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
   1eccc:	f855 3c04 	ldr.w	r3, [r5, #-4]
	return list->head;
   1ecd0:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1ecd2:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1ecd4:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1ecd6:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1ecd8:	b902      	cbnz	r2, 1ecdc <bt_att_status+0x40>
	list->tail = node;
   1ecda:	609c      	str	r4, [r3, #8]
}
   1ecdc:	bd38      	pop	{r3, r4, r5, pc}

0001ecde <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   1ecde:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   1ece0:	6883      	ldr	r3, [r0, #8]
   1ece2:	699b      	ldr	r3, [r3, #24]
   1ece4:	b10b      	cbz	r3, 1ecea <att_sent+0xc>
		chan->ops->sent(chan);
   1ece6:	3004      	adds	r0, #4
   1ece8:	4718      	bx	r3
}
   1ecea:	4770      	bx	lr

0001ecec <att_unknown>:
{
   1ecec:	b510      	push	{r4, lr}
   1ecee:	460c      	mov	r4, r1
	if (!err) {
   1ecf0:	b90a      	cbnz	r2, 1ecf6 <att_unknown+0xa>
		att_sent(conn, user_data);
   1ecf2:	f7ff fff4 	bl	1ecde <att_sent>
	tx_meta_data_free(user_data);
   1ecf6:	4620      	mov	r0, r4
}
   1ecf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   1ecfc:	f7f3 bbf2 	b.w	124e4 <tx_meta_data_free>

0001ed00 <att_tx_complete>:
{
   1ed00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ed04:	4606      	mov	r6, r0
   1ed06:	460d      	mov	r5, r1
	if (!err) {
   1ed08:	4614      	mov	r4, r2
   1ed0a:	b122      	cbz	r2, 1ed16 <att_tx_complete+0x16>
}
   1ed0c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	tx_meta_data_free(data);
   1ed10:	4608      	mov	r0, r1
   1ed12:	f7f3 bbe7 	b.w	124e4 <tx_meta_data_free>
		att_sent(conn, user_data);
   1ed16:	f7ff ffe2 	bl	1ecde <att_sent>
	bt_gatt_complete_func_t func = data->func;
   1ed1a:	68af      	ldr	r7, [r5, #8]
	tx_meta_data_free(data);
   1ed1c:	4628      	mov	r0, r5
	uint16_t attr_count = data->attr_count;
   1ed1e:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   1ed22:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   1ed26:	f7f3 fbdd 	bl	124e4 <tx_meta_data_free>
	if (!err && func) {
   1ed2a:	b92f      	cbnz	r7, 1ed38 <att_tx_complete+0x38>
}
   1ed2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   1ed30:	4649      	mov	r1, r9
   1ed32:	4630      	mov	r0, r6
   1ed34:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   1ed36:	3401      	adds	r4, #1
   1ed38:	b2a3      	uxth	r3, r4
   1ed3a:	4543      	cmp	r3, r8
   1ed3c:	d3f8      	bcc.n	1ed30 <att_tx_complete+0x30>
   1ed3e:	e7f5      	b.n	1ed2c <att_tx_complete+0x2c>

0001ed40 <att_req_sent>:
{
   1ed40:	b510      	push	{r4, lr}
   1ed42:	460c      	mov	r4, r1
	if (!err) {
   1ed44:	b90a      	cbnz	r2, 1ed4a <att_req_sent+0xa>
		att_sent(conn, user_data);
   1ed46:	f7ff ffca 	bl	1ecde <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   1ed4a:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   1ed4c:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   1ed50:	b12b      	cbz	r3, 1ed5e <att_req_sent+0x1e>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   1ed52:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1ed56:	2300      	movs	r3, #0
   1ed58:	30b0      	adds	r0, #176	; 0xb0
   1ed5a:	f7fb f8c3 	bl	19ee4 <k_work_reschedule>
	tx_meta_data_free(user_data);
   1ed5e:	4620      	mov	r0, r4
}
   1ed60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   1ed64:	f7f3 bbbe 	b.w	124e4 <tx_meta_data_free>

0001ed68 <att_cfm_sent>:
{
   1ed68:	b510      	push	{r4, lr}
   1ed6a:	460c      	mov	r4, r1
	if (!err) {
   1ed6c:	b90a      	cbnz	r2, 1ed72 <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   1ed6e:	f7ff ffb6 	bl	1ecde <att_sent>
   1ed72:	6823      	ldr	r3, [r4, #0]
   1ed74:	3390      	adds	r3, #144	; 0x90
   1ed76:	e8d3 1fef 	ldaex	r1, [r3]
   1ed7a:	f021 0102 	bic.w	r1, r1, #2
   1ed7e:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1ed82:	2a00      	cmp	r2, #0
   1ed84:	d1f7      	bne.n	1ed76 <att_cfm_sent+0xe>
	tx_meta_data_free(data);
   1ed86:	4620      	mov	r0, r4
}
   1ed88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   1ed8c:	f7f3 bbaa 	b.w	124e4 <tx_meta_data_free>

0001ed90 <att_rsp_sent>:
{
   1ed90:	b510      	push	{r4, lr}
   1ed92:	460c      	mov	r4, r1
	if (!err) {
   1ed94:	b90a      	cbnz	r2, 1ed9a <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   1ed96:	f7ff ffa2 	bl	1ecde <att_sent>
   1ed9a:	6823      	ldr	r3, [r4, #0]
   1ed9c:	3390      	adds	r3, #144	; 0x90
   1ed9e:	e8d3 1fef 	ldaex	r1, [r3]
   1eda2:	f021 0101 	bic.w	r1, r1, #1
   1eda6:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1edaa:	2a00      	cmp	r2, #0
   1edac:	d1f7      	bne.n	1ed9e <att_rsp_sent+0xe>
	tx_meta_data_free(data);
   1edae:	4620      	mov	r0, r4
}
   1edb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   1edb4:	f7f3 bb96 	b.w	124e4 <tx_meta_data_free>

0001edb8 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1edb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1edbc:	4688      	mov	r8, r1
   1edbe:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1edc0:	2101      	movs	r1, #1
   1edc2:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1edc4:	4605      	mov	r5, r0
   1edc6:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1edc8:	f7f3 fe54 	bl	12a74 <bt_att_chan_create_pdu>
	if (!buf) {
   1edcc:	4604      	mov	r4, r0
   1edce:	b170      	cbz	r0, 1edee <send_err_rsp.part.0+0x36>
   1edd0:	2104      	movs	r1, #4
   1edd2:	3008      	adds	r0, #8
   1edd4:	f001 f85a 	bl	1fe8c <net_buf_simple_add>
	rsp->request = req;
   1edd8:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
   1eddc:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
   1ede0:	70c6      	strb	r6, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   1ede2:	4621      	mov	r1, r4
   1ede4:	4628      	mov	r0, r5
}
   1ede6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   1edea:	f7ff bdc3 	b.w	1e974 <bt_att_chan_send_rsp>
}
   1edee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001edf2 <att_write_req>:
{
   1edf2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1edf4:	460c      	mov	r4, r1
   1edf6:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   1edf8:	f101 0008 	add.w	r0, r1, #8
   1edfc:	f001 f87e 	bl	1fefc <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   1ee00:	89a2      	ldrh	r2, [r4, #12]
   1ee02:	4603      	mov	r3, r0
   1ee04:	9201      	str	r2, [sp, #4]
   1ee06:	68a2      	ldr	r2, [r4, #8]
   1ee08:	2112      	movs	r1, #18
   1ee0a:	9200      	str	r2, [sp, #0]
   1ee0c:	4628      	mov	r0, r5
   1ee0e:	2213      	movs	r2, #19
   1ee10:	f7f3 ff64 	bl	12cdc <att_write_rsp.constprop.0>
}
   1ee14:	b003      	add	sp, #12
   1ee16:	bd30      	pop	{r4, r5, pc}

0001ee18 <att_write_cmd>:
{
   1ee18:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1ee1a:	460c      	mov	r4, r1
   1ee1c:	4605      	mov	r5, r0
   1ee1e:	f101 0008 	add.w	r0, r1, #8
   1ee22:	f001 f86b 	bl	1fefc <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   1ee26:	89a2      	ldrh	r2, [r4, #12]
   1ee28:	4603      	mov	r3, r0
   1ee2a:	9201      	str	r2, [sp, #4]
   1ee2c:	68a2      	ldr	r2, [r4, #8]
   1ee2e:	4628      	mov	r0, r5
   1ee30:	9200      	str	r2, [sp, #0]
   1ee32:	2200      	movs	r2, #0
   1ee34:	4611      	mov	r1, r2
   1ee36:	f7f3 ff51 	bl	12cdc <att_write_rsp.constprop.0>
}
   1ee3a:	b003      	add	sp, #12
   1ee3c:	bd30      	pop	{r4, r5, pc}

0001ee3e <att_read_blob_req>:
{
   1ee3e:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   1ee40:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   1ee42:	210c      	movs	r1, #12
   1ee44:	8813      	ldrh	r3, [r2, #0]
   1ee46:	8852      	ldrh	r2, [r2, #2]
   1ee48:	9200      	str	r2, [sp, #0]
   1ee4a:	220d      	movs	r2, #13
   1ee4c:	f7f4 f90e 	bl	1306c <att_read_rsp>
}
   1ee50:	b003      	add	sp, #12
   1ee52:	f85d fb04 	ldr.w	pc, [sp], #4

0001ee56 <att_read_req>:
{
   1ee56:	b507      	push	{r0, r1, r2, lr}
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1ee58:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(req->handle);
   1ee5a:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1ee5c:	210a      	movs	r1, #10
   1ee5e:	881b      	ldrh	r3, [r3, #0]
   1ee60:	9200      	str	r2, [sp, #0]
   1ee62:	220b      	movs	r2, #11
   1ee64:	f7f4 f902 	bl	1306c <att_read_rsp>
}
   1ee68:	b003      	add	sp, #12
   1ee6a:	f85d fb04 	ldr.w	pc, [sp], #4

0001ee6e <att_mtu_req>:
{
   1ee6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ee70:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   1ee72:	f850 2b90 	ldr.w	r2, [r0], #144
{
   1ee76:	460b      	mov	r3, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   1ee78:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   1ee7a:	6817      	ldr	r7, [r2, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   1ee7c:	f7ff fc6f 	bl	1e75e <atomic_test_bit>
   1ee80:	4604      	mov	r4, r0
   1ee82:	b9f0      	cbnz	r0, 1eec2 <att_mtu_req+0x54>
	mtu_client = sys_le16_to_cpu(req->mtu);
   1ee84:	689b      	ldr	r3, [r3, #8]
   1ee86:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   1ee88:	2e16      	cmp	r6, #22
   1ee8a:	d91c      	bls.n	1eec6 <att_mtu_req+0x58>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   1ee8c:	4638      	mov	r0, r7
   1ee8e:	2202      	movs	r2, #2
   1ee90:	f7f3 ff88 	bl	12da4 <bt_att_create_pdu>
	if (!pdu) {
   1ee94:	4607      	mov	r7, r0
   1ee96:	b1c0      	cbz	r0, 1eeca <att_mtu_req+0x5c>
	return net_buf_simple_add(&buf->b, len);
   1ee98:	2102      	movs	r1, #2
   1ee9a:	3008      	adds	r0, #8
   1ee9c:	f000 fff6 	bl	1fe8c <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   1eea0:	2341      	movs	r3, #65	; 0x41
	bt_att_chan_send_rsp(chan, pdu);
   1eea2:	4639      	mov	r1, r7
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   1eea4:	7003      	strb	r3, [r0, #0]
   1eea6:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   1eea8:	4628      	mov	r0, r5
   1eeaa:	f7ff fd63 	bl	1e974 <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   1eeae:	2e41      	cmp	r6, #65	; 0x41
   1eeb0:	bf28      	it	cs
   1eeb2:	2641      	movcs	r6, #65	; 0x41
	att_chan_mtu_updated(chan);
   1eeb4:	4628      	mov	r0, r5
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   1eeb6:	836e      	strh	r6, [r5, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   1eeb8:	856e      	strh	r6, [r5, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   1eeba:	f7ff fc92 	bl	1e7e2 <att_chan_mtu_updated>
	return 0;
   1eebe:	4620      	mov	r0, r4
}
   1eec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   1eec2:	2006      	movs	r0, #6
   1eec4:	e7fc      	b.n	1eec0 <att_mtu_req+0x52>
		return BT_ATT_ERR_INVALID_PDU;
   1eec6:	2004      	movs	r0, #4
   1eec8:	e7fa      	b.n	1eec0 <att_mtu_req+0x52>
		return BT_ATT_ERR_UNLIKELY;
   1eeca:	200e      	movs	r0, #14
   1eecc:	e7f8      	b.n	1eec0 <att_mtu_req+0x52>

0001eece <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   1eece:	898a      	ldrh	r2, [r1, #12]
   1eed0:	2300      	movs	r3, #0
   1eed2:	6889      	ldr	r1, [r1, #8]
   1eed4:	f7f4 ba78 	b.w	133c8 <att_handle_rsp>

0001eed8 <bt_att_encrypt_change>:
{
   1eed8:	b570      	push	{r4, r5, r6, lr}
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   1eeda:	4606      	mov	r6, r0
	if (!att_chan->att) {
   1eedc:	f850 3c04 	ldr.w	r3, [r0, #-4]
{
   1eee0:	4604      	mov	r4, r0
	struct bt_conn *conn = le_chan->chan.conn;
   1eee2:	f856 5904 	ldr.w	r5, [r6], #-4
	if (!att_chan->att) {
   1eee6:	2b00      	cmp	r3, #0
   1eee8:	d038      	beq.n	1ef5c <bt_att_encrypt_change+0x84>
	if (hci_status) {
   1eeea:	b141      	cbz	r1, 1eefe <bt_att_encrypt_change+0x26>
		if (att_chan->req && att_chan->req->retrying) {
   1eeec:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
   1eef0:	2b00      	cmp	r3, #0
   1eef2:	d033      	beq.n	1ef5c <bt_att_encrypt_change+0x84>
   1eef4:	7c1b      	ldrb	r3, [r3, #16]
   1eef6:	07da      	lsls	r2, r3, #31
   1eef8:	d530      	bpl.n	1ef5c <bt_att_encrypt_change+0x84>
		return BT_ATT_ERR_AUTHENTICATION;
   1eefa:	2305      	movs	r3, #5
   1eefc:	e021      	b.n	1ef42 <bt_att_encrypt_change+0x6a>
	bt_gatt_encrypt_change(conn);
   1eefe:	4628      	mov	r0, r5
   1ef00:	f7f5 fa9e 	bl	14440 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   1ef04:	7a6b      	ldrb	r3, [r5, #9]
   1ef06:	2b01      	cmp	r3, #1
   1ef08:	d028      	beq.n	1ef5c <bt_att_encrypt_change+0x84>
	if (!(att_chan->req && att_chan->req->retrying)) {
   1ef0a:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
   1ef0e:	b32d      	cbz	r5, 1ef5c <bt_att_encrypt_change+0x84>
   1ef10:	7c2b      	ldrb	r3, [r5, #16]
   1ef12:	07db      	lsls	r3, r3, #31
   1ef14:	d522      	bpl.n	1ef5c <bt_att_encrypt_change+0x84>
	if (!req->encode) {
   1ef16:	68eb      	ldr	r3, [r5, #12]
   1ef18:	2b00      	cmp	r3, #0
   1ef1a:	d0ee      	beq.n	1eefa <bt_att_encrypt_change+0x22>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   1ef1c:	4630      	mov	r0, r6
   1ef1e:	696a      	ldr	r2, [r5, #20]
   1ef20:	7c69      	ldrb	r1, [r5, #17]
   1ef22:	f7f3 fda7 	bl	12a74 <bt_att_chan_create_pdu>
	if (!buf) {
   1ef26:	4604      	mov	r4, r0
   1ef28:	b150      	cbz	r0, 1ef40 <bt_att_encrypt_change+0x68>
	if (req->encode(buf, req->len, req->user_data)) {
   1ef2a:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
   1ef2e:	68eb      	ldr	r3, [r5, #12]
   1ef30:	4798      	blx	r3
   1ef32:	b168      	cbz	r0, 1ef50 <bt_att_encrypt_change+0x78>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1ef34:	6960      	ldr	r0, [r4, #20]
   1ef36:	f7f3 fad5 	bl	124e4 <tx_meta_data_free>
		net_buf_unref(buf);
   1ef3a:	4620      	mov	r0, r4
   1ef3c:	f7f7 f9fe 	bl	1633c <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   1ef40:	230e      	movs	r3, #14
		att_handle_rsp(att_chan, NULL, 0, err);
   1ef42:	2200      	movs	r2, #0
   1ef44:	4630      	mov	r0, r6
}
   1ef46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   1ef4a:	4611      	mov	r1, r2
   1ef4c:	f7f4 ba3c 	b.w	133c8 <att_handle_rsp>
	if (chan_send(att_chan, buf)) {
   1ef50:	4621      	mov	r1, r4
   1ef52:	4630      	mov	r0, r6
   1ef54:	f7f3 fb9a 	bl	1268c <chan_send>
   1ef58:	2800      	cmp	r0, #0
   1ef5a:	d1eb      	bne.n	1ef34 <bt_att_encrypt_change+0x5c>
}
   1ef5c:	bd70      	pop	{r4, r5, r6, pc}

0001ef5e <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   1ef5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ef60:	460d      	mov	r5, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   1ef62:	f7f3 fbfb 	bl	1275c <att_get>
	if (!att) {
   1ef66:	4604      	mov	r4, r0
   1ef68:	b940      	cbnz	r0, 1ef7c <bt_att_send+0x1e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1ef6a:	6968      	ldr	r0, [r5, #20]
   1ef6c:	f7f3 faba 	bl	124e4 <tx_meta_data_free>
		net_buf_unref(buf);
   1ef70:	4628      	mov	r0, r5
   1ef72:	f7f7 f9e3 	bl	1633c <net_buf_unref>
		return -ENOTCONN;
   1ef76:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   1ef7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&att->tx_queue, buf);
   1ef7c:	f100 060c 	add.w	r6, r0, #12
   1ef80:	4629      	mov	r1, r5
   1ef82:	4630      	mov	r0, r6
   1ef84:	f000 ff4f 	bl	1fe26 <net_buf_put>
	return list->head;
   1ef88:	6a65      	ldr	r5, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ef8a:	b14d      	cbz	r5, 1efa0 <bt_att_send+0x42>
	return node->next;
   1ef8c:	f855 49e0 	ldr.w	r4, [r5], #-224
   1ef90:	b104      	cbz	r4, 1ef94 <bt_att_send+0x36>
   1ef92:	3ce0      	subs	r4, #224	; 0xe0
		err = process_queue(chan, &att->tx_queue);
   1ef94:	4631      	mov	r1, r6
   1ef96:	4628      	mov	r0, r5
   1ef98:	f7ff fcd3 	bl	1e942 <process_queue>
		if (!err) {
   1ef9c:	4603      	mov	r3, r0
   1ef9e:	b980      	cbnz	r0, 1efc2 <bt_att_send+0x64>
	return 0;
   1efa0:	2000      	movs	r0, #0
   1efa2:	e7ea      	b.n	1ef7a <bt_att_send+0x1c>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   1efa4:	2103      	movs	r1, #3
   1efa6:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1efaa:	f7ff fbd8 	bl	1e75e <atomic_test_bit>
   1efae:	4607      	mov	r7, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   1efb0:	f105 0090 	add.w	r0, r5, #144	; 0x90
   1efb4:	f7ff fbd3 	bl	1e75e <atomic_test_bit>
		if (err == -ENOENT && prev &&
   1efb8:	4287      	cmp	r7, r0
   1efba:	f06f 0301 	mvn.w	r3, #1
   1efbe:	d107      	bne.n	1efd0 <bt_att_send+0x72>
   1efc0:	4614      	mov	r4, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1efc2:	2c00      	cmp	r4, #0
   1efc4:	d0ec      	beq.n	1efa0 <bt_att_send+0x42>
   1efc6:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
   1efca:	b922      	cbnz	r2, 1efd6 <bt_att_send+0x78>
		if (err == -ENOENT && prev &&
   1efcc:	3302      	adds	r3, #2
   1efce:	d0e9      	beq.n	1efa4 <bt_att_send+0x46>
{
   1efd0:	4625      	mov	r5, r4
   1efd2:	4614      	mov	r4, r2
   1efd4:	e7de      	b.n	1ef94 <bt_att_send+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1efd6:	3ae0      	subs	r2, #224	; 0xe0
   1efd8:	e7f8      	b.n	1efcc <bt_att_send+0x6e>

0001efda <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   1efda:	b510      	push	{r4, lr}
   1efdc:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   1efde:	f7f3 fbbd 	bl	1275c <att_get>
	if (!att) {
   1efe2:	b160      	cbz	r0, 1effe <bt_att_req_send+0x24>
	parent->next = child;
   1efe4:	2300      	movs	r3, #0
   1efe6:	6023      	str	r3, [r4, #0]
	return list->tail;
   1efe8:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   1efea:	b92b      	cbnz	r3, 1eff8 <bt_att_req_send+0x1e>
	list->head = node;
   1efec:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   1eff0:	f7ff fe10 	bl	1ec14 <att_req_send_process>

	return 0;
   1eff4:	2000      	movs	r0, #0
}
   1eff6:	bd10      	pop	{r4, pc}
	parent->next = child;
   1eff8:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1effa:	6084      	str	r4, [r0, #8]
}
   1effc:	e7f8      	b.n	1eff0 <bt_att_req_send+0x16>
		return -ENOTCONN;
   1effe:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1f002:	e7f8      	b.n	1eff6 <bt_att_req_send+0x1c>

0001f004 <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   1f004:	2001      	movs	r0, #1
   1f006:	4770      	bx	lr

0001f008 <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   1f008:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
   1f00a:	f7f3 fba7 	bl	1275c <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   1f00e:	b178      	cbz	r0, 1f030 <bt_att_clear_out_of_sync_sent+0x28>
	return list->head;
   1f010:	6a43      	ldr	r3, [r0, #36]	; 0x24
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1f012:	b16b      	cbz	r3, 1f030 <bt_att_clear_out_of_sync_sent+0x28>
   1f014:	3be0      	subs	r3, #224	; 0xe0
   1f016:	f103 0290 	add.w	r2, r3, #144	; 0x90
   1f01a:	e8d2 0fef 	ldaex	r0, [r2]
   1f01e:	f020 0020 	bic.w	r0, r0, #32
   1f022:	e8c2 0fe1 	stlex	r1, r0, [r2]
   1f026:	2900      	cmp	r1, #0
   1f028:	d1f7      	bne.n	1f01a <bt_att_clear_out_of_sync_sent+0x12>
	return node->next;
   1f02a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   1f02e:	e7f0      	b.n	1f012 <bt_att_clear_out_of_sync_sent+0xa>
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
	}
}
   1f030:	bd08      	pop	{r3, pc}

0001f032 <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   1f032:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1f034:	2104      	movs	r1, #4
   1f036:	f7ff fb64 	bl	1e702 <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   1f03a:	b128      	cbz	r0, 1f048 <bt_att_out_of_sync_sent_on_fixed+0x16>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   1f03c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   1f040:	2105      	movs	r1, #5
   1f042:	308c      	adds	r0, #140	; 0x8c
   1f044:	f7ff bb8b 	b.w	1e75e <atomic_test_bit>
}
   1f048:	bd08      	pop	{r3, pc}

0001f04a <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   1f04a:	6940      	ldr	r0, [r0, #20]

	data->func = func;
	data->user_data = user_data;
   1f04c:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   1f050:	2201      	movs	r2, #1
	data->chan_opt = chan_opt;
   1f052:	7403      	strb	r3, [r0, #16]
	data->attr_count = 1;
   1f054:	8082      	strh	r2, [r0, #4]
}
   1f056:	4770      	bx	lr

0001f058 <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   1f058:	6010      	str	r0, [r2, #0]
}
   1f05a:	2000      	movs	r0, #0
   1f05c:	4770      	bx	lr

0001f05e <gatt_ccc_changed>:
{
   1f05e:	460b      	mov	r3, r1
   1f060:	8909      	ldrh	r1, [r1, #8]
   1f062:	8a5a      	ldrh	r2, [r3, #18]
   1f064:	4291      	cmp	r1, r2
   1f066:	bf38      	it	cc
   1f068:	4611      	movcc	r1, r2
	if (value != ccc->value) {
   1f06a:	8a9a      	ldrh	r2, [r3, #20]
   1f06c:	428a      	cmp	r2, r1
   1f06e:	d003      	beq.n	1f078 <gatt_ccc_changed+0x1a>
		ccc->value = value;
   1f070:	8299      	strh	r1, [r3, #20]
		if (ccc->cfg_changed) {
   1f072:	699b      	ldr	r3, [r3, #24]
   1f074:	b103      	cbz	r3, 1f078 <gatt_ccc_changed+0x1a>
			ccc->cfg_changed(attr, value);
   1f076:	4718      	bx	r3
}
   1f078:	4770      	bx	lr

0001f07a <gatt_indicate_rsp>:
{
   1f07a:	b510      	push	{r4, lr}
   1f07c:	9c02      	ldr	r4, [sp, #8]
   1f07e:	460a      	mov	r2, r1
	if (params->func) {
   1f080:	68a3      	ldr	r3, [r4, #8]
   1f082:	b10b      	cbz	r3, 1f088 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   1f084:	4621      	mov	r1, r4
   1f086:	4798      	blx	r3
	params->_ref--;
   1f088:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   1f08a:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   1f08c:	3b01      	subs	r3, #1
   1f08e:	b2db      	uxtb	r3, r3
   1f090:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   1f092:	b122      	cbz	r2, 1f09e <gatt_indicate_rsp+0x24>
   1f094:	b91b      	cbnz	r3, 1f09e <gatt_indicate_rsp+0x24>
		params->destroy(params);
   1f096:	4620      	mov	r0, r4
}
   1f098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   1f09c:	4710      	bx	r2
}
   1f09e:	bd10      	pop	{r4, pc}

0001f0a0 <match_uuid>:
	data->attr = attr;
   1f0a0:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   1f0a2:	8091      	strh	r1, [r2, #4]
}
   1f0a4:	2000      	movs	r0, #0
   1f0a6:	4770      	bx	lr

0001f0a8 <gen_hash_m>:
{
   1f0a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1f0aa:	6807      	ldr	r7, [r0, #0]
{
   1f0ac:	4606      	mov	r6, r0
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1f0ae:	783d      	ldrb	r5, [r7, #0]
{
   1f0b0:	4614      	mov	r4, r2
   1f0b2:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1f0b4:	b9dd      	cbnz	r5, 1f0ee <gen_hash_m+0x46>
	switch (u16->val) {
   1f0b6:	887b      	ldrh	r3, [r7, #2]
   1f0b8:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   1f0bc:	d004      	beq.n	1f0c8 <gen_hash_m+0x20>
   1f0be:	d810      	bhi.n	1f0e2 <gen_hash_m+0x3a>
   1f0c0:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   1f0c4:	2b03      	cmp	r3, #3
   1f0c6:	d812      	bhi.n	1f0ee <gen_hash_m+0x46>
		value = sys_cpu_to_le16(handle);
   1f0c8:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1f0cc:	2202      	movs	r2, #2
   1f0ce:	4620      	mov	r0, r4
   1f0d0:	f10d 010a 	add.w	r1, sp, #10
   1f0d4:	f7fe fa6a 	bl	1d5ac <tc_cmac_update>
   1f0d8:	b968      	cbnz	r0, 1f0f6 <gen_hash_m+0x4e>
			return BT_GATT_ITER_STOP;
   1f0da:	f06f 0215 	mvn.w	r2, #21
			state->err = -EINVAL;
   1f0de:	65a2      	str	r2, [r4, #88]	; 0x58
   1f0e0:	e006      	b.n	1f0f0 <gen_hash_m+0x48>
	switch (u16->val) {
   1f0e2:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   1f0e6:	33ff      	adds	r3, #255	; 0xff
   1f0e8:	b29b      	uxth	r3, r3
   1f0ea:	2b04      	cmp	r3, #4
   1f0ec:	d91e      	bls.n	1f12c <gen_hash_m+0x84>
			return BT_GATT_ITER_STOP;
   1f0ee:	2501      	movs	r5, #1
}
   1f0f0:	4628      	mov	r0, r5
   1f0f2:	b009      	add	sp, #36	; 0x24
   1f0f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = sys_cpu_to_le16(u16->val);
   1f0f6:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1f0f8:	2202      	movs	r2, #2
   1f0fa:	4620      	mov	r0, r4
   1f0fc:	f10d 010a 	add.w	r1, sp, #10
		value = sys_cpu_to_le16(u16->val);
   1f100:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1f104:	f7fe fa52 	bl	1d5ac <tc_cmac_update>
   1f108:	2800      	cmp	r0, #0
   1f10a:	d0e6      	beq.n	1f0da <gen_hash_m+0x32>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   1f10c:	2000      	movs	r0, #0
   1f10e:	9000      	str	r0, [sp, #0]
   1f110:	aa03      	add	r2, sp, #12
   1f112:	2313      	movs	r3, #19
   1f114:	4631      	mov	r1, r6
   1f116:	6877      	ldr	r7, [r6, #4]
   1f118:	47b8      	blx	r7
		if (len < 0) {
   1f11a:	1e02      	subs	r2, r0, #0
   1f11c:	dbdf      	blt.n	1f0de <gen_hash_m+0x36>
		if (tc_cmac_update(&state->state, data, len) ==
   1f11e:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1f120:	4620      	mov	r0, r4
   1f122:	f7fe fa43 	bl	1d5ac <tc_cmac_update>
   1f126:	2800      	cmp	r0, #0
   1f128:	d1e1      	bne.n	1f0ee <gen_hash_m+0x46>
   1f12a:	e7d6      	b.n	1f0da <gen_hash_m+0x32>
		value = sys_cpu_to_le16(handle);
   1f12c:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1f130:	2202      	movs	r2, #2
   1f132:	4620      	mov	r0, r4
   1f134:	f10d 010a 	add.w	r1, sp, #10
   1f138:	f7fe fa38 	bl	1d5ac <tc_cmac_update>
   1f13c:	2800      	cmp	r0, #0
   1f13e:	d0cc      	beq.n	1f0da <gen_hash_m+0x32>
		value = sys_cpu_to_le16(u16->val);
   1f140:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1f142:	2202      	movs	r2, #2
		value = sys_cpu_to_le16(u16->val);
   1f144:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1f148:	f10d 010a 	add.w	r1, sp, #10
   1f14c:	e7e8      	b.n	1f120 <gen_hash_m+0x78>

0001f14e <bt_addr_le_eq>:
   1f14e:	2207      	movs	r2, #7
{
   1f150:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   1f152:	f002 fc8c 	bl	21a6e <memcmp>
}
   1f156:	fab0 f080 	clz	r0, r0
   1f15a:	0940      	lsrs	r0, r0, #5
   1f15c:	bd08      	pop	{r3, pc}

0001f15e <bt_addr_le_copy>:
   1f15e:	680b      	ldr	r3, [r1, #0]
   1f160:	6003      	str	r3, [r0, #0]
   1f162:	888b      	ldrh	r3, [r1, #4]
   1f164:	8083      	strh	r3, [r0, #4]
   1f166:	798b      	ldrb	r3, [r1, #6]
   1f168:	7183      	strb	r3, [r0, #6]
}
   1f16a:	4770      	bx	lr

0001f16c <clear_sc_cfg>:
__ssp_bos_icheck3(memset, void *, int)
   1f16c:	2300      	movs	r3, #0
   1f16e:	6003      	str	r3, [r0, #0]
   1f170:	6043      	str	r3, [r0, #4]
   1f172:	6083      	str	r3, [r0, #8]
}
   1f174:	4770      	bx	lr

0001f176 <bt_gatt_attr_read.constprop.0>:
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   1f176:	b538      	push	{r3, r4, r5, lr}
   1f178:	f8bd 4010 	ldrh.w	r4, [sp, #16]
   1f17c:	4615      	mov	r5, r2
	if (offset > value_len) {
   1f17e:	4294      	cmp	r4, r2
   1f180:	d30a      	bcc.n	1f198 <bt_gatt_attr_read.constprop.0+0x22>
	len = MIN(buf_len, value_len - offset);
   1f182:	1aa4      	subs	r4, r4, r2
   1f184:	428c      	cmp	r4, r1
   1f186:	bfa8      	it	ge
   1f188:	460c      	movge	r4, r1
   1f18a:	b2a4      	uxth	r4, r4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1f18c:	4622      	mov	r2, r4
   1f18e:	1959      	adds	r1, r3, r5
   1f190:	f002 fc7d 	bl	21a8e <memcpy>
}
   1f194:	4620      	mov	r0, r4
   1f196:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f198:	f06f 0406 	mvn.w	r4, #6
   1f19c:	e7fa      	b.n	1f194 <bt_gatt_attr_read.constprop.0+0x1e>

0001f19e <bt_gatt_attr_read_ccc>:
{
   1f19e:	b530      	push	{r4, r5, lr}
   1f1a0:	b085      	sub	sp, #20
	cfg = find_ccc_cfg(conn, ccc);
   1f1a2:	68c9      	ldr	r1, [r1, #12]
{
   1f1a4:	4614      	mov	r4, r2
   1f1a6:	461d      	mov	r5, r3
	cfg = find_ccc_cfg(conn, ccc);
   1f1a8:	f7f4 fa34 	bl	13614 <find_ccc_cfg>
	if (cfg) {
   1f1ac:	b100      	cbz	r0, 1f1b0 <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(cfg->value);
   1f1ae:	8900      	ldrh	r0, [r0, #8]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   1f1b0:	2302      	movs	r3, #2
   1f1b2:	f8ad 000e 	strh.w	r0, [sp, #14]
   1f1b6:	9300      	str	r3, [sp, #0]
   1f1b8:	4629      	mov	r1, r5
   1f1ba:	4620      	mov	r0, r4
   1f1bc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   1f1c0:	f10d 030e 	add.w	r3, sp, #14
   1f1c4:	f7ff ffd7 	bl	1f176 <bt_gatt_attr_read.constprop.0>
}
   1f1c8:	b005      	add	sp, #20
   1f1ca:	bd30      	pop	{r4, r5, pc}

0001f1cc <bt_gatt_attr_read_service>:
{
   1f1cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1f1ce:	460c      	mov	r4, r1
   1f1d0:	4619      	mov	r1, r3
	struct bt_uuid *uuid = attr->user_data;
   1f1d2:	68e3      	ldr	r3, [r4, #12]
{
   1f1d4:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   1f1d6:	781c      	ldrb	r4, [r3, #0]
{
   1f1d8:	f8bd 2018 	ldrh.w	r2, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   1f1dc:	b13c      	cbz	r4, 1f1ee <bt_gatt_attr_read_service+0x22>
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   1f1de:	2410      	movs	r4, #16
   1f1e0:	3301      	adds	r3, #1
   1f1e2:	9406      	str	r4, [sp, #24]
}
   1f1e4:	b004      	add	sp, #16
   1f1e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   1f1ea:	f7ff bfc4 	b.w	1f176 <bt_gatt_attr_read.constprop.0>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1f1ee:	885b      	ldrh	r3, [r3, #2]
   1f1f0:	f8ad 300e 	strh.w	r3, [sp, #14]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   1f1f4:	2302      	movs	r3, #2
   1f1f6:	9300      	str	r3, [sp, #0]
   1f1f8:	f10d 030e 	add.w	r3, sp, #14
   1f1fc:	f7ff ffbb 	bl	1f176 <bt_gatt_attr_read.constprop.0>
}
   1f200:	b004      	add	sp, #16
   1f202:	bd10      	pop	{r4, pc}

0001f204 <cf_read>:
{
   1f204:	b530      	push	{r4, r5, lr}
   1f206:	461d      	mov	r5, r3
	uint8_t data[1] = {};
   1f208:	2300      	movs	r3, #0
{
   1f20a:	b085      	sub	sp, #20
   1f20c:	4614      	mov	r4, r2
	uint8_t data[1] = {};
   1f20e:	f88d 300c 	strb.w	r3, [sp, #12]
	cfg = find_cf_cfg(conn);
   1f212:	f7f4 f9af 	bl	13574 <find_cf_cfg>
	if (cfg) {
   1f216:	b110      	cbz	r0, 1f21e <cf_read+0x1a>
		memcpy(data, cfg->data, sizeof(data));
   1f218:	7a03      	ldrb	r3, [r0, #8]
   1f21a:	f88d 300c 	strb.w	r3, [sp, #12]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   1f21e:	2301      	movs	r3, #1
   1f220:	4629      	mov	r1, r5
   1f222:	9300      	str	r3, [sp, #0]
   1f224:	4620      	mov	r0, r4
   1f226:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   1f22a:	ab03      	add	r3, sp, #12
   1f22c:	f7ff ffa3 	bl	1f176 <bt_gatt_attr_read.constprop.0>
}
   1f230:	b005      	add	sp, #20
   1f232:	bd30      	pop	{r4, r5, pc}

0001f234 <read_name>:
{
   1f234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f238:	4614      	mov	r4, r2
   1f23a:	461d      	mov	r5, r3
   1f23c:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	const char *name = bt_get_name();
   1f240:	f7f0 ffb2 	bl	101a8 <bt_get_name>
   1f244:	4606      	mov	r6, r0
				 strlen(name));
   1f246:	f7ea f881 	bl	934c <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   1f24a:	b280      	uxth	r0, r0
   1f24c:	9006      	str	r0, [sp, #24]
   1f24e:	4633      	mov	r3, r6
   1f250:	463a      	mov	r2, r7
   1f252:	4629      	mov	r1, r5
   1f254:	4620      	mov	r0, r4
}
   1f256:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   1f25a:	f7ff bf8c 	b.w	1f176 <bt_gatt_attr_read.constprop.0>

0001f25e <read_appearance>:
{
   1f25e:	b530      	push	{r4, r5, lr}
   1f260:	b085      	sub	sp, #20
   1f262:	4614      	mov	r4, r2
   1f264:	461d      	mov	r5, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   1f266:	f7fe fe58 	bl	1df1a <bt_get_appearance>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   1f26a:	2302      	movs	r3, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   1f26c:	f8ad 000e 	strh.w	r0, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   1f270:	9300      	str	r3, [sp, #0]
   1f272:	4629      	mov	r1, r5
   1f274:	4620      	mov	r0, r4
   1f276:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   1f27a:	f10d 030e 	add.w	r3, sp, #14
   1f27e:	f7ff ff7a 	bl	1f176 <bt_gatt_attr_read.constprop.0>
}
   1f282:	b005      	add	sp, #20
   1f284:	bd30      	pop	{r4, r5, pc}

0001f286 <z_log_msg_static_create.constprop.0>:
   1f286:	2300      	movs	r3, #0
   1f288:	f7ed b814 	b.w	c2b4 <z_impl_z_log_msg_static_create>

0001f28c <sc_clear>:
{
   1f28c:	b538      	push	{r3, r4, r5, lr}
   1f28e:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1f290:	f100 0588 	add.w	r5, r0, #136	; 0x88
   1f294:	4629      	mov	r1, r5
   1f296:	7a00      	ldrb	r0, [r0, #8]
   1f298:	f7fe fe42 	bl	1df20 <bt_addr_le_is_bonded>
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   1f29c:	4629      	mov	r1, r5
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1f29e:	7a20      	ldrb	r0, [r4, #8]
   1f2a0:	f7f4 f996 	bl	135d0 <find_sc_cfg>
		if (cfg) {
   1f2a4:	b118      	cbz	r0, 1f2ae <sc_clear+0x22>
}
   1f2a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			clear_sc_cfg(cfg);
   1f2aa:	f7ff bf5f 	b.w	1f16c <clear_sc_cfg>
}
   1f2ae:	bd38      	pop	{r3, r4, r5, pc}

0001f2b0 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   1f2b0:	2a02      	cmp	r2, #2
{
   1f2b2:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   1f2b4:	d108      	bne.n	1f2c8 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   1f2b6:	2300      	movs	r3, #0
   1f2b8:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1f2bc:	461a      	mov	r2, r3
   1f2be:	7a00      	ldrb	r0, [r0, #8]
   1f2c0:	f7f4 fa60 	bl	13784 <sc_save>
}
   1f2c4:	2002      	movs	r0, #2
   1f2c6:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   1f2c8:	f7ff ffe0 	bl	1f28c <sc_clear>
   1f2cc:	e7fa      	b.n	1f2c4 <sc_ccc_cfg_write+0x14>

0001f2ce <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1f2ce:	2301      	movs	r3, #1
   1f2d0:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1f2d2:	e8d0 2fef 	ldaex	r2, [r0]
   1f2d6:	431a      	orrs	r2, r3
   1f2d8:	e8c0 2fe1 	stlex	r1, r2, [r0]
   1f2dc:	2900      	cmp	r1, #0
   1f2de:	d1f8      	bne.n	1f2d2 <atomic_set_bit+0x4>
}
   1f2e0:	4770      	bx	lr

0001f2e2 <sc_restore_rsp>:
{
   1f2e2:	b538      	push	{r3, r4, r5, lr}
   1f2e4:	4604      	mov	r4, r0
   1f2e6:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   1f2e8:	f7ff fe8c 	bl	1f004 <bt_att_fixed_chan_only>
   1f2ec:	b150      	cbz	r0, 1f304 <sc_restore_rsp+0x22>
		cfg = find_cf_cfg(conn);
   1f2ee:	4620      	mov	r0, r4
   1f2f0:	f7f4 f940 	bl	13574 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   1f2f4:	b130      	cbz	r0, 1f304 <sc_restore_rsp+0x22>
   1f2f6:	7a03      	ldrb	r3, [r0, #8]
   1f2f8:	07db      	lsls	r3, r3, #31
   1f2fa:	d503      	bpl.n	1f304 <sc_restore_rsp+0x22>
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1f2fc:	2100      	movs	r1, #0
   1f2fe:	300c      	adds	r0, #12
   1f300:	f7ff ffe5 	bl	1f2ce <atomic_set_bit>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   1f304:	b935      	cbnz	r5, 1f314 <sc_restore_rsp+0x32>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1f306:	7a20      	ldrb	r0, [r4, #8]
   1f308:	f104 0188 	add.w	r1, r4, #136	; 0x88
   1f30c:	f7f4 f960 	bl	135d0 <find_sc_cfg>
		if (sc_cfg) {
   1f310:	b100      	cbz	r0, 1f314 <sc_restore_rsp+0x32>
__ssp_bos_icheck3(memset, void *, int)
   1f312:	6085      	str	r5, [r0, #8]
}
   1f314:	bd38      	pop	{r3, r4, r5, pc}

0001f316 <bt_gatt_attr_read>:
{
   1f316:	b510      	push	{r4, lr}
   1f318:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   1f31c:	f8bd 4010 	ldrh.w	r4, [sp, #16]
   1f320:	4610      	mov	r0, r2
	if (offset > value_len) {
   1f322:	428c      	cmp	r4, r1
   1f324:	d30b      	bcc.n	1f33e <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   1f326:	1a64      	subs	r4, r4, r1
   1f328:	429c      	cmp	r4, r3
   1f32a:	bfa8      	it	ge
   1f32c:	461c      	movge	r4, r3
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1f32e:	9b03      	ldr	r3, [sp, #12]
   1f330:	b2a4      	uxth	r4, r4
   1f332:	4622      	mov	r2, r4
   1f334:	4419      	add	r1, r3
   1f336:	f002 fbaa 	bl	21a8e <memcpy>
}
   1f33a:	4620      	mov	r0, r4
   1f33c:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f33e:	f06f 0406 	mvn.w	r4, #6
   1f342:	e7fa      	b.n	1f33a <bt_gatt_attr_read+0x24>

0001f344 <bt_gatt_attr_value_handle>:
{
   1f344:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1f346:	4604      	mov	r4, r0
   1f348:	b910      	cbnz	r0, 1f350 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   1f34a:	2000      	movs	r0, #0
}
   1f34c:	b002      	add	sp, #8
   1f34e:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1f350:	2300      	movs	r3, #0
   1f352:	f88d 3004 	strb.w	r3, [sp, #4]
   1f356:	f642 0303 	movw	r3, #10243	; 0x2803
   1f35a:	6800      	ldr	r0, [r0, #0]
   1f35c:	a901      	add	r1, sp, #4
   1f35e:	f8ad 3006 	strh.w	r3, [sp, #6]
   1f362:	f7fe fc81 	bl	1dc68 <bt_uuid_cmp>
   1f366:	2800      	cmp	r0, #0
   1f368:	d1ef      	bne.n	1f34a <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   1f36a:	68e3      	ldr	r3, [r4, #12]
   1f36c:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   1f36e:	2800      	cmp	r0, #0
   1f370:	d1ec      	bne.n	1f34c <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   1f372:	4620      	mov	r0, r4
   1f374:	f7f4 fb72 	bl	13a5c <bt_gatt_attr_get_handle>
   1f378:	3001      	adds	r0, #1
   1f37a:	b280      	uxth	r0, r0
	return handle;
   1f37c:	e7e6      	b.n	1f34c <bt_gatt_attr_value_handle+0x8>

0001f37e <bt_gatt_attr_read_chrc>:
{
   1f37e:	b570      	push	{r4, r5, r6, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   1f380:	68cc      	ldr	r4, [r1, #12]
{
   1f382:	461e      	mov	r6, r3
	pdu.properties = chrc->properties;
   1f384:	79a3      	ldrb	r3, [r4, #6]
{
   1f386:	b088      	sub	sp, #32
   1f388:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
   1f38a:	f88d 300c 	strb.w	r3, [sp, #12]
{
   1f38e:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1f390:	f7ff ffd8 	bl	1f344 <bt_gatt_attr_value_handle>
   1f394:	f8ad 000d 	strh.w	r0, [sp, #13]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1f398:	6824      	ldr	r4, [r4, #0]
   1f39a:	7823      	ldrb	r3, [r4, #0]
   1f39c:	b96b      	cbnz	r3, 1f3ba <bt_gatt_attr_read_chrc+0x3c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1f39e:	8863      	ldrh	r3, [r4, #2]
   1f3a0:	f8ad 300f 	strh.w	r3, [sp, #15]
		value_len += 2U;
   1f3a4:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   1f3a6:	9300      	str	r3, [sp, #0]
   1f3a8:	4631      	mov	r1, r6
   1f3aa:	4628      	mov	r0, r5
   1f3ac:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   1f3b0:	ab03      	add	r3, sp, #12
   1f3b2:	f7ff fee0 	bl	1f176 <bt_gatt_attr_read.constprop.0>
}
   1f3b6:	b008      	add	sp, #32
   1f3b8:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   1f3ba:	1c63      	adds	r3, r4, #1
   1f3bc:	f10d 020f 	add.w	r2, sp, #15
   1f3c0:	3411      	adds	r4, #17
   1f3c2:	f853 1b04 	ldr.w	r1, [r3], #4
   1f3c6:	42a3      	cmp	r3, r4
   1f3c8:	f842 1b04 	str.w	r1, [r2], #4
   1f3cc:	d1f9      	bne.n	1f3c2 <bt_gatt_attr_read_chrc+0x44>
		value_len += 16U;
   1f3ce:	2313      	movs	r3, #19
   1f3d0:	e7e9      	b.n	1f3a6 <bt_gatt_attr_read_chrc+0x28>

0001f3d2 <bt_gatt_foreach_attr>:
{
   1f3d2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1f3d4:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1f3d8:	2300      	movs	r3, #0
   1f3da:	461a      	mov	r2, r3
   1f3dc:	9300      	str	r3, [sp, #0]
   1f3de:	f7f4 fb6d 	bl	13abc <bt_gatt_foreach_attr_type>
}
   1f3e2:	b005      	add	sp, #20
   1f3e4:	f85d fb04 	ldr.w	pc, [sp], #4

0001f3e8 <db_hash_process>:
	db_hash_gen(true);
   1f3e8:	f7f4 bbc2 	b.w	13b70 <db_hash_gen.constprop.0>

0001f3ec <bt_gatt_check_perm>:
{
   1f3ec:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   1f3ee:	07d4      	lsls	r4, r2, #31
{
   1f3f0:	4605      	mov	r5, r0
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1f3f2:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   1f3f4:	d504      	bpl.n	1f400 <bt_gatt_check_perm+0x14>
   1f3f6:	f013 0f95 	tst.w	r3, #149	; 0x95
   1f3fa:	d027      	beq.n	1f44c <bt_gatt_check_perm+0x60>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1f3fc:	6848      	ldr	r0, [r1, #4]
   1f3fe:	b328      	cbz	r0, 1f44c <bt_gatt_check_perm+0x60>
	if ((mask & BT_GATT_PERM_WRITE) &&
   1f400:	0790      	lsls	r0, r2, #30
   1f402:	d504      	bpl.n	1f40e <bt_gatt_check_perm+0x22>
   1f404:	f413 7f95 	tst.w	r3, #298	; 0x12a
   1f408:	d022      	beq.n	1f450 <bt_gatt_check_perm+0x64>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   1f40a:	6889      	ldr	r1, [r1, #8]
   1f40c:	b301      	cbz	r1, 1f450 <bt_gatt_check_perm+0x64>
	mask &= attr->perm;
   1f40e:	ea02 0403 	and.w	r4, r2, r3
	if (mask & BT_GATT_PERM_LESC_MASK) {
   1f412:	f414 7fc0 	tst.w	r4, #384	; 0x180
   1f416:	d007      	beq.n	1f428 <bt_gatt_check_perm+0x3c>
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   1f418:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   1f41c:	b90b      	cbnz	r3, 1f422 <bt_gatt_check_perm+0x36>
			return BT_ATT_ERR_AUTHENTICATION;
   1f41e:	2005      	movs	r0, #5
}
   1f420:	bd38      	pop	{r3, r4, r5, pc}
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   1f422:	7b5b      	ldrb	r3, [r3, #13]
   1f424:	06db      	lsls	r3, r3, #27
   1f426:	d5fa      	bpl.n	1f41e <bt_gatt_check_perm+0x32>
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   1f428:	f014 0f30 	tst.w	r4, #48	; 0x30
   1f42c:	d108      	bne.n	1f440 <bt_gatt_check_perm+0x54>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   1f42e:	f014 000c 	ands.w	r0, r4, #12
   1f432:	d0f5      	beq.n	1f420 <bt_gatt_check_perm+0x34>
		if (!conn->encrypt) {
   1f434:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   1f436:	2b00      	cmp	r3, #0
   1f438:	bf14      	ite	ne
   1f43a:	2000      	movne	r0, #0
   1f43c:	200f      	moveq	r0, #15
   1f43e:	e7ef      	b.n	1f420 <bt_gatt_check_perm+0x34>
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   1f440:	4628      	mov	r0, r5
   1f442:	f7ff f883 	bl	1e54c <bt_conn_get_security>
   1f446:	2802      	cmp	r0, #2
   1f448:	d8f1      	bhi.n	1f42e <bt_gatt_check_perm+0x42>
   1f44a:	e7e8      	b.n	1f41e <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   1f44c:	2002      	movs	r0, #2
   1f44e:	e7e7      	b.n	1f420 <bt_gatt_check_perm+0x34>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   1f450:	2003      	movs	r0, #3
   1f452:	e7e5      	b.n	1f420 <bt_gatt_check_perm+0x34>

0001f454 <bt_gatt_is_subscribed>:
{
   1f454:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1f458:	7b43      	ldrb	r3, [r0, #13]
{
   1f45a:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   1f45c:	2b07      	cmp	r3, #7
{
   1f45e:	460c      	mov	r4, r1
   1f460:	4616      	mov	r6, r2
	if (conn->state != BT_CONN_CONNECTED) {
   1f462:	d110      	bne.n	1f486 <bt_gatt_is_subscribed+0x32>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   1f464:	2300      	movs	r3, #0
   1f466:	f88d 300c 	strb.w	r3, [sp, #12]
   1f46a:	f642 0303 	movw	r3, #10243	; 0x2803
   1f46e:	6820      	ldr	r0, [r4, #0]
   1f470:	a903      	add	r1, sp, #12
   1f472:	f8ad 300e 	strh.w	r3, [sp, #14]
   1f476:	f7fe fbf7 	bl	1dc68 <bt_uuid_cmp>
   1f47a:	b960      	cbnz	r0, 1f496 <bt_gatt_is_subscribed+0x42>
		if (!(chrc->properties &
   1f47c:	68e3      	ldr	r3, [r4, #12]
   1f47e:	799b      	ldrb	r3, [r3, #6]
   1f480:	f013 0f30 	tst.w	r3, #48	; 0x30
   1f484:	d103      	bne.n	1f48e <bt_gatt_is_subscribed+0x3a>
		return false;
   1f486:	2000      	movs	r0, #0
}
   1f488:	b004      	add	sp, #16
   1f48a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		attr = bt_gatt_attr_next(attr);
   1f48e:	4620      	mov	r0, r4
   1f490:	f7f4 fbfc 	bl	13c8c <bt_gatt_attr_next>
   1f494:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   1f496:	2300      	movs	r3, #0
   1f498:	6820      	ldr	r0, [r4, #0]
   1f49a:	f88d 300c 	strb.w	r3, [sp, #12]
   1f49e:	f642 1302 	movw	r3, #10498	; 0x2902
   1f4a2:	a903      	add	r1, sp, #12
   1f4a4:	f8ad 300e 	strh.w	r3, [sp, #14]
   1f4a8:	f7fe fbde 	bl	1dc68 <bt_uuid_cmp>
   1f4ac:	b118      	cbz	r0, 1f4b6 <bt_gatt_is_subscribed+0x62>
		attr = bt_gatt_attr_next(attr);
   1f4ae:	4620      	mov	r0, r4
   1f4b0:	f7f4 fbec 	bl	13c8c <bt_gatt_attr_next>
   1f4b4:	4604      	mov	r4, r0
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   1f4b6:	2700      	movs	r7, #0
   1f4b8:	f642 1802 	movw	r8, #10498	; 0x2902
   1f4bc:	6820      	ldr	r0, [r4, #0]
   1f4be:	4669      	mov	r1, sp
   1f4c0:	f88d 7000 	strb.w	r7, [sp]
   1f4c4:	f8ad 8002 	strh.w	r8, [sp, #2]
   1f4c8:	f7fe fbce 	bl	1dc68 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1f4cc:	bb20      	cbnz	r0, 1f518 <bt_gatt_is_subscribed+0xc4>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   1f4ce:	2300      	movs	r3, #0
   1f4d0:	6820      	ldr	r0, [r4, #0]
   1f4d2:	f88d 300c 	strb.w	r3, [sp, #12]
   1f4d6:	f642 1302 	movw	r3, #10498	; 0x2902
   1f4da:	a903      	add	r1, sp, #12
   1f4dc:	f8ad 300e 	strh.w	r3, [sp, #14]
   1f4e0:	f7fe fbc2 	bl	1dc68 <bt_uuid_cmp>
   1f4e4:	2800      	cmp	r0, #0
   1f4e6:	d1ce      	bne.n	1f486 <bt_gatt_is_subscribed+0x32>
	ccc = attr->user_data;
   1f4e8:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   1f4ea:	4628      	mov	r0, r5
   1f4ec:	4622      	mov	r2, r4
   1f4ee:	f812 1b01 	ldrb.w	r1, [r2], #1
   1f4f2:	f7ff f82d 	bl	1e550 <bt_conn_is_peer_addr_le>
   1f4f6:	b110      	cbz	r0, 1f4fe <bt_gatt_is_subscribed+0xaa>
   1f4f8:	8923      	ldrh	r3, [r4, #8]
   1f4fa:	421e      	tst	r6, r3
   1f4fc:	d10a      	bne.n	1f514 <bt_gatt_is_subscribed+0xc0>
   1f4fe:	4628      	mov	r0, r5
   1f500:	7aa1      	ldrb	r1, [r4, #10]
   1f502:	f104 020b 	add.w	r2, r4, #11
   1f506:	f7ff f823 	bl	1e550 <bt_conn_is_peer_addr_le>
   1f50a:	2800      	cmp	r0, #0
   1f50c:	d0bb      	beq.n	1f486 <bt_gatt_is_subscribed+0x32>
   1f50e:	8a63      	ldrh	r3, [r4, #18]
   1f510:	421e      	tst	r6, r3
   1f512:	d0b8      	beq.n	1f486 <bt_gatt_is_subscribed+0x32>
			return true;
   1f514:	2001      	movs	r0, #1
   1f516:	e7b7      	b.n	1f488 <bt_gatt_is_subscribed+0x34>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   1f518:	f642 0303 	movw	r3, #10243	; 0x2803
   1f51c:	6820      	ldr	r0, [r4, #0]
   1f51e:	a901      	add	r1, sp, #4
   1f520:	f88d 7004 	strb.w	r7, [sp, #4]
   1f524:	f8ad 3006 	strh.w	r3, [sp, #6]
   1f528:	f7fe fb9e 	bl	1dc68 <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   1f52c:	2800      	cmp	r0, #0
   1f52e:	d0ce      	beq.n	1f4ce <bt_gatt_is_subscribed+0x7a>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1f530:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1f534:	6820      	ldr	r0, [r4, #0]
   1f536:	a902      	add	r1, sp, #8
   1f538:	f88d 7008 	strb.w	r7, [sp, #8]
   1f53c:	f8ad 300a 	strh.w	r3, [sp, #10]
   1f540:	f7fe fb92 	bl	1dc68 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   1f544:	2800      	cmp	r0, #0
   1f546:	d0c2      	beq.n	1f4ce <bt_gatt_is_subscribed+0x7a>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1f548:	f642 0301 	movw	r3, #10241	; 0x2801
   1f54c:	6820      	ldr	r0, [r4, #0]
   1f54e:	a903      	add	r1, sp, #12
   1f550:	f88d 700c 	strb.w	r7, [sp, #12]
   1f554:	f8ad 300e 	strh.w	r3, [sp, #14]
   1f558:	f7fe fb86 	bl	1dc68 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1f55c:	2800      	cmp	r0, #0
   1f55e:	d0b6      	beq.n	1f4ce <bt_gatt_is_subscribed+0x7a>
		attr = bt_gatt_attr_next(attr);
   1f560:	4620      	mov	r0, r4
   1f562:	f7f4 fb93 	bl	13c8c <bt_gatt_attr_next>
		if (!attr) {
   1f566:	4604      	mov	r4, r0
   1f568:	2800      	cmp	r0, #0
   1f56a:	d1a7      	bne.n	1f4bc <bt_gatt_is_subscribed+0x68>
   1f56c:	e78b      	b.n	1f486 <bt_gatt_is_subscribed+0x32>

0001f56e <bt_gatt_change_aware>:
{
   1f56e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f570:	4606      	mov	r6, r0
   1f572:	460f      	mov	r7, r1
	cfg = find_cf_cfg(conn);
   1f574:	f7f3 fffe 	bl	13574 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1f578:	b1e0      	cbz	r0, 1f5b4 <bt_gatt_change_aware+0x46>
   1f57a:	7a03      	ldrb	r3, [r0, #8]
   1f57c:	07db      	lsls	r3, r3, #31
   1f57e:	d519      	bpl.n	1f5b4 <bt_gatt_change_aware+0x46>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1f580:	f100 040c 	add.w	r4, r0, #12
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f584:	e8d4 5faf 	lda	r5, [r4]
   1f588:	f015 0501 	ands.w	r5, r5, #1
   1f58c:	d112      	bne.n	1f5b4 <bt_gatt_change_aware+0x46>
	if (!req) {
   1f58e:	b197      	cbz	r7, 1f5b6 <bt_gatt_change_aware+0x48>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1f590:	e8d4 1fef 	ldaex	r1, [r4]
   1f594:	f021 0302 	bic.w	r3, r1, #2
   1f598:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1f59c:	2a00      	cmp	r2, #0
   1f59e:	d1f7      	bne.n	1f590 <bt_gatt_change_aware+0x22>
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   1f5a0:	f011 0702 	ands.w	r7, r1, #2
		bt_att_clear_out_of_sync_sent(conn);
   1f5a4:	4630      	mov	r0, r6
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   1f5a6:	d008      	beq.n	1f5ba <bt_gatt_change_aware+0x4c>
		bt_att_clear_out_of_sync_sent(conn);
   1f5a8:	f7ff fd2e 	bl	1f008 <bt_att_clear_out_of_sync_sent>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1f5ac:	4629      	mov	r1, r5
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1f5ae:	4620      	mov	r0, r4
   1f5b0:	f7ff fe8d 	bl	1f2ce <atomic_set_bit>
		return true;
   1f5b4:	2501      	movs	r5, #1
}
   1f5b6:	4628      	mov	r0, r5
   1f5b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   1f5ba:	f7ff fd23 	bl	1f004 <bt_att_fixed_chan_only>
   1f5be:	2800      	cmp	r0, #0
   1f5c0:	d0f9      	beq.n	1f5b6 <bt_gatt_change_aware+0x48>
   1f5c2:	4630      	mov	r0, r6
   1f5c4:	f7ff fd35 	bl	1f032 <bt_att_out_of_sync_sent_on_fixed>
   1f5c8:	2800      	cmp	r0, #0
   1f5ca:	d0f4      	beq.n	1f5b6 <bt_gatt_change_aware+0x48>
   1f5cc:	e8d4 3fef 	ldaex	r3, [r4]
   1f5d0:	f023 0302 	bic.w	r3, r3, #2
   1f5d4:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1f5d8:	2a00      	cmp	r2, #0
   1f5da:	d1f7      	bne.n	1f5cc <bt_gatt_change_aware+0x5e>
		bt_att_clear_out_of_sync_sent(conn);
   1f5dc:	4630      	mov	r0, r6
   1f5de:	f7ff fd13 	bl	1f008 <bt_att_clear_out_of_sync_sent>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1f5e2:	4639      	mov	r1, r7
   1f5e4:	e7e3      	b.n	1f5ae <bt_gatt_change_aware+0x40>

0001f5e6 <sys_memcpy_swap>:
	psrc += length - 1;
   1f5e6:	1e53      	subs	r3, r2, #1
   1f5e8:	4419      	add	r1, r3
	for (; length > 0; length--) {
   1f5ea:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   1f5ec:	f811 3901 	ldrb.w	r3, [r1], #-1
   1f5f0:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   1f5f4:	4290      	cmp	r0, r2
   1f5f6:	d1f9      	bne.n	1f5ec <sys_memcpy_swap+0x6>
}
   1f5f8:	4770      	bx	lr

0001f5fa <smp_pairing_rsp>:
}
   1f5fa:	2007      	movs	r0, #7
   1f5fc:	4770      	bx	lr

0001f5fe <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f5fe:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1f602:	4108      	asrs	r0, r1
}
   1f604:	f000 0001 	and.w	r0, r0, #1
   1f608:	4770      	bx	lr

0001f60a <update_keys_check>:
{
   1f60a:	4603      	mov	r3, r0
   1f60c:	b510      	push	{r4, lr}
	if (!keys ||
   1f60e:	b1d9      	cbz	r1, 1f648 <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   1f610:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   1f612:	f010 0f24 	tst.w	r0, #36	; 0x24
   1f616:	d017      	beq.n	1f648 <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   1f618:	7d1a      	ldrb	r2, [r3, #20]
   1f61a:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   1f61c:	7b09      	ldrb	r1, [r1, #12]
   1f61e:	42a2      	cmp	r2, r4
   1f620:	bf28      	it	cs
   1f622:	4622      	movcs	r2, r4
   1f624:	4291      	cmp	r1, r2
   1f626:	d901      	bls.n	1f62c <update_keys_check+0x22>
			return false;
   1f628:	2000      	movs	r0, #0
}
   1f62a:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   1f62c:	0682      	lsls	r2, r0, #26
   1f62e:	d404      	bmi.n	1f63a <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   1f630:	7a18      	ldrb	r0, [r3, #8]
   1f632:	3800      	subs	r0, #0
   1f634:	bf18      	it	ne
   1f636:	2001      	movne	r0, #1
   1f638:	e7f7      	b.n	1f62a <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1f63a:	2105      	movs	r1, #5
   1f63c:	1d18      	adds	r0, r3, #4
   1f63e:	f7ff ffde 	bl	1f5fe <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   1f642:	2800      	cmp	r0, #0
   1f644:	d1f4      	bne.n	1f630 <update_keys_check+0x26>
   1f646:	e7ef      	b.n	1f628 <update_keys_check+0x1e>
	return true;
   1f648:	2001      	movs	r0, #1
   1f64a:	e7ee      	b.n	1f62a <update_keys_check+0x20>

0001f64c <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1f64c:	2301      	movs	r3, #1
   1f64e:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1f650:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1f652:	e8d0 2fef 	ldaex	r2, [r0]
   1f656:	401a      	ands	r2, r3
   1f658:	e8c0 2fe1 	stlex	r1, r2, [r0]
   1f65c:	2900      	cmp	r1, #0
   1f65e:	d1f8      	bne.n	1f652 <atomic_clear_bit+0x6>
}
   1f660:	4770      	bx	lr

0001f662 <bt_smp_aes_cmac>:
{
   1f662:	b570      	push	{r4, r5, r6, lr}
   1f664:	b0c2      	sub	sp, #264	; 0x108
   1f666:	460d      	mov	r5, r1
   1f668:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   1f66a:	4601      	mov	r1, r0
   1f66c:	aa16      	add	r2, sp, #88	; 0x58
   1f66e:	4668      	mov	r0, sp
{
   1f670:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   1f672:	f7fd ff70 	bl	1d556 <tc_cmac_setup>
   1f676:	b918      	cbnz	r0, 1f680 <bt_smp_aes_cmac+0x1e>
		return -EIO;
   1f678:	f06f 0004 	mvn.w	r0, #4
}
   1f67c:	b042      	add	sp, #264	; 0x108
   1f67e:	bd70      	pop	{r4, r5, r6, pc}
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   1f680:	4632      	mov	r2, r6
   1f682:	4629      	mov	r1, r5
   1f684:	4668      	mov	r0, sp
   1f686:	f7fd ff91 	bl	1d5ac <tc_cmac_update>
   1f68a:	2800      	cmp	r0, #0
   1f68c:	d0f4      	beq.n	1f678 <bt_smp_aes_cmac+0x16>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   1f68e:	4669      	mov	r1, sp
   1f690:	4620      	mov	r0, r4
   1f692:	f7fd fff5 	bl	1d680 <tc_cmac_final>
   1f696:	2800      	cmp	r0, #0
   1f698:	d0ee      	beq.n	1f678 <bt_smp_aes_cmac+0x16>
	return 0;
   1f69a:	2000      	movs	r0, #0
   1f69c:	e7ee      	b.n	1f67c <bt_smp_aes_cmac+0x1a>

0001f69e <bt_addr_le_copy>:
   1f69e:	680b      	ldr	r3, [r1, #0]
   1f6a0:	6003      	str	r3, [r0, #0]
   1f6a2:	888b      	ldrh	r3, [r1, #4]
   1f6a4:	8083      	strh	r3, [r0, #4]
   1f6a6:	798b      	ldrb	r3, [r1, #6]
   1f6a8:	7183      	strb	r3, [r0, #6]
   1f6aa:	4770      	bx	lr

0001f6ac <smp_security_request>:
static uint8_t smp_security_request(struct bt_smp *smp, struct net_buf *buf)
   1f6ac:	2007      	movs	r0, #7
   1f6ae:	4770      	bx	lr

0001f6b0 <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   1f6b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1f6b2:	4613      	mov	r3, r2
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   1f6b4:	2200      	movs	r2, #0
   1f6b6:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   1f6b8:	4604      	mov	r4, r0
   1f6ba:	460d      	mov	r5, r1
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   1f6bc:	460a      	mov	r2, r1
   1f6be:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   1f6c2:	2106      	movs	r1, #6
   1f6c4:	f7fe fffb 	bl	1e6be <bt_l2cap_send_cb>
   1f6c8:	b128      	cbz	r0, 1f6d6 <smp_send.constprop.0+0x26>
		net_buf_unref(buf);
   1f6ca:	4628      	mov	r0, r5
}
   1f6cc:	b003      	add	sp, #12
   1f6ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   1f6d2:	f7f6 be33 	b.w	1633c <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   1f6d6:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1f6da:	2300      	movs	r3, #0
   1f6dc:	f504 70bc 	add.w	r0, r4, #376	; 0x178
}
   1f6e0:	b003      	add	sp, #12
   1f6e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   1f6e6:	f7fa bbfd 	b.w	19ee4 <k_work_reschedule>

0001f6ea <z_log_msg_static_create.constprop.0>:
   1f6ea:	2300      	movs	r3, #0
   1f6ec:	f7ec bde2 	b.w	c2b4 <z_impl_z_log_msg_static_create>

0001f6f0 <smp_chan_get>:
{
   1f6f0:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   1f6f2:	2106      	movs	r1, #6
   1f6f4:	f7ff f805 	bl	1e702 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1f6f8:	b918      	cbnz	r0, 1f702 <smp_chan_get+0x12>
}
   1f6fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1f6fe:	f7f4 bf53 	b.w	145a8 <smp_chan_get.part.0>
   1f702:	38ec      	subs	r0, #236	; 0xec
   1f704:	bd08      	pop	{r3, pc}

0001f706 <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   1f706:	b510      	push	{r4, lr}
   1f708:	1e43      	subs	r3, r0, #1
   1f70a:	f100 0210 	add.w	r2, r0, #16
   1f70e:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   1f710:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1f714:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   1f718:	4283      	cmp	r3, r0
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1f71a:	701c      	strb	r4, [r3, #0]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1f71c:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   1f71e:	d1f7      	bne.n	1f710 <sys_mem_swap.constprop.0+0xa>
	}
}
   1f720:	bd10      	pop	{r4, pc}

0001f722 <smp_f6>:
{
   1f722:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f726:	4616      	mov	r6, r2
   1f728:	461d      	mov	r5, r3
   1f72a:	b097      	sub	sp, #92	; 0x5c
   1f72c:	4604      	mov	r4, r0
   1f72e:	e9dd 981f 	ldrd	r9, r8, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   1f732:	2210      	movs	r2, #16
   1f734:	a805      	add	r0, sp, #20
{
   1f736:	9f21      	ldr	r7, [sp, #132]	; 0x84
	sys_memcpy_swap(m, n1, 16);
   1f738:	f7ff ff55 	bl	1f5e6 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   1f73c:	2210      	movs	r2, #16
   1f73e:	4631      	mov	r1, r6
   1f740:	a809      	add	r0, sp, #36	; 0x24
   1f742:	f7ff ff50 	bl	1f5e6 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   1f746:	2210      	movs	r2, #16
   1f748:	4629      	mov	r1, r5
   1f74a:	a80d      	add	r0, sp, #52	; 0x34
   1f74c:	f7ff ff4b 	bl	1f5e6 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   1f750:	2203      	movs	r2, #3
   1f752:	991e      	ldr	r1, [sp, #120]	; 0x78
   1f754:	a811      	add	r0, sp, #68	; 0x44
   1f756:	f7ff ff46 	bl	1f5e6 <sys_memcpy_swap>
	m[51] = a1->type;
   1f75a:	4649      	mov	r1, r9
   1f75c:	f811 3b01 	ldrb.w	r3, [r1], #1
	memcpy(m + 52, a1->a.val, 6);
   1f760:	f8d9 0001 	ldr.w	r0, [r9, #1]
	m[51] = a1->type;
   1f764:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   1f768:	888b      	ldrh	r3, [r1, #4]
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   1f76a:	2206      	movs	r2, #6
	memcpy(m + 52, a1->a.val, 6);
   1f76c:	9012      	str	r0, [sp, #72]	; 0x48
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   1f76e:	a812      	add	r0, sp, #72	; 0x48
	memcpy(m + 52, a1->a.val, 6);
   1f770:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   1f774:	f7ff ff37 	bl	1f5e6 <sys_memcpy_swap>
	m[58] = a2->type;
   1f778:	4641      	mov	r1, r8
   1f77a:	f811 3b01 	ldrb.w	r3, [r1], #1
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   1f77e:	2206      	movs	r2, #6
	m[58] = a2->type;
   1f780:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   1f784:	f8d8 3001 	ldr.w	r3, [r8, #1]
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   1f788:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
	memcpy(m + 59, a2->a.val, 6);
   1f78c:	f8cd 304f 	str.w	r3, [sp, #79]	; 0x4f
   1f790:	888b      	ldrh	r3, [r1, #4]
   1f792:	f8ad 3053 	strh.w	r3, [sp, #83]	; 0x53
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   1f796:	f7ff ff26 	bl	1f5e6 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   1f79a:	4621      	mov	r1, r4
   1f79c:	2210      	movs	r2, #16
   1f79e:	a801      	add	r0, sp, #4
   1f7a0:	f7ff ff21 	bl	1f5e6 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   1f7a4:	463b      	mov	r3, r7
   1f7a6:	2241      	movs	r2, #65	; 0x41
   1f7a8:	a905      	add	r1, sp, #20
   1f7aa:	a801      	add	r0, sp, #4
   1f7ac:	f7ff ff59 	bl	1f662 <bt_smp_aes_cmac>
	if (err) {
   1f7b0:	4604      	mov	r4, r0
   1f7b2:	b910      	cbnz	r0, 1f7ba <smp_f6+0x98>
	sys_mem_swap(check, 16);
   1f7b4:	4638      	mov	r0, r7
   1f7b6:	f7ff ffa6 	bl	1f706 <sys_mem_swap.constprop.0>
}
   1f7ba:	4620      	mov	r0, r4
   1f7bc:	b017      	add	sp, #92	; 0x5c
   1f7be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001f7c2 <smp_f4>:
{
   1f7c2:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f7c4:	460e      	mov	r6, r1
   1f7c6:	4614      	mov	r4, r2
   1f7c8:	461d      	mov	r5, r3
   1f7ca:	b097      	sub	sp, #92	; 0x5c
	sys_memcpy_swap(m, u, 32);
   1f7cc:	4601      	mov	r1, r0
   1f7ce:	2220      	movs	r2, #32
   1f7d0:	a805      	add	r0, sp, #20
{
   1f7d2:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   1f7d4:	f7ff ff07 	bl	1f5e6 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   1f7d8:	2220      	movs	r2, #32
   1f7da:	4631      	mov	r1, r6
   1f7dc:	a80d      	add	r0, sp, #52	; 0x34
   1f7de:	f7ff ff02 	bl	1f5e6 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   1f7e2:	4621      	mov	r1, r4
   1f7e4:	2210      	movs	r2, #16
   1f7e6:	a801      	add	r0, sp, #4
	m[64] = z;
   1f7e8:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   1f7ec:	f7ff fefb 	bl	1f5e6 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   1f7f0:	463b      	mov	r3, r7
   1f7f2:	2241      	movs	r2, #65	; 0x41
   1f7f4:	a905      	add	r1, sp, #20
   1f7f6:	a801      	add	r0, sp, #4
   1f7f8:	f7ff ff33 	bl	1f662 <bt_smp_aes_cmac>
	if (err) {
   1f7fc:	4604      	mov	r4, r0
   1f7fe:	b910      	cbnz	r0, 1f806 <smp_f4+0x44>
	sys_mem_swap(res, 16);
   1f800:	4638      	mov	r0, r7
   1f802:	f7ff ff80 	bl	1f706 <sys_mem_swap.constprop.0>
}
   1f806:	4620      	mov	r0, r4
   1f808:	b017      	add	sp, #92	; 0x5c
   1f80a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001f80c <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1f80c:	2301      	movs	r3, #1
   1f80e:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1f810:	e8d0 2fef 	ldaex	r2, [r0]
   1f814:	431a      	orrs	r2, r3
   1f816:	e8c0 2fe1 	stlex	r1, r2, [r0]
   1f81a:	2900      	cmp	r1, #0
   1f81c:	d1f8      	bne.n	1f810 <atomic_set_bit+0x4>
}
   1f81e:	4770      	bx	lr

0001f820 <smp_keypress_notif>:
{
   1f820:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1f822:	210e      	movs	r1, #14
   1f824:	f7ff fff2 	bl	1f80c <atomic_set_bit>
}
   1f828:	2000      	movs	r0, #0
   1f82a:	bd08      	pop	{r3, pc}

0001f82c <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   1f82c:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1f82e:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   1f830:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1f832:	4628      	mov	r0, r5
   1f834:	2104      	movs	r1, #4
   1f836:	f7ff fee2 	bl	1f5fe <atomic_test_bit>
   1f83a:	b168      	cbz	r0, 1f858 <smp_create_pdu.constprop.0+0x2c>
		timeout = K_NO_WAIT;
   1f83c:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   1f83e:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   1f840:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   1f842:	4608      	mov	r0, r1
   1f844:	f7fe ff38 	bl	1e6b8 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   1f848:	4604      	mov	r4, r0
   1f84a:	b940      	cbnz	r0, 1f85e <smp_create_pdu.constprop.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1f84c:	2104      	movs	r1, #4
   1f84e:	4628      	mov	r0, r5
   1f850:	f7ff ffdc 	bl	1f80c <atomic_set_bit>
}
   1f854:	4620      	mov	r0, r4
   1f856:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   1f858:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1f85c:	e7ef      	b.n	1f83e <smp_create_pdu.constprop.0+0x12>
   1f85e:	2101      	movs	r1, #1
   1f860:	3008      	adds	r0, #8
   1f862:	f000 fb13 	bl	1fe8c <net_buf_simple_add>
	hdr->code = op;
   1f866:	7006      	strb	r6, [r0, #0]
	return buf;
   1f868:	e7f4      	b.n	1f854 <smp_create_pdu.constprop.0+0x28>

0001f86a <send_pairing_rsp>:
{
   1f86a:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   1f86c:	2102      	movs	r1, #2
{
   1f86e:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   1f870:	f7ff ffdc 	bl	1f82c <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   1f874:	4605      	mov	r5, r0
   1f876:	b180      	cbz	r0, 1f89a <send_pairing_rsp+0x30>
   1f878:	2106      	movs	r1, #6
   1f87a:	3008      	adds	r0, #8
   1f87c:	f000 fb06 	bl	1fe8c <net_buf_simple_add>
   1f880:	f8d4 3011 	ldr.w	r3, [r4, #17]
	smp_send(smp, rsp_buf, NULL, NULL);
   1f884:	2200      	movs	r2, #0
   1f886:	6003      	str	r3, [r0, #0]
   1f888:	f8b4 3015 	ldrh.w	r3, [r4, #21]
   1f88c:	4629      	mov	r1, r5
   1f88e:	8083      	strh	r3, [r0, #4]
   1f890:	4620      	mov	r0, r4
   1f892:	f7ff ff0d 	bl	1f6b0 <smp_send.constprop.0>
	return 0;
   1f896:	2000      	movs	r0, #0
}
   1f898:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1f89a:	2008      	movs	r0, #8
   1f89c:	e7fc      	b.n	1f898 <send_pairing_rsp+0x2e>

0001f89e <smp_send_pairing_random>:
{
   1f89e:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   1f8a0:	2104      	movs	r1, #4
{
   1f8a2:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   1f8a4:	f7ff ffc2 	bl	1f82c <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   1f8a8:	4605      	mov	r5, r0
   1f8aa:	b1a0      	cbz	r0, 1f8d6 <smp_send_pairing_random+0x38>
   1f8ac:	2110      	movs	r1, #16
   1f8ae:	3008      	adds	r0, #8
   1f8b0:	f000 faec 	bl	1fe8c <net_buf_simple_add>
   1f8b4:	f104 0327 	add.w	r3, r4, #39	; 0x27
   1f8b8:	f104 0237 	add.w	r2, r4, #55	; 0x37
   1f8bc:	f853 1b04 	ldr.w	r1, [r3], #4
   1f8c0:	4293      	cmp	r3, r2
   1f8c2:	f840 1b04 	str.w	r1, [r0], #4
   1f8c6:	d1f9      	bne.n	1f8bc <smp_send_pairing_random+0x1e>
	smp_send(smp, rsp_buf, NULL, NULL);
   1f8c8:	4620      	mov	r0, r4
   1f8ca:	2200      	movs	r2, #0
   1f8cc:	4629      	mov	r1, r5
   1f8ce:	f7ff feef 	bl	1f6b0 <smp_send.constprop.0>
	return 0;
   1f8d2:	2000      	movs	r0, #0
}
   1f8d4:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1f8d6:	2008      	movs	r0, #8
   1f8d8:	e7fc      	b.n	1f8d4 <smp_send_pairing_random+0x36>

0001f8da <smp_dhkey_check>:
{
   1f8da:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   1f8dc:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
{
   1f8e0:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   1f8e2:	78db      	ldrb	r3, [r3, #3]
   1f8e4:	2b01      	cmp	r3, #1
   1f8e6:	d119      	bne.n	1f91c <smp_dhkey_check+0x42>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   1f8e8:	688d      	ldr	r5, [r1, #8]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1f8ea:	1d06      	adds	r6, r0, #4
   1f8ec:	2110      	movs	r1, #16
   1f8ee:	4630      	mov	r0, r6
   1f8f0:	f7ff feac 	bl	1f64c <atomic_clear_bit>
   1f8f4:	462b      	mov	r3, r5
   1f8f6:	f104 02b7 	add.w	r2, r4, #183	; 0xb7
   1f8fa:	f105 0110 	add.w	r1, r5, #16
   1f8fe:	f853 0b04 	ldr.w	r0, [r3], #4
   1f902:	428b      	cmp	r3, r1
   1f904:	f842 0b04 	str.w	r0, [r2], #4
   1f908:	d1f9      	bne.n	1f8fe <smp_dhkey_check+0x24>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   1f90a:	2107      	movs	r1, #7
   1f90c:	4630      	mov	r0, r6
   1f90e:	f7ff fe76 	bl	1f5fe <atomic_test_bit>
   1f912:	b128      	cbz	r0, 1f920 <smp_dhkey_check+0x46>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1f914:	2109      	movs	r1, #9
   1f916:	4630      	mov	r0, r6
   1f918:	f7ff ff78 	bl	1f80c <atomic_set_bit>
}
   1f91c:	2000      	movs	r0, #0
   1f91e:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1f920:	210a      	movs	r1, #10
   1f922:	4630      	mov	r0, r6
   1f924:	f7ff fe6b 	bl	1f5fe <atomic_test_bit>
   1f928:	2800      	cmp	r0, #0
   1f92a:	d1f3      	bne.n	1f914 <smp_dhkey_check+0x3a>
		return compute_and_check_and_send_periph_dhcheck(smp);
   1f92c:	4620      	mov	r0, r4
}
   1f92e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_periph_dhcheck(smp);
   1f932:	f7f5 baa3 	b.w	14e7c <compute_and_check_and_send_periph_dhcheck>

0001f936 <smp_signing_info>:
static uint8_t smp_signing_info(struct bt_smp *smp, struct net_buf *buf)
   1f936:	2007      	movs	r0, #7
   1f938:	4770      	bx	lr

0001f93a <atomic_test_and_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1f93a:	2301      	movs	r3, #1
   1f93c:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1f940:	43ca      	mvns	r2, r1
{
   1f942:	b530      	push	{r4, r5, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1f944:	e8d0 3fef 	ldaex	r3, [r0]
   1f948:	ea03 0402 	and.w	r4, r3, r2
   1f94c:	e8c0 4fe5 	stlex	r5, r4, [r0]
   1f950:	2d00      	cmp	r5, #0
   1f952:	d1f7      	bne.n	1f944 <atomic_test_and_clear_bit+0xa>
	return (old & mask) != 0;
   1f954:	4219      	tst	r1, r3
}
   1f956:	bf14      	ite	ne
   1f958:	2001      	movne	r0, #1
   1f95a:	2000      	moveq	r0, #0
   1f95c:	bd30      	pop	{r4, r5, pc}

0001f95e <smp_reset>:
{
   1f95e:	b538      	push	{r3, r4, r5, lr}
   1f960:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1f962:	2500      	movs	r5, #0
   1f964:	1d03      	adds	r3, r0, #4
   1f966:	e8d3 2fef 	ldaex	r2, [r3]
   1f96a:	e8c3 5fe1 	stlex	r1, r5, [r3]
   1f96e:	2900      	cmp	r1, #0
   1f970:	d1f9      	bne.n	1f966 <smp_reset+0x8>
	(void)k_work_cancel_delayable(&smp->work);
   1f972:	f504 70bc 	add.w	r0, r4, #376	; 0x178
   1f976:	f001 fd18 	bl	213aa <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   1f97a:	7225      	strb	r5, [r4, #8]
   1f97c:	e8d4 3fef 	ldaex	r3, [r4]
   1f980:	e8c4 5fe2 	stlex	r2, r5, [r4]
   1f984:	2a00      	cmp	r2, #0
   1f986:	d1f9      	bne.n	1f97c <smp_reset+0x1e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   1f988:	4620      	mov	r0, r4
}
   1f98a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   1f98e:	2101      	movs	r1, #1
   1f990:	f7ff bf3c 	b.w	1f80c <atomic_set_bit>

0001f994 <smp_c1>:
{
   1f994:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f996:	b089      	sub	sp, #36	; 0x24
   1f998:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
   1f99c:	4605      	mov	r5, r0
	p1[0] = ia->type;
   1f99e:	7830      	ldrb	r0, [r6, #0]
{
   1f9a0:	9c10      	ldr	r4, [sp, #64]	; 0x40
	p1[0] = ia->type;
   1f9a2:	f88d 0000 	strb.w	r0, [sp]
	p1[1] = ra->type;
   1f9a6:	7838      	ldrb	r0, [r7, #0]
   1f9a8:	f101 0c10 	add.w	ip, r1, #16
   1f9ac:	f88d 0001 	strb.w	r0, [sp, #1]
	memcpy(p1 + 2, preq, 7);
   1f9b0:	6810      	ldr	r0, [r2, #0]
   1f9b2:	f8cd 0002 	str.w	r0, [sp, #2]
   1f9b6:	8890      	ldrh	r0, [r2, #4]
   1f9b8:	7992      	ldrb	r2, [r2, #6]
   1f9ba:	f8ad 0006 	strh.w	r0, [sp, #6]
   1f9be:	f88d 2008 	strb.w	r2, [sp, #8]
	memcpy(p1 + 9, pres, 7);
   1f9c2:	681a      	ldr	r2, [r3, #0]
   1f9c4:	4668      	mov	r0, sp
   1f9c6:	f8cd 2009 	str.w	r2, [sp, #9]
   1f9ca:	889a      	ldrh	r2, [r3, #4]
   1f9cc:	799b      	ldrb	r3, [r3, #6]
   1f9ce:	f8ad 200d 	strh.w	r2, [sp, #13]
   1f9d2:	4622      	mov	r2, r4
   1f9d4:	f88d 300f 	strb.w	r3, [sp, #15]
		*r++ = *p++ ^ *q++;
   1f9d8:	f811 3b01 	ldrb.w	r3, [r1], #1
   1f9dc:	f810 eb01 	ldrb.w	lr, [r0], #1
	while (len--) {
   1f9e0:	4561      	cmp	r1, ip
		*r++ = *p++ ^ *q++;
   1f9e2:	ea83 030e 	eor.w	r3, r3, lr
   1f9e6:	f802 3b01 	strb.w	r3, [r2], #1
	while (len--) {
   1f9ea:	d1f5      	bne.n	1f9d8 <smp_c1+0x44>
	err = bt_encrypt_le(k, enc_data, enc_data);
   1f9ec:	4622      	mov	r2, r4
   1f9ee:	4621      	mov	r1, r4
   1f9f0:	4628      	mov	r0, r5
   1f9f2:	f7fe fc7d 	bl	1e2f0 <bt_encrypt_le>
	if (err) {
   1f9f6:	4603      	mov	r3, r0
   1f9f8:	bb28      	cbnz	r0, 1fa46 <_flash_used+0x36>
	(void)memset(p2 + 12, 0, 4);
   1f9fa:	9307      	str	r3, [sp, #28]
   1f9fc:	4623      	mov	r3, r4
	memcpy(p2, ra->a.val, 6);
   1f9fe:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   1fa02:	f8d7 0001 	ldr.w	r0, [r7, #1]
   1fa06:	f8ad 2014 	strh.w	r2, [sp, #20]
	memcpy(p2 + 6, ia->a.val, 6);
   1fa0a:	f8d6 2001 	ldr.w	r2, [r6, #1]
	memcpy(p2, ra->a.val, 6);
   1fa0e:	9004      	str	r0, [sp, #16]
	memcpy(p2 + 6, ia->a.val, 6);
   1fa10:	f8cd 2016 	str.w	r2, [sp, #22]
   1fa14:	f8b6 2005 	ldrh.w	r2, [r6, #5]
   1fa18:	f104 0010 	add.w	r0, r4, #16
   1fa1c:	f8ad 201a 	strh.w	r2, [sp, #26]
	(void)memset(p2 + 12, 0, 4);
   1fa20:	a904      	add	r1, sp, #16
		*r++ = *p++ ^ *q++;
   1fa22:	f813 2b01 	ldrb.w	r2, [r3], #1
   1fa26:	f811 6b01 	ldrb.w	r6, [r1], #1
	while (len--) {
   1fa2a:	4283      	cmp	r3, r0
		*r++ = *p++ ^ *q++;
   1fa2c:	ea82 0206 	eor.w	r2, r2, r6
   1fa30:	f803 2c01 	strb.w	r2, [r3, #-1]
	while (len--) {
   1fa34:	d1f5      	bne.n	1fa22 <_flash_used+0x12>
	return bt_encrypt_le(k, enc_data, enc_data);
   1fa36:	4622      	mov	r2, r4
   1fa38:	4621      	mov	r1, r4
   1fa3a:	4628      	mov	r0, r5
}
   1fa3c:	b009      	add	sp, #36	; 0x24
   1fa3e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_encrypt_le(k, enc_data, enc_data);
   1fa42:	f7fe bc55 	b.w	1e2f0 <bt_encrypt_le>
}
   1fa46:	b009      	add	sp, #36	; 0x24
   1fa48:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001fa4a <legacy_pairing_confirm>:
{
   1fa4a:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1fa4c:	1d07      	adds	r7, r0, #4
{
   1fa4e:	4604      	mov	r4, r0
   1fa50:	b085      	sub	sp, #20
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1fa52:	210a      	movs	r1, #10
   1fa54:	4638      	mov	r0, r7
   1fa56:	f7ff fdd2 	bl	1f5fe <atomic_test_bit>
   1fa5a:	bb88      	cbnz	r0, 1fac0 <legacy_pairing_confirm+0x76>
			atomic_set_bit(smp->allowed_cmds,
   1fa5c:	2104      	movs	r1, #4
   1fa5e:	4620      	mov	r0, r4
   1fa60:	f7ff fed4 	bl	1f80c <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   1fa64:	2103      	movs	r1, #3
	struct bt_conn *conn = smp->chan.chan.conn;
   1fa66:	f8d4 60ec 	ldr.w	r6, [r4, #236]	; 0xec
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   1fa6a:	f7ff fedf 	bl	1f82c <smp_create_pdu.constprop.0>
	if (!buf) {
   1fa6e:	4605      	mov	r5, r0
   1fa70:	b1c0      	cbz	r0, 1faa4 <legacy_pairing_confirm+0x5a>
   1fa72:	2110      	movs	r1, #16
   1fa74:	3008      	adds	r0, #8
   1fa76:	f000 fa09 	bl	1fe8c <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   1fa7a:	f106 0396 	add.w	r3, r6, #150	; 0x96
   1fa7e:	368f      	adds	r6, #143	; 0x8f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   1fa80:	9002      	str	r0, [sp, #8]
   1fa82:	9301      	str	r3, [sp, #4]
   1fa84:	9600      	str	r6, [sp, #0]
   1fa86:	f104 0310 	add.w	r3, r4, #16
   1fa8a:	f104 0209 	add.w	r2, r4, #9
   1fa8e:	f104 0127 	add.w	r1, r4, #39	; 0x27
   1fa92:	f104 0047 	add.w	r0, r4, #71	; 0x47
   1fa96:	f7ff ff7d 	bl	1f994 <smp_c1>
   1fa9a:	4606      	mov	r6, r0
   1fa9c:	b128      	cbz	r0, 1faaa <legacy_pairing_confirm+0x60>
		net_buf_unref(buf);
   1fa9e:	4628      	mov	r0, r5
   1faa0:	f7f6 fc4c 	bl	1633c <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   1faa4:	2008      	movs	r0, #8
}
   1faa6:	b005      	add	sp, #20
   1faa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	smp_send(smp, buf, NULL, NULL);
   1faaa:	4602      	mov	r2, r0
   1faac:	4629      	mov	r1, r5
   1faae:	4620      	mov	r0, r4
   1fab0:	f7ff fdfe 	bl	1f6b0 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1fab4:	4631      	mov	r1, r6
   1fab6:	4638      	mov	r0, r7
   1fab8:	f7ff fdc8 	bl	1f64c <atomic_clear_bit>
	return 0;
   1fabc:	2000      	movs	r0, #0
   1fabe:	e7f2      	b.n	1faa6 <legacy_pairing_confirm+0x5c>
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1fac0:	2100      	movs	r1, #0
   1fac2:	4638      	mov	r0, r7
   1fac4:	f7ff fea2 	bl	1f80c <atomic_set_bit>
	return 0;
   1fac8:	e7f8      	b.n	1fabc <legacy_pairing_confirm+0x72>

0001faca <bt_smp_request_ltk>:
{
   1faca:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1face:	9f09      	ldr	r7, [sp, #36]	; 0x24
   1fad0:	4604      	mov	r4, r0
   1fad2:	e9cd 2300 	strd	r2, r3, [sp]
	smp = smp_chan_get(conn);
   1fad6:	f7ff fe0b 	bl	1f6f0 <smp_chan_get>
	if (!smp) {
   1fada:	4605      	mov	r5, r0
   1fadc:	2800      	cmp	r0, #0
   1fade:	d07c      	beq.n	1fbda <bt_smp_request_ltk+0x110>
	if (ediv == 0U && rand == 0U &&
   1fae0:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   1fae4:	1d06      	adds	r6, r0, #4
	if (ediv == 0U && rand == 0U &&
   1fae6:	f1b8 0f00 	cmp.w	r8, #0
   1faea:	d128      	bne.n	1fb3e <bt_smp_request_ltk+0x74>
   1faec:	e9dd 3200 	ldrd	r3, r2, [sp]
   1faf0:	4313      	orrs	r3, r2
   1faf2:	d124      	bne.n	1fb3e <bt_smp_request_ltk+0x74>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   1faf4:	2103      	movs	r1, #3
   1faf6:	4630      	mov	r0, r6
   1faf8:	f7ff fd81 	bl	1f5fe <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   1fafc:	b1f8      	cbz	r0, 1fb3e <bt_smp_request_ltk+0x74>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1fafe:	2101      	movs	r1, #1
   1fb00:	4630      	mov	r0, r6
   1fb02:	f7ff fd7c 	bl	1f5fe <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   1fb06:	b1d0      	cbz	r0, 1fb3e <bt_smp_request_ltk+0x74>
	return MIN(req->max_key_size, rsp->max_key_size);
   1fb08:	7d2c      	ldrb	r4, [r5, #20]
   1fb0a:	7b6b      	ldrb	r3, [r5, #13]
   1fb0c:	f105 0147 	add.w	r1, r5, #71	; 0x47
   1fb10:	429c      	cmp	r4, r3
   1fb12:	bf28      	it	cs
   1fb14:	461c      	movcs	r4, r3
   1fb16:	4622      	mov	r2, r4
   1fb18:	4638      	mov	r0, r7
   1fb1a:	f001 ffb8 	bl	21a8e <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   1fb1e:	2c0f      	cmp	r4, #15
   1fb20:	d805      	bhi.n	1fb2e <bt_smp_request_ltk+0x64>
__ssp_bos_icheck3(memset, void *, int)
   1fb22:	4641      	mov	r1, r8
   1fb24:	f1c4 0210 	rsb	r2, r4, #16
   1fb28:	1938      	adds	r0, r7, r4
   1fb2a:	f001 ffbd 	bl	21aa8 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1fb2e:	4630      	mov	r0, r6
   1fb30:	2101      	movs	r1, #1
   1fb32:	f7ff fe6b 	bl	1f80c <atomic_set_bit>
		return true;
   1fb36:	2001      	movs	r0, #1
}
   1fb38:	b002      	add	sp, #8
   1fb3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!conn->le.keys) {
   1fb3e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   1fb42:	b983      	cbnz	r3, 1fb66 <bt_smp_request_ltk+0x9c>
					     &conn->le.dst);
   1fb44:	f104 0888 	add.w	r8, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   1fb48:	4642      	mov	r2, r8
   1fb4a:	2020      	movs	r0, #32
   1fb4c:	7a21      	ldrb	r1, [r4, #8]
   1fb4e:	f7f6 fab9 	bl	160c4 <bt_keys_find>
   1fb52:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   1fb56:	b930      	cbnz	r0, 1fb66 <bt_smp_request_ltk+0x9c>
			conn->le.keys = bt_keys_find(BT_KEYS_PERIPH_LTK,
   1fb58:	4642      	mov	r2, r8
   1fb5a:	2001      	movs	r0, #1
   1fb5c:	7a21      	ldrb	r1, [r4, #8]
   1fb5e:	f7f6 fab1 	bl	160c4 <bt_keys_find>
   1fb62:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   1fb66:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   1fb6a:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   1fb6e:	f1b8 0f00 	cmp.w	r8, #0
   1fb72:	d10c      	bne.n	1fb8e <bt_smp_request_ltk+0xc4>
   1fb74:	e9dd 3200 	ldrd	r3, r2, [sp]
   1fb78:	4313      	orrs	r3, r2
   1fb7a:	d108      	bne.n	1fb8e <bt_smp_request_ltk+0xc4>
   1fb7c:	b300      	cbz	r0, 1fbc0 <bt_smp_request_ltk+0xf6>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   1fb7e:	89c3      	ldrh	r3, [r0, #14]
   1fb80:	069a      	lsls	r2, r3, #26
   1fb82:	d505      	bpl.n	1fb90 <bt_smp_request_ltk+0xc6>
		enc_size = conn->le.keys->enc_size;
   1fb84:	7b04      	ldrb	r4, [r0, #12]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1fb86:	f100 011a 	add.w	r1, r0, #26
   1fb8a:	4622      	mov	r2, r4
   1fb8c:	e7c4      	b.n	1fb18 <bt_smp_request_ltk+0x4e>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   1fb8e:	b1b8      	cbz	r0, 1fbc0 <bt_smp_request_ltk+0xf6>
   1fb90:	89c3      	ldrh	r3, [r0, #14]
   1fb92:	07db      	lsls	r3, r3, #31
   1fb94:	d514      	bpl.n	1fbc0 <bt_smp_request_ltk+0xf6>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   1fb96:	2208      	movs	r2, #8
   1fb98:	4669      	mov	r1, sp
   1fb9a:	3040      	adds	r0, #64	; 0x40
   1fb9c:	f001 ff67 	bl	21a6e <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   1fba0:	b970      	cbnz	r0, 1fbc0 <bt_smp_request_ltk+0xf6>
	    !memcmp(conn->le.keys->periph_ltk.ediv, &ediv, 2)) {
   1fba2:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1fba6:	2202      	movs	r2, #2
   1fba8:	a908      	add	r1, sp, #32
   1fbaa:	3048      	adds	r0, #72	; 0x48
   1fbac:	f001 ff5f 	bl	21a6e <memcmp>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   1fbb0:	4680      	mov	r8, r0
   1fbb2:	b928      	cbnz	r0, 1fbc0 <bt_smp_request_ltk+0xf6>
		enc_size = conn->le.keys->enc_size;
   1fbb4:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   1fbb8:	7b0c      	ldrb	r4, [r1, #12]
   1fbba:	314a      	adds	r1, #74	; 0x4a
   1fbbc:	4622      	mov	r2, r4
   1fbbe:	e7ab      	b.n	1fb18 <bt_smp_request_ltk+0x4e>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1fbc0:	210f      	movs	r1, #15
   1fbc2:	4630      	mov	r0, r6
   1fbc4:	f7ff fd1b 	bl	1f5fe <atomic_test_bit>
   1fbc8:	b120      	cbz	r0, 1fbd4 <bt_smp_request_ltk+0x10a>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   1fbca:	2202      	movs	r2, #2
   1fbcc:	2106      	movs	r1, #6
   1fbce:	4620      	mov	r0, r4
   1fbd0:	f7f2 f898 	bl	11d04 <bt_conn_security_changed>
	smp_reset(smp);
   1fbd4:	4628      	mov	r0, r5
   1fbd6:	f7ff fec2 	bl	1f95e <smp_reset>
		return false;
   1fbda:	2000      	movs	r0, #0
   1fbdc:	e7ac      	b.n	1fb38 <bt_smp_request_ltk+0x6e>

0001fbde <bt_smp_sign>:
int bt_smp_sign(struct bt_conn *conn, struct net_buf *buf)
   1fbde:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1fbe2:	4770      	bx	lr

0001fbe4 <bt_smp_dhkey_ready>:
{
   1fbe4:	b570      	push	{r4, r5, r6, lr}
   1fbe6:	4604      	mov	r4, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   1fbe8:	2008      	movs	r0, #8
   1fbea:	f7f4 fc5d 	bl	144a8 <smp_find>
	if (smp) {
   1fbee:	4605      	mov	r5, r0
   1fbf0:	b1e0      	cbz	r0, 1fc2c <bt_smp_dhkey_ready+0x48>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1fbf2:	1d06      	adds	r6, r0, #4
   1fbf4:	2108      	movs	r1, #8
   1fbf6:	4630      	mov	r0, r6
   1fbf8:	f7ff fd28 	bl	1f64c <atomic_clear_bit>
	if (!dhkey) {
   1fbfc:	b3bc      	cbz	r4, 1fc6e <bt_smp_dhkey_ready+0x8a>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   1fbfe:	2107      	movs	r1, #7
   1fc00:	f7ff fd24 	bl	1f64c <atomic_clear_bit>
   1fc04:	4623      	mov	r3, r4
   1fc06:	f105 0297 	add.w	r2, r5, #151	; 0x97
   1fc0a:	f104 0120 	add.w	r1, r4, #32
   1fc0e:	f853 0b04 	ldr.w	r0, [r3], #4
   1fc12:	428b      	cmp	r3, r1
   1fc14:	f842 0b04 	str.w	r0, [r2], #4
   1fc18:	d1f9      	bne.n	1fc0e <bt_smp_dhkey_ready+0x2a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1fc1a:	210a      	movs	r1, #10
   1fc1c:	4630      	mov	r0, r6
   1fc1e:	f7ff fcee 	bl	1f5fe <atomic_test_bit>
   1fc22:	b170      	cbz	r0, 1fc42 <bt_smp_dhkey_ready+0x5e>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1fc24:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1fc26:	4630      	mov	r0, r6
   1fc28:	f7ff fdf0 	bl	1f80c <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   1fc2c:	2007      	movs	r0, #7
   1fc2e:	f7f4 fc3b 	bl	144a8 <smp_find>
		if (smp) {
   1fc32:	4604      	mov	r4, r0
   1fc34:	b1e8      	cbz	r0, 1fc72 <bt_smp_dhkey_ready+0x8e>
			err = smp_dhkey_generate(smp);
   1fc36:	f7f4 fd19 	bl	1466c <smp_dhkey_generate>
			if (err) {
   1fc3a:	4601      	mov	r1, r0
   1fc3c:	b1c8      	cbz	r0, 1fc72 <bt_smp_dhkey_ready+0x8e>
				smp_error(smp, err);
   1fc3e:	4620      	mov	r0, r4
   1fc40:	e012      	b.n	1fc68 <bt_smp_dhkey_ready+0x84>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   1fc42:	2110      	movs	r1, #16
   1fc44:	4630      	mov	r0, r6
   1fc46:	f7ff fcda 	bl	1f5fe <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1fc4a:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   1fc4c:	2800      	cmp	r0, #0
   1fc4e:	d1ea      	bne.n	1fc26 <bt_smp_dhkey_ready+0x42>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   1fc50:	4630      	mov	r0, r6
   1fc52:	f7ff fcd4 	bl	1f5fe <atomic_test_bit>
   1fc56:	2800      	cmp	r0, #0
   1fc58:	d0e8      	beq.n	1fc2c <bt_smp_dhkey_ready+0x48>
		return  compute_and_check_and_send_periph_dhcheck(smp);
   1fc5a:	4628      	mov	r0, r5
   1fc5c:	f7f5 f90e 	bl	14e7c <compute_and_check_and_send_periph_dhcheck>
		if (err) {
   1fc60:	4601      	mov	r1, r0
   1fc62:	2800      	cmp	r0, #0
   1fc64:	d0e2      	beq.n	1fc2c <bt_smp_dhkey_ready+0x48>
			smp_error(smp, err);
   1fc66:	4628      	mov	r0, r5
   1fc68:	f7f5 fd38 	bl	156dc <smp_error>
   1fc6c:	e7de      	b.n	1fc2c <bt_smp_dhkey_ready+0x48>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   1fc6e:	210b      	movs	r1, #11
   1fc70:	e7f9      	b.n	1fc66 <bt_smp_dhkey_ready+0x82>
}
   1fc72:	bd70      	pop	{r4, r5, r6, pc}

0001fc74 <bt_smp_disconnected>:
{
   1fc74:	b570      	push	{r4, r5, r6, lr}
   1fc76:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   1fc78:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   1fc7c:	f850 3b8c 	ldr.w	r3, [r0], #140
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1fc80:	3ce8      	subs	r4, #232	; 0xe8
	struct bt_keys *keys = chan->conn->le.keys;
   1fc82:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
	(void)k_work_cancel_delayable(&smp->work);
   1fc86:	f001 fb90 	bl	213aa <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1fc8a:	2103      	movs	r1, #3
   1fc8c:	4620      	mov	r0, r4
   1fc8e:	f7ff fcb6 	bl	1f5fe <atomic_test_bit>
   1fc92:	b1a0      	cbz	r0, 1fcbe <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   1fc94:	2108      	movs	r1, #8
   1fc96:	4630      	mov	r0, r6
   1fc98:	f7f5 fca2 	bl	155e0 <smp_pairing_complete>
	if (keys) {
   1fc9c:	b13d      	cbz	r5, 1fcae <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   1fc9e:	89eb      	ldrh	r3, [r5, #14]
   1fca0:	b113      	cbz	r3, 1fca8 <bt_smp_disconnected+0x34>
   1fca2:	7b6b      	ldrb	r3, [r5, #13]
   1fca4:	079b      	lsls	r3, r3, #30
   1fca6:	d502      	bpl.n	1fcae <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   1fca8:	4628      	mov	r0, r5
   1fcaa:	f000 f840 	bl	1fd2e <bt_keys_clear>
__ssp_bos_icheck3(memset, void *, int)
   1fcae:	4630      	mov	r0, r6
}
   1fcb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1fcb4:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
   1fcb8:	2100      	movs	r1, #0
   1fcba:	f001 bef5 	b.w	21aa8 <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   1fcbe:	2101      	movs	r1, #1
   1fcc0:	4620      	mov	r0, r4
   1fcc2:	f7ff fc9c 	bl	1f5fe <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1fcc6:	2800      	cmp	r0, #0
   1fcc8:	d1e4      	bne.n	1fc94 <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1fcca:	210f      	movs	r1, #15
   1fccc:	4620      	mov	r0, r4
   1fcce:	f7ff fc96 	bl	1f5fe <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   1fcd2:	2800      	cmp	r0, #0
   1fcd4:	d1de      	bne.n	1fc94 <bt_smp_disconnected+0x20>
   1fcd6:	e7e1      	b.n	1fc9c <bt_smp_disconnected+0x28>

0001fcd8 <smp_ident_sent>:
{
   1fcd8:	b508      	push	{r3, lr}
	if (!err) {
   1fcda:	b99a      	cbnz	r2, 1fd04 <smp_ident_sent+0x2c>
	if (conn->type == BT_CONN_TYPE_LE) {
   1fcdc:	7883      	ldrb	r3, [r0, #2]
   1fcde:	2b01      	cmp	r3, #1
   1fce0:	d110      	bne.n	1fd04 <smp_ident_sent+0x2c>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   1fce2:	2106      	movs	r1, #6
   1fce4:	f7fe fd04 	bl	1e6f0 <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
   1fce8:	f810 3c04 	ldrb.w	r3, [r0, #-4]
   1fcec:	f023 0301 	bic.w	r3, r3, #1
   1fcf0:	f800 3c04 	strb.w	r3, [r0, #-4]
		if (!smp->local_dist && !smp->remote_dist) {
   1fcf4:	f830 1c04 	ldrh.w	r1, [r0, #-4]
   1fcf8:	b921      	cbnz	r1, 1fd04 <smp_ident_sent+0x2c>
}
   1fcfa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			smp_pairing_complete(smp, 0);
   1fcfe:	38ec      	subs	r0, #236	; 0xec
   1fd00:	f7f5 bc6e 	b.w	155e0 <smp_pairing_complete>
}
   1fd04:	bd08      	pop	{r3, pc}

0001fd06 <bt_keys_get_type>:
{
   1fd06:	b570      	push	{r4, r5, r6, lr}
   1fd08:	4604      	mov	r4, r0
   1fd0a:	460d      	mov	r5, r1
   1fd0c:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   1fd0e:	f7f6 f9d9 	bl	160c4 <bt_keys_find>
	if (keys) {
   1fd12:	b938      	cbnz	r0, 1fd24 <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   1fd14:	4631      	mov	r1, r6
   1fd16:	4628      	mov	r0, r5
   1fd18:	f7f6 f99e 	bl	16058 <bt_keys_get_addr>
	if (!keys) {
   1fd1c:	b110      	cbz	r0, 1fd24 <bt_keys_get_type+0x1e>

void bt_keys_add_type(struct bt_keys *keys, enum bt_keys_type type)
{
	__ASSERT_NO_MSG(keys != NULL);

	keys->keys |= type;
   1fd1e:	89c3      	ldrh	r3, [r0, #14]
   1fd20:	431c      	orrs	r4, r3
   1fd22:	81c4      	strh	r4, [r0, #14]
}
   1fd24:	bd70      	pop	{r4, r5, r6, pc}

0001fd26 <bt_keys_add_type>:
	keys->keys |= type;
   1fd26:	89c3      	ldrh	r3, [r0, #14]
   1fd28:	4319      	orrs	r1, r3
   1fd2a:	81c1      	strh	r1, [r0, #14]
}
   1fd2c:	4770      	bx	lr

0001fd2e <bt_keys_clear>:

void bt_keys_clear(struct bt_keys *keys)
{
   1fd2e:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(keys != NULL);

	BT_DBG("%s (keys 0x%04x)", bt_addr_le_str(&keys->addr), keys->keys);

	if (keys->state & BT_KEYS_ID_ADDED) {
   1fd30:	7a03      	ldrb	r3, [r0, #8]
{
   1fd32:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   1fd34:	075b      	lsls	r3, r3, #29
   1fd36:	d501      	bpl.n	1fd3c <bt_keys_clear+0xe>
		bt_id_del(keys);
   1fd38:	f7f0 fc60 	bl	105fc <bt_id_del>
   1fd3c:	4620      	mov	r0, r4
		BT_DBG("Deleting key %s", key);
		settings_delete(key);
	}

	(void)memset(keys, 0, sizeof(*keys));
}
   1fd3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1fd42:	225c      	movs	r2, #92	; 0x5c
   1fd44:	2100      	movs	r1, #0
   1fd46:	f001 beaf 	b.w	21aa8 <memset>

0001fd4a <fixed_data_unref>:
}
   1fd4a:	4770      	bx	lr

0001fd4c <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1fd4c:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1fd4e:	6849      	ldr	r1, [r1, #4]
   1fd50:	6809      	ldr	r1, [r1, #0]
   1fd52:	f7f6 ba61 	b.w	16218 <net_buf_alloc_len>

0001fd56 <net_buf_get>:
{
   1fd56:	b570      	push	{r4, r5, r6, lr}
   1fd58:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   1fd5a:	f7f9 fe39 	bl	199d0 <z_impl_k_queue_get>
	if (!buf) {
   1fd5e:	4605      	mov	r5, r0
   1fd60:	b128      	cbz	r0, 1fd6e <net_buf_get+0x18>
   1fd62:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1fd64:	7963      	ldrb	r3, [r4, #5]
   1fd66:	f013 0301 	ands.w	r3, r3, #1
   1fd6a:	d102      	bne.n	1fd72 <net_buf_get+0x1c>
	frag->frags = NULL;
   1fd6c:	6023      	str	r3, [r4, #0]
}
   1fd6e:	4628      	mov	r0, r5
   1fd70:	bd70      	pop	{r4, r5, r6, pc}
   1fd72:	2300      	movs	r3, #0
   1fd74:	2200      	movs	r2, #0
   1fd76:	4630      	mov	r0, r6
   1fd78:	f7f9 fe2a 	bl	199d0 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   1fd7c:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1fd7e:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   1fd80:	f023 0301 	bic.w	r3, r3, #1
   1fd84:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1fd86:	4604      	mov	r4, r0
   1fd88:	e7ec      	b.n	1fd64 <net_buf_get+0xe>

0001fd8a <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   1fd8a:	6883      	ldr	r3, [r0, #8]
   1fd8c:	440b      	add	r3, r1
   1fd8e:	6003      	str	r3, [r0, #0]
}
   1fd90:	4770      	bx	lr

0001fd92 <net_buf_slist_put>:
	for (tail = buf; tail->frags; tail = tail->frags) {
   1fd92:	460b      	mov	r3, r1
{
   1fd94:	b510      	push	{r4, lr}
	for (tail = buf; tail->frags; tail = tail->frags) {
   1fd96:	681c      	ldr	r4, [r3, #0]
   1fd98:	b98c      	cbnz	r4, 1fdbe <net_buf_slist_put+0x2c>
	__asm__ volatile(
   1fd9a:	f04f 0220 	mov.w	r2, #32
   1fd9e:	f3ef 8411 	mrs	r4, BASEPRI
   1fda2:	f382 8812 	msr	BASEPRI_MAX, r2
   1fda6:	f3bf 8f6f 	isb	sy
Z_GENLIST_APPEND_LIST(slist, snode)
   1fdaa:	b119      	cbz	r1, 1fdb4 <net_buf_slist_put+0x22>
	return list->tail;
   1fdac:	6842      	ldr	r2, [r0, #4]
Z_GENLIST_APPEND_LIST(slist, snode)
   1fdae:	b962      	cbnz	r2, 1fdca <net_buf_slist_put+0x38>
	list->head = node;
   1fdb0:	6001      	str	r1, [r0, #0]
	list->tail = node;
   1fdb2:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   1fdb4:	f384 8811 	msr	BASEPRI, r4
   1fdb8:	f3bf 8f6f 	isb	sy
}
   1fdbc:	bd10      	pop	{r4, pc}
		tail->flags |= NET_BUF_FRAGS;
   1fdbe:	795a      	ldrb	r2, [r3, #5]
   1fdc0:	f042 0201 	orr.w	r2, r2, #1
   1fdc4:	715a      	strb	r2, [r3, #5]
   1fdc6:	4623      	mov	r3, r4
   1fdc8:	e7e5      	b.n	1fd96 <net_buf_slist_put+0x4>
	parent->next = child;
   1fdca:	6011      	str	r1, [r2, #0]
}
   1fdcc:	e7f1      	b.n	1fdb2 <net_buf_slist_put+0x20>

0001fdce <net_buf_slist_get>:
{
   1fdce:	4603      	mov	r3, r0
   1fdd0:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
   1fdd2:	f04f 0220 	mov.w	r2, #32
   1fdd6:	f3ef 8511 	mrs	r5, BASEPRI
   1fdda:	f382 8812 	msr	BASEPRI_MAX, r2
   1fdde:	f3bf 8f6f 	isb	sy
	return list->head;
   1fde2:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   1fde4:	b158      	cbz	r0, 1fdfe <net_buf_slist_get+0x30>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1fde6:	6859      	ldr	r1, [r3, #4]
	return node->next;
   1fde8:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1fdea:	4288      	cmp	r0, r1
	list->head = node;
   1fdec:	601a      	str	r2, [r3, #0]
	list->tail = node;
   1fdee:	bf08      	it	eq
   1fdf0:	605a      	streq	r2, [r3, #4]
   1fdf2:	4602      	mov	r2, r0
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1fdf4:	7951      	ldrb	r1, [r2, #5]
   1fdf6:	f011 0101 	ands.w	r1, r1, #1
   1fdfa:	d105      	bne.n	1fe08 <net_buf_slist_get+0x3a>
		frag->frags = NULL;
   1fdfc:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
   1fdfe:	f385 8811 	msr	BASEPRI, r5
   1fe02:	f3bf 8f6f 	isb	sy
}
   1fe06:	bd70      	pop	{r4, r5, r6, pc}
	return list->head;
   1fe08:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_GET(slist, snode)
   1fe0a:	b129      	cbz	r1, 1fe18 <net_buf_slist_get+0x4a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1fe0c:	685e      	ldr	r6, [r3, #4]
	return node->next;
   1fe0e:	680c      	ldr	r4, [r1, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1fe10:	42b1      	cmp	r1, r6
	list->head = node;
   1fe12:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1fe14:	bf08      	it	eq
   1fe16:	605c      	streq	r4, [r3, #4]
			frag->flags &= ~NET_BUF_FRAGS;
   1fe18:	7954      	ldrb	r4, [r2, #5]
			frag->frags = (void *)sys_slist_get(list);
   1fe1a:	6011      	str	r1, [r2, #0]
			frag->flags &= ~NET_BUF_FRAGS;
   1fe1c:	f024 0401 	bic.w	r4, r4, #1
   1fe20:	7154      	strb	r4, [r2, #5]
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1fe22:	460a      	mov	r2, r1
   1fe24:	e7e6      	b.n	1fdf4 <net_buf_slist_get+0x26>

0001fe26 <net_buf_put>:
	for (tail = buf; tail->frags; tail = tail->frags) {
   1fe26:	460a      	mov	r2, r1
{
   1fe28:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   1fe2a:	6814      	ldr	r4, [r2, #0]
   1fe2c:	b914      	cbnz	r4, 1fe34 <net_buf_put+0xe>
}
   1fe2e:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   1fe30:	f001 b9a8 	b.w	21184 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   1fe34:	7953      	ldrb	r3, [r2, #5]
   1fe36:	f043 0301 	orr.w	r3, r3, #1
   1fe3a:	7153      	strb	r3, [r2, #5]
   1fe3c:	4622      	mov	r2, r4
   1fe3e:	e7f4      	b.n	1fe2a <net_buf_put+0x4>

0001fe40 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1fe40:	7902      	ldrb	r2, [r0, #4]
   1fe42:	3201      	adds	r2, #1
   1fe44:	7102      	strb	r2, [r0, #4]
	return buf;
}
   1fe46:	4770      	bx	lr

0001fe48 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1fe48:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   1fe4a:	4618      	mov	r0, r3
   1fe4c:	681b      	ldr	r3, [r3, #0]
   1fe4e:	2b00      	cmp	r3, #0
   1fe50:	d1fb      	bne.n	1fe4a <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   1fe52:	4770      	bx	lr

0001fe54 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   1fe54:	6802      	ldr	r2, [r0, #0]
{
   1fe56:	b510      	push	{r4, lr}
	if (parent->frags) {
   1fe58:	b12a      	cbz	r2, 1fe66 <net_buf_frag_insert+0x12>
   1fe5a:	460b      	mov	r3, r1
	while (buf->frags) {
   1fe5c:	461c      	mov	r4, r3
   1fe5e:	681b      	ldr	r3, [r3, #0]
   1fe60:	2b00      	cmp	r3, #0
   1fe62:	d1fb      	bne.n	1fe5c <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   1fe64:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1fe66:	6001      	str	r1, [r0, #0]
}
   1fe68:	bd10      	pop	{r4, pc}

0001fe6a <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1fe6a:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   1fe6c:	4604      	mov	r4, r0
   1fe6e:	b920      	cbnz	r0, 1fe7a <net_buf_frag_add+0x10>
		return net_buf_ref(frag);
   1fe70:	4608      	mov	r0, r1
	buf->ref++;
   1fe72:	790b      	ldrb	r3, [r1, #4]
   1fe74:	3301      	adds	r3, #1
   1fe76:	710b      	strb	r3, [r1, #4]
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   1fe78:	bd10      	pop	{r4, pc}
   1fe7a:	4603      	mov	r3, r0
	while (buf->frags) {
   1fe7c:	4618      	mov	r0, r3
   1fe7e:	681b      	ldr	r3, [r3, #0]
   1fe80:	2b00      	cmp	r3, #0
   1fe82:	d1fb      	bne.n	1fe7c <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1fe84:	f7ff ffe6 	bl	1fe54 <net_buf_frag_insert>
   1fe88:	4620      	mov	r0, r4
   1fe8a:	e7f5      	b.n	1fe78 <net_buf_frag_add+0xe>

0001fe8c <net_buf_simple_add>:
	return buf->data + buf->len;
   1fe8c:	8883      	ldrh	r3, [r0, #4]
   1fe8e:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   1fe90:	4419      	add	r1, r3
   1fe92:	8081      	strh	r1, [r0, #4]
	return tail;
}
   1fe94:	18d0      	adds	r0, r2, r3
   1fe96:	4770      	bx	lr

0001fe98 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   1fe98:	b430      	push	{r4, r5}
   1fe9a:	8884      	ldrh	r4, [r0, #4]
   1fe9c:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   1fe9e:	18a3      	adds	r3, r4, r2
   1fea0:	8083      	strh	r3, [r0, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1fea2:	1928      	adds	r0, r5, r4
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
}
   1fea4:	bc30      	pop	{r4, r5}
   1fea6:	f001 bdf2 	b.w	21a8e <memcpy>

0001feaa <net_buf_simple_add_u8>:

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   1feaa:	b510      	push	{r4, lr}
   1feac:	8883      	ldrh	r3, [r0, #4]
   1feae:	6802      	ldr	r2, [r0, #0]
	buf->len += len;
   1feb0:	1c5c      	adds	r4, r3, #1
   1feb2:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   1feb4:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   1feb6:	18d0      	adds	r0, r2, r3
   1feb8:	bd10      	pop	{r4, pc}

0001feba <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   1feba:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   1febc:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   1febe:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   1fec0:	1a40      	subs	r0, r0, r1
	buf->len += len;
   1fec2:	4411      	add	r1, r2
	buf->data -= len;
   1fec4:	6018      	str	r0, [r3, #0]
	buf->len += len;
   1fec6:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   1fec8:	4770      	bx	lr

0001feca <net_buf_simple_push_u8>:
	buf->data -= len;
   1feca:	6802      	ldr	r2, [r0, #0]
   1fecc:	1e53      	subs	r3, r2, #1
   1fece:	6003      	str	r3, [r0, #0]
	buf->len += len;
   1fed0:	8883      	ldrh	r3, [r0, #4]
   1fed2:	3301      	adds	r3, #1
   1fed4:	8083      	strh	r3, [r0, #4]

void net_buf_simple_push_u8(struct net_buf_simple *buf, uint8_t val)
{
	uint8_t *data = net_buf_simple_push(buf, 1);

	*data = val;
   1fed6:	f802 1c01 	strb.w	r1, [r2, #-1]
}
   1feda:	4770      	bx	lr

0001fedc <net_buf_simple_pull>:

	sys_put_be64(val, net_buf_simple_push(buf, sizeof(val)));
}

void *net_buf_simple_pull(struct net_buf_simple *buf, size_t len)
{
   1fedc:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1fede:	8882      	ldrh	r2, [r0, #4]
   1fee0:	1a52      	subs	r2, r2, r1
   1fee2:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   1fee4:	6800      	ldr	r0, [r0, #0]
   1fee6:	4408      	add	r0, r1
   1fee8:	6018      	str	r0, [r3, #0]
}
   1feea:	4770      	bx	lr

0001feec <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   1feec:	4603      	mov	r3, r0
	void *data = buf->data;
   1feee:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1fef0:	889a      	ldrh	r2, [r3, #4]
   1fef2:	1a52      	subs	r2, r2, r1
	buf->data += len;
   1fef4:	4401      	add	r1, r0
	buf->len -= len;
   1fef6:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   1fef8:	6019      	str	r1, [r3, #0]

	return data;
}
   1fefa:	4770      	bx	lr

0001fefc <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   1fefc:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   1fefe:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1ff00:	2102      	movs	r1, #2
	val = UNALIGNED_GET((uint16_t *)buf->data);
   1ff02:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1ff04:	f7ff ffea 	bl	1fedc <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   1ff08:	4620      	mov	r0, r4
   1ff0a:	bd10      	pop	{r4, pc}

0001ff0c <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1ff0c:	6802      	ldr	r2, [r0, #0]
   1ff0e:	6880      	ldr	r0, [r0, #8]
}
   1ff10:	1a10      	subs	r0, r2, r0
   1ff12:	4770      	bx	lr

0001ff14 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1ff14:	8883      	ldrh	r3, [r0, #4]
   1ff16:	88c2      	ldrh	r2, [r0, #6]
	return buf->data - buf->__buf;
   1ff18:	6881      	ldr	r1, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1ff1a:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   1ff1c:	6803      	ldr	r3, [r0, #0]
   1ff1e:	1a5b      	subs	r3, r3, r1
}
   1ff20:	1ad0      	subs	r0, r2, r3
   1ff22:	4770      	bx	lr

0001ff24 <adc_context_on_timer_expired>:
{
   1ff24:	b410      	push	{r4}
   1ff26:	4603      	mov	r3, r0
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1ff28:	3808      	subs	r0, #8
   1ff2a:	e8d0 2fef 	ldaex	r2, [r0]
   1ff2e:	1c51      	adds	r1, r2, #1
   1ff30:	e8c0 1fe4 	stlex	r4, r1, [r0]
   1ff34:	2c00      	cmp	r4, #0
   1ff36:	d1f8      	bne.n	1ff2a <adc_context_on_timer_expired+0x6>
	if (atomic_inc(&ctx->sampling_requested) == 0) {
   1ff38:	b912      	cbnz	r2, 1ff40 <adc_context_on_timer_expired+0x1c>
}
   1ff3a:	bc10      	pop	{r4}
		adc_context_start_sampling(ctx);
   1ff3c:	f7f6 ba52 	b.w	163e4 <adc_context_start_sampling>
		ctx->status = -EBUSY;
   1ff40:	f06f 020f 	mvn.w	r2, #15
}
   1ff44:	bc10      	pop	{r4}
		ctx->status = -EBUSY;
   1ff46:	669a      	str	r2, [r3, #104]	; 0x68
}
   1ff48:	4770      	bx	lr

0001ff4a <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1ff4a:	220c      	movs	r2, #12
   1ff4c:	6903      	ldr	r3, [r0, #16]
   1ff4e:	b2c9      	uxtb	r1, r1
   1ff50:	fb01 3302 	mla	r3, r1, r2, r3
   1ff54:	6f98      	ldr	r0, [r3, #120]	; 0x78
}
   1ff56:	f000 0007 	and.w	r0, r0, #7
   1ff5a:	4770      	bx	lr

0001ff5c <set_on_state>:
	__asm__ volatile(
   1ff5c:	f04f 0320 	mov.w	r3, #32
   1ff60:	f3ef 8211 	mrs	r2, BASEPRI
   1ff64:	f383 8812 	msr	BASEPRI_MAX, r3
   1ff68:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1ff6c:	6803      	ldr	r3, [r0, #0]
   1ff6e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1ff72:	f043 0302 	orr.w	r3, r3, #2
   1ff76:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1ff78:	f382 8811 	msr	BASEPRI, r2
   1ff7c:	f3bf 8f6f 	isb	sy
}
   1ff80:	4770      	bx	lr

0001ff82 <stop>:
{
   1ff82:	b570      	push	{r4, r5, r6, lr}
   1ff84:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
   1ff86:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
   1ff88:	f04f 0420 	mov.w	r4, #32
   1ff8c:	f3ef 8511 	mrs	r5, BASEPRI
   1ff90:	f384 8812 	msr	BASEPRI_MAX, r4
   1ff94:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1ff98:	260c      	movs	r6, #12
   1ff9a:	fb06 3401 	mla	r4, r6, r1, r3
   1ff9e:	6fa4      	ldr	r4, [r4, #120]	; 0x78
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1ffa0:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   1ffa4:	d008      	beq.n	1ffb8 <stop+0x36>
   1ffa6:	42a2      	cmp	r2, r4
   1ffa8:	d006      	beq.n	1ffb8 <stop+0x36>
	__asm__ volatile(
   1ffaa:	f385 8811 	msr	BASEPRI, r5
   1ffae:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   1ffb2:	f04f 30ff 	mov.w	r0, #4294967295
}
   1ffb6:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1ffb8:	2201      	movs	r2, #1
   1ffba:	4371      	muls	r1, r6
   1ffbc:	440b      	add	r3, r1
   1ffbe:	679a      	str	r2, [r3, #120]	; 0x78
   1ffc0:	f385 8811 	msr	BASEPRI, r5
   1ffc4:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   1ffc8:	6843      	ldr	r3, [r0, #4]
   1ffca:	440b      	add	r3, r1
   1ffcc:	685b      	ldr	r3, [r3, #4]
   1ffce:	4798      	blx	r3
	return 0;
   1ffd0:	2000      	movs	r0, #0
   1ffd2:	e7f0      	b.n	1ffb6 <stop+0x34>

0001ffd4 <api_stop>:
	return stop(dev, subsys, CTX_API);
   1ffd4:	2280      	movs	r2, #128	; 0x80
   1ffd6:	f7ff bfd4 	b.w	1ff82 <stop>

0001ffda <async_start>:
{
   1ffda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ffdc:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   1ffde:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   1ffe0:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   1ffe2:	f04f 0520 	mov.w	r5, #32
   1ffe6:	f3ef 8611 	mrs	r6, BASEPRI
   1ffea:	f385 8812 	msr	BASEPRI_MAX, r5
   1ffee:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1fff2:	250c      	movs	r5, #12
   1fff4:	4369      	muls	r1, r5
   1fff6:	440c      	add	r4, r1
   1fff8:	6fa5      	ldr	r5, [r4, #120]	; 0x78
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1fffa:	f005 0c07 	and.w	ip, r5, #7
   1fffe:	f1bc 0f01 	cmp.w	ip, #1
   20002:	d10b      	bne.n	2001c <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   20004:	67a7      	str	r7, [r4, #120]	; 0x78
	__asm__ volatile(
   20006:	f386 8811 	msr	BASEPRI, r6
   2000a:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   2000e:	e9c4 231c 	strd	r2, r3, [r4, #112]	; 0x70
	 get_sub_config(dev, type)->start();
   20012:	6843      	ldr	r3, [r0, #4]
   20014:	585b      	ldr	r3, [r3, r1]
   20016:	4798      	blx	r3
	return 0;
   20018:	2000      	movs	r0, #0
}
   2001a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   2001c:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   20020:	42af      	cmp	r7, r5
   20022:	f386 8811 	msr	BASEPRI, r6
   20026:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   2002a:	bf0c      	ite	eq
   2002c:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   20030:	f04f 30ff 	movne.w	r0, #4294967295
   20034:	e7f1      	b.n	2001a <async_start+0x40>

00020036 <api_start>:
{
   20036:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   20038:	2480      	movs	r4, #128	; 0x80
   2003a:	9400      	str	r4, [sp, #0]
   2003c:	f7ff ffcd 	bl	1ffda <async_start>
}
   20040:	b002      	add	sp, #8
   20042:	bd10      	pop	{r4, pc}

00020044 <onoff_started_callback>:
{
   20044:	b410      	push	{r4}
	notify(mgr, 0);
   20046:	241c      	movs	r4, #28
	return &data->mgr[type];
   20048:	6900      	ldr	r0, [r0, #16]
   2004a:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   2004c:	fb03 0004 	mla	r0, r3, r4, r0
   20050:	2100      	movs	r1, #0
}
   20052:	bc10      	pop	{r4}
	notify(mgr, 0);
   20054:	4710      	bx	r2

00020056 <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   20056:	2003      	movs	r0, #3
   20058:	f7f8 b90a 	b.w	18270 <nrfx_clock_start>

0002005c <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
   2005c:	2002      	movs	r0, #2
   2005e:	f7f8 b907 	b.w	18270 <nrfx_clock_start>

00020062 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   20062:	2000      	movs	r0, #0
   20064:	f7f8 b904 	b.w	18270 <nrfx_clock_start>

00020068 <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   20068:	2003      	movs	r0, #3
   2006a:	f000 b97b 	b.w	20364 <nrfx_clock_stop>

0002006e <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
   2006e:	2002      	movs	r0, #2
   20070:	f000 b978 	b.w	20364 <nrfx_clock_stop>

00020074 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   20074:	2000      	movs	r0, #0
   20076:	f000 b975 	b.w	20364 <nrfx_clock_stop>

0002007a <blocking_start_callback>:
{
   2007a:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   2007c:	f7f9 bcdc 	b.w	19a38 <z_impl_k_sem_give>

00020080 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   20080:	6843      	ldr	r3, [r0, #4]
}
   20082:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   20084:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   20086:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   20088:	600b      	str	r3, [r1, #0]
}
   2008a:	4770      	bx	lr

0002008c <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2008c:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
   2008e:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   20092:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
   20094:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   20098:	6098      	str	r0, [r3, #8]
}
   2009a:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   2009c:	60d9      	str	r1, [r3, #12]
   2009e:	4770      	bx	lr

000200a0 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   200a0:	6843      	ldr	r3, [r0, #4]
}
   200a2:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   200a4:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   200a6:	6099      	str	r1, [r3, #8]
}
   200a8:	4770      	bx	lr

000200aa <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   200aa:	6843      	ldr	r3, [r0, #4]
}
   200ac:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   200ae:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   200b0:	60d9      	str	r1, [r3, #12]
}
   200b2:	4770      	bx	lr

000200b4 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   200b4:	6843      	ldr	r3, [r0, #4]
   200b6:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   200b8:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
   200ba:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   200be:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   200c0:	6090      	str	r0, [r2, #8]
}
   200c2:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   200c4:	60d3      	str	r3, [r2, #12]
   200c6:	4770      	bx	lr

000200c8 <gpio_nrfx_manage_callback>:
{
   200c8:	b510      	push	{r4, lr}
	return port->data;
   200ca:	6903      	ldr	r3, [r0, #16]
	return list->head;
   200cc:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   200ce:	b1f8      	cbz	r0, 20110 <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   200d0:	4288      	cmp	r0, r1
   200d2:	d119      	bne.n	20108 <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
   200d4:	689c      	ldr	r4, [r3, #8]
	return node->next;
   200d6:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   200d8:	42a1      	cmp	r1, r4
	list->head = node;
   200da:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   200dc:	d100      	bne.n	200e0 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   200de:	6098      	str	r0, [r3, #8]
	parent->next = child;
   200e0:	2000      	movs	r0, #0
   200e2:	6008      	str	r0, [r1, #0]
	if (set) {
   200e4:	b12a      	cbz	r2, 200f2 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
   200e6:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   200e8:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   200ea:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   200ec:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   200ee:	b902      	cbnz	r2, 200f2 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
   200f0:	6099      	str	r1, [r3, #8]
	return 0;
   200f2:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   200f4:	e010      	b.n	20118 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   200f6:	4281      	cmp	r1, r0
   200f8:	d106      	bne.n	20108 <gpio_nrfx_manage_callback+0x40>
	return node->next;
   200fa:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   200fc:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   200fe:	6898      	ldr	r0, [r3, #8]
   20100:	4281      	cmp	r1, r0
   20102:	d1ed      	bne.n	200e0 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   20104:	609c      	str	r4, [r3, #8]
}
   20106:	e7eb      	b.n	200e0 <gpio_nrfx_manage_callback+0x18>
	return node->next;
   20108:	4604      	mov	r4, r0
   2010a:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2010c:	2800      	cmp	r0, #0
   2010e:	d1f2      	bne.n	200f6 <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
   20110:	2a00      	cmp	r2, #0
   20112:	d1e8      	bne.n	200e6 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
   20114:	f06f 0015 	mvn.w	r0, #21
}
   20118:	bd10      	pop	{r4, pc}

0002011a <uarte_nrfx_config_get>:
{
   2011a:	460b      	mov	r3, r1
	struct uarte_nrfx_data *data = dev->data;
   2011c:	6902      	ldr	r2, [r0, #16]
	*cfg = data->uart_config;
   2011e:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   20122:	e883 0003 	stmia.w	r3, {r0, r1}
}
   20126:	2000      	movs	r0, #0
   20128:	4770      	bx	lr

0002012a <uarte_nrfx_err_check>:
	return config->uarte_regs;
   2012a:	6843      	ldr	r3, [r0, #4]
   2012c:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2012e:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   20132:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   20136:	4770      	bx	lr

00020138 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   20138:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   2013a:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   2013c:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2013e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   20142:	b150      	cbz	r0, 2015a <uarte_nrfx_poll_in+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20144:	2000      	movs	r0, #0
	*c = *data->rx_data;
   20146:	6952      	ldr	r2, [r2, #20]
   20148:	7812      	ldrb	r2, [r2, #0]
   2014a:	700a      	strb	r2, [r1, #0]
   2014c:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   20150:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20154:	2201      	movs	r2, #1
   20156:	601a      	str	r2, [r3, #0]
	return 0;
   20158:	4770      	bx	lr
		return -1;
   2015a:	f04f 30ff 	mov.w	r0, #4294967295
}
   2015e:	4770      	bx	lr

00020160 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   20160:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   20162:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20164:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   20168:	b940      	cbnz	r0, 2017c <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   2016a:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2016c:	079b      	lsls	r3, r3, #30
   2016e:	d406      	bmi.n	2017e <is_tx_ready.isra.0+0x1e>
   20170:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   20174:	3800      	subs	r0, #0
   20176:	bf18      	it	ne
   20178:	2001      	movne	r0, #1
   2017a:	4770      	bx	lr
   2017c:	2001      	movs	r0, #1
}
   2017e:	4770      	bx	lr

00020180 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   20180:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   20182:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   20184:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   20188:	05c9      	lsls	r1, r1, #23
   2018a:	d518      	bpl.n	201be <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2018c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   20190:	b1a9      	cbz	r1, 201be <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   20192:	f04f 0020 	mov.w	r0, #32
   20196:	f3ef 8111 	mrs	r1, BASEPRI
   2019a:	f380 8812 	msr	BASEPRI_MAX, r0
   2019e:	f3bf 8f6f 	isb	sy
   201a2:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   201a6:	b130      	cbz	r0, 201b6 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   201a8:	2000      	movs	r0, #0
   201aa:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   201ae:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   201b2:	2001      	movs	r0, #1
   201b4:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
   201b6:	f381 8811 	msr	BASEPRI, r1
   201ba:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   201be:	6852      	ldr	r2, [r2, #4]
   201c0:	06d2      	lsls	r2, r2, #27
   201c2:	d515      	bpl.n	201f0 <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
   201c4:	f04f 0120 	mov.w	r1, #32
   201c8:	f3ef 8211 	mrs	r2, BASEPRI
   201cc:	f381 8812 	msr	BASEPRI_MAX, r1
   201d0:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   201d4:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   201d8:	b111      	cbz	r1, 201e0 <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   201da:	2100      	movs	r1, #0
   201dc:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   201e0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   201e4:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   201e8:	f382 8811 	msr	BASEPRI, r2
   201ec:	f3bf 8f6f 	isb	sy
}
   201f0:	4770      	bx	lr

000201f2 <z_log_msg_static_create.constprop.0>:
   201f2:	2300      	movs	r3, #0
   201f4:	f7ec b85e 	b.w	c2b4 <z_impl_z_log_msg_static_create>

000201f8 <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   201f8:	2000      	movs	r0, #0
   201fa:	4770      	bx	lr

000201fc <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   201fc:	b538      	push	{r3, r4, r5, lr}
   201fe:	460c      	mov	r4, r1
   20200:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   20202:	f7ef ffc9 	bl	10198 <bt_is_ready>
   20206:	b128      	cbz	r0, 20214 <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   20208:	4629      	mov	r1, r5
   2020a:	4620      	mov	r0, r4
}
   2020c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   20210:	f7ef b89e 	b.w	f350 <bt_hci_le_rand>
}
   20214:	f06f 000a 	mvn.w	r0, #10
   20218:	bd38      	pop	{r3, r4, r5, pc}

0002021a <entropy_cc3xx_rng_get_entropy>:

#define CTR_DRBG_MAX_REQUEST 1024

static int entropy_cc3xx_rng_get_entropy(const struct device *dev,
					 uint8_t *buffer, uint16_t length)
{
   2021a:	4608      	mov	r0, r1
   2021c:	b508      	push	{r3, lr}
	int err = EINVAL;

#if defined(CONFIG_BUILD_WITH_TFM)
	psa_status_t status = PSA_ERROR_GENERIC_ERROR;

	status = psa_generate_random(buffer, length);
   2021e:	4611      	mov	r1, r2
   20220:	f7f7 fea2 	bl	17f68 <psa_generate_random>
	int err = EINVAL;
   20224:	2800      	cmp	r0, #0
		err = 0;
	}

	return err;
#endif /* defined(CONFIG_BUILD_WITH_TFM) */
}
   20226:	bf18      	it	ne
   20228:	2016      	movne	r0, #22
   2022a:	bd08      	pop	{r3, pc}

0002022c <entropy_cc3xx_rng_init>:

static int entropy_cc3xx_rng_init(const struct device *dev)
{
   2022c:	b508      	push	{r3, lr}
	(void)dev;

#if defined(CONFIG_BUILD_WITH_TFM)
	psa_status_t status;

	status = psa_crypto_init();
   2022e:	f000 f879 	bl	20324 <psa_crypto_init>
	if (status != PSA_SUCCESS) {
		return -EINVAL;
   20232:	2800      	cmp	r0, #0
		return -EINVAL;
	}
#endif

	return 0;
}
   20234:	bf18      	it	ne
   20236:	f06f 0015 	mvnne.w	r0, #21
   2023a:	bd08      	pop	{r3, pc}

0002023c <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   2023c:	4770      	bx	lr

0002023e <event_clear>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2023e:	2200      	movs	r2, #0
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   20240:	f100 0350 	add.w	r3, r0, #80	; 0x50
   20244:	009b      	lsls	r3, r3, #2
   20246:	b29b      	uxth	r3, r3
   20248:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2024c:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   20250:	601a      	str	r2, [r3, #0]
   20252:	681b      	ldr	r3, [r3, #0]
}
   20254:	4770      	bx	lr

00020256 <z_nrf_rtc_timer_capture_task_address_get>:
	if (chan == 0) {
   20256:	b130      	cbz	r0, 20266 <z_nrf_rtc_timer_capture_task_address_get+0x10>
	nrf_rtc_task_t task = offsetof(NRF_RTC_Type, TASKS_CAPTURE[chan]);
   20258:	3010      	adds	r0, #16
   2025a:	0080      	lsls	r0, r0, #2
    return (uint32_t)p_reg + task;
   2025c:	b2c0      	uxtb	r0, r0
   2025e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   20262:	f500 30a8 	add.w	r0, r0, #86016	; 0x15000
}
   20266:	4770      	bx	lr

00020268 <z_nrf_rtc_timer_set>:
	return compare_set(chan, target_time, handler, user_data);
   20268:	f7f7 ba62 	b.w	17730 <compare_set>

0002026c <sys_clock_cycle_get_32>:
{
   2026c:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   2026e:	f7f7 fa3d 	bl	176ec <z_nrf_rtc_timer_read>
}
   20272:	bd08      	pop	{r3, pc}

00020274 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   20274:	b570      	push	{r4, r5, r6, lr}
	*state = &config->states[0];
	while (*state <= &config->states[config->state_cnt - 1U]) {
   20276:	f06f 4660 	mvn.w	r6, #3758096384	; 0xe0000000
	*state = &config->states[0];
   2027a:	6843      	ldr	r3, [r0, #4]
   2027c:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   2027e:	7a05      	ldrb	r5, [r0, #8]
   20280:	6844      	ldr	r4, [r0, #4]
   20282:	4435      	add	r5, r6
   20284:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   20288:	42a3      	cmp	r3, r4
   2028a:	d902      	bls.n	20292 <pinctrl_lookup_state+0x1e>
		}

		(*state)++;
	}

	return -ENOENT;
   2028c:	f06f 0001 	mvn.w	r0, #1
}
   20290:	bd70      	pop	{r4, r5, r6, pc}
		if (id == (*state)->id) {
   20292:	795c      	ldrb	r4, [r3, #5]
   20294:	428c      	cmp	r4, r1
   20296:	d001      	beq.n	2029c <pinctrl_lookup_state+0x28>
		(*state)++;
   20298:	3308      	adds	r3, #8
   2029a:	e7ef      	b.n	2027c <pinctrl_lookup_state+0x8>
			return 0;
   2029c:	2000      	movs	r0, #0
   2029e:	e7f7      	b.n	20290 <pinctrl_lookup_state+0x1c>

000202a0 <mbox_nrf_register_callback>:
{
   202a0:	b510      	push	{r4, lr}
	struct mbox_nrf_data *data = dev->data;
   202a2:	6900      	ldr	r0, [r0, #16]
	if (channel >= IPC_CONF_NUM) {
   202a4:	290f      	cmp	r1, #15
	data->cb[channel] = cb;
   202a6:	bf9f      	itttt	ls
   202a8:	eb00 0481 	addls.w	r4, r0, r1, lsl #2
   202ac:	f840 2021 	strls.w	r2, [r0, r1, lsl #2]
	data->user_data[channel] = user_data;
   202b0:	6423      	strls	r3, [r4, #64]	; 0x40
	return 0;
   202b2:	2000      	movls	r0, #0
		return -EINVAL;
   202b4:	bf88      	it	hi
   202b6:	f06f 0015 	mvnhi.w	r0, #21
}
   202ba:	bd10      	pop	{r4, pc}

000202bc <mbox_nrf_mtu_get>:
}
   202bc:	2000      	movs	r0, #0
   202be:	4770      	bx	lr

000202c0 <mbox_nrf_max_channels_get>:
}
   202c0:	2010      	movs	r0, #16
   202c2:	4770      	bx	lr

000202c4 <ns_interface_init>:

	__ASSERT(tfm_ns_interface_init() == TFM_SUCCESS,
		"TF-M NS interface init failed");

	return 0;
}
   202c4:	2000      	movs	r0, #0
   202c6:	4770      	bx	lr

000202c8 <tfm_platform_ioctl>:
enum tfm_platform_err_t
tfm_platform_ioctl(tfm_platform_ioctl_req_t request,
                   psa_invec *input, psa_outvec *output)
{
    tfm_platform_ioctl_req_t req = request;
    struct psa_invec in_vec[2] = { {0} };
   202c8:	2300      	movs	r3, #0
{
   202ca:	b570      	push	{r4, r5, r6, lr}
   202cc:	b088      	sub	sp, #32
    struct psa_invec in_vec[2] = { {0} };
   202ce:	e9cd 3306 	strd	r3, r3, [sp, #24]
    size_t inlen, outlen;
    psa_status_t status = PSA_ERROR_CONNECTION_REFUSED;
    psa_handle_t handle = PSA_NULL_HANDLE;

    in_vec[0].base = &req;
   202d2:	ab03      	add	r3, sp, #12
   202d4:	9304      	str	r3, [sp, #16]
    in_vec[0].len = sizeof(req);
   202d6:	2304      	movs	r3, #4
{
   202d8:	4614      	mov	r4, r2
    tfm_platform_ioctl_req_t req = request;
   202da:	9003      	str	r0, [sp, #12]
    in_vec[0].len = sizeof(req);
   202dc:	9305      	str	r3, [sp, #20]
    if (input != NULL) {
   202de:	b169      	cbz	r1, 202fc <tfm_platform_ioctl+0x34>
        in_vec[1].base = input->base;
        in_vec[1].len = input->len;
        inlen = 2;
   202e0:	2602      	movs	r6, #2
        in_vec[1].base = input->base;
   202e2:	680b      	ldr	r3, [r1, #0]
   202e4:	9306      	str	r3, [sp, #24]
        in_vec[1].len = input->len;
   202e6:	684b      	ldr	r3, [r1, #4]
   202e8:	9307      	str	r3, [sp, #28]
        outlen = 1;
    } else {
        outlen = 0;
    }

    handle = psa_connect(TFM_SP_PLATFORM_IOCTL_SID,
   202ea:	2101      	movs	r1, #1
   202ec:	2041      	movs	r0, #65	; 0x41
   202ee:	f7f7 fe79 	bl	17fe4 <psa_connect>
                         TFM_SP_PLATFORM_IOCTL_VERSION);
    if (handle <= 0) {
   202f2:	1e05      	subs	r5, r0, #0
   202f4:	dc04      	bgt.n	20300 <tfm_platform_ioctl+0x38>
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
   202f6:	2001      	movs	r0, #1
    if (status < PSA_SUCCESS) {
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
    } else {
        return (enum tfm_platform_err_t) status;
    }
}
   202f8:	b008      	add	sp, #32
   202fa:	bd70      	pop	{r4, r5, r6, pc}
        inlen = 1;
   202fc:	2601      	movs	r6, #1
   202fe:	e7f4      	b.n	202ea <tfm_platform_ioctl+0x22>
    if (output != NULL) {
   20300:	1e23      	subs	r3, r4, #0
   20302:	bf18      	it	ne
   20304:	2301      	movne	r3, #1
    status = psa_call(handle, PSA_IPC_CALL,
   20306:	2100      	movs	r1, #0
   20308:	e9cd 4300 	strd	r4, r3, [sp]
   2030c:	aa04      	add	r2, sp, #16
   2030e:	4633      	mov	r3, r6
   20310:	f7f7 fe4c 	bl	17fac <psa_call>
   20314:	4604      	mov	r4, r0
    psa_close(handle);
   20316:	4628      	mov	r0, r5
   20318:	f7f7 fe72 	bl	18000 <psa_close>
    if (status < PSA_SUCCESS) {
   2031c:	2c00      	cmp	r4, #0
   2031e:	dbea      	blt.n	202f6 <tfm_platform_ioctl+0x2e>
        return (enum tfm_platform_err_t) status;
   20320:	4620      	mov	r0, r4
   20322:	e7e9      	b.n	202f8 <tfm_platform_ioctl+0x30>

00020324 <psa_crypto_init>:
}
   20324:	2000      	movs	r0, #0
   20326:	4770      	bx	lr

00020328 <tfm_platform_gpio_pin_mcu_select>:
	psa_invec in_vec;
	psa_outvec out_vec;
	struct tfm_gpio_service_args args;
	struct tfm_gpio_service_out out;

	args.type = TFM_GPIO_SERVICE_TYPE_PIN_MCU_SELECT;
   20328:	2300      	movs	r3, #0
{
   2032a:	b510      	push	{r4, lr}
   2032c:	b088      	sub	sp, #32
	args.mcu_select.pin_number = pin_number;
   2032e:	e9cd 3005 	strd	r3, r0, [sp, #20]
	args.mcu_select.mcu = mcu;

	in_vec.base = (const void *)&args;
   20332:	ab05      	add	r3, sp, #20
   20334:	9301      	str	r3, [sp, #4]
	in_vec.len = sizeof(args);
   20336:	230c      	movs	r3, #12
   20338:	9302      	str	r3, [sp, #8]

	out_vec.base = (void *)&out;
	out_vec.len = sizeof(out);
   2033a:	2304      	movs	r3, #4
{
   2033c:	4614      	mov	r4, r2
	args.mcu_select.mcu = mcu;
   2033e:	9107      	str	r1, [sp, #28]

	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_GPIO_SERVICE, &in_vec,
   20340:	aa03      	add	r2, sp, #12
   20342:	eb0d 0103 	add.w	r1, sp, r3
   20346:	2001      	movs	r0, #1
	out_vec.len = sizeof(out);
   20348:	9304      	str	r3, [sp, #16]
	out_vec.base = (void *)&out;
   2034a:	f8cd d00c 	str.w	sp, [sp, #12]
	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_GPIO_SERVICE, &in_vec,
   2034e:	f7ff ffbb 	bl	202c8 <tfm_platform_ioctl>
				 &out_vec);

	*result = out.result;
   20352:	9b00      	ldr	r3, [sp, #0]
   20354:	6023      	str	r3, [r4, #0]

	return ret;
#else
	return TFM_PLATFORM_ERR_NOT_SUPPORTED;
#endif
}
   20356:	b008      	add	sp, #32
   20358:	bd10      	pop	{r4, pc}

0002035a <SystemInit>:
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
   2035a:	f7f7 be5f 	b.w	1801c <SystemCoreClockUpdate>

0002035e <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   2035e:	4700      	bx	r0

00020360 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   20360:	f001 b9c5 	b.w	216ee <z_impl_k_busy_wait>

00020364 <nrfx_clock_stop>:
    clock_stop(domain);
   20364:	f7f7 bea2 	b.w	180ac <clock_stop>

00020368 <nrf_gpio_reconfigure>:
{
   20368:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2036a:	4616      	mov	r6, r2
   2036c:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
   20370:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20372:	a801      	add	r0, sp, #4
{
   20374:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20376:	f7f8 f841 	bl	183fc <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2037a:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2037c:	f1b6 0c00 	subs.w	ip, r6, #0
   20380:	bf18      	it	ne
   20382:	f04f 0c01 	movne.w	ip, #1
   20386:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2038a:	1e0b      	subs	r3, r1, #0
   2038c:	bf18      	it	ne
   2038e:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   20390:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   20392:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   20396:	bf14      	ite	ne
   20398:	f04f 0c0c 	movne.w	ip, #12
   2039c:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   203a0:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   203a2:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   203a6:	bf14      	ite	ne
   203a8:	f44f 6c70 	movne.w	ip, #3840	; 0xf00
   203ac:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   203b0:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   203b2:	ea43 030c 	orr.w	r3, r3, ip
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   203b6:	bf14      	ite	ne
   203b8:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   203bc:	f04f 0c00 	moveq.w	ip, #0
    uint32_t cnf = reg->PIN_CNF[pin_number];
   203c0:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   203c4:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   203c8:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   203cc:	b101      	cbz	r1, 203d0 <nrf_gpio_reconfigure+0x68>
   203ce:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   203d0:	b10e      	cbz	r6, 203d6 <nrf_gpio_reconfigure+0x6e>
   203d2:	7836      	ldrb	r6, [r6, #0]
   203d4:	0076      	lsls	r6, r6, #1
   203d6:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   203d8:	b10d      	cbz	r5, 203de <nrf_gpio_reconfigure+0x76>
   203da:	782d      	ldrb	r5, [r5, #0]
   203dc:	00ad      	lsls	r5, r5, #2
   203de:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   203e0:	b10c      	cbz	r4, 203e6 <nrf_gpio_reconfigure+0x7e>
   203e2:	7824      	ldrb	r4, [r4, #0]
   203e4:	0224      	lsls	r4, r4, #8
   203e6:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   203e8:	b10f      	cbz	r7, 203ee <nrf_gpio_reconfigure+0x86>
   203ea:	783f      	ldrb	r7, [r7, #0]
   203ec:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   203ee:	430c      	orrs	r4, r1
   203f0:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
   203f2:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
}
   203f6:	b003      	add	sp, #12
   203f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000203fa <nrf_gpio_cfg_sense_set>:
{
   203fa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   203fc:	f10d 030f 	add.w	r3, sp, #15
   20400:	9301      	str	r3, [sp, #4]
   20402:	2300      	movs	r3, #0
{
   20404:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   20408:	461a      	mov	r2, r3
   2040a:	4619      	mov	r1, r3
   2040c:	9300      	str	r3, [sp, #0]
   2040e:	f7ff ffab 	bl	20368 <nrf_gpio_reconfigure>
}
   20412:	b005      	add	sp, #20
   20414:	f85d fb04 	ldr.w	pc, [sp], #4

00020418 <metal_device_open>:
{
   20418:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2041a:	460c      	mov	r4, r1
   2041c:	4615      	mov	r5, r2
	if (!bus_name || !strlen(bus_name) ||
   2041e:	4606      	mov	r6, r0
   20420:	b918      	cbnz	r0, 2042a <metal_device_open+0x12>
		return -EINVAL;
   20422:	f06f 0015 	mvn.w	r0, #21
}
   20426:	b002      	add	sp, #8
   20428:	bd70      	pop	{r4, r5, r6, pc}
	if (!bus_name || !strlen(bus_name) ||
   2042a:	f7e8 ff8f 	bl	934c <strlen>
   2042e:	2800      	cmp	r0, #0
   20430:	d0f7      	beq.n	20422 <metal_device_open+0xa>
   20432:	2c00      	cmp	r4, #0
   20434:	d0f5      	beq.n	20422 <metal_device_open+0xa>
	    !dev_name || !strlen(dev_name) ||
   20436:	4620      	mov	r0, r4
   20438:	f7e8 ff88 	bl	934c <strlen>
   2043c:	2800      	cmp	r0, #0
   2043e:	d0f0      	beq.n	20422 <metal_device_open+0xa>
   20440:	2d00      	cmp	r5, #0
   20442:	d0ee      	beq.n	20422 <metal_device_open+0xa>
	error = metal_bus_find(bus_name, &bus);
   20444:	4630      	mov	r0, r6
   20446:	a901      	add	r1, sp, #4
   20448:	f7f8 fbe8 	bl	18c1c <metal_bus_find>
	if (error)
   2044c:	2800      	cmp	r0, #0
   2044e:	d1ea      	bne.n	20426 <metal_device_open+0xe>
	if (!bus->ops.dev_open)
   20450:	9801      	ldr	r0, [sp, #4]
   20452:	6883      	ldr	r3, [r0, #8]
   20454:	b12b      	cbz	r3, 20462 <metal_device_open+0x4a>
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   20456:	462a      	mov	r2, r5
   20458:	4621      	mov	r1, r4
}
   2045a:	b002      	add	sp, #8
   2045c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   20460:	4718      	bx	r3
		return -ENODEV;
   20462:	f06f 0012 	mvn.w	r0, #18
   20466:	e7de      	b.n	20426 <metal_device_open+0xe>

00020468 <metal_device_close>:
{
   20468:	4601      	mov	r1, r0
	if (device->bus->ops.dev_close)
   2046a:	6840      	ldr	r0, [r0, #4]
   2046c:	68c3      	ldr	r3, [r0, #12]
   2046e:	b103      	cbz	r3, 20472 <metal_device_close+0xa>
		device->bus->ops.dev_close(device->bus, device);
   20470:	4718      	bx	r3
}
   20472:	4770      	bx	lr

00020474 <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned int page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
   20474:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20478:	b089      	sub	sp, #36	; 0x24
   2047a:	9e10      	ldr	r6, [sp, #64]	; 0x40
   2047c:	4604      	mov	r4, r0
   2047e:	4689      	mov	r9, r1
   20480:	4690      	mov	r8, r2
	const struct metal_io_ops nops = {
   20482:	2100      	movs	r1, #0
   20484:	2220      	movs	r2, #32
   20486:	4668      	mov	r0, sp
{
   20488:	461f      	mov	r7, r3
   2048a:	9d12      	ldr	r5, [sp, #72]	; 0x48
	const struct metal_io_ops nops = {
   2048c:	f001 fb0c 	bl	21aa8 <memset>

	io->virt = virt;
	io->physmap = physmap;
	io->size = size;
	io->page_shift = page_shift;
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
   20490:	2e1f      	cmp	r6, #31
		/* avoid overflow */
		io->page_mask = -1UL;
	else
		io->page_mask = (1UL << page_shift) - 1UL;
   20492:	bf97      	itett	ls
   20494:	2301      	movls	r3, #1
		io->page_mask = -1UL;
   20496:	f04f 33ff 	movhi.w	r3, #4294967295
		io->page_mask = (1UL << page_shift) - 1UL;
   2049a:	40b3      	lslls	r3, r6
   2049c:	f103 33ff 	addls.w	r3, r3, #4294967295
   204a0:	6123      	str	r3, [r4, #16]
	io->mem_flags = mem_flags;
   204a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
	io->physmap = physmap;
   204a4:	e9c4 9800 	strd	r9, r8, [r4]
	io->page_shift = page_shift;
   204a8:	e9c4 7602 	strd	r7, r6, [r4, #8]
	io->mem_flags = mem_flags;
   204ac:	6163      	str	r3, [r4, #20]
	io->ops = ops ? *ops : nops;
   204ae:	3418      	adds	r4, #24
   204b0:	b145      	cbz	r5, 204c4 <metal_io_init+0x50>
   204b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   204b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   204b6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   204ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	metal_sys_io_mem_map(io);
}
   204be:	b009      	add	sp, #36	; 0x24
   204c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	io->ops = ops ? *ops : nops;
   204c4:	466d      	mov	r5, sp
   204c6:	e7f4      	b.n	204b2 <metal_io_init+0x3e>

000204c8 <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
   204c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   204ca:	6804      	ldr	r4, [r0, #0]
		: NULL);
   204cc:	1c66      	adds	r6, r4, #1
   204ce:	d031      	beq.n	20534 <metal_io_block_read+0x6c>
	return (io->virt != METAL_BAD_VA && offset < io->size
   204d0:	6885      	ldr	r5, [r0, #8]
   204d2:	42a9      	cmp	r1, r5
   204d4:	d22e      	bcs.n	20534 <metal_io_block_read+0x6c>
	unsigned char *ptr = metal_io_virt(io, offset);
	unsigned char *dest = dst;
	int retlen;

	if (!ptr)
   204d6:	1864      	adds	r4, r4, r1
   204d8:	d02c      	beq.n	20534 <metal_io_block_read+0x6c>
		return -ERANGE;
	if ((offset + len) > io->size)
   204da:	185e      	adds	r6, r3, r1
   204dc:	42ae      	cmp	r6, r5
		len = io->size - offset;
   204de:	bf88      	it	hi
   204e0:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_read) {
   204e2:	6a05      	ldr	r5, [r0, #32]
   204e4:	b135      	cbz	r5, 204f4 <metal_io_block_read+0x2c>
		retlen = (*io->ops.block_read)(
   204e6:	9300      	str	r3, [sp, #0]
   204e8:	2305      	movs	r3, #5
   204ea:	47a8      	blx	r5
   204ec:	4603      	mov	r3, r0
		for (; len != 0; dest++, ptr++, len--)
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
	}
	return retlen;
}
   204ee:	4618      	mov	r0, r3
   204f0:	b002      	add	sp, #8
   204f2:	bd70      	pop	{r4, r5, r6, pc}
		atomic_thread_fence(memory_order_seq_cst);
   204f4:	f3bf 8f5b 	dmb	ish
		while ( len && (
   204f8:	4619      	mov	r1, r3
   204fa:	1aa4      	subs	r4, r4, r2
   204fc:	1910      	adds	r0, r2, r4
   204fe:	b119      	cbz	r1, 20508 <metal_io_block_read+0x40>
			((uintptr_t)dest % sizeof(int)) ||
   20500:	ea40 0502 	orr.w	r5, r0, r2
   20504:	07ad      	lsls	r5, r5, #30
   20506:	d10a      	bne.n	2051e <metal_io_block_read+0x56>
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   20508:	2903      	cmp	r1, #3
   2050a:	dc0d      	bgt.n	20528 <metal_io_block_read+0x60>
   2050c:	3801      	subs	r0, #1
   2050e:	4411      	add	r1, r2
		for (; len != 0; dest++, ptr++, len--)
   20510:	428a      	cmp	r2, r1
   20512:	d0ec      	beq.n	204ee <metal_io_block_read+0x26>
				*(const unsigned char *)ptr;
   20514:	f810 4f01 	ldrb.w	r4, [r0, #1]!
			*(unsigned char *)dest =
   20518:	f802 4b01 	strb.w	r4, [r2], #1
		for (; len != 0; dest++, ptr++, len--)
   2051c:	e7f8      	b.n	20510 <metal_io_block_read+0x48>
				*(const unsigned char *)ptr;
   2051e:	7800      	ldrb	r0, [r0, #0]
			len--;
   20520:	3901      	subs	r1, #1
			*(unsigned char *)dest =
   20522:	f802 0b01 	strb.w	r0, [r2], #1
			len--;
   20526:	e7e9      	b.n	204fc <metal_io_block_read+0x34>
			*(unsigned int *)dest = *(const unsigned int *)ptr;
   20528:	f850 4b04 	ldr.w	r4, [r0], #4
   2052c:	3904      	subs	r1, #4
   2052e:	f842 4b04 	str.w	r4, [r2], #4
					ptr += sizeof(int),
   20532:	e7e9      	b.n	20508 <metal_io_block_read+0x40>
		return -ERANGE;
   20534:	f06f 0321 	mvn.w	r3, #33	; 0x21
   20538:	e7d9      	b.n	204ee <metal_io_block_read+0x26>

0002053a <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
   2053a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2053c:	6804      	ldr	r4, [r0, #0]
		: NULL);
   2053e:	1c65      	adds	r5, r4, #1
   20540:	d032      	beq.n	205a8 <metal_io_block_write+0x6e>
	return (io->virt != METAL_BAD_VA && offset < io->size
   20542:	6885      	ldr	r5, [r0, #8]
   20544:	42a9      	cmp	r1, r5
   20546:	d22f      	bcs.n	205a8 <metal_io_block_write+0x6e>
	unsigned char *ptr = metal_io_virt(io, offset);
	const unsigned char *source = src;
	int retlen;

	if (!ptr)
   20548:	1864      	adds	r4, r4, r1
   2054a:	d02d      	beq.n	205a8 <metal_io_block_write+0x6e>
		return -ERANGE;
	if ((offset + len) > io->size)
   2054c:	185e      	adds	r6, r3, r1
   2054e:	42ae      	cmp	r6, r5
		len = io->size - offset;
   20550:	bf88      	it	hi
   20552:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_write) {
   20554:	6a45      	ldr	r5, [r0, #36]	; 0x24
   20556:	b1cd      	cbz	r5, 2058c <metal_io_block_write+0x52>
		retlen = (*io->ops.block_write)(
   20558:	9300      	str	r3, [sp, #0]
   2055a:	2305      	movs	r3, #5
   2055c:	47a8      	blx	r5
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
}
   2055e:	b002      	add	sp, #8
   20560:	bd70      	pop	{r4, r5, r6, pc}
				*(const unsigned char *)source;
   20562:	f812 5b01 	ldrb.w	r5, [r2], #1
			len--;
   20566:	3901      	subs	r1, #1
			*(unsigned char *)ptr =
   20568:	7005      	strb	r5, [r0, #0]
			len--;
   2056a:	4615      	mov	r5, r2
   2056c:	18a0      	adds	r0, r4, r2
		while ( len && (
   2056e:	b119      	cbz	r1, 20578 <metal_io_block_write+0x3e>
			((uintptr_t)ptr % sizeof(int)) ||
   20570:	ea40 0602 	orr.w	r6, r0, r2
   20574:	07b6      	lsls	r6, r6, #30
   20576:	d1f4      	bne.n	20562 <metal_io_block_write+0x28>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   20578:	2903      	cmp	r1, #3
   2057a:	dc0a      	bgt.n	20592 <metal_io_block_write+0x58>
   2057c:	3d01      	subs	r5, #1
   2057e:	4401      	add	r1, r0
		for (; len != 0; ptr++, source++, len--)
   20580:	4288      	cmp	r0, r1
   20582:	d10c      	bne.n	2059e <metal_io_block_write+0x64>
		atomic_thread_fence(memory_order_seq_cst);
   20584:	f3bf 8f5b 	dmb	ish
	retlen = len;
   20588:	4618      	mov	r0, r3
   2058a:	e7e8      	b.n	2055e <metal_io_block_write+0x24>
   2058c:	4619      	mov	r1, r3
   2058e:	1aa4      	subs	r4, r4, r2
   20590:	e7eb      	b.n	2056a <metal_io_block_write+0x30>
			*(unsigned int *)ptr = *(const unsigned int *)source;
   20592:	f855 2b04 	ldr.w	r2, [r5], #4
   20596:	3904      	subs	r1, #4
   20598:	f840 2b04 	str.w	r2, [r0], #4
					source += sizeof(int),
   2059c:	e7ec      	b.n	20578 <metal_io_block_write+0x3e>
				*(const unsigned char *)source;
   2059e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
			*(unsigned char *)ptr =
   205a2:	f800 2b01 	strb.w	r2, [r0], #1
		for (; len != 0; ptr++, source++, len--)
   205a6:	e7eb      	b.n	20580 <metal_io_block_write+0x46>
		return -ERANGE;
   205a8:	f06f 0021 	mvn.w	r0, #33	; 0x21
   205ac:	e7d7      	b.n	2055e <metal_io_block_write+0x24>

000205ae <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
   205ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
   205b0:	6804      	ldr	r4, [r0, #0]
   205b2:	461d      	mov	r5, r3
		: NULL);
   205b4:	1c66      	adds	r6, r4, #1
   205b6:	d02b      	beq.n	20610 <metal_io_block_set+0x62>
	return (io->virt != METAL_BAD_VA && offset < io->size
   205b8:	6883      	ldr	r3, [r0, #8]
   205ba:	4299      	cmp	r1, r3
   205bc:	d228      	bcs.n	20610 <metal_io_block_set+0x62>
	unsigned char *ptr = metal_io_virt(io, offset);
	int retlen = len;

	if (!ptr)
   205be:	1864      	adds	r4, r4, r1
   205c0:	d026      	beq.n	20610 <metal_io_block_set+0x62>
		return -ERANGE;
	if ((offset + len) > io->size)
   205c2:	186e      	adds	r6, r5, r1
   205c4:	429e      	cmp	r6, r3
		len = io->size - offset;
	retlen = len;
	if (io->ops.block_set) {
   205c6:	6a86      	ldr	r6, [r0, #40]	; 0x28
		len = io->size - offset;
   205c8:	bf88      	it	hi
   205ca:	1a5d      	subhi	r5, r3, r1
	if (io->ops.block_set) {
   205cc:	b12e      	cbz	r6, 205da <metal_io_block_set+0x2c>
		(*io->ops.block_set)(
   205ce:	2305      	movs	r3, #5
   205d0:	9500      	str	r5, [sp, #0]
   205d2:	47b0      	blx	r6
			*(unsigned int *)ptr = cint;
		for (; len != 0; ptr++, len--)
			*(unsigned char *)ptr = (unsigned char) value;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
   205d4:	4628      	mov	r0, r5
}
   205d6:	b002      	add	sp, #8
   205d8:	bd70      	pop	{r4, r5, r6, pc}
		: NULL);
   205da:	4621      	mov	r1, r4
   205dc:	462b      	mov	r3, r5
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   205de:	b94b      	cbnz	r3, 205f4 <metal_io_block_set+0x46>
   205e0:	440b      	add	r3, r1
		for (; len != 0; ptr++, len--)
   205e2:	4299      	cmp	r1, r3
   205e4:	d111      	bne.n	2060a <metal_io_block_set+0x5c>
		atomic_thread_fence(memory_order_seq_cst);
   205e6:	f3bf 8f5b 	dmb	ish
   205ea:	e7f3      	b.n	205d4 <metal_io_block_set+0x26>
			*(unsigned char *)ptr = (unsigned char) value;
   205ec:	f801 2b01 	strb.w	r2, [r1], #1
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   205f0:	3b01      	subs	r3, #1
   205f2:	e7f4      	b.n	205de <metal_io_block_set+0x30>
   205f4:	0788      	lsls	r0, r1, #30
   205f6:	d1f9      	bne.n	205ec <metal_io_block_set+0x3e>
			cint |= ((unsigned int)value << (CHAR_BIT * i));
   205f8:	f04f 3001 	mov.w	r0, #16843009	; 0x1010101
   205fc:	4350      	muls	r0, r2
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   205fe:	2b03      	cmp	r3, #3
   20600:	ddee      	ble.n	205e0 <metal_io_block_set+0x32>
			*(unsigned int *)ptr = cint;
   20602:	f841 0b04 	str.w	r0, [r1], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   20606:	3b04      	subs	r3, #4
   20608:	e7f9      	b.n	205fe <metal_io_block_set+0x50>
			*(unsigned char *)ptr = (unsigned char) value;
   2060a:	f801 2b01 	strb.w	r2, [r1], #1
		for (; len != 0; ptr++, len--)
   2060e:	e7e8      	b.n	205e2 <metal_io_block_set+0x34>
		return -ERANGE;
   20610:	f06f 0021 	mvn.w	r0, #33	; 0x21
   20614:	e7df      	b.n	205d6 <metal_io_block_set+0x28>

00020616 <metal_generic_dev_sys_open>:

	/* Since Zephyr runs bare-metal there is no mapping that needs to be
	 * done of IO regions
	 */
	return 0;
}
   20616:	2000      	movs	r0, #0
   20618:	4770      	bx	lr

0002061a <metal_io_phys>:
 * @return	METAL_BAD_PHYS if offset is out of range, or physical address
 *		of offset.
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
   2061a:	b410      	push	{r4}
	if (!io->ops.offset_to_phys) {
   2061c:	6b04      	ldr	r4, [r0, #48]	; 0x30
{
   2061e:	4602      	mov	r2, r0
   20620:	460b      	mov	r3, r1
	if (!io->ops.offset_to_phys) {
   20622:	b984      	cbnz	r4, 20646 <metal_io_phys+0x2c>
		unsigned long page = (io->page_shift >=
   20624:	68c1      	ldr	r1, [r0, #12]
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
   20626:	291f      	cmp	r1, #31
   20628:	bf98      	it	ls
   2062a:	fa23 f401 	lsrls.w	r4, r3, r1
		return (io->physmap && offset < io->size
   2062e:	6841      	ldr	r1, [r0, #4]
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
   20630:	b161      	cbz	r1, 2064c <metal_io_phys+0x32>
		return (io->physmap && offset < io->size
   20632:	6880      	ldr	r0, [r0, #8]
   20634:	4283      	cmp	r3, r0
   20636:	d209      	bcs.n	2064c <metal_io_phys+0x32>
			? io->physmap[page] + (offset & io->page_mask)
   20638:	6910      	ldr	r0, [r2, #16]
   2063a:	4018      	ands	r0, r3
			: METAL_BAD_PHYS);
   2063c:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
   20640:	4418      	add	r0, r3
	}

	return io->ops.offset_to_phys(io, offset);
}
   20642:	bc10      	pop	{r4}
   20644:	4770      	bx	lr
	return io->ops.offset_to_phys(io, offset);
   20646:	4623      	mov	r3, r4
}
   20648:	bc10      	pop	{r4}
	return io->ops.offset_to_phys(io, offset);
   2064a:	4718      	bx	r3
			: METAL_BAD_PHYS);
   2064c:	f04f 30ff 	mov.w	r0, #4294967295
   20650:	e7f7      	b.n	20642 <metal_io_phys+0x28>

00020652 <virtqueue_create>:
{
   20652:	b530      	push	{r4, r5, lr}
   20654:	9c05      	ldr	r4, [sp, #20]
		vq->vq_name = name;
   20656:	e9c4 0200 	strd	r0, r2, [r4]
		vq->callback = callback;
   2065a:	9a03      	ldr	r2, [sp, #12]
		vq->vq_queue_index = id;
   2065c:	8121      	strh	r1, [r4, #8]
		vq->vq_nentries = ring->num_descs;
   2065e:	8919      	ldrh	r1, [r3, #8]
		vq->callback = callback;
   20660:	60e2      	str	r2, [r4, #12]
		vq->notify = notify;
   20662:	9a04      	ldr	r2, [sp, #16]
		vq->vq_nentries = ring->num_descs;
   20664:	8161      	strh	r1, [r4, #10]
		vq->vq_free_cnt = vq->vq_nentries;
   20666:	84a1      	strh	r1, [r4, #36]	; 0x24
		vq->notify = notify;
   20668:	6122      	str	r2, [r4, #16]
		vq_ring_init(vq, ring->vaddr, ring->align);
   2066a:	e9d3 2500 	ldrd	r2, r5, [r3]
static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
	vr->num = num;
	vr->desc = (struct vring_desc *)p;
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   2066e:	eb02 1301 	add.w	r3, r2, r1, lsl #4
	vr->desc = (struct vring_desc *)p;
   20672:	e9c4 1205 	strd	r1, r2, [r4, #20]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   20676:	1c8a      	adds	r2, r1, #2
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   20678:	61e3      	str	r3, [r4, #28]
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   2067a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	      align - 1) & ~(align - 1));
   2067e:	1c6a      	adds	r2, r5, #1
   20680:	4413      	add	r3, r2
   20682:	426d      	negs	r5, r5
   20684:	402b      	ands	r3, r5
	vr->used = (struct vring_used *)
   20686:	6223      	str	r3, [r4, #32]
	vr = &vq->vq_ring;

	vring_init(vr, size, ring_mem, alignment);

#ifndef VIRTIO_DEVICE_ONLY
	if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   20688:	6983      	ldr	r3, [r0, #24]
   2068a:	b953      	cbnz	r3, 206a2 <virtqueue_create+0x50>
		int i;

		for (i = 0; i < size - 1; i++)
   2068c:	3901      	subs	r1, #1
			vr->desc[i].next = i + 1;
   2068e:	69a2      	ldr	r2, [r4, #24]
		for (i = 0; i < size - 1; i++)
   20690:	428b      	cmp	r3, r1
			vr->desc[i].next = i + 1;
   20692:	eb02 1203 	add.w	r2, r2, r3, lsl #4
		for (i = 0; i < size - 1; i++)
   20696:	db06      	blt.n	206a6 <virtqueue_create+0x54>
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
   20698:	2300      	movs	r3, #0
   2069a:	7393      	strb	r3, [r2, #14]
   2069c:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   206a0:	73d3      	strb	r3, [r2, #15]
}
   206a2:	2000      	movs	r0, #0
   206a4:	bd30      	pop	{r4, r5, pc}
			vr->desc[i].next = i + 1;
   206a6:	3301      	adds	r3, #1
   206a8:	81d3      	strh	r3, [r2, #14]
		for (i = 0; i < size - 1; i++)
   206aa:	e7f0      	b.n	2068e <virtqueue_create+0x3c>

000206ac <virtqueue_add_buffer>:
{
   206ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		head_idx = vq->vq_desc_head_idx;
   206b0:	f8b0 a02c 	ldrh.w	sl, [r0, #44]	; 0x2c
{
   206b4:	4604      	mov	r4, r0
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   206b6:	4655      	mov	r5, sl
   206b8:	2600      	movs	r6, #0
{
   206ba:	b085      	sub	sp, #20
	needed = readable + writable;
   206bc:	eb02 0803 	add.w	r8, r2, r3
{
   206c0:	4691      	mov	r9, r2
		dxp->cookie = cookie;
   206c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   206c4:	eb00 03ca 	add.w	r3, r0, sl, lsl #3
		dxp->ndescs = needed;
   206c8:	fa1f fb88 	uxth.w	fp, r8
		dxp->cookie = cookie;
   206cc:	635a      	str	r2, [r3, #52]	; 0x34
		dxp->ndescs = needed;
   206ce:	f8a3 b038 	strh.w	fp, [r3, #56]	; 0x38
		if (i < needed - 1)
   206d2:	f108 32ff 	add.w	r2, r8, #4294967295
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
   206d6:	6983      	ldr	r3, [r0, #24]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   206d8:	1d0f      	adds	r7, r1, #4
		if (i < needed - 1)
   206da:	9201      	str	r2, [sp, #4]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   206dc:	45b0      	cmp	r8, r6
   206de:	dc1a      	bgt.n	20716 <virtqueue_add_buffer+0x6a>
		vq->vq_free_cnt -= needed;
   206e0:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
		vq->vq_desc_head_idx = idx;
   206e2:	85a5      	strh	r5, [r4, #44]	; 0x2c
		vq->vq_free_cnt -= needed;
   206e4:	eba3 030b 	sub.w	r3, r3, fp
   206e8:	84a3      	strh	r3, [r4, #36]	; 0x24
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 *
	 * CACHE: avail is never written by slave, so it is safe to not invalidate here
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   206ea:	69e3      	ldr	r3, [r4, #28]
   206ec:	8961      	ldrh	r1, [r4, #10]
   206ee:	885a      	ldrh	r2, [r3, #2]
   206f0:	3901      	subs	r1, #1
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
   206f2:	400a      	ands	r2, r1
   206f4:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   206f8:	f8a3 a004 	strh.w	sl, [r3, #4]

	/* We still need to flush the ring */
	VRING_FLUSH(vq->vq_ring.avail->ring[avail_idx]);

	atomic_thread_fence(memory_order_seq_cst);
   206fc:	f3bf 8f5b 	dmb	ish
}
   20700:	2000      	movs	r0, #0

	vq->vq_ring.avail->idx++;
   20702:	69e2      	ldr	r2, [r4, #28]
   20704:	8853      	ldrh	r3, [r2, #2]
   20706:	3301      	adds	r3, #1
   20708:	8053      	strh	r3, [r2, #2]

	/* And the index */
	VRING_FLUSH(vq->vq_ring.avail->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   2070a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   2070c:	3301      	adds	r3, #1
   2070e:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   20710:	b005      	add	sp, #20
   20712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp = &desc[idx];
   20716:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   20718:	012a      	lsls	r2, r5, #4
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   2071a:	f857 1c04 	ldr.w	r1, [r7, #-4]
   2071e:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   20722:	9302      	str	r3, [sp, #8]
   20724:	6803      	ldr	r3, [r0, #0]
   20726:	9203      	str	r2, [sp, #12]
   20728:	1ac9      	subs	r1, r1, r3
 *		physical address.
 */
static inline metal_phys_addr_t
metal_io_virt_to_phys(struct metal_io_region *io, void *virt)
{
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
   2072a:	6883      	ldr	r3, [r0, #8]
   2072c:	3708      	adds	r7, #8
   2072e:	4299      	cmp	r1, r3
   20730:	bf28      	it	cs
   20732:	f04f 31ff 	movcs.w	r1, #4294967295
   20736:	f7ff ff70 	bl	2061a <metal_io_phys>
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   2073a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   2073e:	5098      	str	r0, [r3, r2]
   20740:	2200      	movs	r2, #0
   20742:	606a      	str	r2, [r5, #4]
		dp->len = buf_list[i].len;
   20744:	f857 2c08 	ldr.w	r2, [r7, #-8]
   20748:	60aa      	str	r2, [r5, #8]
		if (i < needed - 1)
   2074a:	9a01      	ldr	r2, [sp, #4]
   2074c:	4296      	cmp	r6, r2
   2074e:	bfac      	ite	ge
   20750:	2200      	movge	r2, #0
   20752:	2201      	movlt	r2, #1
		if (i >= readable)
   20754:	45b1      	cmp	r9, r6
			dp->flags |= VRING_DESC_F_WRITE;
   20756:	bfd8      	it	le
   20758:	f042 0202 	orrle.w	r2, r2, #2
   2075c:	81aa      	strh	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   2075e:	3601      	adds	r6, #1
   20760:	89ed      	ldrh	r5, [r5, #14]
   20762:	e7bb      	b.n	206dc <virtqueue_add_buffer+0x30>

00020764 <virtqueue_get_buffer>:
{
   20764:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
   20766:	b350      	cbz	r0, 207be <virtqueue_get_buffer+0x5a>
   20768:	6a05      	ldr	r5, [r0, #32]
   2076a:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
   2076c:	886b      	ldrh	r3, [r5, #2]
   2076e:	42a3      	cmp	r3, r4
   20770:	d030      	beq.n	207d4 <virtqueue_get_buffer+0x70>
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   20772:	1c63      	adds	r3, r4, #1
   20774:	85c3      	strh	r3, [r0, #46]	; 0x2e
   20776:	8943      	ldrh	r3, [r0, #10]
	atomic_thread_fence(memory_order_seq_cst);
   20778:	f3bf 8f5b 	dmb	ish
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   2077c:	3b01      	subs	r3, #1
   2077e:	401c      	ands	r4, r3
	desc_idx = (uint16_t)uep->id;
   20780:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   20784:	686b      	ldr	r3, [r5, #4]
   20786:	b29e      	uxth	r6, r3
	if (len)
   20788:	b109      	cbz	r1, 2078e <virtqueue_get_buffer+0x2a>
		*len = uep->len;
   2078a:	68ad      	ldr	r5, [r5, #8]
   2078c:	600d      	str	r5, [r1, #0]
	dp = &vq->vq_ring.desc[desc_idx];
   2078e:	f8d0 c018 	ldr.w	ip, [r0, #24]
   20792:	b29b      	uxth	r3, r3
   20794:	eb0c 1103 	add.w	r1, ip, r3, lsl #4
	vq->vq_free_cnt += dxp->ndescs;
   20798:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   2079c:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
   2079e:	8c87      	ldrh	r7, [r0, #36]	; 0x24
   207a0:	442f      	add	r7, r5
	dxp->ndescs--;
   207a2:	3d01      	subs	r5, #1
	vq->vq_free_cnt += dxp->ndescs;
   207a4:	8487      	strh	r7, [r0, #36]	; 0x24
	dxp->ndescs--;
   207a6:	871d      	strh	r5, [r3, #56]	; 0x38
	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
   207a8:	898d      	ldrh	r5, [r1, #12]
   207aa:	076f      	lsls	r7, r5, #29
   207ac:	d50e      	bpl.n	207cc <virtqueue_get_buffer+0x68>
	dp->next = vq->vq_desc_head_idx;
   207ae:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
   207b0:	81cd      	strh	r5, [r1, #14]
	vq->vq_descx[desc_idx].cookie = NULL;
   207b2:	2100      	movs	r1, #0
	vq->vq_desc_head_idx = desc_idx;
   207b4:	8586      	strh	r6, [r0, #44]	; 0x2c
	cookie = vq->vq_descx[desc_idx].cookie;
   207b6:	6b58      	ldr	r0, [r3, #52]	; 0x34
	vq->vq_descx[desc_idx].cookie = NULL;
   207b8:	6359      	str	r1, [r3, #52]	; 0x34
	if (idx)
   207ba:	b102      	cbz	r2, 207be <virtqueue_get_buffer+0x5a>
		*idx = used_idx;
   207bc:	8014      	strh	r4, [r2, #0]
}
   207be:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dxp->ndescs--;
   207c0:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
			dp = &vq->vq_ring.desc[dp->next];
   207c2:	89c9      	ldrh	r1, [r1, #14]
			dxp->ndescs--;
   207c4:	3d01      	subs	r5, #1
			dp = &vq->vq_ring.desc[dp->next];
   207c6:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
			dxp->ndescs--;
   207ca:	871d      	strh	r5, [r3, #56]	; 0x38
		while (dp->flags & VRING_DESC_F_NEXT) {
   207cc:	898d      	ldrh	r5, [r1, #12]
   207ce:	07ed      	lsls	r5, r5, #31
   207d0:	d4f6      	bmi.n	207c0 <virtqueue_get_buffer+0x5c>
   207d2:	e7ec      	b.n	207ae <virtqueue_get_buffer+0x4a>
		return NULL;
   207d4:	2000      	movs	r0, #0
   207d6:	e7f2      	b.n	207be <virtqueue_get_buffer+0x5a>

000207d8 <virtqueue_get_buffer_length>:
	return vq->vq_ring.desc[idx].len;
   207d8:	6983      	ldr	r3, [r0, #24]
   207da:	eb03 1301 	add.w	r3, r3, r1, lsl #4
}
   207de:	6898      	ldr	r0, [r3, #8]
   207e0:	4770      	bx	lr

000207e2 <virtqueue_get_available_buffer>:
{
   207e2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	atomic_thread_fence(memory_order_seq_cst);
   207e6:	f3bf 8f5b 	dmb	ish
{
   207ea:	4617      	mov	r7, r2
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   207ec:	69c2      	ldr	r2, [r0, #28]
{
   207ee:	460e      	mov	r6, r1
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   207f0:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   207f2:	8851      	ldrh	r1, [r2, #2]
{
   207f4:	4605      	mov	r5, r0
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   207f6:	4299      	cmp	r1, r3
   207f8:	d045      	beq.n	20886 <virtqueue_get_available_buffer+0xa4>
	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
   207fa:	1c59      	adds	r1, r3, #1
   207fc:	8601      	strh	r1, [r0, #48]	; 0x30
   207fe:	8941      	ldrh	r1, [r0, #10]
   20800:	3901      	subs	r1, #1
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
   20802:	400b      	ands	r3, r1
   20804:	eb02 0243 	add.w	r2, r2, r3, lsl #1
   20808:	8892      	ldrh	r2, [r2, #4]
   2080a:	8032      	strh	r2, [r6, #0]
   2080c:	b293      	uxth	r3, r2
   2080e:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   20812:	6982      	ldr	r2, [r0, #24]
   20814:	011b      	lsls	r3, r3, #4
   20816:	f852 9003 	ldr.w	r9, [r2, r3]
	if (!io->ops.phys_to_offset) {
   2081a:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
   2081e:	bb5b      	cbnz	r3, 20878 <virtqueue_get_available_buffer+0x96>
			(io->page_mask == (metal_phys_addr_t)(-1) ?
   20820:	f8d8 4010 	ldr.w	r4, [r8, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
   20824:	1c62      	adds	r2, r4, #1
   20826:	bf09      	itett	eq
   20828:	f8d8 3004 	ldreq.w	r3, [r8, #4]
   2082c:	ea09 0404 	andne.w	r4, r9, r4
   20830:	681c      	ldreq	r4, [r3, #0]
   20832:	eba9 0404 	subeq.w	r4, r9, r4
			if (metal_io_phys(io, offset) == phys)
   20836:	4621      	mov	r1, r4
   20838:	4640      	mov	r0, r8
   2083a:	f7ff feee 	bl	2061a <metal_io_phys>
   2083e:	4581      	cmp	r9, r0
   20840:	d009      	beq.n	20856 <virtqueue_get_available_buffer+0x74>
			offset += io->page_mask + 1;
   20842:	f8d8 3010 	ldr.w	r3, [r8, #16]
   20846:	3301      	adds	r3, #1
   20848:	441c      	add	r4, r3
		} while (offset < io->size);
   2084a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2084e:	429c      	cmp	r4, r3
   20850:	d3f1      	bcc.n	20836 <virtqueue_get_available_buffer+0x54>
		return METAL_BAD_OFFSET;
   20852:	f04f 34ff 	mov.w	r4, #4294967295
	return (io->virt != METAL_BAD_VA && offset < io->size
   20856:	f8d8 0000 	ldr.w	r0, [r8]
		: NULL);
   2085a:	1c43      	adds	r3, r0, #1
   2085c:	d011      	beq.n	20882 <virtqueue_get_available_buffer+0xa0>
	return (io->virt != METAL_BAD_VA && offset < io->size
   2085e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   20862:	42a3      	cmp	r3, r4
   20864:	d90d      	bls.n	20882 <virtqueue_get_available_buffer+0xa0>
		? (void *)((uintptr_t)io->virt + offset)
   20866:	4420      	add	r0, r4
	*len = vq->vq_ring.desc[*avail_idx].len;
   20868:	8832      	ldrh	r2, [r6, #0]
   2086a:	69ab      	ldr	r3, [r5, #24]
   2086c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   20870:	689b      	ldr	r3, [r3, #8]
   20872:	603b      	str	r3, [r7, #0]
}
   20874:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return (*io->ops.phys_to_offset)(io, phys);
   20878:	4649      	mov	r1, r9
   2087a:	4640      	mov	r0, r8
   2087c:	4798      	blx	r3
   2087e:	4604      	mov	r4, r0
   20880:	e7e9      	b.n	20856 <virtqueue_get_available_buffer+0x74>
		: NULL);
   20882:	2000      	movs	r0, #0
   20884:	e7f0      	b.n	20868 <virtqueue_get_available_buffer+0x86>
		return NULL;
   20886:	2000      	movs	r0, #0
   20888:	e7f4      	b.n	20874 <virtqueue_get_available_buffer+0x92>

0002088a <virtqueue_disable_cb>:
{
   2088a:	b510      	push	{r4, lr}
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   2088c:	6802      	ldr	r2, [r0, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   2088e:	6993      	ldr	r3, [r2, #24]
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   20890:	6912      	ldr	r2, [r2, #16]
   20892:	0092      	lsls	r2, r2, #2
   20894:	d517      	bpl.n	208c6 <virtqueue_disable_cb+0x3c>
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   20896:	b943      	cbnz	r3, 208aa <virtqueue_disable_cb+0x20>
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   20898:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
			vring_used_event(&vq->vq_ring) =
   2089a:	69c2      	ldr	r2, [r0, #28]
   2089c:	6941      	ldr	r1, [r0, #20]
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   2089e:	8944      	ldrh	r4, [r0, #10]
   208a0:	3b01      	subs	r3, #1
   208a2:	1b1b      	subs	r3, r3, r4
			vring_used_event(&vq->vq_ring) =
   208a4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   208a8:	8093      	strh	r3, [r2, #4]
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   208aa:	6803      	ldr	r3, [r0, #0]
   208ac:	699b      	ldr	r3, [r3, #24]
   208ae:	2b01      	cmp	r3, #1
   208b0:	d108      	bne.n	208c4 <virtqueue_disable_cb+0x3a>
			    vq->vq_available_idx - vq->vq_nentries - 1;
   208b2:	8e03      	ldrh	r3, [r0, #48]	; 0x30
			vring_avail_event(&vq->vq_ring) =
   208b4:	6a02      	ldr	r2, [r0, #32]
   208b6:	6941      	ldr	r1, [r0, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
   208b8:	8940      	ldrh	r0, [r0, #10]
   208ba:	3b01      	subs	r3, #1
   208bc:	1a1b      	subs	r3, r3, r0
			vring_avail_event(&vq->vq_ring) =
   208be:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   208c2:	8093      	strh	r3, [r2, #4]
}
   208c4:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   208c6:	b923      	cbnz	r3, 208d2 <virtqueue_disable_cb+0x48>
			vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
   208c8:	69c2      	ldr	r2, [r0, #28]
   208ca:	8813      	ldrh	r3, [r2, #0]
   208cc:	f043 0301 	orr.w	r3, r3, #1
   208d0:	8013      	strh	r3, [r2, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   208d2:	6803      	ldr	r3, [r0, #0]
   208d4:	699b      	ldr	r3, [r3, #24]
   208d6:	2b01      	cmp	r3, #1
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   208d8:	bf01      	itttt	eq
   208da:	6a02      	ldreq	r2, [r0, #32]
   208dc:	8813      	ldrheq	r3, [r2, #0]
   208de:	f043 0301 	orreq.w	r3, r3, #1
   208e2:	8013      	strheq	r3, [r2, #0]
}
   208e4:	e7ee      	b.n	208c4 <virtqueue_disable_cb+0x3a>

000208e6 <virtqueue_kick>:
{
   208e6:	b510      	push	{r4, lr}
	atomic_thread_fence(memory_order_seq_cst);
   208e8:	f3bf 8f5b 	dmb	ish
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   208ec:	6803      	ldr	r3, [r0, #0]
{
   208ee:	4604      	mov	r4, r0
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   208f0:	691a      	ldr	r2, [r3, #16]
   208f2:	699b      	ldr	r3, [r3, #24]
   208f4:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
   208f8:	d01a      	beq.n	20930 <virtqueue_kick+0x4a>
#ifndef VIRTIO_DEVICE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   208fa:	b97b      	cbnz	r3, 2091c <virtqueue_kick+0x36>
			/* CACHE: no need to invalidate avail */
			new_idx = vq->vq_ring.avail->idx;
   208fc:	69c3      	ldr	r3, [r0, #28]
			prev_idx = new_idx - vq->vq_queued_cnt;
			VRING_INVALIDATE(vring_avail_event(&vq->vq_ring));
			event_idx = vring_avail_event(&vq->vq_ring);
   208fe:	6a02      	ldr	r2, [r0, #32]
			new_idx = vq->vq_ring.avail->idx;
   20900:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_avail_event(&vq->vq_ring);
   20902:	6941      	ldr	r1, [r0, #20]
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
	return (uint16_t)(new_idx - event_idx - 1) <
   20904:	3b01      	subs	r3, #1
   20906:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
			/* CACHE: no need to invalidate used */
			new_idx = vq->vq_ring.used->idx;
			prev_idx = new_idx - vq->vq_queued_cnt;
			VRING_INVALIDATE(vring_used_event(&vq->vq_ring));
			event_idx = vring_used_event(&vq->vq_ring);
   2090a:	8892      	ldrh	r2, [r2, #4]
   2090c:	1a9b      	subs	r3, r3, r2
	if (vq_ring_must_notify(vq))
   2090e:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   20910:	b29b      	uxth	r3, r3
   20912:	429a      	cmp	r2, r3
   20914:	d814      	bhi.n	20940 <virtqueue_kick+0x5a>
	vq->vq_queued_cnt = 0;
   20916:	2300      	movs	r3, #0
   20918:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   2091a:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   2091c:	2b01      	cmp	r3, #1
   2091e:	d1fa      	bne.n	20916 <virtqueue_kick+0x30>
			new_idx = vq->vq_ring.used->idx;
   20920:	6a03      	ldr	r3, [r0, #32]
			event_idx = vring_used_event(&vq->vq_ring);
   20922:	69c2      	ldr	r2, [r0, #28]
			new_idx = vq->vq_ring.used->idx;
   20924:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_used_event(&vq->vq_ring);
   20926:	6941      	ldr	r1, [r0, #20]
   20928:	3b01      	subs	r3, #1
   2092a:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   2092e:	e7ec      	b.n	2090a <virtqueue_kick+0x24>
						prev_idx) != 0;
		}
#endif /*VIRTIO_DRIVER_ONLY*/
	} else {
#ifndef VIRTIO_DEVICE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   20930:	b963      	cbnz	r3, 2094c <virtqueue_kick+0x66>
			VRING_INVALIDATE(vq->vq_ring.used->flags);
			return (vq->vq_ring.used->flags &
   20932:	6a03      	ldr	r3, [r0, #32]
		}
#endif /*VIRTIO_DEVICE_ONLY*/
#ifndef VIRTIO_DRIVER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
			VRING_INVALIDATE(vq->vq_ring.avail->flags);
			return (vq->vq_ring.avail->flags &
   20934:	881b      	ldrh	r3, [r3, #0]
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
   20936:	43db      	mvns	r3, r3
   20938:	f003 0301 	and.w	r3, r3, #1
	if (vq_ring_must_notify(vq))
   2093c:	2b00      	cmp	r3, #0
   2093e:	d0ea      	beq.n	20916 <virtqueue_kick+0x30>
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
	if (vq->notify)
   20940:	6923      	ldr	r3, [r4, #16]
   20942:	2b00      	cmp	r3, #0
   20944:	d0e7      	beq.n	20916 <virtqueue_kick+0x30>
		vq->notify(vq);
   20946:	4620      	mov	r0, r4
   20948:	4798      	blx	r3
   2094a:	e7e4      	b.n	20916 <virtqueue_kick+0x30>
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   2094c:	2b01      	cmp	r3, #1
   2094e:	d1e2      	bne.n	20916 <virtqueue_kick+0x30>
			return (vq->vq_ring.avail->flags &
   20950:	69c3      	ldr	r3, [r0, #28]
   20952:	e7ef      	b.n	20934 <virtqueue_kick+0x4e>

00020954 <virtqueue_get_desc_size>:
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   20954:	69c3      	ldr	r3, [r0, #28]
   20956:	8e02      	ldrh	r2, [r0, #48]	; 0x30
   20958:	8859      	ldrh	r1, [r3, #2]
   2095a:	4291      	cmp	r1, r2
   2095c:	d00a      	beq.n	20974 <virtqueue_get_desc_size+0x20>
	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
   2095e:	8941      	ldrh	r1, [r0, #10]
   20960:	3901      	subs	r1, #1
	avail_idx = vq->vq_ring.avail->ring[head_idx];
   20962:	400a      	ands	r2, r1
   20964:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	len = vq->vq_ring.desc[avail_idx].len;
   20968:	889a      	ldrh	r2, [r3, #4]
   2096a:	6983      	ldr	r3, [r0, #24]
   2096c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   20970:	6898      	ldr	r0, [r3, #8]
	return len;
   20972:	4770      	bx	lr
		return 0;
   20974:	2000      	movs	r0, #0
}
   20976:	4770      	bx	lr

00020978 <virtqueue_notification>:
	atomic_thread_fence(memory_order_seq_cst);
   20978:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
   2097c:	68c3      	ldr	r3, [r0, #12]
   2097e:	b103      	cbz	r3, 20982 <virtqueue_notification+0xa>
		vq->callback(vq);
   20980:	4718      	bx	r3
}
   20982:	4770      	bx	lr

00020984 <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   20984:	f04f 32ff 	mov.w	r2, #4294967295
   20988:	f04f 33ff 	mov.w	r3, #4294967295
   2098c:	f7f9 b87a 	b.w	19a84 <z_impl_k_sem_take>

00020990 <rpmsg_unregister_endpoint>:
{
   20990:	b570      	push	{r4, r5, r6, lr}
   20992:	4604      	mov	r4, r0
	struct rpmsg_device *rdev = ept->rdev;
   20994:	6a05      	ldr	r5, [r0, #32]
	metal_mutex_acquire(&rdev->lock);
   20996:	f105 0658 	add.w	r6, r5, #88	; 0x58
   2099a:	4630      	mov	r0, r6
   2099c:	f7ff fff2 	bl	20984 <__metal_mutex_acquire>
	if (ept->addr != RPMSG_ADDR_ANY)
   209a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   209a2:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
   209a6:	2b7f      	cmp	r3, #127	; 0x7f
   209a8:	d80b      	bhi.n	209c2 <rpmsg_unregister_endpoint+0x32>
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   209aa:	2201      	movs	r2, #1
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   209ac:	0959      	lsrs	r1, r3, #5
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
   209ae:	3548      	adds	r5, #72	; 0x48
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   209b0:	f003 031f 	and.w	r3, r3, #31
   209b4:	409a      	lsls	r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   209b6:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
   209ba:	ea23 0302 	bic.w	r3, r3, r2
   209be:	f845 3021 	str.w	r3, [r5, r1, lsl #2]
	node->next->prev = node->prev;
   209c2:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	; 0x34
   209c6:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   209c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
	metal_list_del(&ept->node);
   209ca:	f104 0334 	add.w	r3, r4, #52	; 0x34
   209ce:	6011      	str	r1, [r2, #0]
	node->next = node;
   209d0:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
	ept->rdev = NULL;
   209d4:	2300      	movs	r3, #0
   209d6:	6223      	str	r3, [r4, #32]
	z_impl_k_sem_give(sem);
   209d8:	4630      	mov	r0, r6
}
   209da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   209de:	f7f9 b82b 	b.w	19a38 <z_impl_k_sem_give>

000209e2 <rpmsg_send_ns_message>:
{
   209e2:	b530      	push	{r4, r5, lr}
   209e4:	b08d      	sub	sp, #52	; 0x34
	ns_msg.addr = ept->addr;
   209e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
{
   209e8:	4604      	mov	r4, r0
	ns_msg.flags = flags;
   209ea:	910b      	str	r1, [sp, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   209ec:	2220      	movs	r2, #32
   209ee:	4601      	mov	r1, r0
   209f0:	a802      	add	r0, sp, #8
	ns_msg.addr = ept->addr;
   209f2:	950a      	str	r5, [sp, #40]	; 0x28
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   209f4:	f001 f99a 	bl	21d2c <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
   209f8:	2328      	movs	r3, #40	; 0x28
   209fa:	2201      	movs	r2, #1
   209fc:	4629      	mov	r1, r5
   209fe:	e9cd 3200 	strd	r3, r2, [sp]
   20a02:	4620      	mov	r0, r4
   20a04:	2235      	movs	r2, #53	; 0x35
   20a06:	ab02      	add	r3, sp, #8
   20a08:	f7f8 fa5a 	bl	18ec0 <rpmsg_send_offchannel_raw>
}
   20a0c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   20a10:	b00d      	add	sp, #52	; 0x34
   20a12:	bd30      	pop	{r4, r5, pc}

00020a14 <rpmsg_hold_rx_buffer>:
	if (!ept || !ept->rdev || !rxbuf)
   20a14:	b128      	cbz	r0, 20a22 <rpmsg_hold_rx_buffer+0xe>
   20a16:	6a00      	ldr	r0, [r0, #32]
   20a18:	b118      	cbz	r0, 20a22 <rpmsg_hold_rx_buffer+0xe>
   20a1a:	b111      	cbz	r1, 20a22 <rpmsg_hold_rx_buffer+0xe>
	if (rdev->ops.hold_rx_buffer)
   20a1c:	6f83      	ldr	r3, [r0, #120]	; 0x78
   20a1e:	b103      	cbz	r3, 20a22 <rpmsg_hold_rx_buffer+0xe>
		rdev->ops.hold_rx_buffer(rdev, rxbuf);
   20a20:	4718      	bx	r3
}
   20a22:	4770      	bx	lr

00020a24 <rpmsg_release_rx_buffer>:
	if (!ept || !ept->rdev || !rxbuf)
   20a24:	b128      	cbz	r0, 20a32 <rpmsg_release_rx_buffer+0xe>
   20a26:	6a00      	ldr	r0, [r0, #32]
   20a28:	b118      	cbz	r0, 20a32 <rpmsg_release_rx_buffer+0xe>
   20a2a:	b111      	cbz	r1, 20a32 <rpmsg_release_rx_buffer+0xe>
	if (rdev->ops.release_rx_buffer)
   20a2c:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
   20a2e:	b103      	cbz	r3, 20a32 <rpmsg_release_rx_buffer+0xe>
		rdev->ops.release_rx_buffer(rdev, rxbuf);
   20a30:	4718      	bx	r3
}
   20a32:	4770      	bx	lr

00020a34 <rpmsg_get_tx_payload_buffer>:
	if (!ept || !ept->rdev || !len)
   20a34:	b130      	cbz	r0, 20a44 <rpmsg_get_tx_payload_buffer+0x10>
   20a36:	6a00      	ldr	r0, [r0, #32]
   20a38:	b120      	cbz	r0, 20a44 <rpmsg_get_tx_payload_buffer+0x10>
   20a3a:	b119      	cbz	r1, 20a44 <rpmsg_get_tx_payload_buffer+0x10>
	if (rdev->ops.get_tx_payload_buffer)
   20a3c:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
   20a40:	b103      	cbz	r3, 20a44 <rpmsg_get_tx_payload_buffer+0x10>
		return rdev->ops.get_tx_payload_buffer(rdev, len, wait);
   20a42:	4718      	bx	r3
}
   20a44:	2000      	movs	r0, #0
   20a46:	4770      	bx	lr

00020a48 <rpmsg_get_endpoint>:
{
   20a48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20a4c:	4606      	mov	r6, r0
   20a4e:	4688      	mov	r8, r1
   20a50:	4617      	mov	r7, r2
   20a52:	4699      	mov	r9, r3
	metal_list_for_each(&rdev->endpoints, node) {
   20a54:	6804      	ldr	r4, [r0, #0]
   20a56:	42a6      	cmp	r6, r4
   20a58:	d101      	bne.n	20a5e <rpmsg_get_endpoint+0x16>
	return NULL;
   20a5a:	2500      	movs	r5, #0
   20a5c:	e023      	b.n	20aa6 <rpmsg_get_endpoint+0x5e>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   20a5e:	1c7a      	adds	r2, r7, #1
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   20a60:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   20a64:	d002      	beq.n	20a6c <rpmsg_get_endpoint+0x24>
   20a66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   20a68:	42bb      	cmp	r3, r7
   20a6a:	d01c      	beq.n	20aa6 <rpmsg_get_endpoint+0x5e>
		if (name)
   20a6c:	f1b8 0f00 	cmp.w	r8, #0
   20a70:	d101      	bne.n	20a76 <rpmsg_get_endpoint+0x2e>
	metal_list_for_each(&rdev->endpoints, node) {
   20a72:	6824      	ldr	r4, [r4, #0]
   20a74:	e7ef      	b.n	20a56 <rpmsg_get_endpoint+0xe>
			name_match = !strncmp(ept->name, name,
   20a76:	2220      	movs	r2, #32
   20a78:	4641      	mov	r1, r8
   20a7a:	4628      	mov	r0, r5
   20a7c:	f001 f944 	bl	21d08 <strncmp>
		if (!name || !name_match)
   20a80:	2800      	cmp	r0, #0
   20a82:	d1f6      	bne.n	20a72 <rpmsg_get_endpoint+0x2a>
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
   20a84:	f1b9 3fff 	cmp.w	r9, #4294967295
   20a88:	d002      	beq.n	20a90 <rpmsg_get_endpoint+0x48>
   20a8a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   20a8c:	454b      	cmp	r3, r9
   20a8e:	d00a      	beq.n	20aa6 <rpmsg_get_endpoint+0x5e>
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   20a90:	1c7b      	adds	r3, r7, #1
   20a92:	d00b      	beq.n	20aac <rpmsg_get_endpoint+0x64>
	metal_list_for_each(&rdev->endpoints, node) {
   20a94:	6824      	ldr	r4, [r4, #0]
   20a96:	42b4      	cmp	r4, r6
   20a98:	d0df      	beq.n	20a5a <rpmsg_get_endpoint+0x12>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   20a9a:	f854 3c10 	ldr.w	r3, [r4, #-16]
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   20a9e:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   20aa2:	429f      	cmp	r7, r3
   20aa4:	d1e7      	bne.n	20a76 <rpmsg_get_endpoint+0x2e>
}
   20aa6:	4628      	mov	r0, r5
   20aa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   20aac:	6aab      	ldr	r3, [r5, #40]	; 0x28
   20aae:	3301      	adds	r3, #1
   20ab0:	d0f9      	beq.n	20aa6 <rpmsg_get_endpoint+0x5e>
	metal_list_for_each(&rdev->endpoints, node) {
   20ab2:	6824      	ldr	r4, [r4, #0]
   20ab4:	42b4      	cmp	r4, r6
   20ab6:	d0d0      	beq.n	20a5a <rpmsg_get_endpoint+0x12>
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   20ab8:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   20abc:	e7d6      	b.n	20a6c <rpmsg_get_endpoint+0x24>

00020abe <rpmsg_destroy_ept>:
 *
 * @param ept - pointer to endpoint to destroy
 *
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
   20abe:	b510      	push	{r4, lr}
	struct rpmsg_device *rdev;

	if (!ept)
   20ac0:	4604      	mov	r4, r0
   20ac2:	b190      	cbz	r0, 20aea <rpmsg_destroy_ept+0x2c>
		return;

	rdev = ept->rdev;
   20ac4:	6a03      	ldr	r3, [r0, #32]
	if (!rdev)
   20ac6:	b183      	cbz	r3, 20aea <rpmsg_destroy_ept+0x2c>
		return;

	if (ept->name[0] && rdev->support_ns &&
   20ac8:	7802      	ldrb	r2, [r0, #0]
   20aca:	b14a      	cbz	r2, 20ae0 <rpmsg_destroy_ept+0x22>
   20acc:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
   20ad0:	b133      	cbz	r3, 20ae0 <rpmsg_destroy_ept+0x22>
   20ad2:	6a43      	ldr	r3, [r0, #36]	; 0x24
   20ad4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   20ad8:	d302      	bcc.n	20ae0 <rpmsg_destroy_ept+0x22>
	    ept->addr >= RPMSG_RESERVED_ADDRESSES)
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
   20ada:	2101      	movs	r1, #1
   20adc:	f7ff ff81 	bl	209e2 <rpmsg_send_ns_message>
	rpmsg_unregister_endpoint(ept);
   20ae0:	4620      	mov	r0, r4
}
   20ae2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rpmsg_unregister_endpoint(ept);
   20ae6:	f7ff bf53 	b.w	20990 <rpmsg_unregister_endpoint>
}
   20aea:	bd10      	pop	{r4, pc}

00020aec <rpmsg_virtio_hold_rx_buffer>:
	rp_hdr->reserved |= RPMSG_BUF_HELD;
   20aec:	f851 3c08 	ldr.w	r3, [r1, #-8]
   20af0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   20af4:	f841 3c08 	str.w	r3, [r1, #-8]
}
   20af8:	4770      	bx	lr

00020afa <rpmsg_virtio_tx_callback>:
}
   20afa:	4770      	bx	lr

00020afc <k_sem_give>:
   20afc:	f7f8 bf9c 	b.w	19a38 <z_impl_k_sem_give>

00020b00 <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   20b00:	f04f 32ff 	mov.w	r2, #4294967295
   20b04:	f04f 33ff 	mov.w	r3, #4294967295
   20b08:	f7f8 bfbc 	b.w	19a84 <z_impl_k_sem_take>

00020b0c <rpmsg_virtio_ns_callback>:
{
   20b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct rpmsg_device *rdev = ept->rdev;
   20b10:	6a06      	ldr	r6, [r0, #32]
	if (len != sizeof(*ns_msg))
   20b12:	2a28      	cmp	r2, #40	; 0x28
{
   20b14:	460f      	mov	r7, r1
	struct metal_io_region *io = rvdev->shbuf_io;
   20b16:	f8d6 00a0 	ldr.w	r0, [r6, #160]	; 0xa0
{
   20b1a:	b088      	sub	sp, #32
	if (len != sizeof(*ns_msg))
   20b1c:	d12b      	bne.n	20b76 <rpmsg_virtio_ns_callback+0x6a>
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   20b1e:	6801      	ldr	r1, [r0, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   20b20:	6884      	ldr	r4, [r0, #8]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   20b22:	1a79      	subs	r1, r7, r1
	metal_io_block_read(io,
   20b24:	42a1      	cmp	r1, r4
   20b26:	bf28      	it	cs
   20b28:	f04f 31ff 	movcs.w	r1, #4294967295
   20b2c:	2320      	movs	r3, #32
   20b2e:	466a      	mov	r2, sp
   20b30:	f7ff fcca 	bl	204c8 <metal_io_block_read>
	metal_mutex_acquire(&rdev->lock);
   20b34:	f106 0558 	add.w	r5, r6, #88	; 0x58
	dest = ns_msg->addr;
   20b38:	f8d7 8020 	ldr.w	r8, [r7, #32]
   20b3c:	4628      	mov	r0, r5
   20b3e:	f7ff ffdf 	bl	20b00 <__metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   20b42:	4643      	mov	r3, r8
   20b44:	f04f 32ff 	mov.w	r2, #4294967295
   20b48:	4669      	mov	r1, sp
   20b4a:	4630      	mov	r0, r6
   20b4c:	f7ff ff7c 	bl	20a48 <rpmsg_get_endpoint>
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   20b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   20b52:	4604      	mov	r4, r0
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   20b54:	07db      	lsls	r3, r3, #31
   20b56:	d512      	bpl.n	20b7e <rpmsg_virtio_ns_callback+0x72>
		if (_ept)
   20b58:	b918      	cbnz	r0, 20b62 <rpmsg_virtio_ns_callback+0x56>
   20b5a:	4628      	mov	r0, r5
   20b5c:	f7ff ffce 	bl	20afc <k_sem_give>
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
	__metal_mutex_release(mutex);
}
   20b60:	e009      	b.n	20b76 <rpmsg_virtio_ns_callback+0x6a>
			_ept->dest_addr = RPMSG_ADDR_ANY;
   20b62:	f04f 33ff 	mov.w	r3, #4294967295
   20b66:	6283      	str	r3, [r0, #40]	; 0x28
   20b68:	4628      	mov	r0, r5
   20b6a:	f7ff ffc7 	bl	20afc <k_sem_give>
		if (_ept && _ept->ns_unbind_cb)
   20b6e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   20b70:	b10b      	cbz	r3, 20b76 <rpmsg_virtio_ns_callback+0x6a>
			_ept->ns_unbind_cb(_ept);
   20b72:	4620      	mov	r0, r4
   20b74:	4798      	blx	r3
}
   20b76:	2000      	movs	r0, #0
   20b78:	b008      	add	sp, #32
   20b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!_ept) {
   20b7e:	b950      	cbnz	r0, 20b96 <rpmsg_virtio_ns_callback+0x8a>
   20b80:	4628      	mov	r0, r5
   20b82:	f7ff ffbb 	bl	20afc <k_sem_give>
			if (rdev->ns_bind_cb)
   20b86:	6f33      	ldr	r3, [r6, #112]	; 0x70
   20b88:	2b00      	cmp	r3, #0
   20b8a:	d0f4      	beq.n	20b76 <rpmsg_virtio_ns_callback+0x6a>
				rdev->ns_bind_cb(rdev, name, dest);
   20b8c:	4642      	mov	r2, r8
   20b8e:	4669      	mov	r1, sp
   20b90:	4630      	mov	r0, r6
   20b92:	4798      	blx	r3
   20b94:	e7ef      	b.n	20b76 <rpmsg_virtio_ns_callback+0x6a>
			_ept->dest_addr = dest;
   20b96:	f8c0 8028 	str.w	r8, [r0, #40]	; 0x28
   20b9a:	e7de      	b.n	20b5a <rpmsg_virtio_ns_callback+0x4e>

00020b9c <rpmsg_virtio_get_rx_buffer>:
{
   20b9c:	b430      	push	{r4, r5}
	return rvdev->vdev->role;
   20b9e:	f8d0 5094 	ldr.w	r5, [r0, #148]	; 0x94
   20ba2:	4613      	mov	r3, r2
   20ba4:	69ad      	ldr	r5, [r5, #24]
	if (role == RPMSG_HOST) {
   20ba6:	b925      	cbnz	r5, 20bb2 <rpmsg_virtio_get_rx_buffer+0x16>
}
   20ba8:	bc30      	pop	{r4, r5}
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
   20baa:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
   20bae:	f7ff bdd9 	b.w	20764 <virtqueue_get_buffer>
	if (role == RPMSG_REMOTE) {
   20bb2:	2d01      	cmp	r5, #1
   20bb4:	d106      	bne.n	20bc4 <rpmsg_virtio_get_rx_buffer+0x28>
}
   20bb6:	bc30      	pop	{r4, r5}
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
   20bb8:	460a      	mov	r2, r1
   20bba:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
   20bbe:	4619      	mov	r1, r3
   20bc0:	f7ff be0f 	b.w	207e2 <virtqueue_get_available_buffer>
}
   20bc4:	2000      	movs	r0, #0
   20bc6:	bc30      	pop	{r4, r5}
   20bc8:	4770      	bx	lr

00020bca <rpmsg_virtio_return_buffer>:
{
   20bca:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   20bcc:	460c      	mov	r4, r1
   20bce:	4619      	mov	r1, r3
   20bd0:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   20bd4:	699d      	ldr	r5, [r3, #24]
	if (role == RPMSG_HOST) {
   20bd6:	b95d      	cbnz	r5, 20bf0 <rpmsg_virtio_return_buffer+0x26>
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   20bd8:	9400      	str	r4, [sp, #0]
		vqbuf.len = len;
   20bda:	e9cd 4202 	strd	r4, r2, [sp, #8]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   20bde:	2301      	movs	r3, #1
   20be0:	462a      	mov	r2, r5
   20be2:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
   20be6:	a902      	add	r1, sp, #8
   20be8:	f7ff fd60 	bl	206ac <virtqueue_add_buffer>
}
   20bec:	b004      	add	sp, #16
   20bee:	bd70      	pop	{r4, r5, r6, pc}
	if (role == RPMSG_REMOTE) {
   20bf0:	2d01      	cmp	r5, #1
   20bf2:	d1fb      	bne.n	20bec <rpmsg_virtio_return_buffer+0x22>
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   20bf4:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
}
   20bf8:	b004      	add	sp, #16
   20bfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   20bfe:	f7f8 b943 	b.w	18e88 <virtqueue_add_consumed_buffer>

00020c02 <rpmsg_virtio_rx_callback>:
{
   20c02:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   20c06:	6803      	ldr	r3, [r0, #0]
   20c08:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	metal_mutex_acquire(&rdev->lock);
   20c0a:	f107 0658 	add.w	r6, r7, #88	; 0x58
	__metal_mutex_acquire(mutex);
   20c0e:	4630      	mov	r0, r6
   20c10:	f7ff ff76 	bl	20b00 <__metal_mutex_acquire>
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   20c14:	4638      	mov	r0, r7
   20c16:	f10d 020a 	add.w	r2, sp, #10
   20c1a:	a903      	add	r1, sp, #12
   20c1c:	f7ff ffbe 	bl	20b9c <rpmsg_virtio_get_rx_buffer>
   20c20:	4604      	mov	r4, r0
   20c22:	4630      	mov	r0, r6
   20c24:	f7ff ff6a 	bl	20afc <k_sem_give>
	while (rp_hdr) {
   20c28:	2c00      	cmp	r4, #0
   20c2a:	d041      	beq.n	20cb0 <rpmsg_virtio_rx_callback+0xae>
		rp_hdr->reserved = idx;
   20c2c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   20c30:	4630      	mov	r0, r6
   20c32:	60a3      	str	r3, [r4, #8]
   20c34:	f7ff ff64 	bl	20b00 <__metal_mutex_acquire>
			     rpmsg_ns_unbind_cb ns_unbind_cb);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
   20c38:	f04f 33ff 	mov.w	r3, #4294967295
   20c3c:	2100      	movs	r1, #0
   20c3e:	4638      	mov	r0, r7
   20c40:	6862      	ldr	r2, [r4, #4]
   20c42:	f7ff ff01 	bl	20a48 <rpmsg_get_endpoint>
   20c46:	4605      	mov	r5, r0
   20c48:	4630      	mov	r0, r6
   20c4a:	f7ff ff57 	bl	20afc <k_sem_give>
		if (ept) {
   20c4e:	b17d      	cbz	r5, 20c70 <rpmsg_virtio_rx_callback+0x6e>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   20c50:	6aab      	ldr	r3, [r5, #40]	; 0x28
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   20c52:	6be9      	ldr	r1, [r5, #60]	; 0x3c
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   20c54:	3301      	adds	r3, #1
				ept->dest_addr = rp_hdr->src;
   20c56:	bf08      	it	eq
   20c58:	6823      	ldreq	r3, [r4, #0]
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   20c5a:	4628      	mov	r0, r5
				ept->dest_addr = rp_hdr->src;
   20c5c:	bf08      	it	eq
   20c5e:	62ab      	streq	r3, [r5, #40]	; 0x28
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   20c60:	6823      	ldr	r3, [r4, #0]
   20c62:	89a2      	ldrh	r2, [r4, #12]
   20c64:	9100      	str	r1, [sp, #0]
   20c66:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
   20c6a:	f104 0110 	add.w	r1, r4, #16
   20c6e:	47c0      	blx	r8
   20c70:	4630      	mov	r0, r6
   20c72:	f7ff ff45 	bl	20b00 <__metal_mutex_acquire>
		if (!(rp_hdr->reserved & RPMSG_BUF_HELD)) {
   20c76:	68a3      	ldr	r3, [r4, #8]
   20c78:	2b00      	cmp	r3, #0
   20c7a:	db06      	blt.n	20c8a <rpmsg_virtio_rx_callback+0x88>
			rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   20c7c:	4621      	mov	r1, r4
   20c7e:	4638      	mov	r0, r7
   20c80:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   20c84:	9a03      	ldr	r2, [sp, #12]
   20c86:	f7ff ffa0 	bl	20bca <rpmsg_virtio_return_buffer>
		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   20c8a:	4638      	mov	r0, r7
   20c8c:	f10d 020a 	add.w	r2, sp, #10
   20c90:	a903      	add	r1, sp, #12
   20c92:	f7ff ff83 	bl	20b9c <rpmsg_virtio_get_rx_buffer>
		if (!rp_hdr) {
   20c96:	4604      	mov	r4, r0
   20c98:	b118      	cbz	r0, 20ca2 <rpmsg_virtio_rx_callback+0xa0>
   20c9a:	4630      	mov	r0, r6
   20c9c:	f7ff ff2e 	bl	20afc <k_sem_give>
	while (rp_hdr) {
   20ca0:	e7c4      	b.n	20c2c <rpmsg_virtio_rx_callback+0x2a>
			virtqueue_kick(rvdev->rvq);
   20ca2:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
   20ca6:	f7ff fe1e 	bl	208e6 <virtqueue_kick>
   20caa:	4630      	mov	r0, r6
   20cac:	f7ff ff26 	bl	20afc <k_sem_give>
}
   20cb0:	b004      	add	sp, #16
   20cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00020cb6 <rpmsg_virtio_release_rx_buffer>:
{
   20cb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20cb8:	4604      	mov	r4, r0
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
   20cba:	f851 6c08 	ldr.w	r6, [r1, #-8]
	metal_mutex_acquire(&rdev->lock);
   20cbe:	f100 0758 	add.w	r7, r0, #88	; 0x58
   20cc2:	4638      	mov	r0, r7
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
   20cc4:	b2b6      	uxth	r6, r6
{
   20cc6:	460d      	mov	r5, r1
   20cc8:	f7ff ff1a 	bl	20b00 <__metal_mutex_acquire>
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
   20ccc:	4631      	mov	r1, r6
   20cce:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   20cd2:	f7ff fd81 	bl	207d8 <virtqueue_get_buffer_length>
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   20cd6:	4633      	mov	r3, r6
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
   20cd8:	4602      	mov	r2, r0
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   20cda:	f1a5 0110 	sub.w	r1, r5, #16
   20cde:	4620      	mov	r0, r4
   20ce0:	f7ff ff73 	bl	20bca <rpmsg_virtio_return_buffer>
   20ce4:	4638      	mov	r0, r7
}
   20ce6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   20cea:	f7ff bf07 	b.w	20afc <k_sem_give>

00020cee <rpmsg_virtio_send_offchannel_nocopy>:
{
   20cee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	hdr = RPMSG_LOCATE_HDR(data);
   20cf2:	f1a3 0610 	sub.w	r6, r3, #16
	idx = hdr->reserved;
   20cf6:	f853 5c08 	ldr.w	r5, [r3, #-8]
	rp_hdr.reserved = 0;
   20cfa:	2300      	movs	r3, #0
{
   20cfc:	b088      	sub	sp, #32
	rp_hdr.reserved = 0;
   20cfe:	9306      	str	r3, [sp, #24]
	rp_hdr.flags = 0;
   20d00:	f8ad 301e 	strh.w	r3, [sp, #30]
{
   20d04:	4604      	mov	r4, r0
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
   20d06:	2310      	movs	r3, #16
	rp_hdr.src = src;
   20d08:	e9cd 1204 	strd	r1, r2, [sp, #16]
{
   20d0c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	io = rvdev->shbuf_io;
   20d0e:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
	rp_hdr.len = len;
   20d12:	f8ad 701c 	strh.w	r7, [sp, #28]
   20d16:	6801      	ldr	r1, [r0, #0]
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
   20d18:	f8d0 c008 	ldr.w	ip, [r0, #8]
   20d1c:	1a71      	subs	r1, r6, r1
   20d1e:	eb0d 0203 	add.w	r2, sp, r3
   20d22:	4561      	cmp	r1, ip
   20d24:	bf28      	it	cs
   20d26:	f04f 31ff 	movcs.w	r1, #4294967295
	metal_mutex_acquire(&rdev->lock);
   20d2a:	f104 0858 	add.w	r8, r4, #88	; 0x58
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
   20d2e:	f7ff fc04 	bl	2053a <metal_io_block_write>
   20d32:	4640      	mov	r0, r8
   20d34:	f7ff fee4 	bl	20b00 <__metal_mutex_acquire>
   20d38:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
	idx = hdr->reserved;
   20d3c:	b2ad      	uxth	r5, r5
	if (rpmsg_virtio_get_role(rvdev) == RPMSG_HOST)
   20d3e:	699b      	ldr	r3, [r3, #24]
   20d40:	b9cb      	cbnz	r3, 20d76 <rpmsg_virtio_send_offchannel_nocopy+0x88>
		buff_len = rvdev->config.h2r_buf_size;
   20d42:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   20d46:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   20d4a:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   20d4e:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_HOST) {
   20d50:	b9c3      	cbnz	r3, 20d84 <rpmsg_virtio_send_offchannel_nocopy+0x96>
		vqbuf.len = len;
   20d52:	e9cd 6202 	strd	r6, r2, [sp, #8]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   20d56:	9600      	str	r6, [sp, #0]
   20d58:	2201      	movs	r2, #1
   20d5a:	a902      	add	r1, sp, #8
   20d5c:	f7ff fca6 	bl	206ac <virtqueue_add_buffer>
	virtqueue_kick(rvdev->svq);
   20d60:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   20d64:	f7ff fdbf 	bl	208e6 <virtqueue_kick>
   20d68:	4640      	mov	r0, r8
   20d6a:	f7ff fec7 	bl	20afc <k_sem_give>
}
   20d6e:	4638      	mov	r0, r7
   20d70:	b008      	add	sp, #32
   20d72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);
   20d76:	4629      	mov	r1, r5
   20d78:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   20d7c:	f7ff fd2c 	bl	207d8 <virtqueue_get_buffer_length>
   20d80:	4602      	mov	r2, r0
   20d82:	e7e0      	b.n	20d46 <rpmsg_virtio_send_offchannel_nocopy+0x58>
	if (role == RPMSG_REMOTE) {
   20d84:	2b01      	cmp	r3, #1
   20d86:	d1eb      	bne.n	20d60 <rpmsg_virtio_send_offchannel_nocopy+0x72>
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
   20d88:	4629      	mov	r1, r5
   20d8a:	f7f8 f87d 	bl	18e88 <virtqueue_add_consumed_buffer>
   20d8e:	e7e7      	b.n	20d60 <rpmsg_virtio_send_offchannel_nocopy+0x72>

00020d90 <rpmsg_virtio_shm_pool_get_buffer>:
{
   20d90:	4603      	mov	r3, r0
   20d92:	b510      	push	{r4, lr}
	if (shpool->avail < size)
   20d94:	6842      	ldr	r2, [r0, #4]
   20d96:	428a      	cmp	r2, r1
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   20d98:	bf29      	itett	cs
   20d9a:	6880      	ldrcs	r0, [r0, #8]
		return NULL;
   20d9c:	2000      	movcc	r0, #0
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   20d9e:	1a84      	subcs	r4, r0, r2
   20da0:	6818      	ldrcs	r0, [r3, #0]
	shpool->avail -= size;
   20da2:	bf22      	ittt	cs
   20da4:	1a52      	subcs	r2, r2, r1
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   20da6:	1900      	addcs	r0, r0, r4
	shpool->avail -= size;
   20da8:	605a      	strcs	r2, [r3, #4]
}
   20daa:	bd10      	pop	{r4, pc}

00020dac <rpmsg_virtio_get_tx_payload_buffer>:
{
   20dac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   20db0:	4605      	mov	r5, r0
   20db2:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
   20db6:	460f      	mov	r7, r1
	return rvdev->vdev->func->get_status(rvdev->vdev);
   20db8:	6a03      	ldr	r3, [r0, #32]
   20dba:	4616      	mov	r6, r2
   20dbc:	681b      	ldr	r3, [r3, #0]
   20dbe:	4798      	blx	r3
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK))
   20dc0:	0743      	lsls	r3, r0, #29
   20dc2:	d403      	bmi.n	20dcc <rpmsg_virtio_get_tx_payload_buffer+0x20>
		return NULL;
   20dc4:	2000      	movs	r0, #0
}
   20dc6:	b003      	add	sp, #12
   20dc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
   20dcc:	f643 2398 	movw	r3, #15000	; 0x3a98
   20dd0:	2e00      	cmp	r6, #0
   20dd2:	bf18      	it	ne
   20dd4:	461e      	movne	r6, r3
		metal_mutex_acquire(&rdev->lock);
   20dd6:	f105 0858 	add.w	r8, r5, #88	; 0x58
   20dda:	4640      	mov	r0, r8
   20ddc:	f7ff fe90 	bl	20b00 <__metal_mutex_acquire>
	return rvdev->vdev->role;
   20de0:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
   20de4:	f8d3 9018 	ldr.w	r9, [r3, #24]
	if (role == RPMSG_HOST) {
   20de8:	f1b9 0f00 	cmp.w	r9, #0
   20dec:	d135      	bne.n	20e5a <rpmsg_virtio_get_tx_payload_buffer+0xae>
		data = virtqueue_get_buffer(rvdev->svq, len, idx);
   20dee:	4639      	mov	r1, r7
   20df0:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
   20df4:	f10d 0206 	add.w	r2, sp, #6
   20df8:	f7ff fcb4 	bl	20764 <virtqueue_get_buffer>
		if (!data && rvdev->svq->vq_free_cnt) {
   20dfc:	4604      	mov	r4, r0
   20dfe:	b158      	cbz	r0, 20e18 <rpmsg_virtio_get_tx_payload_buffer+0x6c>
   20e00:	4640      	mov	r0, r8
   20e02:	f7ff fe7b 	bl	20afc <k_sem_give>
	rp_hdr->reserved = idx;
   20e06:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	return RPMSG_LOCATE_DATA(rp_hdr);
   20e0a:	f104 0010 	add.w	r0, r4, #16
	rp_hdr->reserved = idx;
   20e0e:	60a3      	str	r3, [r4, #8]
	*len -= sizeof(struct rpmsg_hdr);
   20e10:	683b      	ldr	r3, [r7, #0]
   20e12:	3b10      	subs	r3, #16
   20e14:	603b      	str	r3, [r7, #0]
	return RPMSG_LOCATE_DATA(rp_hdr);
   20e16:	e7d6      	b.n	20dc6 <rpmsg_virtio_get_tx_payload_buffer+0x1a>
		if (!data && rvdev->svq->vq_free_cnt) {
   20e18:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
   20e1c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   20e1e:	b953      	cbnz	r3, 20e36 <rpmsg_virtio_get_tx_payload_buffer+0x8a>
   20e20:	4640      	mov	r0, r8
   20e22:	f7ff fe6b 	bl	20afc <k_sem_give>
		if (rp_hdr || !tick_count)
   20e26:	2e00      	cmp	r6, #0
   20e28:	d0cc      	beq.n	20dc4 <rpmsg_virtio_get_tx_payload_buffer+0x18>
	return z_impl_k_sleep(timeout);
   20e2a:	2021      	movs	r0, #33	; 0x21
   20e2c:	2100      	movs	r1, #0
   20e2e:	f7f9 fb27 	bl	1a480 <z_impl_k_sleep>
		tick_count--;
   20e32:	3e01      	subs	r6, #1
		metal_mutex_acquire(&rdev->lock);
   20e34:	e7d1      	b.n	20dda <rpmsg_virtio_get_tx_payload_buffer+0x2e>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
   20e36:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
   20e3a:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
   20e3e:	f7ff ffa7 	bl	20d90 <rpmsg_virtio_shm_pool_get_buffer>
   20e42:	4604      	mov	r4, r0
			*len = rvdev->config.h2r_buf_size;
   20e44:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
			*idx = 0;
   20e48:	f8ad 9006 	strh.w	r9, [sp, #6]
			*len = rvdev->config.h2r_buf_size;
   20e4c:	603b      	str	r3, [r7, #0]
   20e4e:	4640      	mov	r0, r8
   20e50:	f7ff fe54 	bl	20afc <k_sem_give>
		if (rp_hdr || !tick_count)
   20e54:	2c00      	cmp	r4, #0
   20e56:	d0e6      	beq.n	20e26 <rpmsg_virtio_get_tx_payload_buffer+0x7a>
   20e58:	e7d5      	b.n	20e06 <rpmsg_virtio_get_tx_payload_buffer+0x5a>
	if (role == RPMSG_REMOTE) {
   20e5a:	f1b9 0f01 	cmp.w	r9, #1
   20e5e:	d1df      	bne.n	20e20 <rpmsg_virtio_get_tx_payload_buffer+0x74>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
   20e60:	463a      	mov	r2, r7
   20e62:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
   20e66:	f10d 0106 	add.w	r1, sp, #6
   20e6a:	f7ff fcba 	bl	207e2 <virtqueue_get_available_buffer>
   20e6e:	4604      	mov	r4, r0
   20e70:	e7ed      	b.n	20e4e <rpmsg_virtio_get_tx_payload_buffer+0xa2>

00020e72 <rpmsg_virtio_init_shm_pool>:
	if (!shpool)
   20e72:	b110      	cbz	r0, 20e7a <rpmsg_virtio_init_shm_pool+0x8>
	shpool->avail = size;
   20e74:	e9c0 2201 	strd	r2, r2, [r0, #4]
	shpool->base = shb;
   20e78:	6001      	str	r1, [r0, #0]
}
   20e7a:	4770      	bx	lr

00020e7c <rpmsg_deinit_vdev>:

void rpmsg_deinit_vdev(struct rpmsg_virtio_device *rvdev)
{
   20e7c:	b510      	push	{r4, lr}
   20e7e:	4604      	mov	r4, r0
	return list->next == list;
   20e80:	6820      	ldr	r0, [r4, #0]
	struct metal_list *node;
	struct rpmsg_device *rdev;
	struct rpmsg_endpoint *ept;

	rdev = &rvdev->rdev;
	while (!metal_list_is_empty(&rdev->endpoints)) {
   20e82:	4284      	cmp	r4, r0
   20e84:	d103      	bne.n	20e8e <rpmsg_deinit_vdev+0x12>
		node = rdev->endpoints.next;
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
		rpmsg_destroy_ept(ept);
	}

	rvdev->rvq = 0;
   20e86:	2300      	movs	r3, #0
	rvdev->svq = 0;
   20e88:	e9c4 3326 	strd	r3, r3, [r4, #152]	; 0x98

	metal_mutex_deinit(&rdev->lock);
}
   20e8c:	bd10      	pop	{r4, pc}
		rpmsg_destroy_ept(ept);
   20e8e:	3834      	subs	r0, #52	; 0x34
   20e90:	f7ff fe15 	bl	20abe <rpmsg_destroy_ept>
   20e94:	e7f4      	b.n	20e80 <rpmsg_deinit_vdev+0x4>

00020e96 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   20e96:	4770      	bx	lr

00020e98 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   20e98:	b140      	cbz	r0, 20eac <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   20e9a:	68c3      	ldr	r3, [r0, #12]
   20e9c:	7858      	ldrb	r0, [r3, #1]
   20e9e:	f010 0001 	ands.w	r0, r0, #1
   20ea2:	bf1e      	ittt	ne
   20ea4:	7818      	ldrbne	r0, [r3, #0]
   20ea6:	fab0 f080 	clzne	r0, r0
   20eaa:	0940      	lsrne	r0, r0, #5
}
   20eac:	4770      	bx	lr

00020eae <z_early_memset>:
__ssp_bos_icheck3(memset, void *, int)
   20eae:	f000 bdfb 	b.w	21aa8 <memset>

00020eb2 <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   20eb2:	f000 bdec 	b.w	21a8e <memcpy>

00020eb6 <k_heap_init>:
{
   20eb6:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   20eb8:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   20ebc:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   20ec0:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   20ec2:	f7fb bc0d 	b.w	1c6e0 <sys_heap_init>

00020ec6 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   20ec6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20eca:	b085      	sub	sp, #20
   20ecc:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
   20ed0:	4607      	mov	r7, r0
   20ed2:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   20ed4:	4650      	mov	r0, sl
   20ed6:	4621      	mov	r1, r4
{
   20ed8:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   20eda:	f000 fc0c 	bl	216f6 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   20ede:	f1b4 3fff 	cmp.w	r4, #4294967295
   20ee2:	bf08      	it	eq
   20ee4:	f1ba 3fff 	cmpeq.w	sl, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   20ee8:	4605      	mov	r5, r0
   20eea:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   20eec:	bf04      	itt	eq
   20eee:	f04f 35ff 	moveq.w	r5, #4294967295
   20ef2:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   20ef6:	f107 0a14 	add.w	sl, r7, #20
	__asm__ volatile(
   20efa:	f04f 0320 	mov.w	r3, #32
   20efe:	f3ef 8411 	mrs	r4, BASEPRI
   20f02:	f383 8812 	msr	BASEPRI_MAX, r3
   20f06:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   20f0a:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   20f0e:	464a      	mov	r2, r9
   20f10:	4641      	mov	r1, r8
   20f12:	4638      	mov	r0, r7
   20f14:	f7fb fb7d 	bl	1c612 <sys_heap_aligned_alloc>
   20f18:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   20f1a:	f7f9 fc85 	bl	1a828 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   20f1e:	9b03      	ldr	r3, [sp, #12]
   20f20:	b13b      	cbz	r3, 20f32 <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
   20f22:	f384 8811 	msr	BASEPRI, r4
   20f26:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   20f2a:	4618      	mov	r0, r3
   20f2c:	b005      	add	sp, #20
   20f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   20f32:	1a28      	subs	r0, r5, r0
   20f34:	eb66 0101 	sbc.w	r1, r6, r1
   20f38:	2801      	cmp	r0, #1
   20f3a:	f171 0200 	sbcs.w	r2, r1, #0
   20f3e:	dbf0      	blt.n	20f22 <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   20f40:	e9cd 0100 	strd	r0, r1, [sp]
   20f44:	465a      	mov	r2, fp
   20f46:	4621      	mov	r1, r4
   20f48:	4650      	mov	r0, sl
   20f4a:	f7f9 f915 	bl	1a178 <z_pend_curr>
	__asm__ volatile(
   20f4e:	f04f 0320 	mov.w	r3, #32
   20f52:	f3ef 8411 	mrs	r4, BASEPRI
   20f56:	f383 8812 	msr	BASEPRI_MAX, r3
   20f5a:	f3bf 8f6f 	isb	sy
	return k;
   20f5e:	e7d6      	b.n	20f0e <k_heap_aligned_alloc+0x48>

00020f60 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   20f60:	b538      	push	{r3, r4, r5, lr}
   20f62:	4604      	mov	r4, r0
   20f64:	f04f 0320 	mov.w	r3, #32
   20f68:	f3ef 8511 	mrs	r5, BASEPRI
   20f6c:	f383 8812 	msr	BASEPRI_MAX, r3
   20f70:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   20f74:	f7fb fb15 	bl	1c5a2 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   20f78:	f104 000c 	add.w	r0, r4, #12
   20f7c:	f000 fb3c 	bl	215f8 <z_unpend_all>
   20f80:	b130      	cbz	r0, 20f90 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   20f82:	4629      	mov	r1, r5
   20f84:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   20f88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   20f8c:	f7f9 b958 	b.w	1a240 <z_reschedule>
	__asm__ volatile(
   20f90:	f385 8811 	msr	BASEPRI, r5
   20f94:	f3bf 8f6f 	isb	sy
}
   20f98:	bd38      	pop	{r3, r4, r5, pc}

00020f9a <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   20f9a:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
   20f9e:	4313      	orrs	r3, r2
   20fa0:	f013 0303 	ands.w	r3, r3, #3
   20fa4:	d10c      	bne.n	20fc0 <create_free_list+0x26>
	slab->free_list = NULL;
   20fa6:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   20fa8:	6881      	ldr	r1, [r0, #8]
   20faa:	4299      	cmp	r1, r3
   20fac:	d801      	bhi.n	20fb2 <create_free_list+0x18>
	return 0;
   20fae:	2000      	movs	r0, #0
   20fb0:	4770      	bx	lr
		*(char **)p = slab->free_list;
   20fb2:	6941      	ldr	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   20fb4:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   20fb6:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   20fb8:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
   20fba:	6142      	str	r2, [r0, #20]
		p += slab->block_size;
   20fbc:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   20fbe:	e7f3      	b.n	20fa8 <create_free_list+0xe>
		return -EINVAL;
   20fc0:	f06f 0015 	mvn.w	r0, #21
}
   20fc4:	4770      	bx	lr

00020fc6 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   20fc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20fc8:	4604      	mov	r4, r0
   20fca:	460d      	mov	r5, r1
	__asm__ volatile(
   20fcc:	f04f 0320 	mov.w	r3, #32
   20fd0:	f3ef 8611 	mrs	r6, BASEPRI
   20fd4:	f383 8812 	msr	BASEPRI_MAX, r3
   20fd8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   20fdc:	6947      	ldr	r7, [r0, #20]
   20fde:	b977      	cbnz	r7, 20ffe <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   20fe0:	f000 fac4 	bl	2156c <z_unpend_first_thread>

		if (pending_thread != NULL) {
   20fe4:	b158      	cbz	r0, 20ffe <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   20fe6:	682a      	ldr	r2, [r5, #0]
   20fe8:	67c7      	str	r7, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   20fea:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   20fec:	f000 fa87 	bl	214fe <z_ready_thread>
			z_reschedule(&slab->lock, key);
   20ff0:	4631      	mov	r1, r6
   20ff2:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   20ff6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   20ffa:	f7f9 b921 	b.w	1a240 <z_reschedule>
	**(char ***) mem = slab->free_list;
   20ffe:	682b      	ldr	r3, [r5, #0]
   21000:	6962      	ldr	r2, [r4, #20]
   21002:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   21004:	682b      	ldr	r3, [r5, #0]
   21006:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   21008:	69a3      	ldr	r3, [r4, #24]
   2100a:	3b01      	subs	r3, #1
   2100c:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   2100e:	f386 8811 	msr	BASEPRI, r6
   21012:	f3bf 8f6f 	isb	sy
}
   21016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00021018 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   21018:	f3ef 8005 	mrs	r0, IPSR
}
   2101c:	3800      	subs	r0, #0
   2101e:	bf18      	it	ne
   21020:	2001      	movne	r0, #1
   21022:	4770      	bx	lr

00021024 <z_impl_k_thread_name_set>:
}
   21024:	f06f 0057 	mvn.w	r0, #87	; 0x57
   21028:	4770      	bx	lr

0002102a <k_thread_name_get>:
}
   2102a:	2000      	movs	r0, #0
   2102c:	4770      	bx	lr

0002102e <z_impl_k_thread_start>:
	z_sched_start(thread);
   2102e:	f7f9 b919 	b.w	1a264 <z_sched_start>

00021032 <z_pm_save_idle_exit>:
{
   21032:	b508      	push	{r3, lr}
	pm_system_resume();
   21034:	f7ec f8a8 	bl	d188 <pm_system_resume>
}
   21038:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   2103c:	f7ff b8fe 	b.w	2023c <sys_clock_idle_exit>

00021040 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   21040:	f990 300e 	ldrsb.w	r3, [r0, #14]
   21044:	428b      	cmp	r3, r1
   21046:	d001      	beq.n	2104c <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   21048:	f7f9 b8b4 	b.w	1a1b4 <z_set_prio>
}
   2104c:	2000      	movs	r0, #0
   2104e:	4770      	bx	lr

00021050 <z_impl_k_mutex_init>:
{
   21050:	4603      	mov	r3, r0
	mutex->owner = NULL;
   21052:	2000      	movs	r0, #0
   21054:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   21058:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   2105c:	4770      	bx	lr

0002105e <queue_insert>:
{
   2105e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21062:	4699      	mov	r9, r3
   21064:	4604      	mov	r4, r0
   21066:	460d      	mov	r5, r1
   21068:	4690      	mov	r8, r2
   2106a:	f89d 3020 	ldrb.w	r3, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2106e:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   21072:	f04f 0220 	mov.w	r2, #32
   21076:	f3ef 8711 	mrs	r7, BASEPRI
   2107a:	f382 8812 	msr	BASEPRI_MAX, r2
   2107e:	f3bf 8f6f 	isb	sy
	if (is_append) {
   21082:	b103      	cbz	r3, 21086 <queue_insert+0x28>
	return list->tail;
   21084:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   21086:	4630      	mov	r0, r6
   21088:	f000 fa70 	bl	2156c <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   2108c:	b158      	cbz	r0, 210a6 <queue_insert+0x48>
   2108e:	2300      	movs	r3, #0
   21090:	f8c0 8014 	str.w	r8, [r0, #20]
   21094:	67c3      	str	r3, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   21096:	f000 fa32 	bl	214fe <z_ready_thread>
	z_reschedule(&queue->lock, key);
   2109a:	4630      	mov	r0, r6
   2109c:	4639      	mov	r1, r7
   2109e:	f7f9 f8cf 	bl	1a240 <z_reschedule>
		return 0;
   210a2:	2000      	movs	r0, #0
   210a4:	e00c      	b.n	210c0 <queue_insert+0x62>
	if (alloc) {
   210a6:	f1b9 0f00 	cmp.w	r9, #0
   210aa:	d01b      	beq.n	210e4 <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   210ac:	2108      	movs	r1, #8
   210ae:	f7f9 fd1d 	bl	1aaec <z_thread_aligned_alloc>
		if (anode == NULL) {
   210b2:	b938      	cbnz	r0, 210c4 <queue_insert+0x66>
	__asm__ volatile(
   210b4:	f387 8811 	msr	BASEPRI, r7
   210b8:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   210bc:	f06f 000b 	mvn.w	r0, #11
}
   210c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   210c4:	2201      	movs	r2, #1
		anode->data = data;
   210c6:	f8c0 8004 	str.w	r8, [r0, #4]
   210ca:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   210cc:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   210ce:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
   210d2:	b95d      	cbnz	r5, 210ec <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   210d4:	6822      	ldr	r2, [r4, #0]
   210d6:	430a      	orrs	r2, r1
   210d8:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   210da:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   210dc:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   210de:	b96a      	cbnz	r2, 210fc <queue_insert+0x9e>
	list->tail = node;
   210e0:	6060      	str	r0, [r4, #4]
}
   210e2:	e00b      	b.n	210fc <queue_insert+0x9e>
}
   210e4:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   210e6:	f8c8 9000 	str.w	r9, [r8]
}
   210ea:	e7ef      	b.n	210cc <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   210ec:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   210ee:	2a03      	cmp	r2, #3
   210f0:	d810      	bhi.n	21114 <queue_insert+0xb6>
	parent->next_and_flags = cur_flags | (unative_t)child;
   210f2:	6001      	str	r1, [r0, #0]
	return list->tail;
   210f4:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   210f6:	b939      	cbnz	r1, 21108 <queue_insert+0xaa>
	list->head = node;
   210f8:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   210fc:	2104      	movs	r1, #4
   210fe:	f104 0010 	add.w	r0, r4, #16
   21102:	f000 fc83 	bl	21a0c <z_handle_obj_poll_events>
   21106:	e7c8      	b.n	2109a <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   21108:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2110a:	f002 0203 	and.w	r2, r2, #3
   2110e:	4302      	orrs	r2, r0
   21110:	600a      	str	r2, [r1, #0]
   21112:	e7e5      	b.n	210e0 <queue_insert+0x82>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   21114:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   21118:	430a      	orrs	r2, r1
   2111a:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2111c:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2111e:	f002 0203 	and.w	r2, r2, #3
   21122:	ea40 0302 	orr.w	r3, r0, r2
   21126:	602b      	str	r3, [r5, #0]
}
   21128:	e7e8      	b.n	210fc <queue_insert+0x9e>

0002112a <z_queue_node_peek>:
{
   2112a:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2112c:	4604      	mov	r4, r0
   2112e:	b130      	cbz	r0, 2113e <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   21130:	6802      	ldr	r2, [r0, #0]
   21132:	0793      	lsls	r3, r2, #30
   21134:	d003      	beq.n	2113e <z_queue_node_peek+0x14>
		ret = anode->data;
   21136:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   21138:	b109      	cbz	r1, 2113e <z_queue_node_peek+0x14>
			k_free(anode);
   2113a:	f000 fc8d 	bl	21a58 <k_free>
}
   2113e:	4620      	mov	r0, r4
   21140:	bd10      	pop	{r4, pc}

00021142 <z_impl_k_queue_init>:
	list->head = NULL;
   21142:	2300      	movs	r3, #0
	list->tail = NULL;
   21144:	e9c0 3300 	strd	r3, r3, [r0]
   21148:	f100 0308 	add.w	r3, r0, #8
   2114c:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   21150:	f100 0310 	add.w	r3, r0, #16
   21154:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   21158:	4770      	bx	lr

0002115a <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   2115a:	2301      	movs	r3, #1
{
   2115c:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   2115e:	9300      	str	r3, [sp, #0]
   21160:	2300      	movs	r3, #0
{
   21162:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   21164:	4619      	mov	r1, r3
   21166:	f7ff ff7a 	bl	2105e <queue_insert>
}
   2116a:	b003      	add	sp, #12
   2116c:	f85d fb04 	ldr.w	pc, [sp], #4

00021170 <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false, false);
   21170:	2300      	movs	r3, #0
{
   21172:	b507      	push	{r0, r1, r2, lr}
   21174:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   21176:	9300      	str	r3, [sp, #0]
   21178:	4619      	mov	r1, r3
   2117a:	f7ff ff70 	bl	2105e <queue_insert>
}
   2117e:	b003      	add	sp, #12
   21180:	f85d fb04 	ldr.w	pc, [sp], #4

00021184 <k_queue_append_list>:
{
   21184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21188:	4680      	mov	r8, r0
   2118a:	4615      	mov	r5, r2
	CHECKIF(head == NULL || tail == NULL) {
   2118c:	460c      	mov	r4, r1
   2118e:	b3a9      	cbz	r1, 211fc <k_queue_append_list+0x78>
   21190:	b3a2      	cbz	r2, 211fc <k_queue_append_list+0x78>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   21192:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   21196:	f04f 0320 	mov.w	r3, #32
   2119a:	f3ef 8711 	mrs	r7, BASEPRI
   2119e:	f383 8812 	msr	BASEPRI_MAX, r3
   211a2:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   211a6:	4630      	mov	r0, r6
   211a8:	f000 f9e0 	bl	2156c <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   211ac:	b168      	cbz	r0, 211ca <k_queue_append_list+0x46>
   211ae:	f04f 0900 	mov.w	r9, #0
	thread->base.swap_data = data;
   211b2:	6144      	str	r4, [r0, #20]
   211b4:	f8c0 907c 	str.w	r9, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   211b8:	f000 f9a1 	bl	214fe <z_ready_thread>
		head = *(void **)head;
   211bc:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   211be:	4630      	mov	r0, r6
   211c0:	f000 f9d4 	bl	2156c <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   211c4:	b144      	cbz	r4, 211d8 <k_queue_append_list+0x54>
   211c6:	2800      	cmp	r0, #0
   211c8:	d1f3      	bne.n	211b2 <k_queue_append_list+0x2e>
	return list->tail;
   211ca:	f8d8 3004 	ldr.w	r3, [r8, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   211ce:	b97b      	cbnz	r3, 211f0 <k_queue_append_list+0x6c>
	list->head = node;
   211d0:	f8c8 4000 	str.w	r4, [r8]
	list->tail = node;
   211d4:	f8c8 5004 	str.w	r5, [r8, #4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   211d8:	2104      	movs	r1, #4
   211da:	f108 0010 	add.w	r0, r8, #16
   211de:	f000 fc15 	bl	21a0c <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   211e2:	4630      	mov	r0, r6
   211e4:	4639      	mov	r1, r7
   211e6:	f7f9 f82b 	bl	1a240 <z_reschedule>
	return 0;
   211ea:	2000      	movs	r0, #0
}
   211ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   211f0:	681a      	ldr	r2, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   211f2:	f002 0203 	and.w	r2, r2, #3
   211f6:	4314      	orrs	r4, r2
   211f8:	601c      	str	r4, [r3, #0]
}
   211fa:	e7eb      	b.n	211d4 <k_queue_append_list+0x50>
		return -EINVAL;
   211fc:	f06f 0015 	mvn.w	r0, #21
   21200:	e7f4      	b.n	211ec <k_queue_append_list+0x68>

00021202 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   21202:	b15a      	cbz	r2, 2121c <z_impl_k_sem_init+0x1a>
   21204:	428a      	cmp	r2, r1
   21206:	d309      	bcc.n	2121c <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   21208:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2120c:	e9c0 1202 	strd	r1, r2, [r0, #8]
   21210:	e9c0 0000 	strd	r0, r0, [r0]
   21214:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   21218:	2000      	movs	r0, #0
   2121a:	4770      	bx	lr
		return -EINVAL;
   2121c:	f06f 0015 	mvn.w	r0, #21
}
   21220:	4770      	bx	lr

00021222 <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
   21222:	2301      	movs	r3, #1
	return (*flagp & BIT(bit)) != 0U;
   21224:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   21226:	408b      	lsls	r3, r1
   21228:	ea22 0303 	bic.w	r3, r2, r3
   2122c:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   2122e:	fa22 f001 	lsr.w	r0, r2, r1
}
   21232:	f000 0001 	and.w	r0, r0, #1
   21236:	4770      	bx	lr

00021238 <unschedule_locked>:
{
   21238:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2123a:	2103      	movs	r1, #3
{
   2123c:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2123e:	300c      	adds	r0, #12
   21240:	f7ff ffef 	bl	21222 <flag_test_and_clear>
   21244:	4604      	mov	r4, r0
   21246:	b118      	cbz	r0, 21250 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   21248:	f105 0010 	add.w	r0, r5, #16
   2124c:	f000 fa07 	bl	2165e <z_abort_timeout>
}
   21250:	4620      	mov	r0, r4
   21252:	bd38      	pop	{r3, r4, r5, pc}

00021254 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   21254:	b120      	cbz	r0, 21260 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   21256:	2200      	movs	r2, #0
   21258:	3090      	adds	r0, #144	; 0x90
   2125a:	4611      	mov	r1, r2
   2125c:	f000 b9dc 	b.w	21618 <z_sched_wake>
}
   21260:	4770      	bx	lr

00021262 <cancel_async_locked>:
{
   21262:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   21264:	68c3      	ldr	r3, [r0, #12]
{
   21266:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   21268:	f3c3 0640 	ubfx	r6, r3, #1, #1
   2126c:	079b      	lsls	r3, r3, #30
   2126e:	d416      	bmi.n	2129e <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   21270:	6885      	ldr	r5, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   21272:	2102      	movs	r1, #2
   21274:	300c      	adds	r0, #12
   21276:	f7ff ffd4 	bl	21222 <flag_test_and_clear>
   2127a:	b180      	cbz	r0, 2129e <cancel_async_locked+0x3c>
	return list->head;
   2127c:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   21280:	b16a      	cbz	r2, 2129e <cancel_async_locked+0x3c>
   21282:	4294      	cmp	r4, r2
   21284:	d11d      	bne.n	212c2 <cancel_async_locked+0x60>
	return node->next;
   21286:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   21288:	b99e      	cbnz	r6, 212b2 <cancel_async_locked+0x50>
   2128a:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
	list->head = node;
   2128e:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
Z_GENLIST_REMOVE(slist, snode)
   21292:	429c      	cmp	r4, r3
   21294:	d101      	bne.n	2129a <cancel_async_locked+0x38>
	list->tail = node;
   21296:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
	parent->next = child;
   2129a:	2300      	movs	r3, #0
   2129c:	6023      	str	r3, [r4, #0]
	return *flagp;
   2129e:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   212a0:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   212a4:	bf1e      	ittt	ne
   212a6:	f043 0302 	orrne.w	r3, r3, #2
   212aa:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   212ac:	f040 0002 	orrne.w	r0, r0, #2
}
   212b0:	bd70      	pop	{r4, r5, r6, pc}
   212b2:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   212b4:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
   212b8:	4294      	cmp	r4, r2
	list->tail = node;
   212ba:	bf08      	it	eq
   212bc:	f8c5 608c 	streq.w	r6, [r5, #140]	; 0x8c
}
   212c0:	e7eb      	b.n	2129a <cancel_async_locked+0x38>
	return node->next;
   212c2:	4616      	mov	r6, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   212c4:	6812      	ldr	r2, [r2, #0]
   212c6:	e7db      	b.n	21280 <cancel_async_locked+0x1e>

000212c8 <work_timeout>:
{
   212c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   212ca:	4604      	mov	r4, r0
   212cc:	f04f 0320 	mov.w	r3, #32
   212d0:	f3ef 8511 	mrs	r5, BASEPRI
   212d4:	f383 8812 	msr	BASEPRI_MAX, r3
   212d8:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   212dc:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   212de:	f1a0 0610 	sub.w	r6, r0, #16
   212e2:	2103      	movs	r1, #3
   212e4:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   212e6:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   212e8:	f7ff ff9b 	bl	21222 <flag_test_and_clear>
   212ec:	b128      	cbz	r0, 212fa <work_timeout+0x32>
		queue = dw->queue;
   212ee:	69a3      	ldr	r3, [r4, #24]
		(void)submit_to_queue_locked(wp, &queue);
   212f0:	4630      	mov	r0, r6
   212f2:	a901      	add	r1, sp, #4
		queue = dw->queue;
   212f4:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   212f6:	f7f8 fcc1 	bl	19c7c <submit_to_queue_locked>
	__asm__ volatile(
   212fa:	f385 8811 	msr	BASEPRI, r5
   212fe:	f3bf 8f6f 	isb	sy
}
   21302:	b002      	add	sp, #8
   21304:	bd70      	pop	{r4, r5, r6, pc}

00021306 <k_work_init>:
{
   21306:	b538      	push	{r3, r4, r5, lr}
   21308:	4604      	mov	r4, r0
   2130a:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   2130c:	2210      	movs	r2, #16
   2130e:	2100      	movs	r1, #0
   21310:	f000 fbca 	bl	21aa8 <memset>
   21314:	6065      	str	r5, [r4, #4]
}
   21316:	bd38      	pop	{r3, r4, r5, pc}

00021318 <k_work_busy_get>:
	__asm__ volatile(
   21318:	f04f 0220 	mov.w	r2, #32
   2131c:	f3ef 8311 	mrs	r3, BASEPRI
   21320:	f382 8812 	msr	BASEPRI_MAX, r2
   21324:	f3bf 8f6f 	isb	sy
	return flags_get(&work->flags) & K_WORK_MASK;
   21328:	68c0      	ldr	r0, [r0, #12]
   2132a:	f000 000f 	and.w	r0, r0, #15
	__asm__ volatile(
   2132e:	f383 8811 	msr	BASEPRI, r3
   21332:	f3bf 8f6f 	isb	sy
}
   21336:	4770      	bx	lr

00021338 <z_work_submit_to_queue>:
{
   21338:	b513      	push	{r0, r1, r4, lr}
   2133a:	9001      	str	r0, [sp, #4]
   2133c:	4608      	mov	r0, r1
	__asm__ volatile(
   2133e:	f04f 0320 	mov.w	r3, #32
   21342:	f3ef 8411 	mrs	r4, BASEPRI
   21346:	f383 8812 	msr	BASEPRI_MAX, r3
   2134a:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   2134e:	a901      	add	r1, sp, #4
   21350:	f7f8 fc94 	bl	19c7c <submit_to_queue_locked>
	__asm__ volatile(
   21354:	f384 8811 	msr	BASEPRI, r4
   21358:	f3bf 8f6f 	isb	sy
}
   2135c:	b002      	add	sp, #8
   2135e:	bd10      	pop	{r4, pc}

00021360 <k_work_submit_to_queue>:
{
   21360:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   21362:	f7ff ffe9 	bl	21338 <z_work_submit_to_queue>
	if (ret > 0) {
   21366:	1e04      	subs	r4, r0, #0
   21368:	dd09      	ble.n	2137e <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   2136a:	f04f 0320 	mov.w	r3, #32
   2136e:	f3ef 8011 	mrs	r0, BASEPRI
   21372:	f383 8812 	msr	BASEPRI_MAX, r3
   21376:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2137a:	f000 f927 	bl	215cc <z_reschedule_irqlock>
}
   2137e:	4620      	mov	r0, r4
   21380:	bd10      	pop	{r4, pc}

00021382 <k_work_queue_init>:
{
   21382:	b508      	push	{r3, lr}
	*queue = (struct k_work_q) {
   21384:	22a8      	movs	r2, #168	; 0xa8
   21386:	2100      	movs	r1, #0
   21388:	f000 fb8e 	bl	21aa8 <memset>
}
   2138c:	bd08      	pop	{r3, pc}

0002138e <k_work_init_delayable>:
{
   2138e:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   21390:	2230      	movs	r2, #48	; 0x30
{
   21392:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   21394:	2100      	movs	r1, #0
{
   21396:	4604      	mov	r4, r0
	*dwork = (struct k_work_delayable){
   21398:	f000 fb86 	bl	21aa8 <memset>
   2139c:	f44f 7380 	mov.w	r3, #256	; 0x100
   213a0:	6065      	str	r5, [r4, #4]
   213a2:	60e3      	str	r3, [r4, #12]
}
   213a4:	bd38      	pop	{r3, r4, r5, pc}

000213a6 <k_work_delayable_busy_get>:
int k_work_delayable_busy_get(const struct k_work_delayable *dwork)
   213a6:	f7ff bfb7 	b.w	21318 <k_work_busy_get>

000213aa <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   213aa:	b538      	push	{r3, r4, r5, lr}
   213ac:	4604      	mov	r4, r0
   213ae:	f04f 0320 	mov.w	r3, #32
   213b2:	f3ef 8511 	mrs	r5, BASEPRI
   213b6:	f383 8812 	msr	BASEPRI_MAX, r3
   213ba:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   213be:	f7ff ff3b 	bl	21238 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   213c2:	4620      	mov	r0, r4
   213c4:	f7ff ff4d 	bl	21262 <cancel_async_locked>
	__asm__ volatile(
   213c8:	f385 8811 	msr	BASEPRI, r5
   213cc:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   213d0:	bd38      	pop	{r3, r4, r5, pc}

000213d2 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   213d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   213d4:	4604      	mov	r4, r0
   213d6:	460d      	mov	r5, r1
	__asm__ volatile(
   213d8:	f04f 0320 	mov.w	r3, #32
   213dc:	f3ef 8611 	mrs	r6, BASEPRI
   213e0:	f383 8812 	msr	BASEPRI_MAX, r3
   213e4:	f3bf 8f6f 	isb	sy
	return *flagp;
   213e8:	68c3      	ldr	r3, [r0, #12]
   213ea:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   213ee:	2b00      	cmp	r3, #0
   213f0:	bf14      	ite	ne
   213f2:	2701      	movne	r7, #1
   213f4:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   213f6:	d105      	bne.n	21404 <k_work_cancel_delayable_sync+0x32>
	__asm__ volatile(
   213f8:	f386 8811 	msr	BASEPRI, r6
   213fc:	f3bf 8f6f 	isb	sy
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   21400:	4638      	mov	r0, r7
   21402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	(void)unschedule_locked(dwork);
   21404:	f7ff ff18 	bl	21238 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   21408:	4620      	mov	r0, r4
   2140a:	f7ff ff2a 	bl	21262 <cancel_async_locked>
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   2140e:	4629      	mov	r1, r5
   21410:	4620      	mov	r0, r4
   21412:	f7f8 fc15 	bl	19c40 <cancel_sync_locked>
   21416:	f386 8811 	msr	BASEPRI, r6
   2141a:	f3bf 8f6f 	isb	sy
	if (need_wait) {
   2141e:	2800      	cmp	r0, #0
   21420:	d0ee      	beq.n	21400 <k_work_cancel_delayable_sync+0x2e>
	return z_impl_k_sem_take(sem, timeout);
   21422:	f04f 32ff 	mov.w	r2, #4294967295
   21426:	f04f 33ff 	mov.w	r3, #4294967295
   2142a:	f105 0008 	add.w	r0, r5, #8
   2142e:	f7f8 fb29 	bl	19a84 <z_impl_k_sem_take>
   21432:	e7e5      	b.n	21400 <k_work_cancel_delayable_sync+0x2e>

00021434 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   21434:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   21438:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2143a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2143c:	2300      	movs	r3, #0
	node->prev = NULL;
   2143e:	e9c0 3300 	strd	r3, r3, [r0]
}
   21442:	4770      	bx	lr

00021444 <unpend_thread_no_timeout>:
{
   21444:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   21446:	f7ff fff5 	bl	21434 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2144a:	7b43      	ldrb	r3, [r0, #13]
   2144c:	f023 0302 	bic.w	r3, r3, #2
   21450:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   21452:	2300      	movs	r3, #0
   21454:	6083      	str	r3, [r0, #8]
}
   21456:	bd08      	pop	{r3, pc}

00021458 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   21458:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2145c:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   21460:	4283      	cmp	r3, r0
		return b2 - b1;
   21462:	bf14      	ite	ne
   21464:	1ac0      	subne	r0, r0, r3
	return 0;
   21466:	2000      	moveq	r0, #0
}
   21468:	4770      	bx	lr

0002146a <z_thread_timeout>:
{
   2146a:	4601      	mov	r1, r0
   2146c:	b510      	push	{r4, lr}
	__asm__ volatile(
   2146e:	f04f 0320 	mov.w	r3, #32
   21472:	f3ef 8411 	mrs	r4, BASEPRI
   21476:	f383 8812 	msr	BASEPRI_MAX, r3
   2147a:	f3bf 8f6f 	isb	sy
		if (!killed) {
   2147e:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   21482:	f013 0f28 	tst.w	r3, #40	; 0x28
   21486:	d10d      	bne.n	214a4 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   21488:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   2148c:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   2148e:	b10b      	cbz	r3, 21494 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   21490:	f7ff ffd8 	bl	21444 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   21494:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   21498:	f023 0314 	bic.w	r3, r3, #20
   2149c:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   214a0:	f7f8 fd92 	bl	19fc8 <ready_thread>
	__asm__ volatile(
   214a4:	f384 8811 	msr	BASEPRI, r4
   214a8:	f3bf 8f6f 	isb	sy
}
   214ac:	bd10      	pop	{r4, pc}

000214ae <add_to_waitq_locked>:
{
   214ae:	b538      	push	{r3, r4, r5, lr}
   214b0:	4604      	mov	r4, r0
   214b2:	460d      	mov	r5, r1
	unready_thread(thread);
   214b4:	f7f8 fdbc 	bl	1a030 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   214b8:	7b63      	ldrb	r3, [r4, #13]
   214ba:	f043 0302 	orr.w	r3, r3, #2
   214be:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   214c0:	b1e5      	cbz	r5, 214fc <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
   214c2:	60a5      	str	r5, [r4, #8]
	return list->head == list;
   214c4:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   214c6:	429d      	cmp	r5, r3
   214c8:	d109      	bne.n	214de <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
   214ca:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   214cc:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   214d0:	601c      	str	r4, [r3, #0]
	list->tail = node;
   214d2:	606c      	str	r4, [r5, #4]
}
   214d4:	e012      	b.n	214fc <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
   214d6:	686a      	ldr	r2, [r5, #4]
   214d8:	4293      	cmp	r3, r2
   214da:	d0f6      	beq.n	214ca <add_to_waitq_locked+0x1c>
   214dc:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   214de:	2b00      	cmp	r3, #0
   214e0:	d0f3      	beq.n	214ca <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
   214e2:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   214e6:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   214ea:	428a      	cmp	r2, r1
   214ec:	d0f3      	beq.n	214d6 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
   214ee:	4291      	cmp	r1, r2
   214f0:	ddf1      	ble.n	214d6 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
   214f2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   214f4:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   214f8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   214fa:	605c      	str	r4, [r3, #4]
}
   214fc:	bd38      	pop	{r3, r4, r5, pc}

000214fe <z_ready_thread>:
{
   214fe:	b510      	push	{r4, lr}
	__asm__ volatile(
   21500:	f04f 0320 	mov.w	r3, #32
   21504:	f3ef 8411 	mrs	r4, BASEPRI
   21508:	f383 8812 	msr	BASEPRI_MAX, r3
   2150c:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   21510:	f7f8 fd5a 	bl	19fc8 <ready_thread>
	__asm__ volatile(
   21514:	f384 8811 	msr	BASEPRI, r4
   21518:	f3bf 8f6f 	isb	sy
}
   2151c:	bd10      	pop	{r4, pc}

0002151e <z_unpend_thread_no_timeout>:
{
   2151e:	b508      	push	{r3, lr}
	__asm__ volatile(
   21520:	f04f 0320 	mov.w	r3, #32
   21524:	f3ef 8111 	mrs	r1, BASEPRI
   21528:	f383 8812 	msr	BASEPRI_MAX, r3
   2152c:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   21530:	f7ff ff88 	bl	21444 <unpend_thread_no_timeout>
	__asm__ volatile(
   21534:	f381 8811 	msr	BASEPRI, r1
   21538:	f3bf 8f6f 	isb	sy
}
   2153c:	bd08      	pop	{r3, pc}

0002153e <z_unpend1_no_timeout>:
{
   2153e:	b508      	push	{r3, lr}
   21540:	4603      	mov	r3, r0
	__asm__ volatile(
   21542:	f04f 0220 	mov.w	r2, #32
   21546:	f3ef 8111 	mrs	r1, BASEPRI
   2154a:	f382 8812 	msr	BASEPRI_MAX, r2
   2154e:	f3bf 8f6f 	isb	sy
	return list->head == list;
   21552:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21554:	4283      	cmp	r3, r0
   21556:	d007      	beq.n	21568 <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
   21558:	b108      	cbz	r0, 2155e <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
   2155a:	f7ff ff73 	bl	21444 <unpend_thread_no_timeout>
	__asm__ volatile(
   2155e:	f381 8811 	msr	BASEPRI, r1
   21562:	f3bf 8f6f 	isb	sy
}
   21566:	bd08      	pop	{r3, pc}
   21568:	2000      	movs	r0, #0
   2156a:	e7f8      	b.n	2155e <z_unpend1_no_timeout+0x20>

0002156c <z_unpend_first_thread>:
{
   2156c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2156e:	f04f 0320 	mov.w	r3, #32
   21572:	f3ef 8511 	mrs	r5, BASEPRI
   21576:	f383 8812 	msr	BASEPRI_MAX, r3
   2157a:	f3bf 8f6f 	isb	sy
	return list->head == list;
   2157e:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21580:	42a0      	cmp	r0, r4
   21582:	d00d      	beq.n	215a0 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
   21584:	b134      	cbz	r4, 21594 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
   21586:	4620      	mov	r0, r4
   21588:	f7ff ff5c 	bl	21444 <unpend_thread_no_timeout>
   2158c:	f104 0018 	add.w	r0, r4, #24
   21590:	f000 f865 	bl	2165e <z_abort_timeout>
	__asm__ volatile(
   21594:	f385 8811 	msr	BASEPRI, r5
   21598:	f3bf 8f6f 	isb	sy
}
   2159c:	4620      	mov	r0, r4
   2159e:	bd38      	pop	{r3, r4, r5, pc}
   215a0:	2400      	movs	r4, #0
   215a2:	e7f7      	b.n	21594 <z_unpend_first_thread+0x28>

000215a4 <z_unpend_thread>:
{
   215a4:	b510      	push	{r4, lr}
	__asm__ volatile(
   215a6:	f04f 0320 	mov.w	r3, #32
   215aa:	f3ef 8411 	mrs	r4, BASEPRI
   215ae:	f383 8812 	msr	BASEPRI_MAX, r3
   215b2:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   215b6:	f7ff ff45 	bl	21444 <unpend_thread_no_timeout>
	__asm__ volatile(
   215ba:	f384 8811 	msr	BASEPRI, r4
   215be:	f3bf 8f6f 	isb	sy
}
   215c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   215c6:	3018      	adds	r0, #24
   215c8:	f000 b849 	b.w	2165e <z_abort_timeout>

000215cc <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   215cc:	4603      	mov	r3, r0
   215ce:	b920      	cbnz	r0, 215da <z_reschedule_irqlock+0xe>
   215d0:	f3ef 8205 	mrs	r2, IPSR
   215d4:	b90a      	cbnz	r2, 215da <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   215d6:	f7ec b93f 	b.w	d858 <arch_swap>
   215da:	f383 8811 	msr	BASEPRI, r3
   215de:	f3bf 8f6f 	isb	sy
}
   215e2:	4770      	bx	lr

000215e4 <z_reschedule_unlocked>:
	__asm__ volatile(
   215e4:	f04f 0320 	mov.w	r3, #32
   215e8:	f3ef 8011 	mrs	r0, BASEPRI
   215ec:	f383 8812 	msr	BASEPRI_MAX, r3
   215f0:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   215f4:	f7ff bfea 	b.w	215cc <z_reschedule_irqlock>

000215f8 <z_unpend_all>:
{
   215f8:	b538      	push	{r3, r4, r5, lr}
   215fa:	4605      	mov	r5, r0
	int need_sched = 0;
   215fc:	2000      	movs	r0, #0
	return list->head == list;
   215fe:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21600:	42a5      	cmp	r5, r4
   21602:	d000      	beq.n	21606 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   21604:	b904      	cbnz	r4, 21608 <z_unpend_all+0x10>
}
   21606:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   21608:	4620      	mov	r0, r4
   2160a:	f7ff ffcb 	bl	215a4 <z_unpend_thread>
		z_ready_thread(thread);
   2160e:	4620      	mov	r0, r4
   21610:	f7ff ff75 	bl	214fe <z_ready_thread>
		need_sched = 1;
   21614:	2001      	movs	r0, #1
   21616:	e7f2      	b.n	215fe <z_unpend_all+0x6>

00021618 <z_sched_wake>:
{
   21618:	b538      	push	{r3, r4, r5, lr}
   2161a:	f04f 0320 	mov.w	r3, #32
   2161e:	f3ef 8511 	mrs	r5, BASEPRI
   21622:	f383 8812 	msr	BASEPRI_MAX, r3
   21626:	f3bf 8f6f 	isb	sy
	return list->head == list;
   2162a:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2162c:	42a0      	cmp	r0, r4
   2162e:	d012      	beq.n	21656 <z_sched_wake+0x3e>
		if (thread != NULL) {
   21630:	b19c      	cbz	r4, 2165a <z_sched_wake+0x42>
   21632:	67e1      	str	r1, [r4, #124]	; 0x7c
   21634:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
   21636:	4620      	mov	r0, r4
   21638:	f7ff ff04 	bl	21444 <unpend_thread_no_timeout>
   2163c:	f104 0018 	add.w	r0, r4, #24
   21640:	f000 f80d 	bl	2165e <z_abort_timeout>
			ready_thread(thread);
   21644:	4620      	mov	r0, r4
   21646:	f7f8 fcbf 	bl	19fc8 <ready_thread>
			ret = true;
   2164a:	2001      	movs	r0, #1
	__asm__ volatile(
   2164c:	f385 8811 	msr	BASEPRI, r5
   21650:	f3bf 8f6f 	isb	sy
}
   21654:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
   21656:	2000      	movs	r0, #0
   21658:	e7f8      	b.n	2164c <z_sched_wake+0x34>
   2165a:	4620      	mov	r0, r4
   2165c:	e7f6      	b.n	2164c <z_sched_wake+0x34>

0002165e <z_abort_timeout>:
{
   2165e:	b510      	push	{r4, lr}
	__asm__ volatile(
   21660:	f04f 0220 	mov.w	r2, #32
   21664:	f3ef 8411 	mrs	r4, BASEPRI
   21668:	f382 8812 	msr	BASEPRI_MAX, r2
   2166c:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   21670:	6803      	ldr	r3, [r0, #0]
   21672:	b13b      	cbz	r3, 21684 <z_abort_timeout+0x26>
			remove_timeout(to);
   21674:	f7f8 ffe2 	bl	1a63c <remove_timeout>
			ret = 0;
   21678:	2000      	movs	r0, #0
	__asm__ volatile(
   2167a:	f384 8811 	msr	BASEPRI, r4
   2167e:	f3bf 8f6f 	isb	sy
}
   21682:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   21684:	f06f 0015 	mvn.w	r0, #21
   21688:	e7f7      	b.n	2167a <z_abort_timeout+0x1c>

0002168a <z_get_next_timeout_expiry>:
{
   2168a:	b510      	push	{r4, lr}
	__asm__ volatile(
   2168c:	f04f 0320 	mov.w	r3, #32
   21690:	f3ef 8411 	mrs	r4, BASEPRI
   21694:	f383 8812 	msr	BASEPRI_MAX, r3
   21698:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   2169c:	f7f8 ffa6 	bl	1a5ec <next_timeout>
	__asm__ volatile(
   216a0:	f384 8811 	msr	BASEPRI, r4
   216a4:	f3bf 8f6f 	isb	sy
}
   216a8:	bd10      	pop	{r4, pc}

000216aa <z_set_timeout_expiry>:
{
   216aa:	b570      	push	{r4, r5, r6, lr}
   216ac:	4604      	mov	r4, r0
   216ae:	460d      	mov	r5, r1
	__asm__ volatile(
   216b0:	f04f 0320 	mov.w	r3, #32
   216b4:	f3ef 8611 	mrs	r6, BASEPRI
   216b8:	f383 8812 	msr	BASEPRI_MAX, r3
   216bc:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   216c0:	f7f8 ff94 	bl	1a5ec <next_timeout>
			      || (ticks <= next_to);
   216c4:	2801      	cmp	r0, #1
   216c6:	dd07      	ble.n	216d8 <z_set_timeout_expiry+0x2e>
   216c8:	42a0      	cmp	r0, r4
   216ca:	db05      	blt.n	216d8 <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   216cc:	42a0      	cmp	r0, r4
   216ce:	4629      	mov	r1, r5
   216d0:	bfa8      	it	ge
   216d2:	4620      	movge	r0, r4
   216d4:	f7f6 f9be 	bl	17a54 <sys_clock_set_timeout>
	__asm__ volatile(
   216d8:	f386 8811 	msr	BASEPRI, r6
   216dc:	f3bf 8f6f 	isb	sy
}
   216e0:	bd70      	pop	{r4, r5, r6, pc}

000216e2 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   216e2:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   216e4:	f7f9 f8a0 	bl	1a828 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   216e8:	bd08      	pop	{r3, pc}

000216ea <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   216ea:	f7f9 b89d 	b.w	1a828 <sys_clock_tick_get>

000216ee <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   216ee:	b108      	cbz	r0, 216f4 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   216f0:	f7ea ba84 	b.w	bbfc <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   216f4:	4770      	bx	lr

000216f6 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   216f6:	f1b1 3fff 	cmp.w	r1, #4294967295
   216fa:	bf08      	it	eq
   216fc:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   21700:	b538      	push	{r3, r4, r5, lr}
   21702:	460c      	mov	r4, r1
   21704:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   21706:	d014      	beq.n	21732 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   21708:	4308      	orrs	r0, r1
   2170a:	d103      	bne.n	21714 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   2170c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   21710:	f7f9 b88a 	b.w	1a828 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   21714:	f06f 0001 	mvn.w	r0, #1
   21718:	f04f 33ff 	mov.w	r3, #4294967295
   2171c:	1b40      	subs	r0, r0, r5
   2171e:	eb63 0101 	sbc.w	r1, r3, r1
   21722:	2900      	cmp	r1, #0
   21724:	da04      	bge.n	21730 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   21726:	f7f9 f87f 	bl	1a828 <sys_clock_tick_get>
   2172a:	1940      	adds	r0, r0, r5
   2172c:	eb41 0104 	adc.w	r1, r1, r4
}
   21730:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   21732:	f04f 30ff 	mov.w	r0, #4294967295
   21736:	4601      	mov	r1, r0
   21738:	e7fa      	b.n	21730 <sys_clock_timeout_end_calc+0x3a>

0002173a <k_timer_init>:
	timer->status = 0U;
   2173a:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   2173c:	e9c0 1208 	strd	r1, r2, [r0, #32]
   21740:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   21744:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   21748:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   2174c:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   2174e:	6343      	str	r3, [r0, #52]	; 0x34
}
   21750:	4770      	bx	lr

00021752 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   21752:	b510      	push	{r4, lr}
   21754:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   21756:	f7ff ff82 	bl	2165e <z_abort_timeout>

	if (inactive) {
   2175a:	b9b0      	cbnz	r0, 2178a <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   2175c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2175e:	b10b      	cbz	r3, 21764 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   21760:	4620      	mov	r0, r4
   21762:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   21764:	f104 0018 	add.w	r0, r4, #24
   21768:	f7ff fee9 	bl	2153e <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   2176c:	b168      	cbz	r0, 2178a <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   2176e:	f7ff fec6 	bl	214fe <z_ready_thread>
	__asm__ volatile(
   21772:	f04f 0320 	mov.w	r3, #32
   21776:	f3ef 8011 	mrs	r0, BASEPRI
   2177a:	f383 8812 	msr	BASEPRI_MAX, r3
   2177e:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   21782:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   21786:	f7ff bf21 	b.w	215cc <z_reschedule_irqlock>
   2178a:	bd10      	pop	{r4, pc}

0002178c <add_event>:
{
   2178c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2178e:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   21790:	e9d0 1300 	ldrd	r1, r3, [r0]
   21794:	4288      	cmp	r0, r1
   21796:	4604      	mov	r4, r0
   21798:	d105      	bne.n	217a6 <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   2179a:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   2179c:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   217a0:	601d      	str	r5, [r3, #0]
	list->tail = node;
   217a2:	6065      	str	r5, [r4, #4]
   217a4:	e01d      	b.n	217e2 <add_event+0x56>
	if ((pending == NULL) ||
   217a6:	2b00      	cmp	r3, #0
   217a8:	d0f7      	beq.n	2179a <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   217aa:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   217ac:	b100      	cbz	r0, 217b0 <add_event+0x24>
   217ae:	3860      	subs	r0, #96	; 0x60
   217b0:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   217b4:	4639      	mov	r1, r7
   217b6:	f7ff fe4f 	bl	21458 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   217ba:	2800      	cmp	r0, #0
   217bc:	dced      	bgt.n	2179a <add_event+0xe>
	return list->head == list;
   217be:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   217c0:	42b4      	cmp	r4, r6
   217c2:	d0ea      	beq.n	2179a <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   217c4:	2e00      	cmp	r6, #0
   217c6:	d0e8      	beq.n	2179a <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   217c8:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   217ca:	b101      	cbz	r1, 217ce <add_event+0x42>
   217cc:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   217ce:	4638      	mov	r0, r7
   217d0:	f7ff fe42 	bl	21458 <z_sched_prio_cmp>
   217d4:	2800      	cmp	r0, #0
   217d6:	dd05      	ble.n	217e4 <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   217d8:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   217da:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   217de:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   217e0:	6075      	str	r5, [r6, #4]
}
   217e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   217e4:	6863      	ldr	r3, [r4, #4]
   217e6:	429e      	cmp	r6, r3
   217e8:	d0d7      	beq.n	2179a <add_event+0xe>
   217ea:	6836      	ldr	r6, [r6, #0]
   217ec:	e7ea      	b.n	217c4 <add_event+0x38>

000217ee <register_events>:
{
   217ee:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   217f2:	2500      	movs	r5, #0
{
   217f4:	468b      	mov	fp, r1
   217f6:	4614      	mov	r4, r2
   217f8:	461f      	mov	r7, r3
   217fa:	4682      	mov	sl, r0
	int events_registered = 0;
   217fc:	462e      	mov	r6, r5
	event->poller = NULL;
   217fe:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   21800:	455d      	cmp	r5, fp
   21802:	db02      	blt.n	2180a <register_events+0x1c>
}
   21804:	4630      	mov	r0, r6
   21806:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2180a:	f04f 0320 	mov.w	r3, #32
   2180e:	f3ef 8911 	mrs	r9, BASEPRI
   21812:	f383 8812 	msr	BASEPRI_MAX, r3
   21816:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   2181a:	f89a 300d 	ldrb.w	r3, [sl, #13]
   2181e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   21822:	3b01      	subs	r3, #1
   21824:	2b07      	cmp	r3, #7
   21826:	d80f      	bhi.n	21848 <register_events+0x5a>
   21828:	e8df f003 	tbb	[pc, r3]
   2182c:	0a0e041e 	.word	0x0a0e041e
   21830:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
   21834:	f8da 3010 	ldr.w	r3, [sl, #16]
   21838:	689b      	ldr	r3, [r3, #8]
   2183a:	b12b      	cbz	r3, 21848 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   2183c:	2302      	movs	r3, #2
   2183e:	e020      	b.n	21882 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   21840:	f8da 3010 	ldr.w	r3, [sl, #16]
   21844:	681b      	ldr	r3, [r3, #0]
   21846:	bb8b      	cbnz	r3, 218ac <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   21848:	bb47      	cbnz	r7, 2189c <register_events+0xae>
   2184a:	7823      	ldrb	r3, [r4, #0]
   2184c:	b333      	cbz	r3, 2189c <register_events+0xae>
	switch (event->type) {
   2184e:	f89a 300d 	ldrb.w	r3, [sl, #13]
   21852:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   21856:	3b01      	subs	r3, #1
   21858:	2b07      	cmp	r3, #7
   2185a:	d830      	bhi.n	218be <register_events+0xd0>
   2185c:	e8df f003 	tbb	[pc, r3]
   21860:	282f2833 	.word	0x282f2833
   21864:	382f2f2f 	.word	0x382f2f2f
		if (event->signal->signaled != 0U) {
   21868:	f8da 3010 	ldr.w	r3, [sl, #16]
   2186c:	689b      	ldr	r3, [r3, #8]
   2186e:	2b00      	cmp	r3, #0
   21870:	d0ea      	beq.n	21848 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   21872:	2301      	movs	r3, #1
   21874:	e005      	b.n	21882 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   21876:	f8da 3010 	ldr.w	r3, [sl, #16]
   2187a:	6a1b      	ldr	r3, [r3, #32]
   2187c:	2b00      	cmp	r3, #0
   2187e:	d0e3      	beq.n	21848 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   21880:	2310      	movs	r3, #16
	event->state |= state;
   21882:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   21886:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   2188a:	f3c2 3186 	ubfx	r1, r2, #14, #7
   2188e:	430b      	orrs	r3, r1
   21890:	f363 3294 	bfi	r2, r3, #14, #7
   21894:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   21898:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   2189c:	f389 8811 	msr	BASEPRI, r9
   218a0:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   218a4:	3501      	adds	r5, #1
   218a6:	f10a 0a14 	add.w	sl, sl, #20
   218aa:	e7a9      	b.n	21800 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   218ac:	2304      	movs	r3, #4
   218ae:	e7e8      	b.n	21882 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   218b0:	4622      	mov	r2, r4
   218b2:	4651      	mov	r1, sl
   218b4:	f8da 0010 	ldr.w	r0, [sl, #16]
   218b8:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   218ba:	f7ff ff67 	bl	2178c <add_event>
	event->poller = poller;
   218be:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   218c2:	3601      	adds	r6, #1
   218c4:	e7ea      	b.n	2189c <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   218c6:	4622      	mov	r2, r4
   218c8:	4651      	mov	r1, sl
   218ca:	f8da 0010 	ldr.w	r0, [sl, #16]
   218ce:	e7f4      	b.n	218ba <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   218d0:	f8da 0010 	ldr.w	r0, [sl, #16]
   218d4:	4622      	mov	r2, r4
   218d6:	4651      	mov	r1, sl
   218d8:	3024      	adds	r0, #36	; 0x24
   218da:	e7ee      	b.n	218ba <register_events+0xcc>

000218dc <signal_poll_event>:
{
   218dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   218e0:	6884      	ldr	r4, [r0, #8]
{
   218e2:	4605      	mov	r5, r0
   218e4:	460e      	mov	r6, r1
	if (poller != NULL) {
   218e6:	b144      	cbz	r4, 218fa <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   218e8:	7863      	ldrb	r3, [r4, #1]
   218ea:	2b01      	cmp	r3, #1
   218ec:	d12e      	bne.n	2194c <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   218ee:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   218f2:	f013 0302 	ands.w	r3, r3, #2
   218f6:	d10a      	bne.n	2190e <signal_poll_event+0x32>
		poller->is_polling = false;
   218f8:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   218fa:	2000      	movs	r0, #0
	event->state |= state;
   218fc:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   218fe:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   21900:	f3c3 3286 	ubfx	r2, r3, #14, #7
   21904:	4316      	orrs	r6, r2
   21906:	f366 3394 	bfi	r3, r6, #14, #7
   2190a:	60eb      	str	r3, [r5, #12]
	return retcode;
   2190c:	e03e      	b.n	2198c <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   2190e:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   21912:	f1b3 3fff 	cmp.w	r3, #4294967295
   21916:	bf08      	it	eq
   21918:	f112 0f02 	cmneq.w	r2, #2
   2191c:	d032      	beq.n	21984 <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2191e:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   21922:	4640      	mov	r0, r8
   21924:	f7ff fe3e 	bl	215a4 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   21928:	2e08      	cmp	r6, #8
   2192a:	bf0c      	ite	eq
   2192c:	f06f 0303 	mvneq.w	r3, #3
   21930:	2300      	movne	r3, #0
   21932:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   21934:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   21938:	06db      	lsls	r3, r3, #27
   2193a:	d109      	bne.n	21950 <signal_poll_event+0x74>
   2193c:	f854 7c48 	ldr.w	r7, [r4, #-72]
   21940:	b937      	cbnz	r7, 21950 <signal_poll_event+0x74>
	z_ready_thread(thread);
   21942:	4640      	mov	r0, r8
   21944:	f7ff fddb 	bl	214fe <z_ready_thread>
		poller->is_polling = false;
   21948:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   2194a:	e7d6      	b.n	218fa <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   2194c:	2b02      	cmp	r3, #2
   2194e:	d001      	beq.n	21954 <signal_poll_event+0x78>
		poller->is_polling = false;
   21950:	2300      	movs	r3, #0
   21952:	e7d1      	b.n	218f8 <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   21954:	7823      	ldrb	r3, [r4, #0]
   21956:	2b00      	cmp	r3, #0
   21958:	d0cf      	beq.n	218fa <signal_poll_event+0x1e>
   2195a:	f854 7c04 	ldr.w	r7, [r4, #-4]
   2195e:	2f00      	cmp	r7, #0
   21960:	d0f2      	beq.n	21948 <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   21962:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   21966:	f1a4 0914 	sub.w	r9, r4, #20
   2196a:	f104 0014 	add.w	r0, r4, #20
   2196e:	f7ff fe76 	bl	2165e <z_abort_timeout>
		z_work_submit_to_queue(work_q, &twork->work);
   21972:	4649      	mov	r1, r9
   21974:	4638      	mov	r0, r7
		twork->poll_result = 0;
   21976:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   2197a:	f7ff fcdd 	bl	21338 <z_work_submit_to_queue>
		poller->is_polling = false;
   2197e:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   21982:	e7ba      	b.n	218fa <signal_poll_event+0x1e>
		poller->is_polling = false;
   21984:	2300      	movs	r3, #0
		return -EAGAIN;
   21986:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   2198a:	7023      	strb	r3, [r4, #0]
}
   2198c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00021990 <clear_event_registrations>:
	while (num_events--) {
   21990:	2314      	movs	r3, #20
{
   21992:	b5f0      	push	{r4, r5, r6, r7, lr}
	event->poller = NULL;
   21994:	2400      	movs	r4, #0
	switch (event->type) {
   21996:	f44f 768b 	mov.w	r6, #278	; 0x116
   2199a:	fb03 0001 	mla	r0, r3, r1, r0
	while (num_events--) {
   2199e:	b901      	cbnz	r1, 219a2 <clear_event_registrations+0x12>
}
   219a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   219a2:	f810 3c07 	ldrb.w	r3, [r0, #-7]
   219a6:	f1a0 0714 	sub.w	r7, r0, #20
   219aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   219ae:	2b08      	cmp	r3, #8
	event->poller = NULL;
   219b0:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   219b4:	d80c      	bhi.n	219d0 <clear_event_registrations+0x40>
   219b6:	fa26 f303 	lsr.w	r3, r6, r3
   219ba:	07db      	lsls	r3, r3, #31
   219bc:	d508      	bpl.n	219d0 <clear_event_registrations+0x40>
	return node->next != NULL;
   219be:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   219c2:	b12b      	cbz	r3, 219d0 <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   219c4:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   219c8:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   219ca:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   219cc:	e940 4405 	strd	r4, r4, [r0, #-20]
   219d0:	f382 8811 	msr	BASEPRI, r2
   219d4:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   219d8:	f04f 0320 	mov.w	r3, #32
   219dc:	f3ef 8211 	mrs	r2, BASEPRI
   219e0:	f383 8812 	msr	BASEPRI_MAX, r3
   219e4:	f3bf 8f6f 	isb	sy
   219e8:	4638      	mov	r0, r7
   219ea:	3901      	subs	r1, #1
   219ec:	e7d7      	b.n	2199e <clear_event_registrations+0xe>

000219ee <k_poll_event_init>:
{
   219ee:	b510      	push	{r4, lr}
	event->poller = NULL;
   219f0:	2400      	movs	r4, #0
	event->type = type;
   219f2:	0552      	lsls	r2, r2, #21
   219f4:	0209      	lsls	r1, r1, #8
   219f6:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   219fa:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
   219fe:	430a      	orrs	r2, r1
   21a00:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   21a02:	6084      	str	r4, [r0, #8]
	event->type = type;
   21a04:	430a      	orrs	r2, r1
	event->obj = obj;
   21a06:	e9c0 2303 	strd	r2, r3, [r0, #12]
}
   21a0a:	bd10      	pop	{r4, pc}

00021a0c <z_handle_obj_poll_events>:
{
   21a0c:	4603      	mov	r3, r0
	return list->head == list;
   21a0e:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   21a10:	4283      	cmp	r3, r0
   21a12:	d008      	beq.n	21a26 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   21a14:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   21a18:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   21a1a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   21a1c:	2300      	movs	r3, #0
	node->prev = NULL;
   21a1e:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   21a22:	f7ff bf5b 	b.w	218dc <signal_poll_event>
}
   21a26:	4770      	bx	lr

00021a28 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   21a28:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   21a2a:	e9c0 0000 	strd	r0, r0, [r0]
   21a2e:	6083      	str	r3, [r0, #8]
}
   21a30:	4770      	bx	lr

00021a32 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   21a32:	3204      	adds	r2, #4
{
   21a34:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   21a36:	4604      	mov	r4, r0
   21a38:	d208      	bcs.n	21a4c <z_heap_aligned_alloc+0x1a>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   21a3a:	2600      	movs	r6, #0
   21a3c:	2700      	movs	r7, #0
   21a3e:	f041 0104 	orr.w	r1, r1, #4
   21a42:	e9cd 6700 	strd	r6, r7, [sp]
   21a46:	f7ff fa3e 	bl	20ec6 <k_heap_aligned_alloc>
	if (mem == NULL) {
   21a4a:	b910      	cbnz	r0, 21a52 <z_heap_aligned_alloc+0x20>
		return NULL;
   21a4c:	2000      	movs	r0, #0
}
   21a4e:	b002      	add	sp, #8
   21a50:	bdd0      	pop	{r4, r6, r7, pc}
	*heap_ref = heap;
   21a52:	f840 4b04 	str.w	r4, [r0], #4
	return mem;
   21a56:	e7fa      	b.n	21a4e <z_heap_aligned_alloc+0x1c>

00021a58 <k_free>:
	if (ptr != NULL) {
   21a58:	b120      	cbz	r0, 21a64 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   21a5a:	1f01      	subs	r1, r0, #4
   21a5c:	f850 0c04 	ldr.w	r0, [r0, #-4]
   21a60:	f7ff ba7e 	b.w	20f60 <k_heap_free>
}
   21a64:	4770      	bx	lr

00021a66 <k_malloc>:
{
   21a66:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   21a68:	2004      	movs	r0, #4
   21a6a:	f7f9 b831 	b.w	1aad0 <k_aligned_alloc>

00021a6e <memcmp>:
   21a6e:	3901      	subs	r1, #1
   21a70:	4402      	add	r2, r0
   21a72:	b510      	push	{r4, lr}
   21a74:	4290      	cmp	r0, r2
   21a76:	d101      	bne.n	21a7c <memcmp+0xe>
   21a78:	2000      	movs	r0, #0
   21a7a:	e005      	b.n	21a88 <memcmp+0x1a>
   21a7c:	7803      	ldrb	r3, [r0, #0]
   21a7e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   21a82:	42a3      	cmp	r3, r4
   21a84:	d001      	beq.n	21a8a <memcmp+0x1c>
   21a86:	1b18      	subs	r0, r3, r4
   21a88:	bd10      	pop	{r4, pc}
   21a8a:	3001      	adds	r0, #1
   21a8c:	e7f2      	b.n	21a74 <memcmp+0x6>

00021a8e <memcpy>:
   21a8e:	440a      	add	r2, r1
   21a90:	1e43      	subs	r3, r0, #1
   21a92:	4291      	cmp	r1, r2
   21a94:	d100      	bne.n	21a98 <memcpy+0xa>
   21a96:	4770      	bx	lr
   21a98:	b510      	push	{r4, lr}
   21a9a:	f811 4b01 	ldrb.w	r4, [r1], #1
   21a9e:	4291      	cmp	r1, r2
   21aa0:	f803 4f01 	strb.w	r4, [r3, #1]!
   21aa4:	d1f9      	bne.n	21a9a <memcpy+0xc>
   21aa6:	bd10      	pop	{r4, pc}

00021aa8 <memset>:
   21aa8:	4402      	add	r2, r0
   21aaa:	4603      	mov	r3, r0
   21aac:	4293      	cmp	r3, r2
   21aae:	d100      	bne.n	21ab2 <memset+0xa>
   21ab0:	4770      	bx	lr
   21ab2:	f803 1b01 	strb.w	r1, [r3], #1
   21ab6:	e7f9      	b.n	21aac <memset+0x4>

00021ab8 <_calloc_r>:
   21ab8:	b538      	push	{r3, r4, r5, lr}
   21aba:	fb02 f501 	mul.w	r5, r2, r1
   21abe:	4629      	mov	r1, r5
   21ac0:	f7f9 f884 	bl	1abcc <_malloc_r>
   21ac4:	4604      	mov	r4, r0
   21ac6:	b118      	cbz	r0, 21ad0 <_calloc_r+0x18>
   21ac8:	462a      	mov	r2, r5
   21aca:	2100      	movs	r1, #0
   21acc:	f7ff ffec 	bl	21aa8 <memset>
   21ad0:	4620      	mov	r0, r4
   21ad2:	bd38      	pop	{r3, r4, r5, pc}

00021ad4 <__cvt>:
   21ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21ad8:	b089      	sub	sp, #36	; 0x24
   21ada:	2b00      	cmp	r3, #0
   21adc:	461d      	mov	r5, r3
   21ade:	4614      	mov	r4, r2
   21ae0:	bfba      	itte	lt
   21ae2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
   21ae6:	4614      	movlt	r4, r2
   21ae8:	2300      	movge	r3, #0
   21aea:	9a14      	ldr	r2, [sp, #80]	; 0x50
   21aec:	bfbc      	itt	lt
   21aee:	461d      	movlt	r5, r3
   21af0:	232d      	movlt	r3, #45	; 0x2d
   21af2:	e9dd 9815 	ldrd	r9, r8, [sp, #84]	; 0x54
   21af6:	e9dd 6b12 	ldrd	r6, fp, [sp, #72]	; 0x48
   21afa:	f028 0a20 	bic.w	sl, r8, #32
   21afe:	7013      	strb	r3, [r2, #0]
   21b00:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   21b04:	d005      	beq.n	21b12 <__cvt+0x3e>
   21b06:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
   21b0a:	d100      	bne.n	21b0e <__cvt+0x3a>
   21b0c:	3601      	adds	r6, #1
   21b0e:	2302      	movs	r3, #2
   21b10:	e000      	b.n	21b14 <__cvt+0x40>
   21b12:	2303      	movs	r3, #3
   21b14:	aa07      	add	r2, sp, #28
   21b16:	9204      	str	r2, [sp, #16]
   21b18:	aa06      	add	r2, sp, #24
   21b1a:	e9cd 3600 	strd	r3, r6, [sp]
   21b1e:	e9cd 9202 	strd	r9, r2, [sp, #8]
   21b22:	462b      	mov	r3, r5
   21b24:	4622      	mov	r2, r4
   21b26:	f7e7 ff2b 	bl	9980 <_dtoa_r>
   21b2a:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
   21b2e:	4607      	mov	r7, r0
   21b30:	d119      	bne.n	21b66 <__cvt+0x92>
   21b32:	f01b 0f01 	tst.w	fp, #1
   21b36:	d00e      	beq.n	21b56 <__cvt+0x82>
   21b38:	eb07 0806 	add.w	r8, r7, r6
   21b3c:	2200      	movs	r2, #0
   21b3e:	2300      	movs	r3, #0
   21b40:	4620      	mov	r0, r4
   21b42:	4629      	mov	r1, r5
   21b44:	f7e7 fa3a 	bl	8fbc <__aeabi_dcmpeq>
   21b48:	b108      	cbz	r0, 21b4e <__cvt+0x7a>
   21b4a:	f8cd 801c 	str.w	r8, [sp, #28]
   21b4e:	2230      	movs	r2, #48	; 0x30
   21b50:	9b07      	ldr	r3, [sp, #28]
   21b52:	4543      	cmp	r3, r8
   21b54:	d321      	bcc.n	21b9a <__cvt+0xc6>
   21b56:	9b07      	ldr	r3, [sp, #28]
   21b58:	4638      	mov	r0, r7
   21b5a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   21b5c:	1bdb      	subs	r3, r3, r7
   21b5e:	6013      	str	r3, [r2, #0]
   21b60:	b009      	add	sp, #36	; 0x24
   21b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21b66:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   21b6a:	d0e2      	beq.n	21b32 <__cvt+0x5e>
   21b6c:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   21b70:	eb00 0806 	add.w	r8, r0, r6
   21b74:	d1e2      	bne.n	21b3c <__cvt+0x68>
   21b76:	7803      	ldrb	r3, [r0, #0]
   21b78:	2b30      	cmp	r3, #48	; 0x30
   21b7a:	d10a      	bne.n	21b92 <__cvt+0xbe>
   21b7c:	2200      	movs	r2, #0
   21b7e:	2300      	movs	r3, #0
   21b80:	4620      	mov	r0, r4
   21b82:	4629      	mov	r1, r5
   21b84:	f7e7 fa1a 	bl	8fbc <__aeabi_dcmpeq>
   21b88:	b918      	cbnz	r0, 21b92 <__cvt+0xbe>
   21b8a:	f1c6 0601 	rsb	r6, r6, #1
   21b8e:	f8c9 6000 	str.w	r6, [r9]
   21b92:	f8d9 3000 	ldr.w	r3, [r9]
   21b96:	4498      	add	r8, r3
   21b98:	e7d0      	b.n	21b3c <__cvt+0x68>
   21b9a:	1c59      	adds	r1, r3, #1
   21b9c:	9107      	str	r1, [sp, #28]
   21b9e:	701a      	strb	r2, [r3, #0]
   21ba0:	e7d6      	b.n	21b50 <__cvt+0x7c>

00021ba2 <__exponent>:
   21ba2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   21ba4:	2900      	cmp	r1, #0
   21ba6:	7002      	strb	r2, [r0, #0]
   21ba8:	bfba      	itte	lt
   21baa:	4249      	neglt	r1, r1
   21bac:	232d      	movlt	r3, #45	; 0x2d
   21bae:	232b      	movge	r3, #43	; 0x2b
   21bb0:	2909      	cmp	r1, #9
   21bb2:	7043      	strb	r3, [r0, #1]
   21bb4:	dd28      	ble.n	21c08 <__exponent+0x66>
   21bb6:	f10d 0307 	add.w	r3, sp, #7
   21bba:	270a      	movs	r7, #10
   21bbc:	461d      	mov	r5, r3
   21bbe:	461a      	mov	r2, r3
   21bc0:	3b01      	subs	r3, #1
   21bc2:	fbb1 f6f7 	udiv	r6, r1, r7
   21bc6:	fb07 1416 	mls	r4, r7, r6, r1
   21bca:	3430      	adds	r4, #48	; 0x30
   21bcc:	f802 4c01 	strb.w	r4, [r2, #-1]
   21bd0:	460c      	mov	r4, r1
   21bd2:	4631      	mov	r1, r6
   21bd4:	2c63      	cmp	r4, #99	; 0x63
   21bd6:	dcf2      	bgt.n	21bbe <__exponent+0x1c>
   21bd8:	3130      	adds	r1, #48	; 0x30
   21bda:	1e94      	subs	r4, r2, #2
   21bdc:	f803 1c01 	strb.w	r1, [r3, #-1]
   21be0:	1c41      	adds	r1, r0, #1
   21be2:	4623      	mov	r3, r4
   21be4:	42ab      	cmp	r3, r5
   21be6:	d30a      	bcc.n	21bfe <__exponent+0x5c>
   21be8:	f10d 0309 	add.w	r3, sp, #9
   21bec:	1a9b      	subs	r3, r3, r2
   21bee:	42ac      	cmp	r4, r5
   21bf0:	bf88      	it	hi
   21bf2:	2300      	movhi	r3, #0
   21bf4:	3302      	adds	r3, #2
   21bf6:	4403      	add	r3, r0
   21bf8:	1a18      	subs	r0, r3, r0
   21bfa:	b003      	add	sp, #12
   21bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21bfe:	f813 6b01 	ldrb.w	r6, [r3], #1
   21c02:	f801 6f01 	strb.w	r6, [r1, #1]!
   21c06:	e7ed      	b.n	21be4 <__exponent+0x42>
   21c08:	2330      	movs	r3, #48	; 0x30
   21c0a:	3130      	adds	r1, #48	; 0x30
   21c0c:	7083      	strb	r3, [r0, #2]
   21c0e:	1d03      	adds	r3, r0, #4
   21c10:	70c1      	strb	r1, [r0, #3]
   21c12:	e7f1      	b.n	21bf8 <__exponent+0x56>

00021c14 <_printf_common>:
   21c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21c18:	4616      	mov	r6, r2
   21c1a:	4698      	mov	r8, r3
   21c1c:	688a      	ldr	r2, [r1, #8]
   21c1e:	4607      	mov	r7, r0
   21c20:	690b      	ldr	r3, [r1, #16]
   21c22:	460c      	mov	r4, r1
   21c24:	f8dd 9020 	ldr.w	r9, [sp, #32]
   21c28:	4293      	cmp	r3, r2
   21c2a:	bfb8      	it	lt
   21c2c:	4613      	movlt	r3, r2
   21c2e:	6033      	str	r3, [r6, #0]
   21c30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   21c34:	b10a      	cbz	r2, 21c3a <_printf_common+0x26>
   21c36:	3301      	adds	r3, #1
   21c38:	6033      	str	r3, [r6, #0]
   21c3a:	6823      	ldr	r3, [r4, #0]
   21c3c:	0699      	lsls	r1, r3, #26
   21c3e:	bf42      	ittt	mi
   21c40:	6833      	ldrmi	r3, [r6, #0]
   21c42:	3302      	addmi	r3, #2
   21c44:	6033      	strmi	r3, [r6, #0]
   21c46:	6825      	ldr	r5, [r4, #0]
   21c48:	f015 0506 	ands.w	r5, r5, #6
   21c4c:	d106      	bne.n	21c5c <_printf_common+0x48>
   21c4e:	f104 0a19 	add.w	sl, r4, #25
   21c52:	68e3      	ldr	r3, [r4, #12]
   21c54:	6832      	ldr	r2, [r6, #0]
   21c56:	1a9b      	subs	r3, r3, r2
   21c58:	42ab      	cmp	r3, r5
   21c5a:	dc2b      	bgt.n	21cb4 <_printf_common+0xa0>
   21c5c:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   21c60:	6822      	ldr	r2, [r4, #0]
   21c62:	3b00      	subs	r3, #0
   21c64:	bf18      	it	ne
   21c66:	2301      	movne	r3, #1
   21c68:	0692      	lsls	r2, r2, #26
   21c6a:	d430      	bmi.n	21cce <_printf_common+0xba>
   21c6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
   21c70:	4641      	mov	r1, r8
   21c72:	4638      	mov	r0, r7
   21c74:	47c8      	blx	r9
   21c76:	3001      	adds	r0, #1
   21c78:	d023      	beq.n	21cc2 <_printf_common+0xae>
   21c7a:	6823      	ldr	r3, [r4, #0]
   21c7c:	341a      	adds	r4, #26
   21c7e:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   21c82:	f003 0306 	and.w	r3, r3, #6
   21c86:	2b04      	cmp	r3, #4
   21c88:	bf0a      	itet	eq
   21c8a:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
   21c8e:	2500      	movne	r5, #0
   21c90:	6833      	ldreq	r3, [r6, #0]
   21c92:	f04f 0600 	mov.w	r6, #0
   21c96:	bf08      	it	eq
   21c98:	1aed      	subeq	r5, r5, r3
   21c9a:	f854 3c12 	ldr.w	r3, [r4, #-18]
   21c9e:	bf08      	it	eq
   21ca0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   21ca4:	4293      	cmp	r3, r2
   21ca6:	bfc4      	itt	gt
   21ca8:	1a9b      	subgt	r3, r3, r2
   21caa:	18ed      	addgt	r5, r5, r3
   21cac:	42b5      	cmp	r5, r6
   21cae:	d11a      	bne.n	21ce6 <_printf_common+0xd2>
   21cb0:	2000      	movs	r0, #0
   21cb2:	e008      	b.n	21cc6 <_printf_common+0xb2>
   21cb4:	2301      	movs	r3, #1
   21cb6:	4652      	mov	r2, sl
   21cb8:	4641      	mov	r1, r8
   21cba:	4638      	mov	r0, r7
   21cbc:	47c8      	blx	r9
   21cbe:	3001      	adds	r0, #1
   21cc0:	d103      	bne.n	21cca <_printf_common+0xb6>
   21cc2:	f04f 30ff 	mov.w	r0, #4294967295
   21cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   21cca:	3501      	adds	r5, #1
   21ccc:	e7c1      	b.n	21c52 <_printf_common+0x3e>
   21cce:	18e1      	adds	r1, r4, r3
   21cd0:	1c5a      	adds	r2, r3, #1
   21cd2:	2030      	movs	r0, #48	; 0x30
   21cd4:	3302      	adds	r3, #2
   21cd6:	4422      	add	r2, r4
   21cd8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   21cdc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   21ce0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   21ce4:	e7c2      	b.n	21c6c <_printf_common+0x58>
   21ce6:	2301      	movs	r3, #1
   21ce8:	4622      	mov	r2, r4
   21cea:	4641      	mov	r1, r8
   21cec:	4638      	mov	r0, r7
   21cee:	47c8      	blx	r9
   21cf0:	3001      	adds	r0, #1
   21cf2:	d0e6      	beq.n	21cc2 <_printf_common+0xae>
   21cf4:	3601      	adds	r6, #1
   21cf6:	e7d9      	b.n	21cac <_printf_common+0x98>

00021cf8 <strcpy>:
   21cf8:	4603      	mov	r3, r0
   21cfa:	f811 2b01 	ldrb.w	r2, [r1], #1
   21cfe:	f803 2b01 	strb.w	r2, [r3], #1
   21d02:	2a00      	cmp	r2, #0
   21d04:	d1f9      	bne.n	21cfa <strcpy+0x2>
   21d06:	4770      	bx	lr

00021d08 <strncmp>:
   21d08:	b510      	push	{r4, lr}
   21d0a:	b16a      	cbz	r2, 21d28 <strncmp+0x20>
   21d0c:	3901      	subs	r1, #1
   21d0e:	1884      	adds	r4, r0, r2
   21d10:	f810 2b01 	ldrb.w	r2, [r0], #1
   21d14:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   21d18:	429a      	cmp	r2, r3
   21d1a:	d103      	bne.n	21d24 <strncmp+0x1c>
   21d1c:	42a0      	cmp	r0, r4
   21d1e:	d001      	beq.n	21d24 <strncmp+0x1c>
   21d20:	2a00      	cmp	r2, #0
   21d22:	d1f5      	bne.n	21d10 <strncmp+0x8>
   21d24:	1ad0      	subs	r0, r2, r3
   21d26:	bd10      	pop	{r4, pc}
   21d28:	4610      	mov	r0, r2
   21d2a:	e7fc      	b.n	21d26 <strncmp+0x1e>

00021d2c <strncpy>:
   21d2c:	3901      	subs	r1, #1
   21d2e:	4603      	mov	r3, r0
   21d30:	b510      	push	{r4, lr}
   21d32:	b132      	cbz	r2, 21d42 <strncpy+0x16>
   21d34:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   21d38:	3a01      	subs	r2, #1
   21d3a:	f803 4b01 	strb.w	r4, [r3], #1
   21d3e:	2c00      	cmp	r4, #0
   21d40:	d1f7      	bne.n	21d32 <strncpy+0x6>
   21d42:	441a      	add	r2, r3
   21d44:	2100      	movs	r1, #0
   21d46:	4293      	cmp	r3, r2
   21d48:	d100      	bne.n	21d4c <strncpy+0x20>
   21d4a:	bd10      	pop	{r4, pc}
   21d4c:	f803 1b01 	strb.w	r1, [r3], #1
   21d50:	e7f9      	b.n	21d46 <strncpy+0x1a>

00021d52 <strnlen>:
   21d52:	4602      	mov	r2, r0
   21d54:	4401      	add	r1, r0
   21d56:	b510      	push	{r4, lr}
   21d58:	428a      	cmp	r2, r1
   21d5a:	4613      	mov	r3, r2
   21d5c:	d003      	beq.n	21d66 <strnlen+0x14>
   21d5e:	781c      	ldrb	r4, [r3, #0]
   21d60:	3201      	adds	r2, #1
   21d62:	2c00      	cmp	r4, #0
   21d64:	d1f8      	bne.n	21d58 <strnlen+0x6>
   21d66:	1a18      	subs	r0, r3, r0
   21d68:	bd10      	pop	{r4, pc}

00021d6a <quorem>:
   21d6a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21d6e:	6903      	ldr	r3, [r0, #16]
   21d70:	4607      	mov	r7, r0
   21d72:	690c      	ldr	r4, [r1, #16]
   21d74:	42a3      	cmp	r3, r4
   21d76:	f2c0 8083 	blt.w	21e80 <quorem+0x116>
   21d7a:	3c01      	subs	r4, #1
   21d7c:	f100 0514 	add.w	r5, r0, #20
   21d80:	f101 0814 	add.w	r8, r1, #20
   21d84:	00a3      	lsls	r3, r4, #2
   21d86:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   21d8a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   21d8e:	9300      	str	r3, [sp, #0]
   21d90:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   21d94:	9301      	str	r3, [sp, #4]
   21d96:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   21d9a:	3301      	adds	r3, #1
   21d9c:	429a      	cmp	r2, r3
   21d9e:	fbb2 f6f3 	udiv	r6, r2, r3
   21da2:	d331      	bcc.n	21e08 <quorem+0x9e>
   21da4:	f04f 0a00 	mov.w	sl, #0
   21da8:	46c4      	mov	ip, r8
   21daa:	46ae      	mov	lr, r5
   21dac:	46d3      	mov	fp, sl
   21dae:	f85c 3b04 	ldr.w	r3, [ip], #4
   21db2:	b298      	uxth	r0, r3
   21db4:	45e1      	cmp	r9, ip
   21db6:	ea4f 4313 	mov.w	r3, r3, lsr #16
   21dba:	fb06 a000 	mla	r0, r6, r0, sl
   21dbe:	ea4f 4210 	mov.w	r2, r0, lsr #16
   21dc2:	b280      	uxth	r0, r0
   21dc4:	fb06 2303 	mla	r3, r6, r3, r2
   21dc8:	f8de 2000 	ldr.w	r2, [lr]
   21dcc:	b292      	uxth	r2, r2
   21dce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   21dd2:	eba2 0200 	sub.w	r2, r2, r0
   21dd6:	b29b      	uxth	r3, r3
   21dd8:	f8de 0000 	ldr.w	r0, [lr]
   21ddc:	445a      	add	r2, fp
   21dde:	ebc3 4322 	rsb	r3, r3, r2, asr #16
   21de2:	b292      	uxth	r2, r2
   21de4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
   21de8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   21dec:	ea4f 4b23 	mov.w	fp, r3, asr #16
   21df0:	f84e 2b04 	str.w	r2, [lr], #4
   21df4:	d2db      	bcs.n	21dae <quorem+0x44>
   21df6:	9b00      	ldr	r3, [sp, #0]
   21df8:	58eb      	ldr	r3, [r5, r3]
   21dfa:	b92b      	cbnz	r3, 21e08 <quorem+0x9e>
   21dfc:	9b01      	ldr	r3, [sp, #4]
   21dfe:	3b04      	subs	r3, #4
   21e00:	429d      	cmp	r5, r3
   21e02:	461a      	mov	r2, r3
   21e04:	d330      	bcc.n	21e68 <quorem+0xfe>
   21e06:	613c      	str	r4, [r7, #16]
   21e08:	4638      	mov	r0, r7
   21e0a:	f000 f8cd 	bl	21fa8 <__mcmp>
   21e0e:	2800      	cmp	r0, #0
   21e10:	db26      	blt.n	21e60 <quorem+0xf6>
   21e12:	4629      	mov	r1, r5
   21e14:	2000      	movs	r0, #0
   21e16:	f858 2b04 	ldr.w	r2, [r8], #4
   21e1a:	f8d1 c000 	ldr.w	ip, [r1]
   21e1e:	fa1f fe82 	uxth.w	lr, r2
   21e22:	45c1      	cmp	r9, r8
   21e24:	fa1f f38c 	uxth.w	r3, ip
   21e28:	ea4f 4212 	mov.w	r2, r2, lsr #16
   21e2c:	eba3 030e 	sub.w	r3, r3, lr
   21e30:	4403      	add	r3, r0
   21e32:	ebc2 4223 	rsb	r2, r2, r3, asr #16
   21e36:	b29b      	uxth	r3, r3
   21e38:	eb02 421c 	add.w	r2, r2, ip, lsr #16
   21e3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   21e40:	ea4f 4022 	mov.w	r0, r2, asr #16
   21e44:	f841 3b04 	str.w	r3, [r1], #4
   21e48:	d2e5      	bcs.n	21e16 <quorem+0xac>
   21e4a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   21e4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   21e52:	b922      	cbnz	r2, 21e5e <quorem+0xf4>
   21e54:	3b04      	subs	r3, #4
   21e56:	429d      	cmp	r5, r3
   21e58:	461a      	mov	r2, r3
   21e5a:	d30b      	bcc.n	21e74 <quorem+0x10a>
   21e5c:	613c      	str	r4, [r7, #16]
   21e5e:	3601      	adds	r6, #1
   21e60:	4630      	mov	r0, r6
   21e62:	b003      	add	sp, #12
   21e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21e68:	6812      	ldr	r2, [r2, #0]
   21e6a:	3b04      	subs	r3, #4
   21e6c:	2a00      	cmp	r2, #0
   21e6e:	d1ca      	bne.n	21e06 <quorem+0x9c>
   21e70:	3c01      	subs	r4, #1
   21e72:	e7c5      	b.n	21e00 <quorem+0x96>
   21e74:	6812      	ldr	r2, [r2, #0]
   21e76:	3b04      	subs	r3, #4
   21e78:	2a00      	cmp	r2, #0
   21e7a:	d1ef      	bne.n	21e5c <quorem+0xf2>
   21e7c:	3c01      	subs	r4, #1
   21e7e:	e7ea      	b.n	21e56 <quorem+0xec>
   21e80:	2000      	movs	r0, #0
   21e82:	e7ee      	b.n	21e62 <quorem+0xf8>

00021e84 <__sfmoreglue>:
   21e84:	b570      	push	{r4, r5, r6, lr}
   21e86:	2368      	movs	r3, #104	; 0x68
   21e88:	1e4d      	subs	r5, r1, #1
   21e8a:	460e      	mov	r6, r1
   21e8c:	435d      	muls	r5, r3
   21e8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
   21e92:	f7f8 fe9b 	bl	1abcc <_malloc_r>
   21e96:	4604      	mov	r4, r0
   21e98:	b140      	cbz	r0, 21eac <__sfmoreglue+0x28>
   21e9a:	2100      	movs	r1, #0
   21e9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
   21ea0:	e9c0 1600 	strd	r1, r6, [r0]
   21ea4:	300c      	adds	r0, #12
   21ea6:	60a0      	str	r0, [r4, #8]
   21ea8:	f7ff fdfe 	bl	21aa8 <memset>
   21eac:	4620      	mov	r0, r4
   21eae:	bd70      	pop	{r4, r5, r6, pc}

00021eb0 <_fwalk_reent>:
   21eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21eb4:	4606      	mov	r6, r0
   21eb6:	4688      	mov	r8, r1
   21eb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
   21ebc:	2700      	movs	r7, #0
   21ebe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   21ec2:	f1b9 0901 	subs.w	r9, r9, #1
   21ec6:	d505      	bpl.n	21ed4 <_fwalk_reent+0x24>
   21ec8:	6824      	ldr	r4, [r4, #0]
   21eca:	2c00      	cmp	r4, #0
   21ecc:	d1f7      	bne.n	21ebe <_fwalk_reent+0xe>
   21ece:	4638      	mov	r0, r7
   21ed0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21ed4:	89ab      	ldrh	r3, [r5, #12]
   21ed6:	2b01      	cmp	r3, #1
   21ed8:	d907      	bls.n	21eea <_fwalk_reent+0x3a>
   21eda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   21ede:	3301      	adds	r3, #1
   21ee0:	d003      	beq.n	21eea <_fwalk_reent+0x3a>
   21ee2:	4629      	mov	r1, r5
   21ee4:	4630      	mov	r0, r6
   21ee6:	47c0      	blx	r8
   21ee8:	4307      	orrs	r7, r0
   21eea:	3568      	adds	r5, #104	; 0x68
   21eec:	e7e9      	b.n	21ec2 <_fwalk_reent+0x12>

00021eee <memchr>:
   21eee:	b2c9      	uxtb	r1, r1
   21ef0:	4603      	mov	r3, r0
   21ef2:	4402      	add	r2, r0
   21ef4:	b510      	push	{r4, lr}
   21ef6:	4293      	cmp	r3, r2
   21ef8:	4618      	mov	r0, r3
   21efa:	d101      	bne.n	21f00 <memchr+0x12>
   21efc:	2000      	movs	r0, #0
   21efe:	e003      	b.n	21f08 <memchr+0x1a>
   21f00:	7804      	ldrb	r4, [r0, #0]
   21f02:	3301      	adds	r3, #1
   21f04:	428c      	cmp	r4, r1
   21f06:	d1f6      	bne.n	21ef6 <memchr+0x8>
   21f08:	bd10      	pop	{r4, pc}

00021f0a <__hi0bits>:
   21f0a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   21f0e:	4603      	mov	r3, r0
   21f10:	bf36      	itet	cc
   21f12:	0403      	lslcc	r3, r0, #16
   21f14:	2000      	movcs	r0, #0
   21f16:	2010      	movcc	r0, #16
   21f18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   21f1c:	bf3c      	itt	cc
   21f1e:	021b      	lslcc	r3, r3, #8
   21f20:	3008      	addcc	r0, #8
   21f22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   21f26:	bf3c      	itt	cc
   21f28:	011b      	lslcc	r3, r3, #4
   21f2a:	3004      	addcc	r0, #4
   21f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   21f30:	d303      	bcc.n	21f3a <__hi0bits+0x30>
   21f32:	2b00      	cmp	r3, #0
   21f34:	db0a      	blt.n	21f4c <__hi0bits+0x42>
   21f36:	3001      	adds	r0, #1
   21f38:	4770      	bx	lr
   21f3a:	009b      	lsls	r3, r3, #2
   21f3c:	d501      	bpl.n	21f42 <__hi0bits+0x38>
   21f3e:	3002      	adds	r0, #2
   21f40:	4770      	bx	lr
   21f42:	005b      	lsls	r3, r3, #1
   21f44:	d501      	bpl.n	21f4a <__hi0bits+0x40>
   21f46:	3003      	adds	r0, #3
   21f48:	4770      	bx	lr
   21f4a:	2020      	movs	r0, #32
   21f4c:	4770      	bx	lr

00021f4e <__lo0bits>:
   21f4e:	6803      	ldr	r3, [r0, #0]
   21f50:	4602      	mov	r2, r0
   21f52:	f013 0007 	ands.w	r0, r3, #7
   21f56:	d00b      	beq.n	21f70 <__lo0bits+0x22>
   21f58:	07d9      	lsls	r1, r3, #31
   21f5a:	d421      	bmi.n	21fa0 <__lo0bits+0x52>
   21f5c:	0798      	lsls	r0, r3, #30
   21f5e:	bf47      	ittee	mi
   21f60:	085b      	lsrmi	r3, r3, #1
   21f62:	2001      	movmi	r0, #1
   21f64:	089b      	lsrpl	r3, r3, #2
   21f66:	2002      	movpl	r0, #2
   21f68:	bf4c      	ite	mi
   21f6a:	6013      	strmi	r3, [r2, #0]
   21f6c:	6013      	strpl	r3, [r2, #0]
   21f6e:	4770      	bx	lr
   21f70:	b299      	uxth	r1, r3
   21f72:	b909      	cbnz	r1, 21f78 <__lo0bits+0x2a>
   21f74:	0c1b      	lsrs	r3, r3, #16
   21f76:	2010      	movs	r0, #16
   21f78:	b2d9      	uxtb	r1, r3
   21f7a:	b909      	cbnz	r1, 21f80 <__lo0bits+0x32>
   21f7c:	3008      	adds	r0, #8
   21f7e:	0a1b      	lsrs	r3, r3, #8
   21f80:	0719      	lsls	r1, r3, #28
   21f82:	bf04      	itt	eq
   21f84:	091b      	lsreq	r3, r3, #4
   21f86:	3004      	addeq	r0, #4
   21f88:	0799      	lsls	r1, r3, #30
   21f8a:	bf04      	itt	eq
   21f8c:	089b      	lsreq	r3, r3, #2
   21f8e:	3002      	addeq	r0, #2
   21f90:	07d9      	lsls	r1, r3, #31
   21f92:	d403      	bmi.n	21f9c <__lo0bits+0x4e>
   21f94:	085b      	lsrs	r3, r3, #1
   21f96:	f100 0001 	add.w	r0, r0, #1
   21f9a:	d003      	beq.n	21fa4 <__lo0bits+0x56>
   21f9c:	6013      	str	r3, [r2, #0]
   21f9e:	4770      	bx	lr
   21fa0:	2000      	movs	r0, #0
   21fa2:	4770      	bx	lr
   21fa4:	2020      	movs	r0, #32
   21fa6:	4770      	bx	lr

00021fa8 <__mcmp>:
   21fa8:	4603      	mov	r3, r0
   21faa:	690a      	ldr	r2, [r1, #16]
   21fac:	6900      	ldr	r0, [r0, #16]
   21fae:	1a80      	subs	r0, r0, r2
   21fb0:	b530      	push	{r4, r5, lr}
   21fb2:	d10e      	bne.n	21fd2 <__mcmp+0x2a>
   21fb4:	3314      	adds	r3, #20
   21fb6:	3114      	adds	r1, #20
   21fb8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   21fbc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   21fc0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   21fc4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   21fc8:	4295      	cmp	r5, r2
   21fca:	d003      	beq.n	21fd4 <__mcmp+0x2c>
   21fcc:	d205      	bcs.n	21fda <__mcmp+0x32>
   21fce:	f04f 30ff 	mov.w	r0, #4294967295
   21fd2:	bd30      	pop	{r4, r5, pc}
   21fd4:	42a3      	cmp	r3, r4
   21fd6:	d3f3      	bcc.n	21fc0 <__mcmp+0x18>
   21fd8:	e7fb      	b.n	21fd2 <__mcmp+0x2a>
   21fda:	2001      	movs	r0, #1
   21fdc:	e7f9      	b.n	21fd2 <__mcmp+0x2a>

00021fde <__sfputc_r>:
   21fde:	6893      	ldr	r3, [r2, #8]
   21fe0:	3b01      	subs	r3, #1
   21fe2:	2b00      	cmp	r3, #0
   21fe4:	6093      	str	r3, [r2, #8]
   21fe6:	b410      	push	{r4}
   21fe8:	da07      	bge.n	21ffa <__sfputc_r+0x1c>
   21fea:	6994      	ldr	r4, [r2, #24]
   21fec:	42a3      	cmp	r3, r4
   21fee:	db01      	blt.n	21ff4 <__sfputc_r+0x16>
   21ff0:	290a      	cmp	r1, #10
   21ff2:	d102      	bne.n	21ffa <__sfputc_r+0x1c>
   21ff4:	bc10      	pop	{r4}
   21ff6:	f7f9 bee9 	b.w	1bdcc <__swbuf_r>
   21ffa:	6813      	ldr	r3, [r2, #0]
   21ffc:	1c58      	adds	r0, r3, #1
   21ffe:	6010      	str	r0, [r2, #0]
   22000:	4608      	mov	r0, r1
   22002:	7019      	strb	r1, [r3, #0]
   22004:	bc10      	pop	{r4}
   22006:	4770      	bx	lr

00022008 <__sfputs_r>:
   22008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2200a:	4606      	mov	r6, r0
   2200c:	460f      	mov	r7, r1
   2200e:	4614      	mov	r4, r2
   22010:	18d5      	adds	r5, r2, r3
   22012:	42ac      	cmp	r4, r5
   22014:	d101      	bne.n	2201a <__sfputs_r+0x12>
   22016:	2000      	movs	r0, #0
   22018:	e007      	b.n	2202a <__sfputs_r+0x22>
   2201a:	463a      	mov	r2, r7
   2201c:	f814 1b01 	ldrb.w	r1, [r4], #1
   22020:	4630      	mov	r0, r6
   22022:	f7ff ffdc 	bl	21fde <__sfputc_r>
   22026:	1c43      	adds	r3, r0, #1
   22028:	d1f3      	bne.n	22012 <__sfputs_r+0xa>
   2202a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002202c <__sread>:
   2202c:	b510      	push	{r4, lr}
   2202e:	460c      	mov	r4, r1
   22030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   22034:	f7fa f868 	bl	1c108 <_read_r>
   22038:	2800      	cmp	r0, #0
   2203a:	bfab      	itete	ge
   2203c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   2203e:	89a3      	ldrhlt	r3, [r4, #12]
   22040:	181b      	addge	r3, r3, r0
   22042:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   22046:	bfac      	ite	ge
   22048:	6563      	strge	r3, [r4, #84]	; 0x54
   2204a:	81a3      	strhlt	r3, [r4, #12]
   2204c:	bd10      	pop	{r4, pc}

0002204e <__swrite>:
   2204e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22052:	461f      	mov	r7, r3
   22054:	898b      	ldrh	r3, [r1, #12]
   22056:	4605      	mov	r5, r0
   22058:	460c      	mov	r4, r1
   2205a:	05db      	lsls	r3, r3, #23
   2205c:	4616      	mov	r6, r2
   2205e:	d505      	bpl.n	2206c <__swrite+0x1e>
   22060:	2302      	movs	r3, #2
   22062:	2200      	movs	r2, #0
   22064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   22068:	f7f9 fffc 	bl	1c064 <_lseek_r>
   2206c:	89a3      	ldrh	r3, [r4, #12]
   2206e:	4632      	mov	r2, r6
   22070:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   22074:	4628      	mov	r0, r5
   22076:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   2207a:	81a3      	strh	r3, [r4, #12]
   2207c:	463b      	mov	r3, r7
   2207e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   22082:	f7f9 bef5 	b.w	1be70 <_write_r>

00022086 <__sseek>:
   22086:	b510      	push	{r4, lr}
   22088:	460c      	mov	r4, r1
   2208a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2208e:	f7f9 ffe9 	bl	1c064 <_lseek_r>
   22092:	1c43      	adds	r3, r0, #1
   22094:	89a3      	ldrh	r3, [r4, #12]
   22096:	bf15      	itete	ne
   22098:	6560      	strne	r0, [r4, #84]	; 0x54
   2209a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   2209e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   220a2:	81a3      	strheq	r3, [r4, #12]
   220a4:	bf18      	it	ne
   220a6:	81a3      	strhne	r3, [r4, #12]
   220a8:	bd10      	pop	{r4, pc}

000220aa <__sclose>:
   220aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   220ae:	f7f9 bf7b 	b.w	1bfa8 <_close_r>

000220b2 <__sflush_r>:
   220b2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   220b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   220b8:	0717      	lsls	r7, r2, #28
   220ba:	4605      	mov	r5, r0
   220bc:	460c      	mov	r4, r1
   220be:	d456      	bmi.n	2216e <__sflush_r+0xbc>
   220c0:	684b      	ldr	r3, [r1, #4]
   220c2:	2b00      	cmp	r3, #0
   220c4:	dc02      	bgt.n	220cc <__sflush_r+0x1a>
   220c6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   220c8:	2b00      	cmp	r3, #0
   220ca:	dd3d      	ble.n	22148 <__sflush_r+0x96>
   220cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   220ce:	2e00      	cmp	r6, #0
   220d0:	d03a      	beq.n	22148 <__sflush_r+0x96>
   220d2:	2300      	movs	r3, #0
   220d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   220d8:	682f      	ldr	r7, [r5, #0]
   220da:	6a21      	ldr	r1, [r4, #32]
   220dc:	602b      	str	r3, [r5, #0]
   220de:	d025      	beq.n	2212c <__sflush_r+0x7a>
   220e0:	6d62      	ldr	r2, [r4, #84]	; 0x54
   220e2:	89a3      	ldrh	r3, [r4, #12]
   220e4:	0758      	lsls	r0, r3, #29
   220e6:	d505      	bpl.n	220f4 <__sflush_r+0x42>
   220e8:	6863      	ldr	r3, [r4, #4]
   220ea:	1ad2      	subs	r2, r2, r3
   220ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
   220ee:	b10b      	cbz	r3, 220f4 <__sflush_r+0x42>
   220f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
   220f2:	1ad2      	subs	r2, r2, r3
   220f4:	6a21      	ldr	r1, [r4, #32]
   220f6:	2300      	movs	r3, #0
   220f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   220fa:	4628      	mov	r0, r5
   220fc:	47b0      	blx	r6
   220fe:	1c41      	adds	r1, r0, #1
   22100:	d024      	beq.n	2214c <__sflush_r+0x9a>
   22102:	2300      	movs	r3, #0
   22104:	6063      	str	r3, [r4, #4]
   22106:	6923      	ldr	r3, [r4, #16]
   22108:	6023      	str	r3, [r4, #0]
   2210a:	89a3      	ldrh	r3, [r4, #12]
   2210c:	04da      	lsls	r2, r3, #19
   2210e:	d500      	bpl.n	22112 <__sflush_r+0x60>
   22110:	6560      	str	r0, [r4, #84]	; 0x54
   22112:	6b61      	ldr	r1, [r4, #52]	; 0x34
   22114:	602f      	str	r7, [r5, #0]
   22116:	b1b9      	cbz	r1, 22148 <__sflush_r+0x96>
   22118:	f104 0344 	add.w	r3, r4, #68	; 0x44
   2211c:	4299      	cmp	r1, r3
   2211e:	d002      	beq.n	22126 <__sflush_r+0x74>
   22120:	4628      	mov	r0, r5
   22122:	f7f8 fd09 	bl	1ab38 <_free_r>
   22126:	2300      	movs	r3, #0
   22128:	6363      	str	r3, [r4, #52]	; 0x34
   2212a:	e00d      	b.n	22148 <__sflush_r+0x96>
   2212c:	2301      	movs	r3, #1
   2212e:	4628      	mov	r0, r5
   22130:	47b0      	blx	r6
   22132:	1c46      	adds	r6, r0, #1
   22134:	4602      	mov	r2, r0
   22136:	d1d4      	bne.n	220e2 <__sflush_r+0x30>
   22138:	682b      	ldr	r3, [r5, #0]
   2213a:	2b00      	cmp	r3, #0
   2213c:	d0d1      	beq.n	220e2 <__sflush_r+0x30>
   2213e:	2b1d      	cmp	r3, #29
   22140:	d001      	beq.n	22146 <__sflush_r+0x94>
   22142:	2b16      	cmp	r3, #22
   22144:	d129      	bne.n	2219a <__sflush_r+0xe8>
   22146:	602f      	str	r7, [r5, #0]
   22148:	2000      	movs	r0, #0
   2214a:	e02d      	b.n	221a8 <__sflush_r+0xf6>
   2214c:	682a      	ldr	r2, [r5, #0]
   2214e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   22152:	b142      	cbz	r2, 22166 <__sflush_r+0xb4>
   22154:	2a1d      	cmp	r2, #29
   22156:	d001      	beq.n	2215c <__sflush_r+0xaa>
   22158:	2a16      	cmp	r2, #22
   2215a:	d120      	bne.n	2219e <__sflush_r+0xec>
   2215c:	2300      	movs	r3, #0
   2215e:	6063      	str	r3, [r4, #4]
   22160:	6923      	ldr	r3, [r4, #16]
   22162:	6023      	str	r3, [r4, #0]
   22164:	e7d5      	b.n	22112 <__sflush_r+0x60>
   22166:	6062      	str	r2, [r4, #4]
   22168:	6922      	ldr	r2, [r4, #16]
   2216a:	6022      	str	r2, [r4, #0]
   2216c:	e7ce      	b.n	2210c <__sflush_r+0x5a>
   2216e:	690f      	ldr	r7, [r1, #16]
   22170:	2f00      	cmp	r7, #0
   22172:	d0e9      	beq.n	22148 <__sflush_r+0x96>
   22174:	0793      	lsls	r3, r2, #30
   22176:	680e      	ldr	r6, [r1, #0]
   22178:	600f      	str	r7, [r1, #0]
   2217a:	bf0c      	ite	eq
   2217c:	694b      	ldreq	r3, [r1, #20]
   2217e:	2300      	movne	r3, #0
   22180:	1bf6      	subs	r6, r6, r7
   22182:	608b      	str	r3, [r1, #8]
   22184:	2e00      	cmp	r6, #0
   22186:	dddf      	ble.n	22148 <__sflush_r+0x96>
   22188:	4633      	mov	r3, r6
   2218a:	463a      	mov	r2, r7
   2218c:	6a21      	ldr	r1, [r4, #32]
   2218e:	4628      	mov	r0, r5
   22190:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
   22194:	47e0      	blx	ip
   22196:	2800      	cmp	r0, #0
   22198:	dc07      	bgt.n	221aa <__sflush_r+0xf8>
   2219a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2219e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   221a2:	f04f 30ff 	mov.w	r0, #4294967295
   221a6:	81a3      	strh	r3, [r4, #12]
   221a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   221aa:	4407      	add	r7, r0
   221ac:	1a36      	subs	r6, r6, r0
   221ae:	e7e9      	b.n	22184 <__sflush_r+0xd2>

000221b0 <__swhatbuf_r>:
   221b0:	b570      	push	{r4, r5, r6, lr}
   221b2:	460c      	mov	r4, r1
   221b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   221b8:	b096      	sub	sp, #88	; 0x58
   221ba:	4615      	mov	r5, r2
   221bc:	2900      	cmp	r1, #0
   221be:	461e      	mov	r6, r3
   221c0:	da0c      	bge.n	221dc <__swhatbuf_r+0x2c>
   221c2:	89a3      	ldrh	r3, [r4, #12]
   221c4:	2100      	movs	r1, #0
   221c6:	f013 0f80 	tst.w	r3, #128	; 0x80
   221ca:	bf14      	ite	ne
   221cc:	2340      	movne	r3, #64	; 0x40
   221ce:	f44f 6380 	moveq.w	r3, #1024	; 0x400
   221d2:	2000      	movs	r0, #0
   221d4:	6031      	str	r1, [r6, #0]
   221d6:	602b      	str	r3, [r5, #0]
   221d8:	b016      	add	sp, #88	; 0x58
   221da:	bd70      	pop	{r4, r5, r6, pc}
   221dc:	466a      	mov	r2, sp
   221de:	f7f9 ffa5 	bl	1c12c <_fstat_r>
   221e2:	2800      	cmp	r0, #0
   221e4:	dbed      	blt.n	221c2 <__swhatbuf_r+0x12>
   221e6:	9901      	ldr	r1, [sp, #4]
   221e8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
   221ec:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
   221f0:	4259      	negs	r1, r3
   221f2:	4159      	adcs	r1, r3
   221f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   221f8:	e7eb      	b.n	221d2 <__swhatbuf_r+0x22>

000221fa <__ascii_mbtowc>:
   221fa:	b082      	sub	sp, #8
   221fc:	b901      	cbnz	r1, 22200 <__ascii_mbtowc+0x6>
   221fe:	a901      	add	r1, sp, #4
   22200:	b142      	cbz	r2, 22214 <__ascii_mbtowc+0x1a>
   22202:	b14b      	cbz	r3, 22218 <__ascii_mbtowc+0x1e>
   22204:	7813      	ldrb	r3, [r2, #0]
   22206:	600b      	str	r3, [r1, #0]
   22208:	7812      	ldrb	r2, [r2, #0]
   2220a:	1e10      	subs	r0, r2, #0
   2220c:	bf18      	it	ne
   2220e:	2001      	movne	r0, #1
   22210:	b002      	add	sp, #8
   22212:	4770      	bx	lr
   22214:	4610      	mov	r0, r2
   22216:	e7fb      	b.n	22210 <__ascii_mbtowc+0x16>
   22218:	f06f 0001 	mvn.w	r0, #1
   2221c:	e7f8      	b.n	22210 <__ascii_mbtowc+0x16>

0002221e <__ascii_wctomb>:
   2221e:	4603      	mov	r3, r0
   22220:	4608      	mov	r0, r1
   22222:	b141      	cbz	r1, 22236 <__ascii_wctomb+0x18>
   22224:	2aff      	cmp	r2, #255	; 0xff
   22226:	d904      	bls.n	22232 <__ascii_wctomb+0x14>
   22228:	228a      	movs	r2, #138	; 0x8a
   2222a:	f04f 30ff 	mov.w	r0, #4294967295
   2222e:	601a      	str	r2, [r3, #0]
   22230:	4770      	bx	lr
   22232:	2001      	movs	r0, #1
   22234:	700a      	strb	r2, [r1, #0]
   22236:	4770      	bx	lr

00022238 <abort>:
   22238:	2006      	movs	r0, #6
   2223a:	b508      	push	{r3, lr}
   2223c:	f7f9 ff98 	bl	1c170 <raise>
   22240:	2001      	movs	r0, #1
   22242:	f7ec f9db 	bl	e5fc <_exit>

00022246 <_raise_r>:
   22246:	291f      	cmp	r1, #31
   22248:	b538      	push	{r3, r4, r5, lr}
   2224a:	4605      	mov	r5, r0
   2224c:	460c      	mov	r4, r1
   2224e:	d904      	bls.n	2225a <_raise_r+0x14>
   22250:	2316      	movs	r3, #22
   22252:	6003      	str	r3, [r0, #0]
   22254:	f04f 30ff 	mov.w	r0, #4294967295
   22258:	bd38      	pop	{r3, r4, r5, pc}
   2225a:	6c42      	ldr	r2, [r0, #68]	; 0x44
   2225c:	b112      	cbz	r2, 22264 <_raise_r+0x1e>
   2225e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   22262:	b94b      	cbnz	r3, 22278 <_raise_r+0x32>
   22264:	4628      	mov	r0, r5
   22266:	f000 f816 	bl	22296 <_getpid_r>
   2226a:	4622      	mov	r2, r4
   2226c:	4601      	mov	r1, r0
   2226e:	4628      	mov	r0, r5
   22270:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   22274:	f7f9 bf84 	b.w	1c180 <_kill_r>
   22278:	2b01      	cmp	r3, #1
   2227a:	d00a      	beq.n	22292 <_raise_r+0x4c>
   2227c:	1c59      	adds	r1, r3, #1
   2227e:	d103      	bne.n	22288 <_raise_r+0x42>
   22280:	2316      	movs	r3, #22
   22282:	6003      	str	r3, [r0, #0]
   22284:	2001      	movs	r0, #1
   22286:	e7e7      	b.n	22258 <_raise_r+0x12>
   22288:	2100      	movs	r1, #0
   2228a:	4620      	mov	r0, r4
   2228c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
   22290:	4798      	blx	r3
   22292:	2000      	movs	r0, #0
   22294:	e7e0      	b.n	22258 <_raise_r+0x12>

00022296 <_getpid_r>:
   22296:	f7fb bca5 	b.w	1dbe4 <_getpid>
	...
